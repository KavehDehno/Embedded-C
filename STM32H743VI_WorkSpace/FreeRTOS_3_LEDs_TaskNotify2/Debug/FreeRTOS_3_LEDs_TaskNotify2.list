
FreeRTOS_3_LEDs_TaskNotify2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08008f68  08008f68  00018f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080091ac  080091ac  000191ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080091b0  080091b0  000191b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  080091b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0007d7f8  24000020  080091d4  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2407d818  080091d4  0002d818  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020e8a  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000397f  00000000  00000000  00040ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a70  00000000  00000000  00044858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000018b8  00000000  00000000  000462c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038743  00000000  00000000  00047b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e4bf  00000000  00000000  000802c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00179998  00000000  00000000  0009e782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0021811a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007154  00000000  00000000  0021816c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000020 	.word	0x24000020
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f50 	.word	0x08008f50

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000024 	.word	0x24000024
 80002dc:	08008f50 	.word	0x08008f50

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	2400523c 	.word	0x2400523c

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80003ce:	b480      	push	{r7}
 80003d0:	b085      	sub	sp, #20
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000416:	b480      	push	{r7}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800042c:	d103      	bne.n	8000436 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e00c      	b.n	8000450 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3308      	adds	r3, #8
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e002      	b.n	8000444 <vListInsert+0x2e>
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	429a      	cmp	r2, r3
 800044e:	d2f6      	bcs.n	800043e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	6892      	ldr	r2, [r2, #8]
 800049e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6852      	ldr	r2, [r2, #4]
 80004a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d103      	bne.n	80004bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	1e5a      	subs	r2, r3, #1
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 f931 	bl	8001758 <pvPortMalloc>
 80004f6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00e      	beq.n	800051c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80004fe:	205c      	movs	r0, #92	; 0x5c
 8000500:	f001 f92a 	bl	8001758 <pvPortMalloc>
 8000504:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	631a      	str	r2, [r3, #48]	; 0x30
 8000512:	e005      	b.n	8000520 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000514:	6978      	ldr	r0, [r7, #20]
 8000516:	f001 fa05 	bl	8001924 <vPortFree>
 800051a:	e001      	b.n	8000520 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d013      	beq.n	800054e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000526:	88fa      	ldrh	r2, [r7, #6]
 8000528:	2300      	movs	r3, #0
 800052a:	9303      	str	r3, [sp, #12]
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68b9      	ldr	r1, [r7, #8]
 800053c:	68f8      	ldr	r0, [r7, #12]
 800053e:	f000 f80e 	bl	800055e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000542:	69f8      	ldr	r0, [r7, #28]
 8000544:	f000 f8a4 	bl	8000690 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000548:	2301      	movs	r3, #1
 800054a:	61bb      	str	r3, [r7, #24]
 800054c:	e002      	b.n	8000554 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000554:	69bb      	ldr	r3, [r7, #24]
    }
 8000556:	4618      	mov	r0, r3
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b088      	sub	sp, #32
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800056e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	461a      	mov	r2, r3
 8000576:	21a5      	movs	r1, #165	; 0xa5
 8000578:	f008 fce2 	bl	8008f40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000586:	440b      	add	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	f023 0307 	bic.w	r3, r3, #7
 8000594:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00c      	beq.n	80005ba <prvInitialiseNewTask+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	b672      	cpsid	i
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	b662      	cpsie	i
 80005b4:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d01f      	beq.n	8000600 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	e012      	b.n	80005ec <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	4413      	add	r3, r2
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	4413      	add	r3, r2
 80005d4:	3334      	adds	r3, #52	; 0x34
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3301      	adds	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d9e9      	bls.n	80005c6 <prvInitialiseNewTask+0x68>
 80005f2:	e000      	b.n	80005f6 <prvInitialiseNewTask+0x98>
            {
                break;
 80005f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80005fe:	e003      	b.n	8000608 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800060a:	2b06      	cmp	r3, #6
 800060c:	d901      	bls.n	8000612 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800060e:	2306      	movs	r3, #6
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800061c:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000620:	2200      	movs	r2, #0
 8000622:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000626:	3304      	adds	r3, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fec3 	bl	80003b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	3318      	adds	r3, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff febe 	bl	80003b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800063c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000640:	f1c3 0207 	rsb	r2, r3, #7
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800064a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000650:	3354      	adds	r3, #84	; 0x54
 8000652:	2204      	movs	r2, #4
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f008 fc72 	bl	8008f40 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	3358      	adds	r3, #88	; 0x58
 8000660:	2201      	movs	r2, #1
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f008 fc6b 	bl	8008f40 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	69b8      	ldr	r0, [r7, #24]
 8000670:	f000 fe34 	bl	80012dc <pxPortInitialiseStack>
 8000674:	4602      	mov	r2, r0
 8000676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000678:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000684:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000698:	f000 ff32 	bl	8001500 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 80006a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80006ae:	4a32      	ldr	r2, [pc, #200]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80006b4:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d110      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80006bc:	f000 fb7a 	bl	8000db4 <prvInitialiseTaskLists>
 80006c0:	e00d      	b.n	80006de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <prvAddNewTaskToReadyList+0xec>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d802      	bhi.n	80006de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d016      	beq.n	8000724 <prvAddNewTaskToReadyList+0x94>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fbfd 	bl	8003ef8 <SEGGER_SYSVIEW_OnTaskCreate>
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	461d      	mov	r5, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	461c      	mov	r4, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	1ae3      	subs	r3, r4, r3
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	462b      	mov	r3, r5
 8000720:	f001 fad2 	bl	8001cc8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fc6a 	bl	8004000 <SEGGER_SYSVIEW_OnTaskStartReady>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000730:	2201      	movs	r2, #1
 8000732:	409a      	lsls	r2, r3
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <prvAddNewTaskToReadyList+0xf4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4313      	orrs	r3, r2
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <prvAddNewTaskToReadyList+0xf4>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <prvAddNewTaskToReadyList+0xf8>)
 800074c:	441a      	add	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3304      	adds	r3, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f7ff fe3a 	bl	80003ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800075a:	f000 ff05 	bl	8001568 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <prvAddNewTaskToReadyList+0xec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 8000768:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bdb0      	pop	{r4, r5, r7, pc}
 8000772:	bf00      	nop
 8000774:	2400013c 	.word	0x2400013c
 8000778:	2400003c 	.word	0x2400003c
 800077c:	24000148 	.word	0x24000148
 8000780:	24000158 	.word	0x24000158
 8000784:	24000144 	.word	0x24000144
 8000788:	24000040 	.word	0x24000040

0800078c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000794:	f000 feb4 	bl	8001500 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <vTaskDelete+0x18>
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <vTaskDelete+0x130>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	e000      	b.n	80007a6 <vTaskDelete+0x1a>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3304      	adds	r3, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fe6b 	bl	8000488 <uxListRemove>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d115      	bne.n	80007e4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007bc:	4940      	ldr	r1, [pc, #256]	; (80008c0 <vTaskDelete+0x134>)
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10a      	bne.n	80007e4 <vTaskDelete+0x58>
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	2201      	movs	r2, #1
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	43da      	mvns	r2, r3
 80007da:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <vTaskDelete+0x138>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4013      	ands	r3, r2
 80007e0:	4a38      	ldr	r2, [pc, #224]	; (80008c4 <vTaskDelete+0x138>)
 80007e2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3318      	adds	r3, #24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe49 	bl	8000488 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <vTaskDelete+0x13c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <vTaskDelete+0x13c>)
 80007fe:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <vTaskDelete+0x130>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	429a      	cmp	r2, r3
 8000808:	d118      	bne.n	800083c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3304      	adds	r3, #4
 800080e:	4619      	mov	r1, r3
 8000810:	482e      	ldr	r0, [pc, #184]	; (80008cc <vTaskDelete+0x140>)
 8000812:	f7ff fddc 	bl	80003ce <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <vTaskDelete+0x144>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <vTaskDelete+0x144>)
 800081e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fc8e 	bl	8004144 <SEGGER_SYSVIEW_ShrinkId>
 8000828:	4603      	mov	r3, r0
 800082a:	4619      	mov	r1, r3
 800082c:	2022      	movs	r0, #34	; 0x22
 800082e:	f002 ff55 	bl	80036dc <SEGGER_SYSVIEW_RecordU32>
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4618      	mov	r0, r3
 8000836:	f001 faaf 	bl	8001d98 <SYSVIEW_DeleteTask>
 800083a:	e016      	b.n	800086a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <vTaskDelete+0x148>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <vTaskDelete+0x148>)
 8000844:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fc7b 	bl	8004144 <SEGGER_SYSVIEW_ShrinkId>
 800084e:	4603      	mov	r3, r0
 8000850:	4619      	mov	r1, r3
 8000852:	2022      	movs	r0, #34	; 0x22
 8000854:	f002 ff42 	bl	80036dc <SEGGER_SYSVIEW_RecordU32>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fa9c 	bl	8001d98 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f000 fb15 	bl	8000e90 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000866:	f000 fb23 	bl	8000eb0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800086a:	f000 fe7d 	bl	8001568 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <vTaskDelete+0x14c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d01d      	beq.n	80008b2 <vTaskDelete+0x126>
        {
            if( pxTCB == pxCurrentTCB )
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <vTaskDelete+0x130>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d118      	bne.n	80008b2 <vTaskDelete+0x126>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <vTaskDelete+0x150>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00c      	beq.n	80008a2 <vTaskDelete+0x116>
        __asm volatile
 8000888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800088c:	b672      	cpsid	i
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	b662      	cpsie	i
 800089c:	60bb      	str	r3, [r7, #8]
    }
 800089e:	bf00      	nop
 80008a0:	e7fe      	b.n	80008a0 <vTaskDelete+0x114>
                portYIELD_WITHIN_API();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <vTaskDelete+0x154>)
 80008a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2400003c 	.word	0x2400003c
 80008c0:	24000040 	.word	0x24000040
 80008c4:	24000144 	.word	0x24000144
 80008c8:	24000158 	.word	0x24000158
 80008cc:	24000110 	.word	0x24000110
 80008d0:	24000124 	.word	0x24000124
 80008d4:	2400013c 	.word	0x2400013c
 80008d8:	24000148 	.word	0x24000148
 80008dc:	24000164 	.word	0x24000164
 80008e0:	e000ed04 	.word	0xe000ed04

080008e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d01d      	beq.n	8000932 <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <vTaskDelay+0x6c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00c      	beq.n	8000918 <vTaskDelay+0x34>
        __asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000902:	b672      	cpsid	i
 8000904:	f383 8811 	msr	BASEPRI, r3
 8000908:	f3bf 8f6f 	isb	sy
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	b662      	cpsie	i
 8000912:	60bb      	str	r3, [r7, #8]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <vTaskDelay+0x32>
            vTaskSuspendAll();
 8000918:	f000 f87e 	bl	8000a18 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	2023      	movs	r0, #35	; 0x23
 8000920:	f002 fedc 	bl	80036dc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000924:	2100      	movs	r1, #0
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 fc60 	bl	80011ec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800092c:	f000 f882 	bl	8000a34 <xTaskResumeAll>
 8000930:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d107      	bne.n	8000948 <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <vTaskDelay+0x70>)
 800093a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000164 	.word	0x24000164
 8000954:	e000ed04 	.word	0xe000ed04

08000958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <vTaskStartScheduler+0xa0>)
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	2300      	movs	r3, #0
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	4924      	ldr	r1, [pc, #144]	; (80009fc <vTaskStartScheduler+0xa4>)
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <vTaskStartScheduler+0xa8>)
 800096e:	f7ff fdb5 	bl	80004dc <xTaskCreate>
 8000972:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d126      	bne.n	80009c8 <vTaskStartScheduler+0x70>
        __asm volatile
 800097a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800097e:	b672      	cpsid	i
 8000980:	f383 8811 	msr	BASEPRI, r3
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	b662      	cpsie	i
 800098e:	60bb      	str	r3, [r7, #8]
    }
 8000990:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <vTaskStartScheduler+0xac>)
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <vTaskStartScheduler+0xb0>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <vTaskStartScheduler+0xb4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <vTaskStartScheduler+0xb8>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <vTaskStartScheduler+0xa0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d102      	bne.n	80009b8 <vTaskStartScheduler+0x60>
 80009b2:	f003 fa85 	bl	8003ec0 <SEGGER_SYSVIEW_OnIdle>
 80009b6:	e004      	b.n	80009c2 <vTaskStartScheduler+0x6a>
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <vTaskStartScheduler+0xb8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fadd 	bl	8003f7c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80009c2:	f000 fd1f 	bl	8001404 <xPortStartScheduler>
 80009c6:	e010      	b.n	80009ea <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ce:	d10c      	bne.n	80009ea <vTaskStartScheduler+0x92>
        __asm volatile
 80009d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d4:	b672      	cpsid	i
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	b662      	cpsie	i
 80009e4:	607b      	str	r3, [r7, #4]
    }
 80009e6:	bf00      	nop
 80009e8:	e7fe      	b.n	80009e8 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <vTaskStartScheduler+0xbc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000160 	.word	0x24000160
 80009fc:	08008f68 	.word	0x08008f68
 8000a00:	08000d91 	.word	0x08000d91
 8000a04:	2400015c 	.word	0x2400015c
 8000a08:	24000148 	.word	0x24000148
 8000a0c:	24000140 	.word	0x24000140
 8000a10:	2400003c 	.word	0x2400003c
 8000a14:	24000000 	.word	0x24000000

08000a18 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <vTaskSuspendAll+0x18>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <vTaskSuspendAll+0x18>)
 8000a24:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	24000164 	.word	0x24000164

08000a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <xTaskResumeAll+0x108>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10c      	bne.n	8000a64 <xTaskResumeAll+0x30>
        __asm volatile
 8000a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a4e:	b672      	cpsid	i
 8000a50:	f383 8811 	msr	BASEPRI, r3
 8000a54:	f3bf 8f6f 	isb	sy
 8000a58:	f3bf 8f4f 	dsb	sy
 8000a5c:	b662      	cpsie	i
 8000a5e:	603b      	str	r3, [r7, #0]
    }
 8000a60:	bf00      	nop
 8000a62:	e7fe      	b.n	8000a62 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000a64:	f000 fd4c 	bl	8001500 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000a68:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <xTaskResumeAll+0x108>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <xTaskResumeAll+0x108>)
 8000a70:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <xTaskResumeAll+0x108>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d159      	bne.n	8000b2e <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <xTaskResumeAll+0x10c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d055      	beq.n	8000b2e <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a82:	e032      	b.n	8000aea <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <xTaskResumeAll+0x110>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3318      	adds	r3, #24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fcf9 	bl	8000488 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fcf4 	bl	8000488 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 faac 	bl	8004000 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	2201      	movs	r2, #1
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <xTaskResumeAll+0x114>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	4a24      	ldr	r2, [pc, #144]	; (8000b48 <xTaskResumeAll+0x114>)
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abe:	4613      	mov	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <xTaskResumeAll+0x118>)
 8000ac8:	441a      	add	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3304      	adds	r3, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	f7ff fc7c 	bl	80003ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <xTaskResumeAll+0x11c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d302      	bcc.n	8000aea <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <xTaskResumeAll+0x120>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <xTaskResumeAll+0x110>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1c8      	bne.n	8000a84 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000af8:	f000 f9da 	bl	8000eb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <xTaskResumeAll+0x124>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d010      	beq.n	8000b2a <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000b08:	f000 f83a 	bl	8000b80 <xTaskIncrementTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <xTaskResumeAll+0x120>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f1      	bne.n	8000b08 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <xTaskResumeAll+0x124>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <xTaskResumeAll+0x120>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000b2e:	f000 fd1b 	bl	8001568 <vPortExitCritical>

    return xAlreadyYielded;
 8000b32:	687b      	ldr	r3, [r7, #4]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000164 	.word	0x24000164
 8000b40:	2400013c 	.word	0x2400013c
 8000b44:	240000fc 	.word	0x240000fc
 8000b48:	24000144 	.word	0x24000144
 8000b4c:	24000040 	.word	0x24000040
 8000b50:	2400003c 	.word	0x2400003c
 8000b54:	24000150 	.word	0x24000150
 8000b58:	2400014c 	.word	0x2400014c

08000b5c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b62:	f000 fdb5 	bl	80016d0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <xTaskGetTickCountFromISR+0x20>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b70:	683b      	ldr	r3, [r7, #0]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24000140 	.word	0x24000140

08000b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b8a:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <xTaskIncrementTick+0x114>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d175      	bne.n	8000c7e <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b92:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <xTaskIncrementTick+0x118>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000b9a:	4a3f      	ldr	r2, [pc, #252]	; (8000c98 <xTaskIncrementTick+0x118>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d122      	bne.n	8000bec <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00c      	beq.n	8000bca <xTaskIncrementTick+0x4a>
        __asm volatile
 8000bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb4:	b672      	cpsid	i
 8000bb6:	f383 8811 	msr	BASEPRI, r3
 8000bba:	f3bf 8f6f 	isb	sy
 8000bbe:	f3bf 8f4f 	dsb	sy
 8000bc2:	b662      	cpsie	i
 8000bc4:	603b      	str	r3, [r7, #0]
    }
 8000bc6:	bf00      	nop
 8000bc8:	e7fe      	b.n	8000bc8 <xTaskIncrementTick+0x48>
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <xTaskIncrementTick+0x120>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <xTaskIncrementTick+0x120>)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <xTaskIncrementTick+0x124>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <xTaskIncrementTick+0x124>)
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	f000 f962 	bl	8000eb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <xTaskIncrementTick+0x128>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d348      	bcc.n	8000c88 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000bf6:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d104      	bne.n	8000c0a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <xTaskIncrementTick+0x128>)
 8000c02:	f04f 32ff 	mov.w	r2, #4294967295
 8000c06:	601a      	str	r2, [r3, #0]
                    break;
 8000c08:	e03e      	b.n	8000c88 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d203      	bcs.n	8000c2a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000c22:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <xTaskIncrementTick+0x128>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000c28:	e02e      	b.n	8000c88 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc2a 	bl	8000488 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	3318      	adds	r3, #24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fc21 	bl	8000488 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 f9d9 	bl	8004000 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	2201      	movs	r2, #1
 8000c54:	409a      	lsls	r2, r3
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <xTaskIncrementTick+0x12c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <xTaskIncrementTick+0x12c>)
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <xTaskIncrementTick+0x130>)
 8000c6e:	441a      	add	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3304      	adds	r3, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4610      	mov	r0, r2
 8000c78:	f7ff fba9 	bl	80003ce <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c7c:	e7bb      	b.n	8000bf6 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <xTaskIncrementTick+0x134>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <xTaskIncrementTick+0x134>)
 8000c86:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000c88:	697b      	ldr	r3, [r7, #20]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000164 	.word	0x24000164
 8000c98:	24000140 	.word	0x24000140
 8000c9c:	240000f4 	.word	0x240000f4
 8000ca0:	240000f8 	.word	0x240000f8
 8000ca4:	24000154 	.word	0x24000154
 8000ca8:	2400015c 	.word	0x2400015c
 8000cac:	24000144 	.word	0x24000144
 8000cb0:	24000040 	.word	0x24000040
 8000cb4:	2400014c 	.word	0x2400014c

08000cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <vTaskSwitchContext+0xc0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <vTaskSwitchContext+0xc4>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000ccc:	e04f      	b.n	8000d6e <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <vTaskSwitchContext+0xc4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <vTaskSwitchContext+0xc8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	fab3 f383 	clz	r3, r3
 8000ce0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
 8000ce4:	f1c3 031f 	rsb	r3, r3, #31
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	4926      	ldr	r1, [pc, #152]	; (8000d84 <vTaskSwitchContext+0xcc>)
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10c      	bne.n	8000d18 <vTaskSwitchContext+0x60>
        __asm volatile
 8000cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d02:	b672      	cpsid	i
 8000d04:	f383 8811 	msr	BASEPRI, r3
 8000d08:	f3bf 8f6f 	isb	sy
 8000d0c:	f3bf 8f4f 	dsb	sy
 8000d10:	b662      	cpsie	i
 8000d12:	607b      	str	r3, [r7, #4]
    }
 8000d14:	bf00      	nop
 8000d16:	e7fe      	b.n	8000d16 <vTaskSwitchContext+0x5e>
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <vTaskSwitchContext+0xcc>)
 8000d24:	4413      	add	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	3308      	adds	r3, #8
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d104      	bne.n	8000d48 <vTaskSwitchContext+0x90>
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <vTaskSwitchContext+0xd0>)
 8000d50:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <vTaskSwitchContext+0xd0>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <vTaskSwitchContext+0xd4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d102      	bne.n	8000d64 <vTaskSwitchContext+0xac>
 8000d5e:	f003 f8af 	bl	8003ec0 <SEGGER_SYSVIEW_OnIdle>
}
 8000d62:	e004      	b.n	8000d6e <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <vTaskSwitchContext+0xd0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 f907 	bl	8003f7c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	24000164 	.word	0x24000164
 8000d7c:	24000150 	.word	0x24000150
 8000d80:	24000144 	.word	0x24000144
 8000d84:	24000040 	.word	0x24000040
 8000d88:	2400003c 	.word	0x2400003c
 8000d8c:	24000160 	.word	0x24000160

08000d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000d98:	f000 f84c 	bl	8000e34 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <prvIdleTask+0x20>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000dac:	e7f4      	b.n	8000d98 <prvIdleTask+0x8>
 8000dae:	bf00      	nop
 8000db0:	e000ed04 	.word	0xe000ed04

08000db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	e00c      	b.n	8000dda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <prvInitialiseTaskLists+0x60>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fad0 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d9ef      	bls.n	8000dc0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <prvInitialiseTaskLists+0x64>)
 8000de2:	f7ff fac7 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <prvInitialiseTaskLists+0x68>)
 8000de8:	f7ff fac4 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <prvInitialiseTaskLists+0x6c>)
 8000dee:	f7ff fac1 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <prvInitialiseTaskLists+0x70>)
 8000df4:	f7ff fabe 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <prvInitialiseTaskLists+0x74>)
 8000dfa:	f7ff fabb 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <prvInitialiseTaskLists+0x78>)
 8000e00:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <prvInitialiseTaskLists+0x64>)
 8000e02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <prvInitialiseTaskLists+0x7c>)
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <prvInitialiseTaskLists+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	24000040 	.word	0x24000040
 8000e18:	240000cc 	.word	0x240000cc
 8000e1c:	240000e0 	.word	0x240000e0
 8000e20:	240000fc 	.word	0x240000fc
 8000e24:	24000110 	.word	0x24000110
 8000e28:	24000128 	.word	0x24000128
 8000e2c:	240000f4 	.word	0x240000f4
 8000e30:	240000f8 	.word	0x240000f8

08000e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e3a:	e019      	b.n	8000e70 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000e3c:	f000 fb60 	bl	8001500 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <prvCheckTasksWaitingTermination+0x50>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb1b 	bl	8000488 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <prvCheckTasksWaitingTermination+0x54>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <prvCheckTasksWaitingTermination+0x54>)
 8000e5a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <prvCheckTasksWaitingTermination+0x58>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <prvCheckTasksWaitingTermination+0x58>)
 8000e64:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000e66:	f000 fb7f 	bl	8001568 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 f810 	bl	8000e90 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <prvCheckTasksWaitingTermination+0x58>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1e1      	bne.n	8000e3c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	24000110 	.word	0x24000110
 8000e88:	2400013c 	.word	0x2400013c
 8000e8c:	24000124 	.word	0x24000124

08000e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fd41 	bl	8001924 <vPortFree>
                vPortFree( pxTCB );
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fd3e 	bl	8001924 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <prvResetNextTaskUnblockTime+0x30>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d104      	bne.n	8000ec8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <prvResetNextTaskUnblockTime+0x34>)
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000ec6:	e005      	b.n	8000ed4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <prvResetNextTaskUnblockTime+0x30>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <prvResetNextTaskUnblockTime+0x34>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	240000f4 	.word	0x240000f4
 8000ee4:	2400015c 	.word	0x2400015c

08000ee8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00c      	beq.n	8000f16 <xTaskGenericNotifyWait+0x2e>
        __asm volatile
 8000efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f00:	b672      	cpsid	i
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	b662      	cpsie	i
 8000f10:	613b      	str	r3, [r7, #16]
    }
 8000f12:	bf00      	nop
 8000f14:	e7fe      	b.n	8000f14 <xTaskGenericNotifyWait+0x2c>

        taskENTER_CRITICAL();
 8000f16:	f000 faf3 	bl	8001500 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	3358      	adds	r3, #88	; 0x58
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d024      	beq.n	8000f76 <xTaskGenericNotifyWait+0x8e>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3314      	adds	r3, #20
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	6859      	ldr	r1, [r3, #4]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3314      	adds	r3, #20
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4413      	add	r3, r2
 8000f52:	3358      	adds	r3, #88	; 0x58
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <xTaskGenericNotifyWait+0x8e>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000f5e:	2101      	movs	r1, #1
 8000f60:	6a38      	ldr	r0, [r7, #32]
 8000f62:	f000 f943 	bl	80011ec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <xTaskGenericNotifyWait+0x11c>)
 8000f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	f3bf 8f4f 	dsb	sy
 8000f72:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8000f76:	f000 faf7 	bl	8001568 <vPortExitCritical>

        taskENTER_CRITICAL();
 8000f7a:	f000 fac1 	bl	8001500 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	4613      	mov	r3, r2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	2040      	movs	r0, #64	; 0x40
 8000f8c:	f002 fc3c 	bl	8003808 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <xTaskGenericNotifyWait+0xc0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3314      	adds	r3, #20
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	3358      	adds	r3, #88	; 0x58
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d002      	beq.n	8000fc0 <xTaskGenericNotifyWait+0xd8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e010      	b.n	8000fe2 <xTaskGenericNotifyWait+0xfa>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3314      	adds	r3, #20
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	4019      	ands	r1, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3314      	adds	r3, #20
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	3358      	adds	r3, #88	; 0x58
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8000ff0:	f000 faba 	bl	8001568 <vPortExitCritical>

        return xReturn;
 8000ff4:	697b      	ldr	r3, [r7, #20]
    }
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2400003c 	.word	0x2400003c
 8001004:	e000ed04 	.word	0xe000ed04

08001008 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af02      	add	r7, sp, #8
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001016:	2301      	movs	r3, #1
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <xTaskGenericNotify+0x32>
        __asm volatile
 8001020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001024:	b672      	cpsid	i
 8001026:	f383 8811 	msr	BASEPRI, r3
 800102a:	f3bf 8f6f 	isb	sy
 800102e:	f3bf 8f4f 	dsb	sy
 8001032:	b662      	cpsie	i
 8001034:	623b      	str	r3, [r7, #32]
    }
 8001036:	bf00      	nop
 8001038:	e7fe      	b.n	8001038 <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10c      	bne.n	800105a <xTaskGenericNotify+0x52>
        __asm volatile
 8001040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001044:	b672      	cpsid	i
 8001046:	f383 8811 	msr	BASEPRI, r3
 800104a:	f3bf 8f6f 	isb	sy
 800104e:	f3bf 8f4f 	dsb	sy
 8001052:	b662      	cpsie	i
 8001054:	61fb      	str	r3, [r7, #28]
    }
 8001056:	bf00      	nop
 8001058:	e7fe      	b.n	8001058 <xTaskGenericNotify+0x50>
        pxTCB = xTaskToNotify;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800105e:	f000 fa4f 	bl	8001500 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001064:	2b00      	cmp	r3, #0
 8001066:	d007      	beq.n	8001078 <xTaskGenericNotify+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3314      	adds	r3, #20
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001076:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	3358      	adds	r3, #88	; 0x58
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4413      	add	r3, r2
 800108c:	3358      	adds	r3, #88	; 0x58
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d841      	bhi.n	800111c <xTaskGenericNotify+0x114>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <xTaskGenericNotify+0x98>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	0800113f 	.word	0x0800113f
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010d3 	.word	0x080010d3
 80010ac:	080010ef 	.word	0x080010ef
 80010b0:	080010ff 	.word	0x080010ff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80010b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3314      	adds	r3, #20
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	3314      	adds	r3, #20
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	605a      	str	r2, [r3, #4]
                    break;
 80010d0:	e038      	b.n	8001144 <xTaskGenericNotify+0x13c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80010d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3314      	adds	r3, #20
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3314      	adds	r3, #20
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	605a      	str	r2, [r3, #4]
                    break;
 80010ec:	e02a      	b.n	8001144 <xTaskGenericNotify+0x13c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80010ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3314      	adds	r3, #20
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	605a      	str	r2, [r3, #4]
                    break;
 80010fc:	e022      	b.n	8001144 <xTaskGenericNotify+0x13c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80010fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001102:	2b02      	cmp	r3, #2
 8001104:	d007      	beq.n	8001116 <xTaskGenericNotify+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	3314      	adds	r3, #20
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001114:	e016      	b.n	8001144 <xTaskGenericNotify+0x13c>
                        xReturn = pdFAIL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800111a:	e013      	b.n	8001144 <xTaskGenericNotify+0x13c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <xTaskGenericNotify+0x1d4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00e      	beq.n	8001142 <xTaskGenericNotify+0x13a>
        __asm volatile
 8001124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001128:	b672      	cpsid	i
 800112a:	f383 8811 	msr	BASEPRI, r3
 800112e:	f3bf 8f6f 	isb	sy
 8001132:	f3bf 8f4f 	dsb	sy
 8001136:	b662      	cpsie	i
 8001138:	61bb      	str	r3, [r7, #24]
    }
 800113a:	bf00      	nop
 800113c:	e7fe      	b.n	800113c <xTaskGenericNotify+0x134>
                    break;
 800113e:	bf00      	nop
 8001140:	e000      	b.n	8001144 <xTaskGenericNotify+0x13c>

                    break;
 8001142:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8001144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fffc 	bl	8004144 <SEGGER_SYSVIEW_ShrinkId>
 800114c:	4601      	mov	r1, r0
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	203e      	movs	r0, #62	; 0x3e
 800115a:	f002 fb55 	bl	8003808 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800115e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001162:	2b01      	cmp	r3, #1
 8001164:	d132      	bne.n	80011cc <xTaskGenericNotify+0x1c4>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	3304      	adds	r3, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f98c 	bl	8000488 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	4618      	mov	r0, r3
 8001174:	f002 ff44 	bl	8004000 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <xTaskGenericNotify+0x1d8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <xTaskGenericNotify+0x1d8>)
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <xTaskGenericNotify+0x1dc>)
 8001198:	441a      	add	r2, r3
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	3304      	adds	r3, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff f914 	bl	80003ce <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00c      	beq.n	80011c8 <xTaskGenericNotify+0x1c0>
        __asm volatile
 80011ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b2:	b672      	cpsid	i
 80011b4:	f383 8811 	msr	BASEPRI, r3
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	b662      	cpsie	i
 80011c2:	617b      	str	r3, [r7, #20]
    }
 80011c4:	bf00      	nop
 80011c6:	e7fe      	b.n	80011c6 <xTaskGenericNotify+0x1be>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <xTaskGenericNotify+0x1e0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80011cc:	f000 f9cc 	bl	8001568 <vPortExitCritical>

        return xReturn;
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80011d2:	4618      	mov	r0, r3
 80011d4:	3730      	adds	r7, #48	; 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	24000140 	.word	0x24000140
 80011e0:	24000144 	.word	0x24000144
 80011e4:	24000040 	.word	0x24000040
 80011e8:	2400003c 	.word	0x2400003c

080011ec <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f940 	bl	8000488 <uxListRemove>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10b      	bne.n	8001226 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2201      	movs	r2, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4013      	ands	r3, r2
 8001222:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001224:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d110      	bne.n	8001250 <prvAddCurrentTaskToDelayedList+0x64>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00d      	beq.n	8001250 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	211b      	movs	r1, #27
 800123a:	4618      	mov	r0, r3
 800123c:	f002 ff22 	bl	8004084 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3304      	adds	r3, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <prvAddCurrentTaskToDelayedList+0xe0>)
 800124a:	f7ff f8c0 	bl	80003ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800124e:	e032      	b.n	80012b6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d20f      	bcs.n	8001288 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f002 ff08 	bl	8004084 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3304      	adds	r3, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f7ff f8c8 	bl	8000416 <vListInsert>
}
 8001286:	e016      	b.n	80012b6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fef8 	bl	8004084 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3304      	adds	r3, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4610      	mov	r0, r2
 80012a2:	f7ff f8b8 	bl	8000416 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d202      	bcs.n	80012b6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80012b0:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000140 	.word	0x24000140
 80012c4:	2400003c 	.word	0x2400003c
 80012c8:	24000144 	.word	0x24000144
 80012cc:	24000128 	.word	0x24000128
 80012d0:	240000f8 	.word	0x240000f8
 80012d4:	240000f4 	.word	0x240000f4
 80012d8:	2400015c 	.word	0x2400015c

080012dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3b04      	subs	r3, #4
 80012ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3b04      	subs	r3, #4
 80012fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f023 0201 	bic.w	r2, r3, #1
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3b04      	subs	r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <pxPortInitialiseStack+0x64>)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3b14      	subs	r3, #20
 8001316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3b04      	subs	r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f06f 0202 	mvn.w	r2, #2
 800132a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b20      	subs	r3, #32
 8001330:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	08001345 	.word	0x08001345

08001344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <prvTaskExitError+0x5c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001356:	d00c      	beq.n	8001372 <prvTaskExitError+0x2e>
        __asm volatile
 8001358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135c:	b672      	cpsid	i
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	b662      	cpsie	i
 800136c:	60fb      	str	r3, [r7, #12]
    }
 800136e:	bf00      	nop
 8001370:	e7fe      	b.n	8001370 <prvTaskExitError+0x2c>
        __asm volatile
 8001372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001376:	b672      	cpsid	i
 8001378:	f383 8811 	msr	BASEPRI, r3
 800137c:	f3bf 8f6f 	isb	sy
 8001380:	f3bf 8f4f 	dsb	sy
 8001384:	b662      	cpsie	i
 8001386:	60bb      	str	r3, [r7, #8]
    }
 8001388:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800138a:	bf00      	nop
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0fc      	beq.n	800138c <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	24000004 	.word	0x24000004
	...

080013b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <pxCurrentTCBConst2>)
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	6808      	ldr	r0, [r1, #0]
 80013b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ba:	f380 8809 	msr	PSP, r0
 80013be:	f3bf 8f6f 	isb	sy
 80013c2:	f04f 0000 	mov.w	r0, #0
 80013c6:	f380 8811 	msr	BASEPRI, r0
 80013ca:	4770      	bx	lr
 80013cc:	f3af 8000 	nop.w

080013d0 <pxCurrentTCBConst2>:
 80013d0:	2400003c 	.word	0x2400003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop

080013d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <prvPortStartFirstTask+0x24>)
 80013da:	6800      	ldr	r0, [r0, #0]
 80013dc:	6800      	ldr	r0, [r0, #0]
 80013de:	f380 8808 	msr	MSP, r0
 80013e2:	f04f 0000 	mov.w	r0, #0
 80013e6:	f380 8814 	msr	CONTROL, r0
 80013ea:	b662      	cpsie	i
 80013ec:	b661      	cpsie	f
 80013ee:	f3bf 8f4f 	dsb	sy
 80013f2:	f3bf 8f6f 	isb	sy
 80013f6:	df00      	svc	0
 80013f8:	bf00      	nop
 80013fa:	0000      	.short	0x0000
 80013fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop

08001404 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <xPortStartScheduler+0xe4>)
 800140c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	22ff      	movs	r2, #255	; 0xff
 800141a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <xPortStartScheduler+0xe8>)
 8001430:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <xPortStartScheduler+0xec>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001438:	e009      	b.n	800144e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <xPortStartScheduler+0xec>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3b01      	subs	r3, #1
 8001440:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <xPortStartScheduler+0xec>)
 8001442:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	2b80      	cmp	r3, #128	; 0x80
 8001458:	d0ef      	beq.n	800143a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <xPortStartScheduler+0xec>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	d00c      	beq.n	8001480 <xPortStartScheduler+0x7c>
        __asm volatile
 8001466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146a:	b672      	cpsid	i
 800146c:	f383 8811 	msr	BASEPRI, r3
 8001470:	f3bf 8f6f 	isb	sy
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	b662      	cpsie	i
 800147a:	60bb      	str	r3, [r7, #8]
    }
 800147c:	bf00      	nop
 800147e:	e7fe      	b.n	800147e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <xPortStartScheduler+0xec>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <xPortStartScheduler+0xec>)
 8001488:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <xPortStartScheduler+0xec>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <xPortStartScheduler+0xec>)
 8001494:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <xPortStartScheduler+0xf0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <xPortStartScheduler+0xf0>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <xPortStartScheduler+0xf0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <xPortStartScheduler+0xf0>)
 80014b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80014b4:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80014b6:	f000 f8db 	bl	8001670 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <xPortStartScheduler+0xf4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80014c0:	f000 f8fa 	bl	80016b8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <xPortStartScheduler+0xf8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <xPortStartScheduler+0xf8>)
 80014ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80014ce:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80014d0:	f7ff ff82 	bl	80013d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80014d4:	f7ff fbf0 	bl	8000cb8 <vTaskSwitchContext>
    prvTaskExitError();
 80014d8:	f7ff ff34 	bl	8001344 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e400 	.word	0xe000e400
 80014ec:	24000168 	.word	0x24000168
 80014f0:	2400016c 	.word	0x2400016c
 80014f4:	e000ed20 	.word	0xe000ed20
 80014f8:	24000004 	.word	0x24000004
 80014fc:	e000ef34 	.word	0xe000ef34

08001500 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
        __asm volatile
 8001506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150a:	b672      	cpsid	i
 800150c:	f383 8811 	msr	BASEPRI, r3
 8001510:	f3bf 8f6f 	isb	sy
 8001514:	f3bf 8f4f 	dsb	sy
 8001518:	b662      	cpsie	i
 800151a:	607b      	str	r3, [r7, #4]
    }
 800151c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <vPortEnterCritical+0x60>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <vPortEnterCritical+0x60>)
 8001526:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <vPortEnterCritical+0x60>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d111      	bne.n	8001554 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <vPortEnterCritical+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <vPortEnterCritical+0x54>
        __asm volatile
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	b672      	cpsid	i
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	b662      	cpsie	i
 800154e:	603b      	str	r3, [r7, #0]
    }
 8001550:	bf00      	nop
 8001552:	e7fe      	b.n	8001552 <vPortEnterCritical+0x52>
    }
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	24000004 	.word	0x24000004
 8001564:	e000ed04 	.word	0xe000ed04

08001568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <vPortExitCritical+0x54>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <vPortExitCritical+0x28>
        __asm volatile
 8001576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157a:	b672      	cpsid	i
 800157c:	f383 8811 	msr	BASEPRI, r3
 8001580:	f3bf 8f6f 	isb	sy
 8001584:	f3bf 8f4f 	dsb	sy
 8001588:	b662      	cpsie	i
 800158a:	607b      	str	r3, [r7, #4]
    }
 800158c:	bf00      	nop
 800158e:	e7fe      	b.n	800158e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <vPortExitCritical+0x54>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <vPortExitCritical+0x54>)
 8001598:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <vPortExitCritical+0x54>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <vPortExitCritical+0x46>
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80015ac:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	24000004 	.word	0x24000004

080015c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80015c0:	f3ef 8009 	mrs	r0, PSP
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <pxCurrentTCBConst>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f01e 0f10 	tst.w	lr, #16
 80015d0:	bf08      	it	eq
 80015d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80015d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015da:	6010      	str	r0, [r2, #0]
 80015dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80015e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015e4:	b672      	cpsid	i
 80015e6:	f380 8811 	msr	BASEPRI, r0
 80015ea:	f3bf 8f4f 	dsb	sy
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	b662      	cpsie	i
 80015f4:	f7ff fb60 	bl	8000cb8 <vTaskSwitchContext>
 80015f8:	f04f 0000 	mov.w	r0, #0
 80015fc:	f380 8811 	msr	BASEPRI, r0
 8001600:	bc09      	pop	{r0, r3}
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	6808      	ldr	r0, [r1, #0]
 8001606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800160a:	f01e 0f10 	tst.w	lr, #16
 800160e:	bf08      	it	eq
 8001610:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001614:	f380 8809 	msr	PSP, r0
 8001618:	f3bf 8f6f 	isb	sy
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <pxCurrentTCBConst>:
 8001620:	2400003c 	.word	0x2400003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop

08001628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
        __asm volatile
 800162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001632:	b672      	cpsid	i
 8001634:	f383 8811 	msr	BASEPRI, r3
 8001638:	f3bf 8f6f 	isb	sy
 800163c:	f3bf 8f4f 	dsb	sy
 8001640:	b662      	cpsie	i
 8001642:	607b      	str	r3, [r7, #4]
    }
 8001644:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001646:	f7ff fa9b 	bl	8000b80 <xTaskIncrementTick>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <SysTick_Handler+0x44>)
 8001652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f383 8811 	msr	BASEPRI, r3
    }
 8001662:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	e000ed04 	.word	0xe000ed04

08001670 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <vPortSetupTimerInterrupt+0x34>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <vPortSetupTimerInterrupt+0x38>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <vPortSetupTimerInterrupt+0x3c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <vPortSetupTimerInterrupt+0x40>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	099b      	lsrs	r3, r3, #6
 800168c:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <vPortSetupTimerInterrupt+0x44>)
 800168e:	3b01      	subs	r3, #1
 8001690:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <vPortSetupTimerInterrupt+0x34>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010
 80016a8:	e000e018 	.word	0xe000e018
 80016ac:	24000010 	.word	0x24000010
 80016b0:	10624dd3 	.word	0x10624dd3
 80016b4:	e000e014 	.word	0xe000e014

080016b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80016b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80016c8 <vPortEnableVFP+0x10>
 80016bc:	6801      	ldr	r1, [r0, #0]
 80016be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80016c2:	6001      	str	r1, [r0, #0]
 80016c4:	4770      	bx	lr
 80016c6:	0000      	.short	0x0000
 80016c8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop

080016d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80016d6:	f3ef 8305 	mrs	r3, IPSR
 80016da:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b0f      	cmp	r3, #15
 80016e0:	d916      	bls.n	8001710 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <vPortValidateInterruptPriority+0x78>)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <vPortValidateInterruptPriority+0x7c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	7afa      	ldrb	r2, [r7, #11]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d20c      	bcs.n	8001710 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fa:	b672      	cpsid	i
 80016fc:	f383 8811 	msr	BASEPRI, r3
 8001700:	f3bf 8f6f 	isb	sy
 8001704:	f3bf 8f4f 	dsb	sy
 8001708:	b662      	cpsie	i
 800170a:	607b      	str	r3, [r7, #4]
    }
 800170c:	bf00      	nop
 800170e:	e7fe      	b.n	800170e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <vPortValidateInterruptPriority+0x80>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <vPortValidateInterruptPriority+0x84>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d90c      	bls.n	800173a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8001720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001724:	b672      	cpsid	i
 8001726:	f383 8811 	msr	BASEPRI, r3
 800172a:	f3bf 8f6f 	isb	sy
 800172e:	f3bf 8f4f 	dsb	sy
 8001732:	b662      	cpsie	i
 8001734:	603b      	str	r3, [r7, #0]
    }
 8001736:	bf00      	nop
 8001738:	e7fe      	b.n	8001738 <vPortValidateInterruptPriority+0x68>
    }
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e3f0 	.word	0xe000e3f0
 800174c:	24000168 	.word	0x24000168
 8001750:	e000ed0c 	.word	0xe000ed0c
 8001754:	2400016c 	.word	0x2400016c

08001758 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001764:	f7ff f958 	bl	8000a18 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <pvPortMalloc+0x1b4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001770:	f000 f93e 	bl	80019f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001774:	4b66      	ldr	r3, [pc, #408]	; (8001910 <pvPortMalloc+0x1b8>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 80ab 	bne.w	80018d8 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d02f      	beq.n	80017e8 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001788:	2208      	movs	r2, #8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	d229      	bcs.n	80017e8 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8001794:	2208      	movs	r2, #8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d023      	beq.n	80017ee <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f023 0307 	bic.w	r3, r3, #7
 80017ac:	3308      	adds	r3, #8
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d216      	bcs.n	80017e2 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f023 0307 	bic.w	r3, r3, #7
 80017ba:	3308      	adds	r3, #8
 80017bc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d012      	beq.n	80017ee <pvPortMalloc+0x96>
        __asm volatile
 80017c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017cc:	b672      	cpsid	i
 80017ce:	f383 8811 	msr	BASEPRI, r3
 80017d2:	f3bf 8f6f 	isb	sy
 80017d6:	f3bf 8f4f 	dsb	sy
 80017da:	b662      	cpsie	i
 80017dc:	617b      	str	r3, [r7, #20]
    }
 80017de:	bf00      	nop
 80017e0:	e7fe      	b.n	80017e0 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017e6:	e002      	b.n	80017ee <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e000      	b.n	80017f0 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d070      	beq.n	80018d8 <pvPortMalloc+0x180>
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <pvPortMalloc+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d86b      	bhi.n	80018d8 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001800:	4b45      	ldr	r3, [pc, #276]	; (8001918 <pvPortMalloc+0x1c0>)
 8001802:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001804:	4b44      	ldr	r3, [pc, #272]	; (8001918 <pvPortMalloc+0x1c0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800180a:	e004      	b.n	8001816 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d903      	bls.n	8001828 <pvPortMalloc+0xd0>
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f1      	bne.n	800180c <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001828:	4b38      	ldr	r3, [pc, #224]	; (800190c <pvPortMalloc+0x1b4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182e:	429a      	cmp	r2, r3
 8001830:	d052      	beq.n	80018d8 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2208      	movs	r2, #8
 8001838:	4413      	add	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	1ad2      	subs	r2, r2, r3
 800184c:	2308      	movs	r3, #8
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	429a      	cmp	r2, r3
 8001852:	d921      	bls.n	8001898 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00c      	beq.n	8001880 <pvPortMalloc+0x128>
        __asm volatile
 8001866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186a:	b672      	cpsid	i
 800186c:	f383 8811 	msr	BASEPRI, r3
 8001870:	f3bf 8f6f 	isb	sy
 8001874:	f3bf 8f4f 	dsb	sy
 8001878:	b662      	cpsie	i
 800187a:	613b      	str	r3, [r7, #16]
    }
 800187c:	bf00      	nop
 800187e:	e7fe      	b.n	800187e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	1ad2      	subs	r2, r2, r3
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001892:	69b8      	ldr	r0, [r7, #24]
 8001894:	f000 f90e 	bl	8001ab4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <pvPortMalloc+0x1bc>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <pvPortMalloc+0x1bc>)
 80018a4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <pvPortMalloc+0x1bc>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <pvPortMalloc+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d203      	bcs.n	80018ba <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <pvPortMalloc+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a19      	ldr	r2, [pc, #100]	; (800191c <pvPortMalloc+0x1c4>)
 80018b8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <pvPortMalloc+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <pvPortMalloc+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <pvPortMalloc+0x1c8>)
 80018d6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80018d8:	f7ff f8ac 	bl	8000a34 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <pvPortMalloc+0x1a8>
        __asm volatile
 80018e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ea:	b672      	cpsid	i
 80018ec:	f383 8811 	msr	BASEPRI, r3
 80018f0:	f3bf 8f6f 	isb	sy
 80018f4:	f3bf 8f4f 	dsb	sy
 80018f8:	b662      	cpsie	i
 80018fa:	60fb      	str	r3, [r7, #12]
    }
 80018fc:	bf00      	nop
 80018fe:	e7fe      	b.n	80018fe <pvPortMalloc+0x1a6>
    return pvReturn;
 8001900:	69fb      	ldr	r3, [r7, #28]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	24005178 	.word	0x24005178
 8001910:	2400518c 	.word	0x2400518c
 8001914:	2400517c 	.word	0x2400517c
 8001918:	24005170 	.word	0x24005170
 800191c:	24005180 	.word	0x24005180
 8001920:	24005184 	.word	0x24005184

08001924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d051      	beq.n	80019da <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001936:	2308      	movs	r3, #8
 8001938:	425b      	negs	r3, r3
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4413      	add	r3, r2
 800193e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <vPortFree+0xc0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <vPortFree+0x48>
        __asm volatile
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	b672      	cpsid	i
 8001958:	f383 8811 	msr	BASEPRI, r3
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f3bf 8f4f 	dsb	sy
 8001964:	b662      	cpsie	i
 8001966:	60fb      	str	r3, [r7, #12]
    }
 8001968:	bf00      	nop
 800196a:	e7fe      	b.n	800196a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00c      	beq.n	800198e <vPortFree+0x6a>
        __asm volatile
 8001974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001978:	b672      	cpsid	i
 800197a:	f383 8811 	msr	BASEPRI, r3
 800197e:	f3bf 8f6f 	isb	sy
 8001982:	f3bf 8f4f 	dsb	sy
 8001986:	b662      	cpsie	i
 8001988:	60bb      	str	r3, [r7, #8]
    }
 800198a:	bf00      	nop
 800198c:	e7fe      	b.n	800198c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <vPortFree+0xc0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01e      	beq.n	80019da <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11a      	bne.n	80019da <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <vPortFree+0xc0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80019b4:	f7ff f830 	bl	8000a18 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <vPortFree+0xc4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <vPortFree+0xc4>)
 80019c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019c6:	6938      	ldr	r0, [r7, #16]
 80019c8:	f000 f874 	bl	8001ab4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <vPortFree+0xc8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	4a06      	ldr	r2, [pc, #24]	; (80019ec <vPortFree+0xc8>)
 80019d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80019d6:	f7ff f82d 	bl	8000a34 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2400518c 	.word	0x2400518c
 80019e8:	2400517c 	.word	0x2400517c
 80019ec:	24005188 	.word	0x24005188

080019f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019f6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80019fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <prvHeapInit+0xac>)
 80019fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00c      	beq.n	8001a24 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3307      	adds	r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f023 0307 	bic.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <prvHeapInit+0xac>)
 8001a20:	4413      	add	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <prvHeapInit+0xb0>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <prvHeapInit+0xb0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	4413      	add	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <prvHeapInit+0xb4>)
 8001a50:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <prvHeapInit+0xb4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <prvHeapInit+0xb4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	1ad2      	subs	r2, r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <prvHeapInit+0xb4>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <prvHeapInit+0xb8>)
 8001a7e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a09      	ldr	r2, [pc, #36]	; (8001aac <prvHeapInit+0xbc>)
 8001a86:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <prvHeapInit+0xc0>)
 8001a8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a8e:	601a      	str	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	24000170 	.word	0x24000170
 8001aa0:	24005170 	.word	0x24005170
 8001aa4:	24005178 	.word	0x24005178
 8001aa8:	24005180 	.word	0x24005180
 8001aac:	2400517c 	.word	0x2400517c
 8001ab0:	2400518c 	.word	0x2400518c

08001ab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <prvInsertBlockIntoFreeList+0xac>)
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e002      	b.n	8001ac8 <prvInsertBlockIntoFreeList+0x14>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d8f7      	bhi.n	8001ac2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	4413      	add	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d108      	bne.n	8001af6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	441a      	add	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	441a      	add	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d118      	bne.n	8001b3c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <prvInsertBlockIntoFreeList+0xb0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d00d      	beq.n	8001b32 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e008      	b.n	8001b44 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <prvInsertBlockIntoFreeList+0xb0>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e003      	b.n	8001b44 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d002      	beq.n	8001b52 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	24005170 	.word	0x24005170
 8001b64:	24005178 	.word	0x24005178

08001b68 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <_cbSendSystemDesc+0x14>)
 8001b6e:	f002 f951 	bl	8003e14 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <_cbSendSystemDesc+0x18>)
 8001b74:	f002 f94e 	bl	8003e14 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08008f70 	.word	0x08008f70
 8001b80:	08008fa0 	.word	0x08008fa0

08001b84 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <SEGGER_SYSVIEW_Conf+0x28>)
 8001b94:	f001 fd2e 	bl	80035f4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001b98:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 8001b9c:	f001 fd70 	bl	8003680 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	24000010 	.word	0x24000010
 8001ba8:	08001b69 	.word	0x08001b69
 8001bac:	08009160 	.word	0x08009160

08001bb0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	e033      	b.n	8001c24 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001bbc:	491e      	ldr	r1, [pc, #120]	; (8001c38 <_cbSendTaskList+0x88>)
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	491a      	ldr	r1, [pc, #104]	; (8001c38 <_cbSendTaskList+0x88>)
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	3304      	adds	r3, #4
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	4c16      	ldr	r4, [pc, #88]	; (8001c38 <_cbSendTaskList+0x88>)
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4423      	add	r3, r4
 8001bec:	3308      	adds	r3, #8
 8001bee:	681c      	ldr	r4, [r3, #0]
 8001bf0:	4d11      	ldr	r5, [pc, #68]	; (8001c38 <_cbSendTaskList+0x88>)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	442b      	add	r3, r5
 8001bfe:	330c      	adds	r3, #12
 8001c00:	681d      	ldr	r5, [r3, #0]
 8001c02:	4e0d      	ldr	r6, [pc, #52]	; (8001c38 <_cbSendTaskList+0x88>)
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4433      	add	r3, r6
 8001c10:	3310      	adds	r3, #16
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	462b      	mov	r3, r5
 8001c18:	4622      	mov	r2, r4
 8001c1a:	f000 f979 	bl	8001f10 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3301      	adds	r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <_cbSendTaskList+0x8c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3c6      	bcc.n	8001bbc <_cbSendTaskList+0xc>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c38:	24005190 	.word	0x24005190
 8001c3c:	24005230 	.word	0x24005230

08001c40 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001c48:	f7fe ff88 	bl	8000b5c <xTaskGetTickCountFromISR>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2200      	movs	r2, #0
 8001c50:	469a      	mov	sl, r3
 8001c52:	4693      	mov	fp, r2
 8001c54:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	f04f 0a00 	mov.w	sl, #0
 8001c64:	f04f 0b00 	mov.w	fp, #0
 8001c68:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001c6c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001c70:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001c74:	4652      	mov	r2, sl
 8001c76:	465b      	mov	r3, fp
 8001c78:	1a14      	subs	r4, r2, r0
 8001c7a:	eb63 0501 	sbc.w	r5, r3, r1
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	00ab      	lsls	r3, r5, #2
 8001c88:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001c8c:	00a2      	lsls	r2, r4, #2
 8001c8e:	4614      	mov	r4, r2
 8001c90:	461d      	mov	r5, r3
 8001c92:	eb14 0800 	adds.w	r8, r4, r0
 8001c96:	eb45 0901 	adc.w	r9, r5, r1
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cae:	4690      	mov	r8, r2
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001cc8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	492b      	ldr	r1, [pc, #172]	; (8001d88 <SYSVIEW_AddTask+0xc0>)
 8001cda:	68b8      	ldr	r0, [r7, #8]
 8001cdc:	f007 f912 	bl	8008f04 <memcmp>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d04b      	beq.n	8001d7e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <SYSVIEW_AddTask+0xc4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b07      	cmp	r3, #7
 8001cec:	d903      	bls.n	8001cf6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001cee:	4828      	ldr	r0, [pc, #160]	; (8001d90 <SYSVIEW_AddTask+0xc8>)
 8001cf0:	f002 fb28 	bl	8004344 <SEGGER_SYSVIEW_Warn>
    return;
 8001cf4:	e044      	b.n	8001d80 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <SYSVIEW_AddTask+0xc4>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4926      	ldr	r1, [pc, #152]	; (8001d94 <SYSVIEW_AddTask+0xcc>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <SYSVIEW_AddTask+0xc4>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4921      	ldr	r1, [pc, #132]	; (8001d94 <SYSVIEW_AddTask+0xcc>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <SYSVIEW_AddTask+0xc4>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	491b      	ldr	r1, [pc, #108]	; (8001d94 <SYSVIEW_AddTask+0xcc>)
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3308      	adds	r3, #8
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <SYSVIEW_AddTask+0xc4>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4916      	ldr	r1, [pc, #88]	; (8001d94 <SYSVIEW_AddTask+0xcc>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	330c      	adds	r3, #12
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <SYSVIEW_AddTask+0xc4>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4910      	ldr	r1, [pc, #64]	; (8001d94 <SYSVIEW_AddTask+0xcc>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3310      	adds	r3, #16
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <SYSVIEW_AddTask+0xc4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <SYSVIEW_AddTask+0xc4>)
 8001d6a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f8ca 	bl	8001f10 <SYSVIEW_SendTaskInfo>
 8001d7c:	e000      	b.n	8001d80 <SYSVIEW_AddTask+0xb8>
    return;
 8001d7e:	bf00      	nop

}
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	08008fb0 	.word	0x08008fb0
 8001d8c:	24005230 	.word	0x24005230
 8001d90:	08008fb8 	.word	0x08008fb8
 8001d94:	24005190 	.word	0x24005190

08001d98 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8001da0:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80ab 	beq.w	8001f00 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	e00d      	b.n	8001dcc <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8001db0:	4956      	ldr	r1, [pc, #344]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d008      	beq.n	8001dd8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d3ec      	bcc.n	8001db0 <SYSVIEW_DeleteTask+0x18>
 8001dd6:	e000      	b.n	8001dda <SYSVIEW_DeleteTask+0x42>
      break;
 8001dd8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8001dda:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d111      	bne.n	8001e0a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4a46      	ldr	r2, [pc, #280]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001df2:	4413      	add	r3, r2
 8001df4:	2214      	movs	r2, #20
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f007 f8a1 	bl	8008f40 <memset>
    _NumTasks--;
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e07b      	b.n	8001f02 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d276      	bcs.n	8001f02 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8001e14:	4b3c      	ldr	r3, [pc, #240]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	493c      	ldr	r1, [pc, #240]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	6819      	ldr	r1, [r3, #0]
 8001e28:	4838      	ldr	r0, [pc, #224]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4403      	add	r3, r0
 8001e36:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	4933      	ldr	r1, [pc, #204]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	482f      	ldr	r0, [pc, #188]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4403      	add	r3, r0
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	4929      	ldr	r1, [pc, #164]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	3308      	adds	r3, #8
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	4825      	ldr	r0, [pc, #148]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4403      	add	r3, r0
 8001e84:	3308      	adds	r3, #8
 8001e86:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	491f      	ldr	r1, [pc, #124]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	481b      	ldr	r0, [pc, #108]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4403      	add	r3, r0
 8001eac:	330c      	adds	r3, #12
 8001eae:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	4915      	ldr	r1, [pc, #84]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3310      	adds	r3, #16
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	4811      	ldr	r0, [pc, #68]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4403      	add	r3, r0
 8001ed4:	3310      	adds	r3, #16
 8001ed6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <SYSVIEW_DeleteTask+0x174>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	2214      	movs	r2, #20
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f007 f826 	bl	8008f40 <memset>
    _NumTasks--;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <SYSVIEW_DeleteTask+0x170>)
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e000      	b.n	8001f02 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8001f00:	bf00      	nop
  }
}
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	24005230 	.word	0x24005230
 8001f0c:	24005190 	.word	0x24005190

08001f10 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	2214      	movs	r2, #20
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f007 f80a 	bl	8008f40 <memset>
  TaskInfo.TaskID     = TaskID;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fe6d 	bl	8003c24 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	; 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0b      	blt.n	8001f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4907      	ldr	r1, [pc, #28]	; (8001f8c <__NVIC_EnableIRQ+0x38>)
 8001f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001fea:	f002 fa07 	bl	80043fc <SEGGER_SYSVIEW_IsStarted>
 8001fee:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001ff6:	f001 fc99 	bl	800392c <SEGGER_SYSVIEW_Start>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <_cbOnUARTRx+0x3c>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d806      	bhi.n	8002024 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <_cbOnUARTRx+0x3c>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_cbOnUARTRx+0x3c>)
 8002020:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002022:	e009      	b.n	8002038 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002024:	f7ff ffde 	bl	8001fe4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <_cbOnUARTRx+0x3c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	2201      	movs	r2, #1
 8002032:	4619      	mov	r1, r3
 8002034:	f000 fb9e 	bl	8002774 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002038:	bf00      	nop
}
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	24000008 	.word	0x24000008

08002044 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <_cbOnUARTTx+0x5c>)
 800204e:	785b      	ldrb	r3, [r3, #1]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d80f      	bhi.n	8002074 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <_cbOnUARTTx+0x5c>)
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	461a      	mov	r2, r3
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <_cbOnUARTTx+0x60>)
 800205c:	5c9a      	ldrb	r2, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <_cbOnUARTTx+0x5c>)
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	3301      	adds	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <_cbOnUARTTx+0x5c>)
 800206c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
    goto Done;
 8002072:	e00f      	b.n	8002094 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <_cbOnUARTTx+0x5c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fa1d 	bl	80024bc <SEGGER_RTT_ReadUpBufferNoLock>
 8002082:	4603      	mov	r3, r0
 8002084:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da02      	bge.n	8002092 <_cbOnUARTTx+0x4e>
    r = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e000      	b.n	8002094 <_cbOnUARTTx+0x50>
  }
Done:
 8002092:	bf00      	nop
  return r;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	24000008 	.word	0x24000008
 80020a4:	08009168 	.word	0x08009168

080020a8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <SEGGER_UART_init+0x1c>)
 80020b2:	4905      	ldr	r1, [pc, #20]	; (80020c8 <SEGGER_UART_init+0x20>)
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f865 	bl	8002184 <HIF_UART_Init>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	08002005 	.word	0x08002005
 80020c8:	08002045 	.word	0x08002045

080020cc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <USART2_IRQHandler+0x80>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d011      	beq.n	8002106 <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <USART2_IRQHandler+0x84>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 030b 	and.w	r3, r3, #11
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d108      	bne.n	8002106 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <USART2_IRQHandler+0x88>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <USART2_IRQHandler+0x88>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	79fa      	ldrb	r2, [r7, #7]
 8002102:	4610      	mov	r0, r2
 8002104:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01a      	beq.n	8002146 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <USART2_IRQHandler+0x8c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <USART2_IRQHandler+0x8c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1dfa      	adds	r2, r7, #7
 800211e:	4610      	mov	r0, r2
 8002120:	4798      	blx	r3
 8002122:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <USART2_IRQHandler+0x90>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <USART2_IRQHandler+0x90>)
 8002130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e006      	b.n	8002146 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <USART2_IRQHandler+0x80>)
 800213a:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <USART2_IRQHandler+0x94>)
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e000      	b.n	8002146 <USART2_IRQHandler+0x7a>
      return;
 8002144:	bf00      	nop
    }
  }
}
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	4000441c 	.word	0x4000441c
 8002150:	40004424 	.word	0x40004424
 8002154:	24005234 	.word	0x24005234
 8002158:	24005238 	.word	0x24005238
 800215c:	40004400 	.word	0x40004400
 8002160:	40004428 	.word	0x40004428

08002164 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800216e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40004400 	.word	0x40004400

08002184 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HIF_UART_Init+0xc8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2d      	ldr	r2, [pc, #180]	; (800224c <HIF_UART_Init+0xc8>)
 8002196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219a:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HIF_UART_Init+0xcc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <HIF_UART_Init+0xcc>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80021a8:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HIF_UART_Init+0xd0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80021be:	4a25      	ldr	r2, [pc, #148]	; (8002254 <HIF_UART_Init+0xd0>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HIF_UART_Init+0xd4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80021d8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80021da:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HIF_UART_Init+0xd4>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HIF_UART_Init+0xd8>)
 80021e2:	f248 022d 	movw	r2, #32813	; 0x802d
 80021e6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HIF_UART_Init+0xdc>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HIF_UART_Init+0xe0>)
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80021fa:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HIF_UART_Init+0xe4>)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002212:	d302      	bcc.n	800221a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002214:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002218:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <HIF_UART_Init+0xe8>)
 8002226:	b29b      	uxth	r3, r3
 8002228:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HIF_UART_Init+0xec>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HIF_UART_Init+0xf0>)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002236:	2106      	movs	r1, #6
 8002238:	2026      	movs	r0, #38	; 0x26
 800223a:	f7ff fea9 	bl	8001f90 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800223e:	2026      	movs	r0, #38	; 0x26
 8002240:	f7ff fe88 	bl	8001f54 <__NVIC_EnableIRQ>
}
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	580244e8 	.word	0x580244e8
 8002250:	580244e0 	.word	0x580244e0
 8002254:	58020020 	.word	0x58020020
 8002258:	58020000 	.word	0x58020000
 800225c:	40004400 	.word	0x40004400
 8002260:	40004404 	.word	0x40004404
 8002264:	40004408 	.word	0x40004408
 8002268:	0e4e1c00 	.word	0x0e4e1c00
 800226c:	4000440c 	.word	0x4000440c
 8002270:	24005234 	.word	0x24005234
 8002274:	24005238 	.word	0x24005238

08002278 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <_DoInit+0xa0>)
 8002280:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002282:	22a8      	movs	r2, #168	; 0xa8
 8002284:	2100      	movs	r1, #0
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f006 fe5a 	bl	8008f40 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2203      	movs	r2, #3
 8002290:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2203      	movs	r2, #3
 8002296:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4a20      	ldr	r2, [pc, #128]	; (800231c <_DoInit+0xa4>)
 800229c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <_DoInit+0xa8>)
 80022a2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <_DoInit+0xa4>)
 80022c2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <_DoInit+0xac>)
 80022c8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2210      	movs	r2, #16
 80022ce:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2200      	movs	r2, #0
 80022da:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80022e2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	e00c      	b.n	8002306 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f1c3 030f 	rsb	r3, r3, #15
 80022f2:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <_DoInit+0xb0>)
 80022f4:	5cd1      	ldrb	r1, [r2, r3]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	460a      	mov	r2, r1
 80022fe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3301      	adds	r3, #1
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d9ef      	bls.n	80022ec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800230c:	f3bf 8f5f 	dmb	sy
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2400523c 	.word	0x2400523c
 800231c:	08009008 	.word	0x08009008
 8002320:	240052e4 	.word	0x240052e4
 8002324:	240056e4 	.word	0x240056e4
 8002328:	0800916c 	.word	0x0800916c

0800232c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	429a      	cmp	r2, r3
 800234e:	d905      	bls.n	800235c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	e007      	b.n	800236c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	1acb      	subs	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3b01      	subs	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	4293      	cmp	r3, r2
 8002378:	bf28      	it	cs
 800237a:	4613      	movcs	r3, r2
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4293      	cmp	r3, r2
 8002384:	bf28      	it	cs
 8002386:	4613      	movcs	r3, r2
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	6978      	ldr	r0, [r7, #20]
 800239a:	f006 fdc3 	bl	8008f24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800239e:	6a3a      	ldr	r2, [r7, #32]
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	4413      	add	r3, r2
 80023a4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	4413      	add	r3, r2
 80023ac:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	4413      	add	r3, r2
 80023bc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d101      	bne.n	80023cc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80023cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1b2      	bne.n	8002342 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80023dc:	6a3b      	ldr	r3, [r7, #32]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	d911      	bls.n	800242e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	4413      	add	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	6938      	ldr	r0, [r7, #16]
 800241a:	f006 fd83 	bl	8008f24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800241e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	441a      	add	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800242c:	e01f      	b.n	800246e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	6938      	ldr	r0, [r7, #16]
 8002442:	f006 fd6f 	bl	8008f24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4413      	add	r3, r2
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4619      	mov	r1, r3
 800245e:	6938      	ldr	r0, [r7, #16]
 8002460:	f006 fd60 	bl	8008f24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002464:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	60da      	str	r2, [r3, #12]
}
 800246e:	bf00      	nop
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002476:	b480      	push	{r7}
 8002478:	b087      	sub	sp, #28
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	429a      	cmp	r2, r3
 8002490:	d808      	bhi.n	80024a4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad2      	subs	r2, r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	3b01      	subs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e004      	b.n	80024ae <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
  }
  return r;
 80024ae:	697b      	ldr	r3, [r7, #20]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80024c8:	4b3e      	ldr	r3, [pc, #248]	; (80025c4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80024d6:	f7ff fecf 	bl	8002278 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80024e8:	4413      	add	r3, r2
 80024ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	429a      	cmp	r2, r3
 8002506:	d92b      	bls.n	8002560 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4293      	cmp	r3, r2
 8002518:	bf28      	it	cs
 800251a:	4613      	movcs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	4413      	add	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	6939      	ldr	r1, [r7, #16]
 800252c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800252e:	f006 fcf9 	bl	8008f24 <memcpy>
    NumBytesRead += NumBytesRem;
 8002532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	4413      	add	r3, r2
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	4413      	add	r3, r2
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800254a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	4413      	add	r3, r2
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002558:	429a      	cmp	r2, r3
 800255a:	d101      	bne.n	8002560 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4293      	cmp	r3, r2
 800256e:	bf28      	it	cs
 8002570:	4613      	movcs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d019      	beq.n	80025ae <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	4413      	add	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800258a:	f006 fccb 	bl	8008f24 <memcpy>
    NumBytesRead += NumBytesRem;
 800258e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4413      	add	r3, r2
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	4413      	add	r3, r2
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80025a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4413      	add	r3, r2
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3730      	adds	r7, #48	; 0x30
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2400523c 	.word	0x2400523c

080025c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <SEGGER_RTT_ReadNoLock+0x1e>
 80025e2:	f7ff fe49 	bl	8002278 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	3360      	adds	r3, #96	; 0x60
 80025f2:	4a37      	ldr	r2, [pc, #220]	; (80026d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80025f4:	4413      	add	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800260c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	429a      	cmp	r2, r3
 8002612:	d92b      	bls.n	800266c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4293      	cmp	r3, r2
 8002624:	bf28      	it	cs
 8002626:	4613      	movcs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	4413      	add	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	6939      	ldr	r1, [r7, #16]
 8002638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800263a:	f006 fc73 	bl	8008f24 <memcpy>
    NumBytesRead += NumBytesRem;
 800263e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4413      	add	r3, r2
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4413      	add	r3, r2
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4413      	add	r3, r2
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002664:	429a      	cmp	r2, r3
 8002666:	d101      	bne.n	800266c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4293      	cmp	r3, r2
 800267a:	bf28      	it	cs
 800267c:	4613      	movcs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d019      	beq.n	80026ba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	4413      	add	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	6939      	ldr	r1, [r7, #16]
 8002694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002696:	f006 fc45 	bl	8008f24 <memcpy>
    NumBytesRead += NumBytesRem;
 800269a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	4413      	add	r3, r2
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	4413      	add	r3, r2
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80026b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3730      	adds	r7, #48	; 0x30
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2400523c 	.word	0x2400523c

080026d4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	3360      	adds	r3, #96	; 0x60
 80026f0:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80026f2:	4413      	add	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d029      	beq.n	8002752 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d82e      	bhi.n	8002760 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002706:	2b01      	cmp	r3, #1
 8002708:	d013      	beq.n	8002732 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800270a:	e029      	b.n	8002760 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f7ff feb2 	bl	8002476 <_GetAvailWriteSpace>
 8002712:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d202      	bcs.n	8002722 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002720:	e021      	b.n	8002766 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	69b9      	ldr	r1, [r7, #24]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff fe5b 	bl	80023e6 <_WriteNoCheck>
    break;
 8002730:	e019      	b.n	8002766 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff fe9f 	bl	8002476 <_GetAvailWriteSpace>
 8002738:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4293      	cmp	r3, r2
 8002740:	bf28      	it	cs
 8002742:	4613      	movcs	r3, r2
 8002744:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff fe4b 	bl	80023e6 <_WriteNoCheck>
    break;
 8002750:	e009      	b.n	8002766 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	69b9      	ldr	r1, [r7, #24]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff fde8 	bl	800232c <_WriteBlocking>
 800275c:	61f8      	str	r0, [r7, #28]
    break;
 800275e:	e002      	b.n	8002766 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
    break;
 8002764:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002766:	69fb      	ldr	r3, [r7, #28]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	2400523c 	.word	0x2400523c

08002774 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800278e:	f7ff fd73 	bl	8002278 <_DoInit>
  SEGGER_RTT_LOCK();
 8002792:	f3ef 8311 	mrs	r3, BASEPRI
 8002796:	f04f 0120 	mov.w	r1, #32
 800279a:	f381 8811 	msr	BASEPRI, r1
 800279e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f7ff ff95 	bl	80026d4 <SEGGER_RTT_WriteDownBufferNoLock>
 80027aa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80027b2:	697b      	ldr	r3, [r7, #20]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2400523c 	.word	0x2400523c

080027c0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80027dc:	f7ff fd4c 	bl	8002278 <_DoInit>
  SEGGER_RTT_LOCK();
 80027e0:	f3ef 8311 	mrs	r3, BASEPRI
 80027e4:	f04f 0120 	mov.w	r1, #32
 80027e8:	f381 8811 	msr	BASEPRI, r1
 80027ec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80027ee:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80027f0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80027f6:	6939      	ldr	r1, [r7, #16]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3304      	adds	r3, #4
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbeb      	blt.n	80027f6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800281e:	e000      	b.n	8002822 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002820:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	429a      	cmp	r2, r3
 800282a:	da3f      	bge.n	80028ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800282c:	6939      	ldr	r1, [r7, #16]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002840:	6939      	ldr	r1, [r7, #16]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	3304      	adds	r3, #4
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002856:	6939      	ldr	r1, [r7, #16]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	3320      	adds	r3, #32
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800286a:	6939      	ldr	r1, [r7, #16]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	3328      	adds	r3, #40	; 0x28
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800287e:	6939      	ldr	r1, [r7, #16]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	3324      	adds	r3, #36	; 0x24
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002892:	6939      	ldr	r1, [r7, #16]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	332c      	adds	r3, #44	; 0x2c
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80028a6:	f3bf 8f5f 	dmb	sy
 80028aa:	e002      	b.n	80028b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80028b8:	69fb      	ldr	r3, [r7, #28]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2400523c 	.word	0x2400523c

080028c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80028e4:	f7ff fcc8 	bl	8002278 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80028ea:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d82c      	bhi.n	800294c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80028f2:	f3ef 8311 	mrs	r3, BASEPRI
 80028f6:	f04f 0120 	mov.w	r1, #32
 80028fa:	f381 8811 	msr	BASEPRI, r1
 80028fe:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	3360      	adds	r3, #96	; 0x60
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00e      	beq.n	8002936 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800293c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e002      	b.n	8002952 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800294c:	f04f 33ff 	mov.w	r3, #4294967295
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002954:	4618      	mov	r0, r3
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	2400523c 	.word	0x2400523c

08002960 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00f      	beq.n	8002996 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002976:	e002      	b.n	800297e <_EncodeStr+0x1e>
      Len++;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	3301      	adds	r3, #1
 800297c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f6      	bne.n	8002978 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d901      	bls.n	8002996 <_EncodeStr+0x36>
      Len = Limit;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2bfe      	cmp	r3, #254	; 0xfe
 800299a:	d806      	bhi.n	80029aa <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	60fa      	str	r2, [r7, #12]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e011      	b.n	80029ce <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	60fa      	str	r2, [r7, #12]
 80029b0:	22ff      	movs	r2, #255	; 0xff
 80029b2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60fa      	str	r2, [r7, #12]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	0a19      	lsrs	r1, r3, #8
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	60fa      	str	r2, [r7, #12]
 80029ca:	b2ca      	uxtb	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80029d2:	e00a      	b.n	80029ea <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	1c53      	adds	r3, r2, #1
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1c59      	adds	r1, r3, #1
 80029de:	60f9      	str	r1, [r7, #12]
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	701a      	strb	r2, [r3, #0]
    n++;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3f0      	bcc.n	80029d4 <_EncodeStr+0x74>
  }
  return pPayload;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3307      	adds	r3, #7
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002a1e:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <_HandleIncomingPacket+0xdc>)
 8002a20:	7e1b      	ldrb	r3, [r3, #24]
 8002a22:	4618      	mov	r0, r3
 8002a24:	1cfb      	adds	r3, r7, #3
 8002a26:	2201      	movs	r2, #1
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f7ff fdcd 	bl	80025c8 <SEGGER_RTT_ReadNoLock>
 8002a2e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d052      	beq.n	8002adc <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	2b80      	cmp	r3, #128	; 0x80
 8002a3a:	d031      	beq.n	8002aa0 <_HandleIncomingPacket+0x88>
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	dc40      	bgt.n	8002ac2 <_HandleIncomingPacket+0xaa>
 8002a40:	2b07      	cmp	r3, #7
 8002a42:	dc15      	bgt.n	8002a70 <_HandleIncomingPacket+0x58>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	dd3c      	ble.n	8002ac2 <_HandleIncomingPacket+0xaa>
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d839      	bhi.n	8002ac2 <_HandleIncomingPacket+0xaa>
 8002a4e:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <_HandleIncomingPacket+0x3c>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a77 	.word	0x08002a77
 8002a58:	08002a7d 	.word	0x08002a7d
 8002a5c:	08002a83 	.word	0x08002a83
 8002a60:	08002a89 	.word	0x08002a89
 8002a64:	08002a8f 	.word	0x08002a8f
 8002a68:	08002a95 	.word	0x08002a95
 8002a6c:	08002a9b 	.word	0x08002a9b
 8002a70:	2b7f      	cmp	r3, #127	; 0x7f
 8002a72:	d035      	beq.n	8002ae0 <_HandleIncomingPacket+0xc8>
 8002a74:	e025      	b.n	8002ac2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002a76:	f000 ff59 	bl	800392c <SEGGER_SYSVIEW_Start>
      break;
 8002a7a:	e036      	b.n	8002aea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002a7c:	f001 f812 	bl	8003aa4 <SEGGER_SYSVIEW_Stop>
      break;
 8002a80:	e033      	b.n	8002aea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002a82:	f001 f9eb 	bl	8003e5c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002a86:	e030      	b.n	8002aea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002a88:	f001 f9b0 	bl	8003dec <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002a8c:	e02d      	b.n	8002aea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002a8e:	f001 f82f 	bl	8003af0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002a92:	e02a      	b.n	8002aea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002a94:	f001 fc04 	bl	80042a0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002a98:	e027      	b.n	8002aea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002a9a:	f001 fbe3 	bl	8004264 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002a9e:	e024      	b.n	8002aea <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <_HandleIncomingPacket+0xdc>)
 8002aa2:	7e1b      	ldrb	r3, [r3, #24]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	1cfb      	adds	r3, r7, #3
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7ff fd8c 	bl	80025c8 <SEGGER_RTT_ReadNoLock>
 8002ab0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 fb52 	bl	8004164 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002ac0:	e010      	b.n	8002ae4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da0e      	bge.n	8002ae8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <_HandleIncomingPacket+0xdc>)
 8002acc:	7e1b      	ldrb	r3, [r3, #24]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	1cfb      	adds	r3, r7, #3
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7ff fd77 	bl	80025c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002ada:	e005      	b.n	8002ae8 <_HandleIncomingPacket+0xd0>
    }
  }
 8002adc:	bf00      	nop
 8002ade:	e004      	b.n	8002aea <_HandleIncomingPacket+0xd2>
      break;
 8002ae0:	bf00      	nop
 8002ae2:	e002      	b.n	8002aea <_HandleIncomingPacket+0xd2>
      break;
 8002ae4:	bf00      	nop
 8002ae6:	e000      	b.n	8002aea <_HandleIncomingPacket+0xd2>
      break;
 8002ae8:	bf00      	nop
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2407d2fc 	.word	0x2407d2fc

08002af8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002afe:	2301      	movs	r3, #1
 8002b00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0c:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <_TrySendOverflowPacket+0xe0>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b12:	e00b      	b.n	8002b2c <_TrySendOverflowPacket+0x34>
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	09db      	lsrs	r3, r3, #7
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b30:	d8f0      	bhi.n	8002b14 <_TrySendOverflowPacket+0x1c>
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <_TrySendOverflowPacket+0xe4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <_TrySendOverflowPacket+0xe0>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	e00b      	b.n	8002b74 <_TrySendOverflowPacket+0x7c>
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1c59      	adds	r1, r3, #1
 8002b64:	6279      	str	r1, [r7, #36]	; 0x24
 8002b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	09db      	lsrs	r3, r3, #7
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2b7f      	cmp	r3, #127	; 0x7f
 8002b78:	d8f0      	bhi.n	8002b5c <_TrySendOverflowPacket+0x64>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <_TrySendOverflowPacket+0xe0>)
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7fd fba0 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002ba4:	f7ff fade 	bl	8002164 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <_TrySendOverflowPacket+0xe0>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <_TrySendOverflowPacket+0xe0>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <_TrySendOverflowPacket+0xe0>)
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e004      	b.n	8002bcc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <_TrySendOverflowPacket+0xe0>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	4a03      	ldr	r2, [pc, #12]	; (8002bd8 <_TrySendOverflowPacket+0xe0>)
 8002bca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002bcc:	693b      	ldr	r3, [r7, #16]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3730      	adds	r7, #48	; 0x30
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2407d2fc 	.word	0x2407d2fc
 8002bdc:	e0001004 	.word	0xe0001004

08002be0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002bec:	4b96      	ldr	r3, [pc, #600]	; (8002e48 <_SendPacket+0x268>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d010      	beq.n	8002c16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002bf4:	4b94      	ldr	r3, [pc, #592]	; (8002e48 <_SendPacket+0x268>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8130 	beq.w	8002e5e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002bfe:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <_SendPacket+0x268>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d109      	bne.n	8002c1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002c06:	f7ff ff77 	bl	8002af8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002c0a:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <_SendPacket+0x268>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	f040 8127 	bne.w	8002e62 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8002c14:	e001      	b.n	8002c1a <_SendPacket+0x3a>
    goto Send;
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <_SendPacket+0x3c>
Send:
 8002c1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b1f      	cmp	r3, #31
 8002c20:	d809      	bhi.n	8002c36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002c22:	4b89      	ldr	r3, [pc, #548]	; (8002e48 <_SendPacket+0x268>)
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 8118 	bne.w	8002e66 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b17      	cmp	r3, #23
 8002c3a:	d807      	bhi.n	8002c4c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e0c4      	b.n	8002dd6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b7f      	cmp	r3, #127	; 0x7f
 8002c58:	d912      	bls.n	8002c80 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	09da      	lsrs	r2, r3, #7
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	3a01      	subs	r2, #1
 8002c72:	60fa      	str	r2, [r7, #12]
 8002c74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e006      	b.n	8002c8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b7e      	cmp	r3, #126	; 0x7e
 8002c92:	d807      	bhi.n	8002ca4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e098      	b.n	8002dd6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002caa:	d212      	bcs.n	8002cd2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	09da      	lsrs	r2, r3, #7
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	60fa      	str	r2, [r7, #12]
 8002cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e081      	b.n	8002dd6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cd8:	d21d      	bcs.n	8002d16 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0b9a      	lsrs	r2, r3, #14
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	09db      	lsrs	r3, r3, #7
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	60fa      	str	r2, [r7, #12]
 8002cf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	3a01      	subs	r2, #1
 8002d08:	60fa      	str	r2, [r7, #12]
 8002d0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e05f      	b.n	8002dd6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d1c:	d228      	bcs.n	8002d70 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0d5a      	lsrs	r2, r3, #21
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0b9b      	lsrs	r3, r3, #14
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	3a01      	subs	r2, #1
 8002d38:	60fa      	str	r2, [r7, #12]
 8002d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	09db      	lsrs	r3, r3, #7
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	3a01      	subs	r2, #1
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	3a01      	subs	r2, #1
 8002d62:	60fa      	str	r2, [r7, #12]
 8002d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e032      	b.n	8002dd6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0f1a      	lsrs	r2, r3, #28
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0d5b      	lsrs	r3, r3, #21
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	3a01      	subs	r2, #1
 8002d8a:	60fa      	str	r2, [r7, #12]
 8002d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0b9b      	lsrs	r3, r3, #14
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	60fa      	str	r2, [r7, #12]
 8002da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	09db      	lsrs	r3, r3, #7
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	3a01      	subs	r2, #1
 8002db6:	60fa      	str	r2, [r7, #12]
 8002db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	60fa      	str	r2, [r7, #12]
 8002dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <_SendPacket+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <_SendPacket+0x268>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	623b      	str	r3, [r7, #32]
 8002dee:	e00b      	b.n	8002e08 <_SendPacket+0x228>
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	1c59      	adds	r1, r3, #1
 8002df8:	6279      	str	r1, [r7, #36]	; 0x24
 8002dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	09db      	lsrs	r3, r3, #7
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e0c:	d8f0      	bhi.n	8002df0 <_SendPacket+0x210>
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	627a      	str	r2, [r7, #36]	; 0x24
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <_SendPacket+0x268>)
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	4618      	mov	r0, r3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	f7fd fa57 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002e32:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002e34:	f7ff f996 	bl	8002164 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002e3e:	4a02      	ldr	r2, [pc, #8]	; (8002e48 <_SendPacket+0x268>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	60d3      	str	r3, [r2, #12]
 8002e44:	e010      	b.n	8002e68 <_SendPacket+0x288>
 8002e46:	bf00      	nop
 8002e48:	2407d2fc 	.word	0x2407d2fc
 8002e4c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <_SendPacket+0x2d8>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <_SendPacket+0x2d8>)
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e004      	b.n	8002e68 <_SendPacket+0x288>
    goto SendDone;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <_SendPacket+0x288>
      goto SendDone;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <_SendPacket+0x288>
      goto SendDone;
 8002e66:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <_SendPacket+0x2d8>)
 8002e6a:	7e1b      	ldrb	r3, [r3, #24]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <_SendPacket+0x2dc>)
 8002e70:	460b      	mov	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	440b      	add	r3, r1
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	336c      	adds	r3, #108	; 0x6c
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <_SendPacket+0x2d8>)
 8002e80:	7e1b      	ldrb	r3, [r3, #24]
 8002e82:	4618      	mov	r0, r3
 8002e84:	490d      	ldr	r1, [pc, #52]	; (8002ebc <_SendPacket+0x2dc>)
 8002e86:	4603      	mov	r3, r0
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4403      	add	r3, r0
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	3370      	adds	r3, #112	; 0x70
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d00b      	beq.n	8002eb0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <_SendPacket+0x2d8>)
 8002e9a:	789b      	ldrb	r3, [r3, #2]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <_SendPacket+0x2d8>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002ea6:	f7ff fdb7 	bl	8002a18 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002eaa:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <_SendPacket+0x2d8>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002eb0:	bf00      	nop
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2407d2fc 	.word	0x2407d2fc
 8002ebc:	2400523c 	.word	0x2400523c

08002ec0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d80a      	bhi.n	8002ef0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	1c59      	adds	r1, r3, #1
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6051      	str	r1, [r2, #4]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b80      	cmp	r3, #128	; 0x80
 8002ef6:	d15a      	bne.n	8002fae <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	e00b      	b.n	8002f32 <_StoreChar+0x72>
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	1c59      	adds	r1, r3, #1
 8002f22:	6279      	str	r1, [r7, #36]	; 0x24
 8002f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	09db      	lsrs	r3, r3, #7
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	2b7f      	cmp	r3, #127	; 0x7f
 8002f36:	d8f0      	bhi.n	8002f1a <_StoreChar+0x5a>
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e00b      	b.n	8002f6a <_StoreChar+0xaa>
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	1c59      	adds	r1, r3, #1
 8002f5a:	61f9      	str	r1, [r7, #28]
 8002f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	09db      	lsrs	r3, r3, #7
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f6e:	d8f0      	bhi.n	8002f52 <_StoreChar+0x92>
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	61fa      	str	r2, [r7, #28]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	221a      	movs	r2, #26
 8002f86:	6939      	ldr	r1, [r7, #16]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fe29 	bl	8002be0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fd34 	bl	8002a00 <_PreparePacket>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  }
}
 8002fae:	bf00      	nop
 8002fb0:	3728      	adds	r7, #40	; 0x28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002fd2:	e007      	b.n	8002fe4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	623b      	str	r3, [r7, #32]
    Width++;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d2f3      	bcs.n	8002fd4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d901      	bls.n	8002ff8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d11f      	bne.n	8003042 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01c      	beq.n	8003042 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <_PrintUnsigned+0x66>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <_PrintUnsigned+0x66>
        c = '0';
 8003018:	2330      	movs	r3, #48	; 0x30
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e001      	b.n	8003022 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800301e:	2320      	movs	r3, #32
 8003020:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003022:	e007      	b.n	8003034 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	3b01      	subs	r3, #1
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800302a:	7efb      	ldrb	r3, [r7, #27]
 800302c:	4619      	mov	r1, r3
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff ff46 	bl	8002ec0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <_PrintUnsigned+0x8a>
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	429a      	cmp	r2, r3
 8003040:	d3f0      	bcc.n	8003024 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d903      	bls.n	8003050 <_PrintUnsigned+0x98>
      NumDigits--;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	e009      	b.n	8003064 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	d200      	bcs.n	8003064 <_PrintUnsigned+0xac>
        break;
 8003062:	e005      	b.n	8003070 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800306e:	e7e8      	b.n	8003042 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003088:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <_PrintUnsigned+0x128>)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	4413      	add	r3, r2
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4619      	mov	r1, r3
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff ff14 	bl	8002ec0 <_StoreChar>
    Digit /= Base;
 8003098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e3      	bne.n	8003070 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d011      	beq.n	80030d6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80030b8:	e006      	b.n	80030c8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	3b01      	subs	r3, #1
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80030c0:	2120      	movs	r1, #32
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff fefc 	bl	8002ec0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <_PrintUnsigned+0x11e>
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d3f1      	bcc.n	80030ba <_PrintUnsigned+0x102>
      }
    }
  }
}
 80030d6:	bf00      	nop
 80030d8:	3728      	adds	r7, #40	; 0x28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	0800918c 	.word	0x0800918c

080030e4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bfb8      	it	lt
 80030f8:	425b      	neglt	r3, r3
 80030fa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80030fc:	2301      	movs	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003100:	e007      	b.n	8003112 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	fb92 f3f3 	sdiv	r3, r2, r3
 800310a:	613b      	str	r3, [r7, #16]
    Width++;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3301      	adds	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	429a      	cmp	r2, r3
 8003118:	daf3      	bge.n	8003102 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	429a      	cmp	r2, r3
 8003120:	d901      	bls.n	8003126 <_PrintInt+0x42>
    Width = NumDigits;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <_PrintInt+0x5e>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db04      	blt.n	800313c <_PrintInt+0x58>
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <_PrintInt+0x5e>
    FieldWidth--;
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	3b01      	subs	r3, #1
 8003140:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <_PrintInt+0x6e>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d016      	beq.n	8003180 <_PrintInt+0x9c>
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003162:	e006      	b.n	8003172 <_PrintInt+0x8e>
        FieldWidth--;
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	3b01      	subs	r3, #1
 8003168:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800316a:	2120      	movs	r1, #32
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff fea7 	bl	8002ec0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <_PrintInt+0x9c>
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	429a      	cmp	r2, r3
 800317e:	d3f1      	bcc.n	8003164 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	da07      	bge.n	8003196 <_PrintInt+0xb2>
    v = -v;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	425b      	negs	r3, r3
 800318a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800318c:	212d      	movs	r1, #45	; 0x2d
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff fe96 	bl	8002ec0 <_StoreChar>
 8003194:	e008      	b.n	80031a8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80031a0:	212b      	movs	r1, #43	; 0x2b
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7ff fe8c 	bl	8002ec0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <_PrintInt+0x102>
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d114      	bne.n	80031e6 <_PrintInt+0x102>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d111      	bne.n	80031e6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80031c8:	e006      	b.n	80031d8 <_PrintInt+0xf4>
        FieldWidth--;
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80031d0:	2130      	movs	r1, #48	; 0x30
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff fe74 	bl	8002ec0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <_PrintInt+0x102>
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d3f1      	bcc.n	80031ca <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff fedf 	bl	8002fb8 <_PrintUnsigned>
}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b098      	sub	sp, #96	; 0x60
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003210:	f3ef 8311 	mrs	r3, BASEPRI
 8003214:	f04f 0120 	mov.w	r1, #32
 8003218:	f381 8811 	msr	BASEPRI, r1
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 800321e:	48b7      	ldr	r0, [pc, #732]	; (80034fc <_VPrintTarget+0x2f8>)
 8003220:	f7ff fbee 	bl	8002a00 <_PreparePacket>
 8003224:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003226:	4bb5      	ldr	r3, [pc, #724]	; (80034fc <_VPrintTarget+0x2f8>)
 8003228:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3301      	adds	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800324a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8183 	beq.w	800355a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003258:	2b25      	cmp	r3, #37	; 0x25
 800325a:	f040 8170 	bne.w	800353e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800325e:	2300      	movs	r3, #0
 8003260:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800326e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003272:	3b23      	subs	r3, #35	; 0x23
 8003274:	2b0d      	cmp	r3, #13
 8003276:	d83f      	bhi.n	80032f8 <_VPrintTarget+0xf4>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <_VPrintTarget+0x7c>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032e9 	.word	0x080032e9
 8003284:	080032f9 	.word	0x080032f9
 8003288:	080032f9 	.word	0x080032f9
 800328c:	080032f9 	.word	0x080032f9
 8003290:	080032f9 	.word	0x080032f9
 8003294:	080032f9 	.word	0x080032f9
 8003298:	080032f9 	.word	0x080032f9
 800329c:	080032f9 	.word	0x080032f9
 80032a0:	080032d9 	.word	0x080032d9
 80032a4:	080032f9 	.word	0x080032f9
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032f9 	.word	0x080032f9
 80032b0:	080032f9 	.word	0x080032f9
 80032b4:	080032c9 	.word	0x080032c9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80032b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e01a      	b.n	80032fe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80032c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e012      	b.n	80032fe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80032d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3301      	adds	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e00a      	b.n	80032fe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80032e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ea:	f043 0308 	orr.w	r3, r3, #8
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	e002      	b.n	80032fe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80032f8:	2300      	movs	r3, #0
 80032fa:	653b      	str	r3, [r7, #80]	; 0x50
 80032fc:	bf00      	nop
        }
      } while (v);
 80032fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1b0      	bne.n	8003266 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003304:	2300      	movs	r3, #0
 8003306:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003314:	2b2f      	cmp	r3, #47	; 0x2f
 8003316:	d912      	bls.n	800333e <_VPrintTarget+0x13a>
 8003318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800331c:	2b39      	cmp	r3, #57	; 0x39
 800331e:	d80e      	bhi.n	800333e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	461a      	mov	r2, r3
 8003332:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003336:	4413      	add	r3, r2
 8003338:	3b30      	subs	r3, #48	; 0x30
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800333c:	e7e4      	b.n	8003308 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800333e:	2300      	movs	r3, #0
 8003340:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800334a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800334e:	2b2e      	cmp	r3, #46	; 0x2e
 8003350:	d11d      	bne.n	800338e <_VPrintTarget+0x18a>
        sFormat++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3301      	adds	r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003364:	2b2f      	cmp	r3, #47	; 0x2f
 8003366:	d912      	bls.n	800338e <_VPrintTarget+0x18a>
 8003368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800336c:	2b39      	cmp	r3, #57	; 0x39
 800336e:	d80e      	bhi.n	800338e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8003376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	461a      	mov	r2, r3
 8003382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003386:	4413      	add	r3, r2
 8003388:	3b30      	subs	r3, #48	; 0x30
 800338a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800338c:	e7e4      	b.n	8003358 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8003396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800339a:	2b6c      	cmp	r3, #108	; 0x6c
 800339c:	d003      	beq.n	80033a6 <_VPrintTarget+0x1a2>
 800339e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033a2:	2b68      	cmp	r3, #104	; 0x68
 80033a4:	d107      	bne.n	80033b6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3301      	adds	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80033b4:	e7ef      	b.n	8003396 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80033b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033ba:	2b25      	cmp	r3, #37	; 0x25
 80033bc:	f000 80b3 	beq.w	8003526 <_VPrintTarget+0x322>
 80033c0:	2b25      	cmp	r3, #37	; 0x25
 80033c2:	f2c0 80b7 	blt.w	8003534 <_VPrintTarget+0x330>
 80033c6:	2b78      	cmp	r3, #120	; 0x78
 80033c8:	f300 80b4 	bgt.w	8003534 <_VPrintTarget+0x330>
 80033cc:	2b58      	cmp	r3, #88	; 0x58
 80033ce:	f2c0 80b1 	blt.w	8003534 <_VPrintTarget+0x330>
 80033d2:	3b58      	subs	r3, #88	; 0x58
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	f200 80ad 	bhi.w	8003534 <_VPrintTarget+0x330>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <_VPrintTarget+0x1dc>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	080034d7 	.word	0x080034d7
 80033e4:	08003535 	.word	0x08003535
 80033e8:	08003535 	.word	0x08003535
 80033ec:	08003535 	.word	0x08003535
 80033f0:	08003535 	.word	0x08003535
 80033f4:	08003535 	.word	0x08003535
 80033f8:	08003535 	.word	0x08003535
 80033fc:	08003535 	.word	0x08003535
 8003400:	08003535 	.word	0x08003535
 8003404:	08003535 	.word	0x08003535
 8003408:	08003535 	.word	0x08003535
 800340c:	08003465 	.word	0x08003465
 8003410:	0800348b 	.word	0x0800348b
 8003414:	08003535 	.word	0x08003535
 8003418:	08003535 	.word	0x08003535
 800341c:	08003535 	.word	0x08003535
 8003420:	08003535 	.word	0x08003535
 8003424:	08003535 	.word	0x08003535
 8003428:	08003535 	.word	0x08003535
 800342c:	08003535 	.word	0x08003535
 8003430:	08003535 	.word	0x08003535
 8003434:	08003535 	.word	0x08003535
 8003438:	08003535 	.word	0x08003535
 800343c:	08003535 	.word	0x08003535
 8003440:	08003501 	.word	0x08003501
 8003444:	08003535 	.word	0x08003535
 8003448:	08003535 	.word	0x08003535
 800344c:	08003535 	.word	0x08003535
 8003450:	08003535 	.word	0x08003535
 8003454:	080034b1 	.word	0x080034b1
 8003458:	08003535 	.word	0x08003535
 800345c:	08003535 	.word	0x08003535
 8003460:	080034d7 	.word	0x080034d7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	1d19      	adds	r1, r3, #4
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6011      	str	r1, [r2, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8003472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8003478:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fd1c 	bl	8002ec0 <_StoreChar>
        break;
 8003488:	e055      	b.n	8003536 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	1d19      	adds	r1, r3, #4
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6011      	str	r1, [r2, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003498:	f107 0014 	add.w	r0, r7, #20
 800349c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a6:	220a      	movs	r2, #10
 80034a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034aa:	f7ff fe1b 	bl	80030e4 <_PrintInt>
        break;
 80034ae:	e042      	b.n	8003536 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1d19      	adds	r1, r3, #4
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6011      	str	r1, [r2, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80034be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034c0:	f107 0014 	add.w	r0, r7, #20
 80034c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ce:	220a      	movs	r2, #10
 80034d0:	f7ff fd72 	bl	8002fb8 <_PrintUnsigned>
        break;
 80034d4:	e02f      	b.n	8003536 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	1d19      	adds	r1, r3, #4
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6011      	str	r1, [r2, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80034e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034e6:	f107 0014 	add.w	r0, r7, #20
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f4:	2210      	movs	r2, #16
 80034f6:	f7ff fd5f 	bl	8002fb8 <_PrintUnsigned>
        break;
 80034fa:	e01c      	b.n	8003536 <_VPrintTarget+0x332>
 80034fc:	2407d32c 	.word	0x2407d32c
      case 'p':
        v = va_arg(*pParamList, int);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	1d19      	adds	r1, r3, #4
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6011      	str	r1, [r2, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800350e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003510:	f107 0014 	add.w	r0, r7, #20
 8003514:	2300      	movs	r3, #0
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2308      	movs	r3, #8
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2308      	movs	r3, #8
 800351e:	2210      	movs	r2, #16
 8003520:	f7ff fd4a 	bl	8002fb8 <_PrintUnsigned>
        break;
 8003524:	e007      	b.n	8003536 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	2125      	movs	r1, #37	; 0x25
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fcc7 	bl	8002ec0 <_StoreChar>
        break;
 8003532:	e000      	b.n	8003536 <_VPrintTarget+0x332>
      default:
        break;
 8003534:	bf00      	nop
      }
      sFormat++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3301      	adds	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e007      	b.n	800354e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800353e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fcb9 	bl	8002ec0 <_StoreChar>
    }
  } while (*sFormat);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f47f ae72 	bne.w	800323c <_VPrintTarget+0x38>
 8003558:	e000      	b.n	800355c <_VPrintTarget+0x358>
      break;
 800355a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d041      	beq.n	80035e6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	643b      	str	r3, [r7, #64]	; 0x40
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003572:	e00b      	b.n	800358c <_VPrintTarget+0x388>
 8003574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003576:	b2da      	uxtb	r2, r3
 8003578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	6439      	str	r1, [r7, #64]	; 0x40
 800357e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003588:	09db      	lsrs	r3, r3, #7
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358e:	2b7f      	cmp	r3, #127	; 0x7f
 8003590:	d8f0      	bhi.n	8003574 <_VPrintTarget+0x370>
 8003592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	643a      	str	r2, [r7, #64]	; 0x40
 8003598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
 80035aa:	e00b      	b.n	80035c4 <_VPrintTarget+0x3c0>
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	09db      	lsrs	r3, r3, #7
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	2b7f      	cmp	r3, #127	; 0x7f
 80035c8:	d8f0      	bhi.n	80035ac <_VPrintTarget+0x3a8>
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80035d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	221a      	movs	r2, #26
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fafd 	bl	8002be0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80035ec:	bf00      	nop
 80035ee:	3758      	adds	r7, #88	; 0x58
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003602:	2300      	movs	r3, #0
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <SEGGER_SYSVIEW_Init+0x74>)
 8003606:	4919      	ldr	r1, [pc, #100]	; (800366c <SEGGER_SYSVIEW_Init+0x78>)
 8003608:	4819      	ldr	r0, [pc, #100]	; (8003670 <SEGGER_SYSVIEW_Init+0x7c>)
 800360a:	f7ff f8d9 	bl	80027c0 <SEGGER_RTT_AllocUpBuffer>
 800360e:	4603      	mov	r3, r0
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 8003614:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003616:	4b17      	ldr	r3, [pc, #92]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 8003618:	785a      	ldrb	r2, [r3, #1]
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 800361c:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 8003620:	7e1b      	ldrb	r3, [r3, #24]
 8003622:	4618      	mov	r0, r3
 8003624:	2300      	movs	r3, #0
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2308      	movs	r3, #8
 800362a:	4a13      	ldr	r2, [pc, #76]	; (8003678 <SEGGER_SYSVIEW_Init+0x84>)
 800362c:	4910      	ldr	r1, [pc, #64]	; (8003670 <SEGGER_SYSVIEW_Init+0x7c>)
 800362e:	f7ff f94b 	bl	80028c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <SEGGER_SYSVIEW_Init+0x88>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 800363e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003640:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800364c:	4a09      	ldr	r2, [pc, #36]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003652:	4a08      	ldr	r2, [pc, #32]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SEGGER_SYSVIEW_Init+0x80>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	00077c00 	.word	0x00077c00
 800366c:	240056f4 	.word	0x240056f4
 8003670:	08009014 	.word	0x08009014
 8003674:	2407d2fc 	.word	0x2407d2fc
 8003678:	2407d2f4 	.word	0x2407d2f4
 800367c:	e0001004 	.word	0xe0001004

08003680 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6113      	str	r3, [r2, #16]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	2407d2fc 	.word	0x2407d2fc

080036a0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80036a8:	f3ef 8311 	mrs	r3, BASEPRI
 80036ac:	f04f 0120 	mov.w	r1, #32
 80036b0:	f381 8811 	msr	BASEPRI, r1
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4808      	ldr	r0, [pc, #32]	; (80036d8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80036b8:	f7ff f9a2 	bl	8002a00 <_PreparePacket>
 80036bc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68b8      	ldr	r0, [r7, #8]
 80036c4:	f7ff fa8c 	bl	8002be0 <_SendPacket>
  RECORD_END();
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f383 8811 	msr	BASEPRI, r3
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2407d32c 	.word	0x2407d32c

080036dc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80036e6:	f3ef 8311 	mrs	r3, BASEPRI
 80036ea:	f04f 0120 	mov.w	r1, #32
 80036ee:	f381 8811 	msr	BASEPRI, r1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	4816      	ldr	r0, [pc, #88]	; (8003750 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80036f6:	f7ff f983 	bl	8002a00 <_PreparePacket>
 80036fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e00b      	b.n	8003722 <SEGGER_SYSVIEW_RecordU32+0x46>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	1c59      	adds	r1, r3, #1
 8003712:	61f9      	str	r1, [r7, #28]
 8003714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	09db      	lsrs	r3, r3, #7
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b7f      	cmp	r3, #127	; 0x7f
 8003726:	d8f0      	bhi.n	800370a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	61fa      	str	r2, [r7, #28]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68f9      	ldr	r1, [r7, #12]
 800373c:	6938      	ldr	r0, [r7, #16]
 800373e:	f7ff fa4f 	bl	8002be0 <_SendPacket>
  RECORD_END();
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f383 8811 	msr	BASEPRI, r3
}
 8003748:	bf00      	nop
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	2407d32c 	.word	0x2407d32c

08003754 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003760:	f3ef 8311 	mrs	r3, BASEPRI
 8003764:	f04f 0120 	mov.w	r1, #32
 8003768:	f381 8811 	msr	BASEPRI, r1
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	4825      	ldr	r0, [pc, #148]	; (8003804 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003770:	f7ff f946 	bl	8002a00 <_PreparePacket>
 8003774:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
 8003782:	e00b      	b.n	800379c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	b2da      	uxtb	r2, r3
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800378e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	09db      	lsrs	r3, r3, #7
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b7f      	cmp	r3, #127	; 0x7f
 80037a0:	d8f0      	bhi.n	8003784 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	e00b      	b.n	80037d4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	1c59      	adds	r1, r3, #1
 80037c4:	6279      	str	r1, [r7, #36]	; 0x24
 80037c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	09db      	lsrs	r3, r3, #7
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	2b7f      	cmp	r3, #127	; 0x7f
 80037d8:	d8f0      	bhi.n	80037bc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	627a      	str	r2, [r7, #36]	; 0x24
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	6979      	ldr	r1, [r7, #20]
 80037ee:	69b8      	ldr	r0, [r7, #24]
 80037f0:	f7ff f9f6 	bl	8002be0 <_SendPacket>
  RECORD_END();
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f383 8811 	msr	BASEPRI, r3
}
 80037fa:	bf00      	nop
 80037fc:	3730      	adds	r7, #48	; 0x30
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2407d32c 	.word	0x2407d32c

08003808 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b090      	sub	sp, #64	; 0x40
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003816:	f3ef 8311 	mrs	r3, BASEPRI
 800381a:	f04f 0120 	mov.w	r1, #32
 800381e:	f381 8811 	msr	BASEPRI, r1
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	4840      	ldr	r0, [pc, #256]	; (8003928 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003826:	f7ff f8eb 	bl	8002a00 <_PreparePacket>
 800382a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
 8003838:	e00b      	b.n	8003852 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	b2da      	uxtb	r2, r3
 800383e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003840:	1c59      	adds	r1, r3, #1
 8003842:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	09db      	lsrs	r3, r3, #7
 8003850:	63bb      	str	r3, [r7, #56]	; 0x38
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	2b7f      	cmp	r3, #127	; 0x7f
 8003856:	d8f0      	bhi.n	800383a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800385e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003866:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
 8003870:	e00b      	b.n	800388a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	b2da      	uxtb	r2, r3
 8003876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003878:	1c59      	adds	r1, r3, #1
 800387a:	6379      	str	r1, [r7, #52]	; 0x34
 800387c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	09db      	lsrs	r3, r3, #7
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	2b7f      	cmp	r3, #127	; 0x7f
 800388e:	d8f0      	bhi.n	8003872 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	637a      	str	r2, [r7, #52]	; 0x34
 8003896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a8:	e00b      	b.n	80038c2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	1c59      	adds	r1, r3, #1
 80038b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	09db      	lsrs	r3, r3, #7
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	2b7f      	cmp	r3, #127	; 0x7f
 80038c6:	d8f0      	bhi.n	80038aa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	e00b      	b.n	80038fa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1c59      	adds	r1, r3, #1
 80038ea:	6279      	str	r1, [r7, #36]	; 0x24
 80038ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	09db      	lsrs	r3, r3, #7
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2b7f      	cmp	r3, #127	; 0x7f
 80038fe:	d8f0      	bhi.n	80038e2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	627a      	str	r2, [r7, #36]	; 0x24
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	69b8      	ldr	r0, [r7, #24]
 8003916:	f7ff f963 	bl	8002be0 <_SendPacket>
  RECORD_END();
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f383 8811 	msr	BASEPRI, r3
}
 8003920:	bf00      	nop
 8003922:	3740      	adds	r7, #64	; 0x40
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	2407d32c 	.word	0x2407d32c

0800392c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	; 0x30
 8003930:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003932:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <SEGGER_SYSVIEW_Start+0x16c>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003938:	f3ef 8311 	mrs	r3, BASEPRI
 800393c:	f04f 0120 	mov.w	r1, #32
 8003940:	f381 8811 	msr	BASEPRI, r1
 8003944:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003946:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <SEGGER_SYSVIEW_Start+0x16c>)
 8003948:	785b      	ldrb	r3, [r3, #1]
 800394a:	220a      	movs	r2, #10
 800394c:	4953      	ldr	r1, [pc, #332]	; (8003a9c <SEGGER_SYSVIEW_Start+0x170>)
 800394e:	4618      	mov	r0, r3
 8003950:	f7fc fcc6 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800395a:	f7fe fc03 	bl	8002164 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800395e:	200a      	movs	r0, #10
 8003960:	f7ff fe9e 	bl	80036a0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003964:	f3ef 8311 	mrs	r3, BASEPRI
 8003968:	f04f 0120 	mov.w	r1, #32
 800396c:	f381 8811 	msr	BASEPRI, r1
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	484b      	ldr	r0, [pc, #300]	; (8003aa0 <SEGGER_SYSVIEW_Start+0x174>)
 8003974:	f7ff f844 	bl	8002a00 <_PreparePacket>
 8003978:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003982:	4b45      	ldr	r3, [pc, #276]	; (8003a98 <SEGGER_SYSVIEW_Start+0x16c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
 8003988:	e00b      	b.n	80039a2 <SEGGER_SYSVIEW_Start+0x76>
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	b2da      	uxtb	r2, r3
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003990:	1c59      	adds	r1, r3, #1
 8003992:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	09db      	lsrs	r3, r3, #7
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	2b7f      	cmp	r3, #127	; 0x7f
 80039a6:	d8f0      	bhi.n	800398a <SEGGER_SYSVIEW_Start+0x5e>
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <SEGGER_SYSVIEW_Start+0x16c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	623b      	str	r3, [r7, #32]
 80039c2:	e00b      	b.n	80039dc <SEGGER_SYSVIEW_Start+0xb0>
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	1c59      	adds	r1, r3, #1
 80039cc:	6279      	str	r1, [r7, #36]	; 0x24
 80039ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	09db      	lsrs	r3, r3, #7
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2b7f      	cmp	r3, #127	; 0x7f
 80039e0:	d8f0      	bhi.n	80039c4 <SEGGER_SYSVIEW_Start+0x98>
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	627a      	str	r2, [r7, #36]	; 0x24
 80039e8:	6a3a      	ldr	r2, [r7, #32]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <SEGGER_SYSVIEW_Start+0x16c>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e00b      	b.n	8003a16 <SEGGER_SYSVIEW_Start+0xea>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	1c59      	adds	r1, r3, #1
 8003a06:	61f9      	str	r1, [r7, #28]
 8003a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	09db      	lsrs	r3, r3, #7
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b7f      	cmp	r3, #127	; 0x7f
 8003a1a:	d8f0      	bhi.n	80039fe <SEGGER_SYSVIEW_Start+0xd2>
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	61fa      	str	r2, [r7, #28]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e00b      	b.n	8003a4e <SEGGER_SYSVIEW_Start+0x122>
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	1c59      	adds	r1, r3, #1
 8003a3e:	6179      	str	r1, [r7, #20]
 8003a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	09db      	lsrs	r3, r3, #7
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b7f      	cmp	r3, #127	; 0x7f
 8003a52:	d8f0      	bhi.n	8003a36 <SEGGER_SYSVIEW_Start+0x10a>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	617a      	str	r2, [r7, #20]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003a64:	2218      	movs	r2, #24
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff f8b9 	bl	8002be0 <_SendPacket>
      RECORD_END();
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003a82:	f000 f9eb 	bl	8003e5c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003a86:	f000 f9b1 	bl	8003dec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003a8a:	f000 fc09 	bl	80042a0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003a8e:	bf00      	nop
 8003a90:	3730      	adds	r7, #48	; 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2407d2fc 	.word	0x2407d2fc
 8003a9c:	08009180 	.word	0x08009180
 8003aa0:	2407d32c 	.word	0x2407d32c

08003aa4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8003aae:	f04f 0120 	mov.w	r1, #32
 8003ab2:	f381 8811 	msr	BASEPRI, r1
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	480b      	ldr	r0, [pc, #44]	; (8003ae8 <SEGGER_SYSVIEW_Stop+0x44>)
 8003aba:	f7fe ffa1 	bl	8002a00 <_PreparePacket>
 8003abe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <SEGGER_SYSVIEW_Stop+0x48>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003ac8:	220b      	movs	r2, #11
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	6838      	ldr	r0, [r7, #0]
 8003ace:	f7ff f887 	bl	8002be0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <SEGGER_SYSVIEW_Stop+0x48>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f383 8811 	msr	BASEPRI, r3
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2407d32c 	.word	0x2407d32c
 8003aec:	2407d2fc 	.word	0x2407d2fc

08003af0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	; 0x30
 8003af4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003af6:	f3ef 8311 	mrs	r3, BASEPRI
 8003afa:	f04f 0120 	mov.w	r1, #32
 8003afe:	f381 8811 	msr	BASEPRI, r1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	4845      	ldr	r0, [pc, #276]	; (8003c1c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003b06:	f7fe ff7b 	bl	8002a00 <_PreparePacket>
 8003b0a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b14:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b1a:	e00b      	b.n	8003b34 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	09db      	lsrs	r3, r3, #7
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	2b7f      	cmp	r3, #127	; 0x7f
 8003b38:	d8f0      	bhi.n	8003b1c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	e00b      	b.n	8003b6e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	1c59      	adds	r1, r3, #1
 8003b5e:	6279      	str	r1, [r7, #36]	; 0x24
 8003b60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	09db      	lsrs	r3, r3, #7
 8003b6c:	623b      	str	r3, [r7, #32]
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	2b7f      	cmp	r3, #127	; 0x7f
 8003b72:	d8f0      	bhi.n	8003b56 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	627a      	str	r2, [r7, #36]	; 0x24
 8003b7a:	6a3a      	ldr	r2, [r7, #32]
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	e00b      	b.n	8003ba8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	1c59      	adds	r1, r3, #1
 8003b98:	61f9      	str	r1, [r7, #28]
 8003b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	09db      	lsrs	r3, r3, #7
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b7f      	cmp	r3, #127	; 0x7f
 8003bac:	d8f0      	bhi.n	8003b90 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	e00b      	b.n	8003be0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1c59      	adds	r1, r3, #1
 8003bd0:	6179      	str	r1, [r7, #20]
 8003bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	09db      	lsrs	r3, r3, #7
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b7f      	cmp	r3, #127	; 0x7f
 8003be4:	d8f0      	bhi.n	8003bc8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	617a      	str	r2, [r7, #20]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003bf6:	2218      	movs	r2, #24
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	68b8      	ldr	r0, [r7, #8]
 8003bfc:	f7fe fff0 	bl	8002be0 <_SendPacket>
  RECORD_END();
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	4798      	blx	r3
  }
}
 8003c14:	bf00      	nop
 8003c16:	3730      	adds	r7, #48	; 0x30
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	2407d32c 	.word	0x2407d32c
 8003c20:	2407d2fc 	.word	0x2407d2fc

08003c24 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b092      	sub	sp, #72	; 0x48
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c30:	f04f 0120 	mov.w	r1, #32
 8003c34:	f381 8811 	msr	BASEPRI, r1
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	486a      	ldr	r0, [pc, #424]	; (8003de4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003c3c:	f7fe fee0 	bl	8002a00 <_PreparePacket>
 8003c40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	647b      	str	r3, [r7, #68]	; 0x44
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b66      	ldr	r3, [pc, #408]	; (8003de8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	643b      	str	r3, [r7, #64]	; 0x40
 8003c56:	e00b      	b.n	8003c70 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5e:	1c59      	adds	r1, r3, #1
 8003c60:	6479      	str	r1, [r7, #68]	; 0x44
 8003c62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6c:	09db      	lsrs	r3, r3, #7
 8003c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c72:	2b7f      	cmp	r3, #127	; 0x7f
 8003c74:	d8f0      	bhi.n	8003c58 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c90:	e00b      	b.n	8003caa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c98:	1c59      	adds	r1, r3, #1
 8003c9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	09db      	lsrs	r3, r3, #7
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	2b7f      	cmp	r3, #127	; 0x7f
 8003cae:	d8f0      	bhi.n	8003c92 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7fe fe49 	bl	8002960 <_EncodeStr>
 8003cce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003cd0:	2209      	movs	r2, #9
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	6938      	ldr	r0, [r7, #16]
 8003cd6:	f7fe ff83 	bl	8002be0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
 8003cee:	e00b      	b.n	8003d08 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	6379      	str	r1, [r7, #52]	; 0x34
 8003cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	09db      	lsrs	r3, r3, #7
 8003d06:	633b      	str	r3, [r7, #48]	; 0x30
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d0c:	d8f0      	bhi.n	8003cf0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	637a      	str	r2, [r7, #52]	; 0x34
 8003d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d28:	e00b      	b.n	8003d42 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	1c59      	adds	r1, r3, #1
 8003d32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	09db      	lsrs	r3, r3, #7
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	2b7f      	cmp	r3, #127	; 0x7f
 8003d46:	d8f0      	bhi.n	8003d2a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	e00b      	b.n	8003d7c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	1c59      	adds	r1, r3, #1
 8003d6c:	6279      	str	r1, [r7, #36]	; 0x24
 8003d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	09db      	lsrs	r3, r3, #7
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d80:	d8f0      	bhi.n	8003d64 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	627a      	str	r2, [r7, #36]	; 0x24
 8003d88:	6a3a      	ldr	r2, [r7, #32]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	e00b      	b.n	8003db4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	1c59      	adds	r1, r3, #1
 8003da4:	61f9      	str	r1, [r7, #28]
 8003da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	09db      	lsrs	r3, r3, #7
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b7f      	cmp	r3, #127	; 0x7f
 8003db8:	d8f0      	bhi.n	8003d9c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	61fa      	str	r2, [r7, #28]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003dca:	2215      	movs	r2, #21
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	6938      	ldr	r0, [r7, #16]
 8003dd0:	f7fe ff06 	bl	8002be0 <_SendPacket>
  RECORD_END();
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f383 8811 	msr	BASEPRI, r3
}
 8003dda:	bf00      	nop
 8003ddc:	3748      	adds	r7, #72	; 0x48
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2407d32c 	.word	0x2407d32c
 8003de8:	2407d2fc 	.word	0x2407d2fc

08003dec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003e02:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4798      	blx	r3
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	2407d2fc 	.word	0x2407d2fc

08003e14 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e20:	f04f 0120 	mov.w	r1, #32
 8003e24:	f381 8811 	msr	BASEPRI, r1
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	480b      	ldr	r0, [pc, #44]	; (8003e58 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003e2c:	f7fe fde8 	bl	8002a00 <_PreparePacket>
 8003e30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	6938      	ldr	r0, [r7, #16]
 8003e38:	f7fe fd92 	bl	8002960 <_EncodeStr>
 8003e3c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003e3e:	220e      	movs	r2, #14
 8003e40:	68f9      	ldr	r1, [r7, #12]
 8003e42:	6938      	ldr	r0, [r7, #16]
 8003e44:	f7fe fecc 	bl	8002be0 <_SendPacket>
  RECORD_END();
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	2407d32c 	.word	0x2407d32c

08003e5c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01a      	beq.n	8003ea0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003e6a:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4798      	blx	r3
 8003e7c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003e80:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003e82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	000a      	movs	r2, r1
 8003e90:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003e92:	4613      	mov	r3, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	4621      	mov	r1, r4
 8003e98:	200d      	movs	r0, #13
 8003e9a:	f7ff fc5b 	bl	8003754 <SEGGER_SYSVIEW_RecordU32x2>
 8003e9e:	e006      	b.n	8003eae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	200c      	movs	r0, #12
 8003ea8:	f7ff fc18 	bl	80036dc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd90      	pop	{r4, r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2407d2fc 	.word	0x2407d2fc
 8003ebc:	e0001004 	.word	0xe0001004

08003ec0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eca:	f04f 0120 	mov.w	r1, #32
 8003ece:	f381 8811 	msr	BASEPRI, r1
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	4807      	ldr	r0, [pc, #28]	; (8003ef4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003ed6:	f7fe fd93 	bl	8002a00 <_PreparePacket>
 8003eda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003edc:	2211      	movs	r2, #17
 8003ede:	6839      	ldr	r1, [r7, #0]
 8003ee0:	6838      	ldr	r0, [r7, #0]
 8003ee2:	f7fe fe7d 	bl	8002be0 <_SendPacket>
  RECORD_END();
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f383 8811 	msr	BASEPRI, r3
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2407d32c 	.word	0x2407d32c

08003ef8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f00:	f3ef 8311 	mrs	r3, BASEPRI
 8003f04:	f04f 0120 	mov.w	r1, #32
 8003f08:	f381 8811 	msr	BASEPRI, r1
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	4819      	ldr	r0, [pc, #100]	; (8003f74 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003f10:	f7fe fd76 	bl	8002a00 <_PreparePacket>
 8003f14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003f1a:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e00b      	b.n	8003f46 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	1c59      	adds	r1, r3, #1
 8003f36:	61f9      	str	r1, [r7, #28]
 8003f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	09db      	lsrs	r3, r3, #7
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b7f      	cmp	r3, #127	; 0x7f
 8003f4a:	d8f0      	bhi.n	8003f2e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	6938      	ldr	r0, [r7, #16]
 8003f62:	f7fe fe3d 	bl	8002be0 <_SendPacket>
  RECORD_END();
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f383 8811 	msr	BASEPRI, r3
}
 8003f6c:	bf00      	nop
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	2407d32c 	.word	0x2407d32c
 8003f78:	2407d2fc 	.word	0x2407d2fc

08003f7c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f84:	f3ef 8311 	mrs	r3, BASEPRI
 8003f88:	f04f 0120 	mov.w	r1, #32
 8003f8c:	f381 8811 	msr	BASEPRI, r1
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	4819      	ldr	r0, [pc, #100]	; (8003ff8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003f94:	f7fe fd34 	bl	8002a00 <_PreparePacket>
 8003f98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e00b      	b.n	8003fca <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	1c59      	adds	r1, r3, #1
 8003fba:	61f9      	str	r1, [r7, #28]
 8003fbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	09db      	lsrs	r3, r3, #7
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8003fce:	d8f0      	bhi.n	8003fb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	61fa      	str	r2, [r7, #28]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	68f9      	ldr	r1, [r7, #12]
 8003fe4:	6938      	ldr	r0, [r7, #16]
 8003fe6:	f7fe fdfb 	bl	8002be0 <_SendPacket>
  RECORD_END();
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f383 8811 	msr	BASEPRI, r3
}
 8003ff0:	bf00      	nop
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	2407d32c 	.word	0x2407d32c
 8003ffc:	2407d2fc 	.word	0x2407d2fc

08004000 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004008:	f3ef 8311 	mrs	r3, BASEPRI
 800400c:	f04f 0120 	mov.w	r1, #32
 8004010:	f381 8811 	msr	BASEPRI, r1
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	4819      	ldr	r0, [pc, #100]	; (800407c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004018:	f7fe fcf2 	bl	8002a00 <_PreparePacket>
 800401c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e00b      	b.n	800404e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	1c59      	adds	r1, r3, #1
 800403e:	61f9      	str	r1, [r7, #28]
 8004040:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	09db      	lsrs	r3, r3, #7
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b7f      	cmp	r3, #127	; 0x7f
 8004052:	d8f0      	bhi.n	8004036 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	61fa      	str	r2, [r7, #28]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004064:	2206      	movs	r2, #6
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	6938      	ldr	r0, [r7, #16]
 800406a:	f7fe fdb9 	bl	8002be0 <_SendPacket>
  RECORD_END();
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f383 8811 	msr	BASEPRI, r3
}
 8004074:	bf00      	nop
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2407d32c 	.word	0x2407d32c
 8004080:	2407d2fc 	.word	0x2407d2fc

08004084 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800408e:	f3ef 8311 	mrs	r3, BASEPRI
 8004092:	f04f 0120 	mov.w	r1, #32
 8004096:	f381 8811 	msr	BASEPRI, r1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	4827      	ldr	r0, [pc, #156]	; (800413c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800409e:	f7fe fcaf 	bl	8002a00 <_PreparePacket>
 80040a2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	623b      	str	r3, [r7, #32]
 80040ba:	e00b      	b.n	80040d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	1c59      	adds	r1, r3, #1
 80040c4:	6279      	str	r1, [r7, #36]	; 0x24
 80040c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	09db      	lsrs	r3, r3, #7
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	2b7f      	cmp	r3, #127	; 0x7f
 80040d8:	d8f0      	bhi.n	80040bc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	627a      	str	r2, [r7, #36]	; 0x24
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	e00b      	b.n	800410c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	61f9      	str	r1, [r7, #28]
 80040fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	09db      	lsrs	r3, r3, #7
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b7f      	cmp	r3, #127	; 0x7f
 8004110:	d8f0      	bhi.n	80040f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	61fa      	str	r2, [r7, #28]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004122:	2207      	movs	r2, #7
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	6938      	ldr	r0, [r7, #16]
 8004128:	f7fe fd5a 	bl	8002be0 <_SendPacket>
  RECORD_END();
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f383 8811 	msr	BASEPRI, r3
}
 8004132:	bf00      	nop
 8004134:	3728      	adds	r7, #40	; 0x28
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	2407d32c 	.word	0x2407d32c
 8004140:	2407d2fc 	.word	0x2407d2fc

08004144 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	1ad3      	subs	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	2407d2fc 	.word	0x2407d2fc

08004164 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	; 0x30
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d06d      	beq.n	8004252 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800417c:	2300      	movs	r3, #0
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004180:	e008      	b.n	8004194 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	3301      	adds	r3, #1
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004198:	429a      	cmp	r2, r3
 800419a:	d3f2      	bcc.n	8004182 <SEGGER_SYSVIEW_SendModule+0x1e>
 800419c:	e000      	b.n	80041a0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800419e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d055      	beq.n	8004252 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041a6:	f3ef 8311 	mrs	r3, BASEPRI
 80041aa:	f04f 0120 	mov.w	r1, #32
 80041ae:	f381 8811 	msr	BASEPRI, r1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	482a      	ldr	r0, [pc, #168]	; (8004260 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80041b6:	f7fe fc23 	bl	8002a00 <_PreparePacket>
 80041ba:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	623b      	str	r3, [r7, #32]
 80041c8:	e00b      	b.n	80041e2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	1c59      	adds	r1, r3, #1
 80041d2:	6279      	str	r1, [r7, #36]	; 0x24
 80041d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	09db      	lsrs	r3, r3, #7
 80041e0:	623b      	str	r3, [r7, #32]
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	2b7f      	cmp	r3, #127	; 0x7f
 80041e6:	d8f0      	bhi.n	80041ca <SEGGER_SYSVIEW_SendModule+0x66>
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	627a      	str	r2, [r7, #36]	; 0x24
 80041ee:	6a3a      	ldr	r2, [r7, #32]
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	e00b      	b.n	800421c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	1c59      	adds	r1, r3, #1
 800420c:	61f9      	str	r1, [r7, #28]
 800420e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	09db      	lsrs	r3, r3, #7
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b7f      	cmp	r3, #127	; 0x7f
 8004220:	d8f0      	bhi.n	8004204 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	61fa      	str	r2, [r7, #28]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	4619      	mov	r1, r3
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7fe fb90 	bl	8002960 <_EncodeStr>
 8004240:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004242:	2216      	movs	r2, #22
 8004244:	68f9      	ldr	r1, [r7, #12]
 8004246:	6938      	ldr	r0, [r7, #16]
 8004248:	f7fe fcca 	bl	8002be0 <_SendPacket>
      RECORD_END();
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004252:	bf00      	nop
 8004254:	3730      	adds	r7, #48	; 0x30
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	2407d324 	.word	0x2407d324
 8004260:	2407d32c 	.word	0x2407d32c

08004264 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00f      	beq.n	8004292 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f2      	bne.n	8004278 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	2407d324 	.word	0x2407d324

080042a0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80042a6:	f3ef 8311 	mrs	r3, BASEPRI
 80042aa:	f04f 0120 	mov.w	r1, #32
 80042ae:	f381 8811 	msr	BASEPRI, r1
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	4817      	ldr	r0, [pc, #92]	; (8004314 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80042b6:	f7fe fba3 	bl	8002a00 <_PreparePacket>
 80042ba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e00b      	b.n	80042e4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1c59      	adds	r1, r3, #1
 80042d4:	6179      	str	r1, [r7, #20]
 80042d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	09db      	lsrs	r3, r3, #7
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b7f      	cmp	r3, #127	; 0x7f
 80042e8:	d8f0      	bhi.n	80042cc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	617a      	str	r2, [r7, #20]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80042fa:	221b      	movs	r2, #27
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	68b8      	ldr	r0, [r7, #8]
 8004300:	f7fe fc6e 	bl	8002be0 <_SendPacket>
  RECORD_END();
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f383 8811 	msr	BASEPRI, r3
}
 800430a:	bf00      	nop
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2407d32c 	.word	0x2407d32c
 8004318:	2407d328 	.word	0x2407d328

0800431c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800431c:	b40f      	push	{r0, r1, r2, r3}
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	461a      	mov	r2, r3
 800432e:	2100      	movs	r1, #0
 8004330:	6938      	ldr	r0, [r7, #16]
 8004332:	f7fe ff67 	bl	8003204 <_VPrintTarget>
  va_end(ParamList);
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004340:	b004      	add	sp, #16
 8004342:	4770      	bx	lr

08004344 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800434c:	f3ef 8311 	mrs	r3, BASEPRI
 8004350:	f04f 0120 	mov.w	r1, #32
 8004354:	f381 8811 	msr	BASEPRI, r1
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	4827      	ldr	r0, [pc, #156]	; (80043f8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800435c:	f7fe fb50 	bl	8002a00 <_PreparePacket>
 8004360:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	6938      	ldr	r0, [r7, #16]
 8004368:	f7fe fafa 	bl	8002960 <_EncodeStr>
 800436c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
 8004372:	2301      	movs	r3, #1
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	e00b      	b.n	8004390 <SEGGER_SYSVIEW_Warn+0x4c>
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	6279      	str	r1, [r7, #36]	; 0x24
 8004382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	09db      	lsrs	r3, r3, #7
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	2b7f      	cmp	r3, #127	; 0x7f
 8004394:	d8f0      	bhi.n	8004378 <SEGGER_SYSVIEW_Warn+0x34>
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	627a      	str	r2, [r7, #36]	; 0x24
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e00b      	b.n	80043c8 <SEGGER_SYSVIEW_Warn+0x84>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	61f9      	str	r1, [r7, #28]
 80043ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b7f      	cmp	r3, #127	; 0x7f
 80043cc:	d8f0      	bhi.n	80043b0 <SEGGER_SYSVIEW_Warn+0x6c>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	61fa      	str	r2, [r7, #28]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80043de:	221a      	movs	r2, #26
 80043e0:	68f9      	ldr	r1, [r7, #12]
 80043e2:	6938      	ldr	r0, [r7, #16]
 80043e4:	f7fe fbfc 	bl	8002be0 <_SendPacket>
  RECORD_END();
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f383 8811 	msr	BASEPRI, r3
}
 80043ee:	bf00      	nop
 80043f0:	3728      	adds	r7, #40	; 0x28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2407d32c 	.word	0x2407d32c

080043fc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004402:	7e1b      	ldrb	r3, [r3, #24]
 8004404:	4619      	mov	r1, r3
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004408:	460b      	mov	r3, r1
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	440b      	add	r3, r1
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	336c      	adds	r3, #108	; 0x6c
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004418:	7e1b      	ldrb	r3, [r3, #24]
 800441a:	4618      	mov	r0, r3
 800441c:	490d      	ldr	r1, [pc, #52]	; (8004454 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800441e:	4603      	mov	r3, r0
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4403      	add	r3, r0
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	3370      	adds	r3, #112	; 0x70
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d00b      	beq.n	8004448 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004432:	789b      	ldrb	r3, [r3, #2]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d107      	bne.n	8004448 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800443a:	2201      	movs	r2, #1
 800443c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800443e:	f7fe faeb 	bl	8002a18 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004442:	4b03      	ldr	r3, [pc, #12]	; (8004450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004444:	2200      	movs	r2, #0
 8004446:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004448:	4b01      	ldr	r3, [pc, #4]	; (8004450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800444a:	781b      	ldrb	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	2407d2fc 	.word	0x2407d2fc
 8004454:	2400523c 	.word	0x2400523c

08004458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800445e:	f000 fd49 	bl	8004ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004462:	f000 f8ab 	bl	80045bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004466:	f000 f9ab 	bl	80047c0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800446a:	f000 f923 	bl	80046b4 <MX_FDCAN2_Init>
  //MX_USART2_UART_Init();
  MX_USB_OTG_FS_HCD_Init();
 800446e:	f000 f985 	bl	800477c <MX_USB_OTG_FS_HCD_Init>

//  user_data = "Start of program\r\n";
//  	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

  	// Enable CCYCCNT Counter
  	DWT->CTRL |= (1 << 0);
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <main+0x118>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a3e      	ldr	r2, [pc, #248]	; (8004570 <main+0x118>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6013      	str	r3, [r2, #0]

  	// Used for SEGGER UART
  	SEGGER_UART_init(250000);
 800447e:	483d      	ldr	r0, [pc, #244]	; (8004574 <main+0x11c>)
 8004480:	f7fd fe12 	bl	80020a8 <SEGGER_UART_init>

  	//Starting SEGGER SYSVIEW
  	  SEGGER_SYSVIEW_Conf();
 8004484:	f7fd fb7e 	bl	8001b84 <SEGGER_SYSVIEW_Conf>
  	  //SEGGER_SYSVIEW_Start();

  	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 200, "Green LED TASK", 3, &Task_GreenLED_Handle);
 8004488:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <main+0x120>)
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	2303      	movs	r3, #3
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4b3a      	ldr	r3, [pc, #232]	; (800457c <main+0x124>)
 8004492:	22c8      	movs	r2, #200	; 0xc8
 8004494:	493a      	ldr	r1, [pc, #232]	; (8004580 <main+0x128>)
 8004496:	483b      	ldr	r0, [pc, #236]	; (8004584 <main+0x12c>)
 8004498:	f7fc f820 	bl	80004dc <xTaskCreate>
 800449c:	6178      	str	r0, [r7, #20]
  	  configASSERT(TaskStatus == pdPASS);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d00c      	beq.n	80044be <main+0x66>
        __asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	b672      	cpsid	i
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	b662      	cpsie	i
 80044b8:	613b      	str	r3, [r7, #16]
    }
 80044ba:	bf00      	nop
 80044bc:	e7fe      	b.n	80044bc <main+0x64>

  	  next_task_handle = Task_GreenLED_Handle;
 80044be:	4b2e      	ldr	r3, [pc, #184]	; (8004578 <main+0x120>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a31      	ldr	r2, [pc, #196]	; (8004588 <main+0x130>)
 80044c4:	6013      	str	r3, [r2, #0]

  	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 200, "Red LED TASK", 2, &Task_RedLED_Handle);
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <main+0x134>)
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	2302      	movs	r3, #2
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	4b30      	ldr	r3, [pc, #192]	; (8004590 <main+0x138>)
 80044d0:	22c8      	movs	r2, #200	; 0xc8
 80044d2:	4930      	ldr	r1, [pc, #192]	; (8004594 <main+0x13c>)
 80044d4:	4830      	ldr	r0, [pc, #192]	; (8004598 <main+0x140>)
 80044d6:	f7fc f801 	bl	80004dc <xTaskCreate>
 80044da:	6178      	str	r0, [r7, #20]
  	  configASSERT(TaskStatus == pdPASS);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d00c      	beq.n	80044fc <main+0xa4>
        __asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	b672      	cpsid	i
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	b662      	cpsie	i
 80044f6:	60fb      	str	r3, [r7, #12]
    }
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <main+0xa2>

  	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 200, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <main+0x144>)
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	2301      	movs	r3, #1
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <main+0x148>)
 8004506:	22c8      	movs	r2, #200	; 0xc8
 8004508:	4926      	ldr	r1, [pc, #152]	; (80045a4 <main+0x14c>)
 800450a:	4827      	ldr	r0, [pc, #156]	; (80045a8 <main+0x150>)
 800450c:	f7fb ffe6 	bl	80004dc <xTaskCreate>
 8004510:	6178      	str	r0, [r7, #20]
  	  configASSERT(TaskStatus == pdPASS);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d00c      	beq.n	8004532 <main+0xda>
        __asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	b672      	cpsid	i
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	b662      	cpsie	i
 800452c:	60bb      	str	r3, [r7, #8]
    }
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <main+0xd8>

  	  TaskStatus = xTaskCreate(Task_Button_Handler, "Button", 200, "Button TASK", 4, &Task_Button_Handle);
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <main+0x154>)
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	2304      	movs	r3, #4
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <main+0x158>)
 800453c:	22c8      	movs	r2, #200	; 0xc8
 800453e:	491d      	ldr	r1, [pc, #116]	; (80045b4 <main+0x15c>)
 8004540:	481d      	ldr	r0, [pc, #116]	; (80045b8 <main+0x160>)
 8004542:	f7fb ffcb 	bl	80004dc <xTaskCreate>
 8004546:	6178      	str	r0, [r7, #20]
	  	configASSERT(TaskStatus == pdPASS);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d00c      	beq.n	8004568 <main+0x110>
        __asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	b672      	cpsid	i
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	b662      	cpsie	i
 8004562:	607b      	str	r3, [r7, #4]
    }
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <main+0x10e>


  	  // Start FreeRTOS scheduler
  	  vTaskStartScheduler();
 8004568:	f7fc f9f6 	bl	8000958 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800456c:	e7fe      	b.n	800456c <main+0x114>
 800456e:	bf00      	nop
 8004570:	e0001000 	.word	0xe0001000
 8004574:	0003d090 	.word	0x0003d090
 8004578:	2407d7b4 	.word	0x2407d7b4
 800457c:	0800902c 	.word	0x0800902c
 8004580:	0800903c 	.word	0x0800903c
 8004584:	080048a1 	.word	0x080048a1
 8004588:	2407d7c4 	.word	0x2407d7c4
 800458c:	2407d7b8 	.word	0x2407d7b8
 8004590:	08009048 	.word	0x08009048
 8004594:	08009058 	.word	0x08009058
 8004598:	0800490d 	.word	0x0800490d
 800459c:	2407d7bc 	.word	0x2407d7bc
 80045a0:	08009060 	.word	0x08009060
 80045a4:	08009070 	.word	0x08009070
 80045a8:	08004979 	.word	0x08004979
 80045ac:	2407d7c0 	.word	0x2407d7c0
 80045b0:	08009078 	.word	0x08009078
 80045b4:	08009084 	.word	0x08009084
 80045b8:	080049f9 	.word	0x080049f9

080045bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b09c      	sub	sp, #112	; 0x70
 80045c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045c6:	224c      	movs	r2, #76	; 0x4c
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f004 fcb8 	bl	8008f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	2220      	movs	r2, #32
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f004 fcb2 	bl	8008f40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80045dc:	2002      	movs	r0, #2
 80045de:	f001 fecb 	bl	8006378 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <SystemClock_Config+0xf0>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	4a30      	ldr	r2, [pc, #192]	; (80046ac <SystemClock_Config+0xf0>)
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <SystemClock_Config+0xf0>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <SystemClock_Config+0xf4>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004604:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <SystemClock_Config+0xf4>)
 8004606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800460a:	6193      	str	r3, [r2, #24]
 800460c:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <SystemClock_Config+0xf4>)
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004618:	bf00      	nop
 800461a:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <SystemClock_Config+0xf4>)
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004626:	d1f8      	bne.n	800461a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004628:	2301      	movs	r3, #1
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800462c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004632:	2302      	movs	r3, #2
 8004634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004636:	2302      	movs	r3, #2
 8004638:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800463a:	2301      	movs	r3, #1
 800463c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800463e:	2312      	movs	r3, #18
 8004640:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004642:	2302      	movs	r3, #2
 8004644:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004646:	2303      	movs	r3, #3
 8004648:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800464a:	2302      	movs	r3, #2
 800464c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800464e:	230c      	movs	r3, #12
 8004650:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8004652:	2302      	movs	r3, #2
 8004654:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8004656:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800465a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800465c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004660:	4618      	mov	r0, r3
 8004662:	f001 fed3 	bl	800640c <HAL_RCC_OscConfig>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800466c:	f000 f9fe 	bl	8004a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004670:	233f      	movs	r3, #63	; 0x3f
 8004672:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004674:	2302      	movs	r3, #2
 8004676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004684:	2340      	movs	r3, #64	; 0x40
 8004686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800468c:	2300      	movs	r3, #0
 800468e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f002 fac7 	bl	8006c28 <HAL_RCC_ClockConfig>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80046a0:	f000 f9e4 	bl	8004a6c <Error_Handler>
  }
}
 80046a4:	bf00      	nop
 80046a6:	3770      	adds	r7, #112	; 0x70
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	58000400 	.word	0x58000400
 80046b0:	58024800 	.word	0x58024800

080046b4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80046b8:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046ba:	4a2f      	ldr	r2, [pc, #188]	; (8004778 <MX_FDCAN2_Init+0xc4>)
 80046bc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80046be:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80046ca:	4b2a      	ldr	r3, [pc, #168]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80046d0:	4b28      	ldr	r3, [pc, #160]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80046d6:	4b27      	ldr	r3, [pc, #156]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046d8:	2200      	movs	r2, #0
 80046da:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046de:	2201      	movs	r2, #1
 80046e0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80046e8:	4b22      	ldr	r3, [pc, #136]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046ea:	2202      	movs	r2, #2
 80046ec:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80046ee:	4b21      	ldr	r3, [pc, #132]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046f0:	2202      	movs	r2, #2
 80046f2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80046f4:	4b1f      	ldr	r3, [pc, #124]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80046fa:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004702:	2201      	movs	r2, #1
 8004704:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004708:	2201      	movs	r2, #1
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 800470e:	2200      	movs	r2, #0
 8004710:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004714:	2200      	movs	r2, #0
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 800471a:	2200      	movs	r2, #0
 800471c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004724:	4b13      	ldr	r3, [pc, #76]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004726:	2204      	movs	r2, #4
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 800472c:	2200      	movs	r2, #0
 800472e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004730:	4b10      	ldr	r3, [pc, #64]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004732:	2204      	movs	r2, #4
 8004734:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8004736:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004738:	2200      	movs	r2, #0
 800473a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 800473e:	2204      	movs	r2, #4
 8004740:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004744:	2200      	movs	r2, #0
 8004746:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 800474a:	2200      	movs	r2, #0
 800474c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004750:	2200      	movs	r2, #0
 8004752:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004756:	2200      	movs	r2, #0
 8004758:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 800475c:	2204      	movs	r2, #4
 800475e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8004760:	4804      	ldr	r0, [pc, #16]	; (8004774 <MX_FDCAN2_Init+0xc0>)
 8004762:	f000 fd33 	bl	80051cc <HAL_FDCAN_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800476c:	f000 f97e 	bl	8004a6c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}
 8004774:	2407d410 	.word	0x2407d410
 8004778:	4000a400 	.word	0x4000a400

0800477c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004782:	4a0e      	ldr	r2, [pc, #56]	; (80047bc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8004784:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004788:	2210      	movs	r2, #16
 800478a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800478e:	2201      	movs	r2, #1
 8004790:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004794:	2200      	movs	r2, #0
 8004796:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800479a:	2202      	movs	r2, #2
 800479c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80047a4:	4804      	ldr	r0, [pc, #16]	; (80047b8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80047a6:	f001 fd84 	bl	80062b2 <HAL_HCD_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 80047b0:	f000 f95c 	bl	8004a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	2407d4b0 	.word	0x2407d4b0
 80047bc:	40080000 	.word	0x40080000

080047c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	; 0x28
 80047c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c6:	f107 0314 	add.w	r3, r7, #20
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	605a      	str	r2, [r3, #4]
 80047d0:	609a      	str	r2, [r3, #8]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d6:	4b30      	ldr	r3, [pc, #192]	; (8004898 <MX_GPIO_Init+0xd8>)
 80047d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047dc:	4a2e      	ldr	r2, [pc, #184]	; (8004898 <MX_GPIO_Init+0xd8>)
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047e6:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <MX_GPIO_Init+0xd8>)
 80047e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047f4:	4b28      	ldr	r3, [pc, #160]	; (8004898 <MX_GPIO_Init+0xd8>)
 80047f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047fa:	4a27      	ldr	r2, [pc, #156]	; (8004898 <MX_GPIO_Init+0xd8>)
 80047fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <MX_GPIO_Init+0xd8>)
 8004806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004812:	4b21      	ldr	r3, [pc, #132]	; (8004898 <MX_GPIO_Init+0xd8>)
 8004814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004818:	4a1f      	ldr	r2, [pc, #124]	; (8004898 <MX_GPIO_Init+0xd8>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004822:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <MX_GPIO_Init+0xd8>)
 8004824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <MX_GPIO_Init+0xd8>)
 8004832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <MX_GPIO_Init+0xd8>)
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004840:	4b15      	ldr	r3, [pc, #84]	; (8004898 <MX_GPIO_Init+0xd8>)
 8004842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800484e:	2201      	movs	r2, #1
 8004850:	2107      	movs	r1, #7
 8004852:	4812      	ldr	r0, [pc, #72]	; (800489c <MX_GPIO_Init+0xdc>)
 8004854:	f001 fcfa 	bl	800624c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800485c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004866:	f107 0314 	add.w	r3, r7, #20
 800486a:	4619      	mov	r1, r3
 800486c:	480b      	ldr	r0, [pc, #44]	; (800489c <MX_GPIO_Init+0xdc>)
 800486e:	f001 fb25 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004872:	2307      	movs	r3, #7
 8004874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004876:	2301      	movs	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487e:	2300      	movs	r3, #0
 8004880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004882:	f107 0314 	add.w	r3, r7, #20
 8004886:	4619      	mov	r1, r3
 8004888:	4804      	ldr	r0, [pc, #16]	; (800489c <MX_GPIO_Init+0xdc>)
 800488a:	f001 fb17 	bl	8005ebc <HAL_GPIO_Init>

}
 800488e:	bf00      	nop
 8004890:	3728      	adds	r7, #40	; 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	58024400 	.word	0x58024400
 800489c:	58020800 	.word	0x58020800

080048a0 <Task_GreenLED_Handler>:

/* USER CODE BEGIN 4 */
static void Task_GreenLED_Handler(void* parameters)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		user_data = "Green -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80048a8:	4813      	ldr	r0, [pc, #76]	; (80048f8 <Task_GreenLED_Handler+0x58>)
 80048aa:	f7ff fd37 	bl	800431c <SEGGER_SYSVIEW_PrintfTarget>
		// 1000 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80048ae:	2102      	movs	r1, #2
 80048b0:	4812      	ldr	r0, [pc, #72]	; (80048fc <Task_GreenLED_Handler+0x5c>)
 80048b2:	f001 fce4 	bl	800627e <HAL_GPIO_TogglePin>
		Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80048b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	2000      	movs	r0, #0
 80048c4:	f7fc fb10 	bl	8000ee8 <xTaskGenericNotifyWait>
 80048c8:	60f8      	str	r0, [r7, #12]
		if (Status == pdTRUE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d1eb      	bne.n	80048a8 <Task_GreenLED_Handler+0x8>
		{
			vTaskSuspendAll();
 80048d0:	f7fc f8a2 	bl	8000a18 <vTaskSuspendAll>
			next_task_handle = Task_RedLED_Handle;
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <Task_GreenLED_Handler+0x60>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <Task_GreenLED_Handler+0x64>)
 80048da:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80048dc:	f7fc f8aa 	bl	8000a34 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Green_PIN, GPIO_PIN_SET);
 80048e0:	2201      	movs	r2, #1
 80048e2:	2102      	movs	r1, #2
 80048e4:	4805      	ldr	r0, [pc, #20]	; (80048fc <Task_GreenLED_Handler+0x5c>)
 80048e6:	f001 fcb1 	bl	800624c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green task");
 80048ea:	4807      	ldr	r0, [pc, #28]	; (8004908 <Task_GreenLED_Handler+0x68>)
 80048ec:	f7ff fd16 	bl	800431c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fb ff4b 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80048f6:	e7d7      	b.n	80048a8 <Task_GreenLED_Handler+0x8>
 80048f8:	0800908c 	.word	0x0800908c
 80048fc:	58020800 	.word	0x58020800
 8004900:	2407d7b8 	.word	0x2407d7b8
 8004904:	2407d7c4 	.word	0x2407d7c4
 8004908:	080090a0 	.word	0x080090a0

0800490c <Task_RedLED_Handler>:
	}
}


static void Task_RedLED_Handler(void* parameters)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af02      	add	r7, sp, #8
 8004912:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		user_data = "Red -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004914:	4813      	ldr	r0, [pc, #76]	; (8004964 <Task_RedLED_Handler+0x58>)
 8004916:	f7ff fd01 	bl	800431c <SEGGER_SYSVIEW_PrintfTarget>
		// 800 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800491a:	2101      	movs	r1, #1
 800491c:	4812      	ldr	r0, [pc, #72]	; (8004968 <Task_RedLED_Handler+0x5c>)
 800491e:	f001 fcae 	bl	800627e <HAL_GPIO_TogglePin>
		Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8004922:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	2300      	movs	r3, #0
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	2000      	movs	r0, #0
 8004930:	f7fc fada 	bl	8000ee8 <xTaskGenericNotifyWait>
 8004934:	60f8      	str	r0, [r7, #12]
		if (Status == pdTRUE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d1eb      	bne.n	8004914 <Task_RedLED_Handler+0x8>
		{
			vTaskSuspendAll();
 800493c:	f7fc f86c 	bl	8000a18 <vTaskSuspendAll>
			next_task_handle = Task_BlueLED_Handle;
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <Task_RedLED_Handler+0x60>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <Task_RedLED_Handler+0x64>)
 8004946:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8004948:	f7fc f874 	bl	8000a34 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Red_PIN, GPIO_PIN_SET);
 800494c:	2201      	movs	r2, #1
 800494e:	2101      	movs	r1, #1
 8004950:	4805      	ldr	r0, [pc, #20]	; (8004968 <Task_RedLED_Handler+0x5c>)
 8004952:	f001 fc7b 	bl	800624c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red task");
 8004956:	4807      	ldr	r0, [pc, #28]	; (8004974 <Task_RedLED_Handler+0x68>)
 8004958:	f7ff fce0 	bl	800431c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 800495c:	2000      	movs	r0, #0
 800495e:	f7fb ff15 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004962:	e7d7      	b.n	8004914 <Task_RedLED_Handler+0x8>
 8004964:	080090b4 	.word	0x080090b4
 8004968:	58020800 	.word	0x58020800
 800496c:	2407d7bc 	.word	0x2407d7bc
 8004970:	2407d7c4 	.word	0x2407d7c4
 8004974:	080090c8 	.word	0x080090c8

08004978 <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004980:	4817      	ldr	r0, [pc, #92]	; (80049e0 <Task_BlueLED_Handler+0x68>)
 8004982:	f7ff fccb 	bl	800431c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004986:	2104      	movs	r1, #4
 8004988:	4816      	ldr	r0, [pc, #88]	; (80049e4 <Task_BlueLED_Handler+0x6c>)
 800498a:	f001 fc78 	bl	800627e <HAL_GPIO_TogglePin>
		Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 800498e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	2200      	movs	r2, #0
 8004998:	2100      	movs	r1, #0
 800499a:	2000      	movs	r0, #0
 800499c:	f7fc faa4 	bl	8000ee8 <xTaskGenericNotifyWait>
 80049a0:	60f8      	str	r0, [r7, #12]
		if (Status == pdTRUE)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d1eb      	bne.n	8004980 <Task_BlueLED_Handler+0x8>
		{
			vTaskSuspendAll();
 80049a8:	f7fc f836 	bl	8000a18 <vTaskSuspendAll>
			next_task_handle = NULL;
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <Task_BlueLED_Handler+0x70>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80049b2:	f7fc f83f 	bl	8000a34 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Blue_PIN, GPIO_PIN_SET);
 80049b6:	2201      	movs	r2, #1
 80049b8:	2104      	movs	r1, #4
 80049ba:	480a      	ldr	r0, [pc, #40]	; (80049e4 <Task_BlueLED_Handler+0x6c>)
 80049bc:	f001 fc46 	bl	800624c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete button task");
 80049c0:	480a      	ldr	r0, [pc, #40]	; (80049ec <Task_BlueLED_Handler+0x74>)
 80049c2:	f7ff fcab 	bl	800431c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(Task_Button_Handle);
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <Task_BlueLED_Handler+0x78>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fede 	bl	800078c <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue task");
 80049d0:	4808      	ldr	r0, [pc, #32]	; (80049f4 <Task_BlueLED_Handler+0x7c>)
 80049d2:	f7ff fca3 	bl	800431c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7fb fed8 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 80049dc:	e7d0      	b.n	8004980 <Task_BlueLED_Handler+0x8>
 80049de:	bf00      	nop
 80049e0:	080090d8 	.word	0x080090d8
 80049e4:	58020800 	.word	0x58020800
 80049e8:	2407d7c4 	.word	0x2407d7c4
 80049ec:	080090ec 	.word	0x080090ec
 80049f0:	2407d7c0 	.word	0x2407d7c0
 80049f4:	08009100 	.word	0x08009100

080049f8 <Task_Button_Handler>:
	}
}


static void Task_Button_Handler(void* parameters)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
	uint8_t button_read = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	73bb      	strb	r3, [r7, #14]
	uint8_t previous_read = 1;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		button_read = HAL_GPIO_ReadPin(GPIOC, Button_PIN);
 8004a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a0c:	480c      	ldr	r0, [pc, #48]	; (8004a40 <Task_Button_Handler+0x48>)
 8004a0e:	f001 fc05 	bl	800621c <HAL_GPIO_ReadPin>
 8004a12:	4603      	mov	r3, r0
 8004a14:	73bb      	strb	r3, [r7, #14]

		if(button_read)
 8004a16:	7bbb      	ldrb	r3, [r7, #14]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <Task_Button_Handler+0x3c>
		{
			if(! previous_read)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d108      	bne.n	8004a34 <Task_Button_Handler+0x3c>
			{
				xTaskNotify(next_task_handle, 0, eNoAction);
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <Task_Button_Handler+0x4c>)
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2100      	movs	r1, #0
 8004a30:	f7fc faea 	bl	8001008 <xTaskGenericNotify>
			}
		}
		previous_read = button_read;
 8004a34:	7bbb      	ldrb	r3, [r7, #14]
 8004a36:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8004a38:	200a      	movs	r0, #10
 8004a3a:	f7fb ff53 	bl	80008e4 <vTaskDelay>
		button_read = HAL_GPIO_ReadPin(GPIOC, Button_PIN);
 8004a3e:	e7e3      	b.n	8004a08 <Task_Button_Handler+0x10>
 8004a40:	58020800 	.word	0x58020800
 8004a44:	2407d7c4 	.word	0x2407d7c4

08004a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a5a:	f000 fa87 	bl	8004f6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40001000 	.word	0x40001000

08004a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a70:	b672      	cpsid	i
}
 8004a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a74:	e7fe      	b.n	8004a74 <Error_Handler+0x8>
	...

08004a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7e:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <HAL_MspInit+0x30>)
 8004a80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_MspInit+0x30>)
 8004a86:	f043 0302 	orr.w	r3, r3, #2
 8004a8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_MspInit+0x30>)
 8004a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	58024400 	.word	0x58024400

08004aac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b0b8      	sub	sp, #224	; 0xe0
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ac4:	f107 0310 	add.w	r3, r7, #16
 8004ac8:	22bc      	movs	r2, #188	; 0xbc
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f004 fa37 	bl	8008f40 <memset>
  if(hfdcan->Instance==FDCAN2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <HAL_FDCAN_MspInit+0xd0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d14b      	bne.n	8004b74 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004ae2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ae8:	f107 0310 	add.w	r3, r7, #16
 8004aec:	4618      	mov	r0, r3
 8004aee:	f002 fc53 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004af8:	f7ff ffb8 	bl	8004a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004afc:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_FDCAN_MspInit+0xd4>)
 8004afe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004b02:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <HAL_FDCAN_MspInit+0xd4>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <HAL_FDCAN_MspInit+0xd4>)
 8004b0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1a:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <HAL_FDCAN_MspInit+0xd4>)
 8004b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <HAL_FDCAN_MspInit+0xd4>)
 8004b22:	f043 0302 	orr.w	r3, r3, #2
 8004b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b2a:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <HAL_FDCAN_MspInit+0xd4>)
 8004b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004b38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b40:	2302      	movs	r3, #2
 8004b42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8004b52:	2309      	movs	r3, #9
 8004b54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4809      	ldr	r0, [pc, #36]	; (8004b84 <HAL_FDCAN_MspInit+0xd8>)
 8004b60:	f001 f9ac 	bl	8005ebc <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8004b64:	2200      	movs	r2, #0
 8004b66:	2100      	movs	r1, #0
 8004b68:	2016      	movs	r0, #22
 8004b6a:	f000 fb07 	bl	800517c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8004b6e:	2016      	movs	r0, #22
 8004b70:	f000 fb1e 	bl	80051b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8004b74:	bf00      	nop
 8004b76:	37e0      	adds	r7, #224	; 0xe0
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	4000a400 	.word	0x4000a400
 8004b80:	58024400 	.word	0x58024400
 8004b84:	58020400 	.word	0x58020400

08004b88 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b0b8      	sub	sp, #224	; 0xe0
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ba0:	f107 0310 	add.w	r3, r7, #16
 8004ba4:	22bc      	movs	r2, #188	; 0xbc
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f004 f9c9 	bl	8008f40 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a27      	ldr	r2, [pc, #156]	; (8004c50 <HAL_HCD_MspInit+0xc8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d146      	bne.n	8004c46 <HAL_HCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004bb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004bbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bc6:	f107 0310 	add.w	r3, r7, #16
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f002 fbe4 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8004bd6:	f7ff ff49 	bl	8004a6c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004bda:	f001 fc07 	bl	80063ec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bde:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_HCD_MspInit+0xcc>)
 8004be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be4:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <HAL_HCD_MspInit+0xcc>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bee:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <HAL_HCD_MspInit+0xcc>)
 8004bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004bfc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c04:	2302      	movs	r3, #2
 8004c06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004c16:	230a      	movs	r3, #10
 8004c18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004c20:	4619      	mov	r1, r3
 8004c22:	480d      	ldr	r0, [pc, #52]	; (8004c58 <HAL_HCD_MspInit+0xd0>)
 8004c24:	f001 f94a 	bl	8005ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004c28:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <HAL_HCD_MspInit+0xcc>)
 8004c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c2e:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <HAL_HCD_MspInit+0xcc>)
 8004c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_HCD_MspInit+0xcc>)
 8004c3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004c46:	bf00      	nop
 8004c48:	37e0      	adds	r7, #224	; 0xe0
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40080000 	.word	0x40080000
 8004c54:	58024400 	.word	0x58024400
 8004c58:	58020000 	.word	0x58020000

08004c5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b090      	sub	sp, #64	; 0x40
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d827      	bhi.n	8004cba <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	2036      	movs	r0, #54	; 0x36
 8004c70:	f000 fa84 	bl	800517c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c74:	2036      	movs	r0, #54	; 0x36
 8004c76:	f000 fa9b 	bl	80051b0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004c7a:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <HAL_InitTick+0xc4>)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_InitTick+0xc8>)
 8004c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c86:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <HAL_InitTick+0xc8>)
 8004c88:	f043 0310 	orr.w	r3, r3, #16
 8004c8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c90:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <HAL_InitTick+0xc8>)
 8004c92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c9e:	f107 0210 	add.w	r2, r7, #16
 8004ca2:	f107 0314 	add.w	r3, r7, #20
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f002 fb33 	bl	8007314 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <HAL_InitTick+0x6a>
 8004cb8:	e001      	b.n	8004cbe <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e02b      	b.n	8004d16 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004cbe:	f002 fb13 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 8004cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004cc4:	e004      	b.n	8004cd0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004cc6:	f002 fb0f 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <HAL_InitTick+0xcc>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	0c9b      	lsrs	r3, r3, #18
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <HAL_InitTick+0xd0>)
 8004ce0:	4a13      	ldr	r2, [pc, #76]	; (8004d30 <HAL_InitTick+0xd4>)
 8004ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <HAL_InitTick+0xd0>)
 8004ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004cea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004cec:	4a0f      	ldr	r2, [pc, #60]	; (8004d2c <HAL_InitTick+0xd0>)
 8004cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <HAL_InitTick+0xd0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <HAL_InitTick+0xd0>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004cfe:	480b      	ldr	r0, [pc, #44]	; (8004d2c <HAL_InitTick+0xd0>)
 8004d00:	f003 fbf4 	bl	80084ec <HAL_TIM_Base_Init>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004d0a:	4808      	ldr	r0, [pc, #32]	; (8004d2c <HAL_InitTick+0xd0>)
 8004d0c:	f003 fc50 	bl	80085b0 <HAL_TIM_Base_Start_IT>
 8004d10:	4603      	mov	r3, r0
 8004d12:	e000      	b.n	8004d16 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3740      	adds	r7, #64	; 0x40
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	24000018 	.word	0x24000018
 8004d24:	58024400 	.word	0x58024400
 8004d28:	431bde83 	.word	0x431bde83
 8004d2c:	2407d7c8 	.word	0x2407d7c8
 8004d30:	40001000 	.word	0x40001000

08004d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d38:	e7fe      	b.n	8004d38 <NMI_Handler+0x4>

08004d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d3e:	e7fe      	b.n	8004d3e <HardFault_Handler+0x4>

08004d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d44:	e7fe      	b.n	8004d44 <MemManage_Handler+0x4>

08004d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d46:	b480      	push	{r7}
 8004d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d4a:	e7fe      	b.n	8004d4a <BusFault_Handler+0x4>

08004d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d50:	e7fe      	b.n	8004d50 <UsageFault_Handler+0x4>

08004d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d52:	b480      	push	{r7}
 8004d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d56:	bf00      	nop
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004d64:	4802      	ldr	r0, [pc, #8]	; (8004d70 <FDCAN2_IT1_IRQHandler+0x10>)
 8004d66:	f000 fc0f 	bl	8005588 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	2407d410 	.word	0x2407d410

08004d74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004d78:	4802      	ldr	r0, [pc, #8]	; (8004d84 <TIM6_DAC_IRQHandler+0x10>)
 8004d7a:	f003 fc89 	bl	8008690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	2407d7c8 	.word	0x2407d7c8

08004d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d8c:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <SystemInit+0xec>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	4a38      	ldr	r2, [pc, #224]	; (8004e74 <SystemInit+0xec>)
 8004d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <SystemInit+0xf0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d807      	bhi.n	8004db8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004da8:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <SystemInit+0xf0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 030f 	bic.w	r3, r3, #15
 8004db0:	4a31      	ldr	r2, [pc, #196]	; (8004e78 <SystemInit+0xf0>)
 8004db2:	f043 0307 	orr.w	r3, r3, #7
 8004db6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004db8:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <SystemInit+0xf4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2f      	ldr	r2, [pc, #188]	; (8004e7c <SystemInit+0xf4>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <SystemInit+0xf4>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004dca:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <SystemInit+0xf4>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	492b      	ldr	r1, [pc, #172]	; (8004e7c <SystemInit+0xf4>)
 8004dd0:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <SystemInit+0xf8>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004dd6:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <SystemInit+0xf0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004de2:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <SystemInit+0xf0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 030f 	bic.w	r3, r3, #15
 8004dea:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <SystemInit+0xf0>)
 8004dec:	f043 0307 	orr.w	r3, r3, #7
 8004df0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004df2:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <SystemInit+0xf4>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004df8:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <SystemInit+0xf4>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <SystemInit+0xf4>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <SystemInit+0xf4>)
 8004e06:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <SystemInit+0xfc>)
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004e0a:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <SystemInit+0xf4>)
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <SystemInit+0x100>)
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <SystemInit+0xf4>)
 8004e12:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <SystemInit+0x104>)
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004e16:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <SystemInit+0xf4>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004e1c:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <SystemInit+0xf4>)
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <SystemInit+0x104>)
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004e22:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <SystemInit+0xf4>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <SystemInit+0xf4>)
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <SystemInit+0x104>)
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <SystemInit+0xf4>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e34:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <SystemInit+0xf4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <SystemInit+0xf4>)
 8004e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <SystemInit+0xf4>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <SystemInit+0x108>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <SystemInit+0x10c>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e52:	d202      	bcs.n	8004e5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004e54:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <SystemInit+0x110>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004e5a:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <SystemInit+0x114>)
 8004e5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004e60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e62:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <SystemInit+0xec>)
 8004e64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e68:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004e6a:	bf00      	nop
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000ed00 	.word	0xe000ed00
 8004e78:	52002000 	.word	0x52002000
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	eaf6ed7f 	.word	0xeaf6ed7f
 8004e84:	02020200 	.word	0x02020200
 8004e88:	01ff0000 	.word	0x01ff0000
 8004e8c:	01010280 	.word	0x01010280
 8004e90:	5c001000 	.word	0x5c001000
 8004e94:	ffff0000 	.word	0xffff0000
 8004e98:	51008108 	.word	0x51008108
 8004e9c:	52004000 	.word	0x52004000

08004ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ed8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ea4:	f7ff ff70 	bl	8004d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ea8:	480c      	ldr	r0, [pc, #48]	; (8004edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004eaa:	490d      	ldr	r1, [pc, #52]	; (8004ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004eac:	4a0d      	ldr	r2, [pc, #52]	; (8004ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004eb0:	e002      	b.n	8004eb8 <LoopCopyDataInit>

08004eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eb6:	3304      	adds	r3, #4

08004eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ebc:	d3f9      	bcc.n	8004eb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	; (8004ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ec0:	4c0a      	ldr	r4, [pc, #40]	; (8004eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec4:	e001      	b.n	8004eca <LoopFillZerobss>

08004ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec8:	3204      	adds	r2, #4

08004eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ecc:	d3fb      	bcc.n	8004ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ece:	f003 fff5 	bl	8008ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ed2:	f7ff fac1 	bl	8004458 <main>
  bx  lr
 8004ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ed8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004edc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004ee0:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8004ee4:	080091b4 	.word	0x080091b4
  ldr r2, =_sbss
 8004ee8:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8004eec:	2407d818 	.word	0x2407d818

08004ef0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ef0:	e7fe      	b.n	8004ef0 <ADC3_IRQHandler>
	...

08004ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004efa:	2003      	movs	r0, #3
 8004efc:	f000 f933 	bl	8005166 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f00:	f002 f848 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <HAL_Init+0x68>)
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	4913      	ldr	r1, [pc, #76]	; (8004f60 <HAL_Init+0x6c>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <HAL_Init+0x68>)
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	4a0e      	ldr	r2, [pc, #56]	; (8004f60 <HAL_Init+0x6c>)
 8004f28:	5cd3      	ldrb	r3, [r2, r3]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <HAL_Init+0x70>)
 8004f36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f38:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <HAL_Init+0x74>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f3e:	200f      	movs	r0, #15
 8004f40:	f7ff fe8c 	bl	8004c5c <HAL_InitTick>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e002      	b.n	8004f54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004f4e:	f7ff fd93 	bl	8004a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	0800919c 	.word	0x0800919c
 8004f64:	24000014 	.word	0x24000014
 8004f68:	24000010 	.word	0x24000010

08004f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_IncTick+0x20>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_IncTick+0x24>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <HAL_IncTick+0x24>)
 8004f7e:	6013      	str	r3, [r2, #0]
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	2400001c 	.word	0x2400001c
 8004f90:	2407d814 	.word	0x2407d814

08004f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return uwTick;
 8004f98:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <HAL_GetTick+0x14>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	2407d814 	.word	0x2407d814

08004fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fb4:	f7ff ffee 	bl	8004f94 <HAL_GetTick>
 8004fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d005      	beq.n	8004fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <HAL_Delay+0x44>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004fd2:	bf00      	nop
 8004fd4:	f7ff ffde 	bl	8004f94 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d8f7      	bhi.n	8004fd4 <HAL_Delay+0x28>
  {
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	2400001c 	.word	0x2400001c

08004ff4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_GetREVID+0x14>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0c1b      	lsrs	r3, r3, #16
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	5c001000 	.word	0x5c001000

0800500c <__NVIC_SetPriorityGrouping>:
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <__NVIC_SetPriorityGrouping+0x40>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005028:	4013      	ands	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <__NVIC_SetPriorityGrouping+0x44>)
 8005036:	4313      	orrs	r3, r2
 8005038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800503a:	4a04      	ldr	r2, [pc, #16]	; (800504c <__NVIC_SetPriorityGrouping+0x40>)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	60d3      	str	r3, [r2, #12]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000ed00 	.word	0xe000ed00
 8005050:	05fa0000 	.word	0x05fa0000

08005054 <__NVIC_GetPriorityGrouping>:
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <__NVIC_GetPriorityGrouping+0x18>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	f003 0307 	and.w	r3, r3, #7
}
 8005062:	4618      	mov	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <__NVIC_EnableIRQ>:
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800507a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800507e:	2b00      	cmp	r3, #0
 8005080:	db0b      	blt.n	800509a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	f003 021f 	and.w	r2, r3, #31
 8005088:	4907      	ldr	r1, [pc, #28]	; (80050a8 <__NVIC_EnableIRQ+0x38>)
 800508a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	2001      	movs	r0, #1
 8005092:	fa00 f202 	lsl.w	r2, r0, r2
 8005096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	e000e100 	.word	0xe000e100

080050ac <__NVIC_SetPriority>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	6039      	str	r1, [r7, #0]
 80050b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	db0a      	blt.n	80050d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	490c      	ldr	r1, [pc, #48]	; (80050f8 <__NVIC_SetPriority+0x4c>)
 80050c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	440b      	add	r3, r1
 80050d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050d4:	e00a      	b.n	80050ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4908      	ldr	r1, [pc, #32]	; (80050fc <__NVIC_SetPriority+0x50>)
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3b04      	subs	r3, #4
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	440b      	add	r3, r1
 80050ea:	761a      	strb	r2, [r3, #24]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000e100 	.word	0xe000e100
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f1c3 0307 	rsb	r3, r3, #7
 800511a:	2b04      	cmp	r3, #4
 800511c:	bf28      	it	cs
 800511e:	2304      	movcs	r3, #4
 8005120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3304      	adds	r3, #4
 8005126:	2b06      	cmp	r3, #6
 8005128:	d902      	bls.n	8005130 <NVIC_EncodePriority+0x30>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3b03      	subs	r3, #3
 800512e:	e000      	b.n	8005132 <NVIC_EncodePriority+0x32>
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005134:	f04f 32ff 	mov.w	r2, #4294967295
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43da      	mvns	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	401a      	ands	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005148:	f04f 31ff 	mov.w	r1, #4294967295
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	43d9      	mvns	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005158:	4313      	orrs	r3, r2
         );
}
 800515a:	4618      	mov	r0, r3
 800515c:	3724      	adds	r7, #36	; 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff ff4c 	bl	800500c <__NVIC_SetPriorityGrouping>
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800518a:	f7ff ff63 	bl	8005054 <__NVIC_GetPriorityGrouping>
 800518e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	6978      	ldr	r0, [r7, #20]
 8005196:	f7ff ffb3 	bl	8005100 <NVIC_EncodePriority>
 800519a:	4602      	mov	r2, r0
 800519c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff ff82 	bl	80050ac <__NVIC_SetPriority>
}
 80051a8:	bf00      	nop
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff ff56 	bl	8005070 <__NVIC_EnableIRQ>
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b098      	sub	sp, #96	; 0x60
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80051d4:	4a84      	ldr	r2, [pc, #528]	; (80053e8 <HAL_FDCAN_Init+0x21c>)
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	4611      	mov	r1, r2
 80051dc:	224c      	movs	r2, #76	; 0x4c
 80051de:	4618      	mov	r0, r3
 80051e0:	f003 fea0 	bl	8008f24 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e1c6      	b.n	800557c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a7e      	ldr	r2, [pc, #504]	; (80053ec <HAL_FDCAN_Init+0x220>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d106      	bne.n	8005206 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005200:	461a      	mov	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fc46 	bl	8004aac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0210 	bic.w	r2, r2, #16
 800522e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005230:	f7ff feb0 	bl	8004f94 <HAL_GetTick>
 8005234:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005236:	e014      	b.n	8005262 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005238:	f7ff feac 	bl	8004f94 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b0a      	cmp	r3, #10
 8005244:	d90d      	bls.n	8005262 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800524c:	f043 0201 	orr.w	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2203      	movs	r2, #3
 800525a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e18c      	b.n	800557c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b08      	cmp	r3, #8
 800526e:	d0e3      	beq.n	8005238 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005280:	f7ff fe88 	bl	8004f94 <HAL_GetTick>
 8005284:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005286:	e014      	b.n	80052b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005288:	f7ff fe84 	bl	8004f94 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b0a      	cmp	r3, #10
 8005294:	d90d      	bls.n	80052b2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800529c:	f043 0201 	orr.w	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2203      	movs	r2, #3
 80052aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e164      	b.n	800557c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0e3      	beq.n	8005288 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0202 	orr.w	r2, r2, #2
 80052ce:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7c1b      	ldrb	r3, [r3, #16]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d108      	bne.n	80052ea <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e6:	619a      	str	r2, [r3, #24]
 80052e8:	e007      	b.n	80052fa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7c5b      	ldrb	r3, [r3, #17]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d108      	bne.n	8005314 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005310:	619a      	str	r2, [r3, #24]
 8005312:	e007      	b.n	8005324 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005322:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	7c9b      	ldrb	r3, [r3, #18]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d108      	bne.n	800533e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800533a:	619a      	str	r2, [r3, #24]
 800533c:	e007      	b.n	800534e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800534c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005372:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0210 	bic.w	r2, r2, #16
 8005382:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d108      	bne.n	800539e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0204 	orr.w	r2, r2, #4
 800539a:	619a      	str	r2, [r3, #24]
 800539c:	e030      	b.n	8005400 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d02c      	beq.n	8005400 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d020      	beq.n	80053f0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053bc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0210 	orr.w	r2, r2, #16
 80053cc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d114      	bne.n	8005400 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0220 	orr.w	r2, r2, #32
 80053e4:	619a      	str	r2, [r3, #24]
 80053e6:	e00b      	b.n	8005400 <HAL_FDCAN_Init+0x234>
 80053e8:	08009114 	.word	0x08009114
 80053ec:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0220 	orr.w	r2, r2, #32
 80053fe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	3b01      	subs	r3, #1
 8005406:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	3b01      	subs	r3, #1
 800540e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005410:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005418:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	3b01      	subs	r3, #1
 8005422:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005428:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800542a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005434:	d115      	bne.n	8005462 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	3b01      	subs	r3, #1
 8005442:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005444:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	3b01      	subs	r3, #1
 800544c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800544e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	3b01      	subs	r3, #1
 8005458:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800545e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005460:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	4413      	add	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d011      	beq.n	80054b2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005496:	f023 0107 	bic.w	r1, r3, #7
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	3360      	adds	r3, #96	; 0x60
 80054a2:	443b      	add	r3, r7
 80054a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d011      	beq.n	80054de <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80054c2:	f023 0107 	bic.w	r1, r3, #7
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	3360      	adds	r3, #96	; 0x60
 80054ce:	443b      	add	r3, r7
 80054d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d012      	beq.n	800550c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80054ee:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	3360      	adds	r3, #96	; 0x60
 80054fa:	443b      	add	r3, r7
 80054fc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005500:	011a      	lsls	r2, r3, #4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005510:	2b00      	cmp	r3, #0
 8005512:	d012      	beq.n	800553a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800551c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	3360      	adds	r3, #96	; 0x60
 8005528:	443b      	add	r3, r7
 800552a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800552e:	021a      	lsls	r2, r3, #8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a11      	ldr	r2, [pc, #68]	; (8005584 <HAL_FDCAN_Init+0x3b8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d107      	bne.n	8005554 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f022 0203 	bic.w	r2, r2, #3
 8005552:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fb1f 	bl	8005bb0 <FDCAN_CalcultateRamBlockAddresses>
 8005572:	4603      	mov	r3, r0
 8005574:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005578:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800557c:	4618      	mov	r0, r3
 800557e:	3760      	adds	r7, #96	; 0x60
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	4000a000 	.word	0x4000a000

08005588 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b092      	sub	sp, #72	; 0x48
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005590:	4b90      	ldr	r3, [pc, #576]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	079b      	lsls	r3, r3, #30
 8005596:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005598:	4b8e      	ldr	r3, [pc, #568]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	079b      	lsls	r3, r3, #30
 800559e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055a0:	4013      	ands	r3, r2
 80055a2:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b8:	4013      	ands	r3, r2
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055d0:	4013      	ands	r3, r2
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055de:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e8:	4013      	ands	r3, r2
 80055ea:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005600:	4013      	ands	r3, r2
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800560e:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005618:	4013      	ands	r3, r2
 800561a:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d011      	beq.n	800564e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005640:	651a      	str	r2, [r3, #80]	; 0x50
 8005642:	4b64      	ldr	r3, [pc, #400]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 8005644:	2200      	movs	r2, #0
 8005646:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fa65 	bl	8005b18 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01e      	beq.n	800569a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005666:	2b00      	cmp	r3, #0
 8005668:	d017      	beq.n	800569a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800567c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800567e:	4013      	ands	r3, r2
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800568a:	651a      	str	r2, [r3, #80]	; 0x50
 800568c:	4b51      	ldr	r3, [pc, #324]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fa16 	bl	8005ac6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800569a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00d      	beq.n	80056bc <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056a6:	4b4c      	ldr	r3, [pc, #304]	; (80057d8 <HAL_FDCAN_IRQHandler+0x250>)
 80056a8:	400b      	ands	r3, r1
 80056aa:	6513      	str	r3, [r2, #80]	; 0x50
 80056ac:	4a49      	ldr	r2, [pc, #292]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 80056ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b0:	0f9b      	lsrs	r3, r3, #30
 80056b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80056b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9c4 	bl	8005a44 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80056bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00d      	beq.n	80056de <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c8:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <HAL_FDCAN_IRQHandler+0x250>)
 80056ca:	400b      	ands	r3, r1
 80056cc:	6513      	str	r3, [r2, #80]	; 0x50
 80056ce:	4a41      	ldr	r2, [pc, #260]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d2:	0f9b      	lsrs	r3, r3, #30
 80056d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80056d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f9be 	bl	8005a5a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00d      	beq.n	8005700 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ea:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_FDCAN_IRQHandler+0x250>)
 80056ec:	400b      	ands	r3, r1
 80056ee:	6513      	str	r3, [r2, #80]	; 0x50
 80056f0:	4a38      	ldr	r2, [pc, #224]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 80056f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f4:	0f9b      	lsrs	r3, r3, #30
 80056f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80056f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f9b8 	bl	8005a70 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00d      	beq.n	8005722 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800570c:	4b32      	ldr	r3, [pc, #200]	; (80057d8 <HAL_FDCAN_IRQHandler+0x250>)
 800570e:	400b      	ands	r3, r1
 8005710:	6513      	str	r3, [r2, #80]	; 0x50
 8005712:	4a30      	ldr	r2, [pc, #192]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	0f9b      	lsrs	r3, r3, #30
 8005718:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800571a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f9b2 	bl	8005a86 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572c:	2b00      	cmp	r3, #0
 800572e:	d011      	beq.n	8005754 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005746:	651a      	str	r2, [r3, #80]	; 0x50
 8005748:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9a4 	bl	8005a9c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800575e:	2b00      	cmp	r3, #0
 8005760:	d01e      	beq.n	80057a0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800576c:	2b00      	cmp	r3, #0
 800576e:	d017      	beq.n	80057a0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005784:	4013      	ands	r3, r2
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005790:	651a      	str	r2, [r3, #80]	; 0x50
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 8005794:	2200      	movs	r2, #0
 8005796:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f988 	bl	8005ab0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d016      	beq.n	80057dc <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00f      	beq.n	80057dc <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80057c4:	651a      	str	r2, [r3, #80]	; 0x50
 80057c6:	4b03      	ldr	r3, [pc, #12]	; (80057d4 <HAL_FDCAN_IRQHandler+0x24c>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f985 	bl	8005adc <HAL_FDCAN_RxBufferNewMessageCallback>
 80057d2:	e003      	b.n	80057dc <HAL_FDCAN_IRQHandler+0x254>
 80057d4:	4000a800 	.word	0x4000a800
 80057d8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d011      	beq.n	800580e <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005800:	651a      	str	r2, [r3, #80]	; 0x50
 8005802:	4b8d      	ldr	r3, [pc, #564]	; (8005a38 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f971 	bl	8005af0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d011      	beq.n	8005840 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005832:	651a      	str	r2, [r3, #80]	; 0x50
 8005834:	4b80      	ldr	r3, [pc, #512]	; (8005a38 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005836:	2200      	movs	r2, #0
 8005838:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f962 	bl	8005b04 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d016      	beq.n	800587c <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00f      	beq.n	800587c <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005864:	651a      	str	r2, [r3, #80]	; 0x50
 8005866:	4b74      	ldr	r3, [pc, #464]	; (8005a38 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005868:	2200      	movs	r2, #0
 800586a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005872:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00d      	beq.n	800589e <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005888:	4b6c      	ldr	r3, [pc, #432]	; (8005a3c <HAL_FDCAN_IRQHandler+0x4b4>)
 800588a:	400b      	ands	r3, r1
 800588c:	6513      	str	r3, [r2, #80]	; 0x50
 800588e:	4a6a      	ldr	r2, [pc, #424]	; (8005a38 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	0f9b      	lsrs	r3, r3, #30
 8005894:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f951 	bl	8005b40 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d011      	beq.n	80058c8 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058aa:	4b64      	ldr	r3, [pc, #400]	; (8005a3c <HAL_FDCAN_IRQHandler+0x4b4>)
 80058ac:	400b      	ands	r3, r1
 80058ae:	6513      	str	r3, [r2, #80]	; 0x50
 80058b0:	4a61      	ldr	r2, [pc, #388]	; (8005a38 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	0f9b      	lsrs	r3, r3, #30
 80058b6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a5c      	ldr	r2, [pc, #368]	; (8005a40 <HAL_FDCAN_IRQHandler+0x4b8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	f040 80a6 	bne.w	8005a20 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 809e 	beq.w	8005a20 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f8:	4013      	ands	r3, r2
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005906:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	4013      	ands	r3, r2
 8005912:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800591e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	4013      	ands	r3, r2
 800592a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005936:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4013      	ands	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800594e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4013      	ands	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005968:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800596a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f8f2 	bl	8005b56 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005980:	6a39      	ldr	r1, [r7, #32]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8f2 	bl	8005b6c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01b      	beq.n	80059ce <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d014      	beq.n	80059ce <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	0c1b      	lsrs	r3, r3, #16
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ba:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2240      	movs	r2, #64	; 0x40
 80059c2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	6939      	ldr	r1, [r7, #16]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f8da 	bl	8005b82 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80059dc:	69f9      	ldr	r1, [r7, #28]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8db 	bl	8005b9a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f87e 	bl	8005b2c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005a30:	bf00      	nop
 8005a32:	3748      	adds	r7, #72	; 0x48
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	4000a800 	.word	0x4000a800
 8005a3c:	3fcfffff 	.word	0x3fcfffff
 8005a40:	4000a000 	.word	0x4000a000

08005a44 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005bc6:	4ba7      	ldr	r3, [pc, #668]	; (8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	0091      	lsls	r1, r2, #2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	041a      	lsls	r2, r3, #16
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c06:	4b97      	ldr	r3, [pc, #604]	; (8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0091      	lsls	r1, r2, #2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	430b      	orrs	r3, r1
 8005c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	041a      	lsls	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005c48:	4b86      	ldr	r3, [pc, #536]	; (8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	0091      	lsls	r1, r2, #2
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	430b      	orrs	r3, r1
 8005c56:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	041a      	lsls	r2, r3, #16
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	4413      	add	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005c90:	4b74      	ldr	r3, [pc, #464]	; (8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	0091      	lsls	r1, r2, #2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005caa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb2:	041a      	lsls	r2, r3, #16
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4413      	add	r3, r2
 8005cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005cd8:	4b62      	ldr	r3, [pc, #392]	; (8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	0091      	lsls	r1, r2, #2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005d04:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	0091      	lsls	r1, r2, #2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	430b      	orrs	r3, r1
 8005d12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d1e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d26:	041a      	lsls	r2, r3, #16
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d46:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	0091      	lsls	r1, r2, #2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	430b      	orrs	r3, r1
 8005d54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d60:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d68:	041a      	lsls	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d7c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d84:	061a      	lsls	r2, r3, #24
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d94:	4b34      	ldr	r3, [pc, #208]	; (8005e68 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005d96:	4413      	add	r3, r2
 8005d98:	009a      	lsls	r2, r3, #2
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	441a      	add	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	441a      	add	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5a:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d915      	bls.n	8005e8c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005e60:	e006      	b.n	8005e70 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005e62:	bf00      	nop
 8005e64:	ffff0003 	.word	0xffff0003
 8005e68:	10002b00 	.word	0x10002b00
 8005e6c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e76:	f043 0220 	orr.w	r2, r3, #32
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2203      	movs	r2, #3
 8005e84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e010      	b.n	8005eae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e005      	b.n	8005ea0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d3f3      	bcc.n	8005e94 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop

08005ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b089      	sub	sp, #36	; 0x24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005eca:	4b89      	ldr	r3, [pc, #548]	; (80060f0 <HAL_GPIO_Init+0x234>)
 8005ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ece:	e194      	b.n	80061fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8005edc:	4013      	ands	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8186 	beq.w	80061f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d00b      	beq.n	8005f08 <HAL_GPIO_Init+0x4c>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d007      	beq.n	8005f08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005efc:	2b11      	cmp	r3, #17
 8005efe:	d003      	beq.n	8005f08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b12      	cmp	r3, #18
 8005f06:	d130      	bne.n	8005f6a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	2203      	movs	r2, #3
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f3e:	2201      	movs	r2, #1
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	f003 0201 	and.w	r2, r3, #1
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	2203      	movs	r2, #3
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d003      	beq.n	8005faa <HAL_GPIO_Init+0xee>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b12      	cmp	r3, #18
 8005fa8:	d123      	bne.n	8005ff2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	08da      	lsrs	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3208      	adds	r2, #8
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	08da      	lsrs	r2, r3, #3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3208      	adds	r2, #8
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 0203 	and.w	r2, r3, #3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4313      	orrs	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80e0 	beq.w	80061f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006034:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <HAL_GPIO_Init+0x238>)
 8006036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_GPIO_Init+0x238>)
 800603c:	f043 0302 	orr.w	r3, r3, #2
 8006040:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_GPIO_Init+0x238>)
 8006046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006052:	4a29      	ldr	r2, [pc, #164]	; (80060f8 <HAL_GPIO_Init+0x23c>)
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	3302      	adds	r3, #2
 800605a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	220f      	movs	r2, #15
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4013      	ands	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a20      	ldr	r2, [pc, #128]	; (80060fc <HAL_GPIO_Init+0x240>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d052      	beq.n	8006124 <HAL_GPIO_Init+0x268>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <HAL_GPIO_Init+0x244>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <HAL_GPIO_Init+0x22e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <HAL_GPIO_Init+0x248>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d02b      	beq.n	80060e6 <HAL_GPIO_Init+0x22a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_GPIO_Init+0x24c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d025      	beq.n	80060e2 <HAL_GPIO_Init+0x226>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1c      	ldr	r2, [pc, #112]	; (800610c <HAL_GPIO_Init+0x250>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01f      	beq.n	80060de <HAL_GPIO_Init+0x222>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <HAL_GPIO_Init+0x254>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d019      	beq.n	80060da <HAL_GPIO_Init+0x21e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <HAL_GPIO_Init+0x258>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <HAL_GPIO_Init+0x21a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <HAL_GPIO_Init+0x25c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00d      	beq.n	80060d2 <HAL_GPIO_Init+0x216>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <HAL_GPIO_Init+0x260>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d007      	beq.n	80060ce <HAL_GPIO_Init+0x212>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a17      	ldr	r2, [pc, #92]	; (8006120 <HAL_GPIO_Init+0x264>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <HAL_GPIO_Init+0x20e>
 80060c6:	2309      	movs	r3, #9
 80060c8:	e02d      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060ca:	230a      	movs	r3, #10
 80060cc:	e02b      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060ce:	2308      	movs	r3, #8
 80060d0:	e029      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060d2:	2307      	movs	r3, #7
 80060d4:	e027      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060d6:	2306      	movs	r3, #6
 80060d8:	e025      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060da:	2305      	movs	r3, #5
 80060dc:	e023      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060de:	2304      	movs	r3, #4
 80060e0:	e021      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060e2:	2303      	movs	r3, #3
 80060e4:	e01f      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e01d      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e01b      	b.n	8006126 <HAL_GPIO_Init+0x26a>
 80060ee:	bf00      	nop
 80060f0:	58000080 	.word	0x58000080
 80060f4:	58024400 	.word	0x58024400
 80060f8:	58000400 	.word	0x58000400
 80060fc:	58020000 	.word	0x58020000
 8006100:	58020400 	.word	0x58020400
 8006104:	58020800 	.word	0x58020800
 8006108:	58020c00 	.word	0x58020c00
 800610c:	58021000 	.word	0x58021000
 8006110:	58021400 	.word	0x58021400
 8006114:	58021800 	.word	0x58021800
 8006118:	58021c00 	.word	0x58021c00
 800611c:	58022000 	.word	0x58022000
 8006120:	58022400 	.word	0x58022400
 8006124:	2300      	movs	r3, #0
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	f002 0203 	and.w	r2, r2, #3
 800612c:	0092      	lsls	r2, r2, #2
 800612e:	4093      	lsls	r3, r2
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4313      	orrs	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006136:	4938      	ldr	r1, [pc, #224]	; (8006218 <HAL_GPIO_Init+0x35c>)
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	3302      	adds	r3, #2
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	43db      	mvns	r3, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4013      	ands	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80061be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80061c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80061ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	3301      	adds	r3, #1
 80061f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	f47f ae63 	bne.w	8005ed0 <HAL_GPIO_Init+0x14>
  }
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	3724      	adds	r7, #36	; 0x24
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	58000400 	.word	0x58000400

0800621c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	887b      	ldrh	r3, [r7, #2]
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006234:	2301      	movs	r3, #1
 8006236:	73fb      	strb	r3, [r7, #15]
 8006238:	e001      	b.n	800623e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	807b      	strh	r3, [r7, #2]
 8006258:	4613      	mov	r3, r2
 800625a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800625c:	787b      	ldrb	r3, [r7, #1]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006262:	887a      	ldrh	r2, [r7, #2]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006268:	e003      	b.n	8006272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800626a:	887b      	ldrh	r3, [r7, #2]
 800626c:	041a      	lsls	r2, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	619a      	str	r2, [r3, #24]
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006290:	887a      	ldrh	r2, [r7, #2]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4013      	ands	r3, r2
 8006296:	041a      	lsls	r2, r3, #16
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	43d9      	mvns	r1, r3
 800629c:	887b      	ldrh	r3, [r7, #2]
 800629e:	400b      	ands	r3, r1
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	619a      	str	r2, [r3, #24]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80062b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b4:	b08f      	sub	sp, #60	; 0x3c
 80062b6:	af0a      	add	r7, sp, #40	; 0x28
 80062b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e054      	b.n	800636e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fe fc52 	bl	8004b88 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2203      	movs	r2, #3
 80062e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f002 fc32 	bl	8008b6c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	603b      	str	r3, [r7, #0]
 800630e:	687e      	ldr	r6, [r7, #4]
 8006310:	466d      	mov	r5, sp
 8006312:	f106 0410 	add.w	r4, r6, #16
 8006316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800631a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800631c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800631e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006322:	e885 0003 	stmia.w	r5, {r0, r1}
 8006326:	1d33      	adds	r3, r6, #4
 8006328:	cb0e      	ldmia	r3, {r1, r2, r3}
 800632a:	6838      	ldr	r0, [r7, #0]
 800632c:	f002 fbb0 	bl	8008a90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2101      	movs	r1, #1
 8006336:	4618      	mov	r0, r3
 8006338:	f002 fc29 	bl	8008b8e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	603b      	str	r3, [r7, #0]
 8006342:	687e      	ldr	r6, [r7, #4]
 8006344:	466d      	mov	r5, sp
 8006346:	f106 0410 	add.w	r4, r6, #16
 800634a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800634c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800634e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006356:	e885 0003 	stmia.w	r5, {r0, r1}
 800635a:	1d33      	adds	r3, r6, #4
 800635c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800635e:	6838      	ldr	r0, [r7, #0]
 8006360:	f002 fcbc 	bl	8008cdc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006378 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006380:	4b19      	ldr	r3, [pc, #100]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b04      	cmp	r3, #4
 800638a:	d00a      	beq.n	80063a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800638c:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d001      	beq.n	800639e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01f      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e01d      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f023 0207 	bic.w	r2, r3, #7
 80063aa:	490f      	ldr	r1, [pc, #60]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063b2:	f7fe fdef 	bl	8004f94 <HAL_GetTick>
 80063b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063b8:	e009      	b.n	80063ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063ba:	f7fe fdeb 	bl	8004f94 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c8:	d901      	bls.n	80063ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e007      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063da:	d1ee      	bne.n	80063ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	58024800 	.word	0x58024800

080063ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a04      	ldr	r2, [pc, #16]	; (8006408 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063fa:	60d3      	str	r3, [r2, #12]
}
 80063fc:	bf00      	nop
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	58024800 	.word	0x58024800

0800640c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	; 0x30
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e3fd      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8087 	beq.w	800653a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642c:	4b99      	ldr	r3, [pc, #612]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006436:	4b97      	ldr	r3, [pc, #604]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b10      	cmp	r3, #16
 8006440:	d007      	beq.n	8006452 <HAL_RCC_OscConfig+0x46>
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2b18      	cmp	r3, #24
 8006446:	d110      	bne.n	800646a <HAL_RCC_OscConfig+0x5e>
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d10b      	bne.n	800646a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006452:	4b90      	ldr	r3, [pc, #576]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d06c      	beq.n	8006538 <HAL_RCC_OscConfig+0x12c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d168      	bne.n	8006538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e3d7      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006472:	d106      	bne.n	8006482 <HAL_RCC_OscConfig+0x76>
 8006474:	4b87      	ldr	r3, [pc, #540]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a86      	ldr	r2, [pc, #536]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800647a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e02e      	b.n	80064e0 <HAL_RCC_OscConfig+0xd4>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10c      	bne.n	80064a4 <HAL_RCC_OscConfig+0x98>
 800648a:	4b82      	ldr	r3, [pc, #520]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a81      	ldr	r2, [pc, #516]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4b7f      	ldr	r3, [pc, #508]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a7e      	ldr	r2, [pc, #504]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800649c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e01d      	b.n	80064e0 <HAL_RCC_OscConfig+0xd4>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCC_OscConfig+0xbc>
 80064ae:	4b79      	ldr	r3, [pc, #484]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a78      	ldr	r2, [pc, #480]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80064b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	4b76      	ldr	r3, [pc, #472]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a75      	ldr	r2, [pc, #468]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e00b      	b.n	80064e0 <HAL_RCC_OscConfig+0xd4>
 80064c8:	4b72      	ldr	r3, [pc, #456]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a71      	ldr	r2, [pc, #452]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80064ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a6e      	ldr	r2, [pc, #440]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80064da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d013      	beq.n	8006510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fe fd54 	bl	8004f94 <HAL_GetTick>
 80064ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fe fd50 	bl	8004f94 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	; 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e38b      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006502:	4b64      	ldr	r3, [pc, #400]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f0      	beq.n	80064f0 <HAL_RCC_OscConfig+0xe4>
 800650e:	e014      	b.n	800653a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fe fd40 	bl	8004f94 <HAL_GetTick>
 8006514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006518:	f7fe fd3c 	bl	8004f94 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b64      	cmp	r3, #100	; 0x64
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e377      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800652a:	4b5a      	ldr	r3, [pc, #360]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x10c>
 8006536:	e000      	b.n	800653a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80ae 	beq.w	80066a4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006548:	4b52      	ldr	r3, [pc, #328]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006550:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006552:	4b50      	ldr	r3, [pc, #320]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_RCC_OscConfig+0x162>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b18      	cmp	r3, #24
 8006562:	d13a      	bne.n	80065da <HAL_RCC_OscConfig+0x1ce>
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d135      	bne.n	80065da <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800656e:	4b49      	ldr	r3, [pc, #292]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <HAL_RCC_OscConfig+0x17a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e349      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006586:	f7fe fd35 	bl	8004ff4 <HAL_GetREVID>
 800658a:	4603      	mov	r3, r0
 800658c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006590:	4293      	cmp	r3, r2
 8006592:	d817      	bhi.n	80065c4 <HAL_RCC_OscConfig+0x1b8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	d108      	bne.n	80065ae <HAL_RCC_OscConfig+0x1a2>
 800659c:	4b3d      	ldr	r3, [pc, #244]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065a4:	4a3b      	ldr	r2, [pc, #236]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80065a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065aa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065ac:	e07a      	b.n	80066a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ae:	4b39      	ldr	r3, [pc, #228]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	031b      	lsls	r3, r3, #12
 80065bc:	4935      	ldr	r1, [pc, #212]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065c2:	e06f      	b.n	80066a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c4:	4b33      	ldr	r3, [pc, #204]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	061b      	lsls	r3, r3, #24
 80065d2:	4930      	ldr	r1, [pc, #192]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d8:	e064      	b.n	80066a4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d045      	beq.n	800666e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065e2:	4b2c      	ldr	r3, [pc, #176]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 0219 	bic.w	r2, r3, #25
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	4929      	ldr	r1, [pc, #164]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fe fcce 	bl	8004f94 <HAL_GetTick>
 80065f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065fc:	f7fe fcca 	bl	8004f94 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e305      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800660e:	4b21      	ldr	r3, [pc, #132]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661a:	f7fe fceb 	bl	8004ff4 <HAL_GetREVID>
 800661e:	4603      	mov	r3, r0
 8006620:	f241 0203 	movw	r2, #4099	; 0x1003
 8006624:	4293      	cmp	r3, r2
 8006626:	d817      	bhi.n	8006658 <HAL_RCC_OscConfig+0x24c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d108      	bne.n	8006642 <HAL_RCC_OscConfig+0x236>
 8006630:	4b18      	ldr	r3, [pc, #96]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006638:	4a16      	ldr	r2, [pc, #88]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800663a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663e:	6053      	str	r3, [r2, #4]
 8006640:	e030      	b.n	80066a4 <HAL_RCC_OscConfig+0x298>
 8006642:	4b14      	ldr	r3, [pc, #80]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	031b      	lsls	r3, r3, #12
 8006650:	4910      	ldr	r1, [pc, #64]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006652:	4313      	orrs	r3, r2
 8006654:	604b      	str	r3, [r1, #4]
 8006656:	e025      	b.n	80066a4 <HAL_RCC_OscConfig+0x298>
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	061b      	lsls	r3, r3, #24
 8006666:	490b      	ldr	r1, [pc, #44]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006668:	4313      	orrs	r3, r2
 800666a:	604b      	str	r3, [r1, #4]
 800666c:	e01a      	b.n	80066a4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a08      	ldr	r2, [pc, #32]	; (8006694 <HAL_RCC_OscConfig+0x288>)
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fe fc8b 	bl	8004f94 <HAL_GetTick>
 800667e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006680:	e00a      	b.n	8006698 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006682:	f7fe fc87 	bl	8004f94 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d903      	bls.n	8006698 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e2c2      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
 8006694:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006698:	4b94      	ldr	r3, [pc, #592]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1ee      	bne.n	8006682 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80a9 	beq.w	8006804 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b2:	4b8e      	ldr	r3, [pc, #568]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066bc:	4b8b      	ldr	r3, [pc, #556]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d007      	beq.n	80066d8 <HAL_RCC_OscConfig+0x2cc>
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b18      	cmp	r3, #24
 80066cc:	d13a      	bne.n	8006744 <HAL_RCC_OscConfig+0x338>
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d135      	bne.n	8006744 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066d8:	4b84      	ldr	r3, [pc, #528]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_RCC_OscConfig+0x2e4>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	2b80      	cmp	r3, #128	; 0x80
 80066ea:	d001      	beq.n	80066f0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e294      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066f0:	f7fe fc80 	bl	8004ff4 <HAL_GetREVID>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d817      	bhi.n	800672e <HAL_RCC_OscConfig+0x322>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	2b20      	cmp	r3, #32
 8006704:	d108      	bne.n	8006718 <HAL_RCC_OscConfig+0x30c>
 8006706:	4b79      	ldr	r3, [pc, #484]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800670e:	4a77      	ldr	r2, [pc, #476]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006714:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006716:	e075      	b.n	8006804 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006718:	4b74      	ldr	r3, [pc, #464]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	069b      	lsls	r3, r3, #26
 8006726:	4971      	ldr	r1, [pc, #452]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006728:	4313      	orrs	r3, r2
 800672a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800672c:	e06a      	b.n	8006804 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800672e:	4b6f      	ldr	r3, [pc, #444]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	061b      	lsls	r3, r3, #24
 800673c:	496b      	ldr	r1, [pc, #428]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 800673e:	4313      	orrs	r3, r2
 8006740:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006742:	e05f      	b.n	8006804 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d042      	beq.n	80067d2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800674c:	4b67      	ldr	r3, [pc, #412]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a66      	ldr	r2, [pc, #408]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fe fc1c 	bl	8004f94 <HAL_GetTick>
 800675c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006760:	f7fe fc18 	bl	8004f94 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e253      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006772:	4b5e      	ldr	r3, [pc, #376]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f0      	beq.n	8006760 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800677e:	f7fe fc39 	bl	8004ff4 <HAL_GetREVID>
 8006782:	4603      	mov	r3, r0
 8006784:	f241 0203 	movw	r2, #4099	; 0x1003
 8006788:	4293      	cmp	r3, r2
 800678a:	d817      	bhi.n	80067bc <HAL_RCC_OscConfig+0x3b0>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	2b20      	cmp	r3, #32
 8006792:	d108      	bne.n	80067a6 <HAL_RCC_OscConfig+0x39a>
 8006794:	4b55      	ldr	r3, [pc, #340]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800679c:	4a53      	ldr	r2, [pc, #332]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 800679e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a2:	6053      	str	r3, [r2, #4]
 80067a4:	e02e      	b.n	8006804 <HAL_RCC_OscConfig+0x3f8>
 80067a6:	4b51      	ldr	r3, [pc, #324]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	069b      	lsls	r3, r3, #26
 80067b4:	494d      	ldr	r1, [pc, #308]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	604b      	str	r3, [r1, #4]
 80067ba:	e023      	b.n	8006804 <HAL_RCC_OscConfig+0x3f8>
 80067bc:	4b4b      	ldr	r3, [pc, #300]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	061b      	lsls	r3, r3, #24
 80067ca:	4948      	ldr	r1, [pc, #288]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60cb      	str	r3, [r1, #12]
 80067d0:	e018      	b.n	8006804 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067d2:	4b46      	ldr	r3, [pc, #280]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a45      	ldr	r2, [pc, #276]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80067d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fe fbd9 	bl	8004f94 <HAL_GetTick>
 80067e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067e6:	f7fe fbd5 	bl	8004f94 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e210      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067f8:	4b3c      	ldr	r3, [pc, #240]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f0      	bne.n	80067e6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d036      	beq.n	800687e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d019      	beq.n	800684c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006818:	4b34      	ldr	r3, [pc, #208]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 800681a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681c:	4a33      	ldr	r2, [pc, #204]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006824:	f7fe fbb6 	bl	8004f94 <HAL_GetTick>
 8006828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800682c:	f7fe fbb2 	bl	8004f94 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e1ed      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800683e:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0x420>
 800684a:	e018      	b.n	800687e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800684c:	4b27      	ldr	r3, [pc, #156]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 800684e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006850:	4a26      	ldr	r2, [pc, #152]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006858:	f7fe fb9c 	bl	8004f94 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006860:	f7fe fb98 	bl	8004f94 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e1d3      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006872:	4b1e      	ldr	r3, [pc, #120]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f0      	bne.n	8006860 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d038      	beq.n	80068fc <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d019      	beq.n	80068c6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006892:	4b16      	ldr	r3, [pc, #88]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a15      	ldr	r2, [pc, #84]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 8006898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800689c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800689e:	f7fe fb79 	bl	8004f94 <HAL_GetTick>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068a6:	f7fe fb75 	bl	8004f94 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e1b0      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068b8:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0f0      	beq.n	80068a6 <HAL_RCC_OscConfig+0x49a>
 80068c4:	e01a      	b.n	80068fc <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a08      	ldr	r2, [pc, #32]	; (80068ec <HAL_RCC_OscConfig+0x4e0>)
 80068cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068d2:	f7fe fb5f 	bl	8004f94 <HAL_GetTick>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068d8:	e00a      	b.n	80068f0 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068da:	f7fe fb5b 	bl	8004f94 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d903      	bls.n	80068f0 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e196      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
 80068ec:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068f0:	4b99      	ldr	r3, [pc, #612]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1ee      	bne.n	80068da <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8081 	beq.w	8006a0c <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800690a:	4b94      	ldr	r3, [pc, #592]	; (8006b5c <HAL_RCC_OscConfig+0x750>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a93      	ldr	r2, [pc, #588]	; (8006b5c <HAL_RCC_OscConfig+0x750>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006916:	f7fe fb3d 	bl	8004f94 <HAL_GetTick>
 800691a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fe fb39 	bl	8004f94 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b64      	cmp	r3, #100	; 0x64
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e174      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006930:	4b8a      	ldr	r3, [pc, #552]	; (8006b5c <HAL_RCC_OscConfig+0x750>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x546>
 8006944:	4b84      	ldr	r3, [pc, #528]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006948:	4a83      	ldr	r2, [pc, #524]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6713      	str	r3, [r2, #112]	; 0x70
 8006950:	e02d      	b.n	80069ae <HAL_RCC_OscConfig+0x5a2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x568>
 800695a:	4b7f      	ldr	r3, [pc, #508]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a7e      	ldr	r2, [pc, #504]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	4b7c      	ldr	r3, [pc, #496]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a7b      	ldr	r2, [pc, #492]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
 8006972:	e01c      	b.n	80069ae <HAL_RCC_OscConfig+0x5a2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b05      	cmp	r3, #5
 800697a:	d10c      	bne.n	8006996 <HAL_RCC_OscConfig+0x58a>
 800697c:	4b76      	ldr	r3, [pc, #472]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a75      	ldr	r2, [pc, #468]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006982:	f043 0304 	orr.w	r3, r3, #4
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
 8006988:	4b73      	ldr	r3, [pc, #460]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 800698a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698c:	4a72      	ldr	r2, [pc, #456]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	6713      	str	r3, [r2, #112]	; 0x70
 8006994:	e00b      	b.n	80069ae <HAL_RCC_OscConfig+0x5a2>
 8006996:	4b70      	ldr	r3, [pc, #448]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a6f      	ldr	r2, [pc, #444]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	4b6d      	ldr	r3, [pc, #436]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a6c      	ldr	r2, [pc, #432]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 80069a8:	f023 0304 	bic.w	r3, r3, #4
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d015      	beq.n	80069e2 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b6:	f7fe faed 	bl	8004f94 <HAL_GetTick>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069bc:	e00a      	b.n	80069d4 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069be:	f7fe fae9 	bl	8004f94 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e122      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069d4:	4b60      	ldr	r3, [pc, #384]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0ee      	beq.n	80069be <HAL_RCC_OscConfig+0x5b2>
 80069e0:	e014      	b.n	8006a0c <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e2:	f7fe fad7 	bl	8004f94 <HAL_GetTick>
 80069e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069e8:	e00a      	b.n	8006a00 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ea:	f7fe fad3 	bl	8004f94 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e10c      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a00:	4b55      	ldr	r3, [pc, #340]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1ee      	bne.n	80069ea <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8101 	beq.w	8006c18 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a16:	4b50      	ldr	r3, [pc, #320]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a1e:	2b18      	cmp	r3, #24
 8006a20:	f000 80bc 	beq.w	8006b9c <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	f040 809d 	bne.w	8006b68 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2e:	4b4a      	ldr	r3, [pc, #296]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a49      	ldr	r2, [pc, #292]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3a:	f7fe faab 	bl	8004f94 <HAL_GetTick>
 8006a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a40:	e008      	b.n	8006a54 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a42:	f7fe faa7 	bl	8004f94 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e0e2      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a54:	4b40      	ldr	r3, [pc, #256]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1f0      	bne.n	8006a42 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a60:	4b3d      	ldr	r3, [pc, #244]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a64:	4b3e      	ldr	r3, [pc, #248]	; (8006b60 <HAL_RCC_OscConfig+0x754>)
 8006a66:	4013      	ands	r3, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a70:	0112      	lsls	r2, r2, #4
 8006a72:	430a      	orrs	r2, r1
 8006a74:	4938      	ldr	r1, [pc, #224]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	628b      	str	r3, [r1, #40]	; 0x28
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	025b      	lsls	r3, r3, #9
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	3b01      	subs	r3, #1
 8006a96:	041b      	lsls	r3, r3, #16
 8006a98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006aaa:	492b      	ldr	r1, [pc, #172]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006ab0:	4b29      	ldr	r3, [pc, #164]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	4a28      	ldr	r2, [pc, #160]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006abc:	4b26      	ldr	r3, [pc, #152]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac0:	4b28      	ldr	r3, [pc, #160]	; (8006b64 <HAL_RCC_OscConfig+0x758>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ac8:	00d2      	lsls	r2, r2, #3
 8006aca:	4923      	ldr	r1, [pc, #140]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ad0:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f023 020c 	bic.w	r2, r3, #12
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	491e      	ldr	r1, [pc, #120]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	f023 0202 	bic.w	r2, r3, #2
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aee:	491a      	ldr	r1, [pc, #104]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006af4:	4b18      	ldr	r3, [pc, #96]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b00:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a14      	ldr	r2, [pc, #80]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b0c:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	4a11      	ldr	r2, [pc, #68]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b18:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	4a0e      	ldr	r2, [pc, #56]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b24:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a0b      	ldr	r2, [pc, #44]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fe fa30 	bl	8004f94 <HAL_GetTick>
 8006b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b38:	f7fe fa2c 	bl	8004f94 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e067      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b4a:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <HAL_RCC_OscConfig+0x74c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f0      	beq.n	8006b38 <HAL_RCC_OscConfig+0x72c>
 8006b56:	e05f      	b.n	8006c18 <HAL_RCC_OscConfig+0x80c>
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	58024800 	.word	0x58024800
 8006b60:	fffffc0c 	.word	0xfffffc0c
 8006b64:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b68:	4b2e      	ldr	r3, [pc, #184]	; (8006c24 <HAL_RCC_OscConfig+0x818>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	; (8006c24 <HAL_RCC_OscConfig+0x818>)
 8006b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fe fa0e 	bl	8004f94 <HAL_GetTick>
 8006b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b7c:	f7fe fa0a 	bl	8004f94 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e045      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b8e:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <HAL_RCC_OscConfig+0x818>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0x770>
 8006b9a:	e03d      	b.n	8006c18 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b9c:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <HAL_RCC_OscConfig+0x818>)
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ba2:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <HAL_RCC_OscConfig+0x818>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d031      	beq.n	8006c14 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f003 0203 	and.w	r2, r3, #3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d12a      	bne.n	8006c14 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d122      	bne.n	8006c14 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d11a      	bne.n	8006c14 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	0a5b      	lsrs	r3, r3, #9
 8006be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d111      	bne.n	8006c14 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	0c1b      	lsrs	r3, r3, #16
 8006bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d108      	bne.n	8006c14 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	0e1b      	lsrs	r3, r3, #24
 8006c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d001      	beq.n	8006c18 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3730      	adds	r7, #48	; 0x30
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	58024400 	.word	0x58024400

08006c28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e19c      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c3c:	4b8a      	ldr	r3, [pc, #552]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d910      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4a:	4b87      	ldr	r3, [pc, #540]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 020f 	bic.w	r2, r3, #15
 8006c52:	4985      	ldr	r1, [pc, #532]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b83      	ldr	r3, [pc, #524]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e184      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	4b7b      	ldr	r3, [pc, #492]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d908      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c88:	4b78      	ldr	r3, [pc, #480]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	4975      	ldr	r1, [pc, #468]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	4b70      	ldr	r3, [pc, #448]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d908      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cb6:	4b6d      	ldr	r3, [pc, #436]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	496a      	ldr	r1, [pc, #424]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	4b64      	ldr	r3, [pc, #400]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d908      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ce4:	4b61      	ldr	r3, [pc, #388]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	495e      	ldr	r1, [pc, #376]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69da      	ldr	r2, [r3, #28]
 8006d06:	4b59      	ldr	r3, [pc, #356]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d908      	bls.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d12:	4b56      	ldr	r3, [pc, #344]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4953      	ldr	r1, [pc, #332]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	4b4d      	ldr	r3, [pc, #308]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d908      	bls.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b4a      	ldr	r3, [pc, #296]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f023 020f 	bic.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4947      	ldr	r1, [pc, #284]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d055      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d5e:	4b43      	ldr	r3, [pc, #268]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4940      	ldr	r1, [pc, #256]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d78:	4b3c      	ldr	r3, [pc, #240]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d121      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0f6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d90:	4b36      	ldr	r3, [pc, #216]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0ea      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006da8:	4b30      	ldr	r3, [pc, #192]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0de      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db8:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0d6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dc8:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f023 0207 	bic.w	r2, r3, #7
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4925      	ldr	r1, [pc, #148]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dda:	f7fe f8db 	bl	8004f94 <HAL_GetTick>
 8006dde:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de0:	e00a      	b.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de2:	f7fe f8d7 	bl	8004f94 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e0be      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df8:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d1eb      	bne.n	8006de2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d208      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	490e      	ldr	r1, [pc, #56]	; (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d214      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 020f 	bic.w	r2, r3, #15
 8006e4e:	4906      	ldr	r1, [pc, #24]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e086      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
 8006e68:	52002000 	.word	0x52002000
 8006e6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	4b3f      	ldr	r3, [pc, #252]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d208      	bcs.n	8006e9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e8c:	4b3c      	ldr	r3, [pc, #240]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	4939      	ldr	r1, [pc, #228]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d010      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	4b34      	ldr	r3, [pc, #208]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d208      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eba:	4b31      	ldr	r3, [pc, #196]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	492e      	ldr	r1, [pc, #184]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d208      	bcs.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	4922      	ldr	r1, [pc, #136]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d208      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4917      	ldr	r1, [pc, #92]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f28:	f000 f834 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	4912      	ldr	r1, [pc, #72]	; (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	4a0d      	ldr	r2, [pc, #52]	; (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f50:	5cd3      	ldrb	r3, [r2, r3]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	4a0a      	ldr	r2, [pc, #40]	; (8006f88 <HAL_RCC_ClockConfig+0x360>)
 8006f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_RCC_ClockConfig+0x364>)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f66:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <HAL_RCC_ClockConfig+0x368>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd fe76 	bl	8004c5c <HAL_InitTick>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	58024400 	.word	0x58024400
 8006f84:	0800919c 	.word	0x0800919c
 8006f88:	24000014 	.word	0x24000014
 8006f8c:	24000010 	.word	0x24000010
 8006f90:	24000018 	.word	0x24000018

08006f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	; 0x24
 8006f98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f9a:	4bb3      	ldr	r3, [pc, #716]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fa2:	2b18      	cmp	r3, #24
 8006fa4:	f200 8155 	bhi.w	8007252 <HAL_RCC_GetSysClockFreq+0x2be>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08007015 	.word	0x08007015
 8006fb4:	08007253 	.word	0x08007253
 8006fb8:	08007253 	.word	0x08007253
 8006fbc:	08007253 	.word	0x08007253
 8006fc0:	08007253 	.word	0x08007253
 8006fc4:	08007253 	.word	0x08007253
 8006fc8:	08007253 	.word	0x08007253
 8006fcc:	08007253 	.word	0x08007253
 8006fd0:	0800703b 	.word	0x0800703b
 8006fd4:	08007253 	.word	0x08007253
 8006fd8:	08007253 	.word	0x08007253
 8006fdc:	08007253 	.word	0x08007253
 8006fe0:	08007253 	.word	0x08007253
 8006fe4:	08007253 	.word	0x08007253
 8006fe8:	08007253 	.word	0x08007253
 8006fec:	08007253 	.word	0x08007253
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	08007253 	.word	0x08007253
 8006ff8:	08007253 	.word	0x08007253
 8006ffc:	08007253 	.word	0x08007253
 8007000:	08007253 	.word	0x08007253
 8007004:	08007253 	.word	0x08007253
 8007008:	08007253 	.word	0x08007253
 800700c:	08007253 	.word	0x08007253
 8007010:	08007047 	.word	0x08007047
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007014:	4b94      	ldr	r3, [pc, #592]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007020:	4b91      	ldr	r3, [pc, #580]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a90      	ldr	r2, [pc, #576]	; (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007032:	e111      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007034:	4b8d      	ldr	r3, [pc, #564]	; (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007036:	61bb      	str	r3, [r7, #24]
    break;
 8007038:	e10e      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800703a:	4b8d      	ldr	r3, [pc, #564]	; (8007270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800703c:	61bb      	str	r3, [r7, #24]
    break;
 800703e:	e10b      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007040:	4b8c      	ldr	r3, [pc, #560]	; (8007274 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007042:	61bb      	str	r3, [r7, #24]
    break;
 8007044:	e108      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007046:	4b88      	ldr	r3, [pc, #544]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007050:	4b85      	ldr	r3, [pc, #532]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800705a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800705c:	4b82      	ldr	r3, [pc, #520]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007066:	4b80      	ldr	r3, [pc, #512]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80e1 	beq.w	800724c <HAL_RCC_GetSysClockFreq+0x2b8>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b02      	cmp	r3, #2
 800708e:	f000 8083 	beq.w	8007198 <HAL_RCC_GetSysClockFreq+0x204>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b02      	cmp	r3, #2
 8007096:	f200 80a1 	bhi.w	80071dc <HAL_RCC_GetSysClockFreq+0x248>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0x114>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d056      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x1c0>
 80070a6:	e099      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a8:	4b6f      	ldr	r3, [pc, #444]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02d      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070b4:	4b6c      	ldr	r3, [pc, #432]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	08db      	lsrs	r3, r3, #3
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	4a6b      	ldr	r2, [pc, #428]	; (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
 80070c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b62      	ldr	r3, [pc, #392]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800710e:	e087      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800727c <HAL_RCC_GetSysClockFreq+0x2e8>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b51      	ldr	r3, [pc, #324]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a02 	vldr	s12, [r7, #8]
 8007136:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007152:	e065      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007280 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b40      	ldr	r3, [pc, #256]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a02 	vldr	s12, [r7, #8]
 800717a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007196:	e043      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007284 <HAL_RCC_GetSysClockFreq+0x2f0>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b2f      	ldr	r3, [pc, #188]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80071be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071da:	e021      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007280 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ee:	4b1e      	ldr	r3, [pc, #120]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007202:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800721e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007220:	4b11      	ldr	r3, [pc, #68]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	0a5b      	lsrs	r3, r3, #9
 8007226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722a:	3301      	adds	r3, #1
 800722c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007238:	edd7 6a07 	vldr	s13, [r7, #28]
 800723c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007244:	ee17 3a90 	vmov	r3, s15
 8007248:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800724a:	e005      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
    break;
 8007250:	e002      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007252:	4b07      	ldr	r3, [pc, #28]	; (8007270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007254:	61bb      	str	r3, [r7, #24]
    break;
 8007256:	bf00      	nop
  }

  return sysclockfreq;
 8007258:	69bb      	ldr	r3, [r7, #24]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3724      	adds	r7, #36	; 0x24
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	58024400 	.word	0x58024400
 800726c:	03d09000 	.word	0x03d09000
 8007270:	003d0900 	.word	0x003d0900
 8007274:	007a1200 	.word	0x007a1200
 8007278:	46000000 	.word	0x46000000
 800727c:	4c742400 	.word	0x4c742400
 8007280:	4a742400 	.word	0x4a742400
 8007284:	4af42400 	.word	0x4af42400

08007288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800728e:	f7ff fe81 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8007292:	4602      	mov	r2, r0
 8007294:	4b10      	ldr	r3, [pc, #64]	; (80072d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	490f      	ldr	r1, [pc, #60]	; (80072dc <HAL_RCC_GetHCLKFreq+0x54>)
 80072a0:	5ccb      	ldrb	r3, [r1, r3]
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072ac:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	4a09      	ldr	r2, [pc, #36]	; (80072dc <HAL_RCC_GetHCLKFreq+0x54>)
 80072b6:	5cd3      	ldrb	r3, [r2, r3]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	fa22 f303 	lsr.w	r3, r2, r3
 80072c2:	4a07      	ldr	r2, [pc, #28]	; (80072e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072c6:	4a07      	ldr	r2, [pc, #28]	; (80072e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072cc:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ce:	681b      	ldr	r3, [r3, #0]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	58024400 	.word	0x58024400
 80072dc:	0800919c 	.word	0x0800919c
 80072e0:	24000014 	.word	0x24000014
 80072e4:	24000010 	.word	0x24000010

080072e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072ec:	f7ff ffcc 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 80072f0:	4602      	mov	r2, r0
 80072f2:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCC_GetPCLK1Freq+0x24>)
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	091b      	lsrs	r3, r3, #4
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	4904      	ldr	r1, [pc, #16]	; (8007310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072fe:	5ccb      	ldrb	r3, [r1, r3]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007308:	4618      	mov	r0, r3
 800730a:	bd80      	pop	{r7, pc}
 800730c:	58024400 	.word	0x58024400
 8007310:	0800919c 	.word	0x0800919c

08007314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	223f      	movs	r2, #63	; 0x3f
 8007322:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007324:	4b1a      	ldr	r3, [pc, #104]	; (8007390 <HAL_RCC_GetClockConfig+0x7c>)
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f003 0207 	and.w	r2, r3, #7
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007330:	4b17      	ldr	r3, [pc, #92]	; (8007390 <HAL_RCC_GetClockConfig+0x7c>)
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800733c:	4b14      	ldr	r3, [pc, #80]	; (8007390 <HAL_RCC_GetClockConfig+0x7c>)
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007348:	4b11      	ldr	r3, [pc, #68]	; (8007390 <HAL_RCC_GetClockConfig+0x7c>)
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <HAL_RCC_GetClockConfig+0x7c>)
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <HAL_RCC_GetClockConfig+0x7c>)
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800736c:	4b08      	ldr	r3, [pc, #32]	; (8007390 <HAL_RCC_GetClockConfig+0x7c>)
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <HAL_RCC_GetClockConfig+0x80>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 020f 	and.w	r2, r3, #15
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	58024400 	.word	0x58024400
 8007394:	52002000 	.word	0x52002000

08007398 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073a0:	2300      	movs	r3, #0
 80073a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073a4:	2300      	movs	r3, #0
 80073a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d03f      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073bc:	d02a      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073c2:	d824      	bhi.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c8:	d018      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ce:	d81e      	bhi.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d8:	d007      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073da:	e018      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073dc:	4ba3      	ldr	r3, [pc, #652]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	4aa2      	ldr	r2, [pc, #648]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073e8:	e015      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3304      	adds	r3, #4
 80073ee:	2102      	movs	r1, #2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 ff17 	bl	8008224 <RCCEx_PLL2_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073fa:	e00c      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3324      	adds	r3, #36	; 0x24
 8007400:	2102      	movs	r1, #2
 8007402:	4618      	mov	r0, r3
 8007404:	f000 ffc0 	bl	8008388 <RCCEx_PLL3_Config>
 8007408:	4603      	mov	r3, r0
 800740a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800740c:	e003      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	75fb      	strb	r3, [r7, #23]
      break;
 8007412:	e000      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d109      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800741c:	4b93      	ldr	r3, [pc, #588]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800741e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007428:	4990      	ldr	r1, [pc, #576]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800742a:	4313      	orrs	r3, r2
 800742c:	650b      	str	r3, [r1, #80]	; 0x50
 800742e:	e001      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d03d      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	2b04      	cmp	r3, #4
 8007446:	d826      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007448:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007465 	.word	0x08007465
 8007454:	08007473 	.word	0x08007473
 8007458:	08007485 	.word	0x08007485
 800745c:	0800749d 	.word	0x0800749d
 8007460:	0800749d 	.word	0x0800749d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007464:	4b81      	ldr	r3, [pc, #516]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	4a80      	ldr	r2, [pc, #512]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800746a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800746e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007470:	e015      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3304      	adds	r3, #4
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fed3 	bl	8008224 <RCCEx_PLL2_Config>
 800747e:	4603      	mov	r3, r0
 8007480:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007482:	e00c      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3324      	adds	r3, #36	; 0x24
 8007488:	2100      	movs	r1, #0
 800748a:	4618      	mov	r0, r3
 800748c:	f000 ff7c 	bl	8008388 <RCCEx_PLL3_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007494:	e003      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	75fb      	strb	r3, [r7, #23]
      break;
 800749a:	e000      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800749c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074a4:	4b71      	ldr	r3, [pc, #452]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a8:	f023 0207 	bic.w	r2, r3, #7
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b0:	496e      	ldr	r1, [pc, #440]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	650b      	str	r3, [r1, #80]	; 0x50
 80074b6:	e001      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d042      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d0:	d02b      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80074d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d6:	d825      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074d8:	2bc0      	cmp	r3, #192	; 0xc0
 80074da:	d028      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074dc:	2bc0      	cmp	r3, #192	; 0xc0
 80074de:	d821      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074e0:	2b80      	cmp	r3, #128	; 0x80
 80074e2:	d016      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80074e4:	2b80      	cmp	r3, #128	; 0x80
 80074e6:	d81d      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80074ec:	2b40      	cmp	r3, #64	; 0x40
 80074ee:	d007      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80074f0:	e018      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f2:	4b5e      	ldr	r3, [pc, #376]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	4a5d      	ldr	r2, [pc, #372]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074fe:	e017      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fe8c 	bl	8008224 <RCCEx_PLL2_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007510:	e00e      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3324      	adds	r3, #36	; 0x24
 8007516:	2100      	movs	r1, #0
 8007518:	4618      	mov	r0, r3
 800751a:	f000 ff35 	bl	8008388 <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007522:	e005      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	75fb      	strb	r3, [r7, #23]
      break;
 8007528:	e002      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800752a:	bf00      	nop
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800752e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007536:	4b4d      	ldr	r3, [pc, #308]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007542:	494a      	ldr	r1, [pc, #296]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007544:	4313      	orrs	r3, r2
 8007546:	650b      	str	r3, [r1, #80]	; 0x50
 8007548:	e001      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007556:	2b00      	cmp	r3, #0
 8007558:	d049      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007564:	d030      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800756a:	d82a      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800756c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007570:	d02c      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007572:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007576:	d824      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800757c:	d018      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800757e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007582:	d81e      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800758c:	d007      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800758e:	e018      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007590:	4b36      	ldr	r3, [pc, #216]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	4a35      	ldr	r2, [pc, #212]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800759c:	e017      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3304      	adds	r3, #4
 80075a2:	2100      	movs	r1, #0
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fe3d 	bl	8008224 <RCCEx_PLL2_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075ae:	e00e      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3324      	adds	r3, #36	; 0x24
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fee6 	bl	8008388 <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075c0:	e005      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
      break;
 80075c6:	e002      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075c8:	bf00      	nop
 80075ca:	e000      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075d4:	4b25      	ldr	r3, [pc, #148]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075e2:	4922      	ldr	r1, [pc, #136]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	658b      	str	r3, [r1, #88]	; 0x58
 80075e8:	e001      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d04b      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007604:	d030      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800760a:	d82a      	bhi.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800760c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007610:	d02e      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007612:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007616:	d824      	bhi.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007618:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800761c:	d018      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800761e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007622:	d81e      	bhi.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800762c:	d007      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800762e:	e018      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007630:	4b0e      	ldr	r3, [pc, #56]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	4a0d      	ldr	r2, [pc, #52]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800763a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800763c:	e019      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3304      	adds	r3, #4
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fded 	bl	8008224 <RCCEx_PLL2_Config>
 800764a:	4603      	mov	r3, r0
 800764c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800764e:	e010      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3324      	adds	r3, #36	; 0x24
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fe96 	bl	8008388 <RCCEx_PLL3_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007660:	e007      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	75fb      	strb	r3, [r7, #23]
      break;
 8007666:	e004      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007668:	bf00      	nop
 800766a:	e002      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800766c:	58024400 	.word	0x58024400
      break;
 8007670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007678:	4b99      	ldr	r3, [pc, #612]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800767a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007686:	4996      	ldr	r1, [pc, #600]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007688:	4313      	orrs	r3, r2
 800768a:	658b      	str	r3, [r1, #88]	; 0x58
 800768c:	e001      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d032      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a2:	2b30      	cmp	r3, #48	; 0x30
 80076a4:	d01c      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80076a6:	2b30      	cmp	r3, #48	; 0x30
 80076a8:	d817      	bhi.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d00c      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d813      	bhi.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d016      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80076b6:	2b10      	cmp	r3, #16
 80076b8:	d10f      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ba:	4b89      	ldr	r3, [pc, #548]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	4a88      	ldr	r2, [pc, #544]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076c6:	e00e      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3304      	adds	r3, #4
 80076cc:	2102      	movs	r1, #2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fda8 	bl	8008224 <RCCEx_PLL2_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076d8:	e005      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]
      break;
 80076de:	e002      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80076e0:	bf00      	nop
 80076e2:	e000      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80076e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076ec:	4b7c      	ldr	r3, [pc, #496]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f8:	4979      	ldr	r1, [pc, #484]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80076fe:	e001      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d047      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007718:	d030      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800771a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800771e:	d82a      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007724:	d02c      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800772a:	d824      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800772c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007730:	d018      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007736:	d81e      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800773c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007740:	d007      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007742:	e018      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007744:	4b66      	ldr	r3, [pc, #408]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4a65      	ldr	r2, [pc, #404]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800774a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800774e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007750:	e017      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3304      	adds	r3, #4
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fd63 	bl	8008224 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007762:	e00e      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3324      	adds	r3, #36	; 0x24
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fe0c 	bl	8008388 <RCCEx_PLL3_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007774:	e005      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	75fb      	strb	r3, [r7, #23]
      break;
 800777a:	e002      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800777c:	bf00      	nop
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007788:	4b55      	ldr	r3, [pc, #340]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007794:	4952      	ldr	r1, [pc, #328]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007796:	4313      	orrs	r3, r2
 8007798:	650b      	str	r3, [r1, #80]	; 0x50
 800779a:	e001      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d049      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077b4:	d02e      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80077b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ba:	d828      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077c0:	d02a      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80077c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077c6:	d822      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077cc:	d026      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80077ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077d2:	d81c      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d8:	d010      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80077da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077de:	d816      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01d      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80077e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e8:	d111      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3304      	adds	r3, #4
 80077ee:	2101      	movs	r1, #1
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fd17 	bl	8008224 <RCCEx_PLL2_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077fa:	e012      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3324      	adds	r3, #36	; 0x24
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fdc0 	bl	8008388 <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800780c:	e009      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	75fb      	strb	r3, [r7, #23]
      break;
 8007812:	e006      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007814:	bf00      	nop
 8007816:	e004      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007818:	bf00      	nop
 800781a:	e002      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800781c:	bf00      	nop
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007828:	4b2d      	ldr	r3, [pc, #180]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007834:	492a      	ldr	r1, [pc, #168]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007836:	4313      	orrs	r3, r2
 8007838:	650b      	str	r3, [r1, #80]	; 0x50
 800783a:	e001      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d04d      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007856:	d02e      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800785c:	d828      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007862:	d02a      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007868:	d822      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800786a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800786e:	d026      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007870:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007874:	d81c      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787a:	d010      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800787c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007880:	d816      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01d      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800788a:	d111      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3304      	adds	r3, #4
 8007890:	2101      	movs	r1, #1
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fcc6 	bl	8008224 <RCCEx_PLL2_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800789c:	e012      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3324      	adds	r3, #36	; 0x24
 80078a2:	2101      	movs	r1, #1
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fd6f 	bl	8008388 <RCCEx_PLL3_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078ae:	e009      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
      break;
 80078b4:	e006      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078b6:	bf00      	nop
 80078b8:	e004      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10c      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078ca:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078d8:	4901      	ldr	r1, [pc, #4]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	658b      	str	r3, [r1, #88]	; 0x58
 80078de:	e003      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80078e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02f      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078fc:	d00e      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80078fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007902:	d814      	bhi.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d015      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800790c:	d10f      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800790e:	4baf      	ldr	r3, [pc, #700]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	4aae      	ldr	r2, [pc, #696]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007918:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800791a:	e00c      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	2101      	movs	r1, #1
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fc7e 	bl	8008224 <RCCEx_PLL2_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800792c:	e003      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	75fb      	strb	r3, [r7, #23]
      break;
 8007932:	e000      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d109      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800793c:	4ba3      	ldr	r3, [pc, #652]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007948:	49a0      	ldr	r1, [pc, #640]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800794a:	4313      	orrs	r3, r2
 800794c:	650b      	str	r3, [r1, #80]	; 0x50
 800794e:	e001      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d032      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007964:	2b03      	cmp	r3, #3
 8007966:	d81b      	bhi.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007968:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079a7 	.word	0x080079a7
 8007974:	08007981 	.word	0x08007981
 8007978:	0800798f 	.word	0x0800798f
 800797c:	080079a7 	.word	0x080079a7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007980:	4b92      	ldr	r3, [pc, #584]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	4a91      	ldr	r2, [pc, #580]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800798c:	e00c      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	2102      	movs	r1, #2
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fc45 	bl	8008224 <RCCEx_PLL2_Config>
 800799a:	4603      	mov	r3, r0
 800799c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800799e:	e003      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	75fb      	strb	r3, [r7, #23]
      break;
 80079a4:	e000      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80079a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079ae:	4b87      	ldr	r3, [pc, #540]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b2:	f023 0203 	bic.w	r2, r3, #3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ba:	4984      	ldr	r1, [pc, #528]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079c0:	e001      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8086 	beq.w	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079d4:	4b7e      	ldr	r3, [pc, #504]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a7d      	ldr	r2, [pc, #500]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80079da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079e0:	f7fd fad8 	bl	8004f94 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079e6:	e009      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e8:	f7fd fad4 	bl	8004f94 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b64      	cmp	r3, #100	; 0x64
 80079f4:	d902      	bls.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	75fb      	strb	r3, [r7, #23]
        break;
 80079fa:	e005      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079fc:	4b74      	ldr	r3, [pc, #464]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0ef      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d166      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a0e:	4b6f      	ldr	r3, [pc, #444]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a18:	4053      	eors	r3, r2
 8007a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d013      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a22:	4b6a      	ldr	r3, [pc, #424]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a2c:	4b67      	ldr	r3, [pc, #412]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a30:	4a66      	ldr	r2, [pc, #408]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a38:	4b64      	ldr	r3, [pc, #400]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3c:	4a63      	ldr	r2, [pc, #396]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a44:	4a61      	ldr	r2, [pc, #388]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a54:	d115      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a56:	f7fd fa9d 	bl	8004f94 <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a5c:	e00b      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a5e:	f7fd fa99 	bl	8004f94 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d902      	bls.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	75fb      	strb	r3, [r7, #23]
            break;
 8007a74:	e005      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a76:	4b55      	ldr	r3, [pc, #340]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0ed      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d126      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a96:	d10d      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007a98:	4b4c      	ldr	r3, [pc, #304]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aa6:	0919      	lsrs	r1, r3, #4
 8007aa8:	4b4a      	ldr	r3, [pc, #296]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007aaa:	400b      	ands	r3, r1
 8007aac:	4947      	ldr	r1, [pc, #284]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	610b      	str	r3, [r1, #16]
 8007ab2:	e005      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007ab4:	4b45      	ldr	r3, [pc, #276]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	4a44      	ldr	r2, [pc, #272]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007abe:	6113      	str	r3, [r2, #16]
 8007ac0:	4b42      	ldr	r3, [pc, #264]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ace:	493f      	ldr	r1, [pc, #252]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	670b      	str	r3, [r1, #112]	; 0x70
 8007ad4:	e004      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	75bb      	strb	r3, [r7, #22]
 8007ada:	e001      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 8085 	beq.w	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007af2:	2b28      	cmp	r3, #40	; 0x28
 8007af4:	d866      	bhi.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007af6:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007bd9 	.word	0x08007bd9
 8007b00:	08007bc5 	.word	0x08007bc5
 8007b04:	08007bc5 	.word	0x08007bc5
 8007b08:	08007bc5 	.word	0x08007bc5
 8007b0c:	08007bc5 	.word	0x08007bc5
 8007b10:	08007bc5 	.word	0x08007bc5
 8007b14:	08007bc5 	.word	0x08007bc5
 8007b18:	08007bc5 	.word	0x08007bc5
 8007b1c:	08007ba1 	.word	0x08007ba1
 8007b20:	08007bc5 	.word	0x08007bc5
 8007b24:	08007bc5 	.word	0x08007bc5
 8007b28:	08007bc5 	.word	0x08007bc5
 8007b2c:	08007bc5 	.word	0x08007bc5
 8007b30:	08007bc5 	.word	0x08007bc5
 8007b34:	08007bc5 	.word	0x08007bc5
 8007b38:	08007bc5 	.word	0x08007bc5
 8007b3c:	08007bb3 	.word	0x08007bb3
 8007b40:	08007bc5 	.word	0x08007bc5
 8007b44:	08007bc5 	.word	0x08007bc5
 8007b48:	08007bc5 	.word	0x08007bc5
 8007b4c:	08007bc5 	.word	0x08007bc5
 8007b50:	08007bc5 	.word	0x08007bc5
 8007b54:	08007bc5 	.word	0x08007bc5
 8007b58:	08007bc5 	.word	0x08007bc5
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bc5 	.word	0x08007bc5
 8007b64:	08007bc5 	.word	0x08007bc5
 8007b68:	08007bc5 	.word	0x08007bc5
 8007b6c:	08007bc5 	.word	0x08007bc5
 8007b70:	08007bc5 	.word	0x08007bc5
 8007b74:	08007bc5 	.word	0x08007bc5
 8007b78:	08007bc5 	.word	0x08007bc5
 8007b7c:	08007bd9 	.word	0x08007bd9
 8007b80:	08007bc5 	.word	0x08007bc5
 8007b84:	08007bc5 	.word	0x08007bc5
 8007b88:	08007bc5 	.word	0x08007bc5
 8007b8c:	08007bc5 	.word	0x08007bc5
 8007b90:	08007bc5 	.word	0x08007bc5
 8007b94:	08007bc5 	.word	0x08007bc5
 8007b98:	08007bc5 	.word	0x08007bc5
 8007b9c:	08007bd9 	.word	0x08007bd9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fb3c 	bl	8008224 <RCCEx_PLL2_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bb0:	e013      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3324      	adds	r3, #36	; 0x24
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fbe5 	bl	8008388 <RCCEx_PLL3_Config>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bc2:	e00a      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc8:	e007      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007bca:	bf00      	nop
 8007bcc:	58024400 	.word	0x58024400
 8007bd0:	58024800 	.word	0x58024800
 8007bd4:	00ffffcf 	.word	0x00ffffcf
      break;
 8007bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007be0:	4b96      	ldr	r3, [pc, #600]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bec:	4993      	ldr	r1, [pc, #588]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	654b      	str	r3, [r1, #84]	; 0x54
 8007bf2:	e001      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d038      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	d821      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c57 	.word	0x08007c57
 8007c18:	08007c2d 	.word	0x08007c2d
 8007c1c:	08007c3f 	.word	0x08007c3f
 8007c20:	08007c57 	.word	0x08007c57
 8007c24:	08007c57 	.word	0x08007c57
 8007c28:	08007c57 	.word	0x08007c57
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	2101      	movs	r1, #1
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 faf6 	bl	8008224 <RCCEx_PLL2_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c3c:	e00c      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3324      	adds	r3, #36	; 0x24
 8007c42:	2101      	movs	r1, #1
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fb9f 	bl	8008388 <RCCEx_PLL3_Config>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c4e:	e003      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	75fb      	strb	r3, [r7, #23]
      break;
 8007c54:	e000      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c5e:	4b77      	ldr	r3, [pc, #476]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c62:	f023 0207 	bic.w	r2, r3, #7
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c6a:	4974      	ldr	r1, [pc, #464]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	654b      	str	r3, [r1, #84]	; 0x54
 8007c70:	e001      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d03a      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c88:	2b05      	cmp	r3, #5
 8007c8a:	d821      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007cd7 	.word	0x08007cd7
 8007c98:	08007cad 	.word	0x08007cad
 8007c9c:	08007cbf 	.word	0x08007cbf
 8007ca0:	08007cd7 	.word	0x08007cd7
 8007ca4:	08007cd7 	.word	0x08007cd7
 8007ca8:	08007cd7 	.word	0x08007cd7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fab6 	bl	8008224 <RCCEx_PLL2_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cbc:	e00c      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3324      	adds	r3, #36	; 0x24
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fb5f 	bl	8008388 <RCCEx_PLL3_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cce:	e003      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	e000      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cde:	4b57      	ldr	r3, [pc, #348]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce2:	f023 0207 	bic.w	r2, r3, #7
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cec:	4953      	ldr	r1, [pc, #332]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	658b      	str	r3, [r1, #88]	; 0x58
 8007cf2:	e001      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d04b      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d0e:	d02e      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d14:	d828      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1a:	d02a      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d20:	d822      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d26:	d026      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007d28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d2c:	d81c      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d32:	d010      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d38:	d816      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d01d      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d42:	d111      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fa6a 	bl	8008224 <RCCEx_PLL2_Config>
 8007d50:	4603      	mov	r3, r0
 8007d52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d54:	e012      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3324      	adds	r3, #36	; 0x24
 8007d5a:	2102      	movs	r1, #2
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fb13 	bl	8008388 <RCCEx_PLL3_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d66:	e009      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6c:	e006      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d6e:	bf00      	nop
 8007d70:	e004      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d72:	bf00      	nop
 8007d74:	e002      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d76:	bf00      	nop
 8007d78:	e000      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d82:	4b2e      	ldr	r3, [pc, #184]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d90:	492a      	ldr	r1, [pc, #168]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	654b      	str	r3, [r1, #84]	; 0x54
 8007d96:	e001      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d04d      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007db2:	d02e      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007db4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007db8:	d828      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dbe:	d02a      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc4:	d822      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dca:	d026      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd0:	d81c      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd6:	d010      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ddc:	d816      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01d      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de6:	d111      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3304      	adds	r3, #4
 8007dec:	2100      	movs	r1, #0
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 fa18 	bl	8008224 <RCCEx_PLL2_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007df8:	e012      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3324      	adds	r3, #36	; 0x24
 8007dfe:	2102      	movs	r1, #2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fac1 	bl	8008388 <RCCEx_PLL3_Config>
 8007e06:	4603      	mov	r3, r0
 8007e08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e0a:	e009      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e10:	e006      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e12:	bf00      	nop
 8007e14:	e004      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e16:	bf00      	nop
 8007e18:	e002      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10c      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e26:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e34:	4901      	ldr	r1, [pc, #4]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	658b      	str	r3, [r1, #88]	; 0x58
 8007e3a:	e003      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d04b      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e5a:	d02e      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007e5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e60:	d828      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e66:	d02a      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e6c:	d822      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e72:	d026      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007e74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e78:	d81c      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e7e:	d010      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e84:	d816      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01d      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8e:	d111      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3304      	adds	r3, #4
 8007e94:	2100      	movs	r1, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f9c4 	bl	8008224 <RCCEx_PLL2_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ea0:	e012      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3324      	adds	r3, #36	; 0x24
 8007ea6:	2102      	movs	r1, #2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fa6d 	bl	8008388 <RCCEx_PLL3_Config>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007eb2:	e009      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb8:	e006      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007eba:	bf00      	nop
 8007ebc:	e004      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ebe:	bf00      	nop
 8007ec0:	e002      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ec2:	bf00      	nop
 8007ec4:	e000      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ece:	4b9d      	ldr	r3, [pc, #628]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007edc:	4999      	ldr	r1, [pc, #612]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ee2:	e001      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01a      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efe:	d10a      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3324      	adds	r3, #36	; 0x24
 8007f04:	2102      	movs	r1, #2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fa3e 	bl	8008388 <RCCEx_PLL3_Config>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f16:	4b8b      	ldr	r3, [pc, #556]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f24:	4987      	ldr	r1, [pc, #540]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0310 	and.w	r3, r3, #16
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01a      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f40:	d10a      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3324      	adds	r3, #36	; 0x24
 8007f46:	2102      	movs	r1, #2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fa1d 	bl	8008388 <RCCEx_PLL3_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f58:	4b7a      	ldr	r3, [pc, #488]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f66:	4977      	ldr	r1, [pc, #476]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d034      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f82:	d01d      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f88:	d817      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f92:	d009      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007f94:	e011      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f941 	bl	8008224 <RCCEx_PLL2_Config>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fa6:	e00c      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3324      	adds	r3, #36	; 0x24
 8007fac:	2102      	movs	r1, #2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f9ea 	bl	8008388 <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fb8:	e003      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007fbe:	e000      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fc8:	4b5e      	ldr	r3, [pc, #376]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fd6:	495b      	ldr	r1, [pc, #364]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	658b      	str	r3, [r1, #88]	; 0x58
 8007fdc:	e001      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d033      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ff8:	d01c      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007ffa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ffe:	d816      	bhi.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008004:	d003      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800800a:	d007      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800800c:	e00f      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800800e:	4b4d      	ldr	r3, [pc, #308]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	4a4c      	ldr	r2, [pc, #304]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008018:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800801a:	e00c      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3324      	adds	r3, #36	; 0x24
 8008020:	2101      	movs	r1, #1
 8008022:	4618      	mov	r0, r3
 8008024:	f000 f9b0 	bl	8008388 <RCCEx_PLL3_Config>
 8008028:	4603      	mov	r3, r0
 800802a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800802c:	e003      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	75fb      	strb	r3, [r7, #23]
      break;
 8008032:	e000      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800803c:	4b41      	ldr	r3, [pc, #260]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800803e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008040:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800804a:	493e      	ldr	r1, [pc, #248]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800804c:	4313      	orrs	r3, r2
 800804e:	654b      	str	r3, [r1, #84]	; 0x54
 8008050:	e001      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d029      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800806a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806e:	d007      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008070:	e00f      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008072:	4b34      	ldr	r3, [pc, #208]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008076:	4a33      	ldr	r2, [pc, #204]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800807c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800807e:	e00b      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3304      	adds	r3, #4
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f000 f8cc 	bl	8008224 <RCCEx_PLL2_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008090:	e002      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	75fb      	strb	r3, [r7, #23]
      break;
 8008096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d109      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800809e:	4b29      	ldr	r3, [pc, #164]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	4926      	ldr	r1, [pc, #152]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080b0:	e001      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3324      	adds	r3, #36	; 0x24
 80080c6:	2102      	movs	r1, #2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f95d 	bl	8008388 <RCCEx_PLL3_Config>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d033      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ec:	d017      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80080ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f2:	d811      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f8:	d013      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80080fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080fe:	d80b      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d010      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008108:	d106      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800810a:	4b0e      	ldr	r3, [pc, #56]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	4a0d      	ldr	r2, [pc, #52]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008114:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008116:	e007      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
      break;
 800811c:	e004      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800811e:	bf00      	nop
 8008120:	e002      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008122:	bf00      	nop
 8008124:	e000      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10c      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800812e:	4b05      	ldr	r3, [pc, #20]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008132:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800813a:	4902      	ldr	r1, [pc, #8]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800813c:	4313      	orrs	r3, r2
 800813e:	654b      	str	r3, [r1, #84]	; 0x54
 8008140:	e004      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008142:	bf00      	nop
 8008144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008158:	4b31      	ldr	r3, [pc, #196]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800815a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008164:	492e      	ldr	r1, [pc, #184]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008166:	4313      	orrs	r3, r2
 8008168:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008176:	4b2a      	ldr	r3, [pc, #168]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008184:	4926      	ldr	r1, [pc, #152]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008186:	4313      	orrs	r3, r2
 8008188:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d008      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008196:	4b22      	ldr	r3, [pc, #136]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081a2:	491f      	ldr	r1, [pc, #124]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00d      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081b4:	4b1a      	ldr	r3, [pc, #104]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	4a19      	ldr	r2, [pc, #100]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081be:	6113      	str	r3, [r2, #16]
 80081c0:	4b17      	ldr	r3, [pc, #92]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80081ca:	4915      	ldr	r1, [pc, #84]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	da08      	bge.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081d8:	4b11      	ldr	r3, [pc, #68]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e4:	490e      	ldr	r1, [pc, #56]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081f6:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008204:	4906      	ldr	r1, [pc, #24]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008206:	4313      	orrs	r3, r2
 8008208:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800820a:	7dbb      	ldrb	r3, [r7, #22]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e000      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	58024400 	.word	0x58024400

08008224 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008232:	4b53      	ldr	r3, [pc, #332]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	2b03      	cmp	r3, #3
 800823c:	d101      	bne.n	8008242 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e099      	b.n	8008376 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008242:	4b4f      	ldr	r3, [pc, #316]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a4e      	ldr	r2, [pc, #312]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008248:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800824c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800824e:	f7fc fea1 	bl	8004f94 <HAL_GetTick>
 8008252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008254:	e008      	b.n	8008268 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008256:	f7fc fe9d 	bl	8004f94 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	2b02      	cmp	r3, #2
 8008262:	d901      	bls.n	8008268 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e086      	b.n	8008376 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008268:	4b45      	ldr	r3, [pc, #276]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1f0      	bne.n	8008256 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008274:	4b42      	ldr	r3, [pc, #264]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008278:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	031b      	lsls	r3, r3, #12
 8008282:	493f      	ldr	r1, [pc, #252]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008284:	4313      	orrs	r3, r2
 8008286:	628b      	str	r3, [r1, #40]	; 0x28
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	3b01      	subs	r3, #1
 800828e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	3b01      	subs	r3, #1
 8008298:	025b      	lsls	r3, r3, #9
 800829a:	b29b      	uxth	r3, r3
 800829c:	431a      	orrs	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	041b      	lsls	r3, r3, #16
 80082a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082aa:	431a      	orrs	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	061b      	lsls	r3, r3, #24
 80082b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082b8:	4931      	ldr	r1, [pc, #196]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80082be:	4b30      	ldr	r3, [pc, #192]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	492d      	ldr	r1, [pc, #180]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80082d0:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	f023 0220 	bic.w	r2, r3, #32
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	4928      	ldr	r1, [pc, #160]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80082e2:	4b27      	ldr	r3, [pc, #156]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	4a26      	ldr	r2, [pc, #152]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082e8:	f023 0310 	bic.w	r3, r3, #16
 80082ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082ee:	4b24      	ldr	r3, [pc, #144]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f2:	4b24      	ldr	r3, [pc, #144]	; (8008384 <RCCEx_PLL2_Config+0x160>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	69d2      	ldr	r2, [r2, #28]
 80082fa:	00d2      	lsls	r2, r2, #3
 80082fc:	4920      	ldr	r1, [pc, #128]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008302:	4b1f      	ldr	r3, [pc, #124]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	4a1e      	ldr	r2, [pc, #120]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008308:	f043 0310 	orr.w	r3, r3, #16
 800830c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d106      	bne.n	8008322 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008314:	4b1a      	ldr	r3, [pc, #104]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	4a19      	ldr	r2, [pc, #100]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 800831a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800831e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008320:	e00f      	b.n	8008342 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d106      	bne.n	8008336 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008328:	4b15      	ldr	r3, [pc, #84]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	4a14      	ldr	r2, [pc, #80]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 800832e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008332:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008334:	e005      	b.n	8008342 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008336:	4b12      	ldr	r3, [pc, #72]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833a:	4a11      	ldr	r2, [pc, #68]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 800833c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008340:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008342:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a0e      	ldr	r2, [pc, #56]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 8008348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800834c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800834e:	f7fc fe21 	bl	8004f94 <HAL_GetTick>
 8008352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008354:	e008      	b.n	8008368 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008356:	f7fc fe1d 	bl	8004f94 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e006      	b.n	8008376 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008368:	4b05      	ldr	r3, [pc, #20]	; (8008380 <RCCEx_PLL2_Config+0x15c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0f0      	beq.n	8008356 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008374:	7bfb      	ldrb	r3, [r7, #15]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	58024400 	.word	0x58024400
 8008384:	ffff0007 	.word	0xffff0007

08008388 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008396:	4b53      	ldr	r3, [pc, #332]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d101      	bne.n	80083a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e099      	b.n	80084da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80083a6:	4b4f      	ldr	r3, [pc, #316]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a4e      	ldr	r2, [pc, #312]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b2:	f7fc fdef 	bl	8004f94 <HAL_GetTick>
 80083b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083b8:	e008      	b.n	80083cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083ba:	f7fc fdeb 	bl	8004f94 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e086      	b.n	80084da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083cc:	4b45      	ldr	r3, [pc, #276]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1f0      	bne.n	80083ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80083d8:	4b42      	ldr	r3, [pc, #264]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	051b      	lsls	r3, r3, #20
 80083e6:	493f      	ldr	r1, [pc, #252]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	628b      	str	r3, [r1, #40]	; 0x28
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	025b      	lsls	r3, r3, #9
 80083fe:	b29b      	uxth	r3, r3
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	3b01      	subs	r3, #1
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800840e:	431a      	orrs	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	3b01      	subs	r3, #1
 8008416:	061b      	lsls	r3, r3, #24
 8008418:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800841c:	4931      	ldr	r1, [pc, #196]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 800841e:	4313      	orrs	r3, r2
 8008420:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008422:	4b30      	ldr	r3, [pc, #192]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	492d      	ldr	r1, [pc, #180]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008430:	4313      	orrs	r3, r2
 8008432:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008434:	4b2b      	ldr	r3, [pc, #172]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	4928      	ldr	r1, [pc, #160]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008442:	4313      	orrs	r3, r2
 8008444:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008446:	4b27      	ldr	r3, [pc, #156]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844a:	4a26      	ldr	r2, [pc, #152]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 800844c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008452:	4b24      	ldr	r3, [pc, #144]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008456:	4b24      	ldr	r3, [pc, #144]	; (80084e8 <RCCEx_PLL3_Config+0x160>)
 8008458:	4013      	ands	r3, r2
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	69d2      	ldr	r2, [r2, #28]
 800845e:	00d2      	lsls	r2, r2, #3
 8008460:	4920      	ldr	r1, [pc, #128]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008462:	4313      	orrs	r3, r2
 8008464:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008466:	4b1f      	ldr	r3, [pc, #124]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	4a1e      	ldr	r2, [pc, #120]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 800846c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008478:	4b1a      	ldr	r3, [pc, #104]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	4a19      	ldr	r2, [pc, #100]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 800847e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008482:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008484:	e00f      	b.n	80084a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d106      	bne.n	800849a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800848c:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	4a14      	ldr	r2, [pc, #80]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 8008492:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008498:	e005      	b.n	80084a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	4a11      	ldr	r2, [pc, #68]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80084a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80084a6:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a0e      	ldr	r2, [pc, #56]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80084ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084b2:	f7fc fd6f 	bl	8004f94 <HAL_GetTick>
 80084b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084b8:	e008      	b.n	80084cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084ba:	f7fc fd6b 	bl	8004f94 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d901      	bls.n	80084cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e006      	b.n	80084da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <RCCEx_PLL3_Config+0x15c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0f0      	beq.n	80084ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	58024400 	.word	0x58024400
 80084e8:	ffff0007 	.word	0xffff0007

080084ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e049      	b.n	8008592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f841 	bl	800859a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3304      	adds	r3, #4
 8008528:	4619      	mov	r1, r3
 800852a:	4610      	mov	r0, r2
 800852c:	f000 f9f8 	bl	8008920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d001      	beq.n	80085c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e04f      	b.n	8008668 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0201 	orr.w	r2, r2, #1
 80085de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a23      	ldr	r2, [pc, #140]	; (8008674 <HAL_TIM_Base_Start_IT+0xc4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d01d      	beq.n	8008626 <HAL_TIM_Base_Start_IT+0x76>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f2:	d018      	beq.n	8008626 <HAL_TIM_Base_Start_IT+0x76>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a1f      	ldr	r2, [pc, #124]	; (8008678 <HAL_TIM_Base_Start_IT+0xc8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d013      	beq.n	8008626 <HAL_TIM_Base_Start_IT+0x76>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a1e      	ldr	r2, [pc, #120]	; (800867c <HAL_TIM_Base_Start_IT+0xcc>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00e      	beq.n	8008626 <HAL_TIM_Base_Start_IT+0x76>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a1c      	ldr	r2, [pc, #112]	; (8008680 <HAL_TIM_Base_Start_IT+0xd0>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d009      	beq.n	8008626 <HAL_TIM_Base_Start_IT+0x76>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a1b      	ldr	r2, [pc, #108]	; (8008684 <HAL_TIM_Base_Start_IT+0xd4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d004      	beq.n	8008626 <HAL_TIM_Base_Start_IT+0x76>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a19      	ldr	r2, [pc, #100]	; (8008688 <HAL_TIM_Base_Start_IT+0xd8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d115      	bne.n	8008652 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	4b17      	ldr	r3, [pc, #92]	; (800868c <HAL_TIM_Base_Start_IT+0xdc>)
 800862e:	4013      	ands	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b06      	cmp	r3, #6
 8008636:	d015      	beq.n	8008664 <HAL_TIM_Base_Start_IT+0xb4>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863e:	d011      	beq.n	8008664 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0201 	orr.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008650:	e008      	b.n	8008664 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	e000      	b.n	8008666 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	40010000 	.word	0x40010000
 8008678:	40000400 	.word	0x40000400
 800867c:	40000800 	.word	0x40000800
 8008680:	40000c00 	.word	0x40000c00
 8008684:	40010400 	.word	0x40010400
 8008688:	40001800 	.word	0x40001800
 800868c:	00010007 	.word	0x00010007

08008690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d122      	bne.n	80086ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d11b      	bne.n	80086ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f06f 0202 	mvn.w	r2, #2
 80086bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	f003 0303 	and.w	r3, r3, #3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f905 	bl	80088e2 <HAL_TIM_IC_CaptureCallback>
 80086d8:	e005      	b.n	80086e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f8f7 	bl	80088ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f908 	bl	80088f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d122      	bne.n	8008740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b04      	cmp	r3, #4
 8008706:	d11b      	bne.n	8008740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0204 	mvn.w	r2, #4
 8008710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2202      	movs	r2, #2
 8008716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f8db 	bl	80088e2 <HAL_TIM_IC_CaptureCallback>
 800872c:	e005      	b.n	800873a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f8cd 	bl	80088ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f8de 	bl	80088f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f003 0308 	and.w	r3, r3, #8
 800874a:	2b08      	cmp	r3, #8
 800874c:	d122      	bne.n	8008794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f003 0308 	and.w	r3, r3, #8
 8008758:	2b08      	cmp	r3, #8
 800875a:	d11b      	bne.n	8008794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0208 	mvn.w	r2, #8
 8008764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2204      	movs	r2, #4
 800876a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f8b1 	bl	80088e2 <HAL_TIM_IC_CaptureCallback>
 8008780:	e005      	b.n	800878e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f8a3 	bl	80088ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f8b4 	bl	80088f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0310 	and.w	r3, r3, #16
 800879e:	2b10      	cmp	r3, #16
 80087a0:	d122      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f003 0310 	and.w	r3, r3, #16
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	d11b      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0210 	mvn.w	r2, #16
 80087b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2208      	movs	r2, #8
 80087be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f887 	bl	80088e2 <HAL_TIM_IC_CaptureCallback>
 80087d4:	e005      	b.n	80087e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f879 	bl	80088ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f88a 	bl	80088f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10e      	bne.n	8008814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b01      	cmp	r3, #1
 8008802:	d107      	bne.n	8008814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0201 	mvn.w	r2, #1
 800880c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7fc f91a 	bl	8004a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881e:	2b80      	cmp	r3, #128	; 0x80
 8008820:	d10e      	bne.n	8008840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882c:	2b80      	cmp	r3, #128	; 0x80
 800882e:	d107      	bne.n	8008840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f914 	bl	8008a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884e:	d10e      	bne.n	800886e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b80      	cmp	r3, #128	; 0x80
 800885c:	d107      	bne.n	800886e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f907 	bl	8008a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008878:	2b40      	cmp	r3, #64	; 0x40
 800887a:	d10e      	bne.n	800889a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d107      	bne.n	800889a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f838 	bl	800890a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d10e      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	d107      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f06f 0220 	mvn.w	r2, #32
 80088be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f8c7 	bl	8008a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088d6:	bf00      	nop
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
	...

08008920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a40      	ldr	r2, [pc, #256]	; (8008a34 <TIM_Base_SetConfig+0x114>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d013      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800893e:	d00f      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a3d      	ldr	r2, [pc, #244]	; (8008a38 <TIM_Base_SetConfig+0x118>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00b      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a3c      	ldr	r2, [pc, #240]	; (8008a3c <TIM_Base_SetConfig+0x11c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d007      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a3b      	ldr	r2, [pc, #236]	; (8008a40 <TIM_Base_SetConfig+0x120>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a3a      	ldr	r2, [pc, #232]	; (8008a44 <TIM_Base_SetConfig+0x124>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d108      	bne.n	8008972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2f      	ldr	r2, [pc, #188]	; (8008a34 <TIM_Base_SetConfig+0x114>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d01f      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008980:	d01b      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a2c      	ldr	r2, [pc, #176]	; (8008a38 <TIM_Base_SetConfig+0x118>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d017      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a2b      	ldr	r2, [pc, #172]	; (8008a3c <TIM_Base_SetConfig+0x11c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d013      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a2a      	ldr	r2, [pc, #168]	; (8008a40 <TIM_Base_SetConfig+0x120>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d00f      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a29      	ldr	r2, [pc, #164]	; (8008a44 <TIM_Base_SetConfig+0x124>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00b      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a28      	ldr	r2, [pc, #160]	; (8008a48 <TIM_Base_SetConfig+0x128>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d007      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a27      	ldr	r2, [pc, #156]	; (8008a4c <TIM_Base_SetConfig+0x12c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d003      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a26      	ldr	r2, [pc, #152]	; (8008a50 <TIM_Base_SetConfig+0x130>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d108      	bne.n	80089cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a10      	ldr	r2, [pc, #64]	; (8008a34 <TIM_Base_SetConfig+0x114>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00f      	beq.n	8008a18 <TIM_Base_SetConfig+0xf8>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a12      	ldr	r2, [pc, #72]	; (8008a44 <TIM_Base_SetConfig+0x124>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00b      	beq.n	8008a18 <TIM_Base_SetConfig+0xf8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a11      	ldr	r2, [pc, #68]	; (8008a48 <TIM_Base_SetConfig+0x128>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d007      	beq.n	8008a18 <TIM_Base_SetConfig+0xf8>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a10      	ldr	r2, [pc, #64]	; (8008a4c <TIM_Base_SetConfig+0x12c>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_Base_SetConfig+0xf8>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a0f      	ldr	r2, [pc, #60]	; (8008a50 <TIM_Base_SetConfig+0x130>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d103      	bne.n	8008a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	691a      	ldr	r2, [r3, #16]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	615a      	str	r2, [r3, #20]
}
 8008a26:	bf00      	nop
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40000400 	.word	0x40000400
 8008a3c:	40000800 	.word	0x40000800
 8008a40:	40000c00 	.word	0x40000c00
 8008a44:	40010400 	.word	0x40010400
 8008a48:	40014000 	.word	0x40014000
 8008a4c:	40014400 	.word	0x40014400
 8008a50:	40014800 	.word	0x40014800

08008a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a90:	b084      	sub	sp, #16
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	f107 001c 	add.w	r0, r7, #28
 8008a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d120      	bne.n	8008aea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	4b2a      	ldr	r3, [pc, #168]	; (8008b64 <USB_CoreInit+0xd4>)
 8008aba:	4013      	ands	r3, r2
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d105      	bne.n	8008ade <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f8c8 	bl	8008c74 <USB_CoreReset>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73fb      	strb	r3, [r7, #15]
 8008ae8:	e01a      	b.n	8008b20 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f8bc 	bl	8008c74 <USB_CoreReset>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38
 8008b12:	e005      	b.n	8008b20 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d116      	bne.n	8008b54 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b34:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <USB_CoreInit+0xd8>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f043 0206 	orr.w	r2, r3, #6
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f043 0220 	orr.w	r2, r3, #32
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b60:	b004      	add	sp, #16
 8008b62:	4770      	bx	lr
 8008b64:	ffbdffbf 	.word	0xffbdffbf
 8008b68:	03ee0000 	.word	0x03ee0000

08008b6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f023 0201 	bic.w	r2, r3, #1
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d106      	bne.n	8008bba <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60da      	str	r2, [r3, #12]
 8008bb8:	e00b      	b.n	8008bd2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d106      	bne.n	8008bce <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60da      	str	r2, [r3, #12]
 8008bcc:	e001      	b.n	8008bd2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e003      	b.n	8008bda <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008bd2:	2032      	movs	r0, #50	; 0x32
 8008bd4:	f7fc f9ea 	bl	8004fac <HAL_Delay>

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	019b      	lsls	r3, r3, #6
 8008bf6:	f043 0220 	orr.w	r2, r3, #32
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <USB_FlushTxFifo+0x48>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d901      	bls.n	8008c10 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e006      	b.n	8008c1e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b20      	cmp	r3, #32
 8008c1a:	d0f0      	beq.n	8008bfe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	00030d40 	.word	0x00030d40

08008c30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2210      	movs	r2, #16
 8008c40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3301      	adds	r3, #1
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4a09      	ldr	r2, [pc, #36]	; (8008c70 <USB_FlushRxFifo+0x40>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d901      	bls.n	8008c54 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e006      	b.n	8008c62 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f003 0310 	and.w	r3, r3, #16
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	d0f0      	beq.n	8008c42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	00030d40 	.word	0x00030d40

08008c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <USB_CoreReset+0x64>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d901      	bls.n	8008c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e01b      	b.n	8008cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	daf2      	bge.n	8008c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f043 0201 	orr.w	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a09      	ldr	r2, [pc, #36]	; (8008cd8 <USB_CoreReset+0x64>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d901      	bls.n	8008cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e006      	b.n	8008cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d0f0      	beq.n	8008caa <USB_CoreReset+0x36>

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	00030d40 	.word	0x00030d40

08008cdc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cdc:	b084      	sub	sp, #16
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	f107 001c 	add.w	r0, r7, #28
 8008cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d018      	beq.n	8008d54 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d10a      	bne.n	8008d3e <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d36:	f043 0304 	orr.w	r3, r3, #4
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	e014      	b.n	8008d68 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d4c:	f023 0304 	bic.w	r3, r3, #4
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	e009      	b.n	8008d68 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d62:	f023 0304 	bic.w	r3, r3, #4
 8008d66:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008d68:	2110      	movs	r1, #16
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff ff3a 	bl	8008be4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff ff5d 	bl	8008c30 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	e015      	b.n	8008da8 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3301      	adds	r3, #1
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d3e5      	bcc.n	8008d7c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008db0:	2101      	movs	r1, #1
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f848 	bl	8008e48 <USB_DriveVbus>

  HAL_Delay(200U);
 8008db8:	20c8      	movs	r0, #200	; 0xc8
 8008dba:	f7fc f8f7 	bl	8004fac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dca:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dde:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a14      	ldr	r2, [pc, #80]	; (8008e34 <USB_HostInit+0x158>)
 8008de4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a13      	ldr	r2, [pc, #76]	; (8008e38 <USB_HostInit+0x15c>)
 8008dea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008dee:	e009      	b.n	8008e04 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2280      	movs	r2, #128	; 0x80
 8008df4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a10      	ldr	r2, [pc, #64]	; (8008e3c <USB_HostInit+0x160>)
 8008dfa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a10      	ldr	r2, [pc, #64]	; (8008e40 <USB_HostInit+0x164>)
 8008e00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d105      	bne.n	8008e16 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	f043 0210 	orr.w	r2, r3, #16
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699a      	ldr	r2, [r3, #24]
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <USB_HostInit+0x168>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e2e:	b004      	add	sp, #16
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	01000200 	.word	0x01000200
 8008e38:	00e00300 	.word	0x00e00300
 8008e3c:	00600080 	.word	0x00600080
 8008e40:	004000e0 	.word	0x004000e0
 8008e44:	a3200008 	.word	0xa3200008

08008e48 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008e6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <USB_DriveVbus+0x44>
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d106      	bne.n	8008e8c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e8a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e96:	d109      	bne.n	8008eac <USB_DriveVbus+0x64>
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eaa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
	...

08008ebc <__libc_init_array>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4d0d      	ldr	r5, [pc, #52]	; (8008ef4 <__libc_init_array+0x38>)
 8008ec0:	4c0d      	ldr	r4, [pc, #52]	; (8008ef8 <__libc_init_array+0x3c>)
 8008ec2:	1b64      	subs	r4, r4, r5
 8008ec4:	10a4      	asrs	r4, r4, #2
 8008ec6:	2600      	movs	r6, #0
 8008ec8:	42a6      	cmp	r6, r4
 8008eca:	d109      	bne.n	8008ee0 <__libc_init_array+0x24>
 8008ecc:	4d0b      	ldr	r5, [pc, #44]	; (8008efc <__libc_init_array+0x40>)
 8008ece:	4c0c      	ldr	r4, [pc, #48]	; (8008f00 <__libc_init_array+0x44>)
 8008ed0:	f000 f83e 	bl	8008f50 <_init>
 8008ed4:	1b64      	subs	r4, r4, r5
 8008ed6:	10a4      	asrs	r4, r4, #2
 8008ed8:	2600      	movs	r6, #0
 8008eda:	42a6      	cmp	r6, r4
 8008edc:	d105      	bne.n	8008eea <__libc_init_array+0x2e>
 8008ede:	bd70      	pop	{r4, r5, r6, pc}
 8008ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee4:	4798      	blx	r3
 8008ee6:	3601      	adds	r6, #1
 8008ee8:	e7ee      	b.n	8008ec8 <__libc_init_array+0xc>
 8008eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eee:	4798      	blx	r3
 8008ef0:	3601      	adds	r6, #1
 8008ef2:	e7f2      	b.n	8008eda <__libc_init_array+0x1e>
 8008ef4:	080091ac 	.word	0x080091ac
 8008ef8:	080091ac 	.word	0x080091ac
 8008efc:	080091ac 	.word	0x080091ac
 8008f00:	080091b0 	.word	0x080091b0

08008f04 <memcmp>:
 8008f04:	b510      	push	{r4, lr}
 8008f06:	3901      	subs	r1, #1
 8008f08:	4402      	add	r2, r0
 8008f0a:	4290      	cmp	r0, r2
 8008f0c:	d101      	bne.n	8008f12 <memcmp+0xe>
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e005      	b.n	8008f1e <memcmp+0x1a>
 8008f12:	7803      	ldrb	r3, [r0, #0]
 8008f14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d001      	beq.n	8008f20 <memcmp+0x1c>
 8008f1c:	1b18      	subs	r0, r3, r4
 8008f1e:	bd10      	pop	{r4, pc}
 8008f20:	3001      	adds	r0, #1
 8008f22:	e7f2      	b.n	8008f0a <memcmp+0x6>

08008f24 <memcpy>:
 8008f24:	440a      	add	r2, r1
 8008f26:	4291      	cmp	r1, r2
 8008f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f2c:	d100      	bne.n	8008f30 <memcpy+0xc>
 8008f2e:	4770      	bx	lr
 8008f30:	b510      	push	{r4, lr}
 8008f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f3a:	4291      	cmp	r1, r2
 8008f3c:	d1f9      	bne.n	8008f32 <memcpy+0xe>
 8008f3e:	bd10      	pop	{r4, pc}

08008f40 <memset>:
 8008f40:	4402      	add	r2, r0
 8008f42:	4603      	mov	r3, r0
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d100      	bne.n	8008f4a <memset+0xa>
 8008f48:	4770      	bx	lr
 8008f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4e:	e7f9      	b.n	8008f44 <memset+0x4>

08008f50 <_init>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	bf00      	nop
 8008f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f56:	bc08      	pop	{r3}
 8008f58:	469e      	mov	lr, r3
 8008f5a:	4770      	bx	lr

08008f5c <_fini>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr
