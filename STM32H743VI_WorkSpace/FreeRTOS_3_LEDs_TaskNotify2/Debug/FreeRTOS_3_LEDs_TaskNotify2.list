
FreeRTOS_3_LEDs_TaskNotify2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f38  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  08009424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0007f7f8  24000020  08009444  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2407f818  08009444  0002f818  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020bd9  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000394e  00000000  00000000  00040c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a78  00000000  00000000  00044578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000018c0  00000000  00000000  00045ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003847d  00000000  00000000  000478b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e42d  00000000  00000000  0007fd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175d1d  00000000  00000000  0009e15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00213e77  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007174  00000000  00000000  00213ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000020 	.word	0x24000020
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080091c0 	.word	0x080091c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000024 	.word	0x24000024
 80002dc:	080091c0 	.word	0x080091c0

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	2400723c 	.word	0x2400723c

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80003ce:	b480      	push	{r7}
 80003d0:	b085      	sub	sp, #20
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000416:	b480      	push	{r7}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800042c:	d103      	bne.n	8000436 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e00c      	b.n	8000450 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3308      	adds	r3, #8
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e002      	b.n	8000444 <vListInsert+0x2e>
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	429a      	cmp	r2, r3
 800044e:	d2f6      	bcs.n	800043e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	6892      	ldr	r2, [r2, #8]
 800049e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6852      	ldr	r2, [r2, #4]
 80004a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d103      	bne.n	80004bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	1e5a      	subs	r2, r3, #1
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 f939 	bl	8001768 <pvPortMalloc>
 80004f6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00e      	beq.n	800051c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80004fe:	205c      	movs	r0, #92	; 0x5c
 8000500:	f001 f932 	bl	8001768 <pvPortMalloc>
 8000504:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	631a      	str	r2, [r3, #48]	; 0x30
 8000512:	e005      	b.n	8000520 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000514:	6978      	ldr	r0, [r7, #20]
 8000516:	f001 fa0d 	bl	8001934 <vPortFree>
 800051a:	e001      	b.n	8000520 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d013      	beq.n	800054e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000526:	88fa      	ldrh	r2, [r7, #6]
 8000528:	2300      	movs	r3, #0
 800052a:	9303      	str	r3, [sp, #12]
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68b9      	ldr	r1, [r7, #8]
 800053c:	68f8      	ldr	r0, [r7, #12]
 800053e:	f000 f80e 	bl	800055e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000542:	69f8      	ldr	r0, [r7, #28]
 8000544:	f000 f8a4 	bl	8000690 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000548:	2301      	movs	r3, #1
 800054a:	61bb      	str	r3, [r7, #24]
 800054c:	e002      	b.n	8000554 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000554:	69bb      	ldr	r3, [r7, #24]
    }
 8000556:	4618      	mov	r0, r3
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b088      	sub	sp, #32
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800056e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	461a      	mov	r2, r3
 8000576:	21a5      	movs	r1, #165	; 0xa5
 8000578:	f008 fe1a 	bl	80091b0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000586:	440b      	add	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	f023 0307 	bic.w	r3, r3, #7
 8000594:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00c      	beq.n	80005ba <prvInitialiseNewTask+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	b672      	cpsid	i
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	b662      	cpsie	i
 80005b4:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d01f      	beq.n	8000600 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	e012      	b.n	80005ec <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	4413      	add	r3, r2
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	4413      	add	r3, r2
 80005d4:	3334      	adds	r3, #52	; 0x34
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3301      	adds	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d9e9      	bls.n	80005c6 <prvInitialiseNewTask+0x68>
 80005f2:	e000      	b.n	80005f6 <prvInitialiseNewTask+0x98>
            {
                break;
 80005f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80005fe:	e003      	b.n	8000608 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800060a:	2b06      	cmp	r3, #6
 800060c:	d901      	bls.n	8000612 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800060e:	2306      	movs	r3, #6
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800061c:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000620:	2200      	movs	r2, #0
 8000622:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000626:	3304      	adds	r3, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fec3 	bl	80003b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	3318      	adds	r3, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff febe 	bl	80003b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800063c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000640:	f1c3 0207 	rsb	r2, r3, #7
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800064a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000650:	3354      	adds	r3, #84	; 0x54
 8000652:	2204      	movs	r2, #4
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f008 fdaa 	bl	80091b0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	3358      	adds	r3, #88	; 0x58
 8000660:	2201      	movs	r2, #1
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f008 fda3 	bl	80091b0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	69b8      	ldr	r0, [r7, #24]
 8000670:	f000 fe34 	bl	80012dc <pxPortInitialiseStack>
 8000674:	4602      	mov	r2, r0
 8000676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000678:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000684:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000698:	f000 ff32 	bl	8001500 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 80006a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80006ae:	4a32      	ldr	r2, [pc, #200]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80006b4:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d110      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80006bc:	f000 fb7a 	bl	8000db4 <prvInitialiseTaskLists>
 80006c0:	e00d      	b.n	80006de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <prvAddNewTaskToReadyList+0xec>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d802      	bhi.n	80006de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d016      	beq.n	8000724 <prvAddNewTaskToReadyList+0x94>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fc7f 	bl	8003ffc <SEGGER_SYSVIEW_OnTaskCreate>
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	461d      	mov	r5, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	461c      	mov	r4, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	1ae3      	subs	r3, r4, r3
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	462b      	mov	r3, r5
 8000720:	f001 fada 	bl	8001cd8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fcec 	bl	8004104 <SEGGER_SYSVIEW_OnTaskStartReady>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000730:	2201      	movs	r2, #1
 8000732:	409a      	lsls	r2, r3
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <prvAddNewTaskToReadyList+0xf4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4313      	orrs	r3, r2
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <prvAddNewTaskToReadyList+0xf4>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <prvAddNewTaskToReadyList+0xf8>)
 800074c:	441a      	add	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3304      	adds	r3, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f7ff fe3a 	bl	80003ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800075a:	f000 ff05 	bl	8001568 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <prvAddNewTaskToReadyList+0xec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 8000768:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bdb0      	pop	{r4, r5, r7, pc}
 8000772:	bf00      	nop
 8000774:	2400013c 	.word	0x2400013c
 8000778:	2400003c 	.word	0x2400003c
 800077c:	24000148 	.word	0x24000148
 8000780:	24000158 	.word	0x24000158
 8000784:	24000144 	.word	0x24000144
 8000788:	24000040 	.word	0x24000040

0800078c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000794:	f000 feb4 	bl	8001500 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <vTaskDelete+0x18>
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <vTaskDelete+0x130>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	e000      	b.n	80007a6 <vTaskDelete+0x1a>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3304      	adds	r3, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fe6b 	bl	8000488 <uxListRemove>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d115      	bne.n	80007e4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007bc:	4940      	ldr	r1, [pc, #256]	; (80008c0 <vTaskDelete+0x134>)
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10a      	bne.n	80007e4 <vTaskDelete+0x58>
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	2201      	movs	r2, #1
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	43da      	mvns	r2, r3
 80007da:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <vTaskDelete+0x138>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4013      	ands	r3, r2
 80007e0:	4a38      	ldr	r2, [pc, #224]	; (80008c4 <vTaskDelete+0x138>)
 80007e2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3318      	adds	r3, #24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe49 	bl	8000488 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <vTaskDelete+0x13c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <vTaskDelete+0x13c>)
 80007fe:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <vTaskDelete+0x130>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	429a      	cmp	r2, r3
 8000808:	d118      	bne.n	800083c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3304      	adds	r3, #4
 800080e:	4619      	mov	r1, r3
 8000810:	482e      	ldr	r0, [pc, #184]	; (80008cc <vTaskDelete+0x140>)
 8000812:	f7ff fddc 	bl	80003ce <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <vTaskDelete+0x144>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <vTaskDelete+0x144>)
 800081e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fd10 	bl	8004248 <SEGGER_SYSVIEW_ShrinkId>
 8000828:	4603      	mov	r3, r0
 800082a:	4619      	mov	r1, r3
 800082c:	2022      	movs	r0, #34	; 0x22
 800082e:	f002 ff5d 	bl	80036ec <SEGGER_SYSVIEW_RecordU32>
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fab7 	bl	8001da8 <SYSVIEW_DeleteTask>
 800083a:	e016      	b.n	800086a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <vTaskDelete+0x148>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <vTaskDelete+0x148>)
 8000844:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fcfd 	bl	8004248 <SEGGER_SYSVIEW_ShrinkId>
 800084e:	4603      	mov	r3, r0
 8000850:	4619      	mov	r1, r3
 8000852:	2022      	movs	r0, #34	; 0x22
 8000854:	f002 ff4a 	bl	80036ec <SEGGER_SYSVIEW_RecordU32>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	f001 faa4 	bl	8001da8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f000 fb15 	bl	8000e90 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000866:	f000 fb23 	bl	8000eb0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800086a:	f000 fe7d 	bl	8001568 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <vTaskDelete+0x14c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d01d      	beq.n	80008b2 <vTaskDelete+0x126>
        {
            if( pxTCB == pxCurrentTCB )
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <vTaskDelete+0x130>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d118      	bne.n	80008b2 <vTaskDelete+0x126>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <vTaskDelete+0x150>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00c      	beq.n	80008a2 <vTaskDelete+0x116>
        __asm volatile
 8000888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800088c:	b672      	cpsid	i
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	b662      	cpsie	i
 800089c:	60bb      	str	r3, [r7, #8]
    }
 800089e:	bf00      	nop
 80008a0:	e7fe      	b.n	80008a0 <vTaskDelete+0x114>
                portYIELD_WITHIN_API();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <vTaskDelete+0x154>)
 80008a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2400003c 	.word	0x2400003c
 80008c0:	24000040 	.word	0x24000040
 80008c4:	24000144 	.word	0x24000144
 80008c8:	24000158 	.word	0x24000158
 80008cc:	24000110 	.word	0x24000110
 80008d0:	24000124 	.word	0x24000124
 80008d4:	2400013c 	.word	0x2400013c
 80008d8:	24000148 	.word	0x24000148
 80008dc:	24000164 	.word	0x24000164
 80008e0:	e000ed04 	.word	0xe000ed04

080008e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d01d      	beq.n	8000932 <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <vTaskDelay+0x6c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00c      	beq.n	8000918 <vTaskDelay+0x34>
        __asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000902:	b672      	cpsid	i
 8000904:	f383 8811 	msr	BASEPRI, r3
 8000908:	f3bf 8f6f 	isb	sy
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	b662      	cpsie	i
 8000912:	60bb      	str	r3, [r7, #8]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <vTaskDelay+0x32>
            vTaskSuspendAll();
 8000918:	f000 f87e 	bl	8000a18 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	2023      	movs	r0, #35	; 0x23
 8000920:	f002 fee4 	bl	80036ec <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000924:	2100      	movs	r1, #0
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 fc60 	bl	80011ec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800092c:	f000 f882 	bl	8000a34 <xTaskResumeAll>
 8000930:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d107      	bne.n	8000948 <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <vTaskDelay+0x70>)
 800093a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000164 	.word	0x24000164
 8000954:	e000ed04 	.word	0xe000ed04

08000958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <vTaskStartScheduler+0xa0>)
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	2300      	movs	r3, #0
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	4924      	ldr	r1, [pc, #144]	; (80009fc <vTaskStartScheduler+0xa4>)
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <vTaskStartScheduler+0xa8>)
 800096e:	f7ff fdb5 	bl	80004dc <xTaskCreate>
 8000972:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d126      	bne.n	80009c8 <vTaskStartScheduler+0x70>
        __asm volatile
 800097a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800097e:	b672      	cpsid	i
 8000980:	f383 8811 	msr	BASEPRI, r3
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	b662      	cpsie	i
 800098e:	60bb      	str	r3, [r7, #8]
    }
 8000990:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <vTaskStartScheduler+0xac>)
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <vTaskStartScheduler+0xb0>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <vTaskStartScheduler+0xb4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <vTaskStartScheduler+0xb8>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <vTaskStartScheduler+0xa0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d102      	bne.n	80009b8 <vTaskStartScheduler+0x60>
 80009b2:	f003 fb07 	bl	8003fc4 <SEGGER_SYSVIEW_OnIdle>
 80009b6:	e004      	b.n	80009c2 <vTaskStartScheduler+0x6a>
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <vTaskStartScheduler+0xb8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fb5f 	bl	8004080 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80009c2:	f000 fd1f 	bl	8001404 <xPortStartScheduler>
 80009c6:	e010      	b.n	80009ea <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ce:	d10c      	bne.n	80009ea <vTaskStartScheduler+0x92>
        __asm volatile
 80009d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d4:	b672      	cpsid	i
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	b662      	cpsie	i
 80009e4:	607b      	str	r3, [r7, #4]
    }
 80009e6:	bf00      	nop
 80009e8:	e7fe      	b.n	80009e8 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <vTaskStartScheduler+0xbc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000160 	.word	0x24000160
 80009fc:	080091d8 	.word	0x080091d8
 8000a00:	08000d91 	.word	0x08000d91
 8000a04:	2400015c 	.word	0x2400015c
 8000a08:	24000148 	.word	0x24000148
 8000a0c:	24000140 	.word	0x24000140
 8000a10:	2400003c 	.word	0x2400003c
 8000a14:	24000000 	.word	0x24000000

08000a18 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <vTaskSuspendAll+0x18>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <vTaskSuspendAll+0x18>)
 8000a24:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	24000164 	.word	0x24000164

08000a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <xTaskResumeAll+0x108>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10c      	bne.n	8000a64 <xTaskResumeAll+0x30>
        __asm volatile
 8000a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a4e:	b672      	cpsid	i
 8000a50:	f383 8811 	msr	BASEPRI, r3
 8000a54:	f3bf 8f6f 	isb	sy
 8000a58:	f3bf 8f4f 	dsb	sy
 8000a5c:	b662      	cpsie	i
 8000a5e:	603b      	str	r3, [r7, #0]
    }
 8000a60:	bf00      	nop
 8000a62:	e7fe      	b.n	8000a62 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000a64:	f000 fd4c 	bl	8001500 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000a68:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <xTaskResumeAll+0x108>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <xTaskResumeAll+0x108>)
 8000a70:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <xTaskResumeAll+0x108>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d159      	bne.n	8000b2e <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <xTaskResumeAll+0x10c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d055      	beq.n	8000b2e <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a82:	e032      	b.n	8000aea <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <xTaskResumeAll+0x110>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3318      	adds	r3, #24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fcf9 	bl	8000488 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fcf4 	bl	8000488 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 fb2e 	bl	8004104 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	2201      	movs	r2, #1
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <xTaskResumeAll+0x114>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	4a24      	ldr	r2, [pc, #144]	; (8000b48 <xTaskResumeAll+0x114>)
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abe:	4613      	mov	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <xTaskResumeAll+0x118>)
 8000ac8:	441a      	add	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3304      	adds	r3, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	f7ff fc7c 	bl	80003ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <xTaskResumeAll+0x11c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d302      	bcc.n	8000aea <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <xTaskResumeAll+0x120>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <xTaskResumeAll+0x110>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1c8      	bne.n	8000a84 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000af8:	f000 f9da 	bl	8000eb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <xTaskResumeAll+0x124>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d010      	beq.n	8000b2a <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000b08:	f000 f83a 	bl	8000b80 <xTaskIncrementTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <xTaskResumeAll+0x120>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f1      	bne.n	8000b08 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <xTaskResumeAll+0x124>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <xTaskResumeAll+0x120>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000b2e:	f000 fd1b 	bl	8001568 <vPortExitCritical>

    return xAlreadyYielded;
 8000b32:	687b      	ldr	r3, [r7, #4]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000164 	.word	0x24000164
 8000b40:	2400013c 	.word	0x2400013c
 8000b44:	240000fc 	.word	0x240000fc
 8000b48:	24000144 	.word	0x24000144
 8000b4c:	24000040 	.word	0x24000040
 8000b50:	2400003c 	.word	0x2400003c
 8000b54:	24000150 	.word	0x24000150
 8000b58:	2400014c 	.word	0x2400014c

08000b5c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b62:	f000 fdbd 	bl	80016e0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <xTaskGetTickCountFromISR+0x20>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b70:	683b      	ldr	r3, [r7, #0]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24000140 	.word	0x24000140

08000b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b8a:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <xTaskIncrementTick+0x114>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d175      	bne.n	8000c7e <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b92:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <xTaskIncrementTick+0x118>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000b9a:	4a3f      	ldr	r2, [pc, #252]	; (8000c98 <xTaskIncrementTick+0x118>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d122      	bne.n	8000bec <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00c      	beq.n	8000bca <xTaskIncrementTick+0x4a>
        __asm volatile
 8000bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb4:	b672      	cpsid	i
 8000bb6:	f383 8811 	msr	BASEPRI, r3
 8000bba:	f3bf 8f6f 	isb	sy
 8000bbe:	f3bf 8f4f 	dsb	sy
 8000bc2:	b662      	cpsie	i
 8000bc4:	603b      	str	r3, [r7, #0]
    }
 8000bc6:	bf00      	nop
 8000bc8:	e7fe      	b.n	8000bc8 <xTaskIncrementTick+0x48>
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <xTaskIncrementTick+0x120>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <xTaskIncrementTick+0x120>)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <xTaskIncrementTick+0x124>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <xTaskIncrementTick+0x124>)
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	f000 f962 	bl	8000eb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <xTaskIncrementTick+0x128>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d348      	bcc.n	8000c88 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000bf6:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d104      	bne.n	8000c0a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <xTaskIncrementTick+0x128>)
 8000c02:	f04f 32ff 	mov.w	r2, #4294967295
 8000c06:	601a      	str	r2, [r3, #0]
                    break;
 8000c08:	e03e      	b.n	8000c88 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <xTaskIncrementTick+0x11c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d203      	bcs.n	8000c2a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000c22:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <xTaskIncrementTick+0x128>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000c28:	e02e      	b.n	8000c88 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc2a 	bl	8000488 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	3318      	adds	r3, #24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fc21 	bl	8000488 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 fa5b 	bl	8004104 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	2201      	movs	r2, #1
 8000c54:	409a      	lsls	r2, r3
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <xTaskIncrementTick+0x12c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <xTaskIncrementTick+0x12c>)
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <xTaskIncrementTick+0x130>)
 8000c6e:	441a      	add	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3304      	adds	r3, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4610      	mov	r0, r2
 8000c78:	f7ff fba9 	bl	80003ce <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c7c:	e7bb      	b.n	8000bf6 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <xTaskIncrementTick+0x134>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <xTaskIncrementTick+0x134>)
 8000c86:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000c88:	697b      	ldr	r3, [r7, #20]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000164 	.word	0x24000164
 8000c98:	24000140 	.word	0x24000140
 8000c9c:	240000f4 	.word	0x240000f4
 8000ca0:	240000f8 	.word	0x240000f8
 8000ca4:	24000154 	.word	0x24000154
 8000ca8:	2400015c 	.word	0x2400015c
 8000cac:	24000144 	.word	0x24000144
 8000cb0:	24000040 	.word	0x24000040
 8000cb4:	2400014c 	.word	0x2400014c

08000cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <vTaskSwitchContext+0xc0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <vTaskSwitchContext+0xc4>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000ccc:	e04f      	b.n	8000d6e <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <vTaskSwitchContext+0xc4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <vTaskSwitchContext+0xc8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	fab3 f383 	clz	r3, r3
 8000ce0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
 8000ce4:	f1c3 031f 	rsb	r3, r3, #31
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	4926      	ldr	r1, [pc, #152]	; (8000d84 <vTaskSwitchContext+0xcc>)
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10c      	bne.n	8000d18 <vTaskSwitchContext+0x60>
        __asm volatile
 8000cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d02:	b672      	cpsid	i
 8000d04:	f383 8811 	msr	BASEPRI, r3
 8000d08:	f3bf 8f6f 	isb	sy
 8000d0c:	f3bf 8f4f 	dsb	sy
 8000d10:	b662      	cpsie	i
 8000d12:	607b      	str	r3, [r7, #4]
    }
 8000d14:	bf00      	nop
 8000d16:	e7fe      	b.n	8000d16 <vTaskSwitchContext+0x5e>
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <vTaskSwitchContext+0xcc>)
 8000d24:	4413      	add	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	3308      	adds	r3, #8
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d104      	bne.n	8000d48 <vTaskSwitchContext+0x90>
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <vTaskSwitchContext+0xd0>)
 8000d50:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <vTaskSwitchContext+0xd0>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <vTaskSwitchContext+0xd4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d102      	bne.n	8000d64 <vTaskSwitchContext+0xac>
 8000d5e:	f003 f931 	bl	8003fc4 <SEGGER_SYSVIEW_OnIdle>
}
 8000d62:	e004      	b.n	8000d6e <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <vTaskSwitchContext+0xd0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 f989 	bl	8004080 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	24000164 	.word	0x24000164
 8000d7c:	24000150 	.word	0x24000150
 8000d80:	24000144 	.word	0x24000144
 8000d84:	24000040 	.word	0x24000040
 8000d88:	2400003c 	.word	0x2400003c
 8000d8c:	24000160 	.word	0x24000160

08000d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000d98:	f000 f84c 	bl	8000e34 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <prvIdleTask+0x20>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000dac:	e7f4      	b.n	8000d98 <prvIdleTask+0x8>
 8000dae:	bf00      	nop
 8000db0:	e000ed04 	.word	0xe000ed04

08000db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	e00c      	b.n	8000dda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <prvInitialiseTaskLists+0x60>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fad0 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d9ef      	bls.n	8000dc0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <prvInitialiseTaskLists+0x64>)
 8000de2:	f7ff fac7 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <prvInitialiseTaskLists+0x68>)
 8000de8:	f7ff fac4 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <prvInitialiseTaskLists+0x6c>)
 8000dee:	f7ff fac1 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <prvInitialiseTaskLists+0x70>)
 8000df4:	f7ff fabe 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <prvInitialiseTaskLists+0x74>)
 8000dfa:	f7ff fabb 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <prvInitialiseTaskLists+0x78>)
 8000e00:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <prvInitialiseTaskLists+0x64>)
 8000e02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <prvInitialiseTaskLists+0x7c>)
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <prvInitialiseTaskLists+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	24000040 	.word	0x24000040
 8000e18:	240000cc 	.word	0x240000cc
 8000e1c:	240000e0 	.word	0x240000e0
 8000e20:	240000fc 	.word	0x240000fc
 8000e24:	24000110 	.word	0x24000110
 8000e28:	24000128 	.word	0x24000128
 8000e2c:	240000f4 	.word	0x240000f4
 8000e30:	240000f8 	.word	0x240000f8

08000e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e3a:	e019      	b.n	8000e70 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000e3c:	f000 fb60 	bl	8001500 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <prvCheckTasksWaitingTermination+0x50>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb1b 	bl	8000488 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <prvCheckTasksWaitingTermination+0x54>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <prvCheckTasksWaitingTermination+0x54>)
 8000e5a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <prvCheckTasksWaitingTermination+0x58>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <prvCheckTasksWaitingTermination+0x58>)
 8000e64:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000e66:	f000 fb7f 	bl	8001568 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 f810 	bl	8000e90 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <prvCheckTasksWaitingTermination+0x58>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1e1      	bne.n	8000e3c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	24000110 	.word	0x24000110
 8000e88:	2400013c 	.word	0x2400013c
 8000e8c:	24000124 	.word	0x24000124

08000e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fd49 	bl	8001934 <vPortFree>
                vPortFree( pxTCB );
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fd46 	bl	8001934 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <prvResetNextTaskUnblockTime+0x30>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d104      	bne.n	8000ec8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <prvResetNextTaskUnblockTime+0x34>)
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000ec6:	e005      	b.n	8000ed4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <prvResetNextTaskUnblockTime+0x30>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <prvResetNextTaskUnblockTime+0x34>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	240000f4 	.word	0x240000f4
 8000ee4:	2400015c 	.word	0x2400015c

08000ee8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00c      	beq.n	8000f16 <xTaskGenericNotifyWait+0x2e>
        __asm volatile
 8000efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f00:	b672      	cpsid	i
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	b662      	cpsie	i
 8000f10:	613b      	str	r3, [r7, #16]
    }
 8000f12:	bf00      	nop
 8000f14:	e7fe      	b.n	8000f14 <xTaskGenericNotifyWait+0x2c>

        taskENTER_CRITICAL();
 8000f16:	f000 faf3 	bl	8001500 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	3358      	adds	r3, #88	; 0x58
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d024      	beq.n	8000f76 <xTaskGenericNotifyWait+0x8e>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3314      	adds	r3, #20
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	6859      	ldr	r1, [r3, #4]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3314      	adds	r3, #20
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4413      	add	r3, r2
 8000f52:	3358      	adds	r3, #88	; 0x58
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <xTaskGenericNotifyWait+0x8e>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000f5e:	2101      	movs	r1, #1
 8000f60:	6a38      	ldr	r0, [r7, #32]
 8000f62:	f000 f943 	bl	80011ec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <xTaskGenericNotifyWait+0x11c>)
 8000f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	f3bf 8f4f 	dsb	sy
 8000f72:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8000f76:	f000 faf7 	bl	8001568 <vPortExitCritical>

        taskENTER_CRITICAL();
 8000f7a:	f000 fac1 	bl	8001500 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	4613      	mov	r3, r2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	2040      	movs	r0, #64	; 0x40
 8000f8c:	f002 fc44 	bl	8003818 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <xTaskGenericNotifyWait+0xc0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3314      	adds	r3, #20
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	3358      	adds	r3, #88	; 0x58
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d002      	beq.n	8000fc0 <xTaskGenericNotifyWait+0xd8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e010      	b.n	8000fe2 <xTaskGenericNotifyWait+0xfa>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3314      	adds	r3, #20
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	4019      	ands	r1, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3314      	adds	r3, #20
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <xTaskGenericNotifyWait+0x118>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	3358      	adds	r3, #88	; 0x58
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8000ff0:	f000 faba 	bl	8001568 <vPortExitCritical>

        return xReturn;
 8000ff4:	697b      	ldr	r3, [r7, #20]
    }
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2400003c 	.word	0x2400003c
 8001004:	e000ed04 	.word	0xe000ed04

08001008 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af02      	add	r7, sp, #8
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001016:	2301      	movs	r3, #1
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <xTaskGenericNotify+0x32>
        __asm volatile
 8001020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001024:	b672      	cpsid	i
 8001026:	f383 8811 	msr	BASEPRI, r3
 800102a:	f3bf 8f6f 	isb	sy
 800102e:	f3bf 8f4f 	dsb	sy
 8001032:	b662      	cpsie	i
 8001034:	623b      	str	r3, [r7, #32]
    }
 8001036:	bf00      	nop
 8001038:	e7fe      	b.n	8001038 <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10c      	bne.n	800105a <xTaskGenericNotify+0x52>
        __asm volatile
 8001040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001044:	b672      	cpsid	i
 8001046:	f383 8811 	msr	BASEPRI, r3
 800104a:	f3bf 8f6f 	isb	sy
 800104e:	f3bf 8f4f 	dsb	sy
 8001052:	b662      	cpsie	i
 8001054:	61fb      	str	r3, [r7, #28]
    }
 8001056:	bf00      	nop
 8001058:	e7fe      	b.n	8001058 <xTaskGenericNotify+0x50>
        pxTCB = xTaskToNotify;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800105e:	f000 fa4f 	bl	8001500 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001064:	2b00      	cmp	r3, #0
 8001066:	d007      	beq.n	8001078 <xTaskGenericNotify+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3314      	adds	r3, #20
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001076:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	3358      	adds	r3, #88	; 0x58
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4413      	add	r3, r2
 800108c:	3358      	adds	r3, #88	; 0x58
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d841      	bhi.n	800111c <xTaskGenericNotify+0x114>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <xTaskGenericNotify+0x98>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	0800113f 	.word	0x0800113f
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010d3 	.word	0x080010d3
 80010ac:	080010ef 	.word	0x080010ef
 80010b0:	080010ff 	.word	0x080010ff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80010b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3314      	adds	r3, #20
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	3314      	adds	r3, #20
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	605a      	str	r2, [r3, #4]
                    break;
 80010d0:	e038      	b.n	8001144 <xTaskGenericNotify+0x13c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80010d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3314      	adds	r3, #20
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3314      	adds	r3, #20
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	605a      	str	r2, [r3, #4]
                    break;
 80010ec:	e02a      	b.n	8001144 <xTaskGenericNotify+0x13c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80010ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3314      	adds	r3, #20
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	605a      	str	r2, [r3, #4]
                    break;
 80010fc:	e022      	b.n	8001144 <xTaskGenericNotify+0x13c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80010fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001102:	2b02      	cmp	r3, #2
 8001104:	d007      	beq.n	8001116 <xTaskGenericNotify+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	3314      	adds	r3, #20
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001114:	e016      	b.n	8001144 <xTaskGenericNotify+0x13c>
                        xReturn = pdFAIL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800111a:	e013      	b.n	8001144 <xTaskGenericNotify+0x13c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <xTaskGenericNotify+0x1d4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00e      	beq.n	8001142 <xTaskGenericNotify+0x13a>
        __asm volatile
 8001124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001128:	b672      	cpsid	i
 800112a:	f383 8811 	msr	BASEPRI, r3
 800112e:	f3bf 8f6f 	isb	sy
 8001132:	f3bf 8f4f 	dsb	sy
 8001136:	b662      	cpsie	i
 8001138:	61bb      	str	r3, [r7, #24]
    }
 800113a:	bf00      	nop
 800113c:	e7fe      	b.n	800113c <xTaskGenericNotify+0x134>
                    break;
 800113e:	bf00      	nop
 8001140:	e000      	b.n	8001144 <xTaskGenericNotify+0x13c>

                    break;
 8001142:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8001144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f87e 	bl	8004248 <SEGGER_SYSVIEW_ShrinkId>
 800114c:	4601      	mov	r1, r0
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	203e      	movs	r0, #62	; 0x3e
 800115a:	f002 fb5d 	bl	8003818 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800115e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001162:	2b01      	cmp	r3, #1
 8001164:	d132      	bne.n	80011cc <xTaskGenericNotify+0x1c4>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	3304      	adds	r3, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f98c 	bl	8000488 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	4618      	mov	r0, r3
 8001174:	f002 ffc6 	bl	8004104 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <xTaskGenericNotify+0x1d8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <xTaskGenericNotify+0x1d8>)
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <xTaskGenericNotify+0x1dc>)
 8001198:	441a      	add	r2, r3
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	3304      	adds	r3, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff f914 	bl	80003ce <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00c      	beq.n	80011c8 <xTaskGenericNotify+0x1c0>
        __asm volatile
 80011ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b2:	b672      	cpsid	i
 80011b4:	f383 8811 	msr	BASEPRI, r3
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	b662      	cpsie	i
 80011c2:	617b      	str	r3, [r7, #20]
    }
 80011c4:	bf00      	nop
 80011c6:	e7fe      	b.n	80011c6 <xTaskGenericNotify+0x1be>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <xTaskGenericNotify+0x1e0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80011cc:	f000 f9cc 	bl	8001568 <vPortExitCritical>

        return xReturn;
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80011d2:	4618      	mov	r0, r3
 80011d4:	3730      	adds	r7, #48	; 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	24000140 	.word	0x24000140
 80011e0:	24000144 	.word	0x24000144
 80011e4:	24000040 	.word	0x24000040
 80011e8:	2400003c 	.word	0x2400003c

080011ec <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f940 	bl	8000488 <uxListRemove>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10b      	bne.n	8001226 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2201      	movs	r2, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4013      	ands	r3, r2
 8001222:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001224:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d110      	bne.n	8001250 <prvAddCurrentTaskToDelayedList+0x64>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00d      	beq.n	8001250 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	211b      	movs	r1, #27
 800123a:	4618      	mov	r0, r3
 800123c:	f002 ffa4 	bl	8004188 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3304      	adds	r3, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <prvAddCurrentTaskToDelayedList+0xe0>)
 800124a:	f7ff f8c0 	bl	80003ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800124e:	e032      	b.n	80012b6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d20f      	bcs.n	8001288 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f002 ff8a 	bl	8004188 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3304      	adds	r3, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f7ff f8c8 	bl	8000416 <vListInsert>
}
 8001286:	e016      	b.n	80012b6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f002 ff7a 	bl	8004188 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3304      	adds	r3, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4610      	mov	r0, r2
 80012a2:	f7ff f8b8 	bl	8000416 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d202      	bcs.n	80012b6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80012b0:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000140 	.word	0x24000140
 80012c4:	2400003c 	.word	0x2400003c
 80012c8:	24000144 	.word	0x24000144
 80012cc:	24000128 	.word	0x24000128
 80012d0:	240000f8 	.word	0x240000f8
 80012d4:	240000f4 	.word	0x240000f4
 80012d8:	2400015c 	.word	0x2400015c

080012dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3b04      	subs	r3, #4
 80012ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3b04      	subs	r3, #4
 80012fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f023 0201 	bic.w	r2, r3, #1
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3b04      	subs	r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <pxPortInitialiseStack+0x64>)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3b14      	subs	r3, #20
 8001316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3b04      	subs	r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f06f 0202 	mvn.w	r2, #2
 800132a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b20      	subs	r3, #32
 8001330:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	08001345 	.word	0x08001345

08001344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <prvTaskExitError+0x5c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001356:	d00c      	beq.n	8001372 <prvTaskExitError+0x2e>
        __asm volatile
 8001358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135c:	b672      	cpsid	i
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	b662      	cpsie	i
 800136c:	60fb      	str	r3, [r7, #12]
    }
 800136e:	bf00      	nop
 8001370:	e7fe      	b.n	8001370 <prvTaskExitError+0x2c>
        __asm volatile
 8001372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001376:	b672      	cpsid	i
 8001378:	f383 8811 	msr	BASEPRI, r3
 800137c:	f3bf 8f6f 	isb	sy
 8001380:	f3bf 8f4f 	dsb	sy
 8001384:	b662      	cpsie	i
 8001386:	60bb      	str	r3, [r7, #8]
    }
 8001388:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800138a:	bf00      	nop
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0fc      	beq.n	800138c <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	24000004 	.word	0x24000004
	...

080013b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <pxCurrentTCBConst2>)
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	6808      	ldr	r0, [r1, #0]
 80013b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ba:	f380 8809 	msr	PSP, r0
 80013be:	f3bf 8f6f 	isb	sy
 80013c2:	f04f 0000 	mov.w	r0, #0
 80013c6:	f380 8811 	msr	BASEPRI, r0
 80013ca:	4770      	bx	lr
 80013cc:	f3af 8000 	nop.w

080013d0 <pxCurrentTCBConst2>:
 80013d0:	2400003c 	.word	0x2400003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop

080013d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <prvPortStartFirstTask+0x24>)
 80013da:	6800      	ldr	r0, [r0, #0]
 80013dc:	6800      	ldr	r0, [r0, #0]
 80013de:	f380 8808 	msr	MSP, r0
 80013e2:	f04f 0000 	mov.w	r0, #0
 80013e6:	f380 8814 	msr	CONTROL, r0
 80013ea:	b662      	cpsie	i
 80013ec:	b661      	cpsie	f
 80013ee:	f3bf 8f4f 	dsb	sy
 80013f2:	f3bf 8f6f 	isb	sy
 80013f6:	df00      	svc	0
 80013f8:	bf00      	nop
 80013fa:	0000      	.short	0x0000
 80013fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop

08001404 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <xPortStartScheduler+0xe4>)
 800140c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	22ff      	movs	r2, #255	; 0xff
 800141a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <xPortStartScheduler+0xe8>)
 8001430:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <xPortStartScheduler+0xec>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001438:	e009      	b.n	800144e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <xPortStartScheduler+0xec>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3b01      	subs	r3, #1
 8001440:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <xPortStartScheduler+0xec>)
 8001442:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	2b80      	cmp	r3, #128	; 0x80
 8001458:	d0ef      	beq.n	800143a <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <xPortStartScheduler+0xec>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	d00c      	beq.n	8001480 <xPortStartScheduler+0x7c>
        __asm volatile
 8001466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146a:	b672      	cpsid	i
 800146c:	f383 8811 	msr	BASEPRI, r3
 8001470:	f3bf 8f6f 	isb	sy
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	b662      	cpsie	i
 800147a:	60bb      	str	r3, [r7, #8]
    }
 800147c:	bf00      	nop
 800147e:	e7fe      	b.n	800147e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <xPortStartScheduler+0xec>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <xPortStartScheduler+0xec>)
 8001488:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <xPortStartScheduler+0xec>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <xPortStartScheduler+0xec>)
 8001494:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <xPortStartScheduler+0xf0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <xPortStartScheduler+0xf0>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <xPortStartScheduler+0xf0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <xPortStartScheduler+0xf0>)
 80014b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80014b4:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80014b6:	f000 f8e3 	bl	8001680 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <xPortStartScheduler+0xf4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80014c0:	f000 f902 	bl	80016c8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <xPortStartScheduler+0xf8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <xPortStartScheduler+0xf8>)
 80014ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80014ce:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80014d0:	f7ff ff82 	bl	80013d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80014d4:	f7ff fbf0 	bl	8000cb8 <vTaskSwitchContext>
    prvTaskExitError();
 80014d8:	f7ff ff34 	bl	8001344 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e400 	.word	0xe000e400
 80014ec:	24000168 	.word	0x24000168
 80014f0:	2400016c 	.word	0x2400016c
 80014f4:	e000ed20 	.word	0xe000ed20
 80014f8:	24000004 	.word	0x24000004
 80014fc:	e000ef34 	.word	0xe000ef34

08001500 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
        __asm volatile
 8001506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150a:	b672      	cpsid	i
 800150c:	f383 8811 	msr	BASEPRI, r3
 8001510:	f3bf 8f6f 	isb	sy
 8001514:	f3bf 8f4f 	dsb	sy
 8001518:	b662      	cpsie	i
 800151a:	607b      	str	r3, [r7, #4]
    }
 800151c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <vPortEnterCritical+0x60>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <vPortEnterCritical+0x60>)
 8001526:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <vPortEnterCritical+0x60>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d111      	bne.n	8001554 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <vPortEnterCritical+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <vPortEnterCritical+0x54>
        __asm volatile
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	b672      	cpsid	i
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	b662      	cpsie	i
 800154e:	603b      	str	r3, [r7, #0]
    }
 8001550:	bf00      	nop
 8001552:	e7fe      	b.n	8001552 <vPortEnterCritical+0x52>
    }
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	24000004 	.word	0x24000004
 8001564:	e000ed04 	.word	0xe000ed04

08001568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <vPortExitCritical+0x54>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <vPortExitCritical+0x28>
        __asm volatile
 8001576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157a:	b672      	cpsid	i
 800157c:	f383 8811 	msr	BASEPRI, r3
 8001580:	f3bf 8f6f 	isb	sy
 8001584:	f3bf 8f4f 	dsb	sy
 8001588:	b662      	cpsie	i
 800158a:	607b      	str	r3, [r7, #4]
    }
 800158c:	bf00      	nop
 800158e:	e7fe      	b.n	800158e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <vPortExitCritical+0x54>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <vPortExitCritical+0x54>)
 8001598:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <vPortExitCritical+0x54>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <vPortExitCritical+0x46>
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80015ac:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	24000004 	.word	0x24000004

080015c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80015c0:	f3ef 8009 	mrs	r0, PSP
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <pxCurrentTCBConst>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f01e 0f10 	tst.w	lr, #16
 80015d0:	bf08      	it	eq
 80015d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80015d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015da:	6010      	str	r0, [r2, #0]
 80015dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80015e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015e4:	b672      	cpsid	i
 80015e6:	f380 8811 	msr	BASEPRI, r0
 80015ea:	f3bf 8f4f 	dsb	sy
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	b662      	cpsie	i
 80015f4:	f7ff fb60 	bl	8000cb8 <vTaskSwitchContext>
 80015f8:	f04f 0000 	mov.w	r0, #0
 80015fc:	f380 8811 	msr	BASEPRI, r0
 8001600:	bc09      	pop	{r0, r3}
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	6808      	ldr	r0, [r1, #0]
 8001606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800160a:	f01e 0f10 	tst.w	lr, #16
 800160e:	bf08      	it	eq
 8001610:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001614:	f380 8809 	msr	PSP, r0
 8001618:	f3bf 8f6f 	isb	sy
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <pxCurrentTCBConst>:
 8001620:	2400003c 	.word	0x2400003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop

08001628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
        __asm volatile
 800162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001632:	b672      	cpsid	i
 8001634:	f383 8811 	msr	BASEPRI, r3
 8001638:	f3bf 8f6f 	isb	sy
 800163c:	f3bf 8f4f 	dsb	sy
 8001640:	b662      	cpsie	i
 8001642:	607b      	str	r3, [r7, #4]
    }
 8001644:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001646:	f002 fc43 	bl	8003ed0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800164a:	f7ff fa99 	bl	8000b80 <xTaskIncrementTick>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001654:	f002 fc9a 	bl	8003f8c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <SysTick_Handler+0x54>)
 800165a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e001      	b.n	8001666 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8001662:	f002 fc77 	bl	8003f54 <SEGGER_SYSVIEW_RecordExitISR>
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
        __asm volatile
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	f383 8811 	msr	BASEPRI, r3
    }
 8001670:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000ed04 	.word	0xe000ed04

08001680 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <vPortSetupTimerInterrupt+0x34>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <vPortSetupTimerInterrupt+0x38>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <vPortSetupTimerInterrupt+0x3c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <vPortSetupTimerInterrupt+0x40>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	099b      	lsrs	r3, r3, #6
 800169c:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <vPortSetupTimerInterrupt+0x44>)
 800169e:	3b01      	subs	r3, #1
 80016a0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <vPortSetupTimerInterrupt+0x34>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010
 80016b8:	e000e018 	.word	0xe000e018
 80016bc:	24000010 	.word	0x24000010
 80016c0:	10624dd3 	.word	0x10624dd3
 80016c4:	e000e014 	.word	0xe000e014

080016c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80016c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80016d8 <vPortEnableVFP+0x10>
 80016cc:	6801      	ldr	r1, [r0, #0]
 80016ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80016d2:	6001      	str	r1, [r0, #0]
 80016d4:	4770      	bx	lr
 80016d6:	0000      	.short	0x0000
 80016d8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop

080016e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80016e6:	f3ef 8305 	mrs	r3, IPSR
 80016ea:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	d916      	bls.n	8001720 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <vPortValidateInterruptPriority+0x78>)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <vPortValidateInterruptPriority+0x7c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	7afa      	ldrb	r2, [r7, #11]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20c      	bcs.n	8001720 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8001706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170a:	b672      	cpsid	i
 800170c:	f383 8811 	msr	BASEPRI, r3
 8001710:	f3bf 8f6f 	isb	sy
 8001714:	f3bf 8f4f 	dsb	sy
 8001718:	b662      	cpsie	i
 800171a:	607b      	str	r3, [r7, #4]
    }
 800171c:	bf00      	nop
 800171e:	e7fe      	b.n	800171e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <vPortValidateInterruptPriority+0x80>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <vPortValidateInterruptPriority+0x84>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d90c      	bls.n	800174a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8001730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001734:	b672      	cpsid	i
 8001736:	f383 8811 	msr	BASEPRI, r3
 800173a:	f3bf 8f6f 	isb	sy
 800173e:	f3bf 8f4f 	dsb	sy
 8001742:	b662      	cpsie	i
 8001744:	603b      	str	r3, [r7, #0]
    }
 8001746:	bf00      	nop
 8001748:	e7fe      	b.n	8001748 <vPortValidateInterruptPriority+0x68>
    }
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e3f0 	.word	0xe000e3f0
 800175c:	24000168 	.word	0x24000168
 8001760:	e000ed0c 	.word	0xe000ed0c
 8001764:	2400016c 	.word	0x2400016c

08001768 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001774:	f7ff f950 	bl	8000a18 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <pvPortMalloc+0x1b4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001780:	f000 f93e 	bl	8001a00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001784:	4b66      	ldr	r3, [pc, #408]	; (8001920 <pvPortMalloc+0x1b8>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 80ab 	bne.w	80018e8 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d02f      	beq.n	80017f8 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001798:	2208      	movs	r2, #8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d229      	bcs.n	80017f8 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 80017a4:	2208      	movs	r2, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d023      	beq.n	80017fe <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f023 0307 	bic.w	r3, r3, #7
 80017bc:	3308      	adds	r3, #8
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d216      	bcs.n	80017f2 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f023 0307 	bic.w	r3, r3, #7
 80017ca:	3308      	adds	r3, #8
 80017cc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d012      	beq.n	80017fe <pvPortMalloc+0x96>
        __asm volatile
 80017d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017dc:	b672      	cpsid	i
 80017de:	f383 8811 	msr	BASEPRI, r3
 80017e2:	f3bf 8f6f 	isb	sy
 80017e6:	f3bf 8f4f 	dsb	sy
 80017ea:	b662      	cpsie	i
 80017ec:	617b      	str	r3, [r7, #20]
    }
 80017ee:	bf00      	nop
 80017f0:	e7fe      	b.n	80017f0 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017f6:	e002      	b.n	80017fe <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	e000      	b.n	8001800 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d070      	beq.n	80018e8 <pvPortMalloc+0x180>
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <pvPortMalloc+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	d86b      	bhi.n	80018e8 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001810:	4b45      	ldr	r3, [pc, #276]	; (8001928 <pvPortMalloc+0x1c0>)
 8001812:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001814:	4b44      	ldr	r3, [pc, #272]	; (8001928 <pvPortMalloc+0x1c0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800181a:	e004      	b.n	8001826 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	d903      	bls.n	8001838 <pvPortMalloc+0xd0>
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f1      	bne.n	800181c <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <pvPortMalloc+0x1b4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183e:	429a      	cmp	r2, r3
 8001840:	d052      	beq.n	80018e8 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2208      	movs	r2, #8
 8001848:	4413      	add	r3, r2
 800184a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1ad2      	subs	r2, r2, r3
 800185c:	2308      	movs	r3, #8
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	429a      	cmp	r2, r3
 8001862:	d921      	bls.n	80018a8 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <pvPortMalloc+0x128>
        __asm volatile
 8001876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187a:	b672      	cpsid	i
 800187c:	f383 8811 	msr	BASEPRI, r3
 8001880:	f3bf 8f6f 	isb	sy
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	b662      	cpsie	i
 800188a:	613b      	str	r3, [r7, #16]
    }
 800188c:	bf00      	nop
 800188e:	e7fe      	b.n	800188e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1ad2      	subs	r2, r2, r3
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018a2:	69b8      	ldr	r0, [r7, #24]
 80018a4:	f000 f90e 	bl	8001ac4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <pvPortMalloc+0x1bc>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <pvPortMalloc+0x1bc>)
 80018b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <pvPortMalloc+0x1bc>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <pvPortMalloc+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d203      	bcs.n	80018ca <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <pvPortMalloc+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a19      	ldr	r2, [pc, #100]	; (800192c <pvPortMalloc+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <pvPortMalloc+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <pvPortMalloc+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <pvPortMalloc+0x1c8>)
 80018e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80018e8:	f7ff f8a4 	bl	8000a34 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00c      	beq.n	8001910 <pvPortMalloc+0x1a8>
        __asm volatile
 80018f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fa:	b672      	cpsid	i
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	b662      	cpsie	i
 800190a:	60fb      	str	r3, [r7, #12]
    }
 800190c:	bf00      	nop
 800190e:	e7fe      	b.n	800190e <pvPortMalloc+0x1a6>
    return pvReturn;
 8001910:	69fb      	ldr	r3, [r7, #28]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24007178 	.word	0x24007178
 8001920:	2400718c 	.word	0x2400718c
 8001924:	2400717c 	.word	0x2400717c
 8001928:	24007170 	.word	0x24007170
 800192c:	24007180 	.word	0x24007180
 8001930:	24007184 	.word	0x24007184

08001934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d051      	beq.n	80019ea <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001946:	2308      	movs	r3, #8
 8001948:	425b      	negs	r3, r3
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4413      	add	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <vPortFree+0xc0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10c      	bne.n	800197c <vPortFree+0x48>
        __asm volatile
 8001962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001966:	b672      	cpsid	i
 8001968:	f383 8811 	msr	BASEPRI, r3
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	b662      	cpsie	i
 8001976:	60fb      	str	r3, [r7, #12]
    }
 8001978:	bf00      	nop
 800197a:	e7fe      	b.n	800197a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00c      	beq.n	800199e <vPortFree+0x6a>
        __asm volatile
 8001984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001988:	b672      	cpsid	i
 800198a:	f383 8811 	msr	BASEPRI, r3
 800198e:	f3bf 8f6f 	isb	sy
 8001992:	f3bf 8f4f 	dsb	sy
 8001996:	b662      	cpsie	i
 8001998:	60bb      	str	r3, [r7, #8]
    }
 800199a:	bf00      	nop
 800199c:	e7fe      	b.n	800199c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <vPortFree+0xc0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01e      	beq.n	80019ea <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11a      	bne.n	80019ea <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <vPortFree+0xc0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80019c4:	f7ff f828 	bl	8000a18 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <vPortFree+0xc4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <vPortFree+0xc4>)
 80019d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019d6:	6938      	ldr	r0, [r7, #16]
 80019d8:	f000 f874 	bl	8001ac4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <vPortFree+0xc8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <vPortFree+0xc8>)
 80019e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80019e6:	f7ff f825 	bl	8000a34 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2400718c 	.word	0x2400718c
 80019f8:	2400717c 	.word	0x2400717c
 80019fc:	24007188 	.word	0x24007188

08001a00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a06:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <prvHeapInit+0xac>)
 8001a0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3307      	adds	r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f023 0307 	bic.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <prvHeapInit+0xac>)
 8001a30:	4413      	add	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <prvHeapInit+0xb0>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <prvHeapInit+0xb0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f023 0307 	bic.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <prvHeapInit+0xb4>)
 8001a60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <prvHeapInit+0xb4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <prvHeapInit+0xb4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	1ad2      	subs	r2, r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <prvHeapInit+0xb4>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <prvHeapInit+0xb8>)
 8001a8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a09      	ldr	r2, [pc, #36]	; (8001abc <prvHeapInit+0xbc>)
 8001a96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <prvHeapInit+0xc0>)
 8001a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a9e:	601a      	str	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	24000170 	.word	0x24000170
 8001ab0:	24007170 	.word	0x24007170
 8001ab4:	24007178 	.word	0x24007178
 8001ab8:	24007180 	.word	0x24007180
 8001abc:	2400717c 	.word	0x2400717c
 8001ac0:	2400718c 	.word	0x2400718c

08001ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <prvInsertBlockIntoFreeList+0xac>)
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e002      	b.n	8001ad8 <prvInsertBlockIntoFreeList+0x14>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d8f7      	bhi.n	8001ad2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4413      	add	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d108      	bne.n	8001b06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	441a      	add	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	441a      	add	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d118      	bne.n	8001b4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <prvInsertBlockIntoFreeList+0xb0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d00d      	beq.n	8001b42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	441a      	add	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e008      	b.n	8001b54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <prvInsertBlockIntoFreeList+0xb0>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e003      	b.n	8001b54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d002      	beq.n	8001b62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	24007170 	.word	0x24007170
 8001b74:	24007178 	.word	0x24007178

08001b78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <_cbSendSystemDesc+0x14>)
 8001b7e:	f002 f951 	bl	8003e24 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001b82:	4803      	ldr	r0, [pc, #12]	; (8001b90 <_cbSendSystemDesc+0x18>)
 8001b84:	f002 f94e 	bl	8003e24 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	080091e0 	.word	0x080091e0
 8001b90:	08009210 	.word	0x08009210

08001b94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001ba2:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <SEGGER_SYSVIEW_Conf+0x28>)
 8001ba4:	f001 fd2e 	bl	8003604 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ba8:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 8001bac:	f001 fd70 	bl	8003690 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	24000010 	.word	0x24000010
 8001bb8:	08001b79 	.word	0x08001b79
 8001bbc:	080093d0 	.word	0x080093d0

08001bc0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	e033      	b.n	8001c34 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001bcc:	491e      	ldr	r1, [pc, #120]	; (8001c48 <_cbSendTaskList+0x88>)
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	491a      	ldr	r1, [pc, #104]	; (8001c48 <_cbSendTaskList+0x88>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3304      	adds	r3, #4
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	4c16      	ldr	r4, [pc, #88]	; (8001c48 <_cbSendTaskList+0x88>)
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4423      	add	r3, r4
 8001bfc:	3308      	adds	r3, #8
 8001bfe:	681c      	ldr	r4, [r3, #0]
 8001c00:	4d11      	ldr	r5, [pc, #68]	; (8001c48 <_cbSendTaskList+0x88>)
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	442b      	add	r3, r5
 8001c0e:	330c      	adds	r3, #12
 8001c10:	681d      	ldr	r5, [r3, #0]
 8001c12:	4e0d      	ldr	r6, [pc, #52]	; (8001c48 <_cbSendTaskList+0x88>)
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4433      	add	r3, r6
 8001c20:	3310      	adds	r3, #16
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	462b      	mov	r3, r5
 8001c28:	4622      	mov	r2, r4
 8001c2a:	f000 f979 	bl	8001f20 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3301      	adds	r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <_cbSendTaskList+0x8c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3c6      	bcc.n	8001bcc <_cbSendTaskList+0xc>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c48:	24007190 	.word	0x24007190
 8001c4c:	24007230 	.word	0x24007230

08001c50 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001c58:	f7fe ff80 	bl	8000b5c <xTaskGetTickCountFromISR>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	469a      	mov	sl, r3
 8001c62:	4693      	mov	fp, r2
 8001c64:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	f04f 0a00 	mov.w	sl, #0
 8001c74:	f04f 0b00 	mov.w	fp, #0
 8001c78:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001c7c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001c80:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001c84:	4652      	mov	r2, sl
 8001c86:	465b      	mov	r3, fp
 8001c88:	1a14      	subs	r4, r2, r0
 8001c8a:	eb63 0501 	sbc.w	r5, r3, r1
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	00ab      	lsls	r3, r5, #2
 8001c98:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001c9c:	00a2      	lsls	r2, r4, #2
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	eb14 0800 	adds.w	r8, r4, r0
 8001ca6:	eb45 0901 	adc.w	r9, r5, r1
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cbe:	4690      	mov	r8, r2
 8001cc0:	4699      	mov	r9, r3
 8001cc2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001cd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001ce6:	2205      	movs	r2, #5
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <SYSVIEW_AddTask+0xc0>)
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	f007 fa42 	bl	8009174 <memcmp>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d04b      	beq.n	8001d8e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <SYSVIEW_AddTask+0xc4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b07      	cmp	r3, #7
 8001cfc:	d903      	bls.n	8001d06 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001cfe:	4828      	ldr	r0, [pc, #160]	; (8001da0 <SYSVIEW_AddTask+0xc8>)
 8001d00:	f002 fba2 	bl	8004448 <SEGGER_SYSVIEW_Warn>
    return;
 8001d04:	e044      	b.n	8001d90 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <SYSVIEW_AddTask+0xc4>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4926      	ldr	r1, [pc, #152]	; (8001da4 <SYSVIEW_AddTask+0xcc>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <SYSVIEW_AddTask+0xc4>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4921      	ldr	r1, [pc, #132]	; (8001da4 <SYSVIEW_AddTask+0xcc>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <SYSVIEW_AddTask+0xc4>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	491b      	ldr	r1, [pc, #108]	; (8001da4 <SYSVIEW_AddTask+0xcc>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3308      	adds	r3, #8
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <SYSVIEW_AddTask+0xc4>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4916      	ldr	r1, [pc, #88]	; (8001da4 <SYSVIEW_AddTask+0xcc>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	330c      	adds	r3, #12
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <SYSVIEW_AddTask+0xc4>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4910      	ldr	r1, [pc, #64]	; (8001da4 <SYSVIEW_AddTask+0xcc>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <SYSVIEW_AddTask+0xc4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <SYSVIEW_AddTask+0xc4>)
 8001d7a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f8ca 	bl	8001f20 <SYSVIEW_SendTaskInfo>
 8001d8c:	e000      	b.n	8001d90 <SYSVIEW_AddTask+0xb8>
    return;
 8001d8e:	bf00      	nop

}
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	08009220 	.word	0x08009220
 8001d9c:	24007230 	.word	0x24007230
 8001da0:	08009228 	.word	0x08009228
 8001da4:	24007190 	.word	0x24007190

08001da8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80ab 	beq.w	8001f10 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e00d      	b.n	8001ddc <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8001dc0:	4956      	ldr	r1, [pc, #344]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d008      	beq.n	8001de8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3ec      	bcc.n	8001dc0 <SYSVIEW_DeleteTask+0x18>
 8001de6:	e000      	b.n	8001dea <SYSVIEW_DeleteTask+0x42>
      break;
 8001de8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8001dea:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d111      	bne.n	8001e1a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001e02:	4413      	add	r3, r2
 8001e04:	2214      	movs	r2, #20
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f007 f9d1 	bl	80091b0 <memset>
    _NumTasks--;
 8001e0e:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	4a40      	ldr	r2, [pc, #256]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e07b      	b.n	8001f12 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8001e1a:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d276      	bcs.n	8001f12 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8001e24:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	493c      	ldr	r1, [pc, #240]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	4838      	ldr	r0, [pc, #224]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4403      	add	r3, r0
 8001e46:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	4933      	ldr	r1, [pc, #204]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	482f      	ldr	r0, [pc, #188]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4403      	add	r3, r0
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	4929      	ldr	r1, [pc, #164]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3308      	adds	r3, #8
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	4825      	ldr	r0, [pc, #148]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4403      	add	r3, r0
 8001e94:	3308      	adds	r3, #8
 8001e96:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	491f      	ldr	r1, [pc, #124]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	330c      	adds	r3, #12
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	481b      	ldr	r0, [pc, #108]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4403      	add	r3, r0
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	4915      	ldr	r1, [pc, #84]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3310      	adds	r3, #16
 8001ed4:	6819      	ldr	r1, [r3, #0]
 8001ed6:	4811      	ldr	r0, [pc, #68]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4403      	add	r3, r0
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <SYSVIEW_DeleteTask+0x174>)
 8001ef8:	4413      	add	r3, r2
 8001efa:	2214      	movs	r2, #20
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f007 f956 	bl	80091b0 <memset>
    _NumTasks--;
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	4a03      	ldr	r2, [pc, #12]	; (8001f18 <SYSVIEW_DeleteTask+0x170>)
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e000      	b.n	8001f12 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8001f10:	bf00      	nop
  }
}
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	24007230 	.word	0x24007230
 8001f1c:	24007190 	.word	0x24007190

08001f20 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2214      	movs	r2, #20
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f007 f93a 	bl	80091b0 <memset>
  TaskInfo.TaskID     = TaskID;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 fe6d 	bl	8003c34 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001ffa:	f002 fa81 	bl	8004500 <SEGGER_SYSVIEW_IsStarted>
 8001ffe:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002006:	f001 fc99 	bl	800393c <SEGGER_SYSVIEW_Start>
  }
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <_cbOnUARTRx+0x3c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d806      	bhi.n	8002034 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <_cbOnUARTRx+0x3c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_cbOnUARTRx+0x3c>)
 8002030:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002032:	e009      	b.n	8002048 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002034:	f7ff ffde 	bl	8001ff4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <_cbOnUARTRx+0x3c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4618      	mov	r0, r3
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	2201      	movs	r2, #1
 8002042:	4619      	mov	r1, r3
 8002044:	f000 fb9e 	bl	8002784 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002048:	bf00      	nop
}
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	24000008 	.word	0x24000008

08002054 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <_cbOnUARTTx+0x5c>)
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d80f      	bhi.n	8002084 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <_cbOnUARTTx+0x5c>)
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	461a      	mov	r2, r3
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <_cbOnUARTTx+0x60>)
 800206c:	5c9a      	ldrb	r2, [r3, r2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <_cbOnUARTTx+0x5c>)
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <_cbOnUARTTx+0x5c>)
 800207c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
    goto Done;
 8002082:	e00f      	b.n	80020a4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <_cbOnUARTTx+0x5c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fa1d 	bl	80024cc <SEGGER_RTT_ReadUpBufferNoLock>
 8002092:	4603      	mov	r3, r0
 8002094:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	da02      	bge.n	80020a2 <_cbOnUARTTx+0x4e>
    r = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e000      	b.n	80020a4 <_cbOnUARTTx+0x50>
  }
Done:
 80020a2:	bf00      	nop
  return r;
 80020a4:	68fb      	ldr	r3, [r7, #12]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	24000008 	.word	0x24000008
 80020b4:	080093d8 	.word	0x080093d8

080020b8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <SEGGER_UART_init+0x1c>)
 80020c2:	4905      	ldr	r1, [pc, #20]	; (80020d8 <SEGGER_UART_init+0x20>)
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f865 	bl	8002194 <HIF_UART_Init>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	08002015 	.word	0x08002015
 80020d8:	08002055 	.word	0x08002055

080020dc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <USART2_IRQHandler+0x80>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d011      	beq.n	8002116 <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <USART2_IRQHandler+0x84>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 030b 	and.w	r3, r3, #11
 8002100:	2b00      	cmp	r3, #0
 8002102:	d108      	bne.n	8002116 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <USART2_IRQHandler+0x88>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <USART2_IRQHandler+0x88>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	79fa      	ldrb	r2, [r7, #7]
 8002112:	4610      	mov	r0, r2
 8002114:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01a      	beq.n	8002156 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <USART2_IRQHandler+0x8c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d015      	beq.n	8002154 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <USART2_IRQHandler+0x8c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	1dfa      	adds	r2, r7, #7
 800212e:	4610      	mov	r0, r2
 8002130:	4798      	blx	r3
 8002132:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <USART2_IRQHandler+0x90>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <USART2_IRQHandler+0x90>)
 8002140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e006      	b.n	8002156 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <USART2_IRQHandler+0x80>)
 800214a:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <USART2_IRQHandler+0x94>)
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e000      	b.n	8002156 <USART2_IRQHandler+0x7a>
      return;
 8002154:	bf00      	nop
    }
  }
}
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	4000441c 	.word	0x4000441c
 8002160:	40004424 	.word	0x40004424
 8002164:	24007234 	.word	0x24007234
 8002168:	24007238 	.word	0x24007238
 800216c:	40004400 	.word	0x40004400
 8002170:	40004428 	.word	0x40004428

08002174 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800217e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40004400 	.word	0x40004400

08002194 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HIF_UART_Init+0xc8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <HIF_UART_Init+0xc8>)
 80021a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021aa:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HIF_UART_Init+0xcc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <HIF_UART_Init+0xcc>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HIF_UART_Init+0xd0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021c4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80021cc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HIF_UART_Init+0xd0>)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HIF_UART_Init+0xd4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80021e8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80021ea:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HIF_UART_Init+0xd4>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HIF_UART_Init+0xd8>)
 80021f2:	f248 022d 	movw	r2, #32813	; 0x802d
 80021f6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HIF_UART_Init+0xdc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HIF_UART_Init+0xe0>)
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800220a:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <HIF_UART_Init+0xe4>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	3301      	adds	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002222:	d302      	bcc.n	800222a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002224:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002228:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HIF_UART_Init+0xe8>)
 8002236:	b29b      	uxth	r3, r3
 8002238:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HIF_UART_Init+0xec>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002240:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HIF_UART_Init+0xf0>)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002246:	2106      	movs	r1, #6
 8002248:	2026      	movs	r0, #38	; 0x26
 800224a:	f7ff fea9 	bl	8001fa0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800224e:	2026      	movs	r0, #38	; 0x26
 8002250:	f7ff fe88 	bl	8001f64 <__NVIC_EnableIRQ>
}
 8002254:	bf00      	nop
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	580244e8 	.word	0x580244e8
 8002260:	580244e0 	.word	0x580244e0
 8002264:	58020020 	.word	0x58020020
 8002268:	58020000 	.word	0x58020000
 800226c:	40004400 	.word	0x40004400
 8002270:	40004404 	.word	0x40004404
 8002274:	40004408 	.word	0x40004408
 8002278:	0e4e1c00 	.word	0x0e4e1c00
 800227c:	4000440c 	.word	0x4000440c
 8002280:	24007234 	.word	0x24007234
 8002284:	24007238 	.word	0x24007238

08002288 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <_DoInit+0xa0>)
 8002290:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002292:	22a8      	movs	r2, #168	; 0xa8
 8002294:	2100      	movs	r1, #0
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	f006 ff8a 	bl	80091b0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2203      	movs	r2, #3
 80022a0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2203      	movs	r2, #3
 80022a6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4a20      	ldr	r2, [pc, #128]	; (800232c <_DoInit+0xa4>)
 80022ac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <_DoInit+0xa8>)
 80022b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <_DoInit+0xa4>)
 80022d2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <_DoInit+0xac>)
 80022d8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2210      	movs	r2, #16
 80022de:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80022f2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	e00c      	b.n	8002316 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1c3 030f 	rsb	r3, r3, #15
 8002302:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <_DoInit+0xb0>)
 8002304:	5cd1      	ldrb	r1, [r2, r3]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	460a      	mov	r2, r1
 800230e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3301      	adds	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d9ef      	bls.n	80022fc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800231c:	f3bf 8f5f 	dmb	sy
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2400723c 	.word	0x2400723c
 800232c:	08009278 	.word	0x08009278
 8002330:	240072e4 	.word	0x240072e4
 8002334:	240076e4 	.word	0x240076e4
 8002338:	080093dc 	.word	0x080093dc

0800233c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	d905      	bls.n	800236c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e007      	b.n	800237c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69b9      	ldr	r1, [r7, #24]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	1acb      	subs	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3b01      	subs	r3, #1
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	4293      	cmp	r3, r2
 8002388:	bf28      	it	cs
 800238a:	4613      	movcs	r3, r2
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4293      	cmp	r3, r2
 8002394:	bf28      	it	cs
 8002396:	4613      	movcs	r3, r2
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	6978      	ldr	r0, [r7, #20]
 80023aa:	f006 fef3 	bl	8009194 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80023ae:	6a3a      	ldr	r2, [r7, #32]
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	4413      	add	r3, r2
 80023b4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	4413      	add	r3, r2
 80023bc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	4413      	add	r3, r2
 80023cc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d101      	bne.n	80023dc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80023dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1b2      	bne.n	8002352 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80023ec:	6a3b      	ldr	r3, [r7, #32]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b088      	sub	sp, #32
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d911      	bls.n	800243e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	6938      	ldr	r0, [r7, #16]
 800242a:	f006 feb3 	bl	8009194 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800242e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	441a      	add	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800243c:	e01f      	b.n	800247e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	4413      	add	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	6938      	ldr	r0, [r7, #16]
 8002452:	f006 fe9f 	bl	8009194 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4619      	mov	r1, r3
 800246e:	6938      	ldr	r0, [r7, #16]
 8002470:	f006 fe90 	bl	8009194 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002474:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	60da      	str	r2, [r3, #12]
}
 800247e:	bf00      	nop
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002486:	b480      	push	{r7}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d808      	bhi.n	80024b4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad2      	subs	r2, r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	3b01      	subs	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e004      	b.n	80024be <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80024be:	697b      	ldr	r3, [r7, #20]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	; 0x30
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80024d8:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80024e6:	f7ff fecf 	bl	8002288 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4a37      	ldr	r2, [pc, #220]	; (80025d4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80024f8:	4413      	add	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	429a      	cmp	r2, r3
 8002516:	d92b      	bls.n	8002570 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4293      	cmp	r3, r2
 8002528:	bf28      	it	cs
 800252a:	4613      	movcs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	4413      	add	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800253e:	f006 fe29 	bl	8009194 <memcpy>
    NumBytesRead += NumBytesRem;
 8002542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4413      	add	r3, r2
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	4413      	add	r3, r2
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800255a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	4413      	add	r3, r2
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002568:	429a      	cmp	r2, r3
 800256a:	d101      	bne.n	8002570 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4293      	cmp	r3, r2
 800257e:	bf28      	it	cs
 8002580:	4613      	movcs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d019      	beq.n	80025be <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	4413      	add	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	6939      	ldr	r1, [r7, #16]
 8002598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800259a:	f006 fdfb 	bl	8009194 <memcpy>
    NumBytesRead += NumBytesRem;
 800259e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4413      	add	r3, r2
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4413      	add	r3, r2
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80025b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4413      	add	r3, r2
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025c8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3730      	adds	r7, #48	; 0x30
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	2400723c 	.word	0x2400723c

080025d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80025e4:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <SEGGER_RTT_ReadNoLock+0x108>)
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80025f2:	f7ff fe49 	bl	8002288 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	3360      	adds	r3, #96	; 0x60
 8002602:	4a37      	ldr	r2, [pc, #220]	; (80026e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8002604:	4413      	add	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800261c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	d92b      	bls.n	800267c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4293      	cmp	r3, r2
 8002634:	bf28      	it	cs
 8002636:	4613      	movcs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	4413      	add	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	6939      	ldr	r1, [r7, #16]
 8002648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800264a:	f006 fda3 	bl	8009194 <memcpy>
    NumBytesRead += NumBytesRem;
 800264e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4413      	add	r3, r2
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4413      	add	r3, r2
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4413      	add	r3, r2
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002674:	429a      	cmp	r2, r3
 8002676:	d101      	bne.n	800267c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002678:	2300      	movs	r3, #0
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4293      	cmp	r3, r2
 800268a:	bf28      	it	cs
 800268c:	4613      	movcs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d019      	beq.n	80026ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	4413      	add	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	6939      	ldr	r1, [r7, #16]
 80026a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026a6:	f006 fd75 	bl	8009194 <memcpy>
    NumBytesRead += NumBytesRem;
 80026aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	4413      	add	r3, r2
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80026c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4413      	add	r3, r2
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3730      	adds	r7, #48	; 0x30
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2400723c 	.word	0x2400723c

080026e4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	3360      	adds	r3, #96	; 0x60
 8002700:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002702:	4413      	add	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d029      	beq.n	8002762 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800270e:	2b02      	cmp	r3, #2
 8002710:	d82e      	bhi.n	8002770 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002716:	2b01      	cmp	r3, #1
 8002718:	d013      	beq.n	8002742 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800271a:	e029      	b.n	8002770 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f7ff feb2 	bl	8002486 <_GetAvailWriteSpace>
 8002722:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d202      	bcs.n	8002732 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002730:	e021      	b.n	8002776 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	69b9      	ldr	r1, [r7, #24]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff fe5b 	bl	80023f6 <_WriteNoCheck>
    break;
 8002740:	e019      	b.n	8002776 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff fe9f 	bl	8002486 <_GetAvailWriteSpace>
 8002748:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4293      	cmp	r3, r2
 8002750:	bf28      	it	cs
 8002752:	4613      	movcs	r3, r2
 8002754:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	69b9      	ldr	r1, [r7, #24]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff fe4b 	bl	80023f6 <_WriteNoCheck>
    break;
 8002760:	e009      	b.n	8002776 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	69b9      	ldr	r1, [r7, #24]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff fde8 	bl	800233c <_WriteBlocking>
 800276c:	61f8      	str	r0, [r7, #28]
    break;
 800276e:	e002      	b.n	8002776 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
    break;
 8002774:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002776:	69fb      	ldr	r3, [r7, #28]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3720      	adds	r7, #32
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	2400723c 	.word	0x2400723c

08002784 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800279e:	f7ff fd73 	bl	8002288 <_DoInit>
  SEGGER_RTT_LOCK();
 80027a2:	f3ef 8311 	mrs	r3, BASEPRI
 80027a6:	f04f 0120 	mov.w	r1, #32
 80027aa:	f381 8811 	msr	BASEPRI, r1
 80027ae:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff ff95 	bl	80026e4 <SEGGER_RTT_WriteDownBufferNoLock>
 80027ba:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80027c2:	697b      	ldr	r3, [r7, #20]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2400723c 	.word	0x2400723c

080027d0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80027ec:	f7ff fd4c 	bl	8002288 <_DoInit>
  SEGGER_RTT_LOCK();
 80027f0:	f3ef 8311 	mrs	r3, BASEPRI
 80027f4:	f04f 0120 	mov.w	r1, #32
 80027f8:	f381 8811 	msr	BASEPRI, r1
 80027fc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80027fe:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002800:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002806:	6939      	ldr	r1, [r7, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	3304      	adds	r3, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3301      	adds	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	429a      	cmp	r2, r3
 800282c:	dbeb      	blt.n	8002806 <SEGGER_RTT_AllocUpBuffer+0x36>
 800282e:	e000      	b.n	8002832 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002830:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	429a      	cmp	r2, r3
 800283a:	da3f      	bge.n	80028bc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800283c:	6939      	ldr	r1, [r7, #16]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002850:	6939      	ldr	r1, [r7, #16]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3304      	adds	r3, #4
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002866:	6939      	ldr	r1, [r7, #16]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3320      	adds	r3, #32
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800287a:	6939      	ldr	r1, [r7, #16]
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	3328      	adds	r3, #40	; 0x28
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800288e:	6939      	ldr	r1, [r7, #16]
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	3324      	adds	r3, #36	; 0x24
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80028a2:	6939      	ldr	r1, [r7, #16]
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	332c      	adds	r3, #44	; 0x2c
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80028b6:	f3bf 8f5f 	dmb	sy
 80028ba:	e002      	b.n	80028c2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
 80028c0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80028c8:	69fb      	ldr	r3, [r7, #28]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2400723c 	.word	0x2400723c

080028d8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80028f4:	f7ff fcc8 	bl	8002288 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80028fa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d82c      	bhi.n	800295c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002902:	f3ef 8311 	mrs	r3, BASEPRI
 8002906:	f04f 0120 	mov.w	r1, #32
 800290a:	f381 8811 	msr	BASEPRI, r1
 800290e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	3360      	adds	r3, #96	; 0x60
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800294c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	e002      	b.n	8002962 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002964:	4618      	mov	r0, r3
 8002966:	3728      	adds	r7, #40	; 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2400723c 	.word	0x2400723c

08002970 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00f      	beq.n	80029a6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002986:	e002      	b.n	800298e <_EncodeStr+0x1e>
      Len++;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3301      	adds	r3, #1
 800298c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f6      	bne.n	8002988 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d901      	bls.n	80029a6 <_EncodeStr+0x36>
      Len = Limit;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2bfe      	cmp	r3, #254	; 0xfe
 80029aa:	d806      	bhi.n	80029ba <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	60fa      	str	r2, [r7, #12]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e011      	b.n	80029de <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	60fa      	str	r2, [r7, #12]
 80029c0:	22ff      	movs	r2, #255	; 0xff
 80029c2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	60fa      	str	r2, [r7, #12]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	0a19      	lsrs	r1, r3, #8
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	60fa      	str	r2, [r7, #12]
 80029da:	b2ca      	uxtb	r2, r1
 80029dc:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80029e2:	e00a      	b.n	80029fa <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	1c53      	adds	r3, r2, #1
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1c59      	adds	r1, r3, #1
 80029ee:	60f9      	str	r1, [r7, #12]
 80029f0:	7812      	ldrb	r2, [r2, #0]
 80029f2:	701a      	strb	r2, [r3, #0]
    n++;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3301      	adds	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3f0      	bcc.n	80029e4 <_EncodeStr+0x74>
  }
  return pPayload;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3307      	adds	r3, #7
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002a2e:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <_HandleIncomingPacket+0xdc>)
 8002a30:	7e1b      	ldrb	r3, [r3, #24]
 8002a32:	4618      	mov	r0, r3
 8002a34:	1cfb      	adds	r3, r7, #3
 8002a36:	2201      	movs	r2, #1
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7ff fdcd 	bl	80025d8 <SEGGER_RTT_ReadNoLock>
 8002a3e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d052      	beq.n	8002aec <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d031      	beq.n	8002ab0 <_HandleIncomingPacket+0x88>
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	dc40      	bgt.n	8002ad2 <_HandleIncomingPacket+0xaa>
 8002a50:	2b07      	cmp	r3, #7
 8002a52:	dc15      	bgt.n	8002a80 <_HandleIncomingPacket+0x58>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	dd3c      	ble.n	8002ad2 <_HandleIncomingPacket+0xaa>
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d839      	bhi.n	8002ad2 <_HandleIncomingPacket+0xaa>
 8002a5e:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <_HandleIncomingPacket+0x3c>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002a87 	.word	0x08002a87
 8002a68:	08002a8d 	.word	0x08002a8d
 8002a6c:	08002a93 	.word	0x08002a93
 8002a70:	08002a99 	.word	0x08002a99
 8002a74:	08002a9f 	.word	0x08002a9f
 8002a78:	08002aa5 	.word	0x08002aa5
 8002a7c:	08002aab 	.word	0x08002aab
 8002a80:	2b7f      	cmp	r3, #127	; 0x7f
 8002a82:	d035      	beq.n	8002af0 <_HandleIncomingPacket+0xc8>
 8002a84:	e025      	b.n	8002ad2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002a86:	f000 ff59 	bl	800393c <SEGGER_SYSVIEW_Start>
      break;
 8002a8a:	e036      	b.n	8002afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002a8c:	f001 f812 	bl	8003ab4 <SEGGER_SYSVIEW_Stop>
      break;
 8002a90:	e033      	b.n	8002afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002a92:	f001 f9eb 	bl	8003e6c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002a96:	e030      	b.n	8002afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002a98:	f001 f9b0 	bl	8003dfc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002a9c:	e02d      	b.n	8002afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002a9e:	f001 f82f 	bl	8003b00 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002aa2:	e02a      	b.n	8002afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002aa4:	f001 fc7e 	bl	80043a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002aa8:	e027      	b.n	8002afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002aaa:	f001 fc5d 	bl	8004368 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002aae:	e024      	b.n	8002afa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <_HandleIncomingPacket+0xdc>)
 8002ab2:	7e1b      	ldrb	r3, [r3, #24]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	1cfb      	adds	r3, r7, #3
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7ff fd8c 	bl	80025d8 <SEGGER_RTT_ReadNoLock>
 8002ac0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 fbcc 	bl	8004268 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002ad0:	e010      	b.n	8002af4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da0e      	bge.n	8002af8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <_HandleIncomingPacket+0xdc>)
 8002adc:	7e1b      	ldrb	r3, [r3, #24]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	1cfb      	adds	r3, r7, #3
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7ff fd77 	bl	80025d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002aea:	e005      	b.n	8002af8 <_HandleIncomingPacket+0xd0>
    }
  }
 8002aec:	bf00      	nop
 8002aee:	e004      	b.n	8002afa <_HandleIncomingPacket+0xd2>
      break;
 8002af0:	bf00      	nop
 8002af2:	e002      	b.n	8002afa <_HandleIncomingPacket+0xd2>
      break;
 8002af4:	bf00      	nop
 8002af6:	e000      	b.n	8002afa <_HandleIncomingPacket+0xd2>
      break;
 8002af8:	bf00      	nop
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	2407f2fc 	.word	0x2407f2fc

08002b08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	; 0x30
 8002b0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002b0e:	2301      	movs	r3, #1
 8002b10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	3301      	adds	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <_TrySendOverflowPacket+0xe0>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b22:	e00b      	b.n	8002b3c <_TrySendOverflowPacket+0x34>
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	1c59      	adds	r1, r3, #1
 8002b2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	09db      	lsrs	r3, r3, #7
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b40:	d8f0      	bhi.n	8002b24 <_TrySendOverflowPacket+0x1c>
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <_TrySendOverflowPacket+0xe4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <_TrySendOverflowPacket+0xe0>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	e00b      	b.n	8002b84 <_TrySendOverflowPacket+0x7c>
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	6279      	str	r1, [r7, #36]	; 0x24
 8002b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	09db      	lsrs	r3, r3, #7
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	2b7f      	cmp	r3, #127	; 0x7f
 8002b88:	d8f0      	bhi.n	8002b6c <_TrySendOverflowPacket+0x64>
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8002b90:	6a3a      	ldr	r2, [r7, #32]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <_TrySendOverflowPacket+0xe0>)
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7fd fb98 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002bb4:	f7ff fade 	bl	8002174 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <_TrySendOverflowPacket+0xe0>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <_TrySendOverflowPacket+0xe0>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <_TrySendOverflowPacket+0xe0>)
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e004      	b.n	8002bdc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <_TrySendOverflowPacket+0xe0>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <_TrySendOverflowPacket+0xe0>)
 8002bda:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002bdc:	693b      	ldr	r3, [r7, #16]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3730      	adds	r7, #48	; 0x30
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2407f2fc 	.word	0x2407f2fc
 8002bec:	e0001004 	.word	0xe0001004

08002bf0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002bfc:	4b96      	ldr	r3, [pc, #600]	; (8002e58 <_SendPacket+0x268>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d010      	beq.n	8002c26 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002c04:	4b94      	ldr	r3, [pc, #592]	; (8002e58 <_SendPacket+0x268>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8130 	beq.w	8002e6e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002c0e:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <_SendPacket+0x268>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d109      	bne.n	8002c2a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002c16:	f7ff ff77 	bl	8002b08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002c1a:	4b8f      	ldr	r3, [pc, #572]	; (8002e58 <_SendPacket+0x268>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	f040 8127 	bne.w	8002e72 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8002c24:	e001      	b.n	8002c2a <_SendPacket+0x3a>
    goto Send;
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <_SendPacket+0x3c>
Send:
 8002c2a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b1f      	cmp	r3, #31
 8002c30:	d809      	bhi.n	8002c46 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002c32:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <_SendPacket+0x268>)
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 8118 	bne.w	8002e76 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b17      	cmp	r3, #23
 8002c4a:	d807      	bhi.n	8002c5c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e0c4      	b.n	8002de6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b7f      	cmp	r3, #127	; 0x7f
 8002c68:	d912      	bls.n	8002c90 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	09da      	lsrs	r2, r3, #7
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	3a01      	subs	r2, #1
 8002c82:	60fa      	str	r2, [r7, #12]
 8002c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e006      	b.n	8002c9e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b7e      	cmp	r3, #126	; 0x7e
 8002ca2:	d807      	bhi.n	8002cb4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e098      	b.n	8002de6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cba:	d212      	bcs.n	8002ce2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	09da      	lsrs	r2, r3, #7
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	3a01      	subs	r2, #1
 8002cd4:	60fa      	str	r2, [r7, #12]
 8002cd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e081      	b.n	8002de6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ce8:	d21d      	bcs.n	8002d26 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0b9a      	lsrs	r2, r3, #14
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	09db      	lsrs	r3, r3, #7
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	3a01      	subs	r2, #1
 8002d04:	60fa      	str	r2, [r7, #12]
 8002d06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	3a01      	subs	r2, #1
 8002d18:	60fa      	str	r2, [r7, #12]
 8002d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e05f      	b.n	8002de6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d2c:	d228      	bcs.n	8002d80 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0d5a      	lsrs	r2, r3, #21
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0b9b      	lsrs	r3, r3, #14
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	3a01      	subs	r2, #1
 8002d48:	60fa      	str	r2, [r7, #12]
 8002d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	09db      	lsrs	r3, r3, #7
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	60fa      	str	r2, [r7, #12]
 8002d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	3a01      	subs	r2, #1
 8002d72:	60fa      	str	r2, [r7, #12]
 8002d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e032      	b.n	8002de6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0f1a      	lsrs	r2, r3, #28
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0d5b      	lsrs	r3, r3, #21
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	60fa      	str	r2, [r7, #12]
 8002d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0b9b      	lsrs	r3, r3, #14
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	3a01      	subs	r2, #1
 8002db0:	60fa      	str	r2, [r7, #12]
 8002db2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	09db      	lsrs	r3, r3, #7
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	3a01      	subs	r2, #1
 8002dc6:	60fa      	str	r2, [r7, #12]
 8002dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	60fa      	str	r2, [r7, #12]
 8002ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <_SendPacket+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002dec:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <_SendPacket+0x268>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	623b      	str	r3, [r7, #32]
 8002dfe:	e00b      	b.n	8002e18 <_SendPacket+0x228>
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	6279      	str	r1, [r7, #36]	; 0x24
 8002e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	09db      	lsrs	r3, r3, #7
 8002e16:	623b      	str	r3, [r7, #32]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e1c:	d8f0      	bhi.n	8002e00 <_SendPacket+0x210>
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	627a      	str	r2, [r7, #36]	; 0x24
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <_SendPacket+0x268>)
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	4618      	mov	r0, r3
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68f9      	ldr	r1, [r7, #12]
 8002e3e:	f7fd fa4f 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002e42:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002e44:	f7ff f996 	bl	8002174 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002e4e:	4a02      	ldr	r2, [pc, #8]	; (8002e58 <_SendPacket+0x268>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	60d3      	str	r3, [r2, #12]
 8002e54:	e010      	b.n	8002e78 <_SendPacket+0x288>
 8002e56:	bf00      	nop
 8002e58:	2407f2fc 	.word	0x2407f2fc
 8002e5c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <_SendPacket+0x2d8>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <_SendPacket+0x2d8>)
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e004      	b.n	8002e78 <_SendPacket+0x288>
    goto SendDone;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <_SendPacket+0x288>
      goto SendDone;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <_SendPacket+0x288>
      goto SendDone;
 8002e76:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <_SendPacket+0x2d8>)
 8002e7a:	7e1b      	ldrb	r3, [r3, #24]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <_SendPacket+0x2dc>)
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	336c      	adds	r3, #108	; 0x6c
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <_SendPacket+0x2d8>)
 8002e90:	7e1b      	ldrb	r3, [r3, #24]
 8002e92:	4618      	mov	r0, r3
 8002e94:	490d      	ldr	r1, [pc, #52]	; (8002ecc <_SendPacket+0x2dc>)
 8002e96:	4603      	mov	r3, r0
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4403      	add	r3, r0
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3370      	adds	r3, #112	; 0x70
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d00b      	beq.n	8002ec0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <_SendPacket+0x2d8>)
 8002eaa:	789b      	ldrb	r3, [r3, #2]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <_SendPacket+0x2d8>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002eb6:	f7ff fdb7 	bl	8002a28 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002eba:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <_SendPacket+0x2d8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002ec0:	bf00      	nop
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2407f2fc 	.word	0x2407f2fc
 8002ecc:	2400723c 	.word	0x2400723c

08002ed0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d80a      	bhi.n	8002f00 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	1c59      	adds	r1, r3, #1
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6051      	str	r1, [r2, #4]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b80      	cmp	r3, #128	; 0x80
 8002f06:	d15a      	bne.n	8002fbe <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	623b      	str	r3, [r7, #32]
 8002f28:	e00b      	b.n	8002f42 <_StoreChar+0x72>
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	1c59      	adds	r1, r3, #1
 8002f32:	6279      	str	r1, [r7, #36]	; 0x24
 8002f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	09db      	lsrs	r3, r3, #7
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	2b7f      	cmp	r3, #127	; 0x7f
 8002f46:	d8f0      	bhi.n	8002f2a <_StoreChar+0x5a>
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	627a      	str	r2, [r7, #36]	; 0x24
 8002f4e:	6a3a      	ldr	r2, [r7, #32]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e00b      	b.n	8002f7a <_StoreChar+0xaa>
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	61f9      	str	r1, [r7, #28]
 8002f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	09db      	lsrs	r3, r3, #7
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f7e:	d8f0      	bhi.n	8002f62 <_StoreChar+0x92>
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	61fa      	str	r2, [r7, #28]
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	221a      	movs	r2, #26
 8002f96:	6939      	ldr	r1, [r7, #16]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fe29 	bl	8002bf0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fd34 	bl	8002a10 <_PreparePacket>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3728      	adds	r7, #40	; 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002fe2:	e007      	b.n	8002ff4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	623b      	str	r3, [r7, #32]
    Width++;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002ff4:	6a3a      	ldr	r2, [r7, #32]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d2f3      	bcs.n	8002fe4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	429a      	cmp	r2, r3
 8003002:	d901      	bls.n	8003008 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11f      	bne.n	8003052 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01c      	beq.n	8003052 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <_PrintUnsigned+0x66>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <_PrintUnsigned+0x66>
        c = '0';
 8003028:	2330      	movs	r3, #48	; 0x30
 800302a:	76fb      	strb	r3, [r7, #27]
 800302c:	e001      	b.n	8003032 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800302e:	2320      	movs	r3, #32
 8003030:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003032:	e007      	b.n	8003044 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	3b01      	subs	r3, #1
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	4619      	mov	r1, r3
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff ff46 	bl	8002ed0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <_PrintUnsigned+0x8a>
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	429a      	cmp	r2, r3
 8003050:	d3f0      	bcc.n	8003034 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d903      	bls.n	8003060 <_PrintUnsigned+0x98>
      NumDigits--;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	3b01      	subs	r3, #1
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	e009      	b.n	8003074 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	429a      	cmp	r2, r3
 8003070:	d200      	bcs.n	8003074 <_PrintUnsigned+0xac>
        break;
 8003072:	e005      	b.n	8003080 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800307e:	e7e8      	b.n	8003052 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <_PrintUnsigned+0x128>)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	4413      	add	r3, r2
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4619      	mov	r1, r3
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff ff14 	bl	8002ed0 <_StoreChar>
    Digit /= Base;
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e3      	bne.n	8003080 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d011      	beq.n	80030e6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80030c8:	e006      	b.n	80030d8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	3b01      	subs	r3, #1
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80030d0:	2120      	movs	r1, #32
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff fefc 	bl	8002ed0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <_PrintUnsigned+0x11e>
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d3f1      	bcc.n	80030ca <_PrintUnsigned+0x102>
      }
    }
  }
}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	080093fc 	.word	0x080093fc

080030f4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	bfb8      	it	lt
 8003108:	425b      	neglt	r3, r3
 800310a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800310c:	2301      	movs	r3, #1
 800310e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003110:	e007      	b.n	8003122 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	fb92 f3f3 	sdiv	r3, r2, r3
 800311a:	613b      	str	r3, [r7, #16]
    Width++;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	429a      	cmp	r2, r3
 8003128:	daf3      	bge.n	8003112 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	429a      	cmp	r2, r3
 8003130:	d901      	bls.n	8003136 <_PrintInt+0x42>
    Width = NumDigits;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <_PrintInt+0x5e>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	db04      	blt.n	800314c <_PrintInt+0x58>
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <_PrintInt+0x5e>
    FieldWidth--;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	3b01      	subs	r3, #1
 8003150:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <_PrintInt+0x6e>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <_PrintInt+0x9c>
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d111      	bne.n	8003190 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00e      	beq.n	8003190 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003172:	e006      	b.n	8003182 <_PrintInt+0x8e>
        FieldWidth--;
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	3b01      	subs	r3, #1
 8003178:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800317a:	2120      	movs	r1, #32
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7ff fea7 	bl	8002ed0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <_PrintInt+0x9c>
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	429a      	cmp	r2, r3
 800318e:	d3f1      	bcc.n	8003174 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	da07      	bge.n	80031a6 <_PrintInt+0xb2>
    v = -v;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	425b      	negs	r3, r3
 800319a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800319c:	212d      	movs	r1, #45	; 0x2d
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff fe96 	bl	8002ed0 <_StoreChar>
 80031a4:	e008      	b.n	80031b8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80031b0:	212b      	movs	r1, #43	; 0x2b
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff fe8c 	bl	8002ed0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d019      	beq.n	80031f6 <_PrintInt+0x102>
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d114      	bne.n	80031f6 <_PrintInt+0x102>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d111      	bne.n	80031f6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00e      	beq.n	80031f6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80031d8:	e006      	b.n	80031e8 <_PrintInt+0xf4>
        FieldWidth--;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	3b01      	subs	r3, #1
 80031de:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80031e0:	2130      	movs	r1, #48	; 0x30
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff fe74 	bl	8002ed0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <_PrintInt+0x102>
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3f1      	bcc.n	80031da <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff fedf 	bl	8002fc8 <_PrintUnsigned>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b098      	sub	sp, #96	; 0x60
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003220:	f3ef 8311 	mrs	r3, BASEPRI
 8003224:	f04f 0120 	mov.w	r1, #32
 8003228:	f381 8811 	msr	BASEPRI, r1
 800322c:	633b      	str	r3, [r7, #48]	; 0x30
 800322e:	48b7      	ldr	r0, [pc, #732]	; (800350c <_VPrintTarget+0x2f8>)
 8003230:	f7ff fbee 	bl	8002a10 <_PreparePacket>
 8003234:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003236:	4bb5      	ldr	r3, [pc, #724]	; (800350c <_VPrintTarget+0x2f8>)
 8003238:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3301      	adds	r3, #1
 8003246:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800325a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8183 	beq.w	800356a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003268:	2b25      	cmp	r3, #37	; 0x25
 800326a:	f040 8170 	bne.w	800354e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800326e:	2300      	movs	r3, #0
 8003270:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8003272:	2301      	movs	r3, #1
 8003274:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800327e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003282:	3b23      	subs	r3, #35	; 0x23
 8003284:	2b0d      	cmp	r3, #13
 8003286:	d83f      	bhi.n	8003308 <_VPrintTarget+0xf4>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <_VPrintTarget+0x7c>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032f9 	.word	0x080032f9
 8003294:	08003309 	.word	0x08003309
 8003298:	08003309 	.word	0x08003309
 800329c:	08003309 	.word	0x08003309
 80032a0:	08003309 	.word	0x08003309
 80032a4:	08003309 	.word	0x08003309
 80032a8:	08003309 	.word	0x08003309
 80032ac:	08003309 	.word	0x08003309
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	08003309 	.word	0x08003309
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	08003309 	.word	0x08003309
 80032c0:	08003309 	.word	0x08003309
 80032c4:	080032d9 	.word	0x080032d9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80032c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e01a      	b.n	800330e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80032d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3301      	adds	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e012      	b.n	800330e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80032e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	e00a      	b.n	800330e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80032f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fa:	f043 0308 	orr.w	r3, r3, #8
 80032fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3301      	adds	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e002      	b.n	800330e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003308:	2300      	movs	r3, #0
 800330a:	653b      	str	r3, [r7, #80]	; 0x50
 800330c:	bf00      	nop
        }
      } while (v);
 800330e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1b0      	bne.n	8003276 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003314:	2300      	movs	r3, #0
 8003316:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003324:	2b2f      	cmp	r3, #47	; 0x2f
 8003326:	d912      	bls.n	800334e <_VPrintTarget+0x13a>
 8003328:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800332c:	2b39      	cmp	r3, #57	; 0x39
 800332e:	d80e      	bhi.n	800334e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3301      	adds	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	461a      	mov	r2, r3
 8003342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003346:	4413      	add	r3, r2
 8003348:	3b30      	subs	r3, #48	; 0x30
 800334a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800334c:	e7e4      	b.n	8003318 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800334e:	2300      	movs	r3, #0
 8003350:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800335a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800335e:	2b2e      	cmp	r3, #46	; 0x2e
 8003360:	d11d      	bne.n	800339e <_VPrintTarget+0x18a>
        sFormat++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3301      	adds	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003374:	2b2f      	cmp	r3, #47	; 0x2f
 8003376:	d912      	bls.n	800339e <_VPrintTarget+0x18a>
 8003378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800337c:	2b39      	cmp	r3, #57	; 0x39
 800337e:	d80e      	bhi.n	800339e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8003386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	461a      	mov	r2, r3
 8003392:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003396:	4413      	add	r3, r2
 8003398:	3b30      	subs	r3, #48	; 0x30
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800339c:	e7e4      	b.n	8003368 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80033a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033aa:	2b6c      	cmp	r3, #108	; 0x6c
 80033ac:	d003      	beq.n	80033b6 <_VPrintTarget+0x1a2>
 80033ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033b2:	2b68      	cmp	r3, #104	; 0x68
 80033b4:	d107      	bne.n	80033c6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80033c4:	e7ef      	b.n	80033a6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80033c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033ca:	2b25      	cmp	r3, #37	; 0x25
 80033cc:	f000 80b3 	beq.w	8003536 <_VPrintTarget+0x322>
 80033d0:	2b25      	cmp	r3, #37	; 0x25
 80033d2:	f2c0 80b7 	blt.w	8003544 <_VPrintTarget+0x330>
 80033d6:	2b78      	cmp	r3, #120	; 0x78
 80033d8:	f300 80b4 	bgt.w	8003544 <_VPrintTarget+0x330>
 80033dc:	2b58      	cmp	r3, #88	; 0x58
 80033de:	f2c0 80b1 	blt.w	8003544 <_VPrintTarget+0x330>
 80033e2:	3b58      	subs	r3, #88	; 0x58
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	f200 80ad 	bhi.w	8003544 <_VPrintTarget+0x330>
 80033ea:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <_VPrintTarget+0x1dc>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	080034e7 	.word	0x080034e7
 80033f4:	08003545 	.word	0x08003545
 80033f8:	08003545 	.word	0x08003545
 80033fc:	08003545 	.word	0x08003545
 8003400:	08003545 	.word	0x08003545
 8003404:	08003545 	.word	0x08003545
 8003408:	08003545 	.word	0x08003545
 800340c:	08003545 	.word	0x08003545
 8003410:	08003545 	.word	0x08003545
 8003414:	08003545 	.word	0x08003545
 8003418:	08003545 	.word	0x08003545
 800341c:	08003475 	.word	0x08003475
 8003420:	0800349b 	.word	0x0800349b
 8003424:	08003545 	.word	0x08003545
 8003428:	08003545 	.word	0x08003545
 800342c:	08003545 	.word	0x08003545
 8003430:	08003545 	.word	0x08003545
 8003434:	08003545 	.word	0x08003545
 8003438:	08003545 	.word	0x08003545
 800343c:	08003545 	.word	0x08003545
 8003440:	08003545 	.word	0x08003545
 8003444:	08003545 	.word	0x08003545
 8003448:	08003545 	.word	0x08003545
 800344c:	08003545 	.word	0x08003545
 8003450:	08003511 	.word	0x08003511
 8003454:	08003545 	.word	0x08003545
 8003458:	08003545 	.word	0x08003545
 800345c:	08003545 	.word	0x08003545
 8003460:	08003545 	.word	0x08003545
 8003464:	080034c1 	.word	0x080034c1
 8003468:	08003545 	.word	0x08003545
 800346c:	08003545 	.word	0x08003545
 8003470:	080034e7 	.word	0x080034e7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	1d19      	adds	r1, r3, #4
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6011      	str	r1, [r2, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8003482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8003488:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fd1c 	bl	8002ed0 <_StoreChar>
        break;
 8003498:	e055      	b.n	8003546 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1d19      	adds	r1, r3, #4
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6011      	str	r1, [r2, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80034a8:	f107 0014 	add.w	r0, r7, #20
 80034ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	220a      	movs	r2, #10
 80034b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034ba:	f7ff fe1b 	bl	80030f4 <_PrintInt>
        break;
 80034be:	e042      	b.n	8003546 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1d19      	adds	r1, r3, #4
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80034ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034d0:	f107 0014 	add.w	r0, r7, #20
 80034d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034de:	220a      	movs	r2, #10
 80034e0:	f7ff fd72 	bl	8002fc8 <_PrintUnsigned>
        break;
 80034e4:	e02f      	b.n	8003546 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	1d19      	adds	r1, r3, #4
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6011      	str	r1, [r2, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80034f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034f6:	f107 0014 	add.w	r0, r7, #20
 80034fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003504:	2210      	movs	r2, #16
 8003506:	f7ff fd5f 	bl	8002fc8 <_PrintUnsigned>
        break;
 800350a:	e01c      	b.n	8003546 <_VPrintTarget+0x332>
 800350c:	2407f32c 	.word	0x2407f32c
      case 'p':
        v = va_arg(*pParamList, int);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1d19      	adds	r1, r3, #4
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6011      	str	r1, [r2, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800351e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003520:	f107 0014 	add.w	r0, r7, #20
 8003524:	2300      	movs	r3, #0
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	2308      	movs	r3, #8
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2308      	movs	r3, #8
 800352e:	2210      	movs	r2, #16
 8003530:	f7ff fd4a 	bl	8002fc8 <_PrintUnsigned>
        break;
 8003534:	e007      	b.n	8003546 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	2125      	movs	r1, #37	; 0x25
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fcc7 	bl	8002ed0 <_StoreChar>
        break;
 8003542:	e000      	b.n	8003546 <_VPrintTarget+0x332>
      default:
        break;
 8003544:	bf00      	nop
      }
      sFormat++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3301      	adds	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e007      	b.n	800355e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800354e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fcb9 	bl	8002ed0 <_StoreChar>
    }
  } while (*sFormat);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f47f ae72 	bne.w	800324c <_VPrintTarget+0x38>
 8003568:	e000      	b.n	800356c <_VPrintTarget+0x358>
      break;
 800356a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d041      	beq.n	80035f6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	643b      	str	r3, [r7, #64]	; 0x40
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003582:	e00b      	b.n	800359c <_VPrintTarget+0x388>
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	b2da      	uxtb	r2, r3
 8003588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	6439      	str	r1, [r7, #64]	; 0x40
 800358e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003598:	09db      	lsrs	r3, r3, #7
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359e:	2b7f      	cmp	r3, #127	; 0x7f
 80035a0:	d8f0      	bhi.n	8003584 <_VPrintTarget+0x370>
 80035a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	643a      	str	r2, [r7, #64]	; 0x40
 80035a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b6:	2300      	movs	r3, #0
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ba:	e00b      	b.n	80035d4 <_VPrintTarget+0x3c0>
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	1c59      	adds	r1, r3, #1
 80035c4:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	09db      	lsrs	r3, r3, #7
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	2b7f      	cmp	r3, #127	; 0x7f
 80035d8:	d8f0      	bhi.n	80035bc <_VPrintTarget+0x3a8>
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	63ba      	str	r2, [r7, #56]	; 0x38
 80035e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	69b9      	ldr	r1, [r7, #24]
 80035ee:	221a      	movs	r2, #26
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fafd 	bl	8002bf0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80035fc:	bf00      	nop
 80035fe:	3758      	adds	r7, #88	; 0x58
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003612:	2300      	movs	r3, #0
 8003614:	4a18      	ldr	r2, [pc, #96]	; (8003678 <SEGGER_SYSVIEW_Init+0x74>)
 8003616:	4919      	ldr	r1, [pc, #100]	; (800367c <SEGGER_SYSVIEW_Init+0x78>)
 8003618:	4819      	ldr	r0, [pc, #100]	; (8003680 <SEGGER_SYSVIEW_Init+0x7c>)
 800361a:	f7ff f8d9 	bl	80027d0 <SEGGER_RTT_AllocUpBuffer>
 800361e:	4603      	mov	r3, r0
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 8003624:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003626:	4b17      	ldr	r3, [pc, #92]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 8003628:	785a      	ldrb	r2, [r3, #1]
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 800362c:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 8003630:	7e1b      	ldrb	r3, [r3, #24]
 8003632:	4618      	mov	r0, r3
 8003634:	2300      	movs	r3, #0
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2308      	movs	r3, #8
 800363a:	4a13      	ldr	r2, [pc, #76]	; (8003688 <SEGGER_SYSVIEW_Init+0x84>)
 800363c:	4910      	ldr	r1, [pc, #64]	; (8003680 <SEGGER_SYSVIEW_Init+0x7c>)
 800363e:	f7ff f94b 	bl	80028d8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 8003644:	2200      	movs	r2, #0
 8003646:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003648:	4b10      	ldr	r3, [pc, #64]	; (800368c <SEGGER_SYSVIEW_Init+0x88>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0d      	ldr	r2, [pc, #52]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 800364e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003650:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003656:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800365c:	4a09      	ldr	r2, [pc, #36]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <SEGGER_SYSVIEW_Init+0x80>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	00077c00 	.word	0x00077c00
 800367c:	240076f4 	.word	0x240076f4
 8003680:	08009284 	.word	0x08009284
 8003684:	2407f2fc 	.word	0x2407f2fc
 8003688:	2407f2f4 	.word	0x2407f2f4
 800368c:	e0001004 	.word	0xe0001004

08003690 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003698:	4a04      	ldr	r2, [pc, #16]	; (80036ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6113      	str	r3, [r2, #16]
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	2407f2fc 	.word	0x2407f2fc

080036b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80036b8:	f3ef 8311 	mrs	r3, BASEPRI
 80036bc:	f04f 0120 	mov.w	r1, #32
 80036c0:	f381 8811 	msr	BASEPRI, r1
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	4808      	ldr	r0, [pc, #32]	; (80036e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80036c8:	f7ff f9a2 	bl	8002a10 <_PreparePacket>
 80036cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	68b8      	ldr	r0, [r7, #8]
 80036d4:	f7ff fa8c 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f383 8811 	msr	BASEPRI, r3
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2407f32c 	.word	0x2407f32c

080036ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80036f6:	f3ef 8311 	mrs	r3, BASEPRI
 80036fa:	f04f 0120 	mov.w	r1, #32
 80036fe:	f381 8811 	msr	BASEPRI, r1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	4816      	ldr	r0, [pc, #88]	; (8003760 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003706:	f7ff f983 	bl	8002a10 <_PreparePacket>
 800370a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e00b      	b.n	8003732 <SEGGER_SYSVIEW_RecordU32+0x46>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	61f9      	str	r1, [r7, #28]
 8003724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	09db      	lsrs	r3, r3, #7
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b7f      	cmp	r3, #127	; 0x7f
 8003736:	d8f0      	bhi.n	800371a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	61fa      	str	r2, [r7, #28]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68f9      	ldr	r1, [r7, #12]
 800374c:	6938      	ldr	r0, [r7, #16]
 800374e:	f7ff fa4f 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f383 8811 	msr	BASEPRI, r3
}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	2407f32c 	.word	0x2407f32c

08003764 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003770:	f3ef 8311 	mrs	r3, BASEPRI
 8003774:	f04f 0120 	mov.w	r1, #32
 8003778:	f381 8811 	msr	BASEPRI, r1
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	4825      	ldr	r0, [pc, #148]	; (8003814 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003780:	f7ff f946 	bl	8002a10 <_PreparePacket>
 8003784:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	e00b      	b.n	80037ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	b2da      	uxtb	r2, r3
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800379e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	09db      	lsrs	r3, r3, #7
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	2b7f      	cmp	r3, #127	; 0x7f
 80037b0:	d8f0      	bhi.n	8003794 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	e00b      	b.n	80037e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	6279      	str	r1, [r7, #36]	; 0x24
 80037d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	09db      	lsrs	r3, r3, #7
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b7f      	cmp	r3, #127	; 0x7f
 80037e8:	d8f0      	bhi.n	80037cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	627a      	str	r2, [r7, #36]	; 0x24
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	6979      	ldr	r1, [r7, #20]
 80037fe:	69b8      	ldr	r0, [r7, #24]
 8003800:	f7ff f9f6 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f383 8811 	msr	BASEPRI, r3
}
 800380a:	bf00      	nop
 800380c:	3730      	adds	r7, #48	; 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2407f32c 	.word	0x2407f32c

08003818 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b090      	sub	sp, #64	; 0x40
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003826:	f3ef 8311 	mrs	r3, BASEPRI
 800382a:	f04f 0120 	mov.w	r1, #32
 800382e:	f381 8811 	msr	BASEPRI, r1
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	4840      	ldr	r0, [pc, #256]	; (8003938 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003836:	f7ff f8eb 	bl	8002a10 <_PreparePacket>
 800383a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
 8003848:	e00b      	b.n	8003862 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	b2da      	uxtb	r2, r3
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	1c59      	adds	r1, r3, #1
 8003852:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	09db      	lsrs	r3, r3, #7
 8003860:	63bb      	str	r3, [r7, #56]	; 0x38
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	2b7f      	cmp	r3, #127	; 0x7f
 8003866:	d8f0      	bhi.n	800384a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003876:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
 8003880:	e00b      	b.n	800389a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	b2da      	uxtb	r2, r3
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	1c59      	adds	r1, r3, #1
 800388a:	6379      	str	r1, [r7, #52]	; 0x34
 800388c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	09db      	lsrs	r3, r3, #7
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	2b7f      	cmp	r3, #127	; 0x7f
 800389e:	d8f0      	bhi.n	8003882 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	637a      	str	r2, [r7, #52]	; 0x34
 80038a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b8:	e00b      	b.n	80038d2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	1c59      	adds	r1, r3, #1
 80038c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	09db      	lsrs	r3, r3, #7
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	2b7f      	cmp	r3, #127	; 0x7f
 80038d6:	d8f0      	bhi.n	80038ba <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	e00b      	b.n	800390a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	1c59      	adds	r1, r3, #1
 80038fa:	6279      	str	r1, [r7, #36]	; 0x24
 80038fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	09db      	lsrs	r3, r3, #7
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	2b7f      	cmp	r3, #127	; 0x7f
 800390e:	d8f0      	bhi.n	80038f2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	627a      	str	r2, [r7, #36]	; 0x24
 8003916:	6a3a      	ldr	r2, [r7, #32]
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	69b8      	ldr	r0, [r7, #24]
 8003926:	f7ff f963 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f383 8811 	msr	BASEPRI, r3
}
 8003930:	bf00      	nop
 8003932:	3740      	adds	r7, #64	; 0x40
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2407f32c 	.word	0x2407f32c

0800393c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	; 0x30
 8003940:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003942:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003948:	f3ef 8311 	mrs	r3, BASEPRI
 800394c:	f04f 0120 	mov.w	r1, #32
 8003950:	f381 8811 	msr	BASEPRI, r1
 8003954:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003956:	4b54      	ldr	r3, [pc, #336]	; (8003aa8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	220a      	movs	r2, #10
 800395c:	4953      	ldr	r1, [pc, #332]	; (8003aac <SEGGER_SYSVIEW_Start+0x170>)
 800395e:	4618      	mov	r0, r3
 8003960:	f7fc fcbe 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800396a:	f7fe fc03 	bl	8002174 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800396e:	200a      	movs	r0, #10
 8003970:	f7ff fe9e 	bl	80036b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003974:	f3ef 8311 	mrs	r3, BASEPRI
 8003978:	f04f 0120 	mov.w	r1, #32
 800397c:	f381 8811 	msr	BASEPRI, r1
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	484b      	ldr	r0, [pc, #300]	; (8003ab0 <SEGGER_SYSVIEW_Start+0x174>)
 8003984:	f7ff f844 	bl	8002a10 <_PreparePacket>
 8003988:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003992:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
 8003998:	e00b      	b.n	80039b2 <SEGGER_SYSVIEW_Start+0x76>
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	b2da      	uxtb	r2, r3
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	1c59      	adds	r1, r3, #1
 80039a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	09db      	lsrs	r3, r3, #7
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	2b7f      	cmp	r3, #127	; 0x7f
 80039b6:	d8f0      	bhi.n	800399a <SEGGER_SYSVIEW_Start+0x5e>
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
 80039cc:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <SEGGER_SYSVIEW_Start+0x16c>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	e00b      	b.n	80039ec <SEGGER_SYSVIEW_Start+0xb0>
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	6279      	str	r1, [r7, #36]	; 0x24
 80039de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	09db      	lsrs	r3, r3, #7
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	2b7f      	cmp	r3, #127	; 0x7f
 80039f0:	d8f0      	bhi.n	80039d4 <SEGGER_SYSVIEW_Start+0x98>
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	627a      	str	r2, [r7, #36]	; 0x24
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	e00b      	b.n	8003a26 <SEGGER_SYSVIEW_Start+0xea>
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	1c59      	adds	r1, r3, #1
 8003a16:	61f9      	str	r1, [r7, #28]
 8003a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	09db      	lsrs	r3, r3, #7
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b7f      	cmp	r3, #127	; 0x7f
 8003a2a:	d8f0      	bhi.n	8003a0e <SEGGER_SYSVIEW_Start+0xd2>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	61fa      	str	r2, [r7, #28]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e00b      	b.n	8003a5e <SEGGER_SYSVIEW_Start+0x122>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	1c59      	adds	r1, r3, #1
 8003a4e:	6179      	str	r1, [r7, #20]
 8003a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	09db      	lsrs	r3, r3, #7
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b7f      	cmp	r3, #127	; 0x7f
 8003a62:	d8f0      	bhi.n	8003a46 <SEGGER_SYSVIEW_Start+0x10a>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	617a      	str	r2, [r7, #20]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003a74:	2218      	movs	r2, #24
 8003a76:	6839      	ldr	r1, [r7, #0]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff f8b9 	bl	8002bf0 <_SendPacket>
      RECORD_END();
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003a92:	f000 f9eb 	bl	8003e6c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003a96:	f000 f9b1 	bl	8003dfc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003a9a:	f000 fc83 	bl	80043a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003a9e:	bf00      	nop
 8003aa0:	3730      	adds	r7, #48	; 0x30
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2407f2fc 	.word	0x2407f2fc
 8003aac:	080093f0 	.word	0x080093f0
 8003ab0:	2407f32c 	.word	0x2407f32c

08003ab4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003aba:	f3ef 8311 	mrs	r3, BASEPRI
 8003abe:	f04f 0120 	mov.w	r1, #32
 8003ac2:	f381 8811 	msr	BASEPRI, r1
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	480b      	ldr	r0, [pc, #44]	; (8003af8 <SEGGER_SYSVIEW_Stop+0x44>)
 8003aca:	f7fe ffa1 	bl	8002a10 <_PreparePacket>
 8003ace:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <SEGGER_SYSVIEW_Stop+0x48>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003ad8:	220b      	movs	r2, #11
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	6838      	ldr	r0, [r7, #0]
 8003ade:	f7ff f887 	bl	8002bf0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <SEGGER_SYSVIEW_Stop+0x48>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f383 8811 	msr	BASEPRI, r3
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2407f32c 	.word	0x2407f32c
 8003afc:	2407f2fc 	.word	0x2407f2fc

08003b00 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b06:	f3ef 8311 	mrs	r3, BASEPRI
 8003b0a:	f04f 0120 	mov.w	r1, #32
 8003b0e:	f381 8811 	msr	BASEPRI, r1
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	4845      	ldr	r0, [pc, #276]	; (8003c2c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003b16:	f7fe ff7b 	bl	8002a10 <_PreparePacket>
 8003b1a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b24:	4b42      	ldr	r3, [pc, #264]	; (8003c30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2a:	e00b      	b.n	8003b44 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	09db      	lsrs	r3, r3, #7
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	2b7f      	cmp	r3, #127	; 0x7f
 8003b48:	d8f0      	bhi.n	8003b2c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	e00b      	b.n	8003b7e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	1c59      	adds	r1, r3, #1
 8003b6e:	6279      	str	r1, [r7, #36]	; 0x24
 8003b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	09db      	lsrs	r3, r3, #7
 8003b7c:	623b      	str	r3, [r7, #32]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	2b7f      	cmp	r3, #127	; 0x7f
 8003b82:	d8f0      	bhi.n	8003b66 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	627a      	str	r2, [r7, #36]	; 0x24
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e00b      	b.n	8003bb8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	61f9      	str	r1, [r7, #28]
 8003baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	09db      	lsrs	r3, r3, #7
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b7f      	cmp	r3, #127	; 0x7f
 8003bbc:	d8f0      	bhi.n	8003ba0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	61fa      	str	r2, [r7, #28]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	e00b      	b.n	8003bf0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	1c59      	adds	r1, r3, #1
 8003be0:	6179      	str	r1, [r7, #20]
 8003be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	09db      	lsrs	r3, r3, #7
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf4:	d8f0      	bhi.n	8003bd8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	617a      	str	r2, [r7, #20]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c06:	2218      	movs	r2, #24
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	f7fe fff0 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003c1e:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	4798      	blx	r3
  }
}
 8003c24:	bf00      	nop
 8003c26:	3730      	adds	r7, #48	; 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	2407f32c 	.word	0x2407f32c
 8003c30:	2407f2fc 	.word	0x2407f2fc

08003c34 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b092      	sub	sp, #72	; 0x48
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c40:	f04f 0120 	mov.w	r1, #32
 8003c44:	f381 8811 	msr	BASEPRI, r1
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	486a      	ldr	r0, [pc, #424]	; (8003df4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003c4c:	f7fe fee0 	bl	8002a10 <_PreparePacket>
 8003c50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b66      	ldr	r3, [pc, #408]	; (8003df8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	643b      	str	r3, [r7, #64]	; 0x40
 8003c66:	e00b      	b.n	8003c80 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	6479      	str	r1, [r7, #68]	; 0x44
 8003c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7c:	09db      	lsrs	r3, r3, #7
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	2b7f      	cmp	r3, #127	; 0x7f
 8003c84:	d8f0      	bhi.n	8003c68 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ca0:	e00b      	b.n	8003cba <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca8:	1c59      	adds	r1, r3, #1
 8003caa:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003cac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	09db      	lsrs	r3, r3, #7
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cbe:	d8f0      	bhi.n	8003ca2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7fe fe49 	bl	8002970 <_EncodeStr>
 8003cde:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003ce0:	2209      	movs	r2, #9
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	6938      	ldr	r0, [r7, #16]
 8003ce6:	f7fe ff83 	bl	8002bf0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b40      	ldr	r3, [pc, #256]	; (8003df8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cfe:	e00b      	b.n	8003d18 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	6379      	str	r1, [r7, #52]	; 0x34
 8003d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	09db      	lsrs	r3, r3, #7
 8003d16:	633b      	str	r3, [r7, #48]	; 0x30
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d1c:	d8f0      	bhi.n	8003d00 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	637a      	str	r2, [r7, #52]	; 0x34
 8003d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d38:	e00b      	b.n	8003d52 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	1c59      	adds	r1, r3, #1
 8003d42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	09db      	lsrs	r3, r3, #7
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	2b7f      	cmp	r3, #127	; 0x7f
 8003d56:	d8f0      	bhi.n	8003d3a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	e00b      	b.n	8003d8c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	1c59      	adds	r1, r3, #1
 8003d7c:	6279      	str	r1, [r7, #36]	; 0x24
 8003d7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	09db      	lsrs	r3, r3, #7
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d90:	d8f0      	bhi.n	8003d74 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	627a      	str	r2, [r7, #36]	; 0x24
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	2300      	movs	r3, #0
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e00b      	b.n	8003dc4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	1c59      	adds	r1, r3, #1
 8003db4:	61f9      	str	r1, [r7, #28]
 8003db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	09db      	lsrs	r3, r3, #7
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc8:	d8f0      	bhi.n	8003dac <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	61fa      	str	r2, [r7, #28]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003dda:	2215      	movs	r2, #21
 8003ddc:	68f9      	ldr	r1, [r7, #12]
 8003dde:	6938      	ldr	r0, [r7, #16]
 8003de0:	f7fe ff06 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f383 8811 	msr	BASEPRI, r3
}
 8003dea:	bf00      	nop
 8003dec:	3748      	adds	r7, #72	; 0x48
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	2407f32c 	.word	0x2407f32c
 8003df8:	2407f2fc 	.word	0x2407f2fc

08003dfc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003e12:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4798      	blx	r3
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	2407f2fc 	.word	0x2407f2fc

08003e24 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e30:	f04f 0120 	mov.w	r1, #32
 8003e34:	f381 8811 	msr	BASEPRI, r1
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	480b      	ldr	r0, [pc, #44]	; (8003e68 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003e3c:	f7fe fde8 	bl	8002a10 <_PreparePacket>
 8003e40:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	6938      	ldr	r0, [r7, #16]
 8003e48:	f7fe fd92 	bl	8002970 <_EncodeStr>
 8003e4c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003e4e:	220e      	movs	r2, #14
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	6938      	ldr	r0, [r7, #16]
 8003e54:	f7fe fecc 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f383 8811 	msr	BASEPRI, r3
}
 8003e5e:	bf00      	nop
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2407f32c 	.word	0x2407f32c

08003e6c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01a      	beq.n	8003eb0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d015      	beq.n	8003eb0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003e84:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4798      	blx	r3
 8003e8c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003e90:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	000a      	movs	r2, r1
 8003ea0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	200d      	movs	r0, #13
 8003eaa:	f7ff fc5b 	bl	8003764 <SEGGER_SYSVIEW_RecordU32x2>
 8003eae:	e006      	b.n	8003ebe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	200c      	movs	r0, #12
 8003eb8:	f7ff fc18 	bl	80036ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd90      	pop	{r4, r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2407f2fc 	.word	0x2407f2fc
 8003ecc:	e0001004 	.word	0xe0001004

08003ed0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eda:	f04f 0120 	mov.w	r1, #32
 8003ede:	f381 8811 	msr	BASEPRI, r1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	4819      	ldr	r0, [pc, #100]	; (8003f4c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003ee6:	f7fe fd93 	bl	8002a10 <_PreparePacket>
 8003eea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e00b      	b.n	8003f1c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	6179      	str	r1, [r7, #20]
 8003f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	09db      	lsrs	r3, r3, #7
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f20:	d8f0      	bhi.n	8003f04 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	617a      	str	r2, [r7, #20]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003f32:	2202      	movs	r2, #2
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	68b8      	ldr	r0, [r7, #8]
 8003f38:	f7fe fe5a 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f383 8811 	msr	BASEPRI, r3
}
 8003f42:	bf00      	nop
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2407f32c 	.word	0x2407f32c
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f5e:	f04f 0120 	mov.w	r1, #32
 8003f62:	f381 8811 	msr	BASEPRI, r1
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	4807      	ldr	r0, [pc, #28]	; (8003f88 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003f6a:	f7fe fd51 	bl	8002a10 <_PreparePacket>
 8003f6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003f70:	2203      	movs	r2, #3
 8003f72:	6839      	ldr	r1, [r7, #0]
 8003f74:	6838      	ldr	r0, [r7, #0]
 8003f76:	f7fe fe3b 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f383 8811 	msr	BASEPRI, r3
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	2407f32c 	.word	0x2407f32c

08003f8c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f92:	f3ef 8311 	mrs	r3, BASEPRI
 8003f96:	f04f 0120 	mov.w	r1, #32
 8003f9a:	f381 8811 	msr	BASEPRI, r1
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	4807      	ldr	r0, [pc, #28]	; (8003fc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003fa2:	f7fe fd35 	bl	8002a10 <_PreparePacket>
 8003fa6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003fa8:	2212      	movs	r2, #18
 8003faa:	6839      	ldr	r1, [r7, #0]
 8003fac:	6838      	ldr	r0, [r7, #0]
 8003fae:	f7fe fe1f 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f383 8811 	msr	BASEPRI, r3
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	2407f32c 	.word	0x2407f32c

08003fc4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003fca:	f3ef 8311 	mrs	r3, BASEPRI
 8003fce:	f04f 0120 	mov.w	r1, #32
 8003fd2:	f381 8811 	msr	BASEPRI, r1
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	4807      	ldr	r0, [pc, #28]	; (8003ff8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003fda:	f7fe fd19 	bl	8002a10 <_PreparePacket>
 8003fde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003fe0:	2211      	movs	r2, #17
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	6838      	ldr	r0, [r7, #0]
 8003fe6:	f7fe fe03 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f383 8811 	msr	BASEPRI, r3
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	2407f32c 	.word	0x2407f32c

08003ffc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004004:	f3ef 8311 	mrs	r3, BASEPRI
 8004008:	f04f 0120 	mov.w	r1, #32
 800400c:	f381 8811 	msr	BASEPRI, r1
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	4819      	ldr	r0, [pc, #100]	; (8004078 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004014:	f7fe fcfc 	bl	8002a10 <_PreparePacket>
 8004018:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e00b      	b.n	800404a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	1c59      	adds	r1, r3, #1
 800403a:	61f9      	str	r1, [r7, #28]
 800403c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	09db      	lsrs	r3, r3, #7
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b7f      	cmp	r3, #127	; 0x7f
 800404e:	d8f0      	bhi.n	8004032 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	61fa      	str	r2, [r7, #28]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004060:	2208      	movs	r2, #8
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	6938      	ldr	r0, [r7, #16]
 8004066:	f7fe fdc3 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f383 8811 	msr	BASEPRI, r3
}
 8004070:	bf00      	nop
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	2407f32c 	.word	0x2407f32c
 800407c:	2407f2fc 	.word	0x2407f2fc

08004080 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004088:	f3ef 8311 	mrs	r3, BASEPRI
 800408c:	f04f 0120 	mov.w	r1, #32
 8004090:	f381 8811 	msr	BASEPRI, r1
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	4819      	ldr	r0, [pc, #100]	; (80040fc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004098:	f7fe fcba 	bl	8002a10 <_PreparePacket>
 800409c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040a2:	4b17      	ldr	r3, [pc, #92]	; (8004100 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	e00b      	b.n	80040ce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	1c59      	adds	r1, r3, #1
 80040be:	61f9      	str	r1, [r7, #28]
 80040c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	09db      	lsrs	r3, r3, #7
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b7f      	cmp	r3, #127	; 0x7f
 80040d2:	d8f0      	bhi.n	80040b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	61fa      	str	r2, [r7, #28]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80040e4:	2204      	movs	r2, #4
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	6938      	ldr	r0, [r7, #16]
 80040ea:	f7fe fd81 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f383 8811 	msr	BASEPRI, r3
}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	2407f32c 	.word	0x2407f32c
 8004100:	2407f2fc 	.word	0x2407f2fc

08004104 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800410c:	f3ef 8311 	mrs	r3, BASEPRI
 8004110:	f04f 0120 	mov.w	r1, #32
 8004114:	f381 8811 	msr	BASEPRI, r1
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	4819      	ldr	r0, [pc, #100]	; (8004180 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800411c:	f7fe fc78 	bl	8002a10 <_PreparePacket>
 8004120:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	e00b      	b.n	8004152 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	1c59      	adds	r1, r3, #1
 8004142:	61f9      	str	r1, [r7, #28]
 8004144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	09db      	lsrs	r3, r3, #7
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b7f      	cmp	r3, #127	; 0x7f
 8004156:	d8f0      	bhi.n	800413a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004168:	2206      	movs	r2, #6
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	6938      	ldr	r0, [r7, #16]
 800416e:	f7fe fd3f 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f383 8811 	msr	BASEPRI, r3
}
 8004178:	bf00      	nop
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	2407f32c 	.word	0x2407f32c
 8004184:	2407f2fc 	.word	0x2407f2fc

08004188 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004192:	f3ef 8311 	mrs	r3, BASEPRI
 8004196:	f04f 0120 	mov.w	r1, #32
 800419a:	f381 8811 	msr	BASEPRI, r1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	4827      	ldr	r0, [pc, #156]	; (8004240 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80041a2:	f7fe fc35 	bl	8002a10 <_PreparePacket>
 80041a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	e00b      	b.n	80041d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	6279      	str	r1, [r7, #36]	; 0x24
 80041ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	09db      	lsrs	r3, r3, #7
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	2b7f      	cmp	r3, #127	; 0x7f
 80041dc:	d8f0      	bhi.n	80041c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	627a      	str	r2, [r7, #36]	; 0x24
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e00b      	b.n	8004210 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	61f9      	str	r1, [r7, #28]
 8004202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	09db      	lsrs	r3, r3, #7
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b7f      	cmp	r3, #127	; 0x7f
 8004214:	d8f0      	bhi.n	80041f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	61fa      	str	r2, [r7, #28]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004226:	2207      	movs	r2, #7
 8004228:	68f9      	ldr	r1, [r7, #12]
 800422a:	6938      	ldr	r0, [r7, #16]
 800422c:	f7fe fce0 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f383 8811 	msr	BASEPRI, r3
}
 8004236:	bf00      	nop
 8004238:	3728      	adds	r7, #40	; 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	2407f32c 	.word	0x2407f32c
 8004244:	2407f2fc 	.word	0x2407f2fc

08004248 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	1ad3      	subs	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	2407f2fc 	.word	0x2407f2fc

08004268 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d06d      	beq.n	8004356 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800427a:	4b39      	ldr	r3, [pc, #228]	; (8004360 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004280:	2300      	movs	r3, #0
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
 8004284:	e008      	b.n	8004298 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	3301      	adds	r3, #1
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429c:	429a      	cmp	r2, r3
 800429e:	d3f2      	bcc.n	8004286 <SEGGER_SYSVIEW_SendModule+0x1e>
 80042a0:	e000      	b.n	80042a4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80042a2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d055      	beq.n	8004356 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042aa:	f3ef 8311 	mrs	r3, BASEPRI
 80042ae:	f04f 0120 	mov.w	r1, #32
 80042b2:	f381 8811 	msr	BASEPRI, r1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	482a      	ldr	r0, [pc, #168]	; (8004364 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80042ba:	f7fe fba9 	bl	8002a10 <_PreparePacket>
 80042be:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	e00b      	b.n	80042e6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	1c59      	adds	r1, r3, #1
 80042d6:	6279      	str	r1, [r7, #36]	; 0x24
 80042d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	09db      	lsrs	r3, r3, #7
 80042e4:	623b      	str	r3, [r7, #32]
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	2b7f      	cmp	r3, #127	; 0x7f
 80042ea:	d8f0      	bhi.n	80042ce <SEGGER_SYSVIEW_SendModule+0x66>
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	627a      	str	r2, [r7, #36]	; 0x24
 80042f2:	6a3a      	ldr	r2, [r7, #32]
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	e00b      	b.n	8004320 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	61f9      	str	r1, [r7, #28]
 8004312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	09db      	lsrs	r3, r3, #7
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b7f      	cmp	r3, #127	; 0x7f
 8004324:	d8f0      	bhi.n	8004308 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	61fa      	str	r2, [r7, #28]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	4619      	mov	r1, r3
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7fe fb16 	bl	8002970 <_EncodeStr>
 8004344:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004346:	2216      	movs	r2, #22
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	6938      	ldr	r0, [r7, #16]
 800434c:	f7fe fc50 	bl	8002bf0 <_SendPacket>
      RECORD_END();
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004356:	bf00      	nop
 8004358:	3730      	adds	r7, #48	; 0x30
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	2407f324 	.word	0x2407f324
 8004364:	2407f32c 	.word	0x2407f32c

08004368 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00f      	beq.n	8004396 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f2      	bne.n	800437c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	2407f324 	.word	0x2407f324

080043a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80043aa:	f3ef 8311 	mrs	r3, BASEPRI
 80043ae:	f04f 0120 	mov.w	r1, #32
 80043b2:	f381 8811 	msr	BASEPRI, r1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	4817      	ldr	r0, [pc, #92]	; (8004418 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80043ba:	f7fe fb29 	bl	8002a10 <_PreparePacket>
 80043be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	e00b      	b.n	80043e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1c59      	adds	r1, r3, #1
 80043d8:	6179      	str	r1, [r7, #20]
 80043da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	09db      	lsrs	r3, r3, #7
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b7f      	cmp	r3, #127	; 0x7f
 80043ec:	d8f0      	bhi.n	80043d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	617a      	str	r2, [r7, #20]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80043fe:	221b      	movs	r2, #27
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	68b8      	ldr	r0, [r7, #8]
 8004404:	f7fe fbf4 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f383 8811 	msr	BASEPRI, r3
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	2407f32c 	.word	0x2407f32c
 800441c:	2407f328 	.word	0x2407f328

08004420 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004420:	b40f      	push	{r0, r1, r2, r3}
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	461a      	mov	r2, r3
 8004432:	2100      	movs	r1, #0
 8004434:	6938      	ldr	r0, [r7, #16]
 8004436:	f7fe feed 	bl	8003214 <_VPrintTarget>
  va_end(ParamList);
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004444:	b004      	add	sp, #16
 8004446:	4770      	bx	lr

08004448 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004450:	f3ef 8311 	mrs	r3, BASEPRI
 8004454:	f04f 0120 	mov.w	r1, #32
 8004458:	f381 8811 	msr	BASEPRI, r1
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	4827      	ldr	r0, [pc, #156]	; (80044fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8004460:	f7fe fad6 	bl	8002a10 <_PreparePacket>
 8004464:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004466:	2280      	movs	r2, #128	; 0x80
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	6938      	ldr	r0, [r7, #16]
 800446c:	f7fe fa80 	bl	8002970 <_EncodeStr>
 8004470:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	2301      	movs	r3, #1
 8004478:	623b      	str	r3, [r7, #32]
 800447a:	e00b      	b.n	8004494 <SEGGER_SYSVIEW_Warn+0x4c>
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	1c59      	adds	r1, r3, #1
 8004484:	6279      	str	r1, [r7, #36]	; 0x24
 8004486:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	09db      	lsrs	r3, r3, #7
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2b7f      	cmp	r3, #127	; 0x7f
 8004498:	d8f0      	bhi.n	800447c <SEGGER_SYSVIEW_Warn+0x34>
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	627a      	str	r2, [r7, #36]	; 0x24
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	e00b      	b.n	80044cc <SEGGER_SYSVIEW_Warn+0x84>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	1c59      	adds	r1, r3, #1
 80044bc:	61f9      	str	r1, [r7, #28]
 80044be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	09db      	lsrs	r3, r3, #7
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b7f      	cmp	r3, #127	; 0x7f
 80044d0:	d8f0      	bhi.n	80044b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	61fa      	str	r2, [r7, #28]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80044e2:	221a      	movs	r2, #26
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	6938      	ldr	r0, [r7, #16]
 80044e8:	f7fe fb82 	bl	8002bf0 <_SendPacket>
  RECORD_END();
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f383 8811 	msr	BASEPRI, r3
}
 80044f2:	bf00      	nop
 80044f4:	3728      	adds	r7, #40	; 0x28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	2407f32c 	.word	0x2407f32c

08004500 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004506:	7e1b      	ldrb	r3, [r3, #24]
 8004508:	4619      	mov	r1, r3
 800450a:	4a13      	ldr	r2, [pc, #76]	; (8004558 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800450c:	460b      	mov	r3, r1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	440b      	add	r3, r1
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	336c      	adds	r3, #108	; 0x6c
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800451c:	7e1b      	ldrb	r3, [r3, #24]
 800451e:	4618      	mov	r0, r3
 8004520:	490d      	ldr	r1, [pc, #52]	; (8004558 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004522:	4603      	mov	r3, r0
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4403      	add	r3, r0
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	440b      	add	r3, r1
 800452c:	3370      	adds	r3, #112	; 0x70
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d00b      	beq.n	800454c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004536:	789b      	ldrb	r3, [r3, #2]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800453e:	2201      	movs	r2, #1
 8004540:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004542:	f7fe fa71 	bl	8002a28 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004546:	4b03      	ldr	r3, [pc, #12]	; (8004554 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004548:	2200      	movs	r2, #0
 800454a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800454e:	781b      	ldrb	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	2407f2fc 	.word	0x2407f2fc
 8004558:	2400723c 	.word	0x2400723c

0800455c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004562:	f000 fd9d 	bl	80050a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004566:	f000 f8ab 	bl	80046c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800456a:	f000 f9dd 	bl	8004928 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800456e:	f000 f955 	bl	800481c <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 8004572:	f000 f9b7 	bl	80048e4 <MX_USB_OTG_FS_HCD_Init>

//  user_data = "Start of program\r\n";
//  	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

  	// Enable CCYCCNT Counter
  	DWT->CTRL |= (1 << 0);
 8004576:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <main+0x118>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a3e      	ldr	r2, [pc, #248]	; (8004674 <main+0x118>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	6013      	str	r3, [r2, #0]

  	// Used for SEGGER UART
  	SEGGER_UART_init(500000);
 8004582:	483d      	ldr	r0, [pc, #244]	; (8004678 <main+0x11c>)
 8004584:	f7fd fd98 	bl	80020b8 <SEGGER_UART_init>

  	//Starting SEGGER SYSVIEW
  	  SEGGER_SYSVIEW_Conf();
 8004588:	f7fd fb04 	bl	8001b94 <SEGGER_SYSVIEW_Conf>
  	  //SEGGER_SYSVIEW_Start();

  	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 200, "Green LED TASK", 3, &Task_GreenLED_Handle);
 800458c:	4b3b      	ldr	r3, [pc, #236]	; (800467c <main+0x120>)
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	2303      	movs	r3, #3
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <main+0x124>)
 8004596:	22c8      	movs	r2, #200	; 0xc8
 8004598:	493a      	ldr	r1, [pc, #232]	; (8004684 <main+0x128>)
 800459a:	483b      	ldr	r0, [pc, #236]	; (8004688 <main+0x12c>)
 800459c:	f7fb ff9e 	bl	80004dc <xTaskCreate>
 80045a0:	6178      	str	r0, [r7, #20]
  	  configASSERT(TaskStatus == pdPASS);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d00c      	beq.n	80045c2 <main+0x66>
        __asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	b672      	cpsid	i
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	b662      	cpsie	i
 80045bc:	613b      	str	r3, [r7, #16]
    }
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <main+0x64>

  	  next_task_handle = Task_GreenLED_Handle;
 80045c2:	4b2e      	ldr	r3, [pc, #184]	; (800467c <main+0x120>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a31      	ldr	r2, [pc, #196]	; (800468c <main+0x130>)
 80045c8:	6013      	str	r3, [r2, #0]

  	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 200, "Red LED TASK", 2, &Task_RedLED_Handle);
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <main+0x134>)
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	2302      	movs	r3, #2
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4b30      	ldr	r3, [pc, #192]	; (8004694 <main+0x138>)
 80045d4:	22c8      	movs	r2, #200	; 0xc8
 80045d6:	4930      	ldr	r1, [pc, #192]	; (8004698 <main+0x13c>)
 80045d8:	4830      	ldr	r0, [pc, #192]	; (800469c <main+0x140>)
 80045da:	f7fb ff7f 	bl	80004dc <xTaskCreate>
 80045de:	6178      	str	r0, [r7, #20]
  	  configASSERT(TaskStatus == pdPASS);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d00c      	beq.n	8004600 <main+0xa4>
        __asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	b672      	cpsid	i
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	b662      	cpsie	i
 80045fa:	60fb      	str	r3, [r7, #12]
    }
 80045fc:	bf00      	nop
 80045fe:	e7fe      	b.n	80045fe <main+0xa2>

  	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 200, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <main+0x144>)
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	2301      	movs	r3, #1
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <main+0x148>)
 800460a:	22c8      	movs	r2, #200	; 0xc8
 800460c:	4926      	ldr	r1, [pc, #152]	; (80046a8 <main+0x14c>)
 800460e:	4827      	ldr	r0, [pc, #156]	; (80046ac <main+0x150>)
 8004610:	f7fb ff64 	bl	80004dc <xTaskCreate>
 8004614:	6178      	str	r0, [r7, #20]
  	  configASSERT(TaskStatus == pdPASS);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d00c      	beq.n	8004636 <main+0xda>
        __asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	b672      	cpsid	i
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	b662      	cpsie	i
 8004630:	60bb      	str	r3, [r7, #8]
    }
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <main+0xd8>

  	  TaskStatus = xTaskCreate(Task_Button_Handler, "Button", 200, "Button TASK", 4, &Task_Button_Handle);
 8004636:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <main+0x154>)
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	2304      	movs	r3, #4
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <main+0x158>)
 8004640:	22c8      	movs	r2, #200	; 0xc8
 8004642:	491d      	ldr	r1, [pc, #116]	; (80046b8 <main+0x15c>)
 8004644:	481d      	ldr	r0, [pc, #116]	; (80046bc <main+0x160>)
 8004646:	f7fb ff49 	bl	80004dc <xTaskCreate>
 800464a:	6178      	str	r0, [r7, #20]
	  	configASSERT(TaskStatus == pdPASS);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d00c      	beq.n	800466c <main+0x110>
        __asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	b672      	cpsid	i
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	b662      	cpsie	i
 8004666:	607b      	str	r3, [r7, #4]
    }
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <main+0x10e>


  	  // Start FreeRTOS scheduler
  	  vTaskStartScheduler();
 800466c:	f7fc f974 	bl	8000958 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004670:	e7fe      	b.n	8004670 <main+0x114>
 8004672:	bf00      	nop
 8004674:	e0001000 	.word	0xe0001000
 8004678:	0007a120 	.word	0x0007a120
 800467c:	2407f7b4 	.word	0x2407f7b4
 8004680:	0800929c 	.word	0x0800929c
 8004684:	080092ac 	.word	0x080092ac
 8004688:	08004a19 	.word	0x08004a19
 800468c:	2407f7c4 	.word	0x2407f7c4
 8004690:	2407f7b8 	.word	0x2407f7b8
 8004694:	080092b8 	.word	0x080092b8
 8004698:	080092c8 	.word	0x080092c8
 800469c:	08004a85 	.word	0x08004a85
 80046a0:	2407f7bc 	.word	0x2407f7bc
 80046a4:	080092d0 	.word	0x080092d0
 80046a8:	080092e0 	.word	0x080092e0
 80046ac:	08004af1 	.word	0x08004af1
 80046b0:	2407f7c0 	.word	0x2407f7c0
 80046b4:	080092e8 	.word	0x080092e8
 80046b8:	080092f4 	.word	0x080092f4
 80046bc:	08004b71 	.word	0x08004b71

080046c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b09e      	sub	sp, #120	; 0x78
 80046c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ca:	224c      	movs	r2, #76	; 0x4c
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f004 fd6e 	bl	80091b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046d4:	f107 030c 	add.w	r3, r7, #12
 80046d8:	2220      	movs	r2, #32
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f004 fd67 	bl	80091b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80046e2:	2002      	movs	r0, #2
 80046e4:	f001 ff42 	bl	800656c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	4b48      	ldr	r3, [pc, #288]	; (8004810 <SystemClock_Config+0x150>)
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	4a47      	ldr	r2, [pc, #284]	; (8004810 <SystemClock_Config+0x150>)
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046f8:	4b45      	ldr	r3, [pc, #276]	; (8004810 <SystemClock_Config+0x150>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	4b44      	ldr	r3, [pc, #272]	; (8004814 <SystemClock_Config+0x154>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	4a43      	ldr	r2, [pc, #268]	; (8004814 <SystemClock_Config+0x154>)
 8004708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800470c:	6193      	str	r3, [r2, #24]
 800470e:	4b41      	ldr	r3, [pc, #260]	; (8004814 <SystemClock_Config+0x154>)
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800471a:	bf00      	nop
 800471c:	4b3d      	ldr	r3, [pc, #244]	; (8004814 <SystemClock_Config+0x154>)
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004728:	d1f8      	bne.n	800471c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472a:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <SystemClock_Config+0x158>)
 800472c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004730:	4a39      	ldr	r2, [pc, #228]	; (8004818 <SystemClock_Config+0x158>)
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800473a:	4b37      	ldr	r3, [pc, #220]	; (8004818 <SystemClock_Config+0x158>)
 800473c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004748:	2300      	movs	r3, #0
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4b31      	ldr	r3, [pc, #196]	; (8004814 <SystemClock_Config+0x154>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	4a30      	ldr	r2, [pc, #192]	; (8004814 <SystemClock_Config+0x154>)
 8004752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004756:	6193      	str	r3, [r2, #24]
 8004758:	4b2e      	ldr	r3, [pc, #184]	; (8004814 <SystemClock_Config+0x154>)
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <SystemClock_Config+0x150>)
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	4a2a      	ldr	r2, [pc, #168]	; (8004810 <SystemClock_Config+0x150>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <SystemClock_Config+0x150>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800477a:	bf00      	nop
 800477c:	4b25      	ldr	r3, [pc, #148]	; (8004814 <SystemClock_Config+0x154>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004788:	d1f8      	bne.n	800477c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800478a:	2301      	movs	r3, #1
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800478e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004792:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004794:	2302      	movs	r3, #2
 8004796:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004798:	2302      	movs	r3, #2
 800479a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800479c:	2301      	movs	r3, #1
 800479e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80047a0:	2378      	movs	r3, #120	; 0x78
 80047a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80047a4:	2302      	movs	r3, #2
 80047a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80047a8:	230f      	movs	r3, #15
 80047aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80047ac:	2302      	movs	r3, #2
 80047ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80047b0:	230c      	movs	r3, #12
 80047b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 ff1d 	bl	8006600 <HAL_RCC_OscConfig>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80047cc:	f000 fa0a 	bl	8004be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047d0:	233f      	movs	r3, #63	; 0x3f
 80047d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047d4:	2303      	movs	r3, #3
 80047d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80047dc:	2308      	movs	r3, #8
 80047de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80047e0:	2340      	movs	r3, #64	; 0x40
 80047e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80047e4:	2340      	movs	r3, #64	; 0x40
 80047e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80047e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80047f2:	f107 030c 	add.w	r3, r7, #12
 80047f6:	2104      	movs	r1, #4
 80047f8:	4618      	mov	r0, r3
 80047fa:	f002 fb2f 	bl	8006e5c <HAL_RCC_ClockConfig>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8004804:	f000 f9ee 	bl	8004be4 <Error_Handler>
  }
}
 8004808:	bf00      	nop
 800480a:	3778      	adds	r7, #120	; 0x78
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	58000400 	.word	0x58000400
 8004814:	58024800 	.word	0x58024800
 8004818:	58024400 	.word	0x58024400

0800481c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004820:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004822:	4a2f      	ldr	r2, [pc, #188]	; (80048e0 <MX_FDCAN2_Init+0xc4>)
 8004824:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004826:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 800482e:	2200      	movs	r2, #0
 8004830:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8004832:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004834:	2200      	movs	r2, #0
 8004836:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8004838:	4b28      	ldr	r3, [pc, #160]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 800483a:	2200      	movs	r2, #0
 800483c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800483e:	4b27      	ldr	r3, [pc, #156]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004840:	2200      	movs	r2, #0
 8004842:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004846:	2210      	movs	r2, #16
 8004848:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 800484c:	2201      	movs	r2, #1
 800484e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8004850:	4b22      	ldr	r3, [pc, #136]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004852:	2202      	movs	r2, #2
 8004854:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004858:	2202      	movs	r2, #2
 800485a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800485c:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 800485e:	2201      	movs	r2, #1
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8004862:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004864:	2201      	movs	r2, #1
 8004866:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8004868:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 800486a:	2201      	movs	r2, #1
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004870:	2201      	movs	r2, #1
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004876:	2200      	movs	r2, #0
 8004878:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 800487c:	2200      	movs	r2, #0
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004880:	4b16      	ldr	r3, [pc, #88]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004882:	2200      	movs	r2, #0
 8004884:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004888:	2200      	movs	r2, #0
 800488a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800488c:	4b13      	ldr	r3, [pc, #76]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 800488e:	2204      	movs	r2, #4
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 8004894:	2200      	movs	r2, #0
 8004896:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 800489a:	2204      	movs	r2, #4
 800489c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 80048a6:	2204      	movs	r2, #4
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 80048be:	2200      	movs	r2, #0
 80048c0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 80048c4:	2204      	movs	r2, #4
 80048c6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80048c8:	4804      	ldr	r0, [pc, #16]	; (80048dc <MX_FDCAN2_Init+0xc0>)
 80048ca:	f000 fd55 	bl	8005378 <HAL_FDCAN_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80048d4:	f000 f986 	bl	8004be4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80048d8:	bf00      	nop
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	2407f410 	.word	0x2407f410
 80048e0:	4000a400 	.word	0x4000a400

080048e4 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80048e8:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80048ea:	4a0e      	ldr	r2, [pc, #56]	; (8004924 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80048ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80048f0:	2210      	movs	r2, #16
 80048f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004902:	2202      	movs	r2, #2
 8004904:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004908:	2200      	movs	r2, #0
 800490a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800490c:	4804      	ldr	r0, [pc, #16]	; (8004920 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800490e:	f001 fdcb 	bl	80064a8 <HAL_HCD_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8004918:	f000 f964 	bl	8004be4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800491c:	bf00      	nop
 800491e:	bd80      	pop	{r7, pc}
 8004920:	2407f4b0 	.word	0x2407f4b0
 8004924:	40080000 	.word	0x40080000

08004928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800493e:	4b34      	ldr	r3, [pc, #208]	; (8004a10 <MX_GPIO_Init+0xe8>)
 8004940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004944:	4a32      	ldr	r2, [pc, #200]	; (8004a10 <MX_GPIO_Init+0xe8>)
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800494e:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <MX_GPIO_Init+0xe8>)
 8004950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800495c:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <MX_GPIO_Init+0xe8>)
 800495e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004962:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <MX_GPIO_Init+0xe8>)
 8004964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800496c:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <MX_GPIO_Init+0xe8>)
 800496e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800497a:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <MX_GPIO_Init+0xe8>)
 800497c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <MX_GPIO_Init+0xe8>)
 8004982:	f043 0302 	orr.w	r3, r3, #2
 8004986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800498a:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <MX_GPIO_Init+0xe8>)
 800498c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <MX_GPIO_Init+0xe8>)
 800499a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <MX_GPIO_Init+0xe8>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <MX_GPIO_Init+0xe8>)
 80049aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2107      	movs	r1, #7
 80049ba:	4816      	ldr	r0, [pc, #88]	; (8004a14 <MX_GPIO_Init+0xec>)
 80049bc:	f001 fd1c 	bl	80063f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80049c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80049ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d0:	f107 0314 	add.w	r3, r7, #20
 80049d4:	4619      	mov	r1, r3
 80049d6:	480f      	ldr	r0, [pc, #60]	; (8004a14 <MX_GPIO_Init+0xec>)
 80049d8:	f001 fb46 	bl	8006068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80049dc:	2307      	movs	r3, #7
 80049de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049e0:	2301      	movs	r3, #1
 80049e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e8:	2300      	movs	r3, #0
 80049ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ec:	f107 0314 	add.w	r3, r7, #20
 80049f0:	4619      	mov	r1, r3
 80049f2:	4808      	ldr	r0, [pc, #32]	; (8004a14 <MX_GPIO_Init+0xec>)
 80049f4:	f001 fb38 	bl	8006068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	2105      	movs	r1, #5
 80049fc:	2028      	movs	r0, #40	; 0x28
 80049fe:	f000 fc93 	bl	8005328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a02:	2028      	movs	r0, #40	; 0x28
 8004a04:	f000 fcaa 	bl	800535c <HAL_NVIC_EnableIRQ>

}
 8004a08:	bf00      	nop
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	58024400 	.word	0x58024400
 8004a14:	58020800 	.word	0x58020800

08004a18 <Task_GreenLED_Handler>:

/* USER CODE BEGIN 4 */
static void Task_GreenLED_Handler(void* parameters)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		user_data = "Green -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004a20:	4813      	ldr	r0, [pc, #76]	; (8004a70 <Task_GreenLED_Handler+0x58>)
 8004a22:	f7ff fcfd 	bl	8004420 <SEGGER_SYSVIEW_PrintfTarget>
		// 1000 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004a26:	2102      	movs	r1, #2
 8004a28:	4812      	ldr	r0, [pc, #72]	; (8004a74 <Task_GreenLED_Handler+0x5c>)
 8004a2a:	f001 fcfe 	bl	800642a <HAL_GPIO_TogglePin>
		Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8004a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f7fc fa54 	bl	8000ee8 <xTaskGenericNotifyWait>
 8004a40:	60f8      	str	r0, [r7, #12]
		if (Status == pdTRUE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d1eb      	bne.n	8004a20 <Task_GreenLED_Handler+0x8>
		{
			vTaskSuspendAll();
 8004a48:	f7fb ffe6 	bl	8000a18 <vTaskSuspendAll>
			next_task_handle = Task_RedLED_Handle;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <Task_GreenLED_Handler+0x60>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <Task_GreenLED_Handler+0x64>)
 8004a52:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8004a54:	f7fb ffee 	bl	8000a34 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Green_PIN, GPIO_PIN_SET);
 8004a58:	2201      	movs	r2, #1
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4805      	ldr	r0, [pc, #20]	; (8004a74 <Task_GreenLED_Handler+0x5c>)
 8004a5e:	f001 fccb 	bl	80063f8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green task");
 8004a62:	4807      	ldr	r0, [pc, #28]	; (8004a80 <Task_GreenLED_Handler+0x68>)
 8004a64:	f7ff fcdc 	bl	8004420 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7fb fe8f 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004a6e:	e7d7      	b.n	8004a20 <Task_GreenLED_Handler+0x8>
 8004a70:	080092fc 	.word	0x080092fc
 8004a74:	58020800 	.word	0x58020800
 8004a78:	2407f7b8 	.word	0x2407f7b8
 8004a7c:	2407f7c4 	.word	0x2407f7c4
 8004a80:	08009310 	.word	0x08009310

08004a84 <Task_RedLED_Handler>:
	}
}


static void Task_RedLED_Handler(void* parameters)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
	while(1)
	{
//		user_data = "Red -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004a8c:	4813      	ldr	r0, [pc, #76]	; (8004adc <Task_RedLED_Handler+0x58>)
 8004a8e:	f7ff fcc7 	bl	8004420 <SEGGER_SYSVIEW_PrintfTarget>
		// 800 system tickes -> needs to be converted to ms
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004a92:	2101      	movs	r1, #1
 8004a94:	4812      	ldr	r0, [pc, #72]	; (8004ae0 <Task_RedLED_Handler+0x5c>)
 8004a96:	f001 fcc8 	bl	800642a <HAL_GPIO_TogglePin>
		Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8004a9a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f7fc fa1e 	bl	8000ee8 <xTaskGenericNotifyWait>
 8004aac:	60f8      	str	r0, [r7, #12]
		if (Status == pdTRUE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d1eb      	bne.n	8004a8c <Task_RedLED_Handler+0x8>
		{
			vTaskSuspendAll();
 8004ab4:	f7fb ffb0 	bl	8000a18 <vTaskSuspendAll>
			next_task_handle = Task_BlueLED_Handle;
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <Task_RedLED_Handler+0x60>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <Task_RedLED_Handler+0x64>)
 8004abe:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8004ac0:	f7fb ffb8 	bl	8000a34 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Red_PIN, GPIO_PIN_SET);
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4805      	ldr	r0, [pc, #20]	; (8004ae0 <Task_RedLED_Handler+0x5c>)
 8004aca:	f001 fc95 	bl	80063f8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red task");
 8004ace:	4807      	ldr	r0, [pc, #28]	; (8004aec <Task_RedLED_Handler+0x68>)
 8004ad0:	f7ff fca6 	bl	8004420 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f7fb fe59 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004ada:	e7d7      	b.n	8004a8c <Task_RedLED_Handler+0x8>
 8004adc:	08009324 	.word	0x08009324
 8004ae0:	58020800 	.word	0x58020800
 8004ae4:	2407f7bc 	.word	0x2407f7bc
 8004ae8:	2407f7c4 	.word	0x2407f7c4
 8004aec:	08009338 	.word	0x08009338

08004af0 <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004af8:	4817      	ldr	r0, [pc, #92]	; (8004b58 <Task_BlueLED_Handler+0x68>)
 8004afa:	f7ff fc91 	bl	8004420 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004afe:	2104      	movs	r1, #4
 8004b00:	4816      	ldr	r0, [pc, #88]	; (8004b5c <Task_BlueLED_Handler+0x6c>)
 8004b02:	f001 fc92 	bl	800642a <HAL_GPIO_TogglePin>
		Status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8004b06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	2000      	movs	r0, #0
 8004b14:	f7fc f9e8 	bl	8000ee8 <xTaskGenericNotifyWait>
 8004b18:	60f8      	str	r0, [r7, #12]
		if (Status == pdTRUE)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d1eb      	bne.n	8004af8 <Task_BlueLED_Handler+0x8>
		{
			vTaskSuspendAll();
 8004b20:	f7fb ff7a 	bl	8000a18 <vTaskSuspendAll>
			next_task_handle = NULL;
 8004b24:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <Task_BlueLED_Handler+0x70>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8004b2a:	f7fb ff83 	bl	8000a34 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, LED_Blue_PIN, GPIO_PIN_SET);
 8004b2e:	2201      	movs	r2, #1
 8004b30:	2104      	movs	r1, #4
 8004b32:	480a      	ldr	r0, [pc, #40]	; (8004b5c <Task_BlueLED_Handler+0x6c>)
 8004b34:	f001 fc60 	bl	80063f8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete button task");
 8004b38:	480a      	ldr	r0, [pc, #40]	; (8004b64 <Task_BlueLED_Handler+0x74>)
 8004b3a:	f7ff fc71 	bl	8004420 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(Task_Button_Handle);
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <Task_BlueLED_Handler+0x78>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fb fe22 	bl	800078c <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue task");
 8004b48:	4808      	ldr	r0, [pc, #32]	; (8004b6c <Task_BlueLED_Handler+0x7c>)
 8004b4a:	f7ff fc69 	bl	8004420 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8004b4e:	2000      	movs	r0, #0
 8004b50:	f7fb fe1c 	bl	800078c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004b54:	e7d0      	b.n	8004af8 <Task_BlueLED_Handler+0x8>
 8004b56:	bf00      	nop
 8004b58:	08009348 	.word	0x08009348
 8004b5c:	58020800 	.word	0x58020800
 8004b60:	2407f7c4 	.word	0x2407f7c4
 8004b64:	0800935c 	.word	0x0800935c
 8004b68:	2407f7c0 	.word	0x2407f7c0
 8004b6c:	08009370 	.word	0x08009370

08004b70 <Task_Button_Handler>:
	}
}


static void Task_Button_Handler(void* parameters)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	6078      	str	r0, [r7, #4]
	uint8_t button_read = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73bb      	strb	r3, [r7, #14]
	uint8_t previous_read = 1;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		button_read = HAL_GPIO_ReadPin(GPIOC, Button_PIN);
 8004b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b84:	480c      	ldr	r0, [pc, #48]	; (8004bb8 <Task_Button_Handler+0x48>)
 8004b86:	f001 fc1f 	bl	80063c8 <HAL_GPIO_ReadPin>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73bb      	strb	r3, [r7, #14]

		if(button_read)
 8004b8e:	7bbb      	ldrb	r3, [r7, #14]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <Task_Button_Handler+0x3c>
		{
			if(! previous_read)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <Task_Button_Handler+0x3c>
			{
				xTaskNotify(next_task_handle, 0, eNoAction);
 8004b9a:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <Task_Button_Handler+0x4c>)
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	f7fc fa2e 	bl	8001008 <xTaskGenericNotify>
			}
		}
		previous_read = button_read;
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8004bb0:	200a      	movs	r0, #10
 8004bb2:	f7fb fe97 	bl	80008e4 <vTaskDelay>
		button_read = HAL_GPIO_ReadPin(GPIOC, Button_PIN);
 8004bb6:	e7e3      	b.n	8004b80 <Task_Button_Handler+0x10>
 8004bb8:	58020800 	.word	0x58020800
 8004bbc:	2407f7c4 	.word	0x2407f7c4

08004bc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004bd2:	f000 faa1 	bl	8005118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40001000 	.word	0x40001000

08004be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004be8:	b672      	cpsid	i
}
 8004bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bec:	e7fe      	b.n	8004bec <Error_Handler+0x8>
	...

08004bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_MspInit+0x30>)
 8004bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bfc:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <HAL_MspInit+0x30>)
 8004bfe:	f043 0302 	orr.w	r3, r3, #2
 8004c02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_MspInit+0x30>)
 8004c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	58024400 	.word	0x58024400

08004c24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b0b8      	sub	sp, #224	; 0xe0
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c3c:	f107 0310 	add.w	r3, r7, #16
 8004c40:	22bc      	movs	r2, #188	; 0xbc
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f004 fab3 	bl	80091b0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2d      	ldr	r2, [pc, #180]	; (8004d04 <HAL_FDCAN_MspInit+0xe0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d153      	bne.n	8004cfc <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004c5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c60:	f107 0310 	add.w	r3, r7, #16
 8004c64:	4618      	mov	r0, r3
 8004c66:	f002 fcb1 	bl	80075cc <HAL_RCCEx_PeriphCLKConfig>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004c70:	f7ff ffb8 	bl	8004be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004c74:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <HAL_FDCAN_MspInit+0xe4>)
 8004c76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004c7a:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <HAL_FDCAN_MspInit+0xe4>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c80:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <HAL_FDCAN_MspInit+0xe4>)
 8004c86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_FDCAN_MspInit+0xe4>)
 8004c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <HAL_FDCAN_MspInit+0xe4>)
 8004c9a:	f043 0302 	orr.w	r3, r3, #2
 8004c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ca2:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_FDCAN_MspInit+0xe4>)
 8004ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004cb0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8004cca:	2309      	movs	r3, #9
 8004ccc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	480d      	ldr	r0, [pc, #52]	; (8004d0c <HAL_FDCAN_MspInit+0xe8>)
 8004cd8:	f001 f9c6 	bl	8006068 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2014      	movs	r0, #20
 8004ce2:	f000 fb21 	bl	8005328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8004ce6:	2014      	movs	r0, #20
 8004ce8:	f000 fb38 	bl	800535c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8004cec:	2200      	movs	r2, #0
 8004cee:	2100      	movs	r1, #0
 8004cf0:	2016      	movs	r0, #22
 8004cf2:	f000 fb19 	bl	8005328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8004cf6:	2016      	movs	r0, #22
 8004cf8:	f000 fb30 	bl	800535c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8004cfc:	bf00      	nop
 8004cfe:	37e0      	adds	r7, #224	; 0xe0
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	4000a400 	.word	0x4000a400
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	58020400 	.word	0x58020400

08004d10 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b0b8      	sub	sp, #224	; 0xe0
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	60da      	str	r2, [r3, #12]
 8004d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d28:	f107 0310 	add.w	r3, r7, #16
 8004d2c:	22bc      	movs	r2, #188	; 0xbc
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f004 fa3d 	bl	80091b0 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a27      	ldr	r2, [pc, #156]	; (8004dd8 <HAL_HCD_MspInit+0xc8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d146      	bne.n	8004dce <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d4e:	f107 0310 	add.w	r3, r7, #16
 8004d52:	4618      	mov	r0, r3
 8004d54:	f002 fc3a 	bl	80075cc <HAL_RCCEx_PeriphCLKConfig>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8004d5e:	f7ff ff41 	bl	8004be4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004d62:	f001 fc3d 	bl	80065e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_HCD_MspInit+0xcc>)
 8004d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d6c:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <HAL_HCD_MspInit+0xcc>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d76:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_HCD_MspInit+0xcc>)
 8004d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004d84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004d9e:	230a      	movs	r3, #10
 8004da0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004da8:	4619      	mov	r1, r3
 8004daa:	480d      	ldr	r0, [pc, #52]	; (8004de0 <HAL_HCD_MspInit+0xd0>)
 8004dac:	f001 f95c 	bl	8006068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_HCD_MspInit+0xcc>)
 8004db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <HAL_HCD_MspInit+0xcc>)
 8004db8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_HCD_MspInit+0xcc>)
 8004dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004dc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004dce:	bf00      	nop
 8004dd0:	37e0      	adds	r7, #224	; 0xe0
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40080000 	.word	0x40080000
 8004ddc:	58024400 	.word	0x58024400
 8004de0:	58020000 	.word	0x58020000

08004de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b090      	sub	sp, #64	; 0x40
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b0f      	cmp	r3, #15
 8004df0:	d827      	bhi.n	8004e42 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004df2:	2200      	movs	r2, #0
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	2036      	movs	r0, #54	; 0x36
 8004df8:	f000 fa96 	bl	8005328 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004dfc:	2036      	movs	r0, #54	; 0x36
 8004dfe:	f000 faad 	bl	800535c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004e02:	4a29      	ldr	r2, [pc, #164]	; (8004ea8 <HAL_InitTick+0xc4>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004e08:	4b28      	ldr	r3, [pc, #160]	; (8004eac <HAL_InitTick+0xc8>)
 8004e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e0e:	4a27      	ldr	r2, [pc, #156]	; (8004eac <HAL_InitTick+0xc8>)
 8004e10:	f043 0310 	orr.w	r3, r3, #16
 8004e14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e18:	4b24      	ldr	r3, [pc, #144]	; (8004eac <HAL_InitTick+0xc8>)
 8004e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e26:	f107 0210 	add.w	r2, r7, #16
 8004e2a:	f107 0314 	add.w	r3, r7, #20
 8004e2e:	4611      	mov	r1, r2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f002 fb89 	bl	8007548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <HAL_InitTick+0x6a>
 8004e40:	e001      	b.n	8004e46 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e02b      	b.n	8004e9e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e46:	f002 fb69 	bl	800751c <HAL_RCC_GetPCLK1Freq>
 8004e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004e4c:	e004      	b.n	8004e58 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004e4e:	f002 fb65 	bl	800751c <HAL_RCC_GetPCLK1Freq>
 8004e52:	4603      	mov	r3, r0
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5a:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <HAL_InitTick+0xcc>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	0c9b      	lsrs	r3, r3, #18
 8004e62:	3b01      	subs	r3, #1
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004e66:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_InitTick+0xd0>)
 8004e68:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <HAL_InitTick+0xd4>)
 8004e6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_InitTick+0xd0>)
 8004e6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004e74:	4a0f      	ldr	r2, [pc, #60]	; (8004eb4 <HAL_InitTick+0xd0>)
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_InitTick+0xd0>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <HAL_InitTick+0xd0>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004e86:	480b      	ldr	r0, [pc, #44]	; (8004eb4 <HAL_InitTick+0xd0>)
 8004e88:	f003 fc4a 	bl	8008720 <HAL_TIM_Base_Init>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004e92:	4808      	ldr	r0, [pc, #32]	; (8004eb4 <HAL_InitTick+0xd0>)
 8004e94:	f003 fca6 	bl	80087e4 <HAL_TIM_Base_Start_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	e000      	b.n	8004e9e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3740      	adds	r7, #64	; 0x40
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	24000018 	.word	0x24000018
 8004eac:	58024400 	.word	0x58024400
 8004eb0:	431bde83 	.word	0x431bde83
 8004eb4:	2407f7c8 	.word	0x2407f7c8
 8004eb8:	40001000 	.word	0x40001000

08004ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ec0:	e7fe      	b.n	8004ec0 <NMI_Handler+0x4>

08004ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ec6:	e7fe      	b.n	8004ec6 <HardFault_Handler+0x4>

08004ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ecc:	e7fe      	b.n	8004ecc <MemManage_Handler+0x4>

08004ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ed2:	e7fe      	b.n	8004ed2 <BusFault_Handler+0x4>

08004ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ed8:	e7fe      	b.n	8004ed8 <UsageFault_Handler+0x4>

08004eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004eec:	4802      	ldr	r0, [pc, #8]	; (8004ef8 <FDCAN2_IT0_IRQHandler+0x10>)
 8004eee:	f000 fc21 	bl	8005734 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	2407f410 	.word	0x2407f410

08004efc <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004f00:	4802      	ldr	r0, [pc, #8]	; (8004f0c <FDCAN2_IT1_IRQHandler+0x10>)
 8004f02:	f000 fc17 	bl	8005734 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	2407f410 	.word	0x2407f410

08004f10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004f14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004f18:	f001 faa1 	bl	800645e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f24:	4802      	ldr	r0, [pc, #8]	; (8004f30 <TIM6_DAC_IRQHandler+0x10>)
 8004f26:	f003 fcd5 	bl	80088d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	2407f7c8 	.word	0x2407f7c8

08004f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f38:	4b39      	ldr	r3, [pc, #228]	; (8005020 <SystemInit+0xec>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	4a38      	ldr	r2, [pc, #224]	; (8005020 <SystemInit+0xec>)
 8004f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004f48:	4b36      	ldr	r3, [pc, #216]	; (8005024 <SystemInit+0xf0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	2b06      	cmp	r3, #6
 8004f52:	d807      	bhi.n	8004f64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004f54:	4b33      	ldr	r3, [pc, #204]	; (8005024 <SystemInit+0xf0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f023 030f 	bic.w	r3, r3, #15
 8004f5c:	4a31      	ldr	r2, [pc, #196]	; (8005024 <SystemInit+0xf0>)
 8004f5e:	f043 0307 	orr.w	r3, r3, #7
 8004f62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004f64:	4b30      	ldr	r3, [pc, #192]	; (8005028 <SystemInit+0xf4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2f      	ldr	r2, [pc, #188]	; (8005028 <SystemInit+0xf4>)
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <SystemInit+0xf4>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004f76:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <SystemInit+0xf4>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	492b      	ldr	r1, [pc, #172]	; (8005028 <SystemInit+0xf4>)
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	; (800502c <SystemInit+0xf8>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004f82:	4b28      	ldr	r3, [pc, #160]	; (8005024 <SystemInit+0xf0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004f8e:	4b25      	ldr	r3, [pc, #148]	; (8005024 <SystemInit+0xf0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 030f 	bic.w	r3, r3, #15
 8004f96:	4a23      	ldr	r2, [pc, #140]	; (8005024 <SystemInit+0xf0>)
 8004f98:	f043 0307 	orr.w	r3, r3, #7
 8004f9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004f9e:	4b22      	ldr	r3, [pc, #136]	; (8005028 <SystemInit+0xf4>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004fa4:	4b20      	ldr	r3, [pc, #128]	; (8005028 <SystemInit+0xf4>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004faa:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <SystemInit+0xf4>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <SystemInit+0xf4>)
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <SystemInit+0xfc>)
 8004fb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <SystemInit+0xf4>)
 8004fb8:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <SystemInit+0x100>)
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <SystemInit+0xf4>)
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <SystemInit+0x104>)
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004fc2:	4b19      	ldr	r3, [pc, #100]	; (8005028 <SystemInit+0xf4>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <SystemInit+0xf4>)
 8004fca:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <SystemInit+0x104>)
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004fce:	4b16      	ldr	r3, [pc, #88]	; (8005028 <SystemInit+0xf4>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004fd4:	4b14      	ldr	r3, [pc, #80]	; (8005028 <SystemInit+0xf4>)
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <SystemInit+0x104>)
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <SystemInit+0xf4>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <SystemInit+0xf4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a10      	ldr	r2, [pc, #64]	; (8005028 <SystemInit+0xf4>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <SystemInit+0xf4>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <SystemInit+0x108>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <SystemInit+0x10c>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ffe:	d202      	bcs.n	8005006 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005000:	4b10      	ldr	r3, [pc, #64]	; (8005044 <SystemInit+0x110>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <SystemInit+0x114>)
 8005008:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800500c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800500e:	4b04      	ldr	r3, [pc, #16]	; (8005020 <SystemInit+0xec>)
 8005010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005014:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005016:	bf00      	nop
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	e000ed00 	.word	0xe000ed00
 8005024:	52002000 	.word	0x52002000
 8005028:	58024400 	.word	0x58024400
 800502c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005030:	02020200 	.word	0x02020200
 8005034:	01ff0000 	.word	0x01ff0000
 8005038:	01010280 	.word	0x01010280
 800503c:	5c001000 	.word	0x5c001000
 8005040:	ffff0000 	.word	0xffff0000
 8005044:	51008108 	.word	0x51008108
 8005048:	52004000 	.word	0x52004000

0800504c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800504c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005050:	f7ff ff70 	bl	8004f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005054:	480c      	ldr	r0, [pc, #48]	; (8005088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005056:	490d      	ldr	r1, [pc, #52]	; (800508c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005058:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800505a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800505c:	e002      	b.n	8005064 <LoopCopyDataInit>

0800505e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800505e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005062:	3304      	adds	r3, #4

08005064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005068:	d3f9      	bcc.n	800505e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800506a:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800506c:	4c0a      	ldr	r4, [pc, #40]	; (8005098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800506e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005070:	e001      	b.n	8005076 <LoopFillZerobss>

08005072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005074:	3204      	adds	r2, #4

08005076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005078:	d3fb      	bcc.n	8005072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800507a:	f004 f857 	bl	800912c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800507e:	f7ff fa6d 	bl	800455c <main>
  bx  lr
 8005082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005084:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005088:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800508c:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8005090:	08009424 	.word	0x08009424
  ldr r2, =_sbss
 8005094:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8005098:	2407f818 	.word	0x2407f818

0800509c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800509c:	e7fe      	b.n	800509c <ADC3_IRQHandler>
	...

080050a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050a6:	2003      	movs	r0, #3
 80050a8:	f000 f933 	bl	8005312 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050ac:	f002 f88c 	bl	80071c8 <HAL_RCC_GetSysClockFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <HAL_Init+0x68>)
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	4913      	ldr	r1, [pc, #76]	; (800510c <HAL_Init+0x6c>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <HAL_Init+0x68>)
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	4a0e      	ldr	r2, [pc, #56]	; (800510c <HAL_Init+0x6c>)
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <HAL_Init+0x70>)
 80050e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <HAL_Init+0x74>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050ea:	200f      	movs	r0, #15
 80050ec:	f7ff fe7a 	bl	8004de4 <HAL_InitTick>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e002      	b.n	8005100 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80050fa:	f7ff fd79 	bl	8004bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	58024400 	.word	0x58024400
 800510c:	0800940c 	.word	0x0800940c
 8005110:	24000014 	.word	0x24000014
 8005114:	24000010 	.word	0x24000010

08005118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800511c:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_IncTick+0x20>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_IncTick+0x24>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4413      	add	r3, r2
 8005128:	4a04      	ldr	r2, [pc, #16]	; (800513c <HAL_IncTick+0x24>)
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	2400001c 	.word	0x2400001c
 800513c:	2407f814 	.word	0x2407f814

08005140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return uwTick;
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <HAL_GetTick+0x14>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	2407f814 	.word	0x2407f814

08005158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005160:	f7ff ffee 	bl	8005140 <HAL_GetTick>
 8005164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d005      	beq.n	800517e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_Delay+0x44>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800517e:	bf00      	nop
 8005180:	f7ff ffde 	bl	8005140 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	429a      	cmp	r2, r3
 800518e:	d8f7      	bhi.n	8005180 <HAL_Delay+0x28>
  {
  }
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2400001c 	.word	0x2400001c

080051a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <HAL_GetREVID+0x14>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	0c1b      	lsrs	r3, r3, #16
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	5c001000 	.word	0x5c001000

080051b8 <__NVIC_SetPriorityGrouping>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <__NVIC_SetPriorityGrouping+0x40>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051d4:	4013      	ands	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <__NVIC_SetPriorityGrouping+0x44>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051e6:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <__NVIC_SetPriorityGrouping+0x40>)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	60d3      	str	r3, [r2, #12]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	e000ed00 	.word	0xe000ed00
 80051fc:	05fa0000 	.word	0x05fa0000

08005200 <__NVIC_GetPriorityGrouping>:
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <__NVIC_GetPriorityGrouping+0x18>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	0a1b      	lsrs	r3, r3, #8
 800520a:	f003 0307 	and.w	r3, r3, #7
}
 800520e:	4618      	mov	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	e000ed00 	.word	0xe000ed00

0800521c <__NVIC_EnableIRQ>:
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800522a:	2b00      	cmp	r3, #0
 800522c:	db0b      	blt.n	8005246 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	f003 021f 	and.w	r2, r3, #31
 8005234:	4907      	ldr	r1, [pc, #28]	; (8005254 <__NVIC_EnableIRQ+0x38>)
 8005236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	2001      	movs	r0, #1
 800523e:	fa00 f202 	lsl.w	r2, r0, r2
 8005242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	e000e100 	.word	0xe000e100

08005258 <__NVIC_SetPriority>:
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	6039      	str	r1, [r7, #0]
 8005262:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005268:	2b00      	cmp	r3, #0
 800526a:	db0a      	blt.n	8005282 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	b2da      	uxtb	r2, r3
 8005270:	490c      	ldr	r1, [pc, #48]	; (80052a4 <__NVIC_SetPriority+0x4c>)
 8005272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005276:	0112      	lsls	r2, r2, #4
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	440b      	add	r3, r1
 800527c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005280:	e00a      	b.n	8005298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	4908      	ldr	r1, [pc, #32]	; (80052a8 <__NVIC_SetPriority+0x50>)
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	3b04      	subs	r3, #4
 8005290:	0112      	lsls	r2, r2, #4
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	440b      	add	r3, r1
 8005296:	761a      	strb	r2, [r3, #24]
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	e000e100 	.word	0xe000e100
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b089      	sub	sp, #36	; 0x24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f1c3 0307 	rsb	r3, r3, #7
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	bf28      	it	cs
 80052ca:	2304      	movcs	r3, #4
 80052cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	3304      	adds	r3, #4
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d902      	bls.n	80052dc <NVIC_EncodePriority+0x30>
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	3b03      	subs	r3, #3
 80052da:	e000      	b.n	80052de <NVIC_EncodePriority+0x32>
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052e0:	f04f 32ff 	mov.w	r2, #4294967295
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43da      	mvns	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	401a      	ands	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052f4:	f04f 31ff 	mov.w	r1, #4294967295
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	43d9      	mvns	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005304:	4313      	orrs	r3, r2
         );
}
 8005306:	4618      	mov	r0, r3
 8005308:	3724      	adds	r7, #36	; 0x24
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff ff4c 	bl	80051b8 <__NVIC_SetPriorityGrouping>
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005336:	f7ff ff63 	bl	8005200 <__NVIC_GetPriorityGrouping>
 800533a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	6978      	ldr	r0, [r7, #20]
 8005342:	f7ff ffb3 	bl	80052ac <NVIC_EncodePriority>
 8005346:	4602      	mov	r2, r0
 8005348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800534c:	4611      	mov	r1, r2
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff ff82 	bl	8005258 <__NVIC_SetPriority>
}
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff ff56 	bl	800521c <__NVIC_EnableIRQ>
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b098      	sub	sp, #96	; 0x60
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005380:	4a84      	ldr	r2, [pc, #528]	; (8005594 <HAL_FDCAN_Init+0x21c>)
 8005382:	f107 030c 	add.w	r3, r7, #12
 8005386:	4611      	mov	r1, r2
 8005388:	224c      	movs	r2, #76	; 0x4c
 800538a:	4618      	mov	r0, r3
 800538c:	f003 ff02 	bl	8009194 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e1c6      	b.n	8005728 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7e      	ldr	r2, [pc, #504]	; (8005598 <HAL_FDCAN_Init+0x220>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d106      	bne.n	80053b2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff fc2c 	bl	8004c24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0210 	bic.w	r2, r2, #16
 80053da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053dc:	f7ff feb0 	bl	8005140 <HAL_GetTick>
 80053e0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80053e2:	e014      	b.n	800540e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80053e4:	f7ff feac 	bl	8005140 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b0a      	cmp	r3, #10
 80053f0:	d90d      	bls.n	800540e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f8:	f043 0201 	orr.w	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2203      	movs	r2, #3
 8005406:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e18c      	b.n	8005728 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d0e3      	beq.n	80053e4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800542c:	f7ff fe88 	bl	8005140 <HAL_GetTick>
 8005430:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005432:	e014      	b.n	800545e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005434:	f7ff fe84 	bl	8005140 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b0a      	cmp	r3, #10
 8005440:	d90d      	bls.n	800545e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005448:	f043 0201 	orr.w	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2203      	movs	r2, #3
 8005456:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e164      	b.n	8005728 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0e3      	beq.n	8005434 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0202 	orr.w	r2, r2, #2
 800547a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	7c1b      	ldrb	r3, [r3, #16]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d108      	bne.n	8005496 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005492:	619a      	str	r2, [r3, #24]
 8005494:	e007      	b.n	80054a6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7c5b      	ldrb	r3, [r3, #17]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d108      	bne.n	80054c0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054bc:	619a      	str	r2, [r3, #24]
 80054be:	e007      	b.n	80054d0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	7c9b      	ldrb	r3, [r3, #18]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d108      	bne.n	80054ea <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054e6:	619a      	str	r2, [r3, #24]
 80054e8:	e007      	b.n	80054fa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054f8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800551e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0210 	bic.w	r2, r2, #16
 800552e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d108      	bne.n	800554a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0204 	orr.w	r2, r2, #4
 8005546:	619a      	str	r2, [r3, #24]
 8005548:	e030      	b.n	80055ac <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d02c      	beq.n	80055ac <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d020      	beq.n	800559c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005568:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0210 	orr.w	r2, r2, #16
 8005578:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	2b03      	cmp	r3, #3
 8005580:	d114      	bne.n	80055ac <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699a      	ldr	r2, [r3, #24]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0220 	orr.w	r2, r2, #32
 8005590:	619a      	str	r2, [r3, #24]
 8005592:	e00b      	b.n	80055ac <HAL_FDCAN_Init+0x234>
 8005594:	08009384 	.word	0x08009384
 8005598:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0220 	orr.w	r2, r2, #32
 80055aa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055bc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055c4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055d4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055d6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e0:	d115      	bne.n	800560e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	3b01      	subs	r3, #1
 80055ee:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80055f0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	3b01      	subs	r3, #1
 80055f8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80055fa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	3b01      	subs	r3, #1
 8005604:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800560a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800560c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	4413      	add	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d011      	beq.n	800565e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005642:	f023 0107 	bic.w	r1, r3, #7
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	3360      	adds	r3, #96	; 0x60
 800564e:	443b      	add	r3, r7
 8005650:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d011      	beq.n	800568a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800566e:	f023 0107 	bic.w	r1, r3, #7
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	3360      	adds	r3, #96	; 0x60
 800567a:	443b      	add	r3, r7
 800567c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568e:	2b00      	cmp	r3, #0
 8005690:	d012      	beq.n	80056b8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800569a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	3360      	adds	r3, #96	; 0x60
 80056a6:	443b      	add	r3, r7
 80056a8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80056ac:	011a      	lsls	r2, r3, #4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d012      	beq.n	80056e6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80056c8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	3360      	adds	r3, #96	; 0x60
 80056d4:	443b      	add	r3, r7
 80056d6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a11      	ldr	r2, [pc, #68]	; (8005730 <HAL_FDCAN_Init+0x3b8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d107      	bne.n	8005700 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f022 0203 	bic.w	r2, r2, #3
 80056fe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fb1f 	bl	8005d5c <FDCAN_CalcultateRamBlockAddresses>
 800571e:	4603      	mov	r3, r0
 8005720:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005724:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005728:	4618      	mov	r0, r3
 800572a:	3760      	adds	r7, #96	; 0x60
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	4000a000 	.word	0x4000a000

08005734 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b096      	sub	sp, #88	; 0x58
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800573c:	4b9a      	ldr	r3, [pc, #616]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	079b      	lsls	r3, r3, #30
 8005742:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005744:	4b98      	ldr	r3, [pc, #608]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	079b      	lsls	r3, r3, #30
 800574a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800574c:	4013      	ands	r3, r2
 800574e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800575a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005764:	4013      	ands	r3, r2
 8005766:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800577c:	4013      	ands	r3, r2
 800577e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005794:	4013      	ands	r3, r2
 8005796:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80057a2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ac:	4013      	ands	r3, r2
 80057ae:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80057ba:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057c4:	4013      	ands	r3, r2
 80057c6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80057d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	0a1b      	lsrs	r3, r3, #8
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f8:	651a      	str	r2, [r3, #80]	; 0x50
 80057fa:	4b6b      	ldr	r3, [pc, #428]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa5f 	bl	8005cc4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005808:	0a9b      	lsrs	r3, r3, #10
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01d      	beq.n	800584e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	0a9b      	lsrs	r3, r3, #10
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d017      	beq.n	800584e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005832:	4013      	ands	r3, r2
 8005834:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800583e:	651a      	str	r2, [r3, #80]	; 0x50
 8005840:	4b59      	ldr	r3, [pc, #356]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005846:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa12 	bl	8005c72 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800584e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800585a:	4b54      	ldr	r3, [pc, #336]	; (80059ac <HAL_FDCAN_IRQHandler+0x278>)
 800585c:	400b      	ands	r3, r1
 800585e:	6513      	str	r3, [r2, #80]	; 0x50
 8005860:	4a51      	ldr	r2, [pc, #324]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 8005862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005864:	0f9b      	lsrs	r3, r3, #30
 8005866:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9c0 	bl	8005bf0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800587c:	4b4b      	ldr	r3, [pc, #300]	; (80059ac <HAL_FDCAN_IRQHandler+0x278>)
 800587e:	400b      	ands	r3, r1
 8005880:	6513      	str	r3, [r2, #80]	; 0x50
 8005882:	4a49      	ldr	r2, [pc, #292]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 8005884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005886:	0f9b      	lsrs	r3, r3, #30
 8005888:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800588a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f9ba 	bl	8005c06 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800589e:	4b43      	ldr	r3, [pc, #268]	; (80059ac <HAL_FDCAN_IRQHandler+0x278>)
 80058a0:	400b      	ands	r3, r1
 80058a2:	6513      	str	r3, [r2, #80]	; 0x50
 80058a4:	4a40      	ldr	r2, [pc, #256]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 80058a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a8:	0f9b      	lsrs	r3, r3, #30
 80058aa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80058ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9b4 	bl	8005c1c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80058b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80058c0:	4b3a      	ldr	r3, [pc, #232]	; (80059ac <HAL_FDCAN_IRQHandler+0x278>)
 80058c2:	400b      	ands	r3, r1
 80058c4:	6513      	str	r3, [r2, #80]	; 0x50
 80058c6:	4a38      	ldr	r2, [pc, #224]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	0f9b      	lsrs	r3, r3, #30
 80058cc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80058ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f9ae 	bl	8005c32 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	0adb      	lsrs	r3, r3, #11
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d010      	beq.n	8005904 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	0adb      	lsrs	r3, r3, #11
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f6:	651a      	str	r2, [r3, #80]	; 0x50
 80058f8:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9a2 	bl	8005c48 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005906:	0a5b      	lsrs	r3, r3, #9
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01d      	beq.n	800594c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	0a5b      	lsrs	r3, r3, #9
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d017      	beq.n	800594c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800592e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005930:	4013      	ands	r3, r2
 8005932:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593c:	651a      	str	r2, [r3, #80]	; 0x50
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 8005940:	2200      	movs	r2, #0
 8005942:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f988 	bl	8005c5c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800594c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594e:	0cdb      	lsrs	r3, r3, #19
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d010      	beq.n	800597a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	0cdb      	lsrs	r3, r3, #19
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800596c:	651a      	str	r2, [r3, #80]	; 0x50
 800596e:	4b0e      	ldr	r3, [pc, #56]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 8005970:	2200      	movs	r2, #0
 8005972:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f987 	bl	8005c88 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	0c1b      	lsrs	r3, r3, #16
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d016      	beq.n	80059b4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	0c1b      	lsrs	r3, r3, #16
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d010      	beq.n	80059b4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800599a:	651a      	str	r2, [r3, #80]	; 0x50
 800599c:	4b02      	ldr	r3, [pc, #8]	; (80059a8 <HAL_FDCAN_IRQHandler+0x274>)
 800599e:	2200      	movs	r2, #0
 80059a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	e004      	b.n	80059b0 <HAL_FDCAN_IRQHandler+0x27c>
 80059a6:	bf00      	nop
 80059a8:	4000a800 	.word	0x4000a800
 80059ac:	3fcfffff 	.word	0x3fcfffff
 80059b0:	f000 f974 	bl	8005c9c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80059b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b6:	0c9b      	lsrs	r3, r3, #18
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	0c9b      	lsrs	r3, r3, #18
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059d4:	651a      	str	r2, [r3, #80]	; 0x50
 80059d6:	4b83      	ldr	r3, [pc, #524]	; (8005be4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80059d8:	2200      	movs	r2, #0
 80059da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f967 	bl	8005cb0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80059e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e4:	0c5b      	lsrs	r3, r3, #17
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d015      	beq.n	8005a1a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	0c5b      	lsrs	r3, r3, #17
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a02:	651a      	str	r2, [r3, #80]	; 0x50
 8005a04:	4b77      	ldr	r3, [pc, #476]	; (8005be4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a26:	4b70      	ldr	r3, [pc, #448]	; (8005be8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005a28:	400b      	ands	r3, r1
 8005a2a:	6513      	str	r3, [r2, #80]	; 0x50
 8005a2c:	4a6d      	ldr	r2, [pc, #436]	; (8005be4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	0f9b      	lsrs	r3, r3, #30
 8005a32:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005a34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f958 	bl	8005cec <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d011      	beq.n	8005a66 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a48:	4b67      	ldr	r3, [pc, #412]	; (8005be8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005a4a:	400b      	ands	r3, r1
 8005a4c:	6513      	str	r3, [r2, #80]	; 0x50
 8005a4e:	4a65      	ldr	r2, [pc, #404]	; (8005be4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a52:	0f9b      	lsrs	r3, r3, #30
 8005a54:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a60      	ldr	r2, [pc, #384]	; (8005bec <HAL_FDCAN_IRQHandler+0x4b8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	f040 80ac 	bne.w	8005bca <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80a4 	beq.w	8005bca <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a96:	4013      	ands	r3, r2
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aae:	4013      	ands	r3, r2
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005ad4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	6a3a      	ldr	r2, [r7, #32]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005aec:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	4013      	ands	r3, r2
 8005af8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b16:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f8f1 	bl	8005d02 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b2c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f8f1 	bl	8005d18 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	099b      	lsrs	r3, r3, #6
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01a      	beq.n	8005b78 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	099b      	lsrs	r3, r3, #6
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d014      	beq.n	8005b78 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b54:	0c1b      	lsrs	r3, r3, #16
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b64:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2240      	movs	r2, #64	; 0x40
 8005b6c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	6939      	ldr	r1, [r7, #16]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8db 	bl	8005d2e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8dc 	bl	8005d46 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f87f 	bl	8005cd8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005bda:	bf00      	nop
 8005bdc:	3758      	adds	r7, #88	; 0x58
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	4000a800 	.word	0x4000a800
 8005be8:	3fcfffff 	.word	0x3fcfffff
 8005bec:	4000a000 	.word	0x4000a000

08005bf0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d72:	4ba7      	ldr	r3, [pc, #668]	; (8006010 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	0091      	lsls	r1, r2, #2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	041a      	lsls	r2, r3, #16
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	4413      	add	r3, r2
 8005da8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005db2:	4b97      	ldr	r3, [pc, #604]	; (8006010 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	0091      	lsls	r1, r2, #2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	041a      	lsls	r2, r3, #16
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	4413      	add	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005df4:	4b86      	ldr	r3, [pc, #536]	; (8006010 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005df6:	4013      	ands	r3, r2
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	0091      	lsls	r1, r2, #2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6812      	ldr	r2, [r2, #0]
 8005e00:	430b      	orrs	r3, r1
 8005e02:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	041a      	lsls	r2, r3, #16
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	4413      	add	r3, r2
 8005e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e3c:	4b74      	ldr	r3, [pc, #464]	; (8006010 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	0091      	lsls	r1, r2, #2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e56:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	041a      	lsls	r2, r3, #16
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005e84:	4b62      	ldr	r3, [pc, #392]	; (8006010 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	0091      	lsls	r1, r2, #2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	430b      	orrs	r3, r1
 8005e92:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005eb0:	4b57      	ldr	r3, [pc, #348]	; (8006010 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	0091      	lsls	r1, r2, #2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	041a      	lsls	r2, r3, #16
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	0091      	lsls	r1, r2, #2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	430b      	orrs	r3, r1
 8005f00:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f0c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	041a      	lsls	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f28:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f30:	061a      	lsls	r2, r3, #24
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f40:	4b34      	ldr	r3, [pc, #208]	; (8006014 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005f42:	4413      	add	r3, r2
 8005f44:	009a      	lsls	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	441a      	add	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	441a      	add	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006006:	4a04      	ldr	r2, [pc, #16]	; (8006018 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d915      	bls.n	8006038 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800600c:	e006      	b.n	800601c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800600e:	bf00      	nop
 8006010:	ffff0003 	.word	0xffff0003
 8006014:	10002b00 	.word	0x10002b00
 8006018:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2203      	movs	r2, #3
 8006030:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e010      	b.n	800605a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e005      	b.n	800604c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3304      	adds	r3, #4
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	429a      	cmp	r2, r3
 8006056:	d3f3      	bcc.n	8006040 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop

08006068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006068:	b480      	push	{r7}
 800606a:	b089      	sub	sp, #36	; 0x24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006076:	4b89      	ldr	r3, [pc, #548]	; (800629c <HAL_GPIO_Init+0x234>)
 8006078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800607a:	e194      	b.n	80063a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	2101      	movs	r1, #1
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	4013      	ands	r3, r2
 800608a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8186 	beq.w	80063a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d005      	beq.n	80060ac <HAL_GPIO_Init+0x44>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d130      	bne.n	800610e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	2203      	movs	r2, #3
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060e2:	2201      	movs	r2, #1
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43db      	mvns	r3, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4013      	ands	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f003 0201 	and.w	r2, r3, #1
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	4313      	orrs	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b03      	cmp	r3, #3
 8006118:	d017      	beq.n	800614a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	2203      	movs	r2, #3
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	43db      	mvns	r3, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4013      	ands	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4313      	orrs	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d123      	bne.n	800619e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	08da      	lsrs	r2, r3, #3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3208      	adds	r2, #8
 800615e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	220f      	movs	r2, #15
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4013      	ands	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	08da      	lsrs	r2, r3, #3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3208      	adds	r2, #8
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	2203      	movs	r2, #3
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	4013      	ands	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f003 0203 	and.w	r2, r3, #3
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80e0 	beq.w	80063a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e0:	4b2f      	ldr	r3, [pc, #188]	; (80062a0 <HAL_GPIO_Init+0x238>)
 80061e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061e6:	4a2e      	ldr	r2, [pc, #184]	; (80062a0 <HAL_GPIO_Init+0x238>)
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061f0:	4b2b      	ldr	r3, [pc, #172]	; (80062a0 <HAL_GPIO_Init+0x238>)
 80061f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061fe:	4a29      	ldr	r2, [pc, #164]	; (80062a4 <HAL_GPIO_Init+0x23c>)
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	089b      	lsrs	r3, r3, #2
 8006204:	3302      	adds	r3, #2
 8006206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	220f      	movs	r2, #15
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	43db      	mvns	r3, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4013      	ands	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a20      	ldr	r2, [pc, #128]	; (80062a8 <HAL_GPIO_Init+0x240>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d052      	beq.n	80062d0 <HAL_GPIO_Init+0x268>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1f      	ldr	r2, [pc, #124]	; (80062ac <HAL_GPIO_Init+0x244>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d031      	beq.n	8006296 <HAL_GPIO_Init+0x22e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <HAL_GPIO_Init+0x248>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02b      	beq.n	8006292 <HAL_GPIO_Init+0x22a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <HAL_GPIO_Init+0x24c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d025      	beq.n	800628e <HAL_GPIO_Init+0x226>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1c      	ldr	r2, [pc, #112]	; (80062b8 <HAL_GPIO_Init+0x250>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01f      	beq.n	800628a <HAL_GPIO_Init+0x222>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1b      	ldr	r2, [pc, #108]	; (80062bc <HAL_GPIO_Init+0x254>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d019      	beq.n	8006286 <HAL_GPIO_Init+0x21e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a1a      	ldr	r2, [pc, #104]	; (80062c0 <HAL_GPIO_Init+0x258>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_GPIO_Init+0x21a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a19      	ldr	r2, [pc, #100]	; (80062c4 <HAL_GPIO_Init+0x25c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00d      	beq.n	800627e <HAL_GPIO_Init+0x216>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_GPIO_Init+0x260>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <HAL_GPIO_Init+0x212>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a17      	ldr	r2, [pc, #92]	; (80062cc <HAL_GPIO_Init+0x264>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d101      	bne.n	8006276 <HAL_GPIO_Init+0x20e>
 8006272:	2309      	movs	r3, #9
 8006274:	e02d      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 8006276:	230a      	movs	r3, #10
 8006278:	e02b      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 800627a:	2308      	movs	r3, #8
 800627c:	e029      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 800627e:	2307      	movs	r3, #7
 8006280:	e027      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 8006282:	2306      	movs	r3, #6
 8006284:	e025      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 8006286:	2305      	movs	r3, #5
 8006288:	e023      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 800628a:	2304      	movs	r3, #4
 800628c:	e021      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 800628e:	2303      	movs	r3, #3
 8006290:	e01f      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 8006292:	2302      	movs	r3, #2
 8006294:	e01d      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 8006296:	2301      	movs	r3, #1
 8006298:	e01b      	b.n	80062d2 <HAL_GPIO_Init+0x26a>
 800629a:	bf00      	nop
 800629c:	58000080 	.word	0x58000080
 80062a0:	58024400 	.word	0x58024400
 80062a4:	58000400 	.word	0x58000400
 80062a8:	58020000 	.word	0x58020000
 80062ac:	58020400 	.word	0x58020400
 80062b0:	58020800 	.word	0x58020800
 80062b4:	58020c00 	.word	0x58020c00
 80062b8:	58021000 	.word	0x58021000
 80062bc:	58021400 	.word	0x58021400
 80062c0:	58021800 	.word	0x58021800
 80062c4:	58021c00 	.word	0x58021c00
 80062c8:	58022000 	.word	0x58022000
 80062cc:	58022400 	.word	0x58022400
 80062d0:	2300      	movs	r3, #0
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	f002 0203 	and.w	r2, r2, #3
 80062d8:	0092      	lsls	r2, r2, #2
 80062da:	4093      	lsls	r3, r2
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	4313      	orrs	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062e2:	4938      	ldr	r1, [pc, #224]	; (80063c4 <HAL_GPIO_Init+0x35c>)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	3302      	adds	r3, #2
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	43db      	mvns	r3, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4013      	ands	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800631e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	43db      	mvns	r3, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4013      	ands	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	3301      	adds	r3, #1
 80063a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	fa22 f303 	lsr.w	r3, r2, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f47f ae63 	bne.w	800607c <HAL_GPIO_Init+0x14>
  }
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	3724      	adds	r7, #36	; 0x24
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	58000400 	.word	0x58000400

080063c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	887b      	ldrh	r3, [r7, #2]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
 80063e4:	e001      	b.n	80063ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	807b      	strh	r3, [r7, #2]
 8006404:	4613      	mov	r3, r2
 8006406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006408:	787b      	ldrb	r3, [r7, #1]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800640e:	887a      	ldrh	r2, [r7, #2]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006414:	e003      	b.n	800641e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006416:	887b      	ldrh	r3, [r7, #2]
 8006418:	041a      	lsls	r2, r3, #16
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	619a      	str	r2, [r3, #24]
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800643c:	887a      	ldrh	r2, [r7, #2]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4013      	ands	r3, r2
 8006442:	041a      	lsls	r2, r3, #16
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	43d9      	mvns	r1, r3
 8006448:	887b      	ldrh	r3, [r7, #2]
 800644a:	400b      	ands	r3, r1
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	619a      	str	r2, [r3, #24]
}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	4603      	mov	r3, r0
 8006466:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800646c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	4013      	ands	r3, r2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f804 	bl	8006492 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	4603      	mov	r3, r0
 800649a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80064a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064aa:	b08f      	sub	sp, #60	; 0x3c
 80064ac:	af0a      	add	r7, sp, #40	; 0x28
 80064ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e054      	b.n	8006564 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7fe fc1b 	bl	8004d10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2203      	movs	r2, #3
 80064de:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f002 fc59 	bl	8008db0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	687e      	ldr	r6, [r7, #4]
 8006506:	466d      	mov	r5, sp
 8006508:	f106 0410 	add.w	r4, r6, #16
 800650c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800650e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006518:	e885 0003 	stmia.w	r5, {r0, r1}
 800651c:	1d33      	adds	r3, r6, #4
 800651e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006520:	6838      	ldr	r0, [r7, #0]
 8006522:	f002 fbd7 	bl	8008cd4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2101      	movs	r1, #1
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fc50 	bl	8008dd2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	687e      	ldr	r6, [r7, #4]
 800653a:	466d      	mov	r5, sp
 800653c:	f106 0410 	add.w	r4, r6, #16
 8006540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800654c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006550:	1d33      	adds	r3, r6, #4
 8006552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006554:	6838      	ldr	r0, [r7, #0]
 8006556:	f002 fd2f 	bl	8008fb8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800656c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006574:	4b19      	ldr	r3, [pc, #100]	; (80065dc <HAL_PWREx_ConfigSupply+0x70>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b04      	cmp	r3, #4
 800657e:	d00a      	beq.n	8006596 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006580:	4b16      	ldr	r3, [pc, #88]	; (80065dc <HAL_PWREx_ConfigSupply+0x70>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d001      	beq.n	8006592 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e01f      	b.n	80065d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e01d      	b.n	80065d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006596:	4b11      	ldr	r3, [pc, #68]	; (80065dc <HAL_PWREx_ConfigSupply+0x70>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f023 0207 	bic.w	r2, r3, #7
 800659e:	490f      	ldr	r1, [pc, #60]	; (80065dc <HAL_PWREx_ConfigSupply+0x70>)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80065a6:	f7fe fdcb 	bl	8005140 <HAL_GetTick>
 80065aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065ac:	e009      	b.n	80065c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80065ae:	f7fe fdc7 	bl	8005140 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065bc:	d901      	bls.n	80065c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e007      	b.n	80065d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <HAL_PWREx_ConfigSupply+0x70>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ce:	d1ee      	bne.n	80065ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	58024800 	.word	0x58024800

080065e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a04      	ldr	r2, [pc, #16]	; (80065fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80065ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ee:	60d3      	str	r3, [r2, #12]
}
 80065f0:	bf00      	nop
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	58024800 	.word	0x58024800

08006600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	; 0x30
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d102      	bne.n	8006614 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f000 bc1d 	b.w	8006e4e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8087 	beq.w	8006730 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006622:	4b99      	ldr	r3, [pc, #612]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800662c:	4b96      	ldr	r3, [pc, #600]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	2b10      	cmp	r3, #16
 8006636:	d007      	beq.n	8006648 <HAL_RCC_OscConfig+0x48>
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	2b18      	cmp	r3, #24
 800663c:	d110      	bne.n	8006660 <HAL_RCC_OscConfig+0x60>
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d10b      	bne.n	8006660 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006648:	4b8f      	ldr	r3, [pc, #572]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d06c      	beq.n	800672e <HAL_RCC_OscConfig+0x12e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d168      	bne.n	800672e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e3f6      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006668:	d106      	bne.n	8006678 <HAL_RCC_OscConfig+0x78>
 800666a:	4b87      	ldr	r3, [pc, #540]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a86      	ldr	r2, [pc, #536]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e02e      	b.n	80066d6 <HAL_RCC_OscConfig+0xd6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10c      	bne.n	800669a <HAL_RCC_OscConfig+0x9a>
 8006680:	4b81      	ldr	r3, [pc, #516]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a80      	ldr	r2, [pc, #512]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	4b7e      	ldr	r3, [pc, #504]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a7d      	ldr	r2, [pc, #500]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	e01d      	b.n	80066d6 <HAL_RCC_OscConfig+0xd6>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a2:	d10c      	bne.n	80066be <HAL_RCC_OscConfig+0xbe>
 80066a4:	4b78      	ldr	r3, [pc, #480]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a77      	ldr	r2, [pc, #476]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	4b75      	ldr	r3, [pc, #468]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a74      	ldr	r2, [pc, #464]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e00b      	b.n	80066d6 <HAL_RCC_OscConfig+0xd6>
 80066be:	4b72      	ldr	r3, [pc, #456]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a71      	ldr	r2, [pc, #452]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	4b6f      	ldr	r3, [pc, #444]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a6e      	ldr	r2, [pc, #440]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d013      	beq.n	8006706 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066de:	f7fe fd2f 	bl	8005140 <HAL_GetTick>
 80066e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066e6:	f7fe fd2b 	bl	8005140 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b64      	cmp	r3, #100	; 0x64
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e3aa      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066f8:	4b63      	ldr	r3, [pc, #396]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0f0      	beq.n	80066e6 <HAL_RCC_OscConfig+0xe6>
 8006704:	e014      	b.n	8006730 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006706:	f7fe fd1b 	bl	8005140 <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800670e:	f7fe fd17 	bl	8005140 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b64      	cmp	r3, #100	; 0x64
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e396      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006720:	4b59      	ldr	r3, [pc, #356]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f0      	bne.n	800670e <HAL_RCC_OscConfig+0x10e>
 800672c:	e000      	b.n	8006730 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800672e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80cb 	beq.w	80068d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800673e:	4b52      	ldr	r3, [pc, #328]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006746:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006748:	4b4f      	ldr	r3, [pc, #316]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <HAL_RCC_OscConfig+0x164>
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	2b18      	cmp	r3, #24
 8006758:	d156      	bne.n	8006808 <HAL_RCC_OscConfig+0x208>
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d151      	bne.n	8006808 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006764:	4b48      	ldr	r3, [pc, #288]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_RCC_OscConfig+0x17c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e368      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800677c:	4b42      	ldr	r3, [pc, #264]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f023 0219 	bic.w	r2, r3, #25
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	493f      	ldr	r1, [pc, #252]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800678a:	4313      	orrs	r3, r2
 800678c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800678e:	f7fe fcd7 	bl	8005140 <HAL_GetTick>
 8006792:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006796:	f7fe fcd3 	bl	8005140 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e352      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067a8:	4b37      	ldr	r3, [pc, #220]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b4:	f7fe fcf4 	bl	80051a0 <HAL_GetREVID>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80067be:	4293      	cmp	r3, r2
 80067c0:	d817      	bhi.n	80067f2 <HAL_RCC_OscConfig+0x1f2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d108      	bne.n	80067dc <HAL_RCC_OscConfig+0x1dc>
 80067ca:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80067d2:	4a2d      	ldr	r2, [pc, #180]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80067d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067da:	e07b      	b.n	80068d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067dc:	4b2a      	ldr	r3, [pc, #168]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	031b      	lsls	r3, r3, #12
 80067ea:	4927      	ldr	r1, [pc, #156]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067f0:	e070      	b.n	80068d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f2:	4b25      	ldr	r3, [pc, #148]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	061b      	lsls	r3, r3, #24
 8006800:	4921      	ldr	r1, [pc, #132]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006802:	4313      	orrs	r3, r2
 8006804:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006806:	e065      	b.n	80068d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d048      	beq.n	80068a2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006810:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f023 0219 	bic.w	r2, r3, #25
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	491a      	ldr	r1, [pc, #104]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800681e:	4313      	orrs	r3, r2
 8006820:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006822:	f7fe fc8d 	bl	8005140 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800682a:	f7fe fc89 	bl	8005140 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e308      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006848:	f7fe fcaa 	bl	80051a0 <HAL_GetREVID>
 800684c:	4603      	mov	r3, r0
 800684e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006852:	4293      	cmp	r3, r2
 8006854:	d81a      	bhi.n	800688c <HAL_RCC_OscConfig+0x28c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d108      	bne.n	8006870 <HAL_RCC_OscConfig+0x270>
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006866:	4a08      	ldr	r2, [pc, #32]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800686c:	6053      	str	r3, [r2, #4]
 800686e:	e031      	b.n	80068d4 <HAL_RCC_OscConfig+0x2d4>
 8006870:	4b05      	ldr	r3, [pc, #20]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	031b      	lsls	r3, r3, #12
 800687e:	4902      	ldr	r1, [pc, #8]	; (8006888 <HAL_RCC_OscConfig+0x288>)
 8006880:	4313      	orrs	r3, r2
 8006882:	604b      	str	r3, [r1, #4]
 8006884:	e026      	b.n	80068d4 <HAL_RCC_OscConfig+0x2d4>
 8006886:	bf00      	nop
 8006888:	58024400 	.word	0x58024400
 800688c:	4b9a      	ldr	r3, [pc, #616]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	061b      	lsls	r3, r3, #24
 800689a:	4997      	ldr	r1, [pc, #604]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
 80068a0:	e018      	b.n	80068d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068a2:	4b95      	ldr	r3, [pc, #596]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a94      	ldr	r2, [pc, #592]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ae:	f7fe fc47 	bl	8005140 <HAL_GetTick>
 80068b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068b4:	e008      	b.n	80068c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068b6:	f7fe fc43 	bl	8005140 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e2c2      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068c8:	4b8b      	ldr	r3, [pc, #556]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f0      	bne.n	80068b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80a9 	beq.w	8006a34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e2:	4b85      	ldr	r3, [pc, #532]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068ec:	4b82      	ldr	r3, [pc, #520]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d007      	beq.n	8006908 <HAL_RCC_OscConfig+0x308>
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b18      	cmp	r3, #24
 80068fc:	d13a      	bne.n	8006974 <HAL_RCC_OscConfig+0x374>
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b01      	cmp	r3, #1
 8006906:	d135      	bne.n	8006974 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006908:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_OscConfig+0x320>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d001      	beq.n	8006920 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e296      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006920:	f7fe fc3e 	bl	80051a0 <HAL_GetREVID>
 8006924:	4603      	mov	r3, r0
 8006926:	f241 0203 	movw	r2, #4099	; 0x1003
 800692a:	4293      	cmp	r3, r2
 800692c:	d817      	bhi.n	800695e <HAL_RCC_OscConfig+0x35e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	2b20      	cmp	r3, #32
 8006934:	d108      	bne.n	8006948 <HAL_RCC_OscConfig+0x348>
 8006936:	4b70      	ldr	r3, [pc, #448]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800693e:	4a6e      	ldr	r2, [pc, #440]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006944:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006946:	e075      	b.n	8006a34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006948:	4b6b      	ldr	r3, [pc, #428]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	069b      	lsls	r3, r3, #26
 8006956:	4968      	ldr	r1, [pc, #416]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006958:	4313      	orrs	r3, r2
 800695a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800695c:	e06a      	b.n	8006a34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800695e:	4b66      	ldr	r3, [pc, #408]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	061b      	lsls	r3, r3, #24
 800696c:	4962      	ldr	r1, [pc, #392]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 800696e:	4313      	orrs	r3, r2
 8006970:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006972:	e05f      	b.n	8006a34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d042      	beq.n	8006a02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800697c:	4b5e      	ldr	r3, [pc, #376]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a5d      	ldr	r2, [pc, #372]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fe fbda 	bl	8005140 <HAL_GetTick>
 800698c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006990:	f7fe fbd6 	bl	8005140 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e255      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069a2:	4b55      	ldr	r3, [pc, #340]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f0      	beq.n	8006990 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069ae:	f7fe fbf7 	bl	80051a0 <HAL_GetREVID>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d817      	bhi.n	80069ec <HAL_RCC_OscConfig+0x3ec>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d108      	bne.n	80069d6 <HAL_RCC_OscConfig+0x3d6>
 80069c4:	4b4c      	ldr	r3, [pc, #304]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80069cc:	4a4a      	ldr	r2, [pc, #296]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80069ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069d2:	6053      	str	r3, [r2, #4]
 80069d4:	e02e      	b.n	8006a34 <HAL_RCC_OscConfig+0x434>
 80069d6:	4b48      	ldr	r3, [pc, #288]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	069b      	lsls	r3, r3, #26
 80069e4:	4944      	ldr	r1, [pc, #272]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	604b      	str	r3, [r1, #4]
 80069ea:	e023      	b.n	8006a34 <HAL_RCC_OscConfig+0x434>
 80069ec:	4b42      	ldr	r3, [pc, #264]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	061b      	lsls	r3, r3, #24
 80069fa:	493f      	ldr	r1, [pc, #252]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60cb      	str	r3, [r1, #12]
 8006a00:	e018      	b.n	8006a34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006a02:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a3c      	ldr	r2, [pc, #240]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0e:	f7fe fb97 	bl	8005140 <HAL_GetTick>
 8006a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006a16:	f7fe fb93 	bl	8005140 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e212      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a28:	4b33      	ldr	r3, [pc, #204]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f0      	bne.n	8006a16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d036      	beq.n	8006aae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d019      	beq.n	8006a7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a48:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4c:	4a2a      	ldr	r2, [pc, #168]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a54:	f7fe fb74 	bl	8005140 <HAL_GetTick>
 8006a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a5c:	f7fe fb70 	bl	8005140 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e1ef      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a6e:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f0      	beq.n	8006a5c <HAL_RCC_OscConfig+0x45c>
 8006a7a:	e018      	b.n	8006aae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a80:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006a82:	f023 0301 	bic.w	r3, r3, #1
 8006a86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a88:	f7fe fb5a 	bl	8005140 <HAL_GetTick>
 8006a8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a90:	f7fe fb56 	bl	8005140 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e1d5      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f0      	bne.n	8006a90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d039      	beq.n	8006b2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01c      	beq.n	8006afc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006acc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ace:	f7fe fb37 	bl	8005140 <HAL_GetTick>
 8006ad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ad6:	f7fe fb33 	bl	8005140 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e1b2      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ae8:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <HAL_RCC_OscConfig+0x4f8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f0      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x4d6>
 8006af4:	e01b      	b.n	8006b2e <HAL_RCC_OscConfig+0x52e>
 8006af6:	bf00      	nop
 8006af8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006afc:	4b9b      	ldr	r3, [pc, #620]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a9a      	ldr	r2, [pc, #616]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b08:	f7fe fb1a 	bl	8005140 <HAL_GetTick>
 8006b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006b10:	f7fe fb16 	bl	8005140 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e195      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b22:	4b92      	ldr	r3, [pc, #584]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1f0      	bne.n	8006b10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 8081 	beq.w	8006c3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b3c:	4b8c      	ldr	r3, [pc, #560]	; (8006d70 <HAL_RCC_OscConfig+0x770>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a8b      	ldr	r2, [pc, #556]	; (8006d70 <HAL_RCC_OscConfig+0x770>)
 8006b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b48:	f7fe fafa 	bl	8005140 <HAL_GetTick>
 8006b4c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b50:	f7fe faf6 	bl	8005140 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b64      	cmp	r3, #100	; 0x64
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e175      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b62:	4b83      	ldr	r3, [pc, #524]	; (8006d70 <HAL_RCC_OscConfig+0x770>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d106      	bne.n	8006b84 <HAL_RCC_OscConfig+0x584>
 8006b76:	4b7d      	ldr	r3, [pc, #500]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	4a7c      	ldr	r2, [pc, #496]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	6713      	str	r3, [r2, #112]	; 0x70
 8006b82:	e02d      	b.n	8006be0 <HAL_RCC_OscConfig+0x5e0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10c      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x5a6>
 8006b8c:	4b77      	ldr	r3, [pc, #476]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b90:	4a76      	ldr	r2, [pc, #472]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006b92:	f023 0301 	bic.w	r3, r3, #1
 8006b96:	6713      	str	r3, [r2, #112]	; 0x70
 8006b98:	4b74      	ldr	r3, [pc, #464]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	4a73      	ldr	r2, [pc, #460]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006b9e:	f023 0304 	bic.w	r3, r3, #4
 8006ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba4:	e01c      	b.n	8006be0 <HAL_RCC_OscConfig+0x5e0>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2b05      	cmp	r3, #5
 8006bac:	d10c      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x5c8>
 8006bae:	4b6f      	ldr	r3, [pc, #444]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	4a6e      	ldr	r2, [pc, #440]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006bb4:	f043 0304 	orr.w	r3, r3, #4
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bba:	4b6c      	ldr	r3, [pc, #432]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	4a6b      	ldr	r2, [pc, #428]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc6:	e00b      	b.n	8006be0 <HAL_RCC_OscConfig+0x5e0>
 8006bc8:	4b68      	ldr	r3, [pc, #416]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bcc:	4a67      	ldr	r2, [pc, #412]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd4:	4b65      	ldr	r3, [pc, #404]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd8:	4a64      	ldr	r2, [pc, #400]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006bda:	f023 0304 	bic.w	r3, r3, #4
 8006bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d015      	beq.n	8006c14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fe faaa 	bl	8005140 <HAL_GetTick>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bee:	e00a      	b.n	8006c06 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf0:	f7fe faa6 	bl	8005140 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e123      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c06:	4b59      	ldr	r3, [pc, #356]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0ee      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x5f0>
 8006c12:	e014      	b.n	8006c3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c14:	f7fe fa94 	bl	8005140 <HAL_GetTick>
 8006c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c1a:	e00a      	b.n	8006c32 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c1c:	f7fe fa90 	bl	8005140 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e10d      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c32:	4b4e      	ldr	r3, [pc, #312]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1ee      	bne.n	8006c1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8102 	beq.w	8006e4c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c48:	4b48      	ldr	r3, [pc, #288]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c50:	2b18      	cmp	r3, #24
 8006c52:	f000 80bd 	beq.w	8006dd0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	f040 809e 	bne.w	8006d9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c60:	4b42      	ldr	r3, [pc, #264]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a41      	ldr	r2, [pc, #260]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fe fa68 	bl	8005140 <HAL_GetTick>
 8006c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c74:	f7fe fa64 	bl	8005140 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e0e3      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c86:	4b39      	ldr	r3, [pc, #228]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c92:	4b36      	ldr	r3, [pc, #216]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c96:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <HAL_RCC_OscConfig+0x774>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ca2:	0112      	lsls	r2, r2, #4
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	4931      	ldr	r1, [pc, #196]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	628b      	str	r3, [r1, #40]	; 0x28
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	025b      	lsls	r3, r3, #9
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	041b      	lsls	r3, r3, #16
 8006cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	061b      	lsls	r3, r3, #24
 8006cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006cdc:	4923      	ldr	r1, [pc, #140]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006ce2:	4b22      	ldr	r3, [pc, #136]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	4a21      	ldr	r2, [pc, #132]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006cee:	4b1f      	ldr	r3, [pc, #124]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf2:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <HAL_RCC_OscConfig+0x778>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006cfa:	00d2      	lsls	r2, r2, #3
 8006cfc:	491b      	ldr	r1, [pc, #108]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006d02:	4b1a      	ldr	r3, [pc, #104]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	f023 020c 	bic.w	r2, r3, #12
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	4917      	ldr	r1, [pc, #92]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006d14:	4b15      	ldr	r3, [pc, #84]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	f023 0202 	bic.w	r2, r3, #2
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d20:	4912      	ldr	r1, [pc, #72]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d26:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	4a10      	ldr	r2, [pc, #64]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d32:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	4a0d      	ldr	r2, [pc, #52]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d3e:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006d4a:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	4a07      	ldr	r2, [pc, #28]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a04      	ldr	r2, [pc, #16]	; (8006d6c <HAL_RCC_OscConfig+0x76c>)
 8006d5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d62:	f7fe f9ed 	bl	8005140 <HAL_GetTick>
 8006d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d68:	e011      	b.n	8006d8e <HAL_RCC_OscConfig+0x78e>
 8006d6a:	bf00      	nop
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	58024800 	.word	0x58024800
 8006d74:	fffffc0c 	.word	0xfffffc0c
 8006d78:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7fe f9e0 	bl	8005140 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e05f      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d8e:	4b32      	ldr	r3, [pc, #200]	; (8006e58 <HAL_RCC_OscConfig+0x858>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f0      	beq.n	8006d7c <HAL_RCC_OscConfig+0x77c>
 8006d9a:	e057      	b.n	8006e4c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d9c:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <HAL_RCC_OscConfig+0x858>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a2d      	ldr	r2, [pc, #180]	; (8006e58 <HAL_RCC_OscConfig+0x858>)
 8006da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7fe f9ca 	bl	8005140 <HAL_GetTick>
 8006dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fe f9c6 	bl	8005140 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e045      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dc2:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <HAL_RCC_OscConfig+0x858>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x7b0>
 8006dce:	e03d      	b.n	8006e4c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006dd0:	4b21      	ldr	r3, [pc, #132]	; (8006e58 <HAL_RCC_OscConfig+0x858>)
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <HAL_RCC_OscConfig+0x858>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d031      	beq.n	8006e48 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f003 0203 	and.w	r2, r3, #3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d12a      	bne.n	8006e48 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	091b      	lsrs	r3, r3, #4
 8006df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d122      	bne.n	8006e48 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d11a      	bne.n	8006e48 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	0a5b      	lsrs	r3, r3, #9
 8006e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d111      	bne.n	8006e48 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	0c1b      	lsrs	r3, r3, #16
 8006e28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d108      	bne.n	8006e48 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	0e1b      	lsrs	r3, r3, #24
 8006e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e42:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3730      	adds	r7, #48	; 0x30
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400

08006e5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e19c      	b.n	80071aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e70:	4b8a      	ldr	r3, [pc, #552]	; (800709c <HAL_RCC_ClockConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d910      	bls.n	8006ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7e:	4b87      	ldr	r3, [pc, #540]	; (800709c <HAL_RCC_ClockConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f023 020f 	bic.w	r2, r3, #15
 8006e86:	4985      	ldr	r1, [pc, #532]	; (800709c <HAL_RCC_ClockConfig+0x240>)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8e:	4b83      	ldr	r3, [pc, #524]	; (800709c <HAL_RCC_ClockConfig+0x240>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e184      	b.n	80071aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d010      	beq.n	8006ece <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	4b7b      	ldr	r3, [pc, #492]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d908      	bls.n	8006ece <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ebc:	4b78      	ldr	r3, [pc, #480]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	4975      	ldr	r1, [pc, #468]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d010      	beq.n	8006efc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695a      	ldr	r2, [r3, #20]
 8006ede:	4b70      	ldr	r3, [pc, #448]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d908      	bls.n	8006efc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eea:	4b6d      	ldr	r3, [pc, #436]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	496a      	ldr	r1, [pc, #424]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	4b64      	ldr	r3, [pc, #400]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d908      	bls.n	8006f2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f18:	4b61      	ldr	r3, [pc, #388]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	495e      	ldr	r1, [pc, #376]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d010      	beq.n	8006f58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69da      	ldr	r2, [r3, #28]
 8006f3a:	4b59      	ldr	r3, [pc, #356]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d908      	bls.n	8006f58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f46:	4b56      	ldr	r3, [pc, #344]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	4953      	ldr	r1, [pc, #332]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d010      	beq.n	8006f86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	4b4d      	ldr	r3, [pc, #308]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d908      	bls.n	8006f86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f74:	4b4a      	ldr	r3, [pc, #296]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	f023 020f 	bic.w	r2, r3, #15
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	4947      	ldr	r1, [pc, #284]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d055      	beq.n	800703e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f92:	4b43      	ldr	r3, [pc, #268]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	4940      	ldr	r1, [pc, #256]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d107      	bne.n	8006fbc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fac:	4b3c      	ldr	r3, [pc, #240]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d121      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0f6      	b.n	80071aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d107      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fc4:	4b36      	ldr	r3, [pc, #216]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d115      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0ea      	b.n	80071aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d107      	bne.n	8006fec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fdc:	4b30      	ldr	r3, [pc, #192]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0de      	b.n	80071aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fec:	4b2c      	ldr	r3, [pc, #176]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0d6      	b.n	80071aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ffc:	4b28      	ldr	r3, [pc, #160]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f023 0207 	bic.w	r2, r3, #7
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4925      	ldr	r1, [pc, #148]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 800700a:	4313      	orrs	r3, r2
 800700c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700e:	f7fe f897 	bl	8005140 <HAL_GetTick>
 8007012:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007014:	e00a      	b.n	800702c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007016:	f7fe f893 	bl	8005140 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	f241 3288 	movw	r2, #5000	; 0x1388
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e0be      	b.n	80071aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702c:	4b1c      	ldr	r3, [pc, #112]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	429a      	cmp	r2, r3
 800703c:	d1eb      	bne.n	8007016 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d010      	beq.n	800706c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	429a      	cmp	r2, r3
 8007058:	d208      	bcs.n	800706c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800705a:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f023 020f 	bic.w	r2, r3, #15
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	490e      	ldr	r1, [pc, #56]	; (80070a0 <HAL_RCC_ClockConfig+0x244>)
 8007068:	4313      	orrs	r3, r2
 800706a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <HAL_RCC_ClockConfig+0x240>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d214      	bcs.n	80070a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b08      	ldr	r3, [pc, #32]	; (800709c <HAL_RCC_ClockConfig+0x240>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f023 020f 	bic.w	r2, r3, #15
 8007082:	4906      	ldr	r1, [pc, #24]	; (800709c <HAL_RCC_ClockConfig+0x240>)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	4b04      	ldr	r3, [pc, #16]	; (800709c <HAL_RCC_ClockConfig+0x240>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d005      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e086      	b.n	80071aa <HAL_RCC_ClockConfig+0x34e>
 800709c:	52002000 	.word	0x52002000
 80070a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d010      	beq.n	80070d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	4b3f      	ldr	r3, [pc, #252]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070bc:	429a      	cmp	r2, r3
 80070be:	d208      	bcs.n	80070d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070c0:	4b3c      	ldr	r3, [pc, #240]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	4939      	ldr	r1, [pc, #228]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d010      	beq.n	8007100 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695a      	ldr	r2, [r3, #20]
 80070e2:	4b34      	ldr	r3, [pc, #208]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d208      	bcs.n	8007100 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070ee:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	492e      	ldr	r1, [pc, #184]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	d010      	beq.n	800712e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	4b28      	ldr	r3, [pc, #160]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007118:	429a      	cmp	r2, r3
 800711a:	d208      	bcs.n	800712e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800711c:	4b25      	ldr	r3, [pc, #148]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	4922      	ldr	r1, [pc, #136]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 800712a:	4313      	orrs	r3, r2
 800712c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d010      	beq.n	800715c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69da      	ldr	r2, [r3, #28]
 800713e:	4b1d      	ldr	r3, [pc, #116]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007146:	429a      	cmp	r2, r3
 8007148:	d208      	bcs.n	800715c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800714a:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	4917      	ldr	r1, [pc, #92]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 8007158:	4313      	orrs	r3, r2
 800715a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800715c:	f000 f834 	bl	80071c8 <HAL_RCC_GetSysClockFreq>
 8007160:	4602      	mov	r2, r0
 8007162:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	0a1b      	lsrs	r3, r3, #8
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	4912      	ldr	r1, [pc, #72]	; (80071b8 <HAL_RCC_ClockConfig+0x35c>)
 800716e:	5ccb      	ldrb	r3, [r1, r3]
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	fa22 f303 	lsr.w	r3, r2, r3
 8007178:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800717a:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <HAL_RCC_ClockConfig+0x358>)
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	4a0d      	ldr	r2, [pc, #52]	; (80071b8 <HAL_RCC_ClockConfig+0x35c>)
 8007184:	5cd3      	ldrb	r3, [r2, r3]
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
 8007190:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <HAL_RCC_ClockConfig+0x360>)
 8007192:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007194:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <HAL_RCC_ClockConfig+0x364>)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800719a:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <HAL_RCC_ClockConfig+0x368>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fd fe20 	bl	8004de4 <HAL_InitTick>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	58024400 	.word	0x58024400
 80071b8:	0800940c 	.word	0x0800940c
 80071bc:	24000014 	.word	0x24000014
 80071c0:	24000010 	.word	0x24000010
 80071c4:	24000018 	.word	0x24000018

080071c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b089      	sub	sp, #36	; 0x24
 80071cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071ce:	4bb3      	ldr	r3, [pc, #716]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071d6:	2b18      	cmp	r3, #24
 80071d8:	f200 8155 	bhi.w	8007486 <HAL_RCC_GetSysClockFreq+0x2be>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	08007249 	.word	0x08007249
 80071e8:	08007487 	.word	0x08007487
 80071ec:	08007487 	.word	0x08007487
 80071f0:	08007487 	.word	0x08007487
 80071f4:	08007487 	.word	0x08007487
 80071f8:	08007487 	.word	0x08007487
 80071fc:	08007487 	.word	0x08007487
 8007200:	08007487 	.word	0x08007487
 8007204:	0800726f 	.word	0x0800726f
 8007208:	08007487 	.word	0x08007487
 800720c:	08007487 	.word	0x08007487
 8007210:	08007487 	.word	0x08007487
 8007214:	08007487 	.word	0x08007487
 8007218:	08007487 	.word	0x08007487
 800721c:	08007487 	.word	0x08007487
 8007220:	08007487 	.word	0x08007487
 8007224:	08007275 	.word	0x08007275
 8007228:	08007487 	.word	0x08007487
 800722c:	08007487 	.word	0x08007487
 8007230:	08007487 	.word	0x08007487
 8007234:	08007487 	.word	0x08007487
 8007238:	08007487 	.word	0x08007487
 800723c:	08007487 	.word	0x08007487
 8007240:	08007487 	.word	0x08007487
 8007244:	0800727b 	.word	0x0800727b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007248:	4b94      	ldr	r3, [pc, #592]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d009      	beq.n	8007268 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007254:	4b91      	ldr	r3, [pc, #580]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	08db      	lsrs	r3, r3, #3
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	4a90      	ldr	r2, [pc, #576]	; (80074a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
 8007264:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007266:	e111      	b.n	800748c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007268:	4b8d      	ldr	r3, [pc, #564]	; (80074a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800726a:	61bb      	str	r3, [r7, #24]
    break;
 800726c:	e10e      	b.n	800748c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800726e:	4b8d      	ldr	r3, [pc, #564]	; (80074a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007270:	61bb      	str	r3, [r7, #24]
    break;
 8007272:	e10b      	b.n	800748c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007274:	4b8c      	ldr	r3, [pc, #560]	; (80074a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007276:	61bb      	str	r3, [r7, #24]
    break;
 8007278:	e108      	b.n	800748c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800727a:	4b88      	ldr	r3, [pc, #544]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007284:	4b85      	ldr	r3, [pc, #532]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800728e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007290:	4b82      	ldr	r3, [pc, #520]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800729a:	4b80      	ldr	r3, [pc, #512]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800729c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729e:	08db      	lsrs	r3, r3, #3
 80072a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 80e1 	beq.w	8007480 <HAL_RCC_GetSysClockFreq+0x2b8>
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	f000 8083 	beq.w	80073cc <HAL_RCC_GetSysClockFreq+0x204>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	f200 80a1 	bhi.w	8007410 <HAL_RCC_GetSysClockFreq+0x248>
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_RCC_GetSysClockFreq+0x114>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d056      	beq.n	8007388 <HAL_RCC_GetSysClockFreq+0x1c0>
 80072da:	e099      	b.n	8007410 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072dc:	4b6f      	ldr	r3, [pc, #444]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02d      	beq.n	8007344 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072e8:	4b6c      	ldr	r3, [pc, #432]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	08db      	lsrs	r3, r3, #3
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	4a6b      	ldr	r2, [pc, #428]	; (80074a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
 80072f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007312:	4b62      	ldr	r3, [pc, #392]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007322:	ed97 6a02 	vldr	s12, [r7, #8]
 8007326:	eddf 5a61 	vldr	s11, [pc, #388]	; 80074ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800732a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007342:	e087      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80074b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007356:	4b51      	ldr	r3, [pc, #324]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007366:	ed97 6a02 	vldr	s12, [r7, #8]
 800736a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80074ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800736e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800737a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007386:	e065      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007392:	eddf 6a48 	vldr	s13, [pc, #288]	; 80074b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739a:	4b40      	ldr	r3, [pc, #256]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80074ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80073b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ca:	e043      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80074b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80073da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073de:	4b2f      	ldr	r3, [pc, #188]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80073f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80074ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80073f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800740e:	e021      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80074b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a02 	vldr	s12, [r7, #8]
 8007436:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80074ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007452:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	0a5b      	lsrs	r3, r3, #9
 800745a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800745e:	3301      	adds	r3, #1
 8007460:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800746c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007478:	ee17 3a90 	vmov	r3, s15
 800747c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800747e:	e005      	b.n	800748c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	61bb      	str	r3, [r7, #24]
    break;
 8007484:	e002      	b.n	800748c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007486:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007488:	61bb      	str	r3, [r7, #24]
    break;
 800748a:	bf00      	nop
  }

  return sysclockfreq;
 800748c:	69bb      	ldr	r3, [r7, #24]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3724      	adds	r7, #36	; 0x24
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	58024400 	.word	0x58024400
 80074a0:	03d09000 	.word	0x03d09000
 80074a4:	003d0900 	.word	0x003d0900
 80074a8:	007a1200 	.word	0x007a1200
 80074ac:	46000000 	.word	0x46000000
 80074b0:	4c742400 	.word	0x4c742400
 80074b4:	4a742400 	.word	0x4a742400
 80074b8:	4af42400 	.word	0x4af42400

080074bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074c2:	f7ff fe81 	bl	80071c8 <HAL_RCC_GetSysClockFreq>
 80074c6:	4602      	mov	r2, r0
 80074c8:	4b10      	ldr	r3, [pc, #64]	; (800750c <HAL_RCC_GetHCLKFreq+0x50>)
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	0a1b      	lsrs	r3, r3, #8
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	490f      	ldr	r1, [pc, #60]	; (8007510 <HAL_RCC_GetHCLKFreq+0x54>)
 80074d4:	5ccb      	ldrb	r3, [r1, r3]
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074e0:	4b0a      	ldr	r3, [pc, #40]	; (800750c <HAL_RCC_GetHCLKFreq+0x50>)
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	4a09      	ldr	r2, [pc, #36]	; (8007510 <HAL_RCC_GetHCLKFreq+0x54>)
 80074ea:	5cd3      	ldrb	r3, [r2, r3]
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	fa22 f303 	lsr.w	r3, r2, r3
 80074f6:	4a07      	ldr	r2, [pc, #28]	; (8007514 <HAL_RCC_GetHCLKFreq+0x58>)
 80074f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074fa:	4a07      	ldr	r2, [pc, #28]	; (8007518 <HAL_RCC_GetHCLKFreq+0x5c>)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007500:	4b04      	ldr	r3, [pc, #16]	; (8007514 <HAL_RCC_GetHCLKFreq+0x58>)
 8007502:	681b      	ldr	r3, [r3, #0]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	58024400 	.word	0x58024400
 8007510:	0800940c 	.word	0x0800940c
 8007514:	24000014 	.word	0x24000014
 8007518:	24000010 	.word	0x24000010

0800751c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007520:	f7ff ffcc 	bl	80074bc <HAL_RCC_GetHCLKFreq>
 8007524:	4602      	mov	r2, r0
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	091b      	lsrs	r3, r3, #4
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	4904      	ldr	r1, [pc, #16]	; (8007544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007532:	5ccb      	ldrb	r3, [r1, r3]
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800753c:	4618      	mov	r0, r3
 800753e:	bd80      	pop	{r7, pc}
 8007540:	58024400 	.word	0x58024400
 8007544:	0800940c 	.word	0x0800940c

08007548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	223f      	movs	r2, #63	; 0x3f
 8007556:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007558:	4b1a      	ldr	r3, [pc, #104]	; (80075c4 <HAL_RCC_GetClockConfig+0x7c>)
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f003 0207 	and.w	r2, r3, #7
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007564:	4b17      	ldr	r3, [pc, #92]	; (80075c4 <HAL_RCC_GetClockConfig+0x7c>)
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007570:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <HAL_RCC_GetClockConfig+0x7c>)
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f003 020f 	and.w	r2, r3, #15
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <HAL_RCC_GetClockConfig+0x7c>)
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007588:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <HAL_RCC_GetClockConfig+0x7c>)
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007594:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <HAL_RCC_GetClockConfig+0x7c>)
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80075a0:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <HAL_RCC_GetClockConfig+0x7c>)
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <HAL_RCC_GetClockConfig+0x80>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 020f 	and.w	r2, r3, #15
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	601a      	str	r2, [r3, #0]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	58024400 	.word	0x58024400
 80075c8:	52002000 	.word	0x52002000

080075cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075d4:	2300      	movs	r3, #0
 80075d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075d8:	2300      	movs	r3, #0
 80075da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d03f      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075f0:	d02a      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80075f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075f6:	d824      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80075f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075fc:	d018      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007602:	d81e      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800760c:	d007      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800760e:	e018      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007610:	4ba3      	ldr	r3, [pc, #652]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	4aa2      	ldr	r2, [pc, #648]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800761a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800761c:	e015      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3304      	adds	r3, #4
 8007622:	2102      	movs	r1, #2
 8007624:	4618      	mov	r0, r3
 8007626:	f000 ff17 	bl	8008458 <RCCEx_PLL2_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800762e:	e00c      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	2102      	movs	r1, #2
 8007636:	4618      	mov	r0, r3
 8007638:	f000 ffc0 	bl	80085bc <RCCEx_PLL3_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007640:	e003      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	75fb      	strb	r3, [r7, #23]
      break;
 8007646:	e000      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d109      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007650:	4b93      	ldr	r3, [pc, #588]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800765c:	4990      	ldr	r1, [pc, #576]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800765e:	4313      	orrs	r3, r2
 8007660:	650b      	str	r3, [r1, #80]	; 0x50
 8007662:	e001      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007670:	2b00      	cmp	r3, #0
 8007672:	d03d      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007678:	2b04      	cmp	r3, #4
 800767a:	d826      	bhi.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800767c:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007682:	bf00      	nop
 8007684:	08007699 	.word	0x08007699
 8007688:	080076a7 	.word	0x080076a7
 800768c:	080076b9 	.word	0x080076b9
 8007690:	080076d1 	.word	0x080076d1
 8007694:	080076d1 	.word	0x080076d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007698:	4b81      	ldr	r3, [pc, #516]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	4a80      	ldr	r2, [pc, #512]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800769e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076a4:	e015      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3304      	adds	r3, #4
 80076aa:	2100      	movs	r1, #0
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fed3 	bl	8008458 <RCCEx_PLL2_Config>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076b6:	e00c      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3324      	adds	r3, #36	; 0x24
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 ff7c 	bl	80085bc <RCCEx_PLL3_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076c8:	e003      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	75fb      	strb	r3, [r7, #23]
      break;
 80076ce:	e000      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80076d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d109      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076d8:	4b71      	ldr	r3, [pc, #452]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076dc:	f023 0207 	bic.w	r2, r3, #7
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e4:	496e      	ldr	r1, [pc, #440]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	650b      	str	r3, [r1, #80]	; 0x50
 80076ea:	e001      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d042      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007704:	d02b      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770a:	d825      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800770c:	2bc0      	cmp	r3, #192	; 0xc0
 800770e:	d028      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007710:	2bc0      	cmp	r3, #192	; 0xc0
 8007712:	d821      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007714:	2b80      	cmp	r3, #128	; 0x80
 8007716:	d016      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007718:	2b80      	cmp	r3, #128	; 0x80
 800771a:	d81d      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007720:	2b40      	cmp	r3, #64	; 0x40
 8007722:	d007      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007724:	e018      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007726:	4b5e      	ldr	r3, [pc, #376]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	4a5d      	ldr	r2, [pc, #372]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800772c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007730:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007732:	e017      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	2100      	movs	r1, #0
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fe8c 	bl	8008458 <RCCEx_PLL2_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007744:	e00e      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3324      	adds	r3, #36	; 0x24
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f000 ff35 	bl	80085bc <RCCEx_PLL3_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007756:	e005      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	75fb      	strb	r3, [r7, #23]
      break;
 800775c:	e002      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800775e:	bf00      	nop
 8007760:	e000      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800776a:	4b4d      	ldr	r3, [pc, #308]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800776c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007776:	494a      	ldr	r1, [pc, #296]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007778:	4313      	orrs	r3, r2
 800777a:	650b      	str	r3, [r1, #80]	; 0x50
 800777c:	e001      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778a:	2b00      	cmp	r3, #0
 800778c:	d049      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007794:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007798:	d030      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800779a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800779e:	d82a      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80077a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077a4:	d02c      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80077a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077aa:	d824      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80077ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077b0:	d018      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80077b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077b6:	d81e      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80077bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077c0:	d007      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80077c2:	e018      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c4:	4b36      	ldr	r3, [pc, #216]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	4a35      	ldr	r2, [pc, #212]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077d0:	e017      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fe3d 	bl	8008458 <RCCEx_PLL2_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80077e2:	e00e      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3324      	adds	r3, #36	; 0x24
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fee6 	bl	80085bc <RCCEx_PLL3_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077f4:	e005      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	75fb      	strb	r3, [r7, #23]
      break;
 80077fa:	e002      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80077fc:	bf00      	nop
 80077fe:	e000      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007808:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800780a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007816:	4922      	ldr	r1, [pc, #136]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007818:	4313      	orrs	r3, r2
 800781a:	658b      	str	r3, [r1, #88]	; 0x58
 800781c:	e001      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800782a:	2b00      	cmp	r3, #0
 800782c:	d04b      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007838:	d030      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800783a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800783e:	d82a      	bhi.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007840:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007844:	d02e      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800784a:	d824      	bhi.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800784c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007850:	d018      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007856:	d81e      	bhi.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800785c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007860:	d007      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007862:	e018      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	4a0d      	ldr	r2, [pc, #52]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800786a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007870:	e019      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3304      	adds	r3, #4
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f000 fded 	bl	8008458 <RCCEx_PLL2_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007882:	e010      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3324      	adds	r3, #36	; 0x24
 8007888:	2100      	movs	r1, #0
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fe96 	bl	80085bc <RCCEx_PLL3_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007894:	e007      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	75fb      	strb	r3, [r7, #23]
      break;
 800789a:	e004      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800789c:	bf00      	nop
 800789e:	e002      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80078a0:	58024400 	.word	0x58024400
      break;
 80078a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80078ac:	4b99      	ldr	r3, [pc, #612]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078ba:	4996      	ldr	r1, [pc, #600]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	658b      	str	r3, [r1, #88]	; 0x58
 80078c0:	e001      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d032      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d6:	2b30      	cmp	r3, #48	; 0x30
 80078d8:	d01c      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80078da:	2b30      	cmp	r3, #48	; 0x30
 80078dc:	d817      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80078de:	2b20      	cmp	r3, #32
 80078e0:	d00c      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	d813      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	d10f      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ee:	4b89      	ldr	r3, [pc, #548]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	4a88      	ldr	r2, [pc, #544]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80078fa:	e00e      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	2102      	movs	r1, #2
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fda8 	bl	8008458 <RCCEx_PLL2_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800790c:	e005      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
      break;
 8007912:	e002      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007914:	bf00      	nop
 8007916:	e000      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007920:	4b7c      	ldr	r3, [pc, #496]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007924:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792c:	4979      	ldr	r1, [pc, #484]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800792e:	4313      	orrs	r3, r2
 8007930:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007932:	e001      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d047      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800794c:	d030      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800794e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007952:	d82a      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007954:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007958:	d02c      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800795a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800795e:	d824      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007964:	d018      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800796a:	d81e      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007974:	d007      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007976:	e018      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007978:	4b66      	ldr	r3, [pc, #408]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	4a65      	ldr	r2, [pc, #404]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800797e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007984:	e017      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3304      	adds	r3, #4
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fd63 	bl	8008458 <RCCEx_PLL2_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007996:	e00e      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3324      	adds	r3, #36	; 0x24
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fe0c 	bl	80085bc <RCCEx_PLL3_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80079a8:	e005      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	75fb      	strb	r3, [r7, #23]
      break;
 80079ae:	e002      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80079b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079bc:	4b55      	ldr	r3, [pc, #340]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c8:	4952      	ldr	r1, [pc, #328]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	650b      	str	r3, [r1, #80]	; 0x50
 80079ce:	e001      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d049      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079e8:	d02e      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80079ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079ee:	d828      	bhi.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80079f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079f4:	d02a      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80079f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079fa:	d822      	bhi.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80079fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a00:	d026      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007a02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a06:	d81c      	bhi.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a0c:	d010      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007a0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a12:	d816      	bhi.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01d      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1c:	d111      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3304      	adds	r3, #4
 8007a22:	2101      	movs	r1, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fd17 	bl	8008458 <RCCEx_PLL2_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007a2e:	e012      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3324      	adds	r3, #36	; 0x24
 8007a34:	2101      	movs	r1, #1
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fdc0 	bl	80085bc <RCCEx_PLL3_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007a40:	e009      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]
      break;
 8007a46:	e006      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007a48:	bf00      	nop
 8007a4a:	e004      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e002      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007a50:	bf00      	nop
 8007a52:	e000      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a5c:	4b2d      	ldr	r3, [pc, #180]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a60:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a68:	492a      	ldr	r1, [pc, #168]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8007a6e:	e001      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d04d      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a8a:	d02e      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a90:	d828      	bhi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a96:	d02a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9c:	d822      	bhi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007a9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aa2:	d026      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007aa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aa8:	d81c      	bhi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aae:	d010      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab4:	d816      	bhi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d01d      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007abe:	d111      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fcc6 	bl	8008458 <RCCEx_PLL2_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ad0:	e012      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3324      	adds	r3, #36	; 0x24
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 fd6f 	bl	80085bc <RCCEx_PLL3_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ae2:	e009      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae8:	e006      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007aea:	bf00      	nop
 8007aec:	e004      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007aee:	bf00      	nop
 8007af0:	e002      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007af2:	bf00      	nop
 8007af4:	e000      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10c      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007afe:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b0c:	4901      	ldr	r1, [pc, #4]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	658b      	str	r3, [r1, #88]	; 0x58
 8007b12:	e003      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007b14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d02f      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b30:	d00e      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b36:	d814      	bhi.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d015      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b40:	d10f      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b42:	4baf      	ldr	r3, [pc, #700]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	4aae      	ldr	r2, [pc, #696]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007b4e:	e00c      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	2101      	movs	r1, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fc7e 	bl	8008458 <RCCEx_PLL2_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007b60:	e003      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	75fb      	strb	r3, [r7, #23]
      break;
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b70:	4ba3      	ldr	r3, [pc, #652]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b7c:	49a0      	ldr	r1, [pc, #640]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	650b      	str	r3, [r1, #80]	; 0x50
 8007b82:	e001      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d032      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d81b      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007b9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007bdb 	.word	0x08007bdb
 8007ba8:	08007bb5 	.word	0x08007bb5
 8007bac:	08007bc3 	.word	0x08007bc3
 8007bb0:	08007bdb 	.word	0x08007bdb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb4:	4b92      	ldr	r3, [pc, #584]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a91      	ldr	r2, [pc, #580]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007bc0:	e00c      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fc45 	bl	8008458 <RCCEx_PLL2_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007bd2:	e003      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd8:	e000      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007be2:	4b87      	ldr	r3, [pc, #540]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be6:	f023 0203 	bic.w	r2, r3, #3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	4984      	ldr	r1, [pc, #528]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bf4:	e001      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 8086 	beq.w	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c08:	4b7e      	ldr	r3, [pc, #504]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a7d      	ldr	r2, [pc, #500]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c14:	f7fd fa94 	bl	8005140 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c1a:	e009      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c1c:	f7fd fa90 	bl	8005140 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b64      	cmp	r3, #100	; 0x64
 8007c28:	d902      	bls.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	75fb      	strb	r3, [r7, #23]
        break;
 8007c2e:	e005      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c30:	4b74      	ldr	r3, [pc, #464]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0ef      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d166      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c42:	4b6f      	ldr	r3, [pc, #444]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c4c:	4053      	eors	r3, r2
 8007c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d013      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c56:	4b6a      	ldr	r3, [pc, #424]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c60:	4b67      	ldr	r3, [pc, #412]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c64:	4a66      	ldr	r2, [pc, #408]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c6a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c6c:	4b64      	ldr	r3, [pc, #400]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c70:	4a63      	ldr	r2, [pc, #396]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c76:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c78:	4a61      	ldr	r2, [pc, #388]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c88:	d115      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8a:	f7fd fa59 	bl	8005140 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c90:	e00b      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c92:	f7fd fa55 	bl	8005140 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d902      	bls.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	75fb      	strb	r3, [r7, #23]
            break;
 8007ca8:	e005      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007caa:	4b55      	ldr	r3, [pc, #340]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0ed      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d126      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cca:	d10d      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007ccc:	4b4c      	ldr	r3, [pc, #304]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cda:	0919      	lsrs	r1, r3, #4
 8007cdc:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007cde:	400b      	ands	r3, r1
 8007ce0:	4947      	ldr	r1, [pc, #284]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	610b      	str	r3, [r1, #16]
 8007ce6:	e005      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007ce8:	4b45      	ldr	r3, [pc, #276]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	4a44      	ldr	r2, [pc, #272]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007cf2:	6113      	str	r3, [r2, #16]
 8007cf4:	4b42      	ldr	r3, [pc, #264]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d02:	493f      	ldr	r1, [pc, #252]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	670b      	str	r3, [r1, #112]	; 0x70
 8007d08:	e004      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	75bb      	strb	r3, [r7, #22]
 8007d0e:	e001      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8085 	beq.w	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d26:	2b28      	cmp	r3, #40	; 0x28
 8007d28:	d866      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007e0d 	.word	0x08007e0d
 8007d34:	08007df9 	.word	0x08007df9
 8007d38:	08007df9 	.word	0x08007df9
 8007d3c:	08007df9 	.word	0x08007df9
 8007d40:	08007df9 	.word	0x08007df9
 8007d44:	08007df9 	.word	0x08007df9
 8007d48:	08007df9 	.word	0x08007df9
 8007d4c:	08007df9 	.word	0x08007df9
 8007d50:	08007dd5 	.word	0x08007dd5
 8007d54:	08007df9 	.word	0x08007df9
 8007d58:	08007df9 	.word	0x08007df9
 8007d5c:	08007df9 	.word	0x08007df9
 8007d60:	08007df9 	.word	0x08007df9
 8007d64:	08007df9 	.word	0x08007df9
 8007d68:	08007df9 	.word	0x08007df9
 8007d6c:	08007df9 	.word	0x08007df9
 8007d70:	08007de7 	.word	0x08007de7
 8007d74:	08007df9 	.word	0x08007df9
 8007d78:	08007df9 	.word	0x08007df9
 8007d7c:	08007df9 	.word	0x08007df9
 8007d80:	08007df9 	.word	0x08007df9
 8007d84:	08007df9 	.word	0x08007df9
 8007d88:	08007df9 	.word	0x08007df9
 8007d8c:	08007df9 	.word	0x08007df9
 8007d90:	08007e0d 	.word	0x08007e0d
 8007d94:	08007df9 	.word	0x08007df9
 8007d98:	08007df9 	.word	0x08007df9
 8007d9c:	08007df9 	.word	0x08007df9
 8007da0:	08007df9 	.word	0x08007df9
 8007da4:	08007df9 	.word	0x08007df9
 8007da8:	08007df9 	.word	0x08007df9
 8007dac:	08007df9 	.word	0x08007df9
 8007db0:	08007e0d 	.word	0x08007e0d
 8007db4:	08007df9 	.word	0x08007df9
 8007db8:	08007df9 	.word	0x08007df9
 8007dbc:	08007df9 	.word	0x08007df9
 8007dc0:	08007df9 	.word	0x08007df9
 8007dc4:	08007df9 	.word	0x08007df9
 8007dc8:	08007df9 	.word	0x08007df9
 8007dcc:	08007df9 	.word	0x08007df9
 8007dd0:	08007e0d 	.word	0x08007e0d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	2101      	movs	r1, #1
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fb3c 	bl	8008458 <RCCEx_PLL2_Config>
 8007de0:	4603      	mov	r3, r0
 8007de2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007de4:	e013      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3324      	adds	r3, #36	; 0x24
 8007dea:	2101      	movs	r1, #1
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 fbe5 	bl	80085bc <RCCEx_PLL3_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007df6:	e00a      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007dfc:	e007      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007dfe:	bf00      	nop
 8007e00:	58024400 	.word	0x58024400
 8007e04:	58024800 	.word	0x58024800
 8007e08:	00ffffcf 	.word	0x00ffffcf
      break;
 8007e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e14:	4b96      	ldr	r3, [pc, #600]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e18:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e20:	4993      	ldr	r1, [pc, #588]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	654b      	str	r3, [r1, #84]	; 0x54
 8007e26:	e001      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d038      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3c:	2b05      	cmp	r3, #5
 8007e3e:	d821      	bhi.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007e40:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e46:	bf00      	nop
 8007e48:	08007e8b 	.word	0x08007e8b
 8007e4c:	08007e61 	.word	0x08007e61
 8007e50:	08007e73 	.word	0x08007e73
 8007e54:	08007e8b 	.word	0x08007e8b
 8007e58:	08007e8b 	.word	0x08007e8b
 8007e5c:	08007e8b 	.word	0x08007e8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	2101      	movs	r1, #1
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 faf6 	bl	8008458 <RCCEx_PLL2_Config>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007e70:	e00c      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3324      	adds	r3, #36	; 0x24
 8007e76:	2101      	movs	r1, #1
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fb9f 	bl	80085bc <RCCEx_PLL3_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007e82:	e003      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75fb      	strb	r3, [r7, #23]
      break;
 8007e88:	e000      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e92:	4b77      	ldr	r3, [pc, #476]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e96:	f023 0207 	bic.w	r2, r3, #7
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e9e:	4974      	ldr	r1, [pc, #464]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	654b      	str	r3, [r1, #84]	; 0x54
 8007ea4:	e001      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d03a      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebc:	2b05      	cmp	r3, #5
 8007ebe:	d821      	bhi.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007ec0:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	08007f0b 	.word	0x08007f0b
 8007ecc:	08007ee1 	.word	0x08007ee1
 8007ed0:	08007ef3 	.word	0x08007ef3
 8007ed4:	08007f0b 	.word	0x08007f0b
 8007ed8:	08007f0b 	.word	0x08007f0b
 8007edc:	08007f0b 	.word	0x08007f0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fab6 	bl	8008458 <RCCEx_PLL2_Config>
 8007eec:	4603      	mov	r3, r0
 8007eee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ef0:	e00c      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3324      	adds	r3, #36	; 0x24
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fb5f 	bl	80085bc <RCCEx_PLL3_Config>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	75fb      	strb	r3, [r7, #23]
      break;
 8007f08:	e000      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f12:	4b57      	ldr	r3, [pc, #348]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f16:	f023 0207 	bic.w	r2, r3, #7
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f20:	4953      	ldr	r1, [pc, #332]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	658b      	str	r3, [r1, #88]	; 0x58
 8007f26:	e001      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d04b      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f42:	d02e      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f48:	d828      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4e:	d02a      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f54:	d822      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f5a:	d026      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f60:	d81c      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f66:	d010      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6c:	d816      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d01d      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f76:	d111      	bne.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fa6a 	bl	8008458 <RCCEx_PLL2_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007f88:	e012      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	3324      	adds	r3, #36	; 0x24
 8007f8e:	2102      	movs	r1, #2
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fb13 	bl	80085bc <RCCEx_PLL3_Config>
 8007f96:	4603      	mov	r3, r0
 8007f98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007f9a:	e009      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa0:	e006      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007fa2:	bf00      	nop
 8007fa4:	e004      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007fa6:	bf00      	nop
 8007fa8:	e002      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007faa:	bf00      	nop
 8007fac:	e000      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc4:	492a      	ldr	r1, [pc, #168]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	654b      	str	r3, [r1, #84]	; 0x54
 8007fca:	e001      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d04d      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fe2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fe6:	d02e      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007fe8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fec:	d828      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	d02a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff8:	d822      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ffe:	d026      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008004:	d81c      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800a:	d010      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800800c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008010:	d816      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01d      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801a:	d111      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3304      	adds	r3, #4
 8008020:	2100      	movs	r1, #0
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fa18 	bl	8008458 <RCCEx_PLL2_Config>
 8008028:	4603      	mov	r3, r0
 800802a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800802c:	e012      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3324      	adds	r3, #36	; 0x24
 8008032:	2102      	movs	r1, #2
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fac1 	bl	80085bc <RCCEx_PLL3_Config>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800803e:	e009      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
      break;
 8008044:	e006      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008046:	bf00      	nop
 8008048:	e004      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800804a:	bf00      	nop
 800804c:	e002      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800804e:	bf00      	nop
 8008050:	e000      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10c      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800805c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008068:	4901      	ldr	r1, [pc, #4]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800806a:	4313      	orrs	r3, r2
 800806c:	658b      	str	r3, [r1, #88]	; 0x58
 800806e:	e003      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d04b      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800808a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800808e:	d02e      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008090:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008094:	d828      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809a:	d02a      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a0:	d822      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80080a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080a6:	d026      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80080a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080ac:	d81c      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80080ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080b2:	d010      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80080b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080b8:	d816      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d01d      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80080be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c2:	d111      	bne.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3304      	adds	r3, #4
 80080c8:	2100      	movs	r1, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f9c4 	bl	8008458 <RCCEx_PLL2_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80080d4:	e012      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3324      	adds	r3, #36	; 0x24
 80080da:	2102      	movs	r1, #2
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fa6d 	bl	80085bc <RCCEx_PLL3_Config>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80080e6:	e009      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	75fb      	strb	r3, [r7, #23]
      break;
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80080ee:	bf00      	nop
 80080f0:	e004      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80080f2:	bf00      	nop
 80080f4:	e002      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80080fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008102:	4b9d      	ldr	r3, [pc, #628]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008110:	4999      	ldr	r1, [pc, #612]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008112:	4313      	orrs	r3, r2
 8008114:	658b      	str	r3, [r1, #88]	; 0x58
 8008116:	e001      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0308 	and.w	r3, r3, #8
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01a      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008132:	d10a      	bne.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3324      	adds	r3, #36	; 0x24
 8008138:	2102      	movs	r1, #2
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fa3e 	bl	80085bc <RCCEx_PLL3_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800814a:	4b8b      	ldr	r3, [pc, #556]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800814c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008158:	4987      	ldr	r1, [pc, #540]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800815a:	4313      	orrs	r3, r2
 800815c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0310 	and.w	r3, r3, #16
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01a      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008174:	d10a      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3324      	adds	r3, #36	; 0x24
 800817a:	2102      	movs	r1, #2
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fa1d 	bl	80085bc <RCCEx_PLL3_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800818c:	4b7a      	ldr	r3, [pc, #488]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800818e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800819a:	4977      	ldr	r1, [pc, #476]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800819c:	4313      	orrs	r3, r2
 800819e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d034      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b6:	d01d      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80081b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081bc:	d817      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80081c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c6:	d009      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80081c8:	e011      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3304      	adds	r3, #4
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 f941 	bl	8008458 <RCCEx_PLL2_Config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80081da:	e00c      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3324      	adds	r3, #36	; 0x24
 80081e0:	2102      	movs	r1, #2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f9ea 	bl	80085bc <RCCEx_PLL3_Config>
 80081e8:	4603      	mov	r3, r0
 80081ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80081ec:	e003      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]
      break;
 80081f2:	e000      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80081f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081fc:	4b5e      	ldr	r3, [pc, #376]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800820a:	495b      	ldr	r1, [pc, #364]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800820c:	4313      	orrs	r3, r2
 800820e:	658b      	str	r3, [r1, #88]	; 0x58
 8008210:	e001      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d033      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800822c:	d01c      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800822e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008232:	d816      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008238:	d003      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800823a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800823e:	d007      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008240:	e00f      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008242:	4b4d      	ldr	r3, [pc, #308]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008246:	4a4c      	ldr	r2, [pc, #304]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800824c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800824e:	e00c      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3324      	adds	r3, #36	; 0x24
 8008254:	2101      	movs	r1, #1
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f9b0 	bl	80085bc <RCCEx_PLL3_Config>
 800825c:	4603      	mov	r3, r0
 800825e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008260:	e003      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	75fb      	strb	r3, [r7, #23]
      break;
 8008266:	e000      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008270:	4b41      	ldr	r3, [pc, #260]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800827e:	493e      	ldr	r1, [pc, #248]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008280:	4313      	orrs	r3, r2
 8008282:	654b      	str	r3, [r1, #84]	; 0x54
 8008284:	e001      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d029      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800829e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a2:	d007      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80082a4:	e00f      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a6:	4b34      	ldr	r3, [pc, #208]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	4a33      	ldr	r2, [pc, #204]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80082b2:	e00b      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	2102      	movs	r1, #2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f8cc 	bl	8008458 <RCCEx_PLL2_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80082c4:	e002      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d109      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082d2:	4b29      	ldr	r3, [pc, #164]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	4926      	ldr	r1, [pc, #152]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082e4:	e001      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3324      	adds	r3, #36	; 0x24
 80082fa:	2102      	movs	r1, #2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f95d 	bl	80085bc <RCCEx_PLL3_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d033      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008320:	d017      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008326:	d811      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800832c:	d013      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800832e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008332:	d80b      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008334:	2b00      	cmp	r3, #0
 8008336:	d010      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833c:	d106      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800833e:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	4a0d      	ldr	r2, [pc, #52]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800834a:	e007      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
      break;
 8008350:	e004      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008352:	bf00      	nop
 8008354:	e002      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008356:	bf00      	nop
 8008358:	e000      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800835a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10c      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836e:	4902      	ldr	r1, [pc, #8]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008370:	4313      	orrs	r3, r2
 8008372:	654b      	str	r3, [r1, #84]	; 0x54
 8008374:	e004      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008376:	bf00      	nop
 8008378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800838c:	4b31      	ldr	r3, [pc, #196]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800838e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008390:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	492e      	ldr	r1, [pc, #184]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800839a:	4313      	orrs	r3, r2
 800839c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80083aa:	4b2a      	ldr	r3, [pc, #168]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083b8:	4926      	ldr	r1, [pc, #152]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d008      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083ca:	4b22      	ldr	r3, [pc, #136]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083d6:	491f      	ldr	r1, [pc, #124]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00d      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083e8:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	4a19      	ldr	r2, [pc, #100]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083f2:	6113      	str	r3, [r2, #16]
 80083f4:	4b17      	ldr	r3, [pc, #92]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80083fe:	4915      	ldr	r1, [pc, #84]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008400:	4313      	orrs	r3, r2
 8008402:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	da08      	bge.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800840c:	4b11      	ldr	r3, [pc, #68]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800840e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008410:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008418:	490e      	ldr	r1, [pc, #56]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800841a:	4313      	orrs	r3, r2
 800841c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800842a:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008438:	4906      	ldr	r1, [pc, #24]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800843a:	4313      	orrs	r3, r2
 800843c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800843e:	7dbb      	ldrb	r3, [r7, #22]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	58024400 	.word	0x58024400

08008458 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008466:	4b53      	ldr	r3, [pc, #332]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	2b03      	cmp	r3, #3
 8008470:	d101      	bne.n	8008476 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e099      	b.n	80085aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008476:	4b4f      	ldr	r3, [pc, #316]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a4e      	ldr	r2, [pc, #312]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800847c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008482:	f7fc fe5d 	bl	8005140 <HAL_GetTick>
 8008486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008488:	e008      	b.n	800849c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800848a:	f7fc fe59 	bl	8005140 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d901      	bls.n	800849c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e086      	b.n	80085aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800849c:	4b45      	ldr	r3, [pc, #276]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1f0      	bne.n	800848a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80084a8:	4b42      	ldr	r3, [pc, #264]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	031b      	lsls	r3, r3, #12
 80084b6:	493f      	ldr	r1, [pc, #252]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	628b      	str	r3, [r1, #40]	; 0x28
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	025b      	lsls	r3, r3, #9
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	431a      	orrs	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	061b      	lsls	r3, r3, #24
 80084e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084ec:	4931      	ldr	r1, [pc, #196]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80084f2:	4b30      	ldr	r3, [pc, #192]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	492d      	ldr	r1, [pc, #180]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008500:	4313      	orrs	r3, r2
 8008502:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008504:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	f023 0220 	bic.w	r2, r3, #32
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	4928      	ldr	r1, [pc, #160]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008512:	4313      	orrs	r3, r2
 8008514:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008516:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	4a26      	ldr	r2, [pc, #152]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800851c:	f023 0310 	bic.w	r3, r3, #16
 8008520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008522:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008526:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <RCCEx_PLL2_Config+0x160>)
 8008528:	4013      	ands	r3, r2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	69d2      	ldr	r2, [r2, #28]
 800852e:	00d2      	lsls	r2, r2, #3
 8008530:	4920      	ldr	r1, [pc, #128]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008532:	4313      	orrs	r3, r2
 8008534:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008536:	4b1f      	ldr	r3, [pc, #124]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800853c:	f043 0310 	orr.w	r3, r3, #16
 8008540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d106      	bne.n	8008556 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008548:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	4a19      	ldr	r2, [pc, #100]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800854e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008552:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008554:	e00f      	b.n	8008576 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d106      	bne.n	800856a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800855c:	4b15      	ldr	r3, [pc, #84]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4a14      	ldr	r2, [pc, #80]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008566:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008568:	e005      	b.n	8008576 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800856a:	4b12      	ldr	r3, [pc, #72]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	4a11      	ldr	r2, [pc, #68]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008574:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008576:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a0e      	ldr	r2, [pc, #56]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800857c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008582:	f7fc fddd 	bl	8005140 <HAL_GetTick>
 8008586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008588:	e008      	b.n	800859c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800858a:	f7fc fdd9 	bl	8005140 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b02      	cmp	r3, #2
 8008596:	d901      	bls.n	800859c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e006      	b.n	80085aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800859c:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <RCCEx_PLL2_Config+0x15c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0f0      	beq.n	800858a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	58024400 	.word	0x58024400
 80085b8:	ffff0007 	.word	0xffff0007

080085bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085ca:	4b53      	ldr	r3, [pc, #332]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d101      	bne.n	80085da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e099      	b.n	800870e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085da:	4b4f      	ldr	r3, [pc, #316]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a4e      	ldr	r2, [pc, #312]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80085e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085e6:	f7fc fdab 	bl	8005140 <HAL_GetTick>
 80085ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085ec:	e008      	b.n	8008600 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085ee:	f7fc fda7 	bl	8005140 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e086      	b.n	800870e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008600:	4b45      	ldr	r3, [pc, #276]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1f0      	bne.n	80085ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800860c:	4b42      	ldr	r3, [pc, #264]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	051b      	lsls	r3, r3, #20
 800861a:	493f      	ldr	r1, [pc, #252]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 800861c:	4313      	orrs	r3, r2
 800861e:	628b      	str	r3, [r1, #40]	; 0x28
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	3b01      	subs	r3, #1
 8008626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	3b01      	subs	r3, #1
 8008630:	025b      	lsls	r3, r3, #9
 8008632:	b29b      	uxth	r3, r3
 8008634:	431a      	orrs	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	3b01      	subs	r3, #1
 800863c:	041b      	lsls	r3, r3, #16
 800863e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	3b01      	subs	r3, #1
 800864a:	061b      	lsls	r3, r3, #24
 800864c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008650:	4931      	ldr	r1, [pc, #196]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008652:	4313      	orrs	r3, r2
 8008654:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008656:	4b30      	ldr	r3, [pc, #192]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	492d      	ldr	r1, [pc, #180]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008664:	4313      	orrs	r3, r2
 8008666:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008668:	4b2b      	ldr	r3, [pc, #172]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	4928      	ldr	r1, [pc, #160]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008676:	4313      	orrs	r3, r2
 8008678:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800867a:	4b27      	ldr	r3, [pc, #156]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	4a26      	ldr	r2, [pc, #152]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008684:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008686:	4b24      	ldr	r3, [pc, #144]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800868a:	4b24      	ldr	r3, [pc, #144]	; (800871c <RCCEx_PLL3_Config+0x160>)
 800868c:	4013      	ands	r3, r2
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	69d2      	ldr	r2, [r2, #28]
 8008692:	00d2      	lsls	r2, r2, #3
 8008694:	4920      	ldr	r1, [pc, #128]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008696:	4313      	orrs	r3, r2
 8008698:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800869a:	4b1f      	ldr	r3, [pc, #124]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	4a1e      	ldr	r2, [pc, #120]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d106      	bne.n	80086ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086ac:	4b1a      	ldr	r3, [pc, #104]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	4a19      	ldr	r2, [pc, #100]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086b8:	e00f      	b.n	80086da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d106      	bne.n	80086ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086c0:	4b15      	ldr	r3, [pc, #84]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	4a14      	ldr	r2, [pc, #80]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086cc:	e005      	b.n	80086da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086ce:	4b12      	ldr	r3, [pc, #72]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	4a11      	ldr	r2, [pc, #68]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a0e      	ldr	r2, [pc, #56]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 80086e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e6:	f7fc fd2b 	bl	8005140 <HAL_GetTick>
 80086ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086ec:	e008      	b.n	8008700 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086ee:	f7fc fd27 	bl	8005140 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d901      	bls.n	8008700 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e006      	b.n	800870e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008700:	4b05      	ldr	r3, [pc, #20]	; (8008718 <RCCEx_PLL3_Config+0x15c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0f0      	beq.n	80086ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	58024400 	.word	0x58024400
 800871c:	ffff0007 	.word	0xffff0007

08008720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e049      	b.n	80087c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f841 	bl	80087ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	4619      	mov	r1, r3
 800875e:	4610      	mov	r0, r2
 8008760:	f000 fa00 	bl	8008b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
	...

080087e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d001      	beq.n	80087fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e054      	b.n	80088a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0201 	orr.w	r2, r2, #1
 8008812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d022      	beq.n	8008864 <HAL_TIM_Base_Start_IT+0x80>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008826:	d01d      	beq.n	8008864 <HAL_TIM_Base_Start_IT+0x80>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a22      	ldr	r2, [pc, #136]	; (80088b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d018      	beq.n	8008864 <HAL_TIM_Base_Start_IT+0x80>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a21      	ldr	r2, [pc, #132]	; (80088bc <HAL_TIM_Base_Start_IT+0xd8>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d013      	beq.n	8008864 <HAL_TIM_Base_Start_IT+0x80>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a1f      	ldr	r2, [pc, #124]	; (80088c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d00e      	beq.n	8008864 <HAL_TIM_Base_Start_IT+0x80>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1e      	ldr	r2, [pc, #120]	; (80088c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d009      	beq.n	8008864 <HAL_TIM_Base_Start_IT+0x80>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1c      	ldr	r2, [pc, #112]	; (80088c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d004      	beq.n	8008864 <HAL_TIM_Base_Start_IT+0x80>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1b      	ldr	r2, [pc, #108]	; (80088cc <HAL_TIM_Base_Start_IT+0xe8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d115      	bne.n	8008890 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689a      	ldr	r2, [r3, #8]
 800886a:	4b19      	ldr	r3, [pc, #100]	; (80088d0 <HAL_TIM_Base_Start_IT+0xec>)
 800886c:	4013      	ands	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b06      	cmp	r3, #6
 8008874:	d015      	beq.n	80088a2 <HAL_TIM_Base_Start_IT+0xbe>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887c:	d011      	beq.n	80088a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f042 0201 	orr.w	r2, r2, #1
 800888c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888e:	e008      	b.n	80088a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e000      	b.n	80088a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	40010000 	.word	0x40010000
 80088b8:	40000400 	.word	0x40000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	40000c00 	.word	0x40000c00
 80088c4:	40010400 	.word	0x40010400
 80088c8:	40001800 	.word	0x40001800
 80088cc:	40014000 	.word	0x40014000
 80088d0:	00010007 	.word	0x00010007

080088d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d122      	bne.n	8008930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d11b      	bne.n	8008930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f06f 0202 	mvn.w	r2, #2
 8008900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f905 	bl	8008b26 <HAL_TIM_IC_CaptureCallback>
 800891c:	e005      	b.n	800892a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f8f7 	bl	8008b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f908 	bl	8008b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	2b04      	cmp	r3, #4
 800893c:	d122      	bne.n	8008984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b04      	cmp	r3, #4
 800894a:	d11b      	bne.n	8008984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f06f 0204 	mvn.w	r2, #4
 8008954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2202      	movs	r2, #2
 800895a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f8db 	bl	8008b26 <HAL_TIM_IC_CaptureCallback>
 8008970:	e005      	b.n	800897e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f8cd 	bl	8008b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f8de 	bl	8008b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	2b08      	cmp	r3, #8
 8008990:	d122      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b08      	cmp	r3, #8
 800899e:	d11b      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0208 	mvn.w	r2, #8
 80089a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2204      	movs	r2, #4
 80089ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f8b1 	bl	8008b26 <HAL_TIM_IC_CaptureCallback>
 80089c4:	e005      	b.n	80089d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f8a3 	bl	8008b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f8b4 	bl	8008b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0310 	and.w	r3, r3, #16
 80089e2:	2b10      	cmp	r3, #16
 80089e4:	d122      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0310 	and.w	r3, r3, #16
 80089f0:	2b10      	cmp	r3, #16
 80089f2:	d11b      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0210 	mvn.w	r2, #16
 80089fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2208      	movs	r2, #8
 8008a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f887 	bl	8008b26 <HAL_TIM_IC_CaptureCallback>
 8008a18:	e005      	b.n	8008a26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f879 	bl	8008b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f88a 	bl	8008b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d10e      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d107      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0201 	mvn.w	r2, #1
 8008a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fc f8b4 	bl	8004bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a62:	2b80      	cmp	r3, #128	; 0x80
 8008a64:	d10e      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a70:	2b80      	cmp	r3, #128	; 0x80
 8008a72:	d107      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f914 	bl	8008cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a92:	d10e      	bne.n	8008ab2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9e:	2b80      	cmp	r3, #128	; 0x80
 8008aa0:	d107      	bne.n	8008ab2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f907 	bl	8008cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abc:	2b40      	cmp	r3, #64	; 0x40
 8008abe:	d10e      	bne.n	8008ade <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aca:	2b40      	cmp	r3, #64	; 0x40
 8008acc:	d107      	bne.n	8008ade <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f838 	bl	8008b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	d10e      	bne.n	8008b0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f003 0320 	and.w	r3, r3, #32
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	d107      	bne.n	8008b0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f06f 0220 	mvn.w	r2, #32
 8008b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f8c7 	bl	8008c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
	...

08008b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a40      	ldr	r2, [pc, #256]	; (8008c78 <TIM_Base_SetConfig+0x114>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d013      	beq.n	8008ba4 <TIM_Base_SetConfig+0x40>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b82:	d00f      	beq.n	8008ba4 <TIM_Base_SetConfig+0x40>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a3d      	ldr	r2, [pc, #244]	; (8008c7c <TIM_Base_SetConfig+0x118>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00b      	beq.n	8008ba4 <TIM_Base_SetConfig+0x40>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a3c      	ldr	r2, [pc, #240]	; (8008c80 <TIM_Base_SetConfig+0x11c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d007      	beq.n	8008ba4 <TIM_Base_SetConfig+0x40>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a3b      	ldr	r2, [pc, #236]	; (8008c84 <TIM_Base_SetConfig+0x120>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d003      	beq.n	8008ba4 <TIM_Base_SetConfig+0x40>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a3a      	ldr	r2, [pc, #232]	; (8008c88 <TIM_Base_SetConfig+0x124>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d108      	bne.n	8008bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a2f      	ldr	r2, [pc, #188]	; (8008c78 <TIM_Base_SetConfig+0x114>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d01f      	beq.n	8008bfe <TIM_Base_SetConfig+0x9a>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc4:	d01b      	beq.n	8008bfe <TIM_Base_SetConfig+0x9a>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a2c      	ldr	r2, [pc, #176]	; (8008c7c <TIM_Base_SetConfig+0x118>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d017      	beq.n	8008bfe <TIM_Base_SetConfig+0x9a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a2b      	ldr	r2, [pc, #172]	; (8008c80 <TIM_Base_SetConfig+0x11c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d013      	beq.n	8008bfe <TIM_Base_SetConfig+0x9a>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <TIM_Base_SetConfig+0x120>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00f      	beq.n	8008bfe <TIM_Base_SetConfig+0x9a>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a29      	ldr	r2, [pc, #164]	; (8008c88 <TIM_Base_SetConfig+0x124>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00b      	beq.n	8008bfe <TIM_Base_SetConfig+0x9a>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a28      	ldr	r2, [pc, #160]	; (8008c8c <TIM_Base_SetConfig+0x128>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d007      	beq.n	8008bfe <TIM_Base_SetConfig+0x9a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a27      	ldr	r2, [pc, #156]	; (8008c90 <TIM_Base_SetConfig+0x12c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d003      	beq.n	8008bfe <TIM_Base_SetConfig+0x9a>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a26      	ldr	r2, [pc, #152]	; (8008c94 <TIM_Base_SetConfig+0x130>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d108      	bne.n	8008c10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a10      	ldr	r2, [pc, #64]	; (8008c78 <TIM_Base_SetConfig+0x114>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00f      	beq.n	8008c5c <TIM_Base_SetConfig+0xf8>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a12      	ldr	r2, [pc, #72]	; (8008c88 <TIM_Base_SetConfig+0x124>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00b      	beq.n	8008c5c <TIM_Base_SetConfig+0xf8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a11      	ldr	r2, [pc, #68]	; (8008c8c <TIM_Base_SetConfig+0x128>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d007      	beq.n	8008c5c <TIM_Base_SetConfig+0xf8>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a10      	ldr	r2, [pc, #64]	; (8008c90 <TIM_Base_SetConfig+0x12c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d003      	beq.n	8008c5c <TIM_Base_SetConfig+0xf8>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a0f      	ldr	r2, [pc, #60]	; (8008c94 <TIM_Base_SetConfig+0x130>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d103      	bne.n	8008c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	615a      	str	r2, [r3, #20]
}
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	40010000 	.word	0x40010000
 8008c7c:	40000400 	.word	0x40000400
 8008c80:	40000800 	.word	0x40000800
 8008c84:	40000c00 	.word	0x40000c00
 8008c88:	40010400 	.word	0x40010400
 8008c8c:	40014000 	.word	0x40014000
 8008c90:	40014400 	.word	0x40014400
 8008c94:	40014800 	.word	0x40014800

08008c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	f107 001c 	add.w	r0, r7, #28
 8008ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d120      	bne.n	8008d2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	4b2a      	ldr	r3, [pc, #168]	; (8008da8 <USB_CoreInit+0xd4>)
 8008cfe:	4013      	ands	r3, r2
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d105      	bne.n	8008d22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f914 	bl	8008f50 <USB_CoreReset>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]
 8008d2c:	e01a      	b.n	8008d64 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f908 	bl	8008f50 <USB_CoreReset>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38
 8008d56:	e005      	b.n	8008d64 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d116      	bne.n	8008d98 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <USB_CoreInit+0xd8>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f043 0206 	orr.w	r2, r3, #6
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f043 0220 	orr.w	r2, r3, #32
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008da4:	b004      	add	sp, #16
 8008da6:	4770      	bx	lr
 8008da8:	ffbdffbf 	.word	0xffbdffbf
 8008dac:	03ee0000 	.word	0x03ee0000

08008db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f023 0201 	bic.w	r2, r3, #1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d115      	bne.n	8008e20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e00:	2001      	movs	r0, #1
 8008e02:	f7fc f9a9 	bl	8005158 <HAL_Delay>
      ms++;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f891 	bl	8008f34 <USB_GetMode>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d01e      	beq.n	8008e56 <USB_SetCurrentMode+0x84>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b31      	cmp	r3, #49	; 0x31
 8008e1c:	d9f0      	bls.n	8008e00 <USB_SetCurrentMode+0x2e>
 8008e1e:	e01a      	b.n	8008e56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d115      	bne.n	8008e52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e32:	2001      	movs	r0, #1
 8008e34:	f7fc f990 	bl	8005158 <HAL_Delay>
      ms++;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f878 	bl	8008f34 <USB_GetMode>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <USB_SetCurrentMode+0x84>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b31      	cmp	r3, #49	; 0x31
 8008e4e:	d9f0      	bls.n	8008e32 <USB_SetCurrentMode+0x60>
 8008e50:	e001      	b.n	8008e56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e005      	b.n	8008e62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b32      	cmp	r3, #50	; 0x32
 8008e5a:	d101      	bne.n	8008e60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e000      	b.n	8008e62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <USB_FlushTxFifo+0x64>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d901      	bls.n	8008e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e01b      	b.n	8008ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	daf2      	bge.n	8008e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	019b      	lsls	r3, r3, #6
 8008e9c:	f043 0220 	orr.w	r2, r3, #32
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4a08      	ldr	r2, [pc, #32]	; (8008ed0 <USB_FlushTxFifo+0x64>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d901      	bls.n	8008eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e006      	b.n	8008ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b20      	cmp	r3, #32
 8008ec0:	d0f0      	beq.n	8008ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	00030d40 	.word	0x00030d40

08008ed4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4a11      	ldr	r2, [pc, #68]	; (8008f30 <USB_FlushRxFifo+0x5c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d901      	bls.n	8008ef2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e018      	b.n	8008f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	daf2      	bge.n	8008ee0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2210      	movs	r2, #16
 8008f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4a08      	ldr	r2, [pc, #32]	; (8008f30 <USB_FlushRxFifo+0x5c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d901      	bls.n	8008f16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e006      	b.n	8008f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f003 0310 	and.w	r3, r3, #16
 8008f1e:	2b10      	cmp	r3, #16
 8008f20:	d0f0      	beq.n	8008f04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	00030d40 	.word	0x00030d40

08008f34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	f003 0301 	and.w	r3, r3, #1
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a13      	ldr	r2, [pc, #76]	; (8008fb4 <USB_CoreReset+0x64>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d901      	bls.n	8008f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e01b      	b.n	8008fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	daf2      	bge.n	8008f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f043 0201 	orr.w	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <USB_CoreReset+0x64>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d901      	bls.n	8008f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e006      	b.n	8008fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d0f0      	beq.n	8008f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	00030d40 	.word	0x00030d40

08008fb8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fb8:	b084      	sub	sp, #16
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fd8:	461a      	mov	r2, r3
 8008fda:	2300      	movs	r3, #0
 8008fdc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d018      	beq.n	8009034 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	2b01      	cmp	r3, #1
 8009006:	d10a      	bne.n	800901e <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009016:	f043 0304 	orr.w	r3, r3, #4
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	e014      	b.n	8009048 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800902c:	f023 0304 	bic.w	r3, r3, #4
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	e009      	b.n	8009048 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009042:	f023 0304 	bic.w	r3, r3, #4
 8009046:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009048:	2110      	movs	r1, #16
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff ff0e 	bl	8008e6c <USB_FlushTxFifo>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff ff3a 	bl	8008ed4 <USB_FlushRxFifo>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800906a:	2300      	movs	r3, #0
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	e015      	b.n	800909c <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800907c:	461a      	mov	r2, r3
 800907e:	f04f 33ff 	mov.w	r3, #4294967295
 8009082:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009090:	461a      	mov	r2, r3
 8009092:	2300      	movs	r3, #0
 8009094:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	3301      	adds	r3, #1
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d3e5      	bcc.n	8009070 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f04f 32ff 	mov.w	r2, #4294967295
 80090b0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00b      	beq.n	80090d6 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a13      	ldr	r2, [pc, #76]	; (8009118 <USB_HostInit+0x160>)
 80090ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a13      	ldr	r2, [pc, #76]	; (800911c <USB_HostInit+0x164>)
 80090d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80090d4:	e009      	b.n	80090ea <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2280      	movs	r2, #128	; 0x80
 80090da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a10      	ldr	r2, [pc, #64]	; (8009120 <USB_HostInit+0x168>)
 80090e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a0f      	ldr	r2, [pc, #60]	; (8009124 <USB_HostInit+0x16c>)
 80090e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	f043 0210 	orr.w	r2, r3, #16
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	699a      	ldr	r2, [r3, #24]
 8009100:	4b09      	ldr	r3, [pc, #36]	; (8009128 <USB_HostInit+0x170>)
 8009102:	4313      	orrs	r3, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009114:	b004      	add	sp, #16
 8009116:	4770      	bx	lr
 8009118:	01000200 	.word	0x01000200
 800911c:	00e00300 	.word	0x00e00300
 8009120:	00600080 	.word	0x00600080
 8009124:	004000e0 	.word	0x004000e0
 8009128:	a3200008 	.word	0xa3200008

0800912c <__libc_init_array>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	4d0d      	ldr	r5, [pc, #52]	; (8009164 <__libc_init_array+0x38>)
 8009130:	4c0d      	ldr	r4, [pc, #52]	; (8009168 <__libc_init_array+0x3c>)
 8009132:	1b64      	subs	r4, r4, r5
 8009134:	10a4      	asrs	r4, r4, #2
 8009136:	2600      	movs	r6, #0
 8009138:	42a6      	cmp	r6, r4
 800913a:	d109      	bne.n	8009150 <__libc_init_array+0x24>
 800913c:	4d0b      	ldr	r5, [pc, #44]	; (800916c <__libc_init_array+0x40>)
 800913e:	4c0c      	ldr	r4, [pc, #48]	; (8009170 <__libc_init_array+0x44>)
 8009140:	f000 f83e 	bl	80091c0 <_init>
 8009144:	1b64      	subs	r4, r4, r5
 8009146:	10a4      	asrs	r4, r4, #2
 8009148:	2600      	movs	r6, #0
 800914a:	42a6      	cmp	r6, r4
 800914c:	d105      	bne.n	800915a <__libc_init_array+0x2e>
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	f855 3b04 	ldr.w	r3, [r5], #4
 8009154:	4798      	blx	r3
 8009156:	3601      	adds	r6, #1
 8009158:	e7ee      	b.n	8009138 <__libc_init_array+0xc>
 800915a:	f855 3b04 	ldr.w	r3, [r5], #4
 800915e:	4798      	blx	r3
 8009160:	3601      	adds	r6, #1
 8009162:	e7f2      	b.n	800914a <__libc_init_array+0x1e>
 8009164:	0800941c 	.word	0x0800941c
 8009168:	0800941c 	.word	0x0800941c
 800916c:	0800941c 	.word	0x0800941c
 8009170:	08009420 	.word	0x08009420

08009174 <memcmp>:
 8009174:	b510      	push	{r4, lr}
 8009176:	3901      	subs	r1, #1
 8009178:	4402      	add	r2, r0
 800917a:	4290      	cmp	r0, r2
 800917c:	d101      	bne.n	8009182 <memcmp+0xe>
 800917e:	2000      	movs	r0, #0
 8009180:	e005      	b.n	800918e <memcmp+0x1a>
 8009182:	7803      	ldrb	r3, [r0, #0]
 8009184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009188:	42a3      	cmp	r3, r4
 800918a:	d001      	beq.n	8009190 <memcmp+0x1c>
 800918c:	1b18      	subs	r0, r3, r4
 800918e:	bd10      	pop	{r4, pc}
 8009190:	3001      	adds	r0, #1
 8009192:	e7f2      	b.n	800917a <memcmp+0x6>

08009194 <memcpy>:
 8009194:	440a      	add	r2, r1
 8009196:	4291      	cmp	r1, r2
 8009198:	f100 33ff 	add.w	r3, r0, #4294967295
 800919c:	d100      	bne.n	80091a0 <memcpy+0xc>
 800919e:	4770      	bx	lr
 80091a0:	b510      	push	{r4, lr}
 80091a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091aa:	4291      	cmp	r1, r2
 80091ac:	d1f9      	bne.n	80091a2 <memcpy+0xe>
 80091ae:	bd10      	pop	{r4, pc}

080091b0 <memset>:
 80091b0:	4402      	add	r2, r0
 80091b2:	4603      	mov	r3, r0
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d100      	bne.n	80091ba <memset+0xa>
 80091b8:	4770      	bx	lr
 80091ba:	f803 1b01 	strb.w	r1, [r3], #1
 80091be:	e7f9      	b.n	80091b4 <memset+0x4>

080091c0 <_init>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	bf00      	nop
 80091c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c6:	bc08      	pop	{r3}
 80091c8:	469e      	mov	lr, r3
 80091ca:	4770      	bx	lr

080091cc <_fini>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr
