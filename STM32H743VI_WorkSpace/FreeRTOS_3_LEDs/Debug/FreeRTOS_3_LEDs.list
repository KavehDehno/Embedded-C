
FreeRTOS_3_LEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  24000000  08006b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006074  24000024  08006b9c  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006098  08006b9c  00026098  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b608  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000437c  00000000  00000000  0004b65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001fb7e  00000000  00000000  0004f9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001cd8  00000000  00000000  0006f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002040  00000000  00000000  00071230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038ccf  00000000  00000000  00073270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002bb08  00000000  00000000  000abf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017a51e  00000000  00000000  000d7a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00251f65  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004fa0  00000000  00000000  00251fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000024 	.word	0x24000024
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800692c 	.word	0x0800692c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000028 	.word	0x24000028
 80002dc:	0800692c 	.word	0x0800692c

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	24005240 	.word	0x24005240

08000374 <__aeabi_uldivmod>:
 8000374:	b953      	cbnz	r3, 800038c <__aeabi_uldivmod+0x18>
 8000376:	b94a      	cbnz	r2, 800038c <__aeabi_uldivmod+0x18>
 8000378:	2900      	cmp	r1, #0
 800037a:	bf08      	it	eq
 800037c:	2800      	cmpeq	r0, #0
 800037e:	bf1c      	itt	ne
 8000380:	f04f 31ff 	movne.w	r1, #4294967295
 8000384:	f04f 30ff 	movne.w	r0, #4294967295
 8000388:	f000 b974 	b.w	8000674 <__aeabi_idiv0>
 800038c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000390:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000394:	f000 f806 	bl	80003a4 <__udivmoddi4>
 8000398:	f8dd e004 	ldr.w	lr, [sp, #4]
 800039c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a0:	b004      	add	sp, #16
 80003a2:	4770      	bx	lr

080003a4 <__udivmoddi4>:
 80003a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a8:	9d08      	ldr	r5, [sp, #32]
 80003aa:	4604      	mov	r4, r0
 80003ac:	468e      	mov	lr, r1
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d14d      	bne.n	800044e <__udivmoddi4+0xaa>
 80003b2:	428a      	cmp	r2, r1
 80003b4:	4694      	mov	ip, r2
 80003b6:	d969      	bls.n	800048c <__udivmoddi4+0xe8>
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	b152      	cbz	r2, 80003d4 <__udivmoddi4+0x30>
 80003be:	fa01 f302 	lsl.w	r3, r1, r2
 80003c2:	f1c2 0120 	rsb	r1, r2, #32
 80003c6:	fa20 f101 	lsr.w	r1, r0, r1
 80003ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ce:	ea41 0e03 	orr.w	lr, r1, r3
 80003d2:	4094      	lsls	r4, r2
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	0c21      	lsrs	r1, r4, #16
 80003da:	fbbe f6f8 	udiv	r6, lr, r8
 80003de:	fa1f f78c 	uxth.w	r7, ip
 80003e2:	fb08 e316 	mls	r3, r8, r6, lr
 80003e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ea:	fb06 f107 	mul.w	r1, r6, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d90a      	bls.n	8000408 <__udivmoddi4+0x64>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80003fa:	f080 811f 	bcs.w	800063c <__udivmoddi4+0x298>
 80003fe:	4299      	cmp	r1, r3
 8000400:	f240 811c 	bls.w	800063c <__udivmoddi4+0x298>
 8000404:	3e02      	subs	r6, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb00 f707 	mul.w	r7, r0, r7
 800041c:	42a7      	cmp	r7, r4
 800041e:	d90a      	bls.n	8000436 <__udivmoddi4+0x92>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295
 8000428:	f080 810a 	bcs.w	8000640 <__udivmoddi4+0x29c>
 800042c:	42a7      	cmp	r7, r4
 800042e:	f240 8107 	bls.w	8000640 <__udivmoddi4+0x29c>
 8000432:	4464      	add	r4, ip
 8000434:	3802      	subs	r0, #2
 8000436:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043a:	1be4      	subs	r4, r4, r7
 800043c:	2600      	movs	r6, #0
 800043e:	b11d      	cbz	r5, 8000448 <__udivmoddi4+0xa4>
 8000440:	40d4      	lsrs	r4, r2
 8000442:	2300      	movs	r3, #0
 8000444:	e9c5 4300 	strd	r4, r3, [r5]
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	428b      	cmp	r3, r1
 8000450:	d909      	bls.n	8000466 <__udivmoddi4+0xc2>
 8000452:	2d00      	cmp	r5, #0
 8000454:	f000 80ef 	beq.w	8000636 <__udivmoddi4+0x292>
 8000458:	2600      	movs	r6, #0
 800045a:	e9c5 0100 	strd	r0, r1, [r5]
 800045e:	4630      	mov	r0, r6
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	fab3 f683 	clz	r6, r3
 800046a:	2e00      	cmp	r6, #0
 800046c:	d14a      	bne.n	8000504 <__udivmoddi4+0x160>
 800046e:	428b      	cmp	r3, r1
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xd4>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 80f9 	bhi.w	800066a <__udivmoddi4+0x2c6>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb61 0303 	sbc.w	r3, r1, r3
 800047e:	2001      	movs	r0, #1
 8000480:	469e      	mov	lr, r3
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e0      	beq.n	8000448 <__udivmoddi4+0xa4>
 8000486:	e9c5 4e00 	strd	r4, lr, [r5]
 800048a:	e7dd      	b.n	8000448 <__udivmoddi4+0xa4>
 800048c:	b902      	cbnz	r2, 8000490 <__udivmoddi4+0xec>
 800048e:	deff      	udf	#255	; 0xff
 8000490:	fab2 f282 	clz	r2, r2
 8000494:	2a00      	cmp	r2, #0
 8000496:	f040 8092 	bne.w	80005be <__udivmoddi4+0x21a>
 800049a:	eba1 010c 	sub.w	r1, r1, ip
 800049e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a2:	fa1f fe8c 	uxth.w	lr, ip
 80004a6:	2601      	movs	r6, #1
 80004a8:	0c20      	lsrs	r0, r4, #16
 80004aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ae:	fb07 1113 	mls	r1, r7, r3, r1
 80004b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b6:	fb0e f003 	mul.w	r0, lr, r3
 80004ba:	4288      	cmp	r0, r1
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x12c>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c6:	d202      	bcs.n	80004ce <__udivmoddi4+0x12a>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f200 80cb 	bhi.w	8000664 <__udivmoddi4+0x2c0>
 80004ce:	4643      	mov	r3, r8
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d8:	fb07 1110 	mls	r1, r7, r0, r1
 80004dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004e0:	fb0e fe00 	mul.w	lr, lr, r0
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x156>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d202      	bcs.n	80004f8 <__udivmoddi4+0x154>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	f200 80bb 	bhi.w	800066e <__udivmoddi4+0x2ca>
 80004f8:	4608      	mov	r0, r1
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x9a>
 8000504:	f1c6 0720 	rsb	r7, r6, #32
 8000508:	40b3      	lsls	r3, r6
 800050a:	fa22 fc07 	lsr.w	ip, r2, r7
 800050e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000512:	fa20 f407 	lsr.w	r4, r0, r7
 8000516:	fa01 f306 	lsl.w	r3, r1, r6
 800051a:	431c      	orrs	r4, r3
 800051c:	40f9      	lsrs	r1, r7
 800051e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000522:	fa00 f306 	lsl.w	r3, r0, r6
 8000526:	fbb1 f8f9 	udiv	r8, r1, r9
 800052a:	0c20      	lsrs	r0, r4, #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fb09 1118 	mls	r1, r9, r8, r1
 8000534:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000538:	fb08 f00e 	mul.w	r0, r8, lr
 800053c:	4288      	cmp	r0, r1
 800053e:	fa02 f206 	lsl.w	r2, r2, r6
 8000542:	d90b      	bls.n	800055c <__udivmoddi4+0x1b8>
 8000544:	eb1c 0101 	adds.w	r1, ip, r1
 8000548:	f108 3aff 	add.w	sl, r8, #4294967295
 800054c:	f080 8088 	bcs.w	8000660 <__udivmoddi4+0x2bc>
 8000550:	4288      	cmp	r0, r1
 8000552:	f240 8085 	bls.w	8000660 <__udivmoddi4+0x2bc>
 8000556:	f1a8 0802 	sub.w	r8, r8, #2
 800055a:	4461      	add	r1, ip
 800055c:	1a09      	subs	r1, r1, r0
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb1 f0f9 	udiv	r0, r1, r9
 8000564:	fb09 1110 	mls	r1, r9, r0, r1
 8000568:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	458e      	cmp	lr, r1
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x1e2>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f100 34ff 	add.w	r4, r0, #4294967295
 800057c:	d26c      	bcs.n	8000658 <__udivmoddi4+0x2b4>
 800057e:	458e      	cmp	lr, r1
 8000580:	d96a      	bls.n	8000658 <__udivmoddi4+0x2b4>
 8000582:	3802      	subs	r0, #2
 8000584:	4461      	add	r1, ip
 8000586:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800058a:	fba0 9402 	umull	r9, r4, r0, r2
 800058e:	eba1 010e 	sub.w	r1, r1, lr
 8000592:	42a1      	cmp	r1, r4
 8000594:	46c8      	mov	r8, r9
 8000596:	46a6      	mov	lr, r4
 8000598:	d356      	bcc.n	8000648 <__udivmoddi4+0x2a4>
 800059a:	d053      	beq.n	8000644 <__udivmoddi4+0x2a0>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x212>
 800059e:	ebb3 0208 	subs.w	r2, r3, r8
 80005a2:	eb61 010e 	sbc.w	r1, r1, lr
 80005a6:	fa01 f707 	lsl.w	r7, r1, r7
 80005aa:	fa22 f306 	lsr.w	r3, r2, r6
 80005ae:	40f1      	lsrs	r1, r6
 80005b0:	431f      	orrs	r7, r3
 80005b2:	e9c5 7100 	strd	r7, r1, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	40d8      	lsrs	r0, r3
 80005c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c8:	fa21 f303 	lsr.w	r3, r1, r3
 80005cc:	4091      	lsls	r1, r2
 80005ce:	4301      	orrs	r1, r0
 80005d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d4:	fa1f fe8c 	uxth.w	lr, ip
 80005d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80005dc:	fb07 3610 	mls	r6, r7, r0, r3
 80005e0:	0c0b      	lsrs	r3, r1, #16
 80005e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005e6:	fb00 f60e 	mul.w	r6, r0, lr
 80005ea:	429e      	cmp	r6, r3
 80005ec:	fa04 f402 	lsl.w	r4, r4, r2
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x260>
 80005f2:	eb1c 0303 	adds.w	r3, ip, r3
 80005f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fa:	d22f      	bcs.n	800065c <__udivmoddi4+0x2b8>
 80005fc:	429e      	cmp	r6, r3
 80005fe:	d92d      	bls.n	800065c <__udivmoddi4+0x2b8>
 8000600:	3802      	subs	r0, #2
 8000602:	4463      	add	r3, ip
 8000604:	1b9b      	subs	r3, r3, r6
 8000606:	b289      	uxth	r1, r1
 8000608:	fbb3 f6f7 	udiv	r6, r3, r7
 800060c:	fb07 3316 	mls	r3, r7, r6, r3
 8000610:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000614:	fb06 f30e 	mul.w	r3, r6, lr
 8000618:	428b      	cmp	r3, r1
 800061a:	d908      	bls.n	800062e <__udivmoddi4+0x28a>
 800061c:	eb1c 0101 	adds.w	r1, ip, r1
 8000620:	f106 38ff 	add.w	r8, r6, #4294967295
 8000624:	d216      	bcs.n	8000654 <__udivmoddi4+0x2b0>
 8000626:	428b      	cmp	r3, r1
 8000628:	d914      	bls.n	8000654 <__udivmoddi4+0x2b0>
 800062a:	3e02      	subs	r6, #2
 800062c:	4461      	add	r1, ip
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000634:	e738      	b.n	80004a8 <__udivmoddi4+0x104>
 8000636:	462e      	mov	r6, r5
 8000638:	4628      	mov	r0, r5
 800063a:	e705      	b.n	8000448 <__udivmoddi4+0xa4>
 800063c:	4606      	mov	r6, r0
 800063e:	e6e3      	b.n	8000408 <__udivmoddi4+0x64>
 8000640:	4618      	mov	r0, r3
 8000642:	e6f8      	b.n	8000436 <__udivmoddi4+0x92>
 8000644:	454b      	cmp	r3, r9
 8000646:	d2a9      	bcs.n	800059c <__udivmoddi4+0x1f8>
 8000648:	ebb9 0802 	subs.w	r8, r9, r2
 800064c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000650:	3801      	subs	r0, #1
 8000652:	e7a3      	b.n	800059c <__udivmoddi4+0x1f8>
 8000654:	4646      	mov	r6, r8
 8000656:	e7ea      	b.n	800062e <__udivmoddi4+0x28a>
 8000658:	4620      	mov	r0, r4
 800065a:	e794      	b.n	8000586 <__udivmoddi4+0x1e2>
 800065c:	4640      	mov	r0, r8
 800065e:	e7d1      	b.n	8000604 <__udivmoddi4+0x260>
 8000660:	46d0      	mov	r8, sl
 8000662:	e77b      	b.n	800055c <__udivmoddi4+0x1b8>
 8000664:	3b02      	subs	r3, #2
 8000666:	4461      	add	r1, ip
 8000668:	e732      	b.n	80004d0 <__udivmoddi4+0x12c>
 800066a:	4630      	mov	r0, r6
 800066c:	e709      	b.n	8000482 <__udivmoddi4+0xde>
 800066e:	4464      	add	r4, ip
 8000670:	3802      	subs	r0, #2
 8000672:	e742      	b.n	80004fa <__udivmoddi4+0x156>

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000678:	f100 0308 	add.w	r3, r0, #8
 800067c:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800067e:	f04f 32ff 	mov.w	r2, #4294967295
 8000682:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000684:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000686:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000688:	2300      	movs	r3, #0
 800068a:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800068c:	4770      	bx	lr

0800068e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800068e:	2300      	movs	r3, #0
 8000690:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000692:	4770      	bx	lr

08000694 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000694:	6843      	ldr	r3, [r0, #4]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000696:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800069c:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800069e:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006a0:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 80006a2:	6803      	ldr	r3, [r0, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	6003      	str	r3, [r0, #0]
}
 80006a8:	4770      	bx	lr

080006aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006aa:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006ac:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006ae:	f1b5 3fff 	cmp.w	r5, #4294967295
 80006b2:	d011      	beq.n	80006d8 <vListInsert+0x2e>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006b4:	f100 0308 	add.w	r3, r0, #8
 80006b8:	461c      	mov	r4, r3
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	42aa      	cmp	r2, r5
 80006c0:	d9fa      	bls.n	80006b8 <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006c2:	6863      	ldr	r3, [r4, #4]
 80006c4:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006c6:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006c8:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80006ca:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006cc:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 80006ce:	6803      	ldr	r3, [r0, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	6003      	str	r3, [r0, #0]
}
 80006d4:	bc30      	pop	{r4, r5}
 80006d6:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 80006d8:	6904      	ldr	r4, [r0, #16]
 80006da:	e7f2      	b.n	80006c2 <vListInsert+0x18>

080006dc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006dc:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006de:	6841      	ldr	r1, [r0, #4]
 80006e0:	6882      	ldr	r2, [r0, #8]
 80006e2:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006e4:	6841      	ldr	r1, [r0, #4]
 80006e6:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	4282      	cmp	r2, r0
 80006ec:	d006      	beq.n	80006fc <uxListRemove+0x20>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006ee:	2200      	movs	r2, #0
 80006f0:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	3a01      	subs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006f8:	6818      	ldr	r0, [r3, #0]
}
 80006fa:	4770      	bx	lr
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006fc:	6882      	ldr	r2, [r0, #8]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	e7f5      	b.n	80006ee <uxListRemove+0x12>
	...

08000704 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <prvResetNextTaskUnblockTime+0x20>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	b923      	cbnz	r3, 8000716 <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <prvResetNextTaskUnblockTime+0x24>)
 800070e:	f04f 32ff 	mov.w	r2, #4294967295
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	4770      	bx	lr
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000716:	4b03      	ldr	r3, [pc, #12]	; (8000724 <prvResetNextTaskUnblockTime+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b02      	ldr	r3, [pc, #8]	; (8000728 <prvResetNextTaskUnblockTime+0x24>)
 8000720:	601a      	str	r2, [r3, #0]
    }
}
 8000722:	4770      	bx	lr
 8000724:	24000044 	.word	0x24000044
 8000728:	24000118 	.word	0x24000118

0800072c <prvDeleteTCB>:
    {
 800072c:	b510      	push	{r4, lr}
 800072e:	4604      	mov	r4, r0
                vPortFree( pxTCB->pxStack );
 8000730:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8000732:	f000 fe0f 	bl	8001354 <vPortFree>
                vPortFree( pxTCB );
 8000736:	4620      	mov	r0, r4
 8000738:	f000 fe0c 	bl	8001354 <vPortFree>
    }
 800073c:	bd10      	pop	{r4, pc}

0800073e <prvInitialiseNewTask>:
{
 800073e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000742:	4680      	mov	r8, r0
 8000744:	460d      	mov	r5, r1
 8000746:	4617      	mov	r7, r2
 8000748:	4699      	mov	r9, r3
 800074a:	9e08      	ldr	r6, [sp, #32]
 800074c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8000750:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000752:	0092      	lsls	r2, r2, #2
 8000754:	21a5      	movs	r1, #165	; 0xa5
 8000756:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000758:	f006 f8e0 	bl	800691c <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800075c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800075e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000762:	443a      	add	r2, r7
 8000764:	eb03 0782 	add.w	r7, r3, r2, lsl #2
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000768:	f027 0707 	bic.w	r7, r7, #7
    if( pcName != NULL )
 800076c:	b3b5      	cbz	r5, 80007dc <prvInitialiseNewTask+0x9e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800076e:	f04f 0c00 	mov.w	ip, #0
 8000772:	f1bc 0f0f 	cmp.w	ip, #15
 8000776:	d80b      	bhi.n	8000790 <prvInitialiseNewTask+0x52>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000778:	f815 200c 	ldrb.w	r2, [r5, ip]
 800077c:	eb04 030c 	add.w	r3, r4, ip
 8000780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            if( pcName[ x ] == ( char ) 0x00 )
 8000784:	f815 300c 	ldrb.w	r3, [r5, ip]
 8000788:	b113      	cbz	r3, 8000790 <prvInitialiseNewTask+0x52>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800078a:	f10c 0c01 	add.w	ip, ip, #1
 800078e:	e7f0      	b.n	8000772 <prvInitialiseNewTask+0x34>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000790:	2300      	movs	r3, #0
 8000792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000796:	2e06      	cmp	r6, #6
 8000798:	d900      	bls.n	800079c <prvInitialiseNewTask+0x5e>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800079a:	2606      	movs	r6, #6
    pxNewTCB->uxPriority = uxPriority;
 800079c:	62e6      	str	r6, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 800079e:	64e6      	str	r6, [r4, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80007a0:	2500      	movs	r5, #0
 80007a2:	6525      	str	r5, [r4, #80]	; 0x50
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80007a4:	1d20      	adds	r0, r4, #4
 80007a6:	f7ff ff72 	bl	800068e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80007aa:	f104 0018 	add.w	r0, r4, #24
 80007ae:	f7ff ff6e 	bl	800068e <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80007b2:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007b4:	f1c6 0607 	rsb	r6, r6, #7
 80007b8:	61a6      	str	r6, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80007ba:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80007bc:	6565      	str	r5, [r4, #84]	; 0x54
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80007be:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007c2:	464a      	mov	r2, r9
 80007c4:	4641      	mov	r1, r8
 80007c6:	4638      	mov	r0, r7
 80007c8:	f000 fb70 	bl	8000eac <pxPortInitialiseStack>
 80007cc:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 80007ce:	f1ba 0f00 	cmp.w	sl, #0
 80007d2:	d001      	beq.n	80007d8 <prvInitialiseNewTask+0x9a>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007d4:	f8ca 4000 	str.w	r4, [sl]
}
 80007d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80007dc:	2300      	movs	r3, #0
 80007de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80007e2:	e7d8      	b.n	8000796 <prvInitialiseNewTask+0x58>

080007e4 <prvInitialiseTaskLists>:
{
 80007e4:	b538      	push	{r3, r4, r5, lr}
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80007e6:	2400      	movs	r4, #0
 80007e8:	e007      	b.n	80007fa <prvInitialiseTaskLists+0x16>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80007ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80007ee:	0093      	lsls	r3, r2, #2
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <prvInitialiseTaskLists+0x48>)
 80007f2:	4418      	add	r0, r3
 80007f4:	f7ff ff40 	bl	8000678 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80007f8:	3401      	adds	r4, #1
 80007fa:	2c06      	cmp	r4, #6
 80007fc:	d9f5      	bls.n	80007ea <prvInitialiseTaskLists+0x6>
    vListInitialise( &xDelayedTaskList1 );
 80007fe:	4d0c      	ldr	r5, [pc, #48]	; (8000830 <prvInitialiseTaskLists+0x4c>)
 8000800:	4628      	mov	r0, r5
 8000802:	f7ff ff39 	bl	8000678 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000806:	4c0b      	ldr	r4, [pc, #44]	; (8000834 <prvInitialiseTaskLists+0x50>)
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff ff35 	bl	8000678 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <prvInitialiseTaskLists+0x54>)
 8000810:	f7ff ff32 	bl	8000678 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <prvInitialiseTaskLists+0x58>)
 8000816:	f7ff ff2f 	bl	8000678 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <prvInitialiseTaskLists+0x5c>)
 800081c:	f7ff ff2c 	bl	8000678 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <prvInitialiseTaskLists+0x60>)
 8000822:	601d      	str	r5, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <prvInitialiseTaskLists+0x64>)
 8000826:	601c      	str	r4, [r3, #0]
}
 8000828:	bd38      	pop	{r3, r4, r5, pc}
 800082a:	bf00      	nop
 800082c:	2400004c 	.word	0x2400004c
 8000830:	240000ec 	.word	0x240000ec
 8000834:	24000100 	.word	0x24000100
 8000838:	24000124 	.word	0x24000124
 800083c:	24000150 	.word	0x24000150
 8000840:	2400013c 	.word	0x2400013c
 8000844:	24000044 	.word	0x24000044
 8000848:	24000048 	.word	0x24000048

0800084c <prvAddNewTaskToReadyList>:
{
 800084c:	b510      	push	{r4, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000852:	f000 fb57 	bl	8000f04 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8000856:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <prvAddNewTaskToReadyList+0x9c>)
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <prvAddNewTaskToReadyList+0xa0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	b15b      	cbz	r3, 800087c <prvAddNewTaskToReadyList+0x30>
            if( xSchedulerRunning == pdFALSE )
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <prvAddNewTaskToReadyList+0xa4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	b96b      	cbnz	r3, 8000886 <prvAddNewTaskToReadyList+0x3a>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <prvAddNewTaskToReadyList+0xa0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000870:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000872:	429a      	cmp	r2, r3
 8000874:	d807      	bhi.n	8000886 <prvAddNewTaskToReadyList+0x3a>
                    pxCurrentTCB = pxNewTCB;
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <prvAddNewTaskToReadyList+0xa0>)
 8000878:	601c      	str	r4, [r3, #0]
 800087a:	e004      	b.n	8000886 <prvAddNewTaskToReadyList+0x3a>
            pxCurrentTCB = pxNewTCB;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <prvAddNewTaskToReadyList+0xa0>)
 800087e:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000880:	6813      	ldr	r3, [r2, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d02d      	beq.n	80008e2 <prvAddNewTaskToReadyList+0x96>
        uxTaskNumber++;
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <prvAddNewTaskToReadyList+0xa8>)
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800088e:	6463      	str	r3, [r4, #68]	; 0x44
        traceTASK_CREATE( pxNewTCB );
 8000890:	b164      	cbz	r4, 80008ac <prvAddNewTaskToReadyList+0x60>
 8000892:	4620      	mov	r0, r4
 8000894:	f001 fc98 	bl	80021c8 <SEGGER_SYSVIEW_OnTaskCreate>
 8000898:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800089a:	6822      	ldr	r2, [r4, #0]
 800089c:	1ad2      	subs	r2, r2, r3
 800089e:	9200      	str	r2, [sp, #0]
 80008a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008a2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80008a6:	4620      	mov	r0, r4
 80008a8:	f000 fdde 	bl	8001468 <SYSVIEW_AddTask>
        prvAddTaskToReadyList( pxNewTCB );
 80008ac:	4620      	mov	r0, r4
 80008ae:	f001 fcd3 	bl	8002258 <SEGGER_SYSVIEW_OnTaskStartReady>
 80008b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80008b4:	2301      	movs	r3, #1
 80008b6:	4083      	lsls	r3, r0
 80008b8:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <prvAddNewTaskToReadyList+0xac>)
 80008ba:	6811      	ldr	r1, [r2, #0]
 80008bc:	430b      	orrs	r3, r1
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80008c4:	1d21      	adds	r1, r4, #4
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <prvAddNewTaskToReadyList+0xb0>)
 80008c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80008cc:	f7ff fee2 	bl	8000694 <vListInsertEnd>
    taskEXIT_CRITICAL();
 80008d0:	f000 fb3e 	bl	8000f50 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <prvAddNewTaskToReadyList+0xa4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	b10b      	cbz	r3, 80008de <prvAddNewTaskToReadyList+0x92>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <prvAddNewTaskToReadyList+0xa0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
}
 80008de:	b002      	add	sp, #8
 80008e0:	bd10      	pop	{r4, pc}
                prvInitialiseTaskLists();
 80008e2:	f7ff ff7f 	bl	80007e4 <prvInitialiseTaskLists>
 80008e6:	e7ce      	b.n	8000886 <prvAddNewTaskToReadyList+0x3a>
 80008e8:	240000d8 	.word	0x240000d8
 80008ec:	24000040 	.word	0x24000040
 80008f0:	24000138 	.word	0x24000138
 80008f4:	240000e4 	.word	0x240000e4
 80008f8:	240000e8 	.word	0x240000e8
 80008fc:	2400004c 	.word	0x2400004c

08000900 <prvCheckTasksWaitingTermination>:
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <prvCheckTasksWaitingTermination+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	b1d3      	cbz	r3, 800093c <prvCheckTasksWaitingTermination+0x3c>
{
 8000906:	b510      	push	{r4, lr}
                taskENTER_CRITICAL();
 8000908:	f000 fafc 	bl	8000f04 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <prvCheckTasksWaitingTermination+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	68dc      	ldr	r4, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000912:	1d20      	adds	r0, r4, #4
 8000914:	f7ff fee2 	bl	80006dc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000918:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <prvCheckTasksWaitingTermination+0x48>)
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	3b01      	subs	r3, #1
 800091e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <prvCheckTasksWaitingTermination+0x40>)
 8000922:	6813      	ldr	r3, [r2, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	6013      	str	r3, [r2, #0]
                taskEXIT_CRITICAL();
 8000928:	f000 fb12 	bl	8000f50 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 800092c:	4620      	mov	r0, r4
 800092e:	f7ff fefd 	bl	800072c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000932:	4b03      	ldr	r3, [pc, #12]	; (8000940 <prvCheckTasksWaitingTermination+0x40>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1e6      	bne.n	8000908 <prvCheckTasksWaitingTermination+0x8>
}
 800093a:	bd10      	pop	{r4, pc}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	240000dc 	.word	0x240000dc
 8000944:	24000150 	.word	0x24000150
 8000948:	240000d8 	.word	0x240000d8

0800094c <prvIdleTask>:
{
 800094c:	b508      	push	{r3, lr}
        prvCheckTasksWaitingTermination();
 800094e:	f7ff ffd7 	bl	8000900 <prvCheckTasksWaitingTermination>
                taskYIELD();
 8000952:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800095a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	f3bf 8f6f 	isb	sy
    for( ; ; )
 8000966:	e7f2      	b.n	800094e <prvIdleTask+0x2>

08000968 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4604      	mov	r4, r0
 800096c:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8000970:	681e      	ldr	r6, [r3, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	3004      	adds	r0, #4
 8000978:	f7ff feb0 	bl	80006dc <uxListRemove>
 800097c:	b950      	cbnz	r0, 8000994 <prvAddCurrentTaskToDelayedList+0x2c>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000984:	2301      	movs	r3, #1
 8000986:	fa03 f202 	lsl.w	r2, r3, r2
 800098a:	4920      	ldr	r1, [pc, #128]	; (8000a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800098c:	680b      	ldr	r3, [r1, #0]
 800098e:	ea23 0302 	bic.w	r3, r3, r2
 8000992:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000994:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000998:	bf14      	ite	ne
 800099a:	2300      	movne	r3, #0
 800099c:	2301      	moveq	r3, #1
 800099e:	2d00      	cmp	r5, #0
 80009a0:	bf08      	it	eq
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b98b      	cbnz	r3, 80009ca <prvAddCurrentTaskToDelayedList+0x62>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
 80009a6:	4434      	add	r4, r6

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
 80009ae:	42a6      	cmp	r6, r4
 80009b0:	d916      	bls.n	80009e0 <prvAddCurrentTaskToDelayedList+0x78>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80009b2:	4c15      	ldr	r4, [pc, #84]	; (8000a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80009b4:	6820      	ldr	r0, [r4, #0]
 80009b6:	2104      	movs	r1, #4
 80009b8:	f001 fc72 	bl	80022a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <prvAddCurrentTaskToDelayedList+0xa8>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	6821      	ldr	r1, [r4, #0]
 80009c2:	3104      	adds	r1, #4
 80009c4:	f7ff fe71 	bl	80006aa <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80009ca:	4c0f      	ldr	r4, [pc, #60]	; (8000a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80009cc:	6820      	ldr	r0, [r4, #0]
 80009ce:	211b      	movs	r1, #27
 80009d0:	f001 fc66 	bl	80022a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80009d4:	6821      	ldr	r1, [r4, #0]
 80009d6:	3104      	adds	r1, #4
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <prvAddCurrentTaskToDelayedList+0xac>)
 80009da:	f7ff fe5b 	bl	8000694 <vListInsertEnd>
 80009de:	e7f3      	b.n	80009c8 <prvAddCurrentTaskToDelayedList+0x60>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80009e0:	4d09      	ldr	r5, [pc, #36]	; (8000a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80009e2:	6828      	ldr	r0, [r5, #0]
 80009e4:	2104      	movs	r1, #4
 80009e6:	f001 fc5b 	bl	80022a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <prvAddCurrentTaskToDelayedList+0xb0>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	6829      	ldr	r1, [r5, #0]
 80009f0:	3104      	adds	r1, #4
 80009f2:	f7ff fe5a 	bl	80006aa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <prvAddCurrentTaskToDelayedList+0xb4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	42a3      	cmp	r3, r4
 80009fc:	d9e4      	bls.n	80009c8 <prvAddCurrentTaskToDelayedList+0x60>
                        xNextTaskUnblockTime = xTimeToWake;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000a00:	601c      	str	r4, [r3, #0]
}
 8000a02:	e7e1      	b.n	80009c8 <prvAddCurrentTaskToDelayedList+0x60>
 8000a04:	24000164 	.word	0x24000164
 8000a08:	24000040 	.word	0x24000040
 8000a0c:	240000e8 	.word	0x240000e8
 8000a10:	24000048 	.word	0x24000048
 8000a14:	2400013c 	.word	0x2400013c
 8000a18:	24000044 	.word	0x24000044
 8000a1c:	24000118 	.word	0x24000118

08000a20 <xTaskCreate>:
    {
 8000a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a24:	b085      	sub	sp, #20
 8000a26:	4607      	mov	r7, r0
 8000a28:	4688      	mov	r8, r1
 8000a2a:	4614      	mov	r4, r2
 8000a2c:	461e      	mov	r6, r3
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000a2e:	0090      	lsls	r0, r2, #2
 8000a30:	f000 fc04 	bl	800123c <pvPortMalloc>
                if( pxStack != NULL )
 8000a34:	b1f0      	cbz	r0, 8000a74 <xTaskCreate+0x54>
 8000a36:	4681      	mov	r9, r0
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000a38:	205c      	movs	r0, #92	; 0x5c
 8000a3a:	f000 fbff 	bl	800123c <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8000a3e:	4605      	mov	r5, r0
 8000a40:	b1a0      	cbz	r0, 8000a6c <xTaskCreate+0x4c>
                        pxNewTCB->pxStack = pxStack;
 8000a42:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
        if( pxNewTCB != NULL )
 8000a46:	b1d5      	cbz	r5, 8000a7e <xTaskCreate+0x5e>
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9303      	str	r3, [sp, #12]
 8000a4c:	9502      	str	r5, [sp, #8]
 8000a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	4633      	mov	r3, r6
 8000a58:	4622      	mov	r2, r4
 8000a5a:	4641      	mov	r1, r8
 8000a5c:	4638      	mov	r0, r7
 8000a5e:	f7ff fe6e 	bl	800073e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000a62:	4628      	mov	r0, r5
 8000a64:	f7ff fef2 	bl	800084c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000a68:	2001      	movs	r0, #1
 8000a6a:	e005      	b.n	8000a78 <xTaskCreate+0x58>
                        vPortFree( pxStack );
 8000a6c:	4648      	mov	r0, r9
 8000a6e:	f000 fc71 	bl	8001354 <vPortFree>
 8000a72:	e7e8      	b.n	8000a46 <xTaskCreate+0x26>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8000a78:	b005      	add	sp, #20
 8000a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000a7e:	f04f 30ff 	mov.w	r0, #4294967295
        return xReturn;
 8000a82:	e7f9      	b.n	8000a78 <xTaskCreate+0x58>

08000a84 <vTaskStartScheduler>:
{
 8000a84:	b500      	push	{lr}
 8000a86:	b083      	sub	sp, #12
            xReturn = xTaskCreate( prvIdleTask,
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <vTaskStartScheduler+0x88>)
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	491f      	ldr	r1, [pc, #124]	; (8000b10 <vTaskStartScheduler+0x8c>)
 8000a94:	481f      	ldr	r0, [pc, #124]	; (8000b14 <vTaskStartScheduler+0x90>)
 8000a96:	f7ff ffc3 	bl	8000a20 <xTaskCreate>
    if( xReturn == pdPASS )
 8000a9a:	2801      	cmp	r0, #1
 8000a9c:	d007      	beq.n	8000aae <vTaskStartScheduler+0x2a>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000a9e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000aa2:	d028      	beq.n	8000af6 <vTaskStartScheduler+0x72>
    ( void ) uxTopUsedPriority;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <vTaskStartScheduler+0x94>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	b003      	add	sp, #12
 8000aaa:	f85d fb04 	ldr.w	pc, [sp], #4

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ab2:	b672      	cpsid	i
 8000ab4:	f383 8811 	msr	BASEPRI, r3
 8000ab8:	f3bf 8f6f 	isb	sy
 8000abc:	f3bf 8f4f 	dsb	sy
 8000ac0:	b662      	cpsie	i
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <vTaskStartScheduler+0x98>)
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <vTaskStartScheduler+0x9c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <vTaskStartScheduler+0xa0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <vTaskStartScheduler+0xa4>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <vTaskStartScheduler+0x88>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d006      	beq.n	8000af0 <vTaskStartScheduler+0x6c>
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <vTaskStartScheduler+0xa4>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	f001 fb93 	bl	8002210 <SEGGER_SYSVIEW_OnTaskStartExec>
        if( xPortStartScheduler() != pdFALSE )
 8000aea:	f000 faa7 	bl	800103c <xPortStartScheduler>
 8000aee:	e7d9      	b.n	8000aa4 <vTaskStartScheduler+0x20>
        traceTASK_SWITCHED_IN();
 8000af0:	f001 fb56 	bl	80021a0 <SEGGER_SYSVIEW_OnIdle>
 8000af4:	e7f9      	b.n	8000aea <vTaskStartScheduler+0x66>
 8000af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000afa:	b672      	cpsid	i
 8000afc:	f383 8811 	msr	BASEPRI, r3
 8000b00:	f3bf 8f6f 	isb	sy
 8000b04:	f3bf 8f4f 	dsb	sy
 8000b08:	b662      	cpsie	i
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000b0a:	e7fe      	b.n	8000b0a <vTaskStartScheduler+0x86>
 8000b0c:	24000114 	.word	0x24000114
 8000b10:	08006990 	.word	0x08006990
 8000b14:	0800094d 	.word	0x0800094d
 8000b18:	24000000 	.word	0x24000000
 8000b1c:	24000118 	.word	0x24000118
 8000b20:	24000138 	.word	0x24000138
 8000b24:	24000164 	.word	0x24000164
 8000b28:	24000040 	.word	0x24000040

08000b2c <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8000b2c:	4a02      	ldr	r2, [pc, #8]	; (8000b38 <vTaskSuspendAll+0xc>)
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	240000e0 	.word	0x240000e0

08000b3c <xTaskGetTickCountFromISR>:
{
 8000b3c:	b508      	push	{r3, lr}
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b3e:	f000 fae7 	bl	8001110 <vPortValidateInterruptPriority>
        xReturn = xTickCount;
 8000b42:	4b01      	ldr	r3, [pc, #4]	; (8000b48 <xTaskGetTickCountFromISR+0xc>)
 8000b44:	6818      	ldr	r0, [r3, #0]
}
 8000b46:	bd08      	pop	{r3, pc}
 8000b48:	24000164 	.word	0x24000164

08000b4c <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b4c:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <xTaskIncrementTick+0xc8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d158      	bne.n	8000c06 <xTaskIncrementTick+0xba>
{
 8000b54:	b570      	push	{r4, r5, r6, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b56:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <xTaskIncrementTick+0xcc>)
 8000b58:	681d      	ldr	r5, [r3, #0]
 8000b5a:	3501      	adds	r5, #1
        xTickCount = xConstTickCount;
 8000b5c:	601d      	str	r5, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000b5e:	b9d5      	cbnz	r5, 8000b96 <xTaskIncrementTick+0x4a>
            taskSWITCH_DELAYED_LISTS();
 8000b60:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <xTaskIncrementTick+0xd0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b153      	cbz	r3, 8000b7e <xTaskIncrementTick+0x32>
 8000b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b6c:	b672      	cpsid	i
 8000b6e:	f383 8811 	msr	BASEPRI, r3
 8000b72:	f3bf 8f6f 	isb	sy
 8000b76:	f3bf 8f4f 	dsb	sy
 8000b7a:	b662      	cpsie	i
 8000b7c:	e7fe      	b.n	8000b7c <xTaskIncrementTick+0x30>
 8000b7e:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <xTaskIncrementTick+0xd0>)
 8000b80:	6811      	ldr	r1, [r2, #0]
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <xTaskIncrementTick+0xd4>)
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	6010      	str	r0, [r2, #0]
 8000b88:	6019      	str	r1, [r3, #0]
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <xTaskIncrementTick+0xd8>)
 8000b8c:	6813      	ldr	r3, [r2, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	f7ff fdb7 	bl	8000704 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <xTaskIncrementTick+0xdc>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	42ab      	cmp	r3, r5
 8000b9c:	d91b      	bls.n	8000bd6 <xTaskIncrementTick+0x8a>
}
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	bd70      	pop	{r4, r5, r6, pc}
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <xTaskIncrementTick+0xdc>)
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	601a      	str	r2, [r3, #0]
                    break;
 8000baa:	e7f8      	b.n	8000b9e <xTaskIncrementTick+0x52>
                        xNextTaskUnblockTime = xItemValue;
 8000bac:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <xTaskIncrementTick+0xdc>)
 8000bae:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000bb0:	e7f5      	b.n	8000b9e <xTaskIncrementTick+0x52>
                    prvAddTaskToReadyList( pxTCB );
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f001 fb50 	bl	8002258 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000bb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bba:	2201      	movs	r2, #1
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	491b      	ldr	r1, [pc, #108]	; (8000c2c <xTaskIncrementTick+0xe0>)
 8000bc0:	6808      	ldr	r0, [r1, #0]
 8000bc2:	4302      	orrs	r2, r0
 8000bc4:	600a      	str	r2, [r1, #0]
 8000bc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bca:	009a      	lsls	r2, r3, #2
 8000bcc:	4631      	mov	r1, r6
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <xTaskIncrementTick+0xe4>)
 8000bd0:	4410      	add	r0, r2
 8000bd2:	f7ff fd5f 	bl	8000694 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <xTaskIncrementTick+0xd0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0e0      	beq.n	8000ba2 <xTaskIncrementTick+0x56>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <xTaskIncrementTick+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	68dc      	ldr	r4, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000be8:	6863      	ldr	r3, [r4, #4]
                    if( xConstTickCount < xItemValue )
 8000bea:	429d      	cmp	r5, r3
 8000bec:	d3de      	bcc.n	8000bac <xTaskIncrementTick+0x60>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bee:	1d26      	adds	r6, r4, #4
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f7ff fd73 	bl	80006dc <uxListRemove>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0da      	beq.n	8000bb2 <xTaskIncrementTick+0x66>
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000bfc:	f104 0018 	add.w	r0, r4, #24
 8000c00:	f7ff fd6c 	bl	80006dc <uxListRemove>
 8000c04:	e7d5      	b.n	8000bb2 <xTaskIncrementTick+0x66>
        ++xPendedTicks;
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <xTaskIncrementTick+0xe8>)
 8000c08:	6813      	ldr	r3, [r2, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	2000      	movs	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	240000e0 	.word	0x240000e0
 8000c18:	24000164 	.word	0x24000164
 8000c1c:	24000044 	.word	0x24000044
 8000c20:	24000048 	.word	0x24000048
 8000c24:	2400011c 	.word	0x2400011c
 8000c28:	24000118 	.word	0x24000118
 8000c2c:	240000e8 	.word	0x240000e8
 8000c30:	2400004c 	.word	0x2400004c
 8000c34:	24000120 	.word	0x24000120

08000c38 <xTaskResumeAll>:
{
 8000c38:	b538      	push	{r3, r4, r5, lr}
    configASSERT( uxSchedulerSuspended );
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <xTaskResumeAll+0xc0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b953      	cbnz	r3, 8000c56 <xTaskResumeAll+0x1e>
 8000c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c44:	b672      	cpsid	i
 8000c46:	f383 8811 	msr	BASEPRI, r3
 8000c4a:	f3bf 8f6f 	isb	sy
 8000c4e:	f3bf 8f4f 	dsb	sy
 8000c52:	b662      	cpsie	i
 8000c54:	e7fe      	b.n	8000c54 <xTaskResumeAll+0x1c>
    taskENTER_CRITICAL();
 8000c56:	f000 f955 	bl	8000f04 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <xTaskResumeAll+0xc0>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	3a01      	subs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b913      	cbnz	r3, 8000c6c <xTaskResumeAll+0x34>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <xTaskResumeAll+0xc4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	b91b      	cbnz	r3, 8000c74 <xTaskResumeAll+0x3c>
    taskEXIT_CRITICAL();
 8000c6c:	f000 f970 	bl	8000f50 <vPortExitCritical>
}
 8000c70:	2000      	movs	r0, #0
 8000c72:	bd38      	pop	{r3, r4, r5, pc}
    TCB_t * pxTCB = NULL;
 8000c74:	2400      	movs	r4, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <xTaskResumeAll+0xc8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b333      	cbz	r3, 8000cca <xTaskResumeAll+0x92>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <xTaskResumeAll+0xc8>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	68dc      	ldr	r4, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c82:	f104 0018 	add.w	r0, r4, #24
 8000c86:	f7ff fd29 	bl	80006dc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c8a:	1d25      	adds	r5, r4, #4
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f7ff fd25 	bl	80006dc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000c92:	4620      	mov	r0, r4
 8000c94:	f001 fae0 	bl	8002258 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4083      	lsls	r3, r0
 8000c9e:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <xTaskResumeAll+0xcc>)
 8000ca0:	6811      	ldr	r1, [r2, #0]
 8000ca2:	430b      	orrs	r3, r1
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000caa:	4629      	mov	r1, r5
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <xTaskResumeAll+0xd0>)
 8000cae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000cb2:	f7ff fcef 	bl	8000694 <vListInsertEnd>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000cb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <xTaskResumeAll+0xd4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3d9      	bcc.n	8000c76 <xTaskResumeAll+0x3e>
                        xYieldPending = pdTRUE;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <xTaskResumeAll+0xd8>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	e7d5      	b.n	8000c76 <xTaskResumeAll+0x3e>
                if( pxTCB != NULL )
 8000cca:	b10c      	cbz	r4, 8000cd0 <xTaskResumeAll+0x98>
                    prvResetNextTaskUnblockTime();
 8000ccc:	f7ff fd1a 	bl	8000704 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <xTaskResumeAll+0xdc>)
 8000cd2:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8000cd4:	b924      	cbnz	r4, 8000ce0 <xTaskResumeAll+0xa8>
                if( xYieldPending != pdFALSE )
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <xTaskResumeAll+0xd8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	e7c7      	b.n	8000c6c <xTaskResumeAll+0x34>
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000cdc:	3c01      	subs	r4, #1
 8000cde:	d007      	beq.n	8000cf0 <xTaskResumeAll+0xb8>
                            if( xTaskIncrementTick() != pdFALSE )
 8000ce0:	f7ff ff34 	bl	8000b4c <xTaskIncrementTick>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d0f9      	beq.n	8000cdc <xTaskResumeAll+0xa4>
                                xYieldPending = pdTRUE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <xTaskResumeAll+0xd8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e7f5      	b.n	8000cdc <xTaskResumeAll+0xa4>
                        xPendedTicks = 0;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <xTaskResumeAll+0xdc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	e7ee      	b.n	8000cd6 <xTaskResumeAll+0x9e>
 8000cf8:	240000e0 	.word	0x240000e0
 8000cfc:	240000d8 	.word	0x240000d8
 8000d00:	24000124 	.word	0x24000124
 8000d04:	240000e8 	.word	0x240000e8
 8000d08:	2400004c 	.word	0x2400004c
 8000d0c:	24000040 	.word	0x24000040
 8000d10:	24000168 	.word	0x24000168
 8000d14:	24000120 	.word	0x24000120

08000d18 <vTaskDelay>:
    {
 8000d18:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000d1a:	b1d8      	cbz	r0, 8000d54 <vTaskDelay+0x3c>
 8000d1c:	4604      	mov	r4, r0
            configASSERT( uxSchedulerSuspended == 0 );
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <vTaskDelay+0x54>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b153      	cbz	r3, 8000d3a <vTaskDelay+0x22>
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	b672      	cpsid	i
 8000d2a:	f383 8811 	msr	BASEPRI, r3
 8000d2e:	f3bf 8f6f 	isb	sy
 8000d32:	f3bf 8f4f 	dsb	sy
 8000d36:	b662      	cpsie	i
 8000d38:	e7fe      	b.n	8000d38 <vTaskDelay+0x20>
            vTaskSuspendAll();
 8000d3a:	f7ff fef7 	bl	8000b2c <vTaskSuspendAll>
                traceTASK_DELAY();
 8000d3e:	4621      	mov	r1, r4
 8000d40:	2023      	movs	r0, #35	; 0x23
 8000d42:	f001 f8f3 	bl	8001f2c <SEGGER_SYSVIEW_RecordU32>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000d46:	2100      	movs	r1, #0
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f7ff fe0d 	bl	8000968 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8000d4e:	f7ff ff73 	bl	8000c38 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8000d52:	b948      	cbnz	r0, 8000d68 <vTaskDelay+0x50>
            portYIELD_WITHIN_API();
 8000d54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000d60:	f3bf 8f4f 	dsb	sy
 8000d64:	f3bf 8f6f 	isb	sy
    }
 8000d68:	bd10      	pop	{r4, pc}
 8000d6a:	bf00      	nop
 8000d6c:	240000e0 	.word	0x240000e0

08000d70 <vTaskSwitchContext>:
{
 8000d70:	b508      	push	{r3, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <vTaskSwitchContext+0xa0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	b11b      	cbz	r3, 8000d80 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <vTaskSwitchContext+0xa4>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
}
 8000d7e:	bd08      	pop	{r3, pc}
        xYieldPending = pdFALSE;
 8000d80:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <vTaskSwitchContext+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <vTaskSwitchContext+0xa8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000d8a:	fab3 f383 	clz	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f1c3 031f 	rsb	r3, r3, #31
 8000d94:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000d98:	008a      	lsls	r2, r1, #2
 8000d9a:	4920      	ldr	r1, [pc, #128]	; (8000e1c <vTaskSwitchContext+0xac>)
 8000d9c:	588a      	ldr	r2, [r1, r2]
 8000d9e:	b952      	cbnz	r2, 8000db6 <vTaskSwitchContext+0x46>
        __asm volatile
 8000da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da4:	b672      	cpsid	i
 8000da6:	f383 8811 	msr	BASEPRI, r3
 8000daa:	f3bf 8f6f 	isb	sy
 8000dae:	f3bf 8f4f 	dsb	sy
 8000db2:	b662      	cpsie	i
 8000db4:	e7fe      	b.n	8000db4 <vTaskSwitchContext+0x44>
 8000db6:	4919      	ldr	r1, [pc, #100]	; (8000e1c <vTaskSwitchContext+0xac>)
 8000db8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000dbc:	0082      	lsls	r2, r0, #2
 8000dbe:	440a      	add	r2, r1
 8000dc0:	6850      	ldr	r0, [r2, #4]
 8000dc2:	6840      	ldr	r0, [r0, #4]
 8000dc4:	6050      	str	r0, [r2, #4]
 8000dc6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8000dca:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8000dce:	3208      	adds	r2, #8
 8000dd0:	4411      	add	r1, r2
 8000dd2:	4288      	cmp	r0, r1
 8000dd4:	d012      	beq.n	8000dfc <vTaskSwitchContext+0x8c>
 8000dd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dda:	009a      	lsls	r2, r3, #2
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <vTaskSwitchContext+0xac>)
 8000dde:	4413      	add	r3, r2
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <vTaskSwitchContext+0xb0>)
 8000de6:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <vTaskSwitchContext+0xb4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d00b      	beq.n	8000e0a <vTaskSwitchContext+0x9a>
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <vTaskSwitchContext+0xb0>)
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	f001 fa0b 	bl	8002210 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000dfa:	e7c0      	b.n	8000d7e <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000dfc:	6840      	ldr	r0, [r0, #4]
 8000dfe:	4662      	mov	r2, ip
 8000e00:	0091      	lsls	r1, r2, #2
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <vTaskSwitchContext+0xac>)
 8000e04:	440a      	add	r2, r1
 8000e06:	6050      	str	r0, [r2, #4]
 8000e08:	e7e5      	b.n	8000dd6 <vTaskSwitchContext+0x66>
        traceTASK_SWITCHED_IN();
 8000e0a:	f001 f9c9 	bl	80021a0 <SEGGER_SYSVIEW_OnIdle>
 8000e0e:	e7b6      	b.n	8000d7e <vTaskSwitchContext+0xe>
 8000e10:	240000e0 	.word	0x240000e0
 8000e14:	24000168 	.word	0x24000168
 8000e18:	240000e8 	.word	0x240000e8
 8000e1c:	2400004c 	.word	0x2400004c
 8000e20:	24000040 	.word	0x24000040
 8000e24:	24000114 	.word	0x24000114

08000e28 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000e28:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9301      	str	r3, [sp, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <prvTaskExitError+0x44>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e36:	d00a      	beq.n	8000e4e <prvTaskExitError+0x26>
 8000e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3c:	b672      	cpsid	i
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	b662      	cpsie	i
 8000e4c:	e7fe      	b.n	8000e4c <prvTaskExitError+0x24>
 8000e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e52:	b672      	cpsid	i
 8000e54:	f383 8811 	msr	BASEPRI, r3
 8000e58:	f3bf 8f6f 	isb	sy
 8000e5c:	f3bf 8f4f 	dsb	sy
 8000e60:	b662      	cpsie	i
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000e62:	9b01      	ldr	r3, [sp, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0fc      	beq.n	8000e62 <prvTaskExitError+0x3a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000e68:	b002      	add	sp, #8
 8000e6a:	4770      	bx	lr
 8000e6c:	24000004 	.word	0x24000004

08000e70 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000e70:	4808      	ldr	r0, [pc, #32]	; (8000e94 <prvPortStartFirstTask+0x24>)
 8000e72:	6800      	ldr	r0, [r0, #0]
 8000e74:	6800      	ldr	r0, [r0, #0]
 8000e76:	f380 8808 	msr	MSP, r0
 8000e7a:	f04f 0000 	mov.w	r0, #0
 8000e7e:	f380 8814 	msr	CONTROL, r0
 8000e82:	b662      	cpsie	i
 8000e84:	b661      	cpsie	f
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	df00      	svc	0
 8000e90:	bf00      	nop
 8000e92:	0000      	.short	0x0000
 8000e94:	e000ed08 	.word	0xe000ed08

08000e98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000e98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000ea8 <vPortEnableVFP+0x10>
 8000e9c:	6801      	ldr	r1, [r0, #0]
 8000e9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ea2:	6001      	str	r1, [r0, #0]
 8000ea4:	4770      	bx	lr
 8000ea6:	0000      	.short	0x0000
 8000ea8:	e000ed88 	.word	0xe000ed88

08000eac <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb0:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000eb4:	f021 0101 	bic.w	r1, r1, #1
 8000eb8:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <pxPortInitialiseStack+0x28>)
 8000ebe:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000ec2:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000ec6:	f06f 0302 	mvn.w	r3, #2
 8000eca:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8000ece:	3844      	subs	r0, #68	; 0x44
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	08000e29 	.word	0x08000e29
	...

08000ee0 <SVC_Handler>:
    __asm volatile (
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <pxCurrentTCBConst2>)
 8000ee2:	6819      	ldr	r1, [r3, #0]
 8000ee4:	6808      	ldr	r0, [r1, #0]
 8000ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eea:	f380 8809 	msr	PSP, r0
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	f380 8811 	msr	BASEPRI, r0
 8000efa:	4770      	bx	lr
 8000efc:	f3af 8000 	nop.w

08000f00 <pxCurrentTCBConst2>:
 8000f00:	24000040 	.word	0x24000040

08000f04 <vPortEnterCritical>:
 8000f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f08:	b672      	cpsid	i
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
 8000f12:	f3bf 8f4f 	dsb	sy
 8000f16:	b662      	cpsie	i
    uxCriticalNesting++;
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <vPortEnterCritical+0x48>)
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d000      	beq.n	8000f26 <vPortEnterCritical+0x22>
}
 8000f24:	4770      	bx	lr
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000f26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000f2a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8000f2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000f32:	d0f7      	beq.n	8000f24 <vPortEnterCritical+0x20>
 8000f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f38:	b672      	cpsid	i
 8000f3a:	f383 8811 	msr	BASEPRI, r3
 8000f3e:	f3bf 8f6f 	isb	sy
 8000f42:	f3bf 8f4f 	dsb	sy
 8000f46:	b662      	cpsie	i
 8000f48:	e7fe      	b.n	8000f48 <vPortEnterCritical+0x44>
 8000f4a:	bf00      	nop
 8000f4c:	24000004 	.word	0x24000004

08000f50 <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <vPortExitCritical+0x2c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b953      	cbnz	r3, 8000f6c <vPortExitCritical+0x1c>
 8000f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f5a:	b672      	cpsid	i
 8000f5c:	f383 8811 	msr	BASEPRI, r3
 8000f60:	f3bf 8f6f 	isb	sy
 8000f64:	f3bf 8f4f 	dsb	sy
 8000f68:	b662      	cpsie	i
 8000f6a:	e7fe      	b.n	8000f6a <vPortExitCritical+0x1a>
    uxCriticalNesting--;
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <vPortExitCritical+0x2c>)
 8000f70:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8000f72:	b90b      	cbnz	r3, 8000f78 <vPortExitCritical+0x28>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000f74:	f383 8811 	msr	BASEPRI, r3
}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	24000004 	.word	0x24000004

08000f80 <PendSV_Handler>:
    __asm volatile
 8000f80:	f3ef 8009 	mrs	r0, PSP
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <pxCurrentTCBConst>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	f01e 0f10 	tst.w	lr, #16
 8000f90:	bf08      	it	eq
 8000f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f9a:	6010      	str	r0, [r2, #0]
 8000f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000fa4:	b672      	cpsid	i
 8000fa6:	f380 8811 	msr	BASEPRI, r0
 8000faa:	f3bf 8f4f 	dsb	sy
 8000fae:	f3bf 8f6f 	isb	sy
 8000fb2:	b662      	cpsie	i
 8000fb4:	f7ff fedc 	bl	8000d70 <vTaskSwitchContext>
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	f380 8811 	msr	BASEPRI, r0
 8000fc0:	bc09      	pop	{r0, r3}
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	6808      	ldr	r0, [r1, #0]
 8000fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fca:	f01e 0f10 	tst.w	lr, #16
 8000fce:	bf08      	it	eq
 8000fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000fd4:	f380 8809 	msr	PSP, r0
 8000fd8:	f3bf 8f6f 	isb	sy
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <pxCurrentTCBConst>:
 8000fe0:	24000040 	.word	0x24000040

08000fe4 <SysTick_Handler>:
{
 8000fe4:	b508      	push	{r3, lr}
        __asm volatile
 8000fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fea:	b672      	cpsid	i
 8000fec:	f383 8811 	msr	BASEPRI, r3
 8000ff0:	f3bf 8f6f 	isb	sy
 8000ff4:	f3bf 8f4f 	dsb	sy
 8000ff8:	b662      	cpsie	i
        if( xTaskIncrementTick() != pdFALSE )
 8000ffa:	f7ff fda7 	bl	8000b4c <xTaskIncrementTick>
 8000ffe:	b128      	cbz	r0, 800100c <SysTick_Handler+0x28>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001000:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001008:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
 800100c:	2300      	movs	r3, #0
 800100e:	f383 8811 	msr	BASEPRI, r3
}
 8001012:	bd08      	pop	{r3, pc}

08001014 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001014:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001018:	2300      	movs	r3, #0
 800101a:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800101c:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <vPortSetupTimerInterrupt+0x20>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4905      	ldr	r1, [pc, #20]	; (8001038 <vPortSetupTimerInterrupt+0x24>)
 8001024:	fba1 1303 	umull	r1, r3, r1, r3
 8001028:	099b      	lsrs	r3, r3, #6
 800102a:	3b01      	subs	r3, #1
 800102c:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800102e:	2307      	movs	r3, #7
 8001030:	6113      	str	r3, [r2, #16]
}
 8001032:	4770      	bx	lr
 8001034:	24000014 	.word	0x24000014
 8001038:	10624dd3 	.word	0x10624dd3

0800103c <xPortStartScheduler>:
{
 800103c:	b530      	push	{r4, r5, lr}
 800103e:	b083      	sub	sp, #12
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <xPortStartScheduler+0xc4>)
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	9201      	str	r2, [sp, #4]
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	701a      	strb	r2, [r3, #0]
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f88d 3003 	strb.w	r3, [sp, #3]
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001054:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001058:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800105c:	4a29      	ldr	r2, [pc, #164]	; (8001104 <xPortStartScheduler+0xc8>)
 800105e:	7013      	strb	r3, [r2, #0]
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <xPortStartScheduler+0xcc>)
 8001062:	2207      	movs	r2, #7
 8001064:	601a      	str	r2, [r3, #0]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001066:	e009      	b.n	800107c <xPortStartScheduler+0x40>
                ulMaxPRIGROUPValue--;
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <xPortStartScheduler+0xcc>)
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	3b01      	subs	r3, #1
 800106e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001070:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f88d 3003 	strb.w	r3, [sp, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800107c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001080:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001084:	d1f0      	bne.n	8001068 <xPortStartScheduler+0x2c>
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <xPortStartScheduler+0xcc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d00a      	beq.n	80010a4 <xPortStartScheduler+0x68>
        __asm volatile
 800108e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001092:	b672      	cpsid	i
 8001094:	f383 8811 	msr	BASEPRI, r3
 8001098:	f3bf 8f6f 	isb	sy
 800109c:	f3bf 8f4f 	dsb	sy
 80010a0:	b662      	cpsie	i
 80010a2:	e7fe      	b.n	80010a2 <xPortStartScheduler+0x66>
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <xPortStartScheduler+0xcc>)
 80010a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80010aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010ae:	6013      	str	r3, [r2, #0]
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80010b0:	9b01      	ldr	r3, [sp, #4]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <xPortStartScheduler+0xc4>)
 80010b6:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80010b8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 80010bc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80010c8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80010cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80010d0:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 80010d4:	f7ff ff9e 	bl	8001014 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 80010d8:	2500      	movs	r5, #0
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <xPortStartScheduler+0xd0>)
 80010dc:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 80010de:	f7ff fedb 	bl	8000e98 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80010e2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80010e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80010ea:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
    prvPortStartFirstTask();
 80010ee:	f7ff febf 	bl	8000e70 <prvPortStartFirstTask>
    vTaskSwitchContext();
 80010f2:	f7ff fe3d 	bl	8000d70 <vTaskSwitchContext>
    prvTaskExitError();
 80010f6:	f7ff fe97 	bl	8000e28 <prvTaskExitError>
}
 80010fa:	4628      	mov	r0, r5
 80010fc:	b003      	add	sp, #12
 80010fe:	bd30      	pop	{r4, r5, pc}
 8001100:	e000e400 	.word	0xe000e400
 8001104:	2400016c 	.word	0x2400016c
 8001108:	24000170 	.word	0x24000170
 800110c:	24000004 	.word	0x24000004

08001110 <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001110:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d911      	bls.n	800113c <vPortValidateInterruptPriority+0x2c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <vPortValidateInterruptPriority+0x58>)
 800111a:	5c9b      	ldrb	r3, [r3, r2]
 800111c:	b2db      	uxtb	r3, r3
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <vPortValidateInterruptPriority+0x5c>)
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d90a      	bls.n	800113c <vPortValidateInterruptPriority+0x2c>
 8001126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112a:	b672      	cpsid	i
 800112c:	f383 8811 	msr	BASEPRI, r3
 8001130:	f3bf 8f6f 	isb	sy
 8001134:	f3bf 8f4f 	dsb	sy
 8001138:	b662      	cpsie	i
 800113a:	e7fe      	b.n	800113a <vPortValidateInterruptPriority+0x2a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800113c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001140:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8001144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001148:	4a09      	ldr	r2, [pc, #36]	; (8001170 <vPortValidateInterruptPriority+0x60>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	4293      	cmp	r3, r2
 800114e:	d90a      	bls.n	8001166 <vPortValidateInterruptPriority+0x56>
 8001150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001154:	b672      	cpsid	i
 8001156:	f383 8811 	msr	BASEPRI, r3
 800115a:	f3bf 8f6f 	isb	sy
 800115e:	f3bf 8f4f 	dsb	sy
 8001162:	b662      	cpsie	i
 8001164:	e7fe      	b.n	8001164 <vPortValidateInterruptPriority+0x54>
    }
 8001166:	4770      	bx	lr
 8001168:	e000e3f0 	.word	0xe000e3f0
 800116c:	2400016c 	.word	0x2400016c
 8001170:	24000170 	.word	0x24000170

08001174 <prvHeapInit>:
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <prvHeapInit+0x4c>)

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001176:	f012 0f07 	tst.w	r2, #7
 800117a:	d01e      	beq.n	80011ba <prvHeapInit+0x46>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800117c:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800117e:	f021 0107 	bic.w	r1, r1, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001182:	f5c1 43a0 	rsb	r3, r1, #20480	; 0x5000
 8001186:	4413      	add	r3, r2
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001188:	460a      	mov	r2, r1

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <prvHeapInit+0x50>)
 800118c:	6002      	str	r2, [r0, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800118e:	2100      	movs	r1, #0
 8001190:	6041      	str	r1, [r0, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001192:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8001194:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001196:	f023 0307 	bic.w	r3, r3, #7
    pxEnd = ( void * ) uxAddress;
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <prvHeapInit+0x54>)
 800119c:	6003      	str	r3, [r0, #0]
    pxEnd->xBlockSize = 0;
 800119e:	6059      	str	r1, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80011a0:	6019      	str	r1, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80011a2:	1a99      	subs	r1, r3, r2
 80011a4:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80011a6:	6013      	str	r3, [r2, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <prvHeapInit+0x58>)
 80011aa:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <prvHeapInit+0x5c>)
 80011ae:	6019      	str	r1, [r3, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <prvHeapInit+0x60>)
 80011b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	4770      	bx	lr
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80011ba:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80011be:	e7e4      	b.n	800118a <prvHeapInit+0x16>
 80011c0:	24000178 	.word	0x24000178
 80011c4:	2400518c 	.word	0x2400518c
 80011c8:	24000174 	.word	0x24000174
 80011cc:	24005180 	.word	0x24005180
 80011d0:	2400517c 	.word	0x2400517c
 80011d4:	24005178 	.word	0x24005178

080011d8 <prvInsertBlockIntoFreeList>:
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <prvInsertBlockIntoFreeList+0x5c>)
 80011da:	461a      	mov	r2, r3
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4283      	cmp	r3, r0
 80011e0:	d3fb      	bcc.n	80011da <prvInsertBlockIntoFreeList+0x2>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80011e2:	6851      	ldr	r1, [r2, #4]
 80011e4:	eb02 0c01 	add.w	ip, r2, r1
 80011e8:	4584      	cmp	ip, r0
 80011ea:	d009      	beq.n	8001200 <prvInsertBlockIntoFreeList+0x28>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80011ec:	6841      	ldr	r1, [r0, #4]
 80011ee:	eb00 0c01 	add.w	ip, r0, r1
 80011f2:	4563      	cmp	r3, ip
 80011f4:	d009      	beq.n	800120a <prvInsertBlockIntoFreeList+0x32>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80011f6:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80011f8:	4290      	cmp	r0, r2
 80011fa:	d019      	beq.n	8001230 <prvInsertBlockIntoFreeList+0x58>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80011fc:	6010      	str	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
 80011fe:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001200:	6840      	ldr	r0, [r0, #4]
 8001202:	4401      	add	r1, r0
 8001204:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8001206:	4610      	mov	r0, r2
 8001208:	e7f0      	b.n	80011ec <prvInsertBlockIntoFreeList+0x14>
{
 800120a:	b410      	push	{r4}
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800120c:	4c0a      	ldr	r4, [pc, #40]	; (8001238 <prvInsertBlockIntoFreeList+0x60>)
 800120e:	6824      	ldr	r4, [r4, #0]
 8001210:	42a3      	cmp	r3, r4
 8001212:	d00b      	beq.n	800122c <prvInsertBlockIntoFreeList+0x54>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4419      	add	r1, r3
 8001218:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6003      	str	r3, [r0, #0]
    if( pxIterator != pxBlockToInsert )
 8001220:	4290      	cmp	r0, r2
 8001222:	d000      	beq.n	8001226 <prvInsertBlockIntoFreeList+0x4e>
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001224:	6010      	str	r0, [r2, #0]
    }
}
 8001226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800122a:	4770      	bx	lr
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800122c:	6004      	str	r4, [r0, #0]
 800122e:	e7f7      	b.n	8001220 <prvInsertBlockIntoFreeList+0x48>
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2400518c 	.word	0x2400518c
 8001238:	24000174 	.word	0x24000174

0800123c <pvPortMalloc>:
{
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	4604      	mov	r4, r0
    vTaskSuspendAll();
 8001240:	f7ff fc74 	bl	8000b2c <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001244:	4b3d      	ldr	r3, [pc, #244]	; (800133c <pvPortMalloc+0x100>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	b1db      	cbz	r3, 8001282 <pvPortMalloc+0x46>
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <pvPortMalloc+0x104>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	421c      	tst	r4, r3
 8001250:	d157      	bne.n	8001302 <pvPortMalloc+0xc6>
            if( ( xWantedSize > 0 ) && 
 8001252:	1e63      	subs	r3, r4, #1
 8001254:	f113 0f0a 	cmn.w	r3, #10
 8001258:	d855      	bhi.n	8001306 <pvPortMalloc+0xca>
                xWantedSize += xHeapStructSize;
 800125a:	f104 0208 	add.w	r2, r4, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800125e:	f014 0f07 	tst.w	r4, #7
 8001262:	d005      	beq.n	8001270 <pvPortMalloc+0x34>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001264:	f022 0307 	bic.w	r3, r2, #7
 8001268:	3308      	adds	r3, #8
 800126a:	4293      	cmp	r3, r2
 800126c:	d95c      	bls.n	8001328 <pvPortMalloc+0xec>
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800126e:	461a      	mov	r2, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001270:	2a00      	cmp	r2, #0
 8001272:	d05b      	beq.n	800132c <pvPortMalloc+0xf0>
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <pvPortMalloc+0x108>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4293      	cmp	r3, r2
 800127a:	d359      	bcc.n	8001330 <pvPortMalloc+0xf4>
                pxBlock = xStart.pxNextFreeBlock;
 800127c:	4932      	ldr	r1, [pc, #200]	; (8001348 <pvPortMalloc+0x10c>)
 800127e:	680c      	ldr	r4, [r1, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001280:	e004      	b.n	800128c <pvPortMalloc+0x50>
            prvHeapInit();
 8001282:	f7ff ff77 	bl	8001174 <prvHeapInit>
 8001286:	e7e0      	b.n	800124a <pvPortMalloc+0xe>
                    pxPreviousBlock = pxBlock;
 8001288:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 800128a:	461c      	mov	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	4293      	cmp	r3, r2
 8001290:	d202      	bcs.n	8001298 <pvPortMalloc+0x5c>
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f7      	bne.n	8001288 <pvPortMalloc+0x4c>
                if( pxBlock != pxEnd )
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <pvPortMalloc+0x100>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	42a3      	cmp	r3, r4
 800129e:	d049      	beq.n	8001334 <pvPortMalloc+0xf8>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80012a0:	680d      	ldr	r5, [r1, #0]
 80012a2:	3508      	adds	r5, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	600b      	str	r3, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80012a8:	6863      	ldr	r3, [r4, #4]
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	2b10      	cmp	r3, #16
 80012ae:	d912      	bls.n	80012d6 <pvPortMalloc+0x9a>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80012b0:	18a0      	adds	r0, r4, r2
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80012b2:	f010 0f07 	tst.w	r0, #7
 80012b6:	d00a      	beq.n	80012ce <pvPortMalloc+0x92>
 80012b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012bc:	b672      	cpsid	i
 80012be:	f383 8811 	msr	BASEPRI, r3
 80012c2:	f3bf 8f6f 	isb	sy
 80012c6:	f3bf 8f4f 	dsb	sy
 80012ca:	b662      	cpsie	i
 80012cc:	e7fe      	b.n	80012cc <pvPortMalloc+0x90>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80012ce:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80012d0:	6062      	str	r2, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80012d2:	f7ff ff81 	bl	80011d8 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80012d6:	6862      	ldr	r2, [r4, #4]
 80012d8:	491a      	ldr	r1, [pc, #104]	; (8001344 <pvPortMalloc+0x108>)
 80012da:	680b      	ldr	r3, [r1, #0]
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	600b      	str	r3, [r1, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80012e0:	491a      	ldr	r1, [pc, #104]	; (800134c <pvPortMalloc+0x110>)
 80012e2:	6809      	ldr	r1, [r1, #0]
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d201      	bcs.n	80012ec <pvPortMalloc+0xb0>
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80012e8:	4918      	ldr	r1, [pc, #96]	; (800134c <pvPortMalloc+0x110>)
 80012ea:	600b      	str	r3, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <pvPortMalloc+0x104>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	6063      	str	r3, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 80012f8:	4a15      	ldr	r2, [pc, #84]	; (8001350 <pvPortMalloc+0x114>)
 80012fa:	6813      	ldr	r3, [r2, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e002      	b.n	8001308 <pvPortMalloc+0xcc>
    void * pvReturn = NULL;
 8001302:	2500      	movs	r5, #0
 8001304:	e000      	b.n	8001308 <pvPortMalloc+0xcc>
 8001306:	2500      	movs	r5, #0
    ( void ) xTaskResumeAll();
 8001308:	f7ff fc96 	bl	8000c38 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800130c:	f015 0f07 	tst.w	r5, #7
 8001310:	d012      	beq.n	8001338 <pvPortMalloc+0xfc>
 8001312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001316:	b672      	cpsid	i
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	f3bf 8f6f 	isb	sy
 8001320:	f3bf 8f4f 	dsb	sy
 8001324:	b662      	cpsie	i
 8001326:	e7fe      	b.n	8001326 <pvPortMalloc+0xea>
    void * pvReturn = NULL;
 8001328:	2500      	movs	r5, #0
 800132a:	e7ed      	b.n	8001308 <pvPortMalloc+0xcc>
 800132c:	2500      	movs	r5, #0
 800132e:	e7eb      	b.n	8001308 <pvPortMalloc+0xcc>
 8001330:	2500      	movs	r5, #0
 8001332:	e7e9      	b.n	8001308 <pvPortMalloc+0xcc>
 8001334:	2500      	movs	r5, #0
 8001336:	e7e7      	b.n	8001308 <pvPortMalloc+0xcc>
}
 8001338:	4628      	mov	r0, r5
 800133a:	bd38      	pop	{r3, r4, r5, pc}
 800133c:	24000174 	.word	0x24000174
 8001340:	24005178 	.word	0x24005178
 8001344:	2400517c 	.word	0x2400517c
 8001348:	2400518c 	.word	0x2400518c
 800134c:	24005180 	.word	0x24005180
 8001350:	24005184 	.word	0x24005184

08001354 <vPortFree>:
    if( pv != NULL )
 8001354:	2800      	cmp	r0, #0
 8001356:	d038      	beq.n	80013ca <vPortFree+0x76>
{
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4604      	mov	r4, r0
        puc -= xHeapStructSize;
 800135c:	f1a0 0508 	sub.w	r5, r0, #8
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001360:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <vPortFree+0x78>)
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	4213      	tst	r3, r2
 800136a:	d10a      	bne.n	8001382 <vPortFree+0x2e>
 800136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001370:	b672      	cpsid	i
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	b662      	cpsie	i
 8001380:	e7fe      	b.n	8001380 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001382:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001386:	b151      	cbz	r1, 800139e <vPortFree+0x4a>
 8001388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800138c:	b672      	cpsid	i
 800138e:	f383 8811 	msr	BASEPRI, r3
 8001392:	f3bf 8f6f 	isb	sy
 8001396:	f3bf 8f4f 	dsb	sy
 800139a:	b662      	cpsie	i
 800139c:	e7fe      	b.n	800139c <vPortFree+0x48>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800139e:	ea23 0302 	bic.w	r3, r3, r2
 80013a2:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 80013a6:	f7ff fbc1 	bl	8000b2c <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80013aa:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <vPortFree+0x7c>)
 80013b0:	6813      	ldr	r3, [r2, #0]
 80013b2:	440b      	add	r3, r1
 80013b4:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80013b6:	4628      	mov	r0, r5
 80013b8:	f7ff ff0e 	bl	80011d8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80013bc:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <vPortFree+0x80>)
 80013be:	6813      	ldr	r3, [r2, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 80013c4:	f7ff fc38 	bl	8000c38 <xTaskResumeAll>
}
 80013c8:	bd38      	pop	{r3, r4, r5, pc}
 80013ca:	4770      	bx	lr
 80013cc:	24005178 	.word	0x24005178
 80013d0:	2400517c 	.word	0x2400517c
 80013d4:	24005188 	.word	0x24005188

080013d8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80013d8:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <_cbSendSystemDesc+0x10>)
 80013dc:	f000 fec6 	bl	800216c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <_cbSendSystemDesc+0x14>)
 80013e2:	f000 fec3 	bl	800216c <SEGGER_SYSVIEW_SendSysDesc>
}
 80013e6:	bd08      	pop	{r3, pc}
 80013e8:	08006998 	.word	0x08006998
 80013ec:	080069c8 	.word	0x080069c8

080013f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80013f0:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <SEGGER_SYSVIEW_Conf+0x1c>)
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SEGGER_SYSVIEW_Conf+0x20>)
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <SEGGER_SYSVIEW_Conf+0x24>)
 80013fa:	4601      	mov	r1, r0
 80013fc:	f000 fbde 	bl	8001bbc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001400:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001404:	f000 fc10 	bl	8001c28 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001408:	bd08      	pop	{r3, pc}
 800140a:	bf00      	nop
 800140c:	24000014 	.word	0x24000014
 8001410:	080013d9 	.word	0x080013d9
 8001414:	08006a28 	.word	0x08006a28

08001418 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001418:	b508      	push	{r3, lr}
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800141a:	f7ff fb8f 	bl	8000b3c <xTaskGetTickCountFromISR>
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800141e:	0ec3      	lsrs	r3, r0, #27
 8001420:	0141      	lsls	r1, r0, #5
 8001422:	1a09      	subs	r1, r1, r0
 8001424:	f163 0300 	sbc.w	r3, r3, #0
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800142e:	0089      	lsls	r1, r1, #2
 8001430:	1809      	adds	r1, r1, r0
 8001432:	f143 0300 	adc.w	r3, r3, #0
 8001436:	00db      	lsls	r3, r3, #3
  return Time;
}
 8001438:	00c8      	lsls	r0, r1, #3
 800143a:	ea43 7151 	orr.w	r1, r3, r1, lsr #29
 800143e:	bd08      	pop	{r3, pc}

08001440 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001440:	b510      	push	{r4, lr}
 8001442:	b086      	sub	sp, #24
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001444:	2400      	movs	r4, #0
 8001446:	9401      	str	r4, [sp, #4]
 8001448:	9402      	str	r4, [sp, #8]
 800144a:	9403      	str	r4, [sp, #12]
 800144c:	9404      	str	r4, [sp, #16]
 800144e:	9405      	str	r4, [sp, #20]
  TaskInfo.TaskID     = TaskID;
 8001450:	9001      	str	r0, [sp, #4]
  TaskInfo.sName      = sName;
 8001452:	9102      	str	r1, [sp, #8]
  TaskInfo.Prio       = Prio;
 8001454:	9203      	str	r2, [sp, #12]
  TaskInfo.StackBase  = StackBase;
 8001456:	9304      	str	r3, [sp, #16]
  TaskInfo.StackSize  = StackSize;
 8001458:	9b08      	ldr	r3, [sp, #32]
 800145a:	9305      	str	r3, [sp, #20]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800145c:	a801      	add	r0, sp, #4
 800145e:	f000 fe23 	bl	80020a8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001462:	b006      	add	sp, #24
 8001464:	bd10      	pop	{r4, pc}
	...

08001468 <SYSVIEW_AddTask>:
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	4605      	mov	r5, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4616      	mov	r6, r2
 8001472:	461f      	mov	r7, r3
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001474:	2205      	movs	r2, #5
 8001476:	4913      	ldr	r1, [pc, #76]	; (80014c4 <SYSVIEW_AddTask+0x5c>)
 8001478:	4620      	mov	r0, r4
 800147a:	f005 fa31 	bl	80068e0 <memcmp>
 800147e:	b1d0      	cbz	r0, 80014b6 <SYSVIEW_AddTask+0x4e>
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <SYSVIEW_AddTask+0x60>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2a07      	cmp	r2, #7
 8001486:	d818      	bhi.n	80014ba <SYSVIEW_AddTask+0x52>
  _aTasks[_NumTasks].xHandle = xHandle;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <SYSVIEW_AddTask+0x64>)
 800148a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800148e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8001492:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001496:	604c      	str	r4, [r1, #4]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001498:	608e      	str	r6, [r1, #8]
  _aTasks[_NumTasks].pxStack = pxStack;
 800149a:	60cf      	str	r7, [r1, #12]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800149c:	9b08      	ldr	r3, [sp, #32]
 800149e:	610b      	str	r3, [r1, #16]
  _NumTasks++;
 80014a0:	3201      	adds	r2, #1
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <SYSVIEW_AddTask+0x60>)
 80014a4:	601a      	str	r2, [r3, #0]
  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80014a6:	9b08      	ldr	r3, [sp, #32]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	463b      	mov	r3, r7
 80014ac:	4632      	mov	r2, r6
 80014ae:	4621      	mov	r1, r4
 80014b0:	4628      	mov	r0, r5
 80014b2:	f7ff ffc5 	bl	8001440 <SYSVIEW_SendTaskInfo>
}
 80014b6:	b003      	add	sp, #12
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <SYSVIEW_AddTask+0x68>)
 80014bc:	f001 f952 	bl	8002764 <SEGGER_SYSVIEW_Warn>
    return;
 80014c0:	e7f9      	b.n	80014b6 <SYSVIEW_AddTask+0x4e>
 80014c2:	bf00      	nop
 80014c4:	08006990 	.word	0x08006990
 80014c8:	24005194 	.word	0x24005194
 80014cc:	24005198 	.word	0x24005198
 80014d0:	080069d8 	.word	0x080069d8

080014d4 <_cbSendTaskList>:
static void _cbSendTaskList(void) {
 80014d4:	b530      	push	{r4, r5, lr}
 80014d6:	b083      	sub	sp, #12
  for (n = 0; n < _NumTasks; n++) {
 80014d8:	2400      	movs	r4, #0
 80014da:	e00d      	b.n	80014f8 <_cbSendTaskList+0x24>
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80014dc:	4d09      	ldr	r5, [pc, #36]	; (8001504 <_cbSendTaskList+0x30>)
 80014de:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80014e2:	0098      	lsls	r0, r3, #2
 80014e4:	1829      	adds	r1, r5, r0
 80014e6:	690b      	ldr	r3, [r1, #16]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	68cb      	ldr	r3, [r1, #12]
 80014ec:	688a      	ldr	r2, [r1, #8]
 80014ee:	6849      	ldr	r1, [r1, #4]
 80014f0:	5828      	ldr	r0, [r5, r0]
 80014f2:	f7ff ffa5 	bl	8001440 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80014f6:	3401      	adds	r4, #1
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <_cbSendTaskList+0x34>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	42a3      	cmp	r3, r4
 80014fe:	d8ed      	bhi.n	80014dc <_cbSendTaskList+0x8>
}
 8001500:	b003      	add	sp, #12
 8001502:	bd30      	pop	{r4, r5, pc}
 8001504:	24005198 	.word	0x24005198
 8001508:	24005194 	.word	0x24005194

0800150c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800150c:	b508      	push	{r3, lr}
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800150e:	f001 f949 	bl	80027a4 <SEGGER_SYSVIEW_IsStarted>
  if (r == 0) {
 8001512:	b100      	cbz	r0, 8001516 <_StartSysView+0xa>
    SEGGER_SYSVIEW_Start();
  }
}
 8001514:	bd08      	pop	{r3, pc}
    SEGGER_SYSVIEW_Start();
 8001516:	f000 fbc9 	bl	8001cac <SEGGER_SYSVIEW_Start>
}
 800151a:	e7fb      	b.n	8001514 <_StartSysView+0x8>

0800151c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800151c:	b500      	push	{lr}
 800151e:	b083      	sub	sp, #12
 8001520:	f88d 0007 	strb.w	r0, [sp, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <_cbOnUARTRx+0x30>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d805      	bhi.n	8001538 <_cbOnUARTRx+0x1c>
    _SVInfo.NumBytesHelloRcvd++;
 800152c:	3301      	adds	r3, #1
 800152e:	4a07      	ldr	r2, [pc, #28]	; (800154c <_cbOnUARTRx+0x30>)
 8001530:	7013      	strb	r3, [r2, #0]
  }
  _StartSysView();
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
Done:
  return;
}
 8001532:	b003      	add	sp, #12
 8001534:	f85d fb04 	ldr.w	pc, [sp], #4
  _StartSysView();
 8001538:	f7ff ffe8 	bl	800150c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800153c:	2201      	movs	r2, #1
 800153e:	f10d 0107 	add.w	r1, sp, #7
 8001542:	4b02      	ldr	r3, [pc, #8]	; (800154c <_cbOnUARTRx+0x30>)
 8001544:	6858      	ldr	r0, [r3, #4]
 8001546:	f000 fa2f 	bl	80019a8 <SEGGER_RTT_WriteDownBuffer>
  return;
 800154a:	e7f2      	b.n	8001532 <_cbOnUARTRx+0x16>
 800154c:	24000008 	.word	0x24000008

08001550 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8001550:	b508      	push	{r3, lr}
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <_cbOnUARTTx+0x30>)
 8001554:	785b      	ldrb	r3, [r3, #1]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d807      	bhi.n	800156a <_cbOnUARTTx+0x1a>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <_cbOnUARTTx+0x34>)
 800155c:	5cd2      	ldrb	r2, [r2, r3]
 800155e:	7002      	strb	r2, [r0, #0]
    _SVInfo.NumBytesHelloSent++;
 8001560:	3301      	adds	r3, #1
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <_cbOnUARTTx+0x30>)
 8001564:	7053      	strb	r3, [r2, #1]
    r = 1;
 8001566:	2001      	movs	r0, #1
  if (r < 0) {  // Failed to read from up buffer?
    r = 0;
  }
Done:
  return r;
}
 8001568:	bd08      	pop	{r3, pc}
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	4601      	mov	r1, r0
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <_cbOnUARTTx+0x30>)
 8001570:	6858      	ldr	r0, [r3, #4]
 8001572:	f000 f941 	bl	80017f8 <SEGGER_RTT_ReadUpBufferNoLock>
  if (r < 0) {  // Failed to read from up buffer?
 8001576:	2800      	cmp	r0, #0
 8001578:	daf6      	bge.n	8001568 <_cbOnUARTTx+0x18>
    r = 0;
 800157a:	2000      	movs	r0, #0
  return r;
 800157c:	e7f4      	b.n	8001568 <_cbOnUARTTx+0x18>
 800157e:	bf00      	nop
 8001580:	24000008 	.word	0x24000008
 8001584:	08006a30 	.word	0x08006a30

08001588 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001588:	b510      	push	{r4, lr}
 800158a:	b082      	sub	sp, #8
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800158c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001590:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001594:	f014 0f20 	tst.w	r4, #32
 8001598:	d00b      	beq.n	80015b2 <USART2_IRQHandler+0x2a>
    v = USART_RDR;                                      // Read data
 800159a:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 800159e:	b2c0      	uxtb	r0, r0
 80015a0:	f88d 0007 	strb.w	r0, [sp, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80015a4:	f014 0f0b 	tst.w	r4, #11
 80015a8:	d103      	bne.n	80015b2 <USART2_IRQHandler+0x2a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <USART2_IRQHandler+0x64>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b103      	cbz	r3, 80015b2 <USART2_IRQHandler+0x2a>
        _cbOnRx(v);
 80015b0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80015b2:	f014 0f80 	tst.w	r4, #128	; 0x80
 80015b6:	d00e      	beq.n	80015d6 <USART2_IRQHandler+0x4e>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <USART2_IRQHandler+0x68>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b15b      	cbz	r3, 80015d6 <USART2_IRQHandler+0x4e>
      return;
    }
    r = _cbOnTx(&v);
 80015be:	f10d 0007 	add.w	r0, sp, #7
 80015c2:	4798      	blx	r3
    if (r == 0) {                          // No more characters to send ?
 80015c4:	b948      	cbnz	r0, 80015da <USART2_IRQHandler+0x52>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80015c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80015ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 80015ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015d2:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
      USART_TDR = v;  // Start transmission by writing to data register
    }
  }
}
 80015d6:	b002      	add	sp, #8
 80015d8:	bd10      	pop	{r4, pc}
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80015da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015de:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
      USART_TDR = v;  // Start transmission by writing to data register
 80015e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80015e6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80015ea:	e7f4      	b.n	80015d6 <USART2_IRQHandler+0x4e>
 80015ec:	24005238 	.word	0x24005238
 80015f0:	2400523c 	.word	0x2400523c

080015f4 <HIF_UART_EnableTXEInterrupt>:
/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80015f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80015f8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 80015fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001600:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
}
 8001604:	4770      	bx	lr
	...

08001608 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8001608:	b510      	push	{r4, lr}
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HIF_UART_Init+0x90>)
 800160c:	f8d3 44e8 	ldr.w	r4, [r3, #1256]	; 0x4e8
 8001610:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001614:	f8c3 44e8 	str.w	r4, [r3, #1256]	; 0x4e8
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8001618:	f8d3 44e0 	ldr.w	r4, [r3, #1248]	; 0x4e0
 800161c:	f044 0401 	orr.w	r4, r4, #1
 8001620:	f8c3 44e0 	str.w	r4, [r3, #1248]	; 0x4e0
  v  = GPIO_AFRL;
 8001624:	4c1d      	ldr	r4, [pc, #116]	; (800169c <HIF_UART_Init+0x94>)
 8001626:	6a23      	ldr	r3, [r4, #32]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8001628:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800162c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
  GPIO_AFRL = v;
 8001630:	6223      	str	r3, [r4, #32]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8001632:	6823      	ldr	r3, [r4, #0]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8001634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8001638:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
  GPIO_MODER = v;
 800163c:	6023      	str	r3, [r4, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800163e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001642:	f248 042d 	movw	r4, #32813	; 0x802d
 8001646:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800164a:	2400      	movs	r4, #0
 800164c:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8001650:	2480      	movs	r4, #128	; 0x80
 8001652:	f8c3 4408 	str.w	r4, [r3, #1032]	; 0x408
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8001656:	00c3      	lsls	r3, r0, #3
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <HIF_UART_Init+0x98>)
 800165a:	fbb0 f0f3 	udiv	r0, r0, r3
 800165e:	3001      	adds	r0, #1
  Div = Div / 2;
  if (Div > 0xFFF) {
 8001660:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001664:	d202      	bcs.n	800166c <HIF_UART_Init+0x64>
 8001666:	0843      	lsrs	r3, r0, #1
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
  }
  if (Div >= 1) {
 8001668:	b143      	cbz	r3, 800167c <HIF_UART_Init+0x74>
 800166a:	e001      	b.n	8001670 <HIF_UART_Init+0x68>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800166c:	f640 73ff 	movw	r3, #4095	; 0xfff
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	b29b      	uxth	r3, r3
 8001674:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8001678:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HIF_UART_Init+0x9c>)
 800167e:	601a      	str	r2, [r3, #0]
  _cbOnTx = cbOnTx;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HIF_UART_Init+0xa0>)
 8001682:	6019      	str	r1, [r3, #0]
  HAL_NVIC_SetPriority(USART_IRQn, 6, 0);  // Highest prio, so it is not disabled by embOS
 8001684:	2200      	movs	r2, #0
 8001686:	2106      	movs	r1, #6
 8001688:	2026      	movs	r0, #38	; 0x26
 800168a:	f001 fd45 	bl	8003118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_IRQn);
 800168e:	2026      	movs	r0, #38	; 0x26
 8001690:	f001 fd78 	bl	8003184 <HAL_NVIC_EnableIRQ>
}
 8001694:	bd10      	pop	{r4, pc}
 8001696:	bf00      	nop
 8001698:	58024000 	.word	0x58024000
 800169c:	58020000 	.word	0x58020000
 80016a0:	007a1200 	.word	0x007a1200
 80016a4:	24005238 	.word	0x24005238
 80016a8:	2400523c 	.word	0x2400523c

080016ac <SEGGER_UART_init>:
{
 80016ac:	b508      	push	{r3, lr}
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80016ae:	4a02      	ldr	r2, [pc, #8]	; (80016b8 <SEGGER_UART_init+0xc>)
 80016b0:	4902      	ldr	r1, [pc, #8]	; (80016bc <SEGGER_UART_init+0x10>)
 80016b2:	f7ff ffa9 	bl	8001608 <HIF_UART_Init>
}
 80016b6:	bd08      	pop	{r3, pc}
 80016b8:	0800151d 	.word	0x0800151d
 80016bc:	08001551 	.word	0x08001551

080016c0 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80016c0:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 80016c2:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d804      	bhi.n	80016d2 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80016c8:	6880      	ldr	r0, [r0, #8]
 80016ca:	1a80      	subs	r0, r0, r2
 80016cc:	4403      	add	r3, r0
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	4770      	bx	lr
  } else {
    r = RdOff - WrOff - 1u;
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	1e58      	subs	r0, r3, #1
  }
  return r;
}
 80016d6:	4770      	bx	lr

080016d8 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80016d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016dc:	4604      	mov	r4, r0
 80016de:	4688      	mov	r8, r1
 80016e0:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 80016e2:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 80016e4:	6887      	ldr	r7, [r0, #8]
 80016e6:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
 80016ea:	4591      	cmp	r9, r2
 80016ec:	d909      	bls.n	8001702 <_WriteNoCheck+0x2a>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80016ee:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80016f0:	4428      	add	r0, r5
 80016f2:	f005 f905 	bl	8006900 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80016f6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80016fa:	4435      	add	r5, r6
 80016fc:	60e5      	str	r5, [r4, #12]
}
 80016fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001702:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001704:	464a      	mov	r2, r9
 8001706:	4428      	add	r0, r5
 8001708:	f005 f8fa 	bl	8006900 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800170c:	1bed      	subs	r5, r5, r7
 800170e:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001710:	462a      	mov	r2, r5
 8001712:	eb08 0109 	add.w	r1, r8, r9
 8001716:	6860      	ldr	r0, [r4, #4]
 8001718:	f005 f8f2 	bl	8006900 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800171c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001720:	60e5      	str	r5, [r4, #12]
}
 8001722:	e7ec      	b.n	80016fe <_WriteNoCheck+0x26>

08001724 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001728:	4606      	mov	r6, r0
 800172a:	4688      	mov	r8, r1
 800172c:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 800172e:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 8001730:	f04f 0900 	mov.w	r9, #0
 8001734:	e01a      	b.n	800176c <_WriteBlocking+0x48>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001736:	1b64      	subs	r4, r4, r5
 8001738:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800173a:	68b3      	ldr	r3, [r6, #8]
 800173c:	1b5c      	subs	r4, r3, r5
 800173e:	4294      	cmp	r4, r2
 8001740:	bf28      	it	cs
 8001742:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001744:	42bc      	cmp	r4, r7
 8001746:	bf28      	it	cs
 8001748:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800174a:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800174c:	4622      	mov	r2, r4
 800174e:	4641      	mov	r1, r8
 8001750:	4428      	add	r0, r5
 8001752:	f005 f8d5 	bl	8006900 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001756:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 8001758:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 800175a:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 800175c:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 800175e:	68b3      	ldr	r3, [r6, #8]
 8001760:	42ab      	cmp	r3, r5
 8001762:	d00b      	beq.n	800177c <_WriteBlocking+0x58>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001764:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001768:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 800176a:	b14f      	cbz	r7, 8001780 <_WriteBlocking+0x5c>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800176c:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
 800176e:	42a5      	cmp	r5, r4
 8001770:	d3e1      	bcc.n	8001736 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001772:	68b2      	ldr	r2, [r6, #8]
 8001774:	1b64      	subs	r4, r4, r5
 8001776:	4414      	add	r4, r2
 8001778:	1e62      	subs	r2, r4, #1
 800177a:	e7de      	b.n	800173a <_WriteBlocking+0x16>
      WrOff = 0u;
 800177c:	2500      	movs	r5, #0
 800177e:	e7f1      	b.n	8001764 <_WriteBlocking+0x40>
}
 8001780:	4648      	mov	r0, r9
 8001782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001788 <_DoInit>:
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_DoInit+0x58>)
 800178a:	2203      	movs	r2, #3
 800178c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800178e:	615a      	str	r2, [r3, #20]
  p->aUp[0].sName         = "Terminal";
 8001790:	4914      	ldr	r1, [pc, #80]	; (80017e4 <_DoInit+0x5c>)
 8001792:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <_DoInit+0x60>)
 8001796:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
 80017a6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80017a8:	4910      	ldr	r1, [pc, #64]	; (80017ec <_DoInit+0x64>)
 80017aa:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80017ac:	2110      	movs	r1, #16
 80017ae:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80017b0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80017b2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80017b4:	675a      	str	r2, [r3, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <_DoInit+0x68>)
 80017b8:	6810      	ldr	r0, [r2, #0]
 80017ba:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80017be:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80017c2:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <_DoInit+0x6c>)
 80017c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017c8:	6018      	str	r0, [r3, #0]
 80017ca:	8099      	strh	r1, [r3, #4]
 80017cc:	0c09      	lsrs	r1, r1, #16
 80017ce:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80017d0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80017d4:	2220      	movs	r2, #32
 80017d6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80017d8:	f3bf 8f5f 	dmb	sy
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	24005240 	.word	0x24005240
 80017e4:	08006a34 	.word	0x08006a34
 80017e8:	240052f8 	.word	0x240052f8
 80017ec:	240052e8 	.word	0x240052e8
 80017f0:	08006a40 	.word	0x08006a40
 80017f4:	08006a44 	.word	0x08006a44

080017f8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80017f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017fc:	4604      	mov	r4, r0
 80017fe:	4688      	mov	r8, r1
 8001800:	4691      	mov	r9, r2
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <SEGGER_RTT_ReadUpBufferNoLock+0xa8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b1c3      	cbz	r3, 800183a <SEGGER_RTT_ReadUpBufferNoLock+0x42>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 8001808:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800180c:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <SEGGER_RTT_ReadUpBufferNoLock+0xa8>)
 800180e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001812:	6a9f      	ldr	r7, [r3, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001814:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001816:	42af      	cmp	r7, r5
 8001818:	d812      	bhi.n	8001840 <SEGGER_RTT_ReadUpBufferNoLock+0x48>
  NumBytesRead = 0u;
 800181a:	2600      	movs	r6, #0
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800181c:	1bed      	subs	r5, r5, r7
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800181e:	454d      	cmp	r5, r9
 8001820:	bf28      	it	cs
 8001822:	464d      	movcs	r5, r9
  if (NumBytesRem > 0u) {
 8001824:	bb65      	cbnz	r5, 8001880 <SEGGER_RTT_ReadUpBufferNoLock+0x88>
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8001826:	b12e      	cbz	r6, 8001834 <SEGGER_RTT_ReadUpBufferNoLock+0x3c>
    pRing->RdOff = RdOff;
 8001828:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800182c:	481c      	ldr	r0, [pc, #112]	; (80018a0 <SEGGER_RTT_ReadUpBufferNoLock+0xa8>)
 800182e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8001832:	62a7      	str	r7, [r4, #40]	; 0x28
  }
  //
  return NumBytesRead;
}
 8001834:	4630      	mov	r0, r6
 8001836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INIT();
 800183a:	f7ff ffa5 	bl	8001788 <_DoInit>
 800183e:	e7e3      	b.n	8001808 <SEGGER_RTT_ReadUpBufferNoLock+0x10>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001840:	4613      	mov	r3, r2
 8001842:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8001846:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 800184a:	f8da 6020 	ldr.w	r6, [sl, #32]
 800184e:	1bf6      	subs	r6, r6, r7
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001850:	454e      	cmp	r6, r9
 8001852:	bf28      	it	cs
 8001854:	464e      	movcs	r6, r9
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001856:	1c62      	adds	r2, r4, #1
 8001858:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800185c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001860:	6859      	ldr	r1, [r3, #4]
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001862:	4632      	mov	r2, r6
 8001864:	4439      	add	r1, r7
 8001866:	4640      	mov	r0, r8
 8001868:	f005 f84a 	bl	8006900 <memcpy>
    pBuffer      += NumBytesRem;
 800186c:	44b0      	add	r8, r6
    BufferSize   -= NumBytesRem;
 800186e:	eba9 0906 	sub.w	r9, r9, r6
    RdOff        += NumBytesRem;
 8001872:	4437      	add	r7, r6
    if (RdOff == pRing->SizeOfBuffer) {
 8001874:	f8da 3020 	ldr.w	r3, [sl, #32]
 8001878:	42bb      	cmp	r3, r7
 800187a:	d1cf      	bne.n	800181c <SEGGER_RTT_ReadUpBufferNoLock+0x24>
      RdOff = 0u;
 800187c:	2700      	movs	r7, #0
 800187e:	e7cd      	b.n	800181c <SEGGER_RTT_ReadUpBufferNoLock+0x24>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001880:	1c63      	adds	r3, r4, #1
 8001882:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <SEGGER_RTT_ReadUpBufferNoLock+0xa8>)
 8001888:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800188c:	6859      	ldr	r1, [r3, #4]
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800188e:	462a      	mov	r2, r5
 8001890:	4439      	add	r1, r7
 8001892:	4640      	mov	r0, r8
 8001894:	f005 f834 	bl	8006900 <memcpy>
    NumBytesRead += NumBytesRem;
 8001898:	442e      	add	r6, r5
    RdOff        += NumBytesRem;
 800189a:	442f      	add	r7, r5
 800189c:	e7c3      	b.n	8001826 <SEGGER_RTT_ReadUpBufferNoLock+0x2e>
 800189e:	bf00      	nop
 80018a0:	24005240 	.word	0x24005240

080018a4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80018a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a8:	4604      	mov	r4, r0
 80018aa:	4688      	mov	r8, r1
 80018ac:	4691      	mov	r9, r2
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <SEGGER_RTT_ReadNoLock+0x9c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b1c3      	cbz	r3, 80018e6 <SEGGER_RTT_ReadNoLock+0x42>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 80018b4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <SEGGER_RTT_ReadNoLock+0x9c>)
 80018ba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80018be:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  WrOff = pRing->WrOff;
 80018c0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80018c2:	42af      	cmp	r7, r5
 80018c4:	d812      	bhi.n	80018ec <SEGGER_RTT_ReadNoLock+0x48>
  NumBytesRead = 0u;
 80018c6:	2600      	movs	r6, #0
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80018c8:	1bed      	subs	r5, r5, r7
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80018ca:	454d      	cmp	r5, r9
 80018cc:	bf28      	it	cs
 80018ce:	464d      	movcs	r5, r9
  if (NumBytesRem > 0u) {
 80018d0:	bb3d      	cbnz	r5, 8001922 <SEGGER_RTT_ReadNoLock+0x7e>
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
#endif
  }
  if (NumBytesRead) {
 80018d2:	b12e      	cbz	r6, 80018e0 <SEGGER_RTT_ReadNoLock+0x3c>
    pRing->RdOff = RdOff;
 80018d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80018d8:	4819      	ldr	r0, [pc, #100]	; (8001940 <SEGGER_RTT_ReadNoLock+0x9c>)
 80018da:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80018de:	6727      	str	r7, [r4, #112]	; 0x70
  }
  //
  return NumBytesRead;
}
 80018e0:	4630      	mov	r0, r6
 80018e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INIT();
 80018e6:	f7ff ff4f 	bl	8001788 <_DoInit>
 80018ea:	e7e3      	b.n	80018b4 <SEGGER_RTT_ReadNoLock+0x10>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80018ec:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80018f0:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 80018f4:	f8da 6068 	ldr.w	r6, [sl, #104]	; 0x68
 80018f8:	1bf6      	subs	r6, r6, r7
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80018fa:	454e      	cmp	r6, r9
 80018fc:	bf28      	it	cs
 80018fe:	464e      	movcs	r6, r9
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001900:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001904:	4632      	mov	r2, r6
 8001906:	4439      	add	r1, r7
 8001908:	4640      	mov	r0, r8
 800190a:	f004 fff9 	bl	8006900 <memcpy>
    pBuffer      += NumBytesRem;
 800190e:	44b0      	add	r8, r6
    BufferSize   -= NumBytesRem;
 8001910:	eba9 0906 	sub.w	r9, r9, r6
    RdOff        += NumBytesRem;
 8001914:	4437      	add	r7, r6
    if (RdOff == pRing->SizeOfBuffer) {
 8001916:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 800191a:	42bb      	cmp	r3, r7
 800191c:	d1d4      	bne.n	80018c8 <SEGGER_RTT_ReadNoLock+0x24>
      RdOff = 0u;
 800191e:	2700      	movs	r7, #0
 8001920:	e7d2      	b.n	80018c8 <SEGGER_RTT_ReadNoLock+0x24>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001922:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001926:	4a06      	ldr	r2, [pc, #24]	; (8001940 <SEGGER_RTT_ReadNoLock+0x9c>)
 8001928:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800192c:	6e59      	ldr	r1, [r3, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800192e:	462a      	mov	r2, r5
 8001930:	4439      	add	r1, r7
 8001932:	4640      	mov	r0, r8
 8001934:	f004 ffe4 	bl	8006900 <memcpy>
    NumBytesRead += NumBytesRem;
 8001938:	442e      	add	r6, r5
    RdOff        += NumBytesRem;
 800193a:	442f      	add	r7, r5
 800193c:	e7c9      	b.n	80018d2 <SEGGER_RTT_ReadNoLock+0x2e>
 800193e:	bf00      	nop
 8001940:	24005240 	.word	0x24005240

08001944 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	460e      	mov	r6, r1
 8001948:	4615      	mov	r5, r2
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800194a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800194e:	00c0      	lsls	r0, r0, #3
 8001950:	3060      	adds	r0, #96	; 0x60
 8001952:	4f14      	ldr	r7, [pc, #80]	; (80019a4 <SEGGER_RTT_WriteDownBufferNoLock+0x60>)
 8001954:	4407      	add	r7, r0
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001956:	697c      	ldr	r4, [r7, #20]
 8001958:	2c01      	cmp	r4, #1
 800195a:	d011      	beq.n	8001980 <SEGGER_RTT_WriteDownBufferNoLock+0x3c>
 800195c:	2c02      	cmp	r4, #2
 800195e:	d01c      	beq.n	800199a <SEGGER_RTT_WriteDownBufferNoLock+0x56>
 8001960:	b114      	cbz	r4, 8001968 <SEGGER_RTT_WriteDownBufferNoLock+0x24>
 8001962:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 8001964:	4620      	mov	r0, r4
 8001966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 8001968:	4638      	mov	r0, r7
 800196a:	f7ff fea9 	bl	80016c0 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 800196e:	4285      	cmp	r5, r0
 8001970:	d8f8      	bhi.n	8001964 <SEGGER_RTT_WriteDownBufferNoLock+0x20>
      _WriteNoCheck(pRing, pData, NumBytes);
 8001972:	462a      	mov	r2, r5
 8001974:	4631      	mov	r1, r6
 8001976:	4638      	mov	r0, r7
 8001978:	f7ff feae 	bl	80016d8 <_WriteNoCheck>
      Status = NumBytes;
 800197c:	462c      	mov	r4, r5
 800197e:	e7f1      	b.n	8001964 <SEGGER_RTT_WriteDownBufferNoLock+0x20>
    Avail = _GetAvailWriteSpace(pRing);
 8001980:	4638      	mov	r0, r7
 8001982:	f7ff fe9d 	bl	80016c0 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001986:	462c      	mov	r4, r5
 8001988:	4285      	cmp	r5, r0
 800198a:	bf28      	it	cs
 800198c:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 800198e:	4622      	mov	r2, r4
 8001990:	4631      	mov	r1, r6
 8001992:	4638      	mov	r0, r7
 8001994:	f7ff fea0 	bl	80016d8 <_WriteNoCheck>
    break;
 8001998:	e7e4      	b.n	8001964 <SEGGER_RTT_WriteDownBufferNoLock+0x20>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800199a:	4638      	mov	r0, r7
 800199c:	f7ff fec2 	bl	8001724 <_WriteBlocking>
 80019a0:	4604      	mov	r4, r0
    break;
 80019a2:	e7df      	b.n	8001964 <SEGGER_RTT_WriteDownBufferNoLock+0x20>
 80019a4:	24005240 	.word	0x24005240

080019a8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	4616      	mov	r6, r2
  unsigned Status;

  INIT();
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <SEGGER_RTT_WriteDownBuffer+0x30>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b16b      	cbz	r3, 80019d2 <SEGGER_RTT_WriteDownBuffer+0x2a>
  SEGGER_RTT_LOCK();
 80019b6:	f3ef 8711 	mrs	r7, BASEPRI
 80019ba:	f04f 0120 	mov.w	r1, #32
 80019be:	f381 8811 	msr	BASEPRI, r1
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80019c2:	4632      	mov	r2, r6
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff ffbc 	bl	8001944 <SEGGER_RTT_WriteDownBufferNoLock>
  SEGGER_RTT_UNLOCK();
 80019cc:	f387 8811 	msr	BASEPRI, r7
  return Status;
}
 80019d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 80019d2:	f7ff fed9 	bl	8001788 <_DoInit>
 80019d6:	e7ee      	b.n	80019b6 <SEGGER_RTT_WriteDownBuffer+0xe>
 80019d8:	24005240 	.word	0x24005240

080019dc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019de:	4607      	mov	r7, r0
 80019e0:	460e      	mov	r6, r1
 80019e2:	4615      	mov	r5, r2
 80019e4:	461c      	mov	r4, r3
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <SEGGER_RTT_AllocUpBuffer+0x88>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d034      	beq.n	8001a58 <SEGGER_RTT_AllocUpBuffer+0x7c>
  SEGGER_RTT_LOCK();
 80019ee:	f3ef 8211 	mrs	r2, BASEPRI
 80019f2:	f04f 0120 	mov.w	r1, #32
 80019f6:	f381 8811 	msr	BASEPRI, r1
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  BufferIndex = 0;
 80019fa:	2000      	movs	r0, #0
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80019fc:	f100 0c01 	add.w	ip, r0, #1
 8001a00:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <SEGGER_RTT_AllocUpBuffer+0x88>)
 8001a06:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 8001a0a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001a0e:	b123      	cbz	r3, 8001a1a <SEGGER_RTT_AllocUpBuffer+0x3e>
      break;
    }
    BufferIndex++;
 8001a10:	3001      	adds	r0, #1
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <SEGGER_RTT_AllocUpBuffer+0x88>)
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	4283      	cmp	r3, r0
 8001a18:	dcf0      	bgt.n	80019fc <SEGGER_RTT_AllocUpBuffer+0x20>
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <SEGGER_RTT_AllocUpBuffer+0x88>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	4283      	cmp	r3, r0
 8001a20:	dd1d      	ble.n	8001a5e <SEGGER_RTT_AllocUpBuffer+0x82>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <SEGGER_RTT_AllocUpBuffer+0x88>)
 8001a24:	1c41      	adds	r1, r0, #1
 8001a26:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8001a2a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8001a2e:	f843 700c 	str.w	r7, [r3, ip]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001a32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001a36:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001a3a:	604e      	str	r6, [r1, #4]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001a3c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001a40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001a44:	621d      	str	r5, [r3, #32]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8001a46:	2100      	movs	r1, #0
 8001a48:	6299      	str	r1, [r3, #40]	; 0x28
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8001a4a:	6259      	str	r1, [r3, #36]	; 0x24
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8001a4c:	62dc      	str	r4, [r3, #44]	; 0x2c
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001a4e:	f3bf 8f5f 	dmb	sy
  } else {
    BufferIndex = -1;
  }
  SEGGER_RTT_UNLOCK();
 8001a52:	f382 8811 	msr	BASEPRI, r2
  return BufferIndex;
}
 8001a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 8001a58:	f7ff fe96 	bl	8001788 <_DoInit>
 8001a5c:	e7c7      	b.n	80019ee <SEGGER_RTT_AllocUpBuffer+0x12>
    BufferIndex = -1;
 8001a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a62:	e7f6      	b.n	8001a52 <SEGGER_RTT_AllocUpBuffer+0x76>
 8001a64:	24005240 	.word	0x24005240

08001a68 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	460f      	mov	r7, r1
 8001a70:	4616      	mov	r6, r2
 8001a72:	4698      	mov	r8, r3
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8001a74:	4815      	ldr	r0, [pc, #84]	; (8001acc <SEGGER_RTT_ConfigDownBuffer+0x64>)
 8001a76:	7800      	ldrb	r0, [r0, #0]
 8001a78:	b310      	cbz	r0, 8001ac0 <SEGGER_RTT_ConfigDownBuffer+0x58>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8001a7a:	2c02      	cmp	r4, #2
 8001a7c:	d823      	bhi.n	8001ac6 <SEGGER_RTT_ConfigDownBuffer+0x5e>
    SEGGER_RTT_LOCK();
 8001a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a82:	f04f 0120 	mov.w	r1, #32
 8001a86:	f381 8811 	msr	BASEPRI, r1
    pDown = &pRTTCB->aDown[BufferIndex];
    if (BufferIndex) {
 8001a8a:	b15c      	cbz	r4, 8001aa4 <SEGGER_RTT_ConfigDownBuffer+0x3c>
      pDown->sName        = sName;
 8001a8c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8001a90:	4d0e      	ldr	r5, [pc, #56]	; (8001acc <SEGGER_RTT_ConfigDownBuffer+0x64>)
 8001a92:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001a96:	6607      	str	r7, [r0, #96]	; 0x60
      pDown->pBuffer      = (char*)pBuffer;
 8001a98:	6646      	str	r6, [r0, #100]	; 0x64
      pDown->SizeOfBuffer = BufferSize;
 8001a9a:	f8c0 8068 	str.w	r8, [r0, #104]	; 0x68
      pDown->RdOff        = 0u;
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	6702      	str	r2, [r0, #112]	; 0x70
      pDown->WrOff        = 0u;
 8001aa2:	66c2      	str	r2, [r0, #108]	; 0x6c
    }
    pDown->Flags          = Flags;
 8001aa4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001aa8:	4808      	ldr	r0, [pc, #32]	; (8001acc <SEGGER_RTT_ConfigDownBuffer+0x64>)
 8001aaa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8001aae:	9a06      	ldr	r2, [sp, #24]
 8001ab0:	6762      	str	r2, [r4, #116]	; 0x74
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001ab2:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8001ab6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8001aba:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 8001abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  INIT();
 8001ac0:	f7ff fe62 	bl	8001788 <_DoInit>
 8001ac4:	e7d9      	b.n	8001a7a <SEGGER_RTT_ConfigDownBuffer+0x12>
    r = -1;
 8001ac6:	f04f 30ff 	mov.w	r0, #4294967295
  return r;
 8001aca:	e7f7      	b.n	8001abc <SEGGER_RTT_ConfigDownBuffer+0x54>
 8001acc:	24005240 	.word	0x24005240

08001ad0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001ad0:	4684      	mov	ip, r0
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
  if (pText != NULL) {
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	b329      	cbz	r1, 8001b22 <_EncodeStr+0x52>
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001ad6:	b410      	push	{r4}
  Len = 0;
 8001ad8:	2100      	movs	r1, #0
 8001ada:	e000      	b.n	8001ade <_EncodeStr+0xe>
    while(*(pText + Len) != 0) {
      Len++;
 8001adc:	3101      	adds	r1, #1
    while(*(pText + Len) != 0) {
 8001ade:	5c5c      	ldrb	r4, [r3, r1]
 8001ae0:	2c00      	cmp	r4, #0
 8001ae2:	d1fb      	bne.n	8001adc <_EncodeStr+0xc>
    }
    if (Len > Limit) {
 8001ae4:	4291      	cmp	r1, r2
 8001ae6:	d800      	bhi.n	8001aea <_EncodeStr+0x1a>
 8001ae8:	460a      	mov	r2, r1
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001aea:	2afe      	cmp	r2, #254	; 0xfe
 8001aec:	d804      	bhi.n	8001af8 <_EncodeStr+0x28>
    *pPayload++ = Len; 
 8001aee:	4660      	mov	r0, ip
 8001af0:	f800 2b01 	strb.w	r2, [r0], #1
    *pPayload++ = ((Len >> 8) & 255);
  }
  //
  // copy string
  //
  n = 0;
 8001af4:	2100      	movs	r1, #0
  while (n < Len) {
 8001af6:	e00f      	b.n	8001b18 <_EncodeStr+0x48>
    *pPayload++ = 255;
 8001af8:	21ff      	movs	r1, #255	; 0xff
 8001afa:	f88c 1000 	strb.w	r1, [ip]
    *pPayload++ = (Len & 255);
 8001afe:	f88c 2001 	strb.w	r2, [ip, #1]
    *pPayload++ = ((Len >> 8) & 255);
 8001b02:	0a11      	lsrs	r1, r2, #8
 8001b04:	f10c 0003 	add.w	r0, ip, #3
 8001b08:	f88c 1002 	strb.w	r1, [ip, #2]
 8001b0c:	e7f2      	b.n	8001af4 <_EncodeStr+0x24>
    *pPayload++ = *pText++;
 8001b0e:	f813 cb01 	ldrb.w	ip, [r3], #1
 8001b12:	f800 cb01 	strb.w	ip, [r0], #1
    n++;
 8001b16:	3101      	adds	r1, #1
  while (n < Len) {
 8001b18:	4291      	cmp	r1, r2
 8001b1a:	d3f8      	bcc.n	8001b0e <_EncodeStr+0x3e>
  }
  return pPayload;
}
 8001b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b20:	4770      	bx	lr
  Len = 0;
 8001b22:	2200      	movs	r2, #0
    *pPayload++ = Len; 
 8001b24:	f800 2b01 	strb.w	r2, [r0], #1
  n = 0;
 8001b28:	2100      	movs	r1, #0
 8001b2a:	e004      	b.n	8001b36 <_EncodeStr+0x66>
    *pPayload++ = *pText++;
 8001b2c:	f813 cb01 	ldrb.w	ip, [r3], #1
 8001b30:	f800 cb01 	strb.w	ip, [r0], #1
    n++;
 8001b34:	3101      	adds	r1, #1
  while (n < Len) {
 8001b36:	4291      	cmp	r1, r2
 8001b38:	d3f8      	bcc.n	8001b2c <_EncodeStr+0x5c>
 8001b3a:	4770      	bx	lr

08001b3c <_PreparePacket>:
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
  return pPacket + 4;
}
 8001b3c:	3004      	adds	r0, #4
 8001b3e:	4770      	bx	lr

08001b40 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001b40:	b530      	push	{r4, r5, lr}
 8001b42:	b085      	sub	sp, #20
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001b44:	2301      	movs	r3, #1
 8001b46:	f88d 3004 	strb.w	r3, [sp, #4]
  pPayload   = &aPacket[1];
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <_TrySendOverflowPacket+0x74>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f10d 0205 	add.w	r2, sp, #5
 8001b52:	e004      	b.n	8001b5e <_TrySendOverflowPacket+0x1e>
 8001b54:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8001b58:	f802 1b01 	strb.w	r1, [r2], #1
 8001b5c:	09db      	lsrs	r3, r3, #7
 8001b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b60:	d8f8      	bhi.n	8001b54 <_TrySendOverflowPacket+0x14>
 8001b62:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <_TrySendOverflowPacket+0x78>)
 8001b68:	685d      	ldr	r5, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <_TrySendOverflowPacket+0x74>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	1aeb      	subs	r3, r5, r3
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001b70:	e004      	b.n	8001b7c <_TrySendOverflowPacket+0x3c>
 8001b72:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8001b76:	f802 1b01 	strb.w	r1, [r2], #1
 8001b7a:	09db      	lsrs	r3, r3, #7
 8001b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b7e:	d8f8      	bhi.n	8001b72 <_TrySendOverflowPacket+0x32>
 8001b80:	f802 3b01 	strb.w	r3, [r2], #1
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001b84:	a901      	add	r1, sp, #4
 8001b86:	1a52      	subs	r2, r2, r1
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <_TrySendOverflowPacket+0x74>)
 8001b8a:	7858      	ldrb	r0, [r3, #1]
 8001b8c:	f7fe fba8 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001b90:	4604      	mov	r4, r0
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8001b92:	f7ff fd2f 	bl	80015f4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8001b96:	b13c      	cbz	r4, 8001ba8 <_TrySendOverflowPacket+0x68>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <_TrySendOverflowPacket+0x74>)
 8001b9a:	60dd      	str	r5, [r3, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	3a01      	subs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
  } else {
    _SYSVIEW_Globals.DropCount++;
  }
  //
  return Status;
}
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	b005      	add	sp, #20
 8001ba6:	bd30      	pop	{r4, r5, pc}
    _SYSVIEW_Globals.DropCount++;
 8001ba8:	4a02      	ldr	r2, [pc, #8]	; (8001bb4 <_TrySendOverflowPacket+0x74>)
 8001baa:	6953      	ldr	r3, [r2, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	6153      	str	r3, [r2, #20]
  return Status;
 8001bb0:	e7f7      	b.n	8001ba2 <_TrySendOverflowPacket+0x62>
 8001bb2:	bf00      	nop
 8001bb4:	24005704 	.word	0x24005704
 8001bb8:	e0001000 	.word	0xe0001000

08001bbc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8001bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	4607      	mov	r7, r0
 8001bc4:	460e      	mov	r6, r1
 8001bc6:	4690      	mov	r8, r2
 8001bc8:	461d      	mov	r5, r3
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001bca:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001c24 <SEGGER_SYSVIEW_Init+0x68>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd4:	490f      	ldr	r1, [pc, #60]	; (8001c14 <SEGGER_SYSVIEW_Init+0x58>)
 8001bd6:	4648      	mov	r0, r9
 8001bd8:	f7ff ff00 	bl	80019dc <SEGGER_RTT_AllocUpBuffer>
 8001bdc:	b2c0      	uxtb	r0, r0
 8001bde:	4c0e      	ldr	r4, [pc, #56]	; (8001c18 <SEGGER_SYSVIEW_Init+0x5c>)
 8001be0:	7060      	strb	r0, [r4, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001be2:	7620      	strb	r0, [r4, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001be4:	f04f 0a00 	mov.w	sl, #0
 8001be8:	f8cd a000 	str.w	sl, [sp]
 8001bec:	2308      	movs	r3, #8
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <SEGGER_SYSVIEW_Init+0x60>)
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	f7ff ff39 	bl	8001a68 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001bf6:	f8c4 a010 	str.w	sl, [r4, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <SEGGER_SYSVIEW_Init+0x64>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60e3      	str	r3, [r4, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8001c00:	f8c4 8020 	str.w	r8, [r4, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001c04:	6067      	str	r7, [r4, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001c06:	60a6      	str	r6, [r4, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001c08:	6265      	str	r5, [r4, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001c0a:	f884 a000 	strb.w	sl, [r4]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001c0e:	b002      	add	sp, #8
 8001c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c14:	2400572c 	.word	0x2400572c
 8001c18:	24005704 	.word	0x24005704
 8001c1c:	240056f8 	.word	0x240056f8
 8001c20:	e0001000 	.word	0xe0001000
 8001c24:	08006a4c 	.word	0x08006a4c

08001c28 <SEGGER_SYSVIEW_SetRAMBase>:
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001c28:	4b01      	ldr	r3, [pc, #4]	; (8001c30 <SEGGER_SYSVIEW_SetRAMBase+0x8>)
 8001c2a:	6118      	str	r0, [r3, #16]
}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	24005704 	.word	0x24005704

08001c34 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001c34:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001c36:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <SEGGER_SYSVIEW_SendTaskList+0x10>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	b113      	cbz	r3, 8001c42 <SEGGER_SYSVIEW_SendTaskList+0xe>
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	b103      	cbz	r3, 8001c42 <SEGGER_SYSVIEW_SendTaskList+0xe>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001c40:	4798      	blx	r3
  }
}
 8001c42:	bd08      	pop	{r3, pc}
 8001c44:	24005704 	.word	0x24005704

08001c48 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001c48:	b510      	push	{r4, lr}
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SEGGER_SYSVIEW_SendModuleDescription+0x1c>)
 8001c4c:	681c      	ldr	r4, [r3, #0]
 8001c4e:	b924      	cbnz	r4, 8001c5a <SEGGER_SYSVIEW_SendModuleDescription+0x12>
        pModule->pfSendModuleDesc();
      }
      pModule = pModule->pNext;
    } while (pModule);
  }
}
 8001c50:	bd10      	pop	{r4, pc}
        pModule->pfSendModuleDesc();
 8001c52:	4798      	blx	r3
      pModule = pModule->pNext;
 8001c54:	6924      	ldr	r4, [r4, #16]
    } while (pModule);
 8001c56:	2c00      	cmp	r4, #0
 8001c58:	d0fa      	beq.n	8001c50 <SEGGER_SYSVIEW_SendModuleDescription+0x8>
      if (pModule->pfSendModuleDesc) {
 8001c5a:	68e3      	ldr	r3, [r4, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f8      	bne.n	8001c52 <SEGGER_SYSVIEW_SendModuleDescription+0xa>
 8001c60:	e7f8      	b.n	8001c54 <SEGGER_SYSVIEW_SendModuleDescription+0xc>
 8001c62:	bf00      	nop
 8001c64:	24005c10 	.word	0x24005c10

08001c68 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001c68:	b510      	push	{r4, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001c6a:	f3ef 8411 	mrs	r4, BASEPRI
 8001c6e:	f04f 0120 	mov.w	r1, #32
 8001c72:	f381 8811 	msr	BASEPRI, r1
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <SEGGER_SYSVIEW_SendNumModules+0x3c>)
 8001c78:	f7ff ff60 	bl	8001b3c <_PreparePacket>
  pPayload = pPayloadStart;
  ENCODE_U32(pPayload, _NumModules);
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <SEGGER_SYSVIEW_SendNumModules+0x40>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4601      	mov	r1, r0
 8001c82:	e004      	b.n	8001c8e <SEGGER_SYSVIEW_SendNumModules+0x26>
 8001c84:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8001c88:	f801 2b01 	strb.w	r2, [r1], #1
 8001c8c:	09db      	lsrs	r3, r3, #7
 8001c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c90:	d8f8      	bhi.n	8001c84 <SEGGER_SYSVIEW_SendNumModules+0x1c>
 8001c92:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8001c96:	221b      	movs	r2, #27
 8001c98:	f000 f8b4 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8001c9c:	f384 8811 	msr	BASEPRI, r4
}
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	bf00      	nop
 8001ca4:	24005b2c 	.word	0x24005b2c
 8001ca8:	24005700 	.word	0x24005700

08001cac <SEGGER_SYSVIEW_Start>:
void SEGGER_SYSVIEW_Start(void) {
 8001cac:	b538      	push	{r3, r4, r5, lr}
    _SYSVIEW_Globals.EnableState = 1;
 8001cae:	4d2a      	ldr	r5, [pc, #168]	; (8001d58 <SEGGER_SYSVIEW_Start+0xac>)
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	702b      	strb	r3, [r5, #0]
    SEGGER_SYSVIEW_LOCK();
 8001cb4:	f3ef 8411 	mrs	r4, BASEPRI
 8001cb8:	f04f 0120 	mov.w	r1, #32
 8001cbc:	f381 8811 	msr	BASEPRI, r1
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001cc0:	220a      	movs	r2, #10
 8001cc2:	4926      	ldr	r1, [pc, #152]	; (8001d5c <SEGGER_SYSVIEW_Start+0xb0>)
 8001cc4:	7868      	ldrb	r0, [r5, #1]
 8001cc6:	f7fe fb0b 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001cca:	f384 8811 	msr	BASEPRI, r4
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8001cce:	f7ff fc91 	bl	80015f4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f000 f916 	bl	8001f04 <SEGGER_SYSVIEW_RecordVoid>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001cd8:	f3ef 8411 	mrs	r4, BASEPRI
 8001cdc:	f04f 0120 	mov.w	r1, #32
 8001ce0:	f381 8811 	msr	BASEPRI, r1
 8001ce4:	481e      	ldr	r0, [pc, #120]	; (8001d60 <SEGGER_SYSVIEW_Start+0xb4>)
 8001ce6:	f7ff ff29 	bl	8001b3c <_PreparePacket>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001cea:	686a      	ldr	r2, [r5, #4]
 8001cec:	4603      	mov	r3, r0
 8001cee:	e004      	b.n	8001cfa <SEGGER_SYSVIEW_Start+0x4e>
 8001cf0:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8001cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8001cf8:	09d2      	lsrs	r2, r2, #7
 8001cfa:	2a7f      	cmp	r2, #127	; 0x7f
 8001cfc:	d8f8      	bhi.n	8001cf0 <SEGGER_SYSVIEW_Start+0x44>
 8001cfe:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001d02:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <SEGGER_SYSVIEW_Start+0xac>)
 8001d04:	6892      	ldr	r2, [r2, #8]
 8001d06:	e004      	b.n	8001d12 <SEGGER_SYSVIEW_Start+0x66>
 8001d08:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8001d0c:	f803 1b01 	strb.w	r1, [r3], #1
 8001d10:	09d2      	lsrs	r2, r2, #7
 8001d12:	2a7f      	cmp	r2, #127	; 0x7f
 8001d14:	d8f8      	bhi.n	8001d08 <SEGGER_SYSVIEW_Start+0x5c>
 8001d16:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <SEGGER_SYSVIEW_Start+0xac>)
 8001d1c:	6912      	ldr	r2, [r2, #16]
 8001d1e:	e004      	b.n	8001d2a <SEGGER_SYSVIEW_Start+0x7e>
 8001d20:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8001d24:	f803 1b01 	strb.w	r1, [r3], #1
 8001d28:	09d2      	lsrs	r2, r2, #7
 8001d2a:	2a7f      	cmp	r2, #127	; 0x7f
 8001d2c:	d8f8      	bhi.n	8001d20 <SEGGER_SYSVIEW_Start+0x74>
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f801 2b02 	strb.w	r2, [r1], #2
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001d34:	2200      	movs	r2, #0
 8001d36:	705a      	strb	r2, [r3, #1]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001d38:	2218      	movs	r2, #24
 8001d3a:	f000 f863 	bl	8001e04 <_SendPacket>
      RECORD_END();
 8001d3e:	f384 8811 	msr	BASEPRI, r4
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SEGGER_SYSVIEW_Start+0xac>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	b103      	cbz	r3, 8001d4a <SEGGER_SYSVIEW_Start+0x9e>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001d48:	4798      	blx	r3
    SEGGER_SYSVIEW_RecordSystime();
 8001d4a:	f000 f939 	bl	8001fc0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001d4e:	f7ff ff71 	bl	8001c34 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001d52:	f7ff ff89 	bl	8001c68 <SEGGER_SYSVIEW_SendNumModules>
}
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
 8001d58:	24005704 	.word	0x24005704
 8001d5c:	08006a64 	.word	0x08006a64
 8001d60:	24005b2c 	.word	0x24005b2c

08001d64 <_HandleIncomingPacket>:
static void _HandleIncomingPacket(void) {
 8001d64:	b500      	push	{lr}
 8001d66:	b083      	sub	sp, #12
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f10d 0107 	add.w	r1, sp, #7
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <_HandleIncomingPacket+0x9c>)
 8001d70:	7e18      	ldrb	r0, [r3, #24]
 8001d72:	f7ff fd97 	bl	80018a4 <SEGGER_RTT_ReadNoLock>
  if (Status > 0) {
 8001d76:	2800      	cmp	r0, #0
 8001d78:	dd22      	ble.n	8001dc0 <_HandleIncomingPacket+0x5c>
    switch (Cmd) {
 8001d7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d80a      	bhi.n	8001d98 <_HandleIncomingPacket+0x34>
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	b38a      	cbz	r2, 8001dea <_HandleIncomingPacket+0x86>
 8001d86:	1e5a      	subs	r2, r3, #1
 8001d88:	2a06      	cmp	r2, #6
 8001d8a:	d82e      	bhi.n	8001dea <_HandleIncomingPacket+0x86>
 8001d8c:	e8df f002 	tbb	[pc, r2]
 8001d90:	211e1b16 	.word	0x211e1b16
 8001d94:	2724      	.short	0x2724
 8001d96:	2a          	.byte	0x2a
 8001d97:	00          	.byte	0x00
 8001d98:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9a:	d011      	beq.n	8001dc0 <_HandleIncomingPacket+0x5c>
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d124      	bne.n	8001dea <_HandleIncomingPacket+0x86>
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	f10d 0107 	add.w	r1, sp, #7
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <_HandleIncomingPacket+0x9c>)
 8001da8:	7e18      	ldrb	r0, [r3, #24]
 8001daa:	f7ff fd7b 	bl	80018a4 <SEGGER_RTT_ReadNoLock>
      if (Status > 0) {
 8001dae:	2800      	cmp	r0, #0
 8001db0:	dd06      	ble.n	8001dc0 <_HandleIncomingPacket+0x5c>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001db2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001db6:	f000 faa1 	bl	80022fc <SEGGER_SYSVIEW_SendModule>
 8001dba:	e001      	b.n	8001dc0 <_HandleIncomingPacket+0x5c>
      SEGGER_SYSVIEW_Start();
 8001dbc:	f7ff ff76 	bl	8001cac <SEGGER_SYSVIEW_Start>
}
 8001dc0:	b003      	add	sp, #12
 8001dc2:	f85d fb04 	ldr.w	pc, [sp], #4
      SEGGER_SYSVIEW_Stop();
 8001dc6:	f000 f913 	bl	8001ff0 <SEGGER_SYSVIEW_Stop>
      break;
 8001dca:	e7f9      	b.n	8001dc0 <_HandleIncomingPacket+0x5c>
      SEGGER_SYSVIEW_RecordSystime();
 8001dcc:	f000 f8f8 	bl	8001fc0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001dd0:	e7f6      	b.n	8001dc0 <_HandleIncomingPacket+0x5c>
      SEGGER_SYSVIEW_SendTaskList();
 8001dd2:	f7ff ff2f 	bl	8001c34 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001dd6:	e7f3      	b.n	8001dc0 <_HandleIncomingPacket+0x5c>
      SEGGER_SYSVIEW_GetSysDesc();
 8001dd8:	f000 f926 	bl	8002028 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001ddc:	e7f0      	b.n	8001dc0 <_HandleIncomingPacket+0x5c>
      SEGGER_SYSVIEW_SendNumModules();
 8001dde:	f7ff ff43 	bl	8001c68 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001de2:	e7ed      	b.n	8001dc0 <_HandleIncomingPacket+0x5c>
      SEGGER_SYSVIEW_SendModuleDescription();
 8001de4:	f7ff ff30 	bl	8001c48 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001de8:	e7ea      	b.n	8001dc0 <_HandleIncomingPacket+0x5c>
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001dea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001dee:	d0e7      	beq.n	8001dc0 <_HandleIncomingPacket+0x5c>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001df0:	2201      	movs	r2, #1
 8001df2:	f10d 0107 	add.w	r1, sp, #7
 8001df6:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <_HandleIncomingPacket+0x9c>)
 8001df8:	7e18      	ldrb	r0, [r3, #24]
 8001dfa:	f7ff fd53 	bl	80018a4 <SEGGER_RTT_ReadNoLock>
}
 8001dfe:	e7df      	b.n	8001dc0 <_HandleIncomingPacket+0x5c>
 8001e00:	24005704 	.word	0x24005704

08001e04 <_SendPacket>:
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	4606      	mov	r6, r0
 8001e08:	460c      	mov	r4, r1
 8001e0a:	4615      	mov	r5, r2
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001e0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <_SendPacket+0xf4>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d003      	beq.n	8001e1c <_SendPacket+0x18>
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d04f      	beq.n	8001eb8 <_SendPacket+0xb4>
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d012      	beq.n	8001e42 <_SendPacket+0x3e>
  if (EventId < 32) {
 8001e1c:	2d1f      	cmp	r5, #31
 8001e1e:	d805      	bhi.n	8001e2c <_SendPacket+0x28>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001e20:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <_SendPacket+0xf4>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	40eb      	lsrs	r3, r5
 8001e26:	f013 0f01 	tst.w	r3, #1
 8001e2a:	d145      	bne.n	8001eb8 <_SendPacket+0xb4>
  if (EventId < 24) {
 8001e2c:	2d17      	cmp	r5, #23
 8001e2e:	d80f      	bhi.n	8001e50 <_SendPacket+0x4c>
    *--pStartPacket = EventId;
 8001e30:	1e71      	subs	r1, r6, #1
 8001e32:	f806 5c01 	strb.w	r5, [r6, #-1]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001e36:	4b31      	ldr	r3, [pc, #196]	; (8001efc <_SendPacket+0xf8>)
 8001e38:	685d      	ldr	r5, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <_SendPacket+0xf4>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	1aeb      	subs	r3, r5, r3
  ENCODE_U32(pEndPacket, Delta);
 8001e40:	e02b      	b.n	8001e9a <_SendPacket+0x96>
    _TrySendOverflowPacket();
 8001e42:	f7ff fe7d 	bl	8001b40 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <_SendPacket+0xf4>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d134      	bne.n	8001eb8 <_SendPacket+0xb4>
Send:
 8001e4e:	e7e5      	b.n	8001e1c <_SendPacket+0x18>
    NumBytes = pEndPacket - pStartPacket;
 8001e50:	1ba3      	subs	r3, r4, r6
    if (NumBytes > 127) {
 8001e52:	2b7f      	cmp	r3, #127	; 0x7f
 8001e54:	d912      	bls.n	8001e7c <_SendPacket+0x78>
      *--pStartPacket = (NumBytes >> 7);
 8001e56:	09da      	lsrs	r2, r3, #7
 8001e58:	f806 2c01 	strb.w	r2, [r6, #-1]
      *--pStartPacket = NumBytes | 0x80;
 8001e5c:	1eb0      	subs	r0, r6, #2
 8001e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e62:	f806 3c02 	strb.w	r3, [r6, #-2]
    if (EventId > 127) {
 8001e66:	2d7f      	cmp	r5, #127	; 0x7f
 8001e68:	d90c      	bls.n	8001e84 <_SendPacket+0x80>
      *--pStartPacket = (EventId >> 7);
 8001e6a:	09eb      	lsrs	r3, r5, #7
 8001e6c:	f800 3c01 	strb.w	r3, [r0, #-1]
      *--pStartPacket = EventId | 0x80;
 8001e70:	1e81      	subs	r1, r0, #2
 8001e72:	f065 057f 	orn	r5, r5, #127	; 0x7f
 8001e76:	f800 5c02 	strb.w	r5, [r0, #-2]
 8001e7a:	e7dc      	b.n	8001e36 <_SendPacket+0x32>
      *--pStartPacket = NumBytes;
 8001e7c:	1e70      	subs	r0, r6, #1
 8001e7e:	f806 3c01 	strb.w	r3, [r6, #-1]
 8001e82:	e7f0      	b.n	8001e66 <_SendPacket+0x62>
      *--pStartPacket = EventId;
 8001e84:	1e41      	subs	r1, r0, #1
 8001e86:	f800 5c01 	strb.w	r5, [r0, #-1]
 8001e8a:	e7d4      	b.n	8001e36 <_SendPacket+0x32>
  ENCODE_U32(pEndPacket, Delta);
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	f063 007f 	orn	r0, r3, #127	; 0x7f
 8001e92:	f802 0b01 	strb.w	r0, [r2], #1
 8001e96:	09db      	lsrs	r3, r3, #7
 8001e98:	4614      	mov	r4, r2
 8001e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e9c:	d8f6      	bhi.n	8001e8c <_SendPacket+0x88>
 8001e9e:	f804 3b01 	strb.w	r3, [r4], #1
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001ea2:	1a62      	subs	r2, r4, r1
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <_SendPacket+0xf4>)
 8001ea6:	7858      	ldrb	r0, [r3, #1]
 8001ea8:	f7fe fa1a 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001eac:	4604      	mov	r4, r0
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8001eae:	f7ff fba1 	bl	80015f4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8001eb2:	b1a4      	cbz	r4, 8001ede <_SendPacket+0xda>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <_SendPacket+0xf4>)
 8001eb6:	60dd      	str	r5, [r3, #12]
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <_SendPacket+0xf4>)
 8001eba:	7e1b      	ldrb	r3, [r3, #24]
 8001ebc:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <_SendPacket+0xfc>)
 8001ebe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001ec2:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001ec6:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 8001ec8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ecc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4299      	cmp	r1, r3
 8001ed4:	d002      	beq.n	8001edc <_SendPacket+0xd8>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <_SendPacket+0xf4>)
 8001ed8:	789b      	ldrb	r3, [r3, #2]
 8001eda:	b12b      	cbz	r3, 8001ee8 <_SendPacket+0xe4>
}
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001ede:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <_SendPacket+0xf4>)
 8001ee0:	7813      	ldrb	r3, [r2, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	7013      	strb	r3, [r2, #0]
 8001ee6:	e7e7      	b.n	8001eb8 <_SendPacket+0xb4>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001ee8:	4c03      	ldr	r4, [pc, #12]	; (8001ef8 <_SendPacket+0xf4>)
 8001eea:	2301      	movs	r3, #1
 8001eec:	70a3      	strb	r3, [r4, #2]
      _HandleIncomingPacket();
 8001eee:	f7ff ff39 	bl	8001d64 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	70a3      	strb	r3, [r4, #2]
}
 8001ef6:	e7f1      	b.n	8001edc <_SendPacket+0xd8>
 8001ef8:	24005704 	.word	0x24005704
 8001efc:	e0001000 	.word	0xe0001000
 8001f00:	24005240 	.word	0x24005240

08001f04 <SEGGER_SYSVIEW_RecordVoid>:
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001f04:	b538      	push	{r3, r4, r5, lr}
 8001f06:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001f08:	f3ef 8511 	mrs	r5, BASEPRI
 8001f0c:	f04f 0120 	mov.w	r1, #32
 8001f10:	f381 8811 	msr	BASEPRI, r1
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <SEGGER_SYSVIEW_RecordVoid+0x24>)
 8001f16:	f7ff fe11 	bl	8001b3c <_PreparePacket>
 8001f1a:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001f1c:	4622      	mov	r2, r4
 8001f1e:	f7ff ff71 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8001f22:	f385 8811 	msr	BASEPRI, r5
}
 8001f26:	bd38      	pop	{r3, r4, r5, pc}
 8001f28:	24005b2c 	.word	0x24005b2c

08001f2c <SEGGER_SYSVIEW_RecordU32>:
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	4605      	mov	r5, r0
 8001f30:	460c      	mov	r4, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001f32:	f3ef 8611 	mrs	r6, BASEPRI
 8001f36:	f04f 0120 	mov.w	r1, #32
 8001f3a:	f381 8811 	msr	BASEPRI, r1
 8001f3e:	480a      	ldr	r0, [pc, #40]	; (8001f68 <SEGGER_SYSVIEW_RecordU32+0x3c>)
 8001f40:	f7ff fdfc 	bl	8001b3c <_PreparePacket>
  ENCODE_U32(pPayload, Value);
 8001f44:	4601      	mov	r1, r0
 8001f46:	e004      	b.n	8001f52 <SEGGER_SYSVIEW_RecordU32+0x26>
 8001f48:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8001f4c:	f801 3b01 	strb.w	r3, [r1], #1
 8001f50:	09e4      	lsrs	r4, r4, #7
 8001f52:	2c7f      	cmp	r4, #127	; 0x7f
 8001f54:	d8f8      	bhi.n	8001f48 <SEGGER_SYSVIEW_RecordU32+0x1c>
 8001f56:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	f7ff ff52 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8001f60:	f386 8811 	msr	BASEPRI, r6
}
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
 8001f66:	bf00      	nop
 8001f68:	24005b2c 	.word	0x24005b2c

08001f6c <SEGGER_SYSVIEW_RecordU32x2>:
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	4605      	mov	r5, r0
 8001f70:	460f      	mov	r7, r1
 8001f72:	4614      	mov	r4, r2
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001f74:	f3ef 8611 	mrs	r6, BASEPRI
 8001f78:	f04f 0120 	mov.w	r1, #32
 8001f7c:	f381 8811 	msr	BASEPRI, r1
 8001f80:	480e      	ldr	r0, [pc, #56]	; (8001fbc <SEGGER_SYSVIEW_RecordU32x2+0x50>)
 8001f82:	f7ff fddb 	bl	8001b3c <_PreparePacket>
  ENCODE_U32(pPayload, Para0);
 8001f86:	4601      	mov	r1, r0
 8001f88:	e004      	b.n	8001f94 <SEGGER_SYSVIEW_RecordU32x2+0x28>
 8001f8a:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8001f8e:	f801 3b01 	strb.w	r3, [r1], #1
 8001f92:	09ff      	lsrs	r7, r7, #7
 8001f94:	2f7f      	cmp	r7, #127	; 0x7f
 8001f96:	d8f8      	bhi.n	8001f8a <SEGGER_SYSVIEW_RecordU32x2+0x1e>
 8001f98:	f801 7b01 	strb.w	r7, [r1], #1
  ENCODE_U32(pPayload, Para1);
 8001f9c:	e004      	b.n	8001fa8 <SEGGER_SYSVIEW_RecordU32x2+0x3c>
 8001f9e:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8001fa2:	f801 3b01 	strb.w	r3, [r1], #1
 8001fa6:	09e4      	lsrs	r4, r4, #7
 8001fa8:	2c7f      	cmp	r4, #127	; 0x7f
 8001faa:	d8f8      	bhi.n	8001f9e <SEGGER_SYSVIEW_RecordU32x2+0x32>
 8001fac:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001fb0:	462a      	mov	r2, r5
 8001fb2:	f7ff ff27 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8001fb6:	f386 8811 	msr	BASEPRI, r6
}
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fbc:	24005b2c 	.word	0x24005b2c

08001fc0 <SEGGER_SYSVIEW_RecordSystime>:
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001fc0:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <SEGGER_SYSVIEW_RecordSystime+0x28>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	b143      	cbz	r3, 8001fda <SEGGER_SYSVIEW_RecordSystime+0x1a>
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	b133      	cbz	r3, 8001fda <SEGGER_SYSVIEW_RecordSystime+0x1a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001fcc:	4798      	blx	r3
 8001fce:	460a      	mov	r2, r1
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	200d      	movs	r0, #13
 8001fd4:	f7ff ffca 	bl	8001f6c <SEGGER_SYSVIEW_RecordU32x2>
}
 8001fd8:	bd08      	pop	{r3, pc}
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SEGGER_SYSVIEW_RecordSystime+0x2c>)
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	200c      	movs	r0, #12
 8001fe0:	f7ff ffa4 	bl	8001f2c <SEGGER_SYSVIEW_RecordU32>
}
 8001fe4:	e7f8      	b.n	8001fd8 <SEGGER_SYSVIEW_RecordSystime+0x18>
 8001fe6:	bf00      	nop
 8001fe8:	24005704 	.word	0x24005704
 8001fec:	e0001000 	.word	0xe0001000

08001ff0 <SEGGER_SYSVIEW_Stop>:
void SEGGER_SYSVIEW_Stop(void) {
 8001ff0:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001ff2:	f3ef 8411 	mrs	r4, BASEPRI
 8001ff6:	f04f 0120 	mov.w	r1, #32
 8001ffa:	f381 8811 	msr	BASEPRI, r1
 8001ffe:	4808      	ldr	r0, [pc, #32]	; (8002020 <SEGGER_SYSVIEW_Stop+0x30>)
 8002000:	f7ff fd9c 	bl	8001b3c <_PreparePacket>
  if (_SYSVIEW_Globals.EnableState) {
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <SEGGER_SYSVIEW_Stop+0x34>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b913      	cbnz	r3, 8002010 <SEGGER_SYSVIEW_Stop+0x20>
  RECORD_END();
 800200a:	f384 8811 	msr	BASEPRI, r4
}
 800200e:	bd10      	pop	{r4, pc}
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002010:	220b      	movs	r2, #11
 8002012:	4601      	mov	r1, r0
 8002014:	f7ff fef6 	bl	8001e04 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <SEGGER_SYSVIEW_Stop+0x34>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e7f4      	b.n	800200a <SEGGER_SYSVIEW_Stop+0x1a>
 8002020:	24005b2c 	.word	0x24005b2c
 8002024:	24005704 	.word	0x24005704

08002028 <SEGGER_SYSVIEW_GetSysDesc>:
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002028:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800202a:	f3ef 8411 	mrs	r4, BASEPRI
 800202e:	f04f 0120 	mov.w	r1, #32
 8002032:	f381 8811 	msr	BASEPRI, r1
 8002036:	481a      	ldr	r0, [pc, #104]	; (80020a0 <SEGGER_SYSVIEW_GetSysDesc+0x78>)
 8002038:	f7ff fd80 	bl	8001b3c <_PreparePacket>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4603      	mov	r3, r0
 8002042:	e004      	b.n	800204e <SEGGER_SYSVIEW_GetSysDesc+0x26>
 8002044:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8002048:	f803 1b01 	strb.w	r1, [r3], #1
 800204c:	09d2      	lsrs	r2, r2, #7
 800204e:	2a7f      	cmp	r2, #127	; 0x7f
 8002050:	d8f8      	bhi.n	8002044 <SEGGER_SYSVIEW_GetSysDesc+0x1c>
 8002052:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8002058:	6892      	ldr	r2, [r2, #8]
 800205a:	e004      	b.n	8002066 <SEGGER_SYSVIEW_GetSysDesc+0x3e>
 800205c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8002060:	f803 1b01 	strb.w	r1, [r3], #1
 8002064:	09d2      	lsrs	r2, r2, #7
 8002066:	2a7f      	cmp	r2, #127	; 0x7f
 8002068:	d8f8      	bhi.n	800205c <SEGGER_SYSVIEW_GetSysDesc+0x34>
 800206a:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800206e:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8002070:	6912      	ldr	r2, [r2, #16]
 8002072:	e004      	b.n	800207e <SEGGER_SYSVIEW_GetSysDesc+0x56>
 8002074:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8002078:	f803 1b01 	strb.w	r1, [r3], #1
 800207c:	09d2      	lsrs	r2, r2, #7
 800207e:	2a7f      	cmp	r2, #127	; 0x7f
 8002080:	d8f8      	bhi.n	8002074 <SEGGER_SYSVIEW_GetSysDesc+0x4c>
 8002082:	4619      	mov	r1, r3
 8002084:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002088:	2200      	movs	r2, #0
 800208a:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800208c:	2218      	movs	r2, #24
 800208e:	f7ff feb9 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8002092:	f384 8811 	msr	BASEPRI, r4
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002096:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <SEGGER_SYSVIEW_GetSysDesc+0x7c>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	b103      	cbz	r3, 800209e <SEGGER_SYSVIEW_GetSysDesc+0x76>
    _SYSVIEW_Globals.pfSendSysDesc();
 800209c:	4798      	blx	r3
}
 800209e:	bd10      	pop	{r4, pc}
 80020a0:	24005b2c 	.word	0x24005b2c
 80020a4:	24005704 	.word	0x24005704

080020a8 <SEGGER_SYSVIEW_SendTaskInfo>:
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	4606      	mov	r6, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80020ac:	f3ef 8511 	mrs	r5, BASEPRI
 80020b0:	f04f 0120 	mov.w	r1, #32
 80020b4:	f381 8811 	msr	BASEPRI, r1
 80020b8:	482a      	ldr	r0, [pc, #168]	; (8002164 <SEGGER_SYSVIEW_SendTaskInfo+0xbc>)
 80020ba:	f7ff fd3f 	bl	8001b3c <_PreparePacket>
 80020be:	4604      	mov	r4, r0
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80020c0:	6833      	ldr	r3, [r6, #0]
 80020c2:	4a29      	ldr	r2, [pc, #164]	; (8002168 <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 80020c4:	6912      	ldr	r2, [r2, #16]
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	e004      	b.n	80020d4 <SEGGER_SYSVIEW_SendTaskInfo+0x2c>
 80020ca:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80020ce:	f800 2b01 	strb.w	r2, [r0], #1
 80020d2:	09db      	lsrs	r3, r3, #7
 80020d4:	2b7f      	cmp	r3, #127	; 0x7f
 80020d6:	d8f8      	bhi.n	80020ca <SEGGER_SYSVIEW_SendTaskInfo+0x22>
 80020d8:	f800 3b01 	strb.w	r3, [r0], #1
  ENCODE_U32(pPayload, pInfo->Prio);
 80020dc:	68b3      	ldr	r3, [r6, #8]
 80020de:	e004      	b.n	80020ea <SEGGER_SYSVIEW_SendTaskInfo+0x42>
 80020e0:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80020e4:	f800 2b01 	strb.w	r2, [r0], #1
 80020e8:	09db      	lsrs	r3, r3, #7
 80020ea:	2b7f      	cmp	r3, #127	; 0x7f
 80020ec:	d8f8      	bhi.n	80020e0 <SEGGER_SYSVIEW_SendTaskInfo+0x38>
 80020ee:	f800 3b01 	strb.w	r3, [r0], #1
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80020f2:	2220      	movs	r2, #32
 80020f4:	6871      	ldr	r1, [r6, #4]
 80020f6:	f7ff fceb 	bl	8001ad0 <_EncodeStr>
 80020fa:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80020fc:	2209      	movs	r2, #9
 80020fe:	4620      	mov	r0, r4
 8002100:	f7ff fe80 	bl	8001e04 <_SendPacket>
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002104:	6832      	ldr	r2, [r6, #0]
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <SEGGER_SYSVIEW_SendTaskInfo+0xc0>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	1ad2      	subs	r2, r2, r3
 800210c:	4623      	mov	r3, r4
 800210e:	e004      	b.n	800211a <SEGGER_SYSVIEW_SendTaskInfo+0x72>
 8002110:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8002114:	f803 1b01 	strb.w	r1, [r3], #1
 8002118:	09d2      	lsrs	r2, r2, #7
 800211a:	2a7f      	cmp	r2, #127	; 0x7f
 800211c:	d8f8      	bhi.n	8002110 <SEGGER_SYSVIEW_SendTaskInfo+0x68>
 800211e:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002122:	68f2      	ldr	r2, [r6, #12]
 8002124:	e004      	b.n	8002130 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002126:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800212a:	f803 1b01 	strb.w	r1, [r3], #1
 800212e:	09d2      	lsrs	r2, r2, #7
 8002130:	2a7f      	cmp	r2, #127	; 0x7f
 8002132:	d8f8      	bhi.n	8002126 <SEGGER_SYSVIEW_SendTaskInfo+0x7e>
 8002134:	f803 2b01 	strb.w	r2, [r3], #1
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002138:	6932      	ldr	r2, [r6, #16]
 800213a:	e004      	b.n	8002146 <SEGGER_SYSVIEW_SendTaskInfo+0x9e>
 800213c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8002140:	f803 1b01 	strb.w	r1, [r3], #1
 8002144:	09d2      	lsrs	r2, r2, #7
 8002146:	2a7f      	cmp	r2, #127	; 0x7f
 8002148:	d8f8      	bhi.n	800213c <SEGGER_SYSVIEW_SendTaskInfo+0x94>
 800214a:	4619      	mov	r1, r3
 800214c:	f801 2b02 	strb.w	r2, [r1], #2
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002150:	2200      	movs	r2, #0
 8002152:	705a      	strb	r2, [r3, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002154:	2215      	movs	r2, #21
 8002156:	4620      	mov	r0, r4
 8002158:	f7ff fe54 	bl	8001e04 <_SendPacket>
  RECORD_END();
 800215c:	f385 8811 	msr	BASEPRI, r5
}
 8002160:	bd70      	pop	{r4, r5, r6, pc}
 8002162:	bf00      	nop
 8002164:	24005b2c 	.word	0x24005b2c
 8002168:	24005704 	.word	0x24005704

0800216c <SEGGER_SYSVIEW_SendSysDesc>:
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	4605      	mov	r5, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002170:	f3ef 8611 	mrs	r6, BASEPRI
 8002174:	f04f 0120 	mov.w	r1, #32
 8002178:	f381 8811 	msr	BASEPRI, r1
 800217c:	4807      	ldr	r0, [pc, #28]	; (800219c <SEGGER_SYSVIEW_SendSysDesc+0x30>)
 800217e:	f7ff fcdd 	bl	8001b3c <_PreparePacket>
 8002182:	4604      	mov	r4, r0
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	4629      	mov	r1, r5
 8002188:	f7ff fca2 	bl	8001ad0 <_EncodeStr>
 800218c:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800218e:	220e      	movs	r2, #14
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff fe37 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8002196:	f386 8811 	msr	BASEPRI, r6
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	24005b2c 	.word	0x24005b2c

080021a0 <SEGGER_SYSVIEW_OnIdle>:
void SEGGER_SYSVIEW_OnIdle(void) {
 80021a0:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80021a2:	f3ef 8411 	mrs	r4, BASEPRI
 80021a6:	f04f 0120 	mov.w	r1, #32
 80021aa:	f381 8811 	msr	BASEPRI, r1
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <SEGGER_SYSVIEW_OnIdle+0x24>)
 80021b0:	f7ff fcc4 	bl	8001b3c <_PreparePacket>
 80021b4:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80021b6:	2211      	movs	r2, #17
 80021b8:	f7ff fe24 	bl	8001e04 <_SendPacket>
  RECORD_END();
 80021bc:	f384 8811 	msr	BASEPRI, r4
}
 80021c0:	bd10      	pop	{r4, pc}
 80021c2:	bf00      	nop
 80021c4:	24005b2c 	.word	0x24005b2c

080021c8 <SEGGER_SYSVIEW_OnTaskCreate>:
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80021c8:	b538      	push	{r3, r4, r5, lr}
 80021ca:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80021cc:	f3ef 8511 	mrs	r5, BASEPRI
 80021d0:	f04f 0120 	mov.w	r1, #32
 80021d4:	f381 8811 	msr	BASEPRI, r1
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <SEGGER_SYSVIEW_OnTaskCreate+0x40>)
 80021da:	f7ff fcaf 	bl	8001b3c <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <SEGGER_SYSVIEW_OnTaskCreate+0x44>)
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 80021e4:	4601      	mov	r1, r0
 80021e6:	e004      	b.n	80021f2 <SEGGER_SYSVIEW_OnTaskCreate+0x2a>
 80021e8:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80021ec:	f801 2b01 	strb.w	r2, [r1], #1
 80021f0:	09db      	lsrs	r3, r3, #7
 80021f2:	2b7f      	cmp	r3, #127	; 0x7f
 80021f4:	d8f8      	bhi.n	80021e8 <SEGGER_SYSVIEW_OnTaskCreate+0x20>
 80021f6:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80021fa:	2208      	movs	r2, #8
 80021fc:	f7ff fe02 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8002200:	f385 8811 	msr	BASEPRI, r5
}
 8002204:	bd38      	pop	{r3, r4, r5, pc}
 8002206:	bf00      	nop
 8002208:	24005b2c 	.word	0x24005b2c
 800220c:	24005704 	.word	0x24005704

08002210 <SEGGER_SYSVIEW_OnTaskStartExec>:
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002214:	f3ef 8511 	mrs	r5, BASEPRI
 8002218:	f04f 0120 	mov.w	r1, #32
 800221c:	f381 8811 	msr	BASEPRI, r1
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <SEGGER_SYSVIEW_OnTaskStartExec+0x40>)
 8002222:	f7ff fc8b 	bl	8001b3c <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <SEGGER_SYSVIEW_OnTaskStartExec+0x44>)
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 800222c:	4601      	mov	r1, r0
 800222e:	e004      	b.n	800223a <SEGGER_SYSVIEW_OnTaskStartExec+0x2a>
 8002230:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8002234:	f801 2b01 	strb.w	r2, [r1], #1
 8002238:	09db      	lsrs	r3, r3, #7
 800223a:	2b7f      	cmp	r3, #127	; 0x7f
 800223c:	d8f8      	bhi.n	8002230 <SEGGER_SYSVIEW_OnTaskStartExec+0x20>
 800223e:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002242:	2204      	movs	r2, #4
 8002244:	f7ff fdde 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8002248:	f385 8811 	msr	BASEPRI, r5
}
 800224c:	bd38      	pop	{r3, r4, r5, pc}
 800224e:	bf00      	nop
 8002250:	24005b2c 	.word	0x24005b2c
 8002254:	24005704 	.word	0x24005704

08002258 <SEGGER_SYSVIEW_OnTaskStartReady>:
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002258:	b538      	push	{r3, r4, r5, lr}
 800225a:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800225c:	f3ef 8511 	mrs	r5, BASEPRI
 8002260:	f04f 0120 	mov.w	r1, #32
 8002264:	f381 8811 	msr	BASEPRI, r1
 8002268:	480b      	ldr	r0, [pc, #44]	; (8002298 <SEGGER_SYSVIEW_OnTaskStartReady+0x40>)
 800226a:	f7ff fc67 	bl	8001b3c <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <SEGGER_SYSVIEW_OnTaskStartReady+0x44>)
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	1ae3      	subs	r3, r4, r3
  ENCODE_U32(pPayload, TaskId);
 8002274:	4601      	mov	r1, r0
 8002276:	e004      	b.n	8002282 <SEGGER_SYSVIEW_OnTaskStartReady+0x2a>
 8002278:	f063 027f 	orn	r2, r3, #127	; 0x7f
 800227c:	f801 2b01 	strb.w	r2, [r1], #1
 8002280:	09db      	lsrs	r3, r3, #7
 8002282:	2b7f      	cmp	r3, #127	; 0x7f
 8002284:	d8f8      	bhi.n	8002278 <SEGGER_SYSVIEW_OnTaskStartReady+0x20>
 8002286:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800228a:	2206      	movs	r2, #6
 800228c:	f7ff fdba 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8002290:	f385 8811 	msr	BASEPRI, r5
}
 8002294:	bd38      	pop	{r3, r4, r5, pc}
 8002296:	bf00      	nop
 8002298:	24005b2c 	.word	0x24005b2c
 800229c:	24005704 	.word	0x24005704

080022a0 <SEGGER_SYSVIEW_OnTaskStopReady>:
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	4606      	mov	r6, r0
 80022a4:	460c      	mov	r4, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80022a6:	f3ef 8511 	mrs	r5, BASEPRI
 80022aa:	f04f 0120 	mov.w	r1, #32
 80022ae:	f381 8811 	msr	BASEPRI, r1
 80022b2:	4810      	ldr	r0, [pc, #64]	; (80022f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x54>)
 80022b4:	f7ff fc42 	bl	8001b3c <_PreparePacket>
  TaskId = SHRINK_ID(TaskId);
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x58>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	1af3      	subs	r3, r6, r3
  ENCODE_U32(pPayload, TaskId);
 80022be:	4601      	mov	r1, r0
 80022c0:	e004      	b.n	80022cc <SEGGER_SYSVIEW_OnTaskStopReady+0x2c>
 80022c2:	f063 027f 	orn	r2, r3, #127	; 0x7f
 80022c6:	f801 2b01 	strb.w	r2, [r1], #1
 80022ca:	09db      	lsrs	r3, r3, #7
 80022cc:	2b7f      	cmp	r3, #127	; 0x7f
 80022ce:	d8f8      	bhi.n	80022c2 <SEGGER_SYSVIEW_OnTaskStopReady+0x22>
 80022d0:	f801 3b01 	strb.w	r3, [r1], #1
  ENCODE_U32(pPayload, Cause);
 80022d4:	e004      	b.n	80022e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x40>
 80022d6:	f064 037f 	orn	r3, r4, #127	; 0x7f
 80022da:	f801 3b01 	strb.w	r3, [r1], #1
 80022de:	09e4      	lsrs	r4, r4, #7
 80022e0:	2c7f      	cmp	r4, #127	; 0x7f
 80022e2:	d8f8      	bhi.n	80022d6 <SEGGER_SYSVIEW_OnTaskStopReady+0x36>
 80022e4:	f801 4b01 	strb.w	r4, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80022e8:	2207      	movs	r2, #7
 80022ea:	f7ff fd8b 	bl	8001e04 <_SendPacket>
  RECORD_END();
 80022ee:	f385 8811 	msr	BASEPRI, r5
}
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	24005b2c 	.word	0x24005b2c
 80022f8:	24005704 	.word	0x24005704

080022fc <SEGGER_SYSVIEW_SendModule>:
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_pFirstModule != 0) {
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <SEGGER_SYSVIEW_SendModule+0x70>)
 8002300:	681c      	ldr	r4, [r3, #0]
 8002302:	b394      	cbz	r4, 800236a <SEGGER_SYSVIEW_SendModule+0x6e>
    for (n = 0; n < ModuleId; n++) {
 8002304:	2300      	movs	r3, #0
 8002306:	4607      	mov	r7, r0
 8002308:	4298      	cmp	r0, r3
 800230a:	d903      	bls.n	8002314 <SEGGER_SYSVIEW_SendModule+0x18>
      pModule = pModule->pNext;
 800230c:	6924      	ldr	r4, [r4, #16]
      if (pModule == 0) {
 800230e:	b10c      	cbz	r4, 8002314 <SEGGER_SYSVIEW_SendModule+0x18>
    for (n = 0; n < ModuleId; n++) {
 8002310:	3301      	adds	r3, #1
 8002312:	e7f8      	b.n	8002306 <SEGGER_SYSVIEW_SendModule+0xa>
    if (pModule != 0) {
 8002314:	b34c      	cbz	r4, 800236a <SEGGER_SYSVIEW_SendModule+0x6e>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002316:	f3ef 8611 	mrs	r6, BASEPRI
 800231a:	f04f 0120 	mov.w	r1, #32
 800231e:	f381 8811 	msr	BASEPRI, r1
 8002322:	4813      	ldr	r0, [pc, #76]	; (8002370 <SEGGER_SYSVIEW_SendModule+0x74>)
 8002324:	f7ff fc0a 	bl	8001b3c <_PreparePacket>
 8002328:	4605      	mov	r5, r0
      ENCODE_U32(pPayload, ModuleId);
 800232a:	e004      	b.n	8002336 <SEGGER_SYSVIEW_SendModule+0x3a>
 800232c:	f067 037f 	orn	r3, r7, #127	; 0x7f
 8002330:	f800 3b01 	strb.w	r3, [r0], #1
 8002334:	09ff      	lsrs	r7, r7, #7
 8002336:	2f7f      	cmp	r7, #127	; 0x7f
 8002338:	d8f8      	bhi.n	800232c <SEGGER_SYSVIEW_SendModule+0x30>
 800233a:	f800 7b01 	strb.w	r7, [r0], #1
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800233e:	68a3      	ldr	r3, [r4, #8]
 8002340:	e004      	b.n	800234c <SEGGER_SYSVIEW_SendModule+0x50>
 8002342:	f063 027f 	orn	r2, r3, #127	; 0x7f
 8002346:	f800 2b01 	strb.w	r2, [r0], #1
 800234a:	09db      	lsrs	r3, r3, #7
 800234c:	2b7f      	cmp	r3, #127	; 0x7f
 800234e:	d8f8      	bhi.n	8002342 <SEGGER_SYSVIEW_SendModule+0x46>
 8002350:	f800 3b01 	strb.w	r3, [r0], #1
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	6821      	ldr	r1, [r4, #0]
 8002358:	f7ff fbba 	bl	8001ad0 <_EncodeStr>
 800235c:	4601      	mov	r1, r0
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800235e:	2216      	movs	r2, #22
 8002360:	4628      	mov	r0, r5
 8002362:	f7ff fd4f 	bl	8001e04 <_SendPacket>
      RECORD_END();
 8002366:	f386 8811 	msr	BASEPRI, r6
}
 800236a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800236c:	24005c10 	.word	0x24005c10
 8002370:	24005b2c 	.word	0x24005b2c

08002374 <_StoreChar>:
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4604      	mov	r4, r0
  Cnt = p->Cnt;
 8002378:	6903      	ldr	r3, [r0, #16]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800237a:	3301      	adds	r3, #1
 800237c:	2b80      	cmp	r3, #128	; 0x80
 800237e:	d804      	bhi.n	800238a <_StoreChar+0x16>
    *(p->pPayload++) = c;
 8002380:	6842      	ldr	r2, [r0, #4]
 8002382:	1c50      	adds	r0, r2, #1
 8002384:	6060      	str	r0, [r4, #4]
 8002386:	7011      	strb	r1, [r2, #0]
    p->Cnt = Cnt + 1u;
 8002388:	6123      	str	r3, [r4, #16]
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800238a:	6923      	ldr	r3, [r4, #16]
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d000      	beq.n	8002392 <_StoreChar+0x1e>
}
 8002390:	bd38      	pop	{r3, r4, r5, pc}
    *(p->pPayloadStart) = p->Cnt;
 8002392:	68a2      	ldr	r2, [r4, #8]
 8002394:	7013      	strb	r3, [r2, #0]
    pPayload = p->pPayload;
 8002396:	6863      	ldr	r3, [r4, #4]
    Options = p->Options;
 8002398:	68e2      	ldr	r2, [r4, #12]
    ENCODE_U32(pPayload, Options);
 800239a:	e004      	b.n	80023a6 <_StoreChar+0x32>
 800239c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80023a0:	f803 1b01 	strb.w	r1, [r3], #1
 80023a4:	09d2      	lsrs	r2, r2, #7
 80023a6:	2a7f      	cmp	r2, #127	; 0x7f
 80023a8:	d8f8      	bhi.n	800239c <_StoreChar+0x28>
 80023aa:	4619      	mov	r1, r3
 80023ac:	f801 2b02 	strb.w	r2, [r1], #2
    ENCODE_U32(pPayload, 0);
 80023b0:	2500      	movs	r5, #0
 80023b2:	705d      	strb	r5, [r3, #1]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80023b4:	221a      	movs	r2, #26
 80023b6:	68a0      	ldr	r0, [r4, #8]
 80023b8:	f7ff fd24 	bl	8001e04 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80023bc:	6820      	ldr	r0, [r4, #0]
 80023be:	f7ff fbbd 	bl	8001b3c <_PreparePacket>
 80023c2:	60a0      	str	r0, [r4, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80023c4:	3001      	adds	r0, #1
 80023c6:	6060      	str	r0, [r4, #4]
    p->Cnt = 0u;
 80023c8:	6125      	str	r5, [r4, #16]
}
 80023ca:	e7e1      	b.n	8002390 <_StoreChar+0x1c>

080023cc <_PrintUnsigned>:
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80023cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d0:	4681      	mov	r9, r0
 80023d2:	460f      	mov	r7, r1
 80023d4:	4615      	mov	r5, r2
 80023d6:	461e      	mov	r6, r3
 80023d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80023dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  Number = v;
 80023de:	460b      	mov	r3, r1
  Width = 1u;
 80023e0:	f04f 0801 	mov.w	r8, #1
  while (Number >= Base) {
 80023e4:	e003      	b.n	80023ee <_PrintUnsigned+0x22>
    Number = (Number / Base);
 80023e6:	fbb3 f3f5 	udiv	r3, r3, r5
    Width++;
 80023ea:	f108 0801 	add.w	r8, r8, #1
  while (Number >= Base) {
 80023ee:	42ab      	cmp	r3, r5
 80023f0:	d2f9      	bcs.n	80023e6 <_PrintUnsigned+0x1a>
  if (NumDigits > Width) {
 80023f2:	45b0      	cmp	r8, r6
 80023f4:	d200      	bcs.n	80023f8 <_PrintUnsigned+0x2c>
    Width = NumDigits;
 80023f6:	46b0      	mov	r8, r6
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80023f8:	f012 0b01 	ands.w	fp, r2, #1
 80023fc:	d110      	bne.n	8002420 <_PrintUnsigned+0x54>
    if (FieldWidth != 0u) {
 80023fe:	f1ba 0f00 	cmp.w	sl, #0
 8002402:	d00d      	beq.n	8002420 <_PrintUnsigned+0x54>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002404:	f012 0f02 	tst.w	r2, #2
 8002408:	d00c      	beq.n	8002424 <_PrintUnsigned+0x58>
 800240a:	b16e      	cbz	r6, 8002428 <_PrintUnsigned+0x5c>
        c = ' ';
 800240c:	2420      	movs	r4, #32
 800240e:	e005      	b.n	800241c <_PrintUnsigned+0x50>
        FieldWidth--;
 8002410:	f10a 3aff 	add.w	sl, sl, #4294967295
        _StoreChar(pBufferDesc, c);
 8002414:	4621      	mov	r1, r4
 8002416:	4648      	mov	r0, r9
 8002418:	f7ff ffac 	bl	8002374 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800241c:	45c2      	cmp	sl, r8
 800241e:	d8f7      	bhi.n	8002410 <_PrintUnsigned+0x44>
        c = ' ';
 8002420:	2401      	movs	r4, #1
 8002422:	e006      	b.n	8002432 <_PrintUnsigned+0x66>
 8002424:	2420      	movs	r4, #32
 8002426:	e7f9      	b.n	800241c <_PrintUnsigned+0x50>
        c = '0';
 8002428:	2430      	movs	r4, #48	; 0x30
 800242a:	e7f7      	b.n	800241c <_PrintUnsigned+0x50>
      NumDigits--;
 800242c:	3e01      	subs	r6, #1
    Digit *= Base;
 800242e:	fb05 f404 	mul.w	r4, r5, r4
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002432:	2e01      	cmp	r6, #1
 8002434:	d8fa      	bhi.n	800242c <_PrintUnsigned+0x60>
      Div = v / Digit;
 8002436:	fbb7 f3f4 	udiv	r3, r7, r4
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800243a:	429d      	cmp	r5, r3
 800243c:	d9f7      	bls.n	800242e <_PrintUnsigned+0x62>
    Div = v / Digit;
 800243e:	fbb7 f3f4 	udiv	r3, r7, r4
    v -= Div * Digit;
 8002442:	fb04 7713 	mls	r7, r4, r3, r7
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <_PrintUnsigned+0xb0>)
 8002448:	5cd1      	ldrb	r1, [r2, r3]
 800244a:	4648      	mov	r0, r9
 800244c:	f7ff ff92 	bl	8002374 <_StoreChar>
    Digit /= Base;
 8002450:	4623      	mov	r3, r4
 8002452:	fbb4 f4f5 	udiv	r4, r4, r5
  } while (Digit);
 8002456:	42ab      	cmp	r3, r5
 8002458:	d2f1      	bcs.n	800243e <_PrintUnsigned+0x72>
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800245a:	f1bb 0f00 	cmp.w	fp, #0
 800245e:	d002      	beq.n	8002466 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
 8002460:	f1ba 0f00 	cmp.w	sl, #0
 8002464:	d107      	bne.n	8002476 <_PrintUnsigned+0xaa>
}
 8002466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        FieldWidth--;
 800246a:	f10a 3aff 	add.w	sl, sl, #4294967295
        _StoreChar(pBufferDesc, ' ');
 800246e:	2120      	movs	r1, #32
 8002470:	4648      	mov	r0, r9
 8002472:	f7ff ff7f 	bl	8002374 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002476:	45c2      	cmp	sl, r8
 8002478:	d8f7      	bhi.n	800246a <_PrintUnsigned+0x9e>
 800247a:	e7f4      	b.n	8002466 <_PrintUnsigned+0x9a>
 800247c:	08006a54 	.word	0x08006a54

08002480 <_PrintInt>:
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	4680      	mov	r8, r0
 8002488:	460f      	mov	r7, r1
 800248a:	4614      	mov	r4, r2
 800248c:	4699      	mov	r9, r3
 800248e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002490:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  Number = (v < 0) ? -v : v;
 8002494:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8002498:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
  Width = 1u;
 800249c:	2501      	movs	r5, #1
  while (Number >= (int)Base) {
 800249e:	e002      	b.n	80024a6 <_PrintInt+0x26>
    Number = (Number / (int)Base);
 80024a0:	fb9c fcf4 	sdiv	ip, ip, r4
    Width++;
 80024a4:	3501      	adds	r5, #1
  while (Number >= (int)Base) {
 80024a6:	4564      	cmp	r4, ip
 80024a8:	ddfa      	ble.n	80024a0 <_PrintInt+0x20>
  if (NumDigits > Width) {
 80024aa:	454d      	cmp	r5, r9
 80024ac:	d200      	bcs.n	80024b0 <_PrintInt+0x30>
    Width = NumDigits;
 80024ae:	464d      	mov	r5, r9
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80024b0:	b12e      	cbz	r6, 80024be <_PrintInt+0x3e>
 80024b2:	2f00      	cmp	r7, #0
 80024b4:	db02      	blt.n	80024bc <_PrintInt+0x3c>
 80024b6:	f01a 0f04 	tst.w	sl, #4
 80024ba:	d000      	beq.n	80024be <_PrintInt+0x3e>
    FieldWidth--;
 80024bc:	3e01      	subs	r6, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80024be:	f01a 0f02 	tst.w	sl, #2
 80024c2:	d002      	beq.n	80024ca <_PrintInt+0x4a>
 80024c4:	f1b9 0f00 	cmp.w	r9, #0
 80024c8:	d003      	beq.n	80024d2 <_PrintInt+0x52>
 80024ca:	f01a 0f01 	tst.w	sl, #1
 80024ce:	d100      	bne.n	80024d2 <_PrintInt+0x52>
    if (FieldWidth != 0u) {
 80024d0:	b9ce      	cbnz	r6, 8002506 <_PrintInt+0x86>
  if (v < 0) {
 80024d2:	2f00      	cmp	r7, #0
 80024d4:	db1a      	blt.n	800250c <_PrintInt+0x8c>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80024d6:	f01a 0f04 	tst.w	sl, #4
 80024da:	d11d      	bne.n	8002518 <_PrintInt+0x98>
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80024dc:	f00a 0303 	and.w	r3, sl, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d01e      	beq.n	8002522 <_PrintInt+0xa2>
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80024e4:	f8cd a004 	str.w	sl, [sp, #4]
 80024e8:	9600      	str	r6, [sp, #0]
 80024ea:	464b      	mov	r3, r9
 80024ec:	4622      	mov	r2, r4
 80024ee:	4639      	mov	r1, r7
 80024f0:	4640      	mov	r0, r8
 80024f2:	f7ff ff6b 	bl	80023cc <_PrintUnsigned>
}
 80024f6:	b002      	add	sp, #8
 80024f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        FieldWidth--;
 80024fc:	3e01      	subs	r6, #1
        _StoreChar(pBufferDesc, ' ');
 80024fe:	2120      	movs	r1, #32
 8002500:	4640      	mov	r0, r8
 8002502:	f7ff ff37 	bl	8002374 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002506:	42ae      	cmp	r6, r5
 8002508:	d8f8      	bhi.n	80024fc <_PrintInt+0x7c>
 800250a:	e7e2      	b.n	80024d2 <_PrintInt+0x52>
    v = -v;
 800250c:	427f      	negs	r7, r7
    _StoreChar(pBufferDesc, '-');
 800250e:	212d      	movs	r1, #45	; 0x2d
 8002510:	4640      	mov	r0, r8
 8002512:	f7ff ff2f 	bl	8002374 <_StoreChar>
 8002516:	e7e1      	b.n	80024dc <_PrintInt+0x5c>
    _StoreChar(pBufferDesc, '+');
 8002518:	212b      	movs	r1, #43	; 0x2b
 800251a:	4640      	mov	r0, r8
 800251c:	f7ff ff2a 	bl	8002374 <_StoreChar>
 8002520:	e7dc      	b.n	80024dc <_PrintInt+0x5c>
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8002522:	f1b9 0f00 	cmp.w	r9, #0
 8002526:	d1dd      	bne.n	80024e4 <_PrintInt+0x64>
    if (FieldWidth != 0u) {
 8002528:	b92e      	cbnz	r6, 8002536 <_PrintInt+0xb6>
 800252a:	e7db      	b.n	80024e4 <_PrintInt+0x64>
        FieldWidth--;
 800252c:	3e01      	subs	r6, #1
        _StoreChar(pBufferDesc, '0');
 800252e:	2130      	movs	r1, #48	; 0x30
 8002530:	4640      	mov	r0, r8
 8002532:	f7ff ff1f 	bl	8002374 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002536:	42ae      	cmp	r6, r5
 8002538:	d8f8      	bhi.n	800252c <_PrintInt+0xac>
 800253a:	e7d3      	b.n	80024e4 <_PrintInt+0x64>

0800253c <_VPrintTarget>:
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800253c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002540:	b088      	sub	sp, #32
 8002542:	4604      	mov	r4, r0
 8002544:	460f      	mov	r7, r1
 8002546:	4615      	mov	r5, r2
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002548:	f3ef 8611 	mrs	r6, BASEPRI
 800254c:	f04f 0120 	mov.w	r1, #32
 8002550:	f381 8811 	msr	BASEPRI, r1
 8002554:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002740 <_VPrintTarget+0x204>
 8002558:	4640      	mov	r0, r8
 800255a:	f7ff faef 	bl	8001b3c <_PreparePacket>
  BufferDesc.pBuffer        = _aPacket;
 800255e:	f8cd 800c 	str.w	r8, [sp, #12]
  BufferDesc.Cnt            = 0u;
 8002562:	2300      	movs	r3, #0
 8002564:	9307      	str	r3, [sp, #28]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8002566:	9005      	str	r0, [sp, #20]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8002568:	3001      	adds	r0, #1
 800256a:	9004      	str	r0, [sp, #16]
  BufferDesc.Options        =  Options;
 800256c:	9706      	str	r7, [sp, #24]
 800256e:	e089      	b.n	8002684 <_VPrintTarget+0x148>
      FormatFlags = 0u;
 8002570:	2700      	movs	r7, #0
      v = 1;
 8002572:	2201      	movs	r2, #1
 8002574:	e011      	b.n	800259a <_VPrintTarget+0x5e>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002576:	f047 0701 	orr.w	r7, r7, #1
 800257a:	3401      	adds	r4, #1
 800257c:	e00c      	b.n	8002598 <_VPrintTarget+0x5c>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800257e:	f047 0702 	orr.w	r7, r7, #2
 8002582:	3401      	adds	r4, #1
 8002584:	e008      	b.n	8002598 <_VPrintTarget+0x5c>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002586:	f047 0704 	orr.w	r7, r7, #4
 800258a:	3401      	adds	r4, #1
 800258c:	e004      	b.n	8002598 <_VPrintTarget+0x5c>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800258e:	f047 0708 	orr.w	r7, r7, #8
 8002592:	3401      	adds	r4, #1
 8002594:	e000      	b.n	8002598 <_VPrintTarget+0x5c>
        switch (c) {
 8002596:	2200      	movs	r2, #0
      } while (v);
 8002598:	b312      	cbz	r2, 80025e0 <_VPrintTarget+0xa4>
        c = *sFormat;
 800259a:	7823      	ldrb	r3, [r4, #0]
        switch (c) {
 800259c:	3b23      	subs	r3, #35	; 0x23
 800259e:	2b0d      	cmp	r3, #13
 80025a0:	d8f9      	bhi.n	8002596 <_VPrintTarget+0x5a>
 80025a2:	a101      	add	r1, pc, #4	; (adr r1, 80025a8 <_VPrintTarget+0x6c>)
 80025a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025a8:	0800258f 	.word	0x0800258f
 80025ac:	08002597 	.word	0x08002597
 80025b0:	08002597 	.word	0x08002597
 80025b4:	08002597 	.word	0x08002597
 80025b8:	08002597 	.word	0x08002597
 80025bc:	08002597 	.word	0x08002597
 80025c0:	08002597 	.word	0x08002597
 80025c4:	08002597 	.word	0x08002597
 80025c8:	08002587 	.word	0x08002587
 80025cc:	08002597 	.word	0x08002597
 80025d0:	08002577 	.word	0x08002577
 80025d4:	08002597 	.word	0x08002597
 80025d8:	08002597 	.word	0x08002597
 80025dc:	0800257f 	.word	0x0800257f
      FieldWidth = 0u;
 80025e0:	2000      	movs	r0, #0
        c = *sFormat;
 80025e2:	7823      	ldrb	r3, [r4, #0]
        if ((c < '0') || (c > '9')) {
 80025e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	2a09      	cmp	r2, #9
 80025ec:	d807      	bhi.n	80025fe <_VPrintTarget+0xc2>
        sFormat++;
 80025ee:	3401      	adds	r4, #1
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80025f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80025f8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
        c = *sFormat;
 80025fc:	e7f1      	b.n	80025e2 <_VPrintTarget+0xa6>
      if (c == '.') {
 80025fe:	2b2e      	cmp	r3, #46	; 0x2e
 8002600:	d008      	beq.n	8002614 <_VPrintTarget+0xd8>
      NumDigits = 0u;
 8002602:	2300      	movs	r3, #0
      c = *sFormat;
 8002604:	7822      	ldrb	r2, [r4, #0]
        if ((c == 'l') || (c == 'h')) {
 8002606:	2a68      	cmp	r2, #104	; 0x68
 8002608:	bf18      	it	ne
 800260a:	2a6c      	cmpne	r2, #108	; 0x6c
 800260c:	d112      	bne.n	8002634 <_VPrintTarget+0xf8>
          c = *sFormat;
 800260e:	f814 2b01 	ldrb.w	r2, [r4], #1
        if ((c == 'l') || (c == 'h')) {
 8002612:	e7f8      	b.n	8002606 <_VPrintTarget+0xca>
        sFormat++;
 8002614:	3401      	adds	r4, #1
      NumDigits = 0u;
 8002616:	2300      	movs	r3, #0
 8002618:	e005      	b.n	8002626 <_VPrintTarget+0xea>
          sFormat++;
 800261a:	3401      	adds	r4, #1
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800261c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002620:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002624:	3b30      	subs	r3, #48	; 0x30
          c = *sFormat;
 8002626:	7822      	ldrb	r2, [r4, #0]
          if ((c < '0') || (c > '9')) {
 8002628:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800262c:	b2c9      	uxtb	r1, r1
 800262e:	2909      	cmp	r1, #9
 8002630:	d9f3      	bls.n	800261a <_VPrintTarget+0xde>
 8002632:	e7e7      	b.n	8002604 <_VPrintTarget+0xc8>
      switch (c) {
 8002634:	2a25      	cmp	r2, #37	; 0x25
 8002636:	d05e      	beq.n	80026f6 <_VPrintTarget+0x1ba>
 8002638:	d320      	bcc.n	800267c <_VPrintTarget+0x140>
 800263a:	2a78      	cmp	r2, #120	; 0x78
 800263c:	d81e      	bhi.n	800267c <_VPrintTarget+0x140>
 800263e:	2a58      	cmp	r2, #88	; 0x58
 8002640:	d31c      	bcc.n	800267c <_VPrintTarget+0x140>
 8002642:	3a58      	subs	r2, #88	; 0x58
 8002644:	2a20      	cmp	r2, #32
 8002646:	d819      	bhi.n	800267c <_VPrintTarget+0x140>
 8002648:	e8df f002 	tbb	[pc, r2]
 800264c:	1818183d 	.word	0x1818183d
 8002650:	18181818 	.word	0x18181818
 8002654:	11181818 	.word	0x11181818
 8002658:	18181827 	.word	0x18181827
 800265c:	18181818 	.word	0x18181818
 8002660:	18181818 	.word	0x18181818
 8002664:	18181848 	.word	0x18181848
 8002668:	18183218 	.word	0x18183218
 800266c:	3d          	.byte	0x3d
 800266d:	00          	.byte	0x00
        v = va_arg(*pParamList, int);
 800266e:	682b      	ldr	r3, [r5, #0]
 8002670:	1d1a      	adds	r2, r3, #4
 8002672:	602a      	str	r2, [r5, #0]
        _StoreChar(&BufferDesc, c0);
 8002674:	7819      	ldrb	r1, [r3, #0]
 8002676:	a803      	add	r0, sp, #12
 8002678:	f7ff fe7c 	bl	8002374 <_StoreChar>
      sFormat++;
 800267c:	3401      	adds	r4, #1
  } while (*sFormat);
 800267e:	7823      	ldrb	r3, [r4, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d03d      	beq.n	8002700 <_VPrintTarget+0x1c4>
    c = *sFormat;
 8002684:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0u) {
 8002688:	2900      	cmp	r1, #0
 800268a:	d039      	beq.n	8002700 <_VPrintTarget+0x1c4>
    if (c == '%') {
 800268c:	2925      	cmp	r1, #37	; 0x25
 800268e:	f43f af6f 	beq.w	8002570 <_VPrintTarget+0x34>
      _StoreChar(&BufferDesc, c);
 8002692:	a803      	add	r0, sp, #12
 8002694:	f7ff fe6e 	bl	8002374 <_StoreChar>
 8002698:	e7f1      	b.n	800267e <_VPrintTarget+0x142>
        v = va_arg(*pParamList, int);
 800269a:	682a      	ldr	r2, [r5, #0]
 800269c:	1d11      	adds	r1, r2, #4
 800269e:	6029      	str	r1, [r5, #0]
 80026a0:	6811      	ldr	r1, [r2, #0]
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80026a2:	9701      	str	r7, [sp, #4]
 80026a4:	9000      	str	r0, [sp, #0]
 80026a6:	220a      	movs	r2, #10
 80026a8:	a803      	add	r0, sp, #12
 80026aa:	f7ff fee9 	bl	8002480 <_PrintInt>
        break;
 80026ae:	e7e5      	b.n	800267c <_VPrintTarget+0x140>
        v = va_arg(*pParamList, int);
 80026b0:	682a      	ldr	r2, [r5, #0]
 80026b2:	1d11      	adds	r1, r2, #4
 80026b4:	6029      	str	r1, [r5, #0]
 80026b6:	6811      	ldr	r1, [r2, #0]
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80026b8:	9701      	str	r7, [sp, #4]
 80026ba:	9000      	str	r0, [sp, #0]
 80026bc:	220a      	movs	r2, #10
 80026be:	a803      	add	r0, sp, #12
 80026c0:	f7ff fe84 	bl	80023cc <_PrintUnsigned>
        break;
 80026c4:	e7da      	b.n	800267c <_VPrintTarget+0x140>
        v = va_arg(*pParamList, int);
 80026c6:	682a      	ldr	r2, [r5, #0]
 80026c8:	1d11      	adds	r1, r2, #4
 80026ca:	6029      	str	r1, [r5, #0]
 80026cc:	6811      	ldr	r1, [r2, #0]
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80026ce:	9701      	str	r7, [sp, #4]
 80026d0:	9000      	str	r0, [sp, #0]
 80026d2:	2210      	movs	r2, #16
 80026d4:	a803      	add	r0, sp, #12
 80026d6:	f7ff fe79 	bl	80023cc <_PrintUnsigned>
        break;
 80026da:	e7cf      	b.n	800267c <_VPrintTarget+0x140>
        v = va_arg(*pParamList, int);
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	1d1a      	adds	r2, r3, #4
 80026e0:	602a      	str	r2, [r5, #0]
 80026e2:	6819      	ldr	r1, [r3, #0]
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80026e4:	2300      	movs	r3, #0
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	2308      	movs	r3, #8
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2210      	movs	r2, #16
 80026ee:	a803      	add	r0, sp, #12
 80026f0:	f7ff fe6c 	bl	80023cc <_PrintUnsigned>
        break;
 80026f4:	e7c2      	b.n	800267c <_VPrintTarget+0x140>
        _StoreChar(&BufferDesc, '%');
 80026f6:	2125      	movs	r1, #37	; 0x25
 80026f8:	a803      	add	r0, sp, #12
 80026fa:	f7ff fe3b 	bl	8002374 <_StoreChar>
        break;
 80026fe:	e7bd      	b.n	800267c <_VPrintTarget+0x140>
  if (BufferDesc.Cnt != 0u) {
 8002700:	9b07      	ldr	r3, [sp, #28]
 8002702:	b1bb      	cbz	r3, 8002734 <_VPrintTarget+0x1f8>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8002704:	9a05      	ldr	r2, [sp, #20]
 8002706:	7013      	strb	r3, [r2, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8002708:	9b04      	ldr	r3, [sp, #16]
 800270a:	9a06      	ldr	r2, [sp, #24]
 800270c:	e004      	b.n	8002718 <_VPrintTarget+0x1dc>
 800270e:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8002712:	f803 1b01 	strb.w	r1, [r3], #1
 8002716:	09d2      	lsrs	r2, r2, #7
 8002718:	2a7f      	cmp	r2, #127	; 0x7f
 800271a:	d8f8      	bhi.n	800270e <_VPrintTarget+0x1d2>
 800271c:	4619      	mov	r1, r3
 800271e:	f801 2b01 	strb.w	r2, [r1], #1
 8002722:	9104      	str	r1, [sp, #16]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8002724:	3101      	adds	r1, #1
 8002726:	2200      	movs	r2, #0
 8002728:	705a      	strb	r2, [r3, #1]
 800272a:	9104      	str	r1, [sp, #16]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800272c:	221a      	movs	r2, #26
 800272e:	9805      	ldr	r0, [sp, #20]
 8002730:	f7ff fb68 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8002734:	f386 8811 	msr	BASEPRI, r6
}
 8002738:	b008      	add	sp, #32
 800273a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800273e:	bf00      	nop
 8002740:	24005b2c 	.word	0x24005b2c

08002744 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8002744:	b40f      	push	{r0, r1, r2, r3}
 8002746:	b500      	push	{lr}
 8002748:	b083      	sub	sp, #12
 800274a:	ab04      	add	r3, sp, #16
 800274c:	f853 0b04 	ldr.w	r0, [r3], #4
  va_list ParamList;

  va_start(ParamList, s);
 8002750:	9301      	str	r3, [sp, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8002752:	aa01      	add	r2, sp, #4
 8002754:	2100      	movs	r1, #0
 8002756:	f7ff fef1 	bl	800253c <_VPrintTarget>
  va_end(ParamList);
}
 800275a:	b003      	add	sp, #12
 800275c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002760:	b004      	add	sp, #16
 8002762:	4770      	bx	lr

08002764 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	4605      	mov	r5, r0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002768:	f3ef 8611 	mrs	r6, BASEPRI
 800276c:	f04f 0120 	mov.w	r1, #32
 8002770:	f381 8811 	msr	BASEPRI, r1
 8002774:	480a      	ldr	r0, [pc, #40]	; (80027a0 <SEGGER_SYSVIEW_Warn+0x3c>)
 8002776:	f7ff f9e1 	bl	8001b3c <_PreparePacket>
 800277a:	4604      	mov	r4, r0
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	4629      	mov	r1, r5
 8002780:	f7ff f9a6 	bl	8001ad0 <_EncodeStr>
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8002784:	4601      	mov	r1, r0
 8002786:	2301      	movs	r3, #1
 8002788:	f801 3b02 	strb.w	r3, [r1], #2
  ENCODE_U32(pPayload, 0);
 800278c:	2300      	movs	r3, #0
 800278e:	7043      	strb	r3, [r0, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002790:	221a      	movs	r2, #26
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fb36 	bl	8001e04 <_SendPacket>
  RECORD_END();
 8002798:	f386 8811 	msr	BASEPRI, r6
}
 800279c:	bd70      	pop	{r4, r5, r6, pc}
 800279e:	bf00      	nop
 80027a0:	24005b2c 	.word	0x24005b2c

080027a4 <SEGGER_SYSVIEW_IsStarted>:
int SEGGER_SYSVIEW_IsStarted(void) {
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <SEGGER_SYSVIEW_IsStarted+0x40>)
 80027a6:	7e1b      	ldrb	r3, [r3, #24]
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <SEGGER_SYSVIEW_IsStarted+0x44>)
 80027aa:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80027ae:	00c1      	lsls	r1, r0, #3
 80027b0:	4411      	add	r1, r2
 80027b2:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 80027b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027b8:	00d9      	lsls	r1, r3, #3
 80027ba:	440a      	add	r2, r1
 80027bc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80027be:	4298      	cmp	r0, r3
 80027c0:	d002      	beq.n	80027c8 <SEGGER_SYSVIEW_IsStarted+0x24>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <SEGGER_SYSVIEW_IsStarted+0x40>)
 80027c4:	789b      	ldrb	r3, [r3, #2]
 80027c6:	b113      	cbz	r3, 80027ce <SEGGER_SYSVIEW_IsStarted+0x2a>
      _SYSVIEW_Globals.RecursionCnt = 0;
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
}
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <SEGGER_SYSVIEW_IsStarted+0x40>)
 80027ca:	7818      	ldrb	r0, [r3, #0]
 80027cc:	4770      	bx	lr
int SEGGER_SYSVIEW_IsStarted(void) {
 80027ce:	b510      	push	{r4, lr}
      _SYSVIEW_Globals.RecursionCnt = 1;
 80027d0:	4c04      	ldr	r4, [pc, #16]	; (80027e4 <SEGGER_SYSVIEW_IsStarted+0x40>)
 80027d2:	2301      	movs	r3, #1
 80027d4:	70a3      	strb	r3, [r4, #2]
      _HandleIncomingPacket();
 80027d6:	f7ff fac5 	bl	8001d64 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	70a3      	strb	r3, [r4, #2]
}
 80027de:	4b01      	ldr	r3, [pc, #4]	; (80027e4 <SEGGER_SYSVIEW_IsStarted+0x40>)
 80027e0:	7818      	ldrb	r0, [r3, #0]
 80027e2:	bd10      	pop	{r4, pc}
 80027e4:	24005704 	.word	0x24005704
 80027e8:	24005240 	.word	0x24005240

080027ec <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 80027ec:	b508      	push	{r3, lr}
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 80027ee:	480f      	ldr	r0, [pc, #60]	; (800282c <Task_BlueLED_Handler+0x40>)
 80027f0:	f7ff ffa8 	bl	8002744 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 80027f4:	4c0e      	ldr	r4, [pc, #56]	; (8002830 <Task_BlueLED_Handler+0x44>)
 80027f6:	2104      	movs	r1, #4
 80027f8:	4620      	mov	r0, r4
 80027fa:	f001 f9b1 	bl	8003b60 <HAL_GPIO_TogglePin>

		// 400 system tickes -> needs to be converted to ms
		vTaskDelay(400);
 80027fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002802:	f7fe fa89 	bl	8000d18 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8002806:	2104      	movs	r1, #4
 8002808:	4620      	mov	r0, r4
 800280a:	f001 f9a9 	bl	8003b60 <HAL_GPIO_TogglePin>
		vTaskDelay(400);
 800280e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002812:	f7fe fa81 	bl	8000d18 <vTaskDelay>
		taskYIELD();
 8002816:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800281a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	f3bf 8f6f 	isb	sy
	while(1)
 800282a:	e7e0      	b.n	80027ee <Task_BlueLED_Handler+0x2>
 800282c:	08006a70 	.word	0x08006a70
 8002830:	58020800 	.word	0x58020800

08002834 <Task_RedLED_Handler>:
{
 8002834:	b508      	push	{r3, lr}
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8002836:	480f      	ldr	r0, [pc, #60]	; (8002874 <Task_RedLED_Handler+0x40>)
 8002838:	f7ff ff84 	bl	8002744 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800283c:	4c0e      	ldr	r4, [pc, #56]	; (8002878 <Task_RedLED_Handler+0x44>)
 800283e:	2101      	movs	r1, #1
 8002840:	4620      	mov	r0, r4
 8002842:	f001 f98d 	bl	8003b60 <HAL_GPIO_TogglePin>
		vTaskDelay(800);
 8002846:	f44f 7048 	mov.w	r0, #800	; 0x320
 800284a:	f7fe fa65 	bl	8000d18 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800284e:	2101      	movs	r1, #1
 8002850:	4620      	mov	r0, r4
 8002852:	f001 f985 	bl	8003b60 <HAL_GPIO_TogglePin>
		vTaskDelay(800);
 8002856:	f44f 7048 	mov.w	r0, #800	; 0x320
 800285a:	f7fe fa5d 	bl	8000d18 <vTaskDelay>
		taskYIELD();
 800285e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002866:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	f3bf 8f6f 	isb	sy
	while(1)
 8002872:	e7e0      	b.n	8002836 <Task_RedLED_Handler+0x2>
 8002874:	08006a84 	.word	0x08006a84
 8002878:	58020800 	.word	0x58020800

0800287c <Task_GreenLED_Handler>:
{
 800287c:	b508      	push	{r3, lr}
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 800287e:	480f      	ldr	r0, [pc, #60]	; (80028bc <Task_GreenLED_Handler+0x40>)
 8002880:	f7ff ff60 	bl	8002744 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002884:	4c0e      	ldr	r4, [pc, #56]	; (80028c0 <Task_GreenLED_Handler+0x44>)
 8002886:	2102      	movs	r1, #2
 8002888:	4620      	mov	r0, r4
 800288a:	f001 f969 	bl	8003b60 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 800288e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002892:	f7fe fa41 	bl	8000d18 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002896:	2102      	movs	r1, #2
 8002898:	4620      	mov	r0, r4
 800289a:	f001 f961 	bl	8003b60 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 800289e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a2:	f7fe fa39 	bl	8000d18 <vTaskDelay>
		taskYIELD();
 80028a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80028aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	f3bf 8f6f 	isb	sy
	while(1)
 80028ba:	e7e0      	b.n	800287e <Task_GreenLED_Handler+0x2>
 80028bc:	08006a98 	.word	0x08006a98
 80028c0:	58020800 	.word	0x58020800

080028c4 <MX_GPIO_Init>:
{
 80028c4:	b530      	push	{r4, r5, lr}
 80028c6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	2400      	movs	r4, #0
 80028ca:	9405      	str	r4, [sp, #20]
 80028cc:	9406      	str	r4, [sp, #24]
 80028ce:	9407      	str	r4, [sp, #28]
 80028d0:	9408      	str	r4, [sp, #32]
 80028d2:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <MX_GPIO_Init+0x98>)
 80028d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80028e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80028ea:	9201      	str	r2, [sp, #4]
 80028ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028f2:	f042 0204 	orr.w	r2, r2, #4
 80028f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80028fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028fe:	f002 0204 	and.w	r2, r2, #4
 8002902:	9202      	str	r2, [sp, #8]
 8002904:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002912:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002916:	f002 0201 	and.w	r2, r2, #1
 800291a:	9203      	str	r2, [sp, #12]
 800291c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002922:	f042 0202 	orr.w	r2, r2, #2
 8002926:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800292a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	9304      	str	r3, [sp, #16]
 8002934:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002936:	4d0a      	ldr	r5, [pc, #40]	; (8002960 <MX_GPIO_Init+0x9c>)
 8002938:	4622      	mov	r2, r4
 800293a:	2107      	movs	r1, #7
 800293c:	4628      	mov	r0, r5
 800293e:	f001 f909 	bl	8003b54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002942:	2307      	movs	r3, #7
 8002944:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002946:	2301      	movs	r3, #1
 8002948:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294e:	a905      	add	r1, sp, #20
 8002950:	4628      	mov	r0, r5
 8002952:	f001 f801 	bl	8003958 <HAL_GPIO_Init>
}
 8002956:	b00b      	add	sp, #44	; 0x2c
 8002958:	bd30      	pop	{r4, r5, pc}
 800295a:	bf00      	nop
 800295c:	58024400 	.word	0x58024400
 8002960:	58020800 	.word	0x58020800

08002964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002966:	6802      	ldr	r2, [r0, #0]
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800296a:	429a      	cmp	r2, r3
 800296c:	d000      	beq.n	8002970 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800296e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002970:	f000 fb94 	bl	800309c <HAL_IncTick>
}
 8002974:	e7fb      	b.n	800296e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002976:	bf00      	nop
 8002978:	40001000 	.word	0x40001000

0800297c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800297c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800297e:	e7fe      	b.n	800297e <Error_Handler+0x2>

08002980 <MX_FDCAN2_Init>:
{
 8002980:	b508      	push	{r3, lr}
  hfdcan2.Instance = FDCAN2;
 8002982:	4814      	ldr	r0, [pc, #80]	; (80029d4 <MX_FDCAN2_Init+0x54>)
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <MX_FDCAN2_Init+0x58>)
 8002986:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002988:	2300      	movs	r3, #0
 800298a:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800298c:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800298e:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002990:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002992:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8002994:	2201      	movs	r2, #1
 8002996:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002998:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800299a:	2102      	movs	r1, #2
 800299c:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800299e:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80029a0:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80029a2:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80029a4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80029a6:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80029a8:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80029aa:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80029ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80029ae:	6403      	str	r3, [r0, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80029b0:	2204      	movs	r2, #4
 80029b2:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80029b4:	6483      	str	r3, [r0, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80029b6:	64c2      	str	r2, [r0, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80029b8:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80029ba:	6542      	str	r2, [r0, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80029bc:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80029be:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80029c0:	6603      	str	r3, [r0, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80029c2:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80029c4:	6682      	str	r2, [r0, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80029c6:	f000 fcd5 	bl	8003374 <HAL_FDCAN_Init>
 80029ca:	b900      	cbnz	r0, 80029ce <MX_FDCAN2_Init+0x4e>
}
 80029cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80029ce:	f7ff ffd5 	bl	800297c <Error_Handler>
 80029d2:	bf00      	nop
 80029d4:	24005c14 	.word	0x24005c14
 80029d8:	4000a400 	.word	0x4000a400

080029dc <MX_USART2_UART_Init>:
{
 80029dc:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80029de:	4815      	ldr	r0, [pc, #84]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <MX_USART2_UART_Init+0x5c>)
 80029e2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80029e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80029e8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ea:	2300      	movs	r3, #0
 80029ec:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029ee:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029f0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029f2:	220c      	movs	r2, #12
 80029f4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029fa:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029fc:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029fe:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a00:	f003 fd38 	bl	8006474 <HAL_UART_Init>
 8002a04:	b970      	cbnz	r0, 8002a24 <MX_USART2_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a06:	2100      	movs	r1, #0
 8002a08:	480a      	ldr	r0, [pc, #40]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a0a:	f003 fdac 	bl	8006566 <HAL_UARTEx_SetTxFifoThreshold>
 8002a0e:	b958      	cbnz	r0, 8002a28 <MX_USART2_UART_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a10:	2100      	movs	r1, #0
 8002a12:	4808      	ldr	r0, [pc, #32]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a14:	f003 fdcc 	bl	80065b0 <HAL_UARTEx_SetRxFifoThreshold>
 8002a18:	b940      	cbnz	r0, 8002a2c <MX_USART2_UART_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a1a:	4806      	ldr	r0, [pc, #24]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a1c:	f003 fd84 	bl	8006528 <HAL_UARTEx_DisableFifoMode>
 8002a20:	b930      	cbnz	r0, 8002a30 <MX_USART2_UART_Init+0x54>
}
 8002a22:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a24:	f7ff ffaa 	bl	800297c <Error_Handler>
    Error_Handler();
 8002a28:	f7ff ffa8 	bl	800297c <Error_Handler>
    Error_Handler();
 8002a2c:	f7ff ffa6 	bl	800297c <Error_Handler>
    Error_Handler();
 8002a30:	f7ff ffa4 	bl	800297c <Error_Handler>
 8002a34:	24005fb8 	.word	0x24005fb8
 8002a38:	40004400 	.word	0x40004400

08002a3c <MX_USB_OTG_FS_HCD_Init>:
{
 8002a3c:	b508      	push	{r3, lr}
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a3e:	4809      	ldr	r0, [pc, #36]	; (8002a64 <MX_USB_OTG_FS_HCD_Init+0x28>)
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_USB_OTG_FS_HCD_Init+0x2c>)
 8002a42:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8002a44:	2310      	movs	r3, #16
 8002a46:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002a50:	2202      	movs	r2, #2
 8002a52:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002a54:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002a56:	f001 f88c 	bl	8003b72 <HAL_HCD_Init>
 8002a5a:	b900      	cbnz	r0, 8002a5e <MX_USB_OTG_FS_HCD_Init+0x22>
}
 8002a5c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a5e:	f7ff ff8d 	bl	800297c <Error_Handler>
 8002a62:	bf00      	nop
 8002a64:	24005cb4 	.word	0x24005cb4
 8002a68:	40080000 	.word	0x40080000

08002a6c <SystemClock_Config>:
{
 8002a6c:	b500      	push	{lr}
 8002a6e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a70:	224c      	movs	r2, #76	; 0x4c
 8002a72:	2100      	movs	r1, #0
 8002a74:	a809      	add	r0, sp, #36	; 0x24
 8002a76:	f003 ff51 	bl	800691c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	a801      	add	r0, sp, #4
 8002a80:	f003 ff4c 	bl	800691c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002a84:	2002      	movs	r0, #2
 8002a86:	f001 f8c7 	bl	8003c18 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <SystemClock_Config+0xb8>)
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4a21      	ldr	r2, [pc, #132]	; (8002b28 <SystemClock_Config+0xbc>)
 8002aa2:	6993      	ldr	r3, [r2, #24]
 8002aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aac:	6193      	str	r3, [r2, #24]
 8002aae:	6993      	ldr	r3, [r2, #24]
 8002ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <SystemClock_Config+0xbc>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002ac0:	d0fa      	beq.n	8002ab8 <SystemClock_Config+0x4c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aca:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002acc:	2302      	movs	r3, #2
 8002ace:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ad0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ad2:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8002ad4:	2212      	movs	r2, #18
 8002ad6:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002ad8:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002ada:	2203      	movs	r2, #3
 8002adc:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ade:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002ae0:	220c      	movs	r2, #12
 8002ae2:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002ae4:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8002ae6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002aea:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aec:	a809      	add	r0, sp, #36	; 0x24
 8002aee:	f001 f8c5 	bl	8003c7c <HAL_RCC_OscConfig>
 8002af2:	b990      	cbnz	r0, 8002b1a <SystemClock_Config+0xae>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af4:	233f      	movs	r3, #63	; 0x3f
 8002af6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002af8:	2302      	movs	r3, #2
 8002afa:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002afc:	2100      	movs	r1, #0
 8002afe:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002b00:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002b02:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002b04:	2340      	movs	r3, #64	; 0x40
 8002b06:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002b08:	9107      	str	r1, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002b0a:	9108      	str	r1, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b0c:	a801      	add	r0, sp, #4
 8002b0e:	f001 fcd3 	bl	80044b8 <HAL_RCC_ClockConfig>
 8002b12:	b920      	cbnz	r0, 8002b1e <SystemClock_Config+0xb2>
}
 8002b14:	b01d      	add	sp, #116	; 0x74
 8002b16:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b1a:	f7ff ff2f 	bl	800297c <Error_Handler>
    Error_Handler();
 8002b1e:	f7ff ff2d 	bl	800297c <Error_Handler>
 8002b22:	bf00      	nop
 8002b24:	58000400 	.word	0x58000400
 8002b28:	58024800 	.word	0x58024800

08002b2c <main>:
{
 8002b2c:	b500      	push	{lr}
 8002b2e:	b087      	sub	sp, #28
  HAL_Init();
 8002b30:	f000 fa86 	bl	8003040 <HAL_Init>
  SystemClock_Config();
 8002b34:	f7ff ff9a 	bl	8002a6c <SystemClock_Config>
  MX_GPIO_Init();
 8002b38:	f7ff fec4 	bl	80028c4 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8002b3c:	f7ff ff20 	bl	8002980 <MX_FDCAN2_Init>
  MX_USART2_UART_Init();
 8002b40:	f7ff ff4c 	bl	80029dc <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8002b44:	f7ff ff7a 	bl	8002a3c <MX_USB_OTG_FS_HCD_Init>
	user_data = "Start of program\r\n";
 8002b48:	4932      	ldr	r1, [pc, #200]	; (8002c14 <main+0xe8>)
 8002b4a:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <main+0xec>)
 8002b4c:	6019      	str	r1, [r3, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	2212      	movs	r2, #18
 8002b54:	4831      	ldr	r0, [pc, #196]	; (8002c1c <main+0xf0>)
 8002b56:	f003 fbe6 	bl	8006326 <HAL_UART_Transmit>
	SEGGER_UART_init(115200);
 8002b5a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002b5e:	f7fe fda5 	bl	80016ac <SEGGER_UART_init>
	DWT->CTRL |= (1 << 0);
 8002b62:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <main+0xf4>)
 8002b64:	6813      	ldr	r3, [r2, #0]
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]
	  SEGGER_SYSVIEW_Conf();
 8002b6c:	f7fe fc40 	bl	80013f0 <SEGGER_SYSVIEW_Conf>
	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 100, "Green LED TASK", 1, &Task_GreenLED_Handle);
 8002b70:	ab05      	add	r3, sp, #20
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	2301      	movs	r3, #1
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <main+0xf8>)
 8002b7a:	2264      	movs	r2, #100	; 0x64
 8002b7c:	492a      	ldr	r1, [pc, #168]	; (8002c28 <main+0xfc>)
 8002b7e:	482b      	ldr	r0, [pc, #172]	; (8002c2c <main+0x100>)
 8002b80:	f7fd ff4e 	bl	8000a20 <xTaskCreate>
	  configASSERT(TaskStatus == pdPASS);
 8002b84:	2801      	cmp	r0, #1
 8002b86:	d00a      	beq.n	8002b9e <main+0x72>
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	b672      	cpsid	i
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	b662      	cpsie	i
 8002b9c:	e7fe      	b.n	8002b9c <main+0x70>
	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 100, "Red LED TASK", 1, &Task_RedLED_Handle);
 8002b9e:	ab04      	add	r3, sp, #16
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <main+0x104>)
 8002ba8:	2264      	movs	r2, #100	; 0x64
 8002baa:	4922      	ldr	r1, [pc, #136]	; (8002c34 <main+0x108>)
 8002bac:	4822      	ldr	r0, [pc, #136]	; (8002c38 <main+0x10c>)
 8002bae:	f7fd ff37 	bl	8000a20 <xTaskCreate>
	  configASSERT(TaskStatus == pdPASS);
 8002bb2:	2801      	cmp	r0, #1
 8002bb4:	d00a      	beq.n	8002bcc <main+0xa0>
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	b672      	cpsid	i
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	b662      	cpsie	i
 8002bca:	e7fe      	b.n	8002bca <main+0x9e>
	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 100, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 8002bcc:	ab03      	add	r3, sp, #12
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <main+0x110>)
 8002bd6:	2264      	movs	r2, #100	; 0x64
 8002bd8:	4919      	ldr	r1, [pc, #100]	; (8002c40 <main+0x114>)
 8002bda:	481a      	ldr	r0, [pc, #104]	; (8002c44 <main+0x118>)
 8002bdc:	f7fd ff20 	bl	8000a20 <xTaskCreate>
	  configASSERT(TaskStatus == pdPASS);
 8002be0:	2801      	cmp	r0, #1
 8002be2:	d00a      	beq.n	8002bfa <main+0xce>
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	b672      	cpsid	i
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	b662      	cpsie	i
 8002bf8:	e7fe      	b.n	8002bf8 <main+0xcc>
	  vTaskStartScheduler();
 8002bfa:	f7fd ff43 	bl	8000a84 <vTaskStartScheduler>
		user_data = "Scheduler called \r\n";
 8002bfe:	4912      	ldr	r1, [pc, #72]	; (8002c48 <main+0x11c>)
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <main+0xec>)
 8002c02:	6019      	str	r1, [r3, #0]
		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	2213      	movs	r2, #19
 8002c0a:	4804      	ldr	r0, [pc, #16]	; (8002c1c <main+0xf0>)
 8002c0c:	f003 fb8b 	bl	8006326 <HAL_UART_Transmit>
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <main+0xe4>
 8002c12:	bf00      	nop
 8002c14:	08006aac 	.word	0x08006aac
 8002c18:	24000010 	.word	0x24000010
 8002c1c:	24005fb8 	.word	0x24005fb8
 8002c20:	e0001000 	.word	0xe0001000
 8002c24:	08006ac0 	.word	0x08006ac0
 8002c28:	08006ad0 	.word	0x08006ad0
 8002c2c:	0800287d 	.word	0x0800287d
 8002c30:	08006adc 	.word	0x08006adc
 8002c34:	08006aec 	.word	0x08006aec
 8002c38:	08002835 	.word	0x08002835
 8002c3c:	08006af4 	.word	0x08006af4
 8002c40:	08006b04 	.word	0x08006b04
 8002c44:	080027ed 	.word	0x080027ed
 8002c48:	08006b0c 	.word	0x08006b0c

08002c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_MspInit+0x20>)
 8002c50:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002c54:	f042 0202 	orr.w	r2, r2, #2
 8002c58:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */
  //vInitPrioGroupValue();

  /* USER CODE END MspInit 1 */
}
 8002c68:	b002      	add	sp, #8
 8002c6a:	4770      	bx	lr
 8002c6c:	58024400 	.word	0x58024400

08002c70 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002c70:	b510      	push	{r4, lr}
 8002c72:	b0b6      	sub	sp, #216	; 0xd8
 8002c74:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	2100      	movs	r1, #0
 8002c78:	9131      	str	r1, [sp, #196]	; 0xc4
 8002c7a:	9132      	str	r1, [sp, #200]	; 0xc8
 8002c7c:	9133      	str	r1, [sp, #204]	; 0xcc
 8002c7e:	9134      	str	r1, [sp, #208]	; 0xd0
 8002c80:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c82:	22bc      	movs	r2, #188	; 0xbc
 8002c84:	a802      	add	r0, sp, #8
 8002c86:	f003 fe49 	bl	800691c <memset>
  if(hfdcan->Instance==FDCAN2)
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_FDCAN_MspInit+0xa0>)
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d001      	beq.n	8002c96 <HAL_FDCAN_MspInit+0x26>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002c92:	b036      	add	sp, #216	; 0xd8
 8002c94:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9a:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ca0:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ca2:	a802      	add	r0, sp, #8
 8002ca4:	f001 fece 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 8002ca8:	bb78      	cbnz	r0, 8002d0a <HAL_FDCAN_MspInit+0x9a>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_FDCAN_MspInit+0xa4>)
 8002cac:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8002cb8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002cbc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002cc0:	9200      	str	r2, [sp, #0]
 8002cc2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002cc8:	f042 0202 	orr.w	r2, r2, #2
 8002ccc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cdc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ce0:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002cec:	2309      	movs	r3, #9
 8002cee:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf0:	a931      	add	r1, sp, #196	; 0xc4
 8002cf2:	4809      	ldr	r0, [pc, #36]	; (8002d18 <HAL_FDCAN_MspInit+0xa8>)
 8002cf4:	f000 fe30 	bl	8003958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	2016      	movs	r0, #22
 8002cfe:	f000 fa0b 	bl	8003118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8002d02:	2016      	movs	r0, #22
 8002d04:	f000 fa3e 	bl	8003184 <HAL_NVIC_EnableIRQ>
}
 8002d08:	e7c3      	b.n	8002c92 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 8002d0a:	f7ff fe37 	bl	800297c <Error_Handler>
 8002d0e:	e7cc      	b.n	8002caa <HAL_FDCAN_MspInit+0x3a>
 8002d10:	4000a400 	.word	0x4000a400
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58020400 	.word	0x58020400

08002d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	b0b6      	sub	sp, #216	; 0xd8
 8002d20:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d22:	2100      	movs	r1, #0
 8002d24:	9131      	str	r1, [sp, #196]	; 0xc4
 8002d26:	9132      	str	r1, [sp, #200]	; 0xc8
 8002d28:	9133      	str	r1, [sp, #204]	; 0xcc
 8002d2a:	9134      	str	r1, [sp, #208]	; 0xd0
 8002d2c:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d2e:	22bc      	movs	r2, #188	; 0xbc
 8002d30:	a802      	add	r0, sp, #8
 8002d32:	f003 fdf3 	bl	800691c <memset>
  if(huart->Instance==USART2)
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_UART_MspInit+0x88>)
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d001      	beq.n	8002d42 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d3e:	b036      	add	sp, #216	; 0xd8
 8002d40:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d42:	2302      	movs	r3, #2
 8002d44:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d46:	a802      	add	r0, sp, #8
 8002d48:	f001 fe7c 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 8002d4c:	bb30      	cbnz	r0, 8002d9c <HAL_UART_MspInit+0x80>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_UART_MspInit+0x8c>)
 8002d50:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d58:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002d5c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d60:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002d64:	9200      	str	r2, [sp, #0]
 8002d66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d80:	230c      	movs	r3, #12
 8002d82:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d8e:	2307      	movs	r3, #7
 8002d90:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	a931      	add	r1, sp, #196	; 0xc4
 8002d94:	4805      	ldr	r0, [pc, #20]	; (8002dac <HAL_UART_MspInit+0x90>)
 8002d96:	f000 fddf 	bl	8003958 <HAL_GPIO_Init>
}
 8002d9a:	e7d0      	b.n	8002d3e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002d9c:	f7ff fdee 	bl	800297c <Error_Handler>
 8002da0:	e7d5      	b.n	8002d4e <HAL_UART_MspInit+0x32>
 8002da2:	bf00      	nop
 8002da4:	40004400 	.word	0x40004400
 8002da8:	58024400 	.word	0x58024400
 8002dac:	58020000 	.word	0x58020000

08002db0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002db0:	b510      	push	{r4, lr}
 8002db2:	b0b6      	sub	sp, #216	; 0xd8
 8002db4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db6:	2100      	movs	r1, #0
 8002db8:	9131      	str	r1, [sp, #196]	; 0xc4
 8002dba:	9132      	str	r1, [sp, #200]	; 0xc8
 8002dbc:	9133      	str	r1, [sp, #204]	; 0xcc
 8002dbe:	9134      	str	r1, [sp, #208]	; 0xd0
 8002dc0:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dc2:	22bc      	movs	r2, #188	; 0xbc
 8002dc4:	a802      	add	r0, sp, #8
 8002dc6:	f003 fda9 	bl	800691c <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_HCD_MspInit+0x94>)
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d001      	beq.n	8002dd6 <HAL_HCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002dd2:	b036      	add	sp, #216	; 0xd8
 8002dd4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002dd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dda:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002ddc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002de0:	9323      	str	r3, [sp, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de2:	a802      	add	r0, sp, #8
 8002de4:	f001 fe2e 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 8002de8:	bb48      	cbnz	r0, 8002e3e <HAL_HCD_MspInit+0x8e>
    HAL_PWREx_EnableUSBVoltageDetector();
 8002dea:	f000 ff3f 	bl	8003c6c <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	4c16      	ldr	r4, [pc, #88]	; (8002e48 <HAL_HCD_MspInit+0x98>)
 8002df0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002dfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e0c:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002e18:	230a      	movs	r3, #10
 8002e1a:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	a931      	add	r1, sp, #196	; 0xc4
 8002e1e:	480b      	ldr	r0, [pc, #44]	; (8002e4c <HAL_HCD_MspInit+0x9c>)
 8002e20:	f000 fd9a 	bl	8003958 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e24:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8002e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e2c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8002e30:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8002e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	9b01      	ldr	r3, [sp, #4]
}
 8002e3c:	e7c9      	b.n	8002dd2 <HAL_HCD_MspInit+0x22>
      Error_Handler();
 8002e3e:	f7ff fd9d 	bl	800297c <Error_Handler>
 8002e42:	e7d2      	b.n	8002dea <HAL_HCD_MspInit+0x3a>
 8002e44:	40080000 	.word	0x40080000
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58020000 	.word	0x58020000

08002e50 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e50:	280f      	cmp	r0, #15
 8002e52:	d901      	bls.n	8002e58 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002e54:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002e56:	4770      	bx	lr
{
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	4601      	mov	r1, r0
 8002e62:	2036      	movs	r0, #54	; 0x36
 8002e64:	f000 f958 	bl	8003118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e68:	2036      	movs	r0, #54	; 0x36
 8002e6a:	f000 f98b 	bl	8003184 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <HAL_InitTick+0x88>)
 8002e70:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_InitTick+0x8c>)
 8002e74:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002e78:	f042 0210 	orr.w	r2, r2, #16
 8002e7c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e8c:	a901      	add	r1, sp, #4
 8002e8e:	a802      	add	r0, sp, #8
 8002e90:	f001 fca2 	bl	80047d8 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e94:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e96:	b9bb      	cbnz	r3, 8002ec8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e98:	f001 fc7a 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8002e9c:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e9e:	4810      	ldr	r0, [pc, #64]	; (8002ee0 <HAL_InitTick+0x90>)
 8002ea0:	fba0 2303 	umull	r2, r3, r0, r3
 8002ea4:	0c9b      	lsrs	r3, r3, #18
 8002ea6:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 8002ea8:	480e      	ldr	r0, [pc, #56]	; (8002ee4 <HAL_InitTick+0x94>)
 8002eaa:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <HAL_InitTick+0x98>)
 8002eac:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002eb2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002eb4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eba:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ebc:	f002 fe48 	bl	8005b50 <HAL_TIM_Base_Init>
 8002ec0:	b130      	cbz	r0, 8002ed0 <HAL_InitTick+0x80>
  return HAL_ERROR;
 8002ec2:	2001      	movs	r0, #1
}
 8002ec4:	b00a      	add	sp, #40	; 0x28
 8002ec6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ec8:	f001 fc62 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	0043      	lsls	r3, r0, #1
 8002ece:	e7e6      	b.n	8002e9e <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ed0:	4804      	ldr	r0, [pc, #16]	; (8002ee4 <HAL_InitTick+0x94>)
 8002ed2:	f002 fca5 	bl	8005820 <HAL_TIM_Base_Start_IT>
 8002ed6:	e7f5      	b.n	8002ec4 <HAL_InitTick+0x74>
 8002ed8:	24000020 	.word	0x24000020
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	431bde83 	.word	0x431bde83
 8002ee4:	24006048 	.word	0x24006048
 8002ee8:	40001000 	.word	0x40001000

08002eec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <NMI_Handler>

08002eee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <HardFault_Handler>

08002ef0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <MemManage_Handler>

08002ef2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef2:	e7fe      	b.n	8002ef2 <BusFault_Handler>

08002ef4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <UsageFault_Handler>

08002ef6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef6:	4770      	bx	lr

08002ef8 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8002ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002efa:	4802      	ldr	r0, [pc, #8]	; (8002f04 <FDCAN2_IT1_IRQHandler+0xc>)
 8002efc:	f000 fb96 	bl	800362c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8002f00:	bd08      	pop	{r3, pc}
 8002f02:	bf00      	nop
 8002f04:	24005c14 	.word	0x24005c14

08002f08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f0a:	4802      	ldr	r0, [pc, #8]	; (8002f14 <TIM6_DAC_IRQHandler+0xc>)
 8002f0c:	f002 fcd0 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f10:	bd08      	pop	{r3, pc}
 8002f12:	bf00      	nop
 8002f14:	24006048 	.word	0x24006048

08002f18 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f18:	4a29      	ldr	r2, [pc, #164]	; (8002fc0 <SystemInit+0xa8>)
 8002f1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f26:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <SystemInit+0xac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d806      	bhi.n	8002f40 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f32:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <SystemInit+0xac>)
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	f023 030f 	bic.w	r3, r3, #15
 8002f3a:	f043 0307 	orr.w	r3, r3, #7
 8002f3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f40:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <SystemInit+0xb0>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <SystemInit+0xb4>)
 8002f52:	400a      	ands	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <SystemInit+0xac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f013 0f08 	tst.w	r3, #8
 8002f5e:	d006      	beq.n	8002f6e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <SystemInit+0xac>)
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	f023 030f 	bic.w	r3, r3, #15
 8002f68:	f043 0307 	orr.w	r3, r3, #7
 8002f6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <SystemInit+0xb0>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f78:	4915      	ldr	r1, [pc, #84]	; (8002fd0 <SystemInit+0xb8>)
 8002f7a:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f7c:	4915      	ldr	r1, [pc, #84]	; (8002fd4 <SystemInit+0xbc>)
 8002f7e:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f80:	4915      	ldr	r1, [pc, #84]	; (8002fd8 <SystemInit+0xc0>)
 8002f82:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f86:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f88:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f8a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002f94:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f96:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002f98:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <SystemInit+0xc4>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <SystemInit+0xc8>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa4:	d203      	bcs.n	8002fae <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <SystemInit+0xcc>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <SystemInit+0xd0>)
 8002fb0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fb6:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <SystemInit+0xa8>)
 8002fb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fbc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00
 8002fc4:	52002000 	.word	0x52002000
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fd0:	02020200 	.word	0x02020200
 8002fd4:	01ff0000 	.word	0x01ff0000
 8002fd8:	01010280 	.word	0x01010280
 8002fdc:	5c001000 	.word	0x5c001000
 8002fe0:	ffff0000 	.word	0xffff0000
 8002fe4:	51008000 	.word	0x51008000
 8002fe8:	52004000 	.word	0x52004000

08002fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ff0:	f7ff ff92 	bl	8002f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff4:	480c      	ldr	r0, [pc, #48]	; (8003028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ff6:	490d      	ldr	r1, [pc, #52]	; (800302c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ffc:	e002      	b.n	8003004 <LoopCopyDataInit>

08002ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003002:	3304      	adds	r3, #4

08003004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003008:	d3f9      	bcc.n	8002ffe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800300c:	4c0a      	ldr	r4, [pc, #40]	; (8003038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800300e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003010:	e001      	b.n	8003016 <LoopFillZerobss>

08003012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003014:	3204      	adds	r2, #4

08003016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003018:	d3fb      	bcc.n	8003012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301a:	f003 fc3d 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800301e:	f7ff fd85 	bl	8002b2c <main>
  bx  lr
 8003022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003024:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003028:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800302c:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8003030:	08006b78 	.word	0x08006b78
  ldr r2, =_sbss
 8003034:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8003038:	24006098 	.word	0x24006098

0800303c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800303c:	e7fe      	b.n	800303c <ADC3_IRQHandler>
	...

08003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003042:	2003      	movs	r0, #3
 8003044:	f000 f856 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003048:	f001 f93c 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 800304c:	490f      	ldr	r1, [pc, #60]	; (800308c <HAL_Init+0x4c>)
 800304e:	698b      	ldr	r3, [r1, #24]
 8003050:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003054:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <HAL_Init+0x50>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800305e:	698b      	ldr	r3, [r1, #24]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	5cd3      	ldrb	r3, [r2, r3]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	fa20 f303 	lsr.w	r3, r0, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_Init+0x54>)
 8003070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_Init+0x58>)
 8003074:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003076:	200f      	movs	r0, #15
 8003078:	f7ff feea 	bl	8002e50 <HAL_InitTick>
 800307c:	b110      	cbz	r0, 8003084 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800307e:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8003080:	4620      	mov	r0, r4
 8003082:	bd10      	pop	{r4, pc}
 8003084:	4604      	mov	r4, r0
  HAL_MspInit();
 8003086:	f7ff fde1 	bl	8002c4c <HAL_MspInit>
  return HAL_OK;
 800308a:	e7f9      	b.n	8003080 <HAL_Init+0x40>
 800308c:	58024400 	.word	0x58024400
 8003090:	08006b30 	.word	0x08006b30
 8003094:	24000018 	.word	0x24000018
 8003098:	24000014 	.word	0x24000014

0800309c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_IncTick+0x10>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <HAL_IncTick+0x14>)
 80030a2:	6811      	ldr	r1, [r2, #0]
 80030a4:	440b      	add	r3, r1
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	2400001c 	.word	0x2400001c
 80030b0:	24006094 	.word	0x24006094

080030b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80030b4:	4b01      	ldr	r3, [pc, #4]	; (80030bc <HAL_GetTick+0x8>)
 80030b6:	6818      	ldr	r0, [r3, #0]
}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	24006094 	.word	0x24006094

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff fff6 	bl	80030b4 <HAL_GetTick>
 80030c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ca:	f1b4 3fff 	cmp.w	r4, #4294967295
 80030ce:	d002      	beq.n	80030d6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <HAL_Delay+0x24>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030d6:	f7ff ffed 	bl	80030b4 <HAL_GetTick>
 80030da:	1b40      	subs	r0, r0, r5
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d3fa      	bcc.n	80030d6 <HAL_Delay+0x16>
  {
  }
}
 80030e0:	bd38      	pop	{r3, r4, r5, pc}
 80030e2:	bf00      	nop
 80030e4:	2400001c 	.word	0x2400001c

080030e8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80030e8:	4b01      	ldr	r3, [pc, #4]	; (80030f0 <HAL_GetREVID+0x8>)
 80030ea:	6818      	ldr	r0, [r3, #0]
}
 80030ec:	0c00      	lsrs	r0, r0, #16
 80030ee:	4770      	bx	lr
 80030f0:	5c001000 	.word	0x5c001000

080030f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4906      	ldr	r1, [pc, #24]	; (8003110 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80030f6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003100:	0200      	lsls	r0, r0, #8
 8003102:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003106:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003108:	4a02      	ldr	r2, [pc, #8]	; (8003114 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800310a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800310c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00
 8003114:	05fa0000 	.word	0x05fa0000

08003118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003118:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_NVIC_SetPriority+0x60>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003122:	f1c3 0c07 	rsb	ip, r3, #7
 8003126:	f1bc 0f04 	cmp.w	ip, #4
 800312a:	bf28      	it	cs
 800312c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003130:	f103 0e04 	add.w	lr, r3, #4
 8003134:	f1be 0f06 	cmp.w	lr, #6
 8003138:	d914      	bls.n	8003164 <HAL_NVIC_SetPriority+0x4c>
 800313a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 3eff 	mov.w	lr, #4294967295
 8003140:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003144:	ea21 010c 	bic.w	r1, r1, ip
 8003148:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800314a:	fa0e f303 	lsl.w	r3, lr, r3
 800314e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003152:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003154:	2800      	cmp	r0, #0
 8003156:	db07      	blt.n	8003168 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003158:	0109      	lsls	r1, r1, #4
 800315a:	b2c9      	uxtb	r1, r1
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_NVIC_SetPriority+0x64>)
 800315e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003160:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003164:	2300      	movs	r3, #0
 8003166:	e7e9      	b.n	800313c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	f000 000f 	and.w	r0, r0, #15
 800316c:	0109      	lsls	r1, r1, #4
 800316e:	b2c9      	uxtb	r1, r1
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_NVIC_SetPriority+0x68>)
 8003172:	5419      	strb	r1, [r3, r0]
 8003174:	e7f4      	b.n	8003160 <HAL_NVIC_SetPriority+0x48>
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00
 800317c:	e000e400 	.word	0xe000e400
 8003180:	e000ed14 	.word	0xe000ed14

08003184 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003184:	2800      	cmp	r0, #0
 8003186:	db07      	blt.n	8003198 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003188:	f000 021f 	and.w	r2, r0, #31
 800318c:	0940      	lsrs	r0, r0, #5
 800318e:	2301      	movs	r3, #1
 8003190:	4093      	lsls	r3, r2
 8003192:	4a02      	ldr	r2, [pc, #8]	; (800319c <HAL_NVIC_EnableIRQ+0x18>)
 8003194:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000e100 	.word	0xe000e100

080031a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80031a0:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80031a2:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80031a4:	6803      	ldr	r3, [r0, #0]
 80031a6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80031aa:	4a6f      	ldr	r2, [pc, #444]	; (8003368 <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 80031ac:	4011      	ands	r1, r2
 80031ae:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 80031b2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80031b6:	6803      	ldr	r3, [r0, #0]
 80031b8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80031bc:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 80031c0:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80031c2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80031c6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80031ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80031cc:	4423      	add	r3, r4
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80031ce:	6804      	ldr	r4, [r0, #0]
 80031d0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80031d4:	4011      	ands	r1, r2
 80031d6:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80031da:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80031de:	6804      	ldr	r4, [r0, #0]
 80031e0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80031e4:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80031e8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80031ea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80031ee:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80031f2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80031f4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80031f8:	6804      	ldr	r4, [r0, #0]
 80031fa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80031fe:	4011      	ands	r1, r2
 8003200:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8003204:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003208:	6804      	ldr	r4, [r0, #0]
 800320a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800320e:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8003212:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003214:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003218:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800321c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800321e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003220:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003224:	6804      	ldr	r4, [r0, #0]
 8003226:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800322a:	4011      	ands	r1, r2
 800322c:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8003230:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003234:	6804      	ldr	r4, [r0, #0]
 8003236:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800323a:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 800323e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8003240:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003244:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003248:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800324a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800324c:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003250:	6804      	ldr	r4, [r0, #0]
 8003252:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003256:	4011      	ands	r1, r2
 8003258:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800325c:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003260:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003262:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003264:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003268:	6804      	ldr	r4, [r0, #0]
 800326a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 800326e:	4011      	ands	r1, r2
 8003270:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8003274:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003278:	6804      	ldr	r4, [r0, #0]
 800327a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 800327e:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8003282:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003284:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003288:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800328c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800328e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003292:	6804      	ldr	r4, [r0, #0]
 8003294:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8003298:	400a      	ands	r2, r1
 800329a:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 800329e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80032a2:	6802      	ldr	r2, [r0, #0]
 80032a4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80032a8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80032ac:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80032ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80032b2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80032b6:	6802      	ldr	r2, [r0, #0]
 80032b8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80032bc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80032c0:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80032c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80032c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80032ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 80032ce:	441a      	add	r2, r3
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	66c2      	str	r2, [r0, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80032d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80032d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80032da:	6703      	str	r3, [r0, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80032dc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80032de:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80032e2:	6743      	str	r3, [r0, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80032e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80032e6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80032e8:	fb04 f101 	mul.w	r1, r4, r1
 80032ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80032f0:	6783      	str	r3, [r0, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80032f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80032f4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80032f6:	fb04 f101 	mul.w	r1, r4, r1
 80032fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80032fe:	67c3      	str	r3, [r0, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003300:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003302:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003304:	fb04 f101 	mul.w	r1, r4, r1
 8003308:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800330c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003310:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003312:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003316:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800331a:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800331c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800331e:	fb01 fc04 	mul.w	ip, r1, r4
 8003322:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8003326:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800332a:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800332c:	fb04 f101 	mul.w	r1, r4, r1
 8003330:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003334:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003338:	490d      	ldr	r1, [pc, #52]	; (8003370 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 800333a:	428b      	cmp	r3, r1
 800333c:	d90d      	bls.n	800335a <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800333e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8003342:	f043 0320 	orr.w	r3, r3, #32
 8003346:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800334a:	2303      	movs	r3, #3
 800334c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98

    return HAL_ERROR;
 8003350:	2001      	movs	r0, #1
 8003352:	e007      	b.n	8003364 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003354:	2300      	movs	r3, #0
 8003356:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800335a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800335e:	4293      	cmp	r3, r2
 8003360:	d8f8      	bhi.n	8003354 <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003362:	2000      	movs	r0, #0
}
 8003364:	bc30      	pop	{r4, r5}
 8003366:	4770      	bx	lr
 8003368:	ffff0003 	.word	0xffff0003
 800336c:	10002b00 	.word	0x10002b00
 8003370:	4000d3fc 	.word	0x4000d3fc

08003374 <HAL_FDCAN_Init>:
{
 8003374:	b530      	push	{r4, r5, lr}
 8003376:	b095      	sub	sp, #84	; 0x54
 8003378:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800337a:	224c      	movs	r2, #76	; 0x4c
 800337c:	49a0      	ldr	r1, [pc, #640]	; (8003600 <HAL_FDCAN_Init+0x28c>)
 800337e:	a801      	add	r0, sp, #4
 8003380:	f003 fabe 	bl	8006900 <memcpy>
  if (hfdcan == NULL)
 8003384:	2c00      	cmp	r4, #0
 8003386:	f000 8138 	beq.w	80035fa <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	4a9d      	ldr	r2, [pc, #628]	; (8003604 <HAL_FDCAN_Init+0x290>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d020      	beq.n	80033d4 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003392:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8003396:	b30b      	cbz	r3, 80033dc <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	6993      	ldr	r3, [r2, #24]
 800339c:	f023 0310 	bic.w	r3, r3, #16
 80033a0:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 80033a2:	f7ff fe87 	bl	80030b4 <HAL_GetTick>
 80033a6:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	f012 0f08 	tst.w	r2, #8
 80033b0:	d01a      	beq.n	80033e8 <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80033b2:	f7ff fe7f 	bl	80030b4 <HAL_GetTick>
 80033b6:	1b43      	subs	r3, r0, r5
 80033b8:	2b0a      	cmp	r3, #10
 80033ba:	d9f5      	bls.n	80033a8 <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80033bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80033c8:	2303      	movs	r3, #3
 80033ca:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      return HAL_ERROR;
 80033ce:	2001      	movs	r0, #1
}
 80033d0:	b015      	add	sp, #84	; 0x54
 80033d2:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80033d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033d8:	6063      	str	r3, [r4, #4]
 80033da:	e7da      	b.n	8003392 <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 80033dc:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7ff fc45 	bl	8002c70 <HAL_FDCAN_MspInit>
 80033e6:	e7d7      	b.n	8003398 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 80033f0:	f7ff fe60 	bl	80030b4 <HAL_GetTick>
 80033f4:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	f012 0f01 	tst.w	r2, #1
 80033fe:	d10f      	bne.n	8003420 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003400:	f7ff fe58 	bl	80030b4 <HAL_GetTick>
 8003404:	1b40      	subs	r0, r0, r5
 8003406:	280a      	cmp	r0, #10
 8003408:	d9f5      	bls.n	80033f6 <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800340a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003416:	2303      	movs	r3, #3
 8003418:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
 800341e:	e7d7      	b.n	80033d0 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	f042 0202 	orr.w	r2, r2, #2
 8003426:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003428:	7c23      	ldrb	r3, [r4, #16]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d040      	beq.n	80034b0 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	6993      	ldr	r3, [r2, #24]
 8003432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003436:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003438:	7c63      	ldrb	r3, [r4, #17]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d03e      	beq.n	80034bc <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800343e:	6822      	ldr	r2, [r4, #0]
 8003440:	6993      	ldr	r3, [r2, #24]
 8003442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003446:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003448:	7ca3      	ldrb	r3, [r4, #18]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d03c      	beq.n	80034c8 <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800344e:	6822      	ldr	r2, [r4, #0]
 8003450:	6993      	ldr	r3, [r2, #24]
 8003452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003456:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	6993      	ldr	r3, [r2, #24]
 800345c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003460:	68a1      	ldr	r1, [r4, #8]
 8003462:	430b      	orrs	r3, r1
 8003464:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003466:	6822      	ldr	r2, [r4, #0]
 8003468:	6993      	ldr	r3, [r2, #24]
 800346a:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 800346e:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003470:	6822      	ldr	r2, [r4, #0]
 8003472:	6913      	ldr	r3, [r2, #16]
 8003474:	f023 0310 	bic.w	r3, r3, #16
 8003478:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800347a:	68e3      	ldr	r3, [r4, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d029      	beq.n	80034d4 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02c      	beq.n	80034de <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003484:	2b02      	cmp	r3, #2
 8003486:	f000 809b 	beq.w	80035c0 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	6993      	ldr	r3, [r2, #24]
 800348e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003492:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	6913      	ldr	r3, [r2, #16]
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800349e:	68e3      	ldr	r3, [r4, #12]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d11c      	bne.n	80034de <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	6993      	ldr	r3, [r2, #24]
 80034a8:	f043 0320 	orr.w	r3, r3, #32
 80034ac:	6193      	str	r3, [r2, #24]
 80034ae:	e016      	b.n	80034de <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	6993      	ldr	r3, [r2, #24]
 80034b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b8:	6193      	str	r3, [r2, #24]
 80034ba:	e7bd      	b.n	8003438 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	6993      	ldr	r3, [r2, #24]
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c4:	6193      	str	r3, [r2, #24]
 80034c6:	e7bf      	b.n	8003448 <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	6993      	ldr	r3, [r2, #24]
 80034cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d0:	6193      	str	r3, [r2, #24]
 80034d2:	e7c1      	b.n	8003458 <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	6993      	ldr	r3, [r2, #24]
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034de:	69a3      	ldr	r3, [r4, #24]
 80034e0:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034e2:	69e3      	ldr	r3, [r4, #28]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034e8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034ec:	6a22      	ldr	r2, [r4, #32]
 80034ee:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034f0:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80034f2:	6962      	ldr	r2, [r4, #20]
 80034f4:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034f6:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034fc:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80034fe:	68a3      	ldr	r3, [r4, #8]
 8003500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003504:	d062      	beq.n	80035cc <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003506:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003508:	b133      	cbz	r3, 8003518 <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003510:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003512:	430b      	orrs	r3, r1
 8003514:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003518:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800351a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800351c:	42d3      	cmn	r3, r2
 800351e:	d00d      	beq.n	800353c <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003520:	6821      	ldr	r1, [r4, #0]
 8003522:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800352c:	a814      	add	r0, sp, #80	; 0x50
 800352e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003532:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 30c8 	str.w	r3, [r1, #200]	; 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800353c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800353e:	b16b      	cbz	r3, 800355c <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003540:	6821      	ldr	r1, [r4, #0]
 8003542:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8003546:	f023 0307 	bic.w	r3, r3, #7
 800354a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800354c:	a814      	add	r0, sp, #80	; 0x50
 800354e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003552:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800355c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800355e:	b173      	cbz	r3, 800357e <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003560:	6821      	ldr	r1, [r4, #0]
 8003562:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800356c:	a814      	add	r0, sp, #80	; 0x50
 800356e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003572:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003576:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800357a:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800357e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003580:	b173      	cbz	r3, 80035a0 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003582:	6821      	ldr	r1, [r4, #0]
 8003584:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8003588:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800358c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800358e:	a814      	add	r0, sp, #80	; 0x50
 8003590:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003594:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003598:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800359c:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Instance == FDCAN1)
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_FDCAN_Init+0x290>)
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d022      	beq.n	80035ee <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80035ae:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80035b8:	4620      	mov	r0, r4
 80035ba:	f7ff fdf1 	bl	80031a0 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 80035be:	e707      	b.n	80033d0 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035c0:	6822      	ldr	r2, [r4, #0]
 80035c2:	6993      	ldr	r3, [r2, #24]
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	6193      	str	r3, [r2, #24]
 80035ca:	e788      	b.n	80034de <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035ce:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80035d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035d2:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80035d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035da:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80035dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80035e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035e2:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035e4:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80035e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035ea:	60cb      	str	r3, [r1, #12]
 80035ec:	e78b      	b.n	8003506 <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80035ee:	6862      	ldr	r2, [r4, #4]
 80035f0:	6893      	ldr	r3, [r2, #8]
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	6093      	str	r3, [r2, #8]
 80035f8:	e7d6      	b.n	80035a8 <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 80035fa:	2001      	movs	r0, #1
 80035fc:	e6e8      	b.n	80033d0 <HAL_FDCAN_Init+0x5c>
 80035fe:	bf00      	nop
 8003600:	08006944 	.word	0x08006944
 8003604:	4000a000 	.word	0x4000a000

08003608 <HAL_FDCAN_ClockCalibrationCallback>:
}
 8003608:	4770      	bx	lr

0800360a <HAL_FDCAN_TxEventFifoCallback>:
}
 800360a:	4770      	bx	lr

0800360c <HAL_FDCAN_RxFifo0Callback>:
}
 800360c:	4770      	bx	lr

0800360e <HAL_FDCAN_RxFifo1Callback>:
}
 800360e:	4770      	bx	lr

08003610 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8003610:	4770      	bx	lr

08003612 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8003612:	4770      	bx	lr

08003614 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8003614:	4770      	bx	lr

08003616 <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 8003616:	4770      	bx	lr

08003618 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8003618:	4770      	bx	lr

0800361a <HAL_FDCAN_TimeoutOccurredCallback>:
}
 800361a:	4770      	bx	lr

0800361c <HAL_FDCAN_HighPriorityMessageCallback>:
}
 800361c:	4770      	bx	lr

0800361e <HAL_FDCAN_ErrorCallback>:
}
 800361e:	4770      	bx	lr

08003620 <HAL_FDCAN_ErrorStatusCallback>:
}
 8003620:	4770      	bx	lr

08003622 <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 8003622:	4770      	bx	lr

08003624 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 8003624:	4770      	bx	lr

08003626 <HAL_FDCAN_TT_StopWatchCallback>:
}
 8003626:	4770      	bx	lr

08003628 <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 8003628:	4770      	bx	lr
	...

0800362c <HAL_FDCAN_IRQHandler>:
{
 800362c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003632:	4b95      	ldr	r3, [pc, #596]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 8003634:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	ea4f 7a83 	mov.w	sl, r3, lsl #30
 800363c:	ea0a 7a82 	and.w	sl, sl, r2, lsl #30
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003640:	6803      	ldr	r3, [r0, #0]
 8003642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003644:	f402 4970 	and.w	r9, r2, #61440	; 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800364a:	ea09 0902 	and.w	r9, r9, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800364e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003650:	f002 080f 	and.w	r8, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003656:	ea08 0802 	and.w	r8, r8, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800365a:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800365c:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003662:	4017      	ands	r7, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003664:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8003666:	f005 5571 	and.w	r5, r5, #1010827264	; 0x3c400000
  Errors &= hfdcan->Instance->IE;
 800366a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366c:	4015      	ands	r5, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800366e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8003670:	f006 7660 	and.w	r6, r6, #58720256	; 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003676:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800367e:	d003      	beq.n	8003688 <HAL_FDCAN_IRQHandler+0x5c>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003682:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003686:	d178      	bne.n	800377a <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800368c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003690:	d003      	beq.n	800369a <HAL_FDCAN_IRQHandler+0x6e>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003694:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003698:	d178      	bne.n	800378c <HAL_FDCAN_IRQHandler+0x160>
  if (ClkCalibrationITs != 0U)
 800369a:	f1ba 0f00 	cmp.w	sl, #0
 800369e:	f040 8084 	bne.w	80037aa <HAL_FDCAN_IRQHandler+0x17e>
  if (TxEventFifoITs != 0U)
 80036a2:	f1b9 0f00 	cmp.w	r9, #0
 80036a6:	f040 808c 	bne.w	80037c2 <HAL_FDCAN_IRQHandler+0x196>
  if (RxFifo0ITs != 0U)
 80036aa:	f1b8 0f00 	cmp.w	r8, #0
 80036ae:	f040 8094 	bne.w	80037da <HAL_FDCAN_IRQHandler+0x1ae>
  if (RxFifo1ITs != 0U)
 80036b2:	2f00      	cmp	r7, #0
 80036b4:	f040 809d 	bne.w	80037f2 <HAL_FDCAN_IRQHandler+0x1c6>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036bc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80036c0:	d004      	beq.n	80036cc <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80036c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80036c8:	f040 809d 	bne.w	8003806 <HAL_FDCAN_IRQHandler+0x1da>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036d0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80036d4:	d004      	beq.n	80036e0 <HAL_FDCAN_IRQHandler+0xb4>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80036d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d8:	f412 7f00 	tst.w	r2, #512	; 0x200
 80036dc:	f040 809d 	bne.w	800381a <HAL_FDCAN_IRQHandler+0x1ee>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036e4:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 80036e8:	d004      	beq.n	80036f4 <HAL_FDCAN_IRQHandler+0xc8>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80036ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ec:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 80036f0:	f040 80a2 	bne.w	8003838 <HAL_FDCAN_IRQHandler+0x20c>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036f8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80036fc:	d004      	beq.n	8003708 <HAL_FDCAN_IRQHandler+0xdc>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80036fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003700:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003704:	f040 80a2 	bne.w	800384c <HAL_FDCAN_IRQHandler+0x220>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800370c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003710:	d004      	beq.n	800371c <HAL_FDCAN_IRQHandler+0xf0>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003714:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003718:	f040 80a2 	bne.w	8003860 <HAL_FDCAN_IRQHandler+0x234>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003720:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003724:	d00f      	beq.n	8003746 <HAL_FDCAN_IRQHandler+0x11a>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003728:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800372c:	d00b      	beq.n	8003746 <HAL_FDCAN_IRQHandler+0x11a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800372e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003732:	651a      	str	r2, [r3, #80]	; 0x50
 8003734:	4b54      	ldr	r3, [pc, #336]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800373a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800373e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003742:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (ErrorStatusITs != 0U)
 8003746:	2e00      	cmp	r6, #0
 8003748:	f040 8094 	bne.w	8003874 <HAL_FDCAN_IRQHandler+0x248>
  if (Errors != 0U)
 800374c:	b14d      	cbz	r5, 8003762 <HAL_FDCAN_IRQHandler+0x136>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	651d      	str	r5, [r3, #80]	; 0x50
 8003752:	0faa      	lsrs	r2, r5, #30
 8003754:	4b4c      	ldr	r3, [pc, #304]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 8003756:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 8003758:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800375c:	431d      	orrs	r5, r3
 800375e:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
  if (hfdcan->Instance == FDCAN1)
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	4b49      	ldr	r3, [pc, #292]	; (800388c <HAL_FDCAN_IRQHandler+0x260>)
 8003766:	429a      	cmp	r2, r3
 8003768:	f000 8092 	beq.w	8003890 <HAL_FDCAN_IRQHandler+0x264>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800376c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 80ed 	bne.w	8003950 <HAL_FDCAN_IRQHandler+0x324>
}
 8003776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800377a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800377e:	651a      	str	r2, [r3, #80]	; 0x50
 8003780:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003786:	f7ff ff49 	bl	800361c <HAL_FDCAN_HighPriorityMessageCallback>
 800378a:	e77d      	b.n	8003688 <HAL_FDCAN_IRQHandler+0x5c>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800378c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003790:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003794:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003798:	6518      	str	r0, [r3, #80]	; 0x50
 800379a:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 800379c:	2000      	movs	r0, #0
 800379e:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80037a0:	4011      	ands	r1, r2
 80037a2:	4620      	mov	r0, r4
 80037a4:	f7ff ff36 	bl	8003614 <HAL_FDCAN_TxBufferAbortCallback>
 80037a8:	e777      	b.n	800369a <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	2200      	movs	r2, #0
 80037ae:	651a      	str	r2, [r3, #80]	; 0x50
 80037b0:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80037b4:	4b34      	ldr	r3, [pc, #208]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 80037b6:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80037b8:	4651      	mov	r1, sl
 80037ba:	4620      	mov	r0, r4
 80037bc:	f7ff ff24 	bl	8003608 <HAL_FDCAN_ClockCalibrationCallback>
 80037c0:	e76f      	b.n	80036a2 <HAL_FDCAN_IRQHandler+0x76>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
 80037c8:	ea4f 7299 	mov.w	r2, r9, lsr #30
 80037cc:	4b2e      	ldr	r3, [pc, #184]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 80037ce:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80037d0:	4649      	mov	r1, r9
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff ff19 	bl	800360a <HAL_FDCAN_TxEventFifoCallback>
 80037d8:	e767      	b.n	80036aa <HAL_FDCAN_IRQHandler+0x7e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 80037e0:	ea4f 7298 	mov.w	r2, r8, lsr #30
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 80037e6:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80037e8:	4641      	mov	r1, r8
 80037ea:	4620      	mov	r0, r4
 80037ec:	f7ff ff0e 	bl	800360c <HAL_FDCAN_RxFifo0Callback>
 80037f0:	e75f      	b.n	80036b2 <HAL_FDCAN_IRQHandler+0x86>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	651f      	str	r7, [r3, #80]	; 0x50
 80037f6:	0fba      	lsrs	r2, r7, #30
 80037f8:	4b23      	ldr	r3, [pc, #140]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 80037fa:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80037fc:	4639      	mov	r1, r7
 80037fe:	4620      	mov	r0, r4
 8003800:	f7ff ff05 	bl	800360e <HAL_FDCAN_RxFifo1Callback>
 8003804:	e758      	b.n	80036b8 <HAL_FDCAN_IRQHandler+0x8c>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800380a:	651a      	str	r2, [r3, #80]	; 0x50
 800380c:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003812:	4620      	mov	r0, r4
 8003814:	f7ff fefc 	bl	8003610 <HAL_FDCAN_TxFifoEmptyCallback>
 8003818:	e758      	b.n	80036cc <HAL_FDCAN_IRQHandler+0xa0>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800381a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800381e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003826:	6518      	str	r0, [r3, #80]	; 0x50
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 800382a:	2000      	movs	r0, #0
 800382c:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800382e:	4011      	ands	r1, r2
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff feee 	bl	8003612 <HAL_FDCAN_TxBufferCompleteCallback>
 8003836:	e753      	b.n	80036e0 <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003838:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800383c:	651a      	str	r2, [r3, #80]	; 0x50
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003844:	4620      	mov	r0, r4
 8003846:	f7ff fee6 	bl	8003616 <HAL_FDCAN_RxBufferNewMessageCallback>
 800384a:	e753      	b.n	80036f4 <HAL_FDCAN_IRQHandler+0xc8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800384c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003850:	651a      	str	r2, [r3, #80]	; 0x50
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003858:	4620      	mov	r0, r4
 800385a:	f7ff fedd 	bl	8003618 <HAL_FDCAN_TimestampWraparoundCallback>
 800385e:	e753      	b.n	8003708 <HAL_FDCAN_IRQHandler+0xdc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003860:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003864:	651a      	str	r2, [r3, #80]	; 0x50
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800386c:	4620      	mov	r0, r4
 800386e:	f7ff fed4 	bl	800361a <HAL_FDCAN_TimeoutOccurredCallback>
 8003872:	e753      	b.n	800371c <HAL_FDCAN_IRQHandler+0xf0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	651e      	str	r6, [r3, #80]	; 0x50
 8003878:	0fb2      	lsrs	r2, r6, #30
 800387a:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_FDCAN_IRQHandler+0x25c>)
 800387c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800387e:	4631      	mov	r1, r6
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff fecd 	bl	8003620 <HAL_FDCAN_ErrorStatusCallback>
 8003886:	e761      	b.n	800374c <HAL_FDCAN_IRQHandler+0x120>
 8003888:	4000a800 	.word	0x4000a800
 800388c:	4000a000 	.word	0x4000a000
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003890:	6863      	ldr	r3, [r4, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	f012 0f03 	tst.w	r2, #3
 8003898:	f43f af68 	beq.w	800376c <HAL_FDCAN_IRQHandler+0x140>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800389c:	6a19      	ldr	r1, [r3, #32]
 800389e:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80038a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80038a4:	6a18      	ldr	r0, [r3, #32]
 80038a6:	f000 0830 	and.w	r8, r0, #48	; 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80038aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038ac:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80038b0:	6a1f      	ldr	r7, [r3, #32]
 80038b2:	f407 77c0 	and.w	r7, r7, #384	; 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80038b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038b8:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80038ba:	6a1e      	ldr	r6, [r3, #32]
 80038bc:	f406 46fc 	and.w	r6, r6, #32256	; 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80038c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038c2:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80038c4:	6a1d      	ldr	r5, [r3, #32]
 80038c6:	f405 25f0 	and.w	r5, r5, #491520	; 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80038ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038cc:	4005      	ands	r5, r0
      if (TTSchedSyncITs != 0U)
 80038ce:	4011      	ands	r1, r2
 80038d0:	d11f      	bne.n	8003912 <HAL_FDCAN_IRQHandler+0x2e6>
      if (TTTimeMarkITs != 0U)
 80038d2:	f1b8 0f00 	cmp.w	r8, #0
 80038d6:	d121      	bne.n	800391c <HAL_FDCAN_IRQHandler+0x2f0>
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038e0:	d003      	beq.n	80038ea <HAL_FDCAN_IRQHandler+0x2be>
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038e8:	d120      	bne.n	800392c <HAL_FDCAN_IRQHandler+0x300>
      if (TTGlobTimeITs != 0U)
 80038ea:	bb57      	cbnz	r7, 8003942 <HAL_FDCAN_IRQHandler+0x316>
      if (TTDistErrors != 0U)
 80038ec:	b136      	cbz	r6, 80038fc <HAL_FDCAN_IRQHandler+0x2d0>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80038ee:	6863      	ldr	r3, [r4, #4]
 80038f0:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 80038f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80038f6:	431e      	orrs	r6, r3
 80038f8:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
      if (TTFatalErrors != 0U)
 80038fc:	2d00      	cmp	r5, #0
 80038fe:	f43f af35 	beq.w	800376c <HAL_FDCAN_IRQHandler+0x140>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003902:	6863      	ldr	r3, [r4, #4]
 8003904:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8003906:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800390a:	431d      	orrs	r5, r3
 800390c:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 8003910:	e72c      	b.n	800376c <HAL_FDCAN_IRQHandler+0x140>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003912:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff fe84 	bl	8003622 <HAL_FDCAN_TT_ScheduleSyncCallback>
 800391a:	e7da      	b.n	80038d2 <HAL_FDCAN_IRQHandler+0x2a6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003922:	4641      	mov	r1, r8
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff fe7d 	bl	8003624 <HAL_FDCAN_TT_TimeMarkCallback>
 800392a:	e7d5      	b.n	80038d8 <HAL_FDCAN_IRQHandler+0x2ac>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800392c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800392e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003930:	2040      	movs	r0, #64	; 0x40
 8003932:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003934:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003938:	0c09      	lsrs	r1, r1, #16
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff fe73 	bl	8003626 <HAL_FDCAN_TT_StopWatchCallback>
 8003940:	e7d3      	b.n	80038ea <HAL_FDCAN_IRQHandler+0x2be>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003942:	6863      	ldr	r3, [r4, #4]
 8003944:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003946:	4639      	mov	r1, r7
 8003948:	4620      	mov	r0, r4
 800394a:	f7ff fe6d 	bl	8003628 <HAL_FDCAN_TT_GlobalTimeCallback>
 800394e:	e7cd      	b.n	80038ec <HAL_FDCAN_IRQHandler+0x2c0>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003950:	4620      	mov	r0, r4
 8003952:	f7ff fe64 	bl	800361e <HAL_FDCAN_ErrorCallback>
}
 8003956:	e70e      	b.n	8003776 <HAL_FDCAN_IRQHandler+0x14a>

08003958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800395c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800395e:	e040      	b.n	80039e2 <HAL_GPIO_Init+0x8a>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003960:	2409      	movs	r4, #9
 8003962:	e000      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003964:	2400      	movs	r4, #0
 8003966:	40b4      	lsls	r4, r6
 8003968:	ea44 040c 	orr.w	r4, r4, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800396c:	3502      	adds	r5, #2
 800396e:	4e76      	ldr	r6, [pc, #472]	; (8003b48 <HAL_GPIO_Init+0x1f0>)
 8003970:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003974:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8003978:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800397c:	43d4      	mvns	r4, r2
 800397e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003982:	684f      	ldr	r7, [r1, #4]
 8003984:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003988:	d001      	beq.n	800398e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800398a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800398e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003992:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI_CurrentCPU->EMR1;
 8003996:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 800399a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800399e:	684f      	ldr	r7, [r1, #4]
 80039a0:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80039a4:	d001      	beq.n	80039aa <HAL_GPIO_Init+0x52>
        {
          temp |= iocurrent;
 80039a6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039aa:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80039ae:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039b2:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80039b4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039b8:	684f      	ldr	r7, [r1, #4]
 80039ba:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80039be:	d001      	beq.n	80039c4 <HAL_GPIO_Init+0x6c>
        {
          temp |= iocurrent;
 80039c0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80039c4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80039c8:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80039ca:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80039cc:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039ce:	684e      	ldr	r6, [r1, #4]
 80039d0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80039d4:	d001      	beq.n	80039da <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 80039d6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80039da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039de:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80039e0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039e2:	680a      	ldr	r2, [r1, #0]
 80039e4:	fa32 f403 	lsrs.w	r4, r2, r3
 80039e8:	f000 80ab 	beq.w	8003b42 <HAL_GPIO_Init+0x1ea>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039ec:	f04f 0c01 	mov.w	ip, #1
 80039f0:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80039f4:	ea1c 0202 	ands.w	r2, ip, r2
 80039f8:	d0f2      	beq.n	80039e0 <HAL_GPIO_Init+0x88>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039fa:	684c      	ldr	r4, [r1, #4]
 80039fc:	1e65      	subs	r5, r4, #1
 80039fe:	2c11      	cmp	r4, #17
 8003a00:	bf18      	it	ne
 8003a02:	2d01      	cmpne	r5, #1
 8003a04:	d901      	bls.n	8003a0a <HAL_GPIO_Init+0xb2>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a06:	2c12      	cmp	r4, #18
 8003a08:	d113      	bne.n	8003a32 <HAL_GPIO_Init+0xda>
        temp = GPIOx->OSPEEDR;
 8003a0a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a0c:	005e      	lsls	r6, r3, #1
 8003a0e:	2403      	movs	r4, #3
 8003a10:	40b4      	lsls	r4, r6
 8003a12:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a16:	68cc      	ldr	r4, [r1, #12]
 8003a18:	40b4      	lsls	r4, r6
 8003a1a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003a1c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003a1e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a20:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a24:	684c      	ldr	r4, [r1, #4]
 8003a26:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003a2a:	409c      	lsls	r4, r3
 8003a2c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003a30:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003a32:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003a38:	2503      	movs	r5, #3
 8003a3a:	fa05 f50c 	lsl.w	r5, r5, ip
 8003a3e:	43ec      	mvns	r4, r5
 8003a40:	ea26 0e05 	bic.w	lr, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a44:	688d      	ldr	r5, [r1, #8]
 8003a46:	fa05 f50c 	lsl.w	r5, r5, ip
 8003a4a:	ea45 050e 	orr.w	r5, r5, lr
      GPIOx->PUPDR = temp;
 8003a4e:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a50:	684d      	ldr	r5, [r1, #4]
 8003a52:	2d12      	cmp	r5, #18
 8003a54:	bf18      	it	ne
 8003a56:	2d02      	cmpne	r5, #2
 8003a58:	d112      	bne.n	8003a80 <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3U];
 8003a5a:	08de      	lsrs	r6, r3, #3
 8003a5c:	3608      	adds	r6, #8
 8003a5e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a62:	f003 0507 	and.w	r5, r3, #7
 8003a66:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8003a6a:	250f      	movs	r5, #15
 8003a6c:	fa05 f50e 	lsl.w	r5, r5, lr
 8003a70:	ea27 0705 	bic.w	r7, r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a74:	690d      	ldr	r5, [r1, #16]
 8003a76:	fa05 f50e 	lsl.w	r5, r5, lr
 8003a7a:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3U] = temp;
 8003a7c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003a80:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a82:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a84:	684c      	ldr	r4, [r1, #4]
 8003a86:	f004 0403 	and.w	r4, r4, #3
 8003a8a:	fa04 f40c 	lsl.w	r4, r4, ip
 8003a8e:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003a90:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a92:	684c      	ldr	r4, [r1, #4]
 8003a94:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003a98:	d0a2      	beq.n	80039e0 <HAL_GPIO_Init+0x88>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9a:	4c2c      	ldr	r4, [pc, #176]	; (8003b4c <HAL_GPIO_Init+0x1f4>)
 8003a9c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8003aa0:	f045 0502 	orr.w	r5, r5, #2
 8003aa4:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8003aa8:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8003aac:	f004 0402 	and.w	r4, r4, #2
 8003ab0:	9401      	str	r4, [sp, #4]
 8003ab2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ab4:	089d      	lsrs	r5, r3, #2
 8003ab6:	1cae      	adds	r6, r5, #2
 8003ab8:	4c23      	ldr	r4, [pc, #140]	; (8003b48 <HAL_GPIO_Init+0x1f0>)
 8003aba:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003abe:	f003 0403 	and.w	r4, r3, #3
 8003ac2:	00a6      	lsls	r6, r4, #2
 8003ac4:	240f      	movs	r4, #15
 8003ac6:	40b4      	lsls	r4, r6
 8003ac8:	ea27 0c04 	bic.w	ip, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003acc:	4c20      	ldr	r4, [pc, #128]	; (8003b50 <HAL_GPIO_Init+0x1f8>)
 8003ace:	42a0      	cmp	r0, r4
 8003ad0:	f43f af48 	beq.w	8003964 <HAL_GPIO_Init+0xc>
 8003ad4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ad8:	42a0      	cmp	r0, r4
 8003ada:	d022      	beq.n	8003b22 <HAL_GPIO_Init+0x1ca>
 8003adc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ae0:	42a0      	cmp	r0, r4
 8003ae2:	d020      	beq.n	8003b26 <HAL_GPIO_Init+0x1ce>
 8003ae4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ae8:	42a0      	cmp	r0, r4
 8003aea:	d01e      	beq.n	8003b2a <HAL_GPIO_Init+0x1d2>
 8003aec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003af0:	42a0      	cmp	r0, r4
 8003af2:	d01c      	beq.n	8003b2e <HAL_GPIO_Init+0x1d6>
 8003af4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003af8:	42a0      	cmp	r0, r4
 8003afa:	d01a      	beq.n	8003b32 <HAL_GPIO_Init+0x1da>
 8003afc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b00:	42a0      	cmp	r0, r4
 8003b02:	d018      	beq.n	8003b36 <HAL_GPIO_Init+0x1de>
 8003b04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b08:	42a0      	cmp	r0, r4
 8003b0a:	d016      	beq.n	8003b3a <HAL_GPIO_Init+0x1e2>
 8003b0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d014      	beq.n	8003b3e <HAL_GPIO_Init+0x1e6>
 8003b14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b18:	42a0      	cmp	r0, r4
 8003b1a:	f43f af21 	beq.w	8003960 <HAL_GPIO_Init+0x8>
 8003b1e:	240a      	movs	r4, #10
 8003b20:	e721      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003b22:	2401      	movs	r4, #1
 8003b24:	e71f      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003b26:	2402      	movs	r4, #2
 8003b28:	e71d      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003b2a:	2403      	movs	r4, #3
 8003b2c:	e71b      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003b2e:	2404      	movs	r4, #4
 8003b30:	e719      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003b32:	2405      	movs	r4, #5
 8003b34:	e717      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003b36:	2406      	movs	r4, #6
 8003b38:	e715      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003b3a:	2407      	movs	r4, #7
 8003b3c:	e713      	b.n	8003966 <HAL_GPIO_Init+0xe>
 8003b3e:	2408      	movs	r4, #8
 8003b40:	e711      	b.n	8003966 <HAL_GPIO_Init+0xe>
  }
}
 8003b42:	b003      	add	sp, #12
 8003b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b46:	bf00      	nop
 8003b48:	58000400 	.word	0x58000400
 8003b4c:	58024400 	.word	0x58024400
 8003b50:	58020000 	.word	0x58020000

08003b54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b54:	b10a      	cbz	r2, 8003b5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b56:	6181      	str	r1, [r0, #24]
 8003b58:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b5a:	0409      	lsls	r1, r1, #16
 8003b5c:	6181      	str	r1, [r0, #24]
  }
}
 8003b5e:	4770      	bx	lr

08003b60 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b60:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b62:	ea01 0203 	and.w	r2, r1, r3
 8003b66:	ea21 0103 	bic.w	r1, r1, r3
 8003b6a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003b6e:	6181      	str	r1, [r0, #24]
}
 8003b70:	4770      	bx	lr

08003b72 <HAL_HCD_Init>:
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d04d      	beq.n	8003c12 <HAL_HCD_Init+0xa0>
{
 8003b76:	b570      	push	{r4, r5, r6, lr}
 8003b78:	b08a      	sub	sp, #40	; 0x28
 8003b7a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003b7c:	6805      	ldr	r5, [r0, #0]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003b7e:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d040      	beq.n	8003c08 <HAL_HCD_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003b86:	2303      	movs	r3, #3
 8003b88:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b8c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b8e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b92:	d101      	bne.n	8003b98 <HAL_HCD_Init+0x26>
  {
    hhcd->Init.dma_enable = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	f002 fd9b 	bl	80066d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003b9e:	46a4      	mov	ip, r4
 8003ba0:	f85c 6b10 	ldr.w	r6, [ip], #16
 8003ba4:	46ee      	mov	lr, sp
 8003ba6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003baa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003bae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003bb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003bb6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8003bba:	e88e 0003 	stmia.w	lr, {r0, r1}
 8003bbe:	1d25      	adds	r5, r4, #4
 8003bc0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f002 fd37 	bl	8006638 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003bca:	2101      	movs	r1, #1
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	f002 fd87 	bl	80066e0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003bd2:	46a4      	mov	ip, r4
 8003bd4:	f85c 6b10 	ldr.w	r6, [ip], #16
 8003bd8:	46ee      	mov	lr, sp
 8003bda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003bde:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003be2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003be6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003bea:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8003bee:	e88e 0003 	stmia.w	lr, {r0, r1}
 8003bf2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f002 fdd4 	bl	80067a4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9

  return HAL_OK;
 8003c02:	2000      	movs	r0, #0
}
 8003c04:	b00a      	add	sp, #40	; 0x28
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8003c08:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8003c0c:	f7ff f8d0 	bl	8002db0 <HAL_HCD_MspInit>
 8003c10:	e7b9      	b.n	8003b86 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8003c12:	2001      	movs	r0, #1
}
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003c18:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <HAL_PWREx_ConfigSupply+0x50>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f013 0f04 	tst.w	r3, #4
 8003c20:	d107      	bne.n	8003c32 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_PWREx_ConfigSupply+0x50>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	4283      	cmp	r3, r0
 8003c2c:	d01a      	beq.n	8003c64 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c2e:	2001      	movs	r0, #1
 8003c30:	4770      	bx	lr
{
 8003c32:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c34:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <HAL_PWREx_ConfigSupply+0x50>)
 8003c36:	68d3      	ldr	r3, [r2, #12]
 8003c38:	f023 0307 	bic.w	r3, r3, #7
 8003c3c:	4318      	orrs	r0, r3
 8003c3e:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c40:	f7ff fa38 	bl	80030b4 <HAL_GetTick>
 8003c44:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c46:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <HAL_PWREx_ConfigSupply+0x50>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003c4e:	d107      	bne.n	8003c60 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c50:	f7ff fa30 	bl	80030b4 <HAL_GetTick>
 8003c54:	1b00      	subs	r0, r0, r4
 8003c56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c5a:	d9f4      	bls.n	8003c46 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c60:	2000      	movs	r0, #0
}
 8003c62:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8003c64:	2000      	movs	r0, #0
}
 8003c66:	4770      	bx	lr
 8003c68:	58024800 	.word	0x58024800

08003c6c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003c6c:	4a02      	ldr	r2, [pc, #8]	; (8003c78 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8003c6e:	68d3      	ldr	r3, [r2, #12]
 8003c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c74:	60d3      	str	r3, [r2, #12]
}
 8003c76:	4770      	bx	lr
 8003c78:	58024800 	.word	0x58024800

08003c7c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	f000 8302 	beq.w	8004286 <HAL_RCC_OscConfig+0x60a>
{
 8003c82:	b538      	push	{r3, r4, r5, lr}
 8003c84:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	6803      	ldr	r3, [r0, #0]
 8003c88:	f013 0f01 	tst.w	r3, #1
 8003c8c:	d025      	beq.n	8003cda <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8e:	4a9c      	ldr	r2, [pc, #624]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003c90:	6913      	ldr	r3, [r2, #16]
 8003c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c96:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d015      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4c>
 8003c9c:	2b18      	cmp	r3, #24
 8003c9e:	d00f      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca0:	6863      	ldr	r3, [r4, #4]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d03f      	beq.n	8003d28 <HAL_RCC_OscConfig+0xac>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d153      	bne.n	8003d54 <HAL_RCC_OscConfig+0xd8>
 8003cac:	4b94      	ldr	r3, [pc, #592]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e038      	b.n	8003d32 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cc0:	f002 0203 	and.w	r2, r2, #3
 8003cc4:	2a02      	cmp	r2, #2
 8003cc6:	d1eb      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_OscConfig+0x5e>
 8003cd2:	6863      	ldr	r3, [r4, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 82d8 	beq.w	800428a <HAL_RCC_OscConfig+0x60e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	f013 0f02 	tst.w	r3, #2
 8003ce0:	f000 808b 	beq.w	8003dfa <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce4:	4a86      	ldr	r2, [pc, #536]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003ce6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ce8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cea:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003cee:	d05a      	beq.n	8003da6 <HAL_RCC_OscConfig+0x12a>
 8003cf0:	2b18      	cmp	r3, #24
 8003cf2:	d055      	beq.n	8003da0 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf4:	68e3      	ldr	r3, [r4, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80c8 	beq.w	8003e8c <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cfc:	4980      	ldr	r1, [pc, #512]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003cfe:	680a      	ldr	r2, [r1, #0]
 8003d00:	f022 0219 	bic.w	r2, r2, #25
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7ff f9d4 	bl	80030b4 <HAL_GetTick>
 8003d0c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d0e:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f013 0f04 	tst.w	r3, #4
 8003d16:	f040 8097 	bne.w	8003e48 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7ff f9cb 	bl	80030b4 <HAL_GetTick>
 8003d1e:	1b40      	subs	r0, r0, r5
 8003d20:	2802      	cmp	r0, #2
 8003d22:	d9f4      	bls.n	8003d0e <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8003d24:	2003      	movs	r0, #3
 8003d26:	e2b7      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d28:	4a75      	ldr	r2, [pc, #468]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003d2a:	6813      	ldr	r3, [r2, #0]
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d32:	6863      	ldr	r3, [r4, #4]
 8003d34:	b32b      	cbz	r3, 8003d82 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8003d36:	f7ff f9bd 	bl	80030b4 <HAL_GetTick>
 8003d3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d3c:	4b70      	ldr	r3, [pc, #448]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d44:	d1c9      	bne.n	8003cda <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d46:	f7ff f9b5 	bl	80030b4 <HAL_GetTick>
 8003d4a:	1b40      	subs	r0, r0, r5
 8003d4c:	2864      	cmp	r0, #100	; 0x64
 8003d4e:	d9f5      	bls.n	8003d3c <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8003d50:	2003      	movs	r0, #3
 8003d52:	e2a1      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d009      	beq.n	8003d6e <HAL_RCC_OscConfig+0xf2>
 8003d5a:	4b69      	ldr	r3, [pc, #420]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e7e1      	b.n	8003d32 <HAL_RCC_OscConfig+0xb6>
 8003d6e:	4b64      	ldr	r3, [pc, #400]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e7d7      	b.n	8003d32 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8003d82:	f7ff f997 	bl	80030b4 <HAL_GetTick>
 8003d86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d88:	4b5d      	ldr	r3, [pc, #372]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d90:	d0a3      	beq.n	8003cda <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d92:	f7ff f98f 	bl	80030b4 <HAL_GetTick>
 8003d96:	1b40      	subs	r0, r0, r5
 8003d98:	2864      	cmp	r0, #100	; 0x64
 8003d9a:	d9f5      	bls.n	8003d88 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8003d9c:	2003      	movs	r0, #3
 8003d9e:	e27b      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003da0:	f012 0f03 	tst.w	r2, #3
 8003da4:	d1a6      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da6:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f013 0f04 	tst.w	r3, #4
 8003dae:	d003      	beq.n	8003db8 <HAL_RCC_OscConfig+0x13c>
 8003db0:	68e3      	ldr	r3, [r4, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 826b 	beq.w	800428e <HAL_RCC_OscConfig+0x612>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db8:	f7ff f996 	bl	80030e8 <HAL_GetREVID>
 8003dbc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003dc0:	4298      	cmp	r0, r3
 8003dc2:	d812      	bhi.n	8003dea <HAL_RCC_OscConfig+0x16e>
 8003dc4:	6922      	ldr	r2, [r4, #16]
 8003dc6:	2a40      	cmp	r2, #64	; 0x40
 8003dc8:	d007      	beq.n	8003dda <HAL_RCC_OscConfig+0x15e>
 8003dca:	494d      	ldr	r1, [pc, #308]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003dcc:	684b      	ldr	r3, [r1, #4]
 8003dce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003dd2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003dd6:	604b      	str	r3, [r1, #4]
 8003dd8:	e00f      	b.n	8003dfa <HAL_RCC_OscConfig+0x17e>
 8003dda:	4a49      	ldr	r2, [pc, #292]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003ddc:	6853      	ldr	r3, [r2, #4]
 8003dde:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de6:	6053      	str	r3, [r2, #4]
 8003de8:	e007      	b.n	8003dfa <HAL_RCC_OscConfig+0x17e>
 8003dea:	4a45      	ldr	r2, [pc, #276]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003dec:	6853      	ldr	r3, [r2, #4]
 8003dee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003df2:	6921      	ldr	r1, [r4, #16]
 8003df4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003df8:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f013 0f10 	tst.w	r3, #16
 8003e00:	f000 8088 	beq.w	8003f14 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e04:	4a3e      	ldr	r2, [pc, #248]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003e06:	6913      	ldr	r3, [r2, #16]
 8003e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d054      	beq.n	8003ebc <HAL_RCC_OscConfig+0x240>
 8003e12:	2b18      	cmp	r3, #24
 8003e14:	d04e      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e16:	69e3      	ldr	r3, [r4, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80b8 	beq.w	8003f8e <HAL_RCC_OscConfig+0x312>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e1e:	4a38      	ldr	r2, [pc, #224]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7ff f944 	bl	80030b4 <HAL_GetTick>
 8003e2c:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e2e:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e36:	f040 8088 	bne.w	8003f4a <HAL_RCC_OscConfig+0x2ce>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e3a:	f7ff f93b 	bl	80030b4 <HAL_GetTick>
 8003e3e:	1b40      	subs	r0, r0, r5
 8003e40:	2802      	cmp	r0, #2
 8003e42:	d9f4      	bls.n	8003e2e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8003e44:	2003      	movs	r0, #3
 8003e46:	e227      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e48:	f7ff f94e 	bl	80030e8 <HAL_GetREVID>
 8003e4c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e50:	4298      	cmp	r0, r3
 8003e52:	d812      	bhi.n	8003e7a <HAL_RCC_OscConfig+0x1fe>
 8003e54:	6922      	ldr	r2, [r4, #16]
 8003e56:	2a40      	cmp	r2, #64	; 0x40
 8003e58:	d007      	beq.n	8003e6a <HAL_RCC_OscConfig+0x1ee>
 8003e5a:	4929      	ldr	r1, [pc, #164]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003e5c:	684b      	ldr	r3, [r1, #4]
 8003e5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e62:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003e66:	604b      	str	r3, [r1, #4]
 8003e68:	e7c7      	b.n	8003dfa <HAL_RCC_OscConfig+0x17e>
 8003e6a:	4a25      	ldr	r2, [pc, #148]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003e6c:	6853      	ldr	r3, [r2, #4]
 8003e6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e76:	6053      	str	r3, [r2, #4]
 8003e78:	e7bf      	b.n	8003dfa <HAL_RCC_OscConfig+0x17e>
 8003e7a:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003e7c:	6853      	ldr	r3, [r2, #4]
 8003e7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e82:	6921      	ldr	r1, [r4, #16]
 8003e84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	e7b6      	b.n	8003dfa <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003e8e:	6813      	ldr	r3, [r2, #0]
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e96:	f7ff f90d 	bl	80030b4 <HAL_GetTick>
 8003e9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e9c:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f013 0f04 	tst.w	r3, #4
 8003ea4:	d0a9      	beq.n	8003dfa <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7ff f905 	bl	80030b4 <HAL_GetTick>
 8003eaa:	1b40      	subs	r0, r0, r5
 8003eac:	2802      	cmp	r0, #2
 8003eae:	d9f5      	bls.n	8003e9c <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8003eb0:	2003      	movs	r0, #3
 8003eb2:	e1f1      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003eb4:	f002 0203 	and.w	r2, r2, #3
 8003eb8:	2a01      	cmp	r2, #1
 8003eba:	d1ac      	bne.n	8003e16 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_OscConfig+0x252>
 8003ec6:	69e3      	ldr	r3, [r4, #28]
 8003ec8:	2b80      	cmp	r3, #128	; 0x80
 8003eca:	f040 81e2 	bne.w	8004292 <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ece:	f7ff f90b 	bl	80030e8 <HAL_GetREVID>
 8003ed2:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ed6:	4298      	cmp	r0, r3
 8003ed8:	d814      	bhi.n	8003f04 <HAL_RCC_OscConfig+0x288>
 8003eda:	6a22      	ldr	r2, [r4, #32]
 8003edc:	2a20      	cmp	r2, #32
 8003ede:	d007      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x274>
 8003ee0:	4907      	ldr	r1, [pc, #28]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003ee2:	684b      	ldr	r3, [r1, #4]
 8003ee4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ee8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003eec:	604b      	str	r3, [r1, #4]
 8003eee:	e011      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003ef0:	4a03      	ldr	r2, [pc, #12]	; (8003f00 <HAL_RCC_OscConfig+0x284>)
 8003ef2:	6853      	ldr	r3, [r2, #4]
 8003ef4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003efc:	6053      	str	r3, [r2, #4]
 8003efe:	e009      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003f00:	58024400 	.word	0x58024400
 8003f04:	4a9a      	ldr	r2, [pc, #616]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003f06:	68d3      	ldr	r3, [r2, #12]
 8003f08:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003f0c:	6a21      	ldr	r1, [r4, #32]
 8003f0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003f12:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f013 0f08 	tst.w	r3, #8
 8003f1a:	d060      	beq.n	8003fde <HAL_RCC_OscConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f1c:	6963      	ldr	r3, [r4, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d049      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x33a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f22:	4a93      	ldr	r2, [pc, #588]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003f24:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7ff f8c2 	bl	80030b4 <HAL_GetTick>
 8003f30:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f32:	4b8f      	ldr	r3, [pc, #572]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	f013 0f02 	tst.w	r3, #2
 8003f3a:	d150      	bne.n	8003fde <HAL_RCC_OscConfig+0x362>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7ff f8ba 	bl	80030b4 <HAL_GetTick>
 8003f40:	1b40      	subs	r0, r0, r5
 8003f42:	2802      	cmp	r0, #2
 8003f44:	d9f5      	bls.n	8003f32 <HAL_RCC_OscConfig+0x2b6>
        {
          return HAL_TIMEOUT;
 8003f46:	2003      	movs	r0, #3
 8003f48:	e1a6      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f4a:	f7ff f8cd 	bl	80030e8 <HAL_GetREVID>
 8003f4e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f52:	4298      	cmp	r0, r3
 8003f54:	d812      	bhi.n	8003f7c <HAL_RCC_OscConfig+0x300>
 8003f56:	6a22      	ldr	r2, [r4, #32]
 8003f58:	2a20      	cmp	r2, #32
 8003f5a:	d007      	beq.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
 8003f5c:	4984      	ldr	r1, [pc, #528]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003f5e:	684b      	ldr	r3, [r1, #4]
 8003f60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f64:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003f68:	604b      	str	r3, [r1, #4]
 8003f6a:	e7d3      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003f6c:	4a80      	ldr	r2, [pc, #512]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003f6e:	6853      	ldr	r3, [r2, #4]
 8003f70:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f78:	6053      	str	r3, [r2, #4]
 8003f7a:	e7cb      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003f7c:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003f7e:	68d3      	ldr	r3, [r2, #12]
 8003f80:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003f84:	6a21      	ldr	r1, [r4, #32]
 8003f86:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003f8a:	60d3      	str	r3, [r2, #12]
 8003f8c:	e7c2      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_DISABLE();
 8003f8e:	4a78      	ldr	r2, [pc, #480]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003f90:	6813      	ldr	r3, [r2, #0]
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f98:	f7ff f88c 	bl	80030b4 <HAL_GetTick>
 8003f9c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f9e:	4b74      	ldr	r3, [pc, #464]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fa6:	d0b5      	beq.n	8003f14 <HAL_RCC_OscConfig+0x298>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fa8:	f7ff f884 	bl	80030b4 <HAL_GetTick>
 8003fac:	1b40      	subs	r0, r0, r5
 8003fae:	2802      	cmp	r0, #2
 8003fb0:	d9f5      	bls.n	8003f9e <HAL_RCC_OscConfig+0x322>
            return HAL_TIMEOUT;
 8003fb2:	2003      	movs	r0, #3
 8003fb4:	e170      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb6:	4a6e      	ldr	r2, [pc, #440]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003fb8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7ff f878 	bl	80030b4 <HAL_GetTick>
 8003fc4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fc6:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fca:	f013 0f02 	tst.w	r3, #2
 8003fce:	d006      	beq.n	8003fde <HAL_RCC_OscConfig+0x362>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7ff f870 	bl	80030b4 <HAL_GetTick>
 8003fd4:	1b40      	subs	r0, r0, r5
 8003fd6:	2802      	cmp	r0, #2
 8003fd8:	d9f5      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fda:	2003      	movs	r0, #3
 8003fdc:	e15c      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	f013 0f20 	tst.w	r3, #32
 8003fe4:	d029      	beq.n	800403a <HAL_RCC_OscConfig+0x3be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003fe6:	69a3      	ldr	r3, [r4, #24]
 8003fe8:	b19b      	cbz	r3, 8004012 <HAL_RCC_OscConfig+0x396>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fea:	4a61      	ldr	r2, [pc, #388]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	6813      	ldr	r3, [r2, #0]
 8003fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ff4:	f7ff f85e 	bl	80030b4 <HAL_GetTick>
 8003ff8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ffa:	4b5d      	ldr	r3, [pc, #372]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004002:	d11a      	bne.n	800403a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004004:	f7ff f856 	bl	80030b4 <HAL_GetTick>
 8004008:	1b40      	subs	r0, r0, r5
 800400a:	2802      	cmp	r0, #2
 800400c:	d9f5      	bls.n	8003ffa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800400e:	2003      	movs	r0, #3
 8004010:	e142      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004012:	4a57      	ldr	r2, [pc, #348]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8004014:	6813      	ldr	r3, [r2, #0]
 8004016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800401a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800401c:	f7ff f84a 	bl	80030b4 <HAL_GetTick>
 8004020:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004022:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800402a:	d006      	beq.n	800403a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800402c:	f7ff f842 	bl	80030b4 <HAL_GetTick>
 8004030:	1b40      	subs	r0, r0, r5
 8004032:	2802      	cmp	r0, #2
 8004034:	d9f5      	bls.n	8004022 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004036:	2003      	movs	r0, #3
 8004038:	e12e      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	f013 0f04 	tst.w	r3, #4
 8004040:	d121      	bne.n	8004086 <HAL_RCC_OscConfig+0x40a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8126 	beq.w	8004296 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800404a:	4a49      	ldr	r2, [pc, #292]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 800404c:	6912      	ldr	r2, [r2, #16]
 800404e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004052:	2a18      	cmp	r2, #24
 8004054:	f000 80ee 	beq.w	8004234 <HAL_RCC_OscConfig+0x5b8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004058:	2b02      	cmp	r3, #2
 800405a:	d075      	beq.n	8004148 <HAL_RCC_OscConfig+0x4cc>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4a44      	ldr	r2, [pc, #272]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 800405e:	6813      	ldr	r3, [r2, #0]
 8004060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7ff f825 	bl	80030b4 <HAL_GetTick>
 800406a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800406c:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004074:	f000 80dc 	beq.w	8004230 <HAL_RCC_OscConfig+0x5b4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004078:	f7ff f81c 	bl	80030b4 <HAL_GetTick>
 800407c:	1b00      	subs	r0, r0, r4
 800407e:	2802      	cmp	r0, #2
 8004080:	d9f4      	bls.n	800406c <HAL_RCC_OscConfig+0x3f0>
          {
            return HAL_TIMEOUT;
 8004082:	2003      	movs	r0, #3
 8004084:	e108      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
    PWR->CR1 |= PWR_CR1_DBP;
 8004086:	4a3b      	ldr	r2, [pc, #236]	; (8004174 <HAL_RCC_OscConfig+0x4f8>)
 8004088:	6813      	ldr	r3, [r2, #0]
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004090:	f7ff f810 	bl	80030b4 <HAL_GetTick>
 8004094:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCC_OscConfig+0x4f8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x432>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7ff f808 	bl	80030b4 <HAL_GetTick>
 80040a4:	1b40      	subs	r0, r0, r5
 80040a6:	2864      	cmp	r0, #100	; 0x64
 80040a8:	d9f5      	bls.n	8004096 <HAL_RCC_OscConfig+0x41a>
        return HAL_TIMEOUT;
 80040aa:	2003      	movs	r0, #3
 80040ac:	e0f4      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ae:	68a3      	ldr	r3, [r4, #8]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d00a      	beq.n	80040ca <HAL_RCC_OscConfig+0x44e>
 80040b4:	bb0b      	cbnz	r3, 80040fa <HAL_RCC_OscConfig+0x47e>
 80040b6:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 80040b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	671a      	str	r2, [r3, #112]	; 0x70
 80040c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	671a      	str	r2, [r3, #112]	; 0x70
 80040c8:	e004      	b.n	80040d4 <HAL_RCC_OscConfig+0x458>
 80040ca:	4a29      	ldr	r2, [pc, #164]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 80040cc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d4:	68a3      	ldr	r3, [r4, #8]
 80040d6:	b333      	cbz	r3, 8004126 <HAL_RCC_OscConfig+0x4aa>
      tickstart = HAL_GetTick();
 80040d8:	f7fe ffec 	bl	80030b4 <HAL_GetTick>
 80040dc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	f013 0f02 	tst.w	r3, #2
 80040e6:	d1ac      	bne.n	8004042 <HAL_RCC_OscConfig+0x3c6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fe ffe4 	bl	80030b4 <HAL_GetTick>
 80040ec:	1b40      	subs	r0, r0, r5
 80040ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80040f2:	4298      	cmp	r0, r3
 80040f4:	d9f3      	bls.n	80040de <HAL_RCC_OscConfig+0x462>
          return HAL_TIMEOUT;
 80040f6:	2003      	movs	r0, #3
 80040f8:	e0ce      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d009      	beq.n	8004112 <HAL_RCC_OscConfig+0x496>
 80040fe:	4b1c      	ldr	r3, [pc, #112]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8004100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	671a      	str	r2, [r3, #112]	; 0x70
 8004108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800410a:	f022 0204 	bic.w	r2, r2, #4
 800410e:	671a      	str	r2, [r3, #112]	; 0x70
 8004110:	e7e0      	b.n	80040d4 <HAL_RCC_OscConfig+0x458>
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 8004114:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004116:	f042 0204 	orr.w	r2, r2, #4
 800411a:	671a      	str	r2, [r3, #112]	; 0x70
 800411c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	671a      	str	r2, [r3, #112]	; 0x70
 8004124:	e7d6      	b.n	80040d4 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 8004126:	f7fe ffc5 	bl	80030b4 <HAL_GetTick>
 800412a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f013 0f02 	tst.w	r3, #2
 8004134:	d085      	beq.n	8004042 <HAL_RCC_OscConfig+0x3c6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fe ffbd 	bl	80030b4 <HAL_GetTick>
 800413a:	1b40      	subs	r0, r0, r5
 800413c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004140:	4298      	cmp	r0, r3
 8004142:	d9f3      	bls.n	800412c <HAL_RCC_OscConfig+0x4b0>
          return HAL_TIMEOUT;
 8004144:	2003      	movs	r0, #3
 8004146:	e0a7      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
        __HAL_RCC_PLL_DISABLE();
 8004148:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004150:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004152:	f7fe ffaf 	bl	80030b4 <HAL_GetTick>
 8004156:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_OscConfig+0x4f4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004160:	d00a      	beq.n	8004178 <HAL_RCC_OscConfig+0x4fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fe ffa7 	bl	80030b4 <HAL_GetTick>
 8004166:	1b40      	subs	r0, r0, r5
 8004168:	2802      	cmp	r0, #2
 800416a:	d9f5      	bls.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            return HAL_TIMEOUT;
 800416c:	2003      	movs	r0, #3
 800416e:	e093      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 8004170:	58024400 	.word	0x58024400
 8004174:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004178:	4b4f      	ldr	r3, [pc, #316]	; (80042b8 <HAL_RCC_OscConfig+0x63c>)
 800417a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800417c:	4a4f      	ldr	r2, [pc, #316]	; (80042bc <HAL_RCC_OscConfig+0x640>)
 800417e:	400a      	ands	r2, r1
 8004180:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004182:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004184:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8004188:	430a      	orrs	r2, r1
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
 800418c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800418e:	3a01      	subs	r2, #1
 8004190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004196:	3901      	subs	r1, #1
 8004198:	0249      	lsls	r1, r1, #9
 800419a:	b289      	uxth	r1, r1
 800419c:	430a      	orrs	r2, r1
 800419e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80041a0:	3901      	subs	r1, #1
 80041a2:	0409      	lsls	r1, r1, #16
 80041a4:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80041a8:	430a      	orrs	r2, r1
 80041aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80041ac:	3901      	subs	r1, #1
 80041ae:	0609      	lsls	r1, r1, #24
 80041b0:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80041b4:	430a      	orrs	r2, r1
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80041b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041c2:	4a3f      	ldr	r2, [pc, #252]	; (80042c0 <HAL_RCC_OscConfig+0x644>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80041c8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80041cc:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	f022 020c 	bic.w	r2, r2, #12
 80041d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80041d6:	430a      	orrs	r2, r1
 80041d8:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041dc:	f022 0202 	bic.w	r2, r2, #2
 80041e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80041e2:	430a      	orrs	r2, r1
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80041f4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800420c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800420e:	f7fe ff51 	bl	80030b4 <HAL_GetTick>
 8004212:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <HAL_RCC_OscConfig+0x63c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800421c:	d106      	bne.n	800422c <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421e:	f7fe ff49 	bl	80030b4 <HAL_GetTick>
 8004222:	1b00      	subs	r0, r0, r4
 8004224:	2802      	cmp	r0, #2
 8004226:	d9f5      	bls.n	8004214 <HAL_RCC_OscConfig+0x598>
            return HAL_TIMEOUT;
 8004228:	2003      	movs	r0, #3
 800422a:	e035      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800422c:	2000      	movs	r0, #0
 800422e:	e033      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 8004230:	2000      	movs	r0, #0
 8004232:	e031      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <HAL_RCC_OscConfig+0x63c>)
 8004236:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004238:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423a:	2b01      	cmp	r3, #1
 800423c:	d02d      	beq.n	800429a <HAL_RCC_OscConfig+0x61e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	f001 0303 	and.w	r3, r1, #3
 8004242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004244:	4293      	cmp	r3, r2
 8004246:	d12a      	bne.n	800429e <HAL_RCC_OscConfig+0x622>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004248:	f3c1 1105 	ubfx	r1, r1, #4, #6
 800424c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	4299      	cmp	r1, r3
 8004250:	d127      	bne.n	80042a2 <HAL_RCC_OscConfig+0x626>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004252:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8004256:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004258:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d123      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800425e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8004262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004264:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d11f      	bne.n	80042aa <HAL_RCC_OscConfig+0x62e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800426a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800426e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004270:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d11b      	bne.n	80042ae <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004276:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800427a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800427c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800427e:	4298      	cmp	r0, r3
 8004280:	d117      	bne.n	80042b2 <HAL_RCC_OscConfig+0x636>
  return HAL_OK;
 8004282:	2000      	movs	r0, #0
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
    return HAL_ERROR;
 8004286:	2001      	movs	r0, #1
}
 8004288:	4770      	bx	lr
        return HAL_ERROR;
 800428a:	2001      	movs	r0, #1
 800428c:	e004      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
        return HAL_ERROR;
 800428e:	2001      	movs	r0, #1
 8004290:	e002      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
        return HAL_ERROR;
 8004292:	2001      	movs	r0, #1
 8004294:	e000      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
  return HAL_OK;
 8004296:	2000      	movs	r0, #0
}
 8004298:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800429a:	2001      	movs	r0, #1
 800429c:	e7fc      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 800429e:	2001      	movs	r0, #1
 80042a0:	e7fa      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 80042a2:	2001      	movs	r0, #1
 80042a4:	e7f8      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 80042a6:	2001      	movs	r0, #1
 80042a8:	e7f6      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 80042aa:	2001      	movs	r0, #1
 80042ac:	e7f4      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 80042ae:	2001      	movs	r0, #1
 80042b0:	e7f2      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 80042b2:	2001      	movs	r0, #1
 80042b4:	e7f0      	b.n	8004298 <HAL_RCC_OscConfig+0x61c>
 80042b6:	bf00      	nop
 80042b8:	58024400 	.word	0x58024400
 80042bc:	fffffc0c 	.word	0xfffffc0c
 80042c0:	ffff0007 	.word	0xffff0007

080042c4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c4:	4b74      	ldr	r3, [pc, #464]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	f000 80de 	beq.w	800448e <HAL_RCC_GetSysClockFreq+0x1ca>
 80042d2:	2b18      	cmp	r3, #24
 80042d4:	d010      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x34>
 80042d6:	b10b      	cbz	r3, 80042dc <HAL_RCC_GetSysClockFreq+0x18>
 80042d8:	4870      	ldr	r0, [pc, #448]	; (800449c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80042da:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042dc:	4b6e      	ldr	r3, [pc, #440]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f013 0f20 	tst.w	r3, #32
 80042e4:	f000 80d5 	beq.w	8004492 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042e8:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80042f0:	4b6b      	ldr	r3, [pc, #428]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80042f2:	fa23 f000 	lsr.w	r0, r3, r0
 80042f6:	4770      	bx	lr
{
 80042f8:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042fa:	4a67      	ldr	r2, [pc, #412]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80042fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80042fe:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004302:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004304:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004308:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800430a:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800430e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004310:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004314:	fb0c f303 	mul.w	r3, ip, r3
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8004320:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004324:	f000 8093 	beq.w	800444e <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8004328:	2901      	cmp	r1, #1
 800432a:	d065      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x134>
 800432c:	2902      	cmp	r1, #2
 800432e:	f000 8091 	beq.w	8004454 <HAL_RCC_GetSysClockFreq+0x190>
 8004332:	b1e1      	cbz	r1, 800436e <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004334:	ee07 0a10 	vmov	s14, r0
 8004338:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800433c:	ed9f 6a59 	vldr	s12, [pc, #356]	; 80044a4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8004340:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004344:	4b54      	ldr	r3, [pc, #336]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	ee06 3a90 	vmov	s13, r3
 8004350:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004354:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8004358:	ee67 7a86 	vmul.f32	s15, s15, s12
 800435c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004368:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800436c:	e060      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800436e:	6813      	ldr	r3, [r2, #0]
 8004370:	f013 0f20 	tst.w	r3, #32
 8004374:	d023      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004376:	4611      	mov	r1, r2
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800437e:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004380:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004382:	ee07 3a10 	vmov	s14, r3
 8004386:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800438a:	ee07 0a10 	vmov	s14, r0
 800438e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004392:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004396:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439c:	ee06 3a90 	vmov	s13, r3
 80043a0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80043a4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
 80043a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80043ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043bc:	e038      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043be:	ee07 0a10 	vmov	s14, r0
 80043c2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80043c6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80044ac <HAL_RCC_GetSysClockFreq+0x1e8>
 80043ca:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80043ce:	4b32      	ldr	r3, [pc, #200]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee06 3a90 	vmov	s13, r3
 80043da:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80043de:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
 80043e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043f6:	e01b      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043f8:	ee07 0a10 	vmov	s14, r0
 80043fc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004400:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80044a4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8004404:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004410:	ee06 3a90 	vmov	s13, r3
 8004414:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004418:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800441c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442c:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004430:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004438:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004446:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800444a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800444e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004452:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004454:	ee07 0a10 	vmov	s14, r0
 8004458:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800445c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80044b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004460:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446c:	ee06 3a90 	vmov	s13, r3
 8004470:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004474:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80044a8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8004478:	ee67 7a86 	vmul.f32	s15, s15, s12
 800447c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004488:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800448c:	e7d0      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800448e:	4809      	ldr	r0, [pc, #36]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004490:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004492:	4803      	ldr	r0, [pc, #12]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	58024400 	.word	0x58024400
 800449c:	003d0900 	.word	0x003d0900
 80044a0:	03d09000 	.word	0x03d09000
 80044a4:	4a742400 	.word	0x4a742400
 80044a8:	39000000 	.word	0x39000000
 80044ac:	4c742400 	.word	0x4c742400
 80044b0:	4af42400 	.word	0x4af42400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f000 8132 	beq.w	8004722 <HAL_RCC_ClockConfig+0x26a>
{
 80044be:	b570      	push	{r4, r5, r6, lr}
 80044c0:	460d      	mov	r5, r1
 80044c2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b9b      	ldr	r3, [pc, #620]	; (8004734 <HAL_RCC_ClockConfig+0x27c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	428b      	cmp	r3, r1
 80044ce:	d20b      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d0:	4a98      	ldr	r2, [pc, #608]	; (8004734 <HAL_RCC_ClockConfig+0x27c>)
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	f023 030f 	bic.w	r3, r3, #15
 80044d8:	430b      	orrs	r3, r1
 80044da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044dc:	6813      	ldr	r3, [r2, #0]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	428b      	cmp	r3, r1
 80044e4:	f040 811f 	bne.w	8004726 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	f013 0f04 	tst.w	r3, #4
 80044ee:	d00c      	beq.n	800450a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044f0:	6922      	ldr	r2, [r4, #16]
 80044f2:	4b91      	ldr	r3, [pc, #580]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d905      	bls.n	800450a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044fe:	498e      	ldr	r1, [pc, #568]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004500:	698b      	ldr	r3, [r1, #24]
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004506:	431a      	orrs	r2, r3
 8004508:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	f013 0f08 	tst.w	r3, #8
 8004510:	d00c      	beq.n	800452c <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004512:	6962      	ldr	r2, [r4, #20]
 8004514:	4b88      	ldr	r3, [pc, #544]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800451c:	429a      	cmp	r2, r3
 800451e:	d905      	bls.n	800452c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004520:	4985      	ldr	r1, [pc, #532]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004522:	69cb      	ldr	r3, [r1, #28]
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	431a      	orrs	r2, r3
 800452a:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f013 0f10 	tst.w	r3, #16
 8004532:	d00c      	beq.n	800454e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004534:	69a2      	ldr	r2, [r4, #24]
 8004536:	4b80      	ldr	r3, [pc, #512]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800453e:	429a      	cmp	r2, r3
 8004540:	d905      	bls.n	800454e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004542:	497d      	ldr	r1, [pc, #500]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004544:	69cb      	ldr	r3, [r1, #28]
 8004546:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800454a:	431a      	orrs	r2, r3
 800454c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f013 0f20 	tst.w	r3, #32
 8004554:	d00c      	beq.n	8004570 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004556:	69e2      	ldr	r2, [r4, #28]
 8004558:	4b77      	ldr	r3, [pc, #476]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004560:	429a      	cmp	r2, r3
 8004562:	d905      	bls.n	8004570 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004564:	4974      	ldr	r1, [pc, #464]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004566:	6a0b      	ldr	r3, [r1, #32]
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	431a      	orrs	r2, r3
 800456e:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	f013 0f02 	tst.w	r3, #2
 8004576:	d00c      	beq.n	8004592 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004578:	68e2      	ldr	r2, [r4, #12]
 800457a:	4b6f      	ldr	r3, [pc, #444]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	429a      	cmp	r2, r3
 8004584:	d905      	bls.n	8004592 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004586:	496c      	ldr	r1, [pc, #432]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004588:	698b      	ldr	r3, [r1, #24]
 800458a:	f023 030f 	bic.w	r3, r3, #15
 800458e:	431a      	orrs	r2, r3
 8004590:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	f013 0f01 	tst.w	r3, #1
 8004598:	d041      	beq.n	800461e <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800459a:	4a67      	ldr	r2, [pc, #412]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 800459c:	6993      	ldr	r3, [r2, #24]
 800459e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045a2:	68a1      	ldr	r1, [r4, #8]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d027      	beq.n	8004602 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d02c      	beq.n	8004610 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045b6:	4a60      	ldr	r2, [pc, #384]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	f012 0f04 	tst.w	r2, #4
 80045be:	d106      	bne.n	80045ce <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80045c0:	2001      	movs	r0, #1
 80045c2:	e0ad      	b.n	8004720 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80045ca:	f000 80ae 	beq.w	800472a <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	495a      	ldr	r1, [pc, #360]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80045d0:	690a      	ldr	r2, [r1, #16]
 80045d2:	f022 0207 	bic.w	r2, r2, #7
 80045d6:	4313      	orrs	r3, r2
 80045d8:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80045da:	f7fe fd6b 	bl	80030b4 <HAL_GetTick>
 80045de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e0:	4b55      	ldr	r3, [pc, #340]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e8:	6862      	ldr	r2, [r4, #4]
 80045ea:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80045ee:	d016      	beq.n	800461e <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f0:	f7fe fd60 	bl	80030b4 <HAL_GetTick>
 80045f4:	1b80      	subs	r0, r0, r6
 80045f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045fa:	4298      	cmp	r0, r3
 80045fc:	d9f0      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80045fe:	2003      	movs	r0, #3
 8004600:	e08e      	b.n	8004720 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004602:	4a4d      	ldr	r2, [pc, #308]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800460a:	d1e0      	bne.n	80045ce <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800460c:	2001      	movs	r0, #1
 800460e:	e087      	b.n	8004720 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004610:	4a49      	ldr	r2, [pc, #292]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004618:	d1d9      	bne.n	80045ce <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800461a:	2001      	movs	r0, #1
 800461c:	e080      	b.n	8004720 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	f013 0f02 	tst.w	r3, #2
 8004624:	d00c      	beq.n	8004640 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004626:	68e2      	ldr	r2, [r4, #12]
 8004628:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	429a      	cmp	r2, r3
 8004632:	d205      	bcs.n	8004640 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4940      	ldr	r1, [pc, #256]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004636:	698b      	ldr	r3, [r1, #24]
 8004638:	f023 030f 	bic.w	r3, r3, #15
 800463c:	431a      	orrs	r2, r3
 800463e:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004640:	4b3c      	ldr	r3, [pc, #240]	; (8004734 <HAL_RCC_ClockConfig+0x27c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	42ab      	cmp	r3, r5
 800464a:	d90a      	bls.n	8004662 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464c:	4a39      	ldr	r2, [pc, #228]	; (8004734 <HAL_RCC_ClockConfig+0x27c>)
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	f023 030f 	bic.w	r3, r3, #15
 8004654:	432b      	orrs	r3, r5
 8004656:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004658:	6813      	ldr	r3, [r2, #0]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	42ab      	cmp	r3, r5
 8004660:	d165      	bne.n	800472e <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	f013 0f04 	tst.w	r3, #4
 8004668:	d00c      	beq.n	8004684 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800466a:	6922      	ldr	r2, [r4, #16]
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004674:	429a      	cmp	r2, r3
 8004676:	d205      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004678:	492f      	ldr	r1, [pc, #188]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 800467a:	698b      	ldr	r3, [r1, #24]
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	431a      	orrs	r2, r3
 8004682:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f013 0f08 	tst.w	r3, #8
 800468a:	d00c      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800468c:	6962      	ldr	r2, [r4, #20]
 800468e:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004696:	429a      	cmp	r2, r3
 8004698:	d205      	bcs.n	80046a6 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800469a:	4927      	ldr	r1, [pc, #156]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 800469c:	69cb      	ldr	r3, [r1, #28]
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	431a      	orrs	r2, r3
 80046a4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	f013 0f10 	tst.w	r3, #16
 80046ac:	d00c      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046ae:	69a2      	ldr	r2, [r4, #24]
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d205      	bcs.n	80046c8 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046bc:	491e      	ldr	r1, [pc, #120]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80046be:	69cb      	ldr	r3, [r1, #28]
 80046c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046c4:	431a      	orrs	r2, r3
 80046c6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f013 0f20 	tst.w	r3, #32
 80046ce:	d00c      	beq.n	80046ea <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046d0:	69e2      	ldr	r2, [r4, #28]
 80046d2:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046da:	429a      	cmp	r2, r3
 80046dc:	d205      	bcs.n	80046ea <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046de:	4916      	ldr	r1, [pc, #88]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80046e0:	6a0b      	ldr	r3, [r1, #32]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	431a      	orrs	r2, r3
 80046e8:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046ea:	f7ff fdeb 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 80046ee:	4912      	ldr	r1, [pc, #72]	; (8004738 <HAL_RCC_ClockConfig+0x280>)
 80046f0:	698b      	ldr	r3, [r1, #24]
 80046f2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80046f6:	4a11      	ldr	r2, [pc, #68]	; (800473c <HAL_RCC_ClockConfig+0x284>)
 80046f8:	5cd3      	ldrb	r3, [r2, r3]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004700:	698b      	ldr	r3, [r1, #24]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	5cd3      	ldrb	r3, [r2, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa20 f303 	lsr.w	r3, r0, r3
 8004710:	4a0b      	ldr	r2, [pc, #44]	; (8004740 <HAL_RCC_ClockConfig+0x288>)
 8004712:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_ClockConfig+0x28c>)
 8004716:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCC_ClockConfig+0x290>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	f7fe fb98 	bl	8002e50 <HAL_InitTick>
}
 8004720:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004722:	2001      	movs	r0, #1
}
 8004724:	4770      	bx	lr
      return HAL_ERROR;
 8004726:	2001      	movs	r0, #1
 8004728:	e7fa      	b.n	8004720 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800472a:	2001      	movs	r0, #1
 800472c:	e7f8      	b.n	8004720 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800472e:	2001      	movs	r0, #1
 8004730:	e7f6      	b.n	8004720 <HAL_RCC_ClockConfig+0x268>
 8004732:	bf00      	nop
 8004734:	52002000 	.word	0x52002000
 8004738:	58024400 	.word	0x58024400
 800473c:	08006b30 	.word	0x08006b30
 8004740:	24000018 	.word	0x24000018
 8004744:	24000014 	.word	0x24000014
 8004748:	24000020 	.word	0x24000020

0800474c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800474c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800474e:	f7ff fdb9 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8004752:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_RCC_GetHCLKFreq+0x34>)
 8004754:	6993      	ldr	r3, [r2, #24]
 8004756:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800475a:	490a      	ldr	r1, [pc, #40]	; (8004784 <HAL_RCC_GetHCLKFreq+0x38>)
 800475c:	5ccb      	ldrb	r3, [r1, r3]
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004766:	6992      	ldr	r2, [r2, #24]
 8004768:	f002 020f 	and.w	r2, r2, #15
 800476c:	5c88      	ldrb	r0, [r1, r2]
 800476e:	f000 001f 	and.w	r0, r0, #31
 8004772:	fa23 f000 	lsr.w	r0, r3, r0
 8004776:	4a04      	ldr	r2, [pc, #16]	; (8004788 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004778:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800477a:	4a04      	ldr	r2, [pc, #16]	; (800478c <HAL_RCC_GetHCLKFreq+0x40>)
 800477c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800477e:	bd08      	pop	{r3, pc}
 8004780:	58024400 	.word	0x58024400
 8004784:	08006b30 	.word	0x08006b30
 8004788:	24000018 	.word	0x24000018
 800478c:	24000014 	.word	0x24000014

08004790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004790:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004792:	f7ff ffdb 	bl	800474c <HAL_RCC_GetHCLKFreq>
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800479e:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a0:	5cd3      	ldrb	r3, [r2, r3]
 80047a2:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047a6:	40d8      	lsrs	r0, r3
 80047a8:	bd08      	pop	{r3, pc}
 80047aa:	bf00      	nop
 80047ac:	58024400 	.word	0x58024400
 80047b0:	08006b30 	.word	0x08006b30

080047b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047b6:	f7ff ffc9 	bl	800474c <HAL_RCC_GetHCLKFreq>
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80047c2:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c4:	5cd3      	ldrb	r3, [r2, r3]
 80047c6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047ca:	40d8      	lsrs	r0, r3
 80047cc:	bd08      	pop	{r3, pc}
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
 80047d4:	08006b30 	.word	0x08006b30

080047d8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80047d8:	233f      	movs	r3, #63	; 0x3f
 80047da:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_RCC_GetClockConfig+0x4c>)
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	f002 0207 	and.w	r2, r2, #7
 80047e4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80047ec:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	f002 020f 	and.w	r2, r2, #15
 80047f4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80047fc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004804:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800480c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004814:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004816:	4b04      	ldr	r3, [pc, #16]	; (8004828 <HAL_RCC_GetClockConfig+0x50>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	600b      	str	r3, [r1, #0]
}
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	58024400 	.word	0x58024400
 8004828:	52002000 	.word	0x52002000

0800482c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800482c:	4b40      	ldr	r3, [pc, #256]	; (8004930 <RCCEx_PLL2_Config+0x104>)
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	2b03      	cmp	r3, #3
 8004836:	d079      	beq.n	800492c <RCCEx_PLL2_Config+0x100>
{
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4605      	mov	r5, r0
 800483c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800483e:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <RCCEx_PLL2_Config+0x104>)
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004848:	f7fe fc34 	bl	80030b4 <HAL_GetTick>
 800484c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800484e:	4b38      	ldr	r3, [pc, #224]	; (8004930 <RCCEx_PLL2_Config+0x104>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004856:	d006      	beq.n	8004866 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004858:	f7fe fc2c 	bl	80030b4 <HAL_GetTick>
 800485c:	1b03      	subs	r3, r0, r4
 800485e:	2b02      	cmp	r3, #2
 8004860:	d9f5      	bls.n	800484e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8004862:	2003      	movs	r0, #3

  }


  return status;
}
 8004864:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004866:	4b32      	ldr	r3, [pc, #200]	; (8004930 <RCCEx_PLL2_Config+0x104>)
 8004868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800486e:	6829      	ldr	r1, [r5, #0]
 8004870:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8004874:	629a      	str	r2, [r3, #40]	; 0x28
 8004876:	686a      	ldr	r2, [r5, #4]
 8004878:	3a01      	subs	r2, #1
 800487a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800487e:	68a9      	ldr	r1, [r5, #8]
 8004880:	3901      	subs	r1, #1
 8004882:	0249      	lsls	r1, r1, #9
 8004884:	b289      	uxth	r1, r1
 8004886:	430a      	orrs	r2, r1
 8004888:	68e9      	ldr	r1, [r5, #12]
 800488a:	3901      	subs	r1, #1
 800488c:	0409      	lsls	r1, r1, #16
 800488e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004892:	430a      	orrs	r2, r1
 8004894:	6929      	ldr	r1, [r5, #16]
 8004896:	3901      	subs	r1, #1
 8004898:	0609      	lsls	r1, r1, #24
 800489a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800489e:	430a      	orrs	r2, r1
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048a8:	6969      	ldr	r1, [r5, #20]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	f022 0220 	bic.w	r2, r2, #32
 80048b4:	69a9      	ldr	r1, [r5, #24]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	f022 0210 	bic.w	r2, r2, #16
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80048c4:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <RCCEx_PLL2_Config+0x108>)
 80048c6:	400a      	ands	r2, r1
 80048c8:	69e9      	ldr	r1, [r5, #28]
 80048ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80048ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	f042 0210 	orr.w	r2, r2, #16
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80048d8:	b9c6      	cbnz	r6, 800490c <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048da:	461a      	mov	r2, r3
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80048e4:	4a12      	ldr	r2, [pc, #72]	; (8004930 <RCCEx_PLL2_Config+0x104>)
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ec:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80048ee:	f7fe fbe1 	bl	80030b4 <HAL_GetTick>
 80048f2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <RCCEx_PLL2_Config+0x104>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80048fc:	d114      	bne.n	8004928 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048fe:	f7fe fbd9 	bl	80030b4 <HAL_GetTick>
 8004902:	1b00      	subs	r0, r0, r4
 8004904:	2802      	cmp	r0, #2
 8004906:	d9f5      	bls.n	80048f4 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8004908:	2003      	movs	r0, #3
 800490a:	e7ab      	b.n	8004864 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800490c:	2e01      	cmp	r6, #1
 800490e:	d005      	beq.n	800491c <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004910:	4a07      	ldr	r2, [pc, #28]	; (8004930 <RCCEx_PLL2_Config+0x104>)
 8004912:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004918:	62d3      	str	r3, [r2, #44]	; 0x2c
 800491a:	e7e3      	b.n	80048e4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <RCCEx_PLL2_Config+0x104>)
 800491e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004924:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004926:	e7dd      	b.n	80048e4 <RCCEx_PLL2_Config+0xb8>
  return status;
 8004928:	2000      	movs	r0, #0
 800492a:	e79b      	b.n	8004864 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
}
 800492e:	4770      	bx	lr
 8004930:	58024400 	.word	0x58024400
 8004934:	ffff0007 	.word	0xffff0007

08004938 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004938:	4b40      	ldr	r3, [pc, #256]	; (8004a3c <RCCEx_PLL3_Config+0x104>)
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b03      	cmp	r3, #3
 8004942:	d079      	beq.n	8004a38 <RCCEx_PLL3_Config+0x100>
{
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4605      	mov	r5, r0
 8004948:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800494a:	4a3c      	ldr	r2, [pc, #240]	; (8004a3c <RCCEx_PLL3_Config+0x104>)
 800494c:	6813      	ldr	r3, [r2, #0]
 800494e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004954:	f7fe fbae 	bl	80030b4 <HAL_GetTick>
 8004958:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800495a:	4b38      	ldr	r3, [pc, #224]	; (8004a3c <RCCEx_PLL3_Config+0x104>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004962:	d006      	beq.n	8004972 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004964:	f7fe fba6 	bl	80030b4 <HAL_GetTick>
 8004968:	1b03      	subs	r3, r0, r4
 800496a:	2b02      	cmp	r3, #2
 800496c:	d9f5      	bls.n	800495a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800496e:	2003      	movs	r0, #3

  }


  return status;
}
 8004970:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004972:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <RCCEx_PLL3_Config+0x104>)
 8004974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004976:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800497a:	6829      	ldr	r1, [r5, #0]
 800497c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
 8004982:	686a      	ldr	r2, [r5, #4]
 8004984:	3a01      	subs	r2, #1
 8004986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498a:	68a9      	ldr	r1, [r5, #8]
 800498c:	3901      	subs	r1, #1
 800498e:	0249      	lsls	r1, r1, #9
 8004990:	b289      	uxth	r1, r1
 8004992:	430a      	orrs	r2, r1
 8004994:	68e9      	ldr	r1, [r5, #12]
 8004996:	3901      	subs	r1, #1
 8004998:	0409      	lsls	r1, r1, #16
 800499a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800499e:	430a      	orrs	r2, r1
 80049a0:	6929      	ldr	r1, [r5, #16]
 80049a2:	3901      	subs	r1, #1
 80049a4:	0609      	lsls	r1, r1, #24
 80049a6:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80049aa:	430a      	orrs	r2, r1
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049b4:	6969      	ldr	r1, [r5, #20]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80049ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049c0:	69a9      	ldr	r1, [r5, #24]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80049d0:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <RCCEx_PLL3_Config+0x108>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	69e9      	ldr	r1, [r5, #28]
 80049d6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80049da:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80049e4:	b9c6      	cbnz	r6, 8004a18 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049e6:	461a      	mov	r2, r3
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049ee:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80049f0:	4a12      	ldr	r2, [pc, #72]	; (8004a3c <RCCEx_PLL3_Config+0x104>)
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80049fa:	f7fe fb5b 	bl	80030b4 <HAL_GetTick>
 80049fe:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a00:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <RCCEx_PLL3_Config+0x104>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004a08:	d114      	bne.n	8004a34 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a0a:	f7fe fb53 	bl	80030b4 <HAL_GetTick>
 8004a0e:	1b00      	subs	r0, r0, r4
 8004a10:	2802      	cmp	r0, #2
 8004a12:	d9f5      	bls.n	8004a00 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8004a14:	2003      	movs	r0, #3
 8004a16:	e7ab      	b.n	8004970 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a18:	2e01      	cmp	r6, #1
 8004a1a:	d005      	beq.n	8004a28 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a1c:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <RCCEx_PLL3_Config+0x104>)
 8004a1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a26:	e7e3      	b.n	80049f0 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a28:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <RCCEx_PLL3_Config+0x104>)
 8004a2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a32:	e7dd      	b.n	80049f0 <RCCEx_PLL3_Config+0xb8>
  return status;
 8004a34:	2000      	movs	r0, #0
 8004a36:	e79b      	b.n	8004970 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8004a38:	2001      	movs	r0, #1
}
 8004a3a:	4770      	bx	lr
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	ffff0007 	.word	0xffff0007

08004a44 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a48:	6803      	ldr	r3, [r0, #0]
 8004a4a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004a4e:	d030      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a50:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004a52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a56:	d026      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a58:	d80e      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004a5a:	b1eb      	cbz	r3, 8004a98 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a60:	d107      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a62:	2102      	movs	r1, #2
 8004a64:	3004      	adds	r0, #4
 8004a66:	f7ff fee1 	bl	800482c <RCCEx_PLL2_Config>
 8004a6a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004a6c:	b145      	cbz	r5, 8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004a6e:	462e      	mov	r6, r5
 8004a70:	e021      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a72:	2601      	movs	r6, #1
 8004a74:	4635      	mov	r5, r6
 8004a76:	e01e      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004a78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004a7e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a80:	4a95      	ldr	r2, [pc, #596]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a82:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a88:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a8e:	2600      	movs	r6, #0
 8004a90:	e011      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a92:	2601      	movs	r6, #1
 8004a94:	4635      	mov	r5, r6
 8004a96:	e00e      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a98:	4a8f      	ldr	r2, [pc, #572]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004a9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aa2:	2500      	movs	r5, #0
 8004aa4:	e7ec      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	3024      	adds	r0, #36	; 0x24
 8004aaa:	f7ff ff45 	bl	8004938 <RCCEx_PLL3_Config>
 8004aae:	4605      	mov	r5, r0
      break;
 8004ab0:	e7dc      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ab2:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ab4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004abc:	d014      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004abe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d830      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ac4:	e8df f003 	tbb	[pc, r3]
 8004ac8:	08282203 	.word	0x08282203
 8004acc:	08          	.byte	0x08
 8004acd:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ace:	4a82      	ldr	r2, [pc, #520]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ad0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004ad8:	bb45      	cbnz	r5, 8004b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ada:	4a7f      	ldr	r2, [pc, #508]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004adc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004ade:	f023 0307 	bic.w	r3, r3, #7
 8004ae2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004aee:	d02f      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004af0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004af2:	2b80      	cmp	r3, #128	; 0x80
 8004af4:	d049      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x146>
 8004af6:	d81e      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d040      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d117      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b00:	2100      	movs	r1, #0
 8004b02:	1d20      	adds	r0, r4, #4
 8004b04:	f7ff fe92 	bl	800482c <RCCEx_PLL2_Config>
 8004b08:	4605      	mov	r5, r0
      break;
 8004b0a:	e019      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	1d20      	adds	r0, r4, #4
 8004b10:	f7ff fe8c 	bl	800482c <RCCEx_PLL2_Config>
 8004b14:	4605      	mov	r5, r0
      break;
 8004b16:	e7df      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b18:	2100      	movs	r1, #0
 8004b1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b1e:	f7ff ff0b 	bl	8004938 <RCCEx_PLL3_Config>
 8004b22:	4605      	mov	r5, r0
      break;
 8004b24:	e7d8      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b26:	2601      	movs	r6, #1
 8004b28:	4635      	mov	r5, r6
 8004b2a:	e7dd      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b2c:	462e      	mov	r6, r5
 8004b2e:	e7db      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b30:	2601      	movs	r6, #1
 8004b32:	4635      	mov	r5, r6
 8004b34:	e00c      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b36:	2bc0      	cmp	r3, #192	; 0xc0
 8004b38:	d002      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d11b      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8004b40:	bb55      	cbnz	r5, 8004b98 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b42:	4a65      	ldr	r2, [pc, #404]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004b44:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004b46:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004b4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b56:	d045      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b58:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b60:	d038      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004b62:	d81e      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b64:	b383      	cbz	r3, 8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b6a:	d117      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	1d20      	adds	r0, r4, #4
 8004b70:	f7ff fe5c 	bl	800482c <RCCEx_PLL2_Config>
 8004b74:	4605      	mov	r5, r0
      break;
 8004b76:	e01a      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b78:	2601      	movs	r6, #1
 8004b7a:	4635      	mov	r5, r6
 8004b7c:	e7e8      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b7e:	4a56      	ldr	r2, [pc, #344]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004b80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b86:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004b88:	e7da      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b90:	f7ff fed2 	bl	8004938 <RCCEx_PLL3_Config>
 8004b94:	4605      	mov	r5, r0
      break;
 8004b96:	e7d3      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8004b98:	462e      	mov	r6, r5
 8004b9a:	e7d9      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b9c:	2601      	movs	r6, #1
 8004b9e:	4635      	mov	r5, r6
 8004ba0:	e020      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8004ba2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ba6:	d002      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8004ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bac:	d109      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 8004bae:	b9c5      	cbnz	r5, 8004be2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004bb0:	4a49      	ldr	r2, [pc, #292]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004bb2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004bb4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004bb8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc0:	e010      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004bc2:	2601      	movs	r6, #1
 8004bc4:	4635      	mov	r5, r6
 8004bc6:	e00d      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc8:	4a43      	ldr	r2, [pc, #268]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004bca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004bd2:	e7ec      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004bda:	f7ff fead 	bl	8004938 <RCCEx_PLL3_Config>
 8004bde:	4605      	mov	r5, r0
      break;
 8004be0:	e7e5      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8004be2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004bea:	d023      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004bec:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf4:	d041      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8004bf6:	d80d      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d038      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c00:	d105      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c02:	2100      	movs	r1, #0
 8004c04:	1d20      	adds	r0, r4, #4
 8004c06:	f7ff fe11 	bl	800482c <RCCEx_PLL2_Config>
 8004c0a:	4605      	mov	r5, r0
      break;
 8004c0c:	e008      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c0e:	2601      	movs	r6, #1
 8004c10:	4635      	mov	r5, r6
 8004c12:	e00f      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004c14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c18:	d002      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c1e:	d123      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	d131      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c24:	4a2c      	ldr	r2, [pc, #176]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c26:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004c28:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004c2c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c3a:	d02e      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 8004c3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d03f      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004c42:	d826      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004c44:	b133      	cbz	r3, 8004c54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004c46:	2b10      	cmp	r3, #16
 8004c48:	d120      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4a:	4a23      	ldr	r2, [pc, #140]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c52:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	d13a      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c58:	4a1f      	ldr	r2, [pc, #124]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004c5c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004c60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c62:	430b      	orrs	r3, r1
 8004c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c66:	e018      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c68:	2601      	movs	r6, #1
 8004c6a:	4635      	mov	r5, r6
 8004c6c:	e7e2      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c76:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004c78:	e7d2      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c80:	f7ff fe5a 	bl	8004938 <RCCEx_PLL3_Config>
 8004c84:	4605      	mov	r5, r0
      break;
 8004c86:	e7cb      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c88:	462e      	mov	r6, r5
 8004c8a:	e7d3      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 8004c8c:	2601      	movs	r6, #1
 8004c8e:	4635      	mov	r5, r6
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004c92:	2b30      	cmp	r3, #48	; 0x30
 8004c94:	d0de      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004c96:	2601      	movs	r6, #1
 8004c98:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004ca0:	d02b      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ca2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d04c      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004caa:	d817      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d043      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	1d20      	adds	r0, r4, #4
 8004cba:	f7ff fdb7 	bl	800482c <RCCEx_PLL2_Config>
 8004cbe:	4605      	mov	r5, r0
      break;
 8004cc0:	e012      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	1d20      	adds	r0, r4, #4
 8004cc6:	f7ff fdb1 	bl	800482c <RCCEx_PLL2_Config>
 8004cca:	4605      	mov	r5, r0
      break;
 8004ccc:	e7c2      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004cce:	462e      	mov	r6, r5
 8004cd0:	e7e3      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004cd2:	2601      	movs	r6, #1
 8004cd4:	4635      	mov	r5, r6
 8004cd6:	e010      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8004cd8:	58024400 	.word	0x58024400
 8004cdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce6:	d124      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8004ce8:	2d00      	cmp	r5, #0
 8004cea:	d132      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004cec:	4a75      	ldr	r2, [pc, #468]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004cee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004d00:	d037      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d08:	d051      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004d0a:	d827      	bhi.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004d0c:	b13b      	cbz	r3, 8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d12:	d120      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d14:	2101      	movs	r1, #1
 8004d16:	1d20      	adds	r0, r4, #4
 8004d18:	f7ff fd88 	bl	800482c <RCCEx_PLL2_Config>
 8004d1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	d14c      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d22:	4a68      	ldr	r2, [pc, #416]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004d24:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004d26:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004d2a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6513      	str	r3, [r2, #80]	; 0x50
 8004d30:	e01f      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d32:	2601      	movs	r6, #1
 8004d34:	4635      	mov	r5, r6
 8004d36:	e7e0      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d38:	4a62      	ldr	r2, [pc, #392]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004d3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d40:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004d42:	e7d1      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d44:	2100      	movs	r1, #0
 8004d46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d4a:	f7ff fdf5 	bl	8004938 <RCCEx_PLL3_Config>
 8004d4e:	4605      	mov	r5, r0
      break;
 8004d50:	e7ca      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004d52:	462e      	mov	r6, r5
 8004d54:	e7d1      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d56:	2601      	movs	r6, #1
 8004d58:	4635      	mov	r5, r6
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004d5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d60:	d0dd      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004d62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d66:	d0da      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004d68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d6c:	d0d7      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004d6e:	2601      	movs	r6, #1
 8004d70:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004d78:	d030      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d7a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d82:	d044      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8004d84:	d81f      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d86:	b13b      	cbz	r3, 8004d98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8c:	d118      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d8e:	2101      	movs	r1, #1
 8004d90:	1d20      	adds	r0, r4, #4
 8004d92:	f7ff fd4b 	bl	800482c <RCCEx_PLL2_Config>
 8004d96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	d13f      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d9c:	4a49      	ldr	r2, [pc, #292]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004d9e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004da0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004da4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6593      	str	r3, [r2, #88]	; 0x58
 8004dac:	e016      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dae:	2101      	movs	r1, #1
 8004db0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004db4:	f7ff fdc0 	bl	8004938 <RCCEx_PLL3_Config>
 8004db8:	4605      	mov	r5, r0
      break;
 8004dba:	e7b0      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004dbc:	462e      	mov	r6, r5
 8004dbe:	e7d8      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004dc0:	2601      	movs	r6, #1
 8004dc2:	4635      	mov	r5, r6
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d0e5      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dd0:	d0e2      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004dd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dd6:	d0df      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004dd8:	2601      	movs	r6, #1
 8004dda:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004de2:	d009      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 8004de4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dea:	d019      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df0:	d024      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004df2:	b1d3      	cbz	r3, 8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004df4:	2601      	movs	r6, #1
 8004df6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004dfe:	d032      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 8004e00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d859      	bhi.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e06:	e8df f003 	tbb	[pc, r3]
 8004e0a:	2126      	.short	0x2126
 8004e0c:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e0e:	2101      	movs	r1, #1
 8004e10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e14:	f7ff fd90 	bl	8004938 <RCCEx_PLL3_Config>
 8004e18:	4605      	mov	r5, r0
      break;
 8004e1a:	e7bd      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004e1c:	462e      	mov	r6, r5
 8004e1e:	e7dd      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e20:	4a28      	ldr	r2, [pc, #160]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004e22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e28:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004e2a:	b96d      	cbnz	r5, 8004e48 <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e2c:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004e2e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004e30:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004e34:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6513      	str	r3, [r2, #80]	; 0x50
 8004e3a:	e7dd      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	1d20      	adds	r0, r4, #4
 8004e40:	f7ff fcf4 	bl	800482c <RCCEx_PLL2_Config>
 8004e44:	4605      	mov	r5, r0
      break;
 8004e46:	e7f0      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004e48:	462e      	mov	r6, r5
 8004e4a:	e7d5      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004e4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e54:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004e56:	bb9d      	cbnz	r5, 8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004e5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004e5c:	f023 0303 	bic.w	r3, r3, #3
 8004e60:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004e62:	430b      	orrs	r3, r1
 8004e64:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004e6c:	d12c      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	f013 0f01 	tst.w	r3, #1
 8004e74:	f000 80a3 	beq.w	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e78:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004e7a:	2b28      	cmp	r3, #40	; 0x28
 8004e7c:	f200 809d 	bhi.w	8004fba <HAL_RCCEx_PeriphCLKConfig+0x576>
 8004e80:	e8df f003 	tbb	[pc, r3]
 8004e84:	9b9b9b8b 	.word	0x9b9b9b8b
 8004e88:	9b9b9b9b 	.word	0x9b9b9b9b
 8004e8c:	9b9b9b86 	.word	0x9b9b9b86
 8004e90:	9b9b9b9b 	.word	0x9b9b9b9b
 8004e94:	9b9b9b94 	.word	0x9b9b9b94
 8004e98:	9b9b9b9b 	.word	0x9b9b9b9b
 8004e9c:	9b9b9b8b 	.word	0x9b9b9b8b
 8004ea0:	9b9b9b9b 	.word	0x9b9b9b9b
 8004ea4:	9b9b9b8b 	.word	0x9b9b9b8b
 8004ea8:	9b9b9b9b 	.word	0x9b9b9b9b
 8004eac:	8b          	.byte	0x8b
 8004ead:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004eae:	2102      	movs	r1, #2
 8004eb0:	1d20      	adds	r0, r4, #4
 8004eb2:	f7ff fcbb 	bl	800482c <RCCEx_PLL2_Config>
 8004eb6:	4605      	mov	r5, r0
      break;
 8004eb8:	e7cd      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 8004eba:	2601      	movs	r6, #1
 8004ebc:	4635      	mov	r5, r6
 8004ebe:	e7d2      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004ec0:	462e      	mov	r6, r5
 8004ec2:	e7d0      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004ec4:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec8:	4a8f      	ldr	r2, [pc, #572]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004ed2:	f7fe f8ef 	bl	80030b4 <HAL_GetTick>
 8004ed6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed8:	4b8b      	ldr	r3, [pc, #556]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ee0:	d105      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fe f8e7 	bl	80030b4 <HAL_GetTick>
 8004ee6:	1bc0      	subs	r0, r0, r7
 8004ee8:	2864      	cmp	r0, #100	; 0x64
 8004eea:	d9f5      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8004eec:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8004eee:	2d00      	cmp	r5, #0
 8004ef0:	d14a      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ef2:	4b86      	ldr	r3, [pc, #536]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004efa:	4053      	eors	r3, r2
 8004efc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004f00:	d00c      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f02:	4b82      	ldr	r3, [pc, #520]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f0a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f0c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004f10:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f12:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f14:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004f18:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004f1a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f1c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f24:	d015      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 8004f26:	bb8d      	cbnz	r5, 8004f8c <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f28:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004f2c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004f30:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004f34:	d01e      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8004f36:	4a75      	ldr	r2, [pc, #468]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f38:	6913      	ldr	r3, [r2, #16]
 8004f3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f3e:	6113      	str	r3, [r2, #16]
 8004f40:	4972      	ldr	r1, [pc, #456]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f42:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004f44:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004f48:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	670b      	str	r3, [r1, #112]	; 0x70
 8004f50:	e78d      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 8004f52:	f7fe f8af 	bl	80030b4 <HAL_GetTick>
 8004f56:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f58:	4b6c      	ldr	r3, [pc, #432]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	f013 0f02 	tst.w	r3, #2
 8004f60:	d1e1      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fe f8a7 	bl	80030b4 <HAL_GetTick>
 8004f66:	1bc0      	subs	r0, r0, r7
 8004f68:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f6c:	4298      	cmp	r0, r3
 8004f6e:	d9f3      	bls.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 8004f70:	2503      	movs	r5, #3
 8004f72:	e7d8      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f74:	4865      	ldr	r0, [pc, #404]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f76:	6902      	ldr	r2, [r0, #16]
 8004f78:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004f7c:	4964      	ldr	r1, [pc, #400]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f7e:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8004f82:	4313      	orrs	r3, r2
 8004f84:	6103      	str	r3, [r0, #16]
 8004f86:	e7db      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 8004f88:	462e      	mov	r6, r5
 8004f8a:	e770      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 8004f8c:	462e      	mov	r6, r5
 8004f8e:	e76e      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f90:	2101      	movs	r1, #1
 8004f92:	1d20      	adds	r0, r4, #4
 8004f94:	f7ff fc4a 	bl	800482c <RCCEx_PLL2_Config>
 8004f98:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004f9a:	b9e5      	cbnz	r5, 8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f9c:	4a5b      	ldr	r2, [pc, #364]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f9e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004fa0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004fa4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	6553      	str	r3, [r2, #84]	; 0x54
 8004faa:	e008      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fac:	2101      	movs	r1, #1
 8004fae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004fb2:	f7ff fcc1 	bl	8004938 <RCCEx_PLL3_Config>
 8004fb6:	4605      	mov	r5, r0
      break;
 8004fb8:	e7ef      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004fba:	2601      	movs	r6, #1
 8004fbc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	f013 0f02 	tst.w	r3, #2
 8004fc4:	d016      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004fc6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d827      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8004fcc:	e8df f003 	tbb	[pc, r3]
 8004fd0:	0a1f050a 	.word	0x0a1f050a
 8004fd4:	0a0a      	.short	0x0a0a
 8004fd6:	462e      	mov	r6, r5
 8004fd8:	e7f1      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fda:	2101      	movs	r1, #1
 8004fdc:	1d20      	adds	r0, r4, #4
 8004fde:	f7ff fc25 	bl	800482c <RCCEx_PLL2_Config>
 8004fe2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004fe4:	b9ed      	cbnz	r5, 8005022 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fe6:	4a49      	ldr	r2, [pc, #292]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fe8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004fea:	f023 0307 	bic.w	r3, r3, #7
 8004fee:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	f013 0f04 	tst.w	r3, #4
 8004ffa:	d022      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004ffc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005000:	2b05      	cmp	r3, #5
 8005002:	d843      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8005004:	e8df f003 	tbb	[pc, r3]
 8005008:	143b0f14 	.word	0x143b0f14
 800500c:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800500e:	2101      	movs	r1, #1
 8005010:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005014:	f7ff fc90 	bl	8004938 <RCCEx_PLL3_Config>
 8005018:	4605      	mov	r5, r0
      break;
 800501a:	e7e3      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800501c:	2601      	movs	r6, #1
 800501e:	4635      	mov	r5, r6
 8005020:	e7e8      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8005022:	462e      	mov	r6, r5
 8005024:	e7e6      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005026:	2101      	movs	r1, #1
 8005028:	1d20      	adds	r0, r4, #4
 800502a:	f7ff fbff 	bl	800482c <RCCEx_PLL2_Config>
 800502e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005030:	bb7d      	cbnz	r5, 8005092 <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005032:	4a36      	ldr	r2, [pc, #216]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005034:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005036:	f023 0307 	bic.w	r3, r3, #7
 800503a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800503e:	430b      	orrs	r3, r1
 8005040:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	f013 0f20 	tst.w	r3, #32
 8005048:	d033      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800504a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800504e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005052:	d04c      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8005054:	d822      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8005056:	b13b      	cbz	r3, 8005068 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800505c:	d11b      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800505e:	2100      	movs	r1, #0
 8005060:	1d20      	adds	r0, r4, #4
 8005062:	f7ff fbe3 	bl	800482c <RCCEx_PLL2_Config>
 8005066:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005068:	2d00      	cmp	r5, #0
 800506a:	d147      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800506c:	4a27      	ldr	r2, [pc, #156]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800506e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005070:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005074:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005078:	430b      	orrs	r3, r1
 800507a:	6553      	str	r3, [r2, #84]	; 0x54
 800507c:	e019      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800507e:	2101      	movs	r1, #1
 8005080:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005084:	f7ff fc58 	bl	8004938 <RCCEx_PLL3_Config>
 8005088:	4605      	mov	r5, r0
      break;
 800508a:	e7d1      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800508c:	2601      	movs	r6, #1
 800508e:	4635      	mov	r5, r6
 8005090:	e7d7      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8005092:	462e      	mov	r6, r5
 8005094:	e7d5      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005096:	2601      	movs	r6, #1
 8005098:	4635      	mov	r5, r6
 800509a:	e00a      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d0e2      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80050a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050a6:	d0df      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80050a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050ac:	d0dc      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80050ae:	2601      	movs	r6, #1
 80050b0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050b8:	d037      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80050ba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80050be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c2:	d052      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80050c4:	d826      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80050c6:	b13b      	cbz	r3, 80050d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d118      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ce:	2100      	movs	r1, #0
 80050d0:	1d20      	adds	r0, r4, #4
 80050d2:	f7ff fbab 	bl	800482c <RCCEx_PLL2_Config>
 80050d6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80050d8:	2d00      	cmp	r5, #0
 80050da:	d14d      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050dc:	4a0b      	ldr	r2, [pc, #44]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80050e4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80050e8:	430b      	orrs	r3, r1
 80050ea:	6593      	str	r3, [r2, #88]	; 0x58
 80050ec:	e01d      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050ee:	2102      	movs	r1, #2
 80050f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80050f4:	f7ff fc20 	bl	8004938 <RCCEx_PLL3_Config>
 80050f8:	4605      	mov	r5, r0
      break;
 80050fa:	e7b5      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80050fc:	462e      	mov	r6, r5
 80050fe:	e7d8      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005100:	2601      	movs	r6, #1
 8005102:	4635      	mov	r5, r6
 8005104:	e011      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8005106:	bf00      	nop
 8005108:	58024800 	.word	0x58024800
 800510c:	58024400 	.word	0x58024400
 8005110:	00ffffcf 	.word	0x00ffffcf
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d0de      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800511a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800511e:	d0db      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8005120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005124:	d0d8      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8005126:	2601      	movs	r6, #1
 8005128:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005130:	d032      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005132:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800513a:	f000 809d 	beq.w	8005278 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800513e:	d820      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005140:	b13b      	cbz	r3, 8005152 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005146:	d119      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005148:	2100      	movs	r1, #0
 800514a:	1d20      	adds	r0, r4, #4
 800514c:	f7ff fb6e 	bl	800482c <RCCEx_PLL2_Config>
 8005150:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005152:	2d00      	cmp	r5, #0
 8005154:	f040 8097 	bne.w	8005286 <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005158:	4aa5      	ldr	r2, [pc, #660]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800515a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800515c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005160:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005164:	430b      	orrs	r3, r1
 8005166:	6593      	str	r3, [r2, #88]	; 0x58
 8005168:	e016      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800516a:	2102      	movs	r1, #2
 800516c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005170:	f7ff fbe2 	bl	8004938 <RCCEx_PLL3_Config>
 8005174:	4605      	mov	r5, r0
      break;
 8005176:	e7af      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8005178:	462e      	mov	r6, r5
 800517a:	e7d6      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800517c:	2601      	movs	r6, #1
 800517e:	4635      	mov	r5, r6
 8005180:	e00a      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005186:	d0e4      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005188:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800518c:	d0e1      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800518e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005192:	d0de      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005194:	2601      	movs	r6, #1
 8005196:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	f013 0f08 	tst.w	r3, #8
 800519e:	d00c      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80051a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a8:	d06f      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80051aa:	4a91      	ldr	r2, [pc, #580]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80051ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80051ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051b2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80051b6:	430b      	orrs	r3, r1
 80051b8:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	f013 0f10 	tst.w	r3, #16
 80051c0:	d00c      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80051c2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ca:	d067      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051cc:	4a88      	ldr	r2, [pc, #544]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80051ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80051d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80051d8:	430b      	orrs	r3, r1
 80051da:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80051e2:	d00b      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 80051e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ec:	d06e      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x888>
 80051ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f2:	d061      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80051f8:	2601      	movs	r6, #1
 80051fa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005202:	d00c      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 8005204:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800520c:	d076      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800520e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005212:	d069      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8005214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005218:	d061      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800521a:	2601      	movs	r6, #1
 800521c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005224:	d007      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 8005226:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d070      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800522c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005230:	d07b      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8005232:	2601      	movs	r6, #1
 8005234:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800523c:	d17d      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005244:	f000 8086 	beq.w	8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 8005248:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800524a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524e:	f000 80c6 	beq.w	80053de <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8005252:	d97c      	bls.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005258:	d003      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800525a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525e:	f040 80bc 	bne.w	80053da <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 8005262:	2d00      	cmp	r5, #0
 8005264:	f040 80c1 	bne.w	80053ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005268:	4a61      	ldr	r2, [pc, #388]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800526a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005272:	430b      	orrs	r3, r1
 8005274:	6553      	str	r3, [r2, #84]	; 0x54
 8005276:	e06d      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005278:	2102      	movs	r1, #2
 800527a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800527e:	f7ff fb5b 	bl	8004938 <RCCEx_PLL3_Config>
 8005282:	4605      	mov	r5, r0
      break;
 8005284:	e765      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005286:	462e      	mov	r6, r5
 8005288:	e786      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800528a:	2102      	movs	r1, #2
 800528c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005290:	f7ff fb52 	bl	8004938 <RCCEx_PLL3_Config>
 8005294:	2800      	cmp	r0, #0
 8005296:	d088      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 8005298:	2601      	movs	r6, #1
 800529a:	e786      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800529c:	2102      	movs	r1, #2
 800529e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052a2:	f7ff fb49 	bl	8004938 <RCCEx_PLL3_Config>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d090      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 80052aa:	2601      	movs	r6, #1
 80052ac:	e78e      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ae:	2100      	movs	r1, #0
 80052b0:	1d20      	adds	r0, r4, #4
 80052b2:	f7ff fabb 	bl	800482c <RCCEx_PLL2_Config>
 80052b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80052b8:	b97d      	cbnz	r5, 80052da <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052ba:	4a4d      	ldr	r2, [pc, #308]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80052bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80052be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80052c2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80052c6:	430b      	orrs	r3, r1
 80052c8:	6593      	str	r3, [r2, #88]	; 0x58
 80052ca:	e797      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052cc:	2102      	movs	r1, #2
 80052ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052d2:	f7ff fb31 	bl	8004938 <RCCEx_PLL3_Config>
 80052d6:	4605      	mov	r5, r0
      break;
 80052d8:	e7ee      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
 80052da:	462e      	mov	r6, r5
 80052dc:	e78e      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052de:	4a44      	ldr	r2, [pc, #272]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80052e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80052e8:	b97d      	cbnz	r5, 800530a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ea:	4a41      	ldr	r2, [pc, #260]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80052ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80052ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80052f2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80052f6:	430b      	orrs	r3, r1
 80052f8:	6553      	str	r3, [r2, #84]	; 0x54
 80052fa:	e790      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052fc:	2101      	movs	r1, #1
 80052fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005302:	f7ff fb19 	bl	8004938 <RCCEx_PLL3_Config>
 8005306:	4605      	mov	r5, r0
      break;
 8005308:	e7ee      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800530a:	462e      	mov	r6, r5
 800530c:	e787      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530e:	4a38      	ldr	r2, [pc, #224]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8005310:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005316:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005318:	b96d      	cbnz	r5, 8005336 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800531a:	4a35      	ldr	r2, [pc, #212]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800531c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800531e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005322:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005324:	430b      	orrs	r3, r1
 8005326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005328:	e785      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800532a:	2102      	movs	r1, #2
 800532c:	1d20      	adds	r0, r4, #4
 800532e:	f7ff fa7d 	bl	800482c <RCCEx_PLL2_Config>
 8005332:	4605      	mov	r5, r0
      break;
 8005334:	e7f0      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8005336:	462e      	mov	r6, r5
 8005338:	e77d      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800533a:	2102      	movs	r1, #2
 800533c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005340:	f7ff fafa 	bl	8004938 <RCCEx_PLL3_Config>
 8005344:	2800      	cmp	r0, #0
 8005346:	f43f af7a 	beq.w	800523e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 800534a:	2601      	movs	r6, #1
 800534c:	e777      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 800534e:	2b00      	cmp	r3, #0
 8005350:	d087      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005352:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800535a:	d006      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800535c:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800535e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005364:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005366:	430b      	orrs	r3, r1
 8005368:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005370:	d007      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005372:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8005374:	6913      	ldr	r3, [r2, #16]
 8005376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800537a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800537e:	430b      	orrs	r3, r1
 8005380:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005388:	d006      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800538a:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800538c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800538e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005392:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005394:	430b      	orrs	r3, r1
 8005396:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800539e:	d009      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053a0:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80053b0:	430a      	orrs	r2, r1
 80053b2:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	db1c      	blt.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80053c0:	d007      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053c2:	4a0b      	ldr	r2, [pc, #44]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80053c4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80053ca:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80053ce:	430b      	orrs	r3, r1
 80053d0:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 80053d2:	b106      	cbz	r6, 80053d6 <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 80053d4:	2601      	movs	r6, #1
}
 80053d6:	4630      	mov	r0, r6
 80053d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 80053da:	2601      	movs	r6, #1
 80053dc:	e7ba      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053de:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80053e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80053e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e6:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80053e8:	e73b      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80053ea:	462e      	mov	r6, r5
 80053ec:	e7b2      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053f4:	4a03      	ldr	r2, [pc, #12]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80053f6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80053f8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80053fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80053fe:	430b      	orrs	r3, r1
 8005400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005402:	e7da      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005404:	58024400 	.word	0x58024400

08005408 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005408:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800540a:	f7ff f99f 	bl	800474c <HAL_RCC_GetHCLKFreq>
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005416:	4a04      	ldr	r2, [pc, #16]	; (8005428 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005418:	5cd3      	ldrb	r3, [r2, r3]
 800541a:	f003 031f 	and.w	r3, r3, #31
}
 800541e:	40d8      	lsrs	r0, r3
 8005420:	bd08      	pop	{r3, pc}
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	08006b30 	.word	0x08006b30

0800542c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800542c:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800542e:	4a77      	ldr	r2, [pc, #476]	; (800560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005430:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005432:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8005434:	f3c4 3e05 	ubfx	lr, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005438:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800543a:	f3c3 1c00 	ubfx	ip, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800543e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005440:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005444:	fb0c f303 	mul.w	r3, ip, r3
  if (pll2m != 0U)
 8005448:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 800544c:	f000 80d8 	beq.w	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
 8005450:	f001 0103 	and.w	r1, r1, #3
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800545c:	2901      	cmp	r1, #1
 800545e:	d065      	beq.n	800552c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8005460:	2902      	cmp	r1, #2
 8005462:	f000 80b0 	beq.w	80055c6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8005466:	b1e1      	cbz	r1, 80054a2 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005468:	ee07 ea10 	vmov	s14, lr
 800546c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005470:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005474:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005478:	4b64      	ldr	r3, [pc, #400]	; (800560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005480:	ee07 3a10 	vmov	s14, r3
 8005484:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005488:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800548c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800549c:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80054a0:	e060      	b.n	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	f013 0f20 	tst.w	r3, #32
 80054a8:	d023      	beq.n	80054f2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054aa:	4611      	mov	r1, r2
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80054b2:	4b59      	ldr	r3, [pc, #356]	; (8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 80054b4:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054b6:	ee07 3a10 	vmov	s14, r3
 80054ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80054be:	ee06 ea90 	vmov	s13, lr
 80054c2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80054c6:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80054ca:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	ee07 3a10 	vmov	s14, r3
 80054d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80054d8:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80054dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80054e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054f0:	e038      	b.n	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054f2:	ee07 ea10 	vmov	s14, lr
 80054f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80054fa:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800561c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80054fe:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005502:	4b42      	ldr	r3, [pc, #264]	; (800560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	ee07 3a10 	vmov	s14, r3
 800550e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005512:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005516:	ee67 7a86 	vmul.f32	s15, s15, s12
 800551a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800551e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005526:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800552a:	e01b      	b.n	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800552c:	ee07 ea10 	vmov	s14, lr
 8005530:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005534:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005538:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800553c:	4b33      	ldr	r3, [pc, #204]	; (800560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	ee07 3a10 	vmov	s14, r3
 8005548:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800554c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005550:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800555c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005560:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005564:	4a29      	ldr	r2, [pc, #164]	; (800560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005566:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005568:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800556c:	ee07 3a10 	vmov	s14, r3
 8005570:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005574:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005578:	ee37 7a06 	vadd.f32	s14, s14, s12
 800557c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005584:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005588:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800558a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800558e:	ee07 3a10 	vmov	s14, r3
 8005592:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005596:	ee37 7a06 	vadd.f32	s14, s14, s12
 800559a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800559e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a2:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80055a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80055a8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80055b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055bc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80055c0:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80055c4:	bd10      	pop	{r4, pc}
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055c6:	ee07 ea10 	vmov	s14, lr
 80055ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055ce:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80055d2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	ee07 3a10 	vmov	s14, r3
 80055e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055e6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80055ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80055ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80055fe:	e7b1      	b.n	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005604:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005606:	6083      	str	r3, [r0, #8]
}
 8005608:	e7dc      	b.n	80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 800560a:	bf00      	nop
 800560c:	58024400 	.word	0x58024400
 8005610:	4a742400 	.word	0x4a742400
 8005614:	39000000 	.word	0x39000000
 8005618:	03d09000 	.word	0x03d09000
 800561c:	4c742400 	.word	0x4c742400
 8005620:	4af42400 	.word	0x4af42400

08005624 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8005624:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005626:	4a77      	ldr	r2, [pc, #476]	; (8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005628:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800562a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800562c:	f3c4 5e05 	ubfx	lr, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005630:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005632:	f3c3 2c00 	ubfx	ip, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005636:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005638:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800563c:	fb0c f303 	mul.w	r3, ip, r3
  if (pll3m != 0U)
 8005640:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8005644:	f000 80d8 	beq.w	80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
 8005648:	f001 0103 	and.w	r1, r1, #3
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8005654:	2901      	cmp	r1, #1
 8005656:	d065      	beq.n	8005724 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8005658:	2902      	cmp	r1, #2
 800565a:	f000 80b0 	beq.w	80057be <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800565e:	b1e1      	cbz	r1, 800569a <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005660:	ee07 ea10 	vmov	s14, lr
 8005664:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005668:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800566c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005670:	4b64      	ldr	r3, [pc, #400]	; (8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	ee07 3a10 	vmov	s14, r3
 800567c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005680:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005684:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800568c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005694:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8005698:	e060      	b.n	800575c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	f013 0f20 	tst.w	r3, #32
 80056a0:	d023      	beq.n	80056ea <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056a2:	4611      	mov	r1, r2
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80056aa:	4b59      	ldr	r3, [pc, #356]	; (8005810 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 80056ac:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056ae:	ee07 3a10 	vmov	s14, r3
 80056b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80056b6:	ee06 ea90 	vmov	s13, lr
 80056ba:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80056be:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80056c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c8:	ee07 3a10 	vmov	s14, r3
 80056cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80056d0:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80056d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80056d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056e8:	e038      	b.n	800575c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056ea:	ee07 ea10 	vmov	s14, lr
 80056ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80056f2:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8005814 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80056f6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80056fa:	4b42      	ldr	r3, [pc, #264]	; (8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	ee07 3a10 	vmov	s14, r3
 8005706:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800570a:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800570e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800571a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800571e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005722:	e01b      	b.n	800575c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005724:	ee07 ea10 	vmov	s14, lr
 8005728:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800572c:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8005730:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005734:	4b33      	ldr	r3, [pc, #204]	; (8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573c:	ee07 3a10 	vmov	s14, r3
 8005740:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005744:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005748:	ee67 7a86 	vmul.f32	s15, s15, s12
 800574c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005754:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005758:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800575c:	4a29      	ldr	r2, [pc, #164]	; (8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800575e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005760:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005764:	ee07 3a10 	vmov	s14, r3
 8005768:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800576c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005770:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577c:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005780:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005782:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005786:	ee07 3a10 	vmov	s14, r3
 800578a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800578e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579a:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800579e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80057a0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ac:	ee77 7a86 	vadd.f32	s15, s15, s12
 80057b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80057b8:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80057bc:	bd10      	pop	{r4, pc}
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057be:	ee07 ea10 	vmov	s14, lr
 80057c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80057c6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005818 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80057ca:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a10 	vmov	s14, r3
 80057da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80057de:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80057e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80057f6:	e7b1      	b.n	800575c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057fc:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057fe:	6083      	str	r3, [r0, #8]
}
 8005800:	e7dc      	b.n	80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8005802:	bf00      	nop
 8005804:	58024400 	.word	0x58024400
 8005808:	4a742400 	.word	0x4a742400
 800580c:	39000000 	.word	0x39000000
 8005810:	03d09000 	.word	0x03d09000
 8005814:	4c742400 	.word	0x4c742400
 8005818:	4af42400 	.word	0x4af42400

0800581c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800581c:	4770      	bx	lr
	...

08005820 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005820:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d136      	bne.n	8005898 <HAL_TIM_Base_Start_IT+0x78>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582a:	2302      	movs	r3, #2
 800582c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005830:	6802      	ldr	r2, [r0, #0]
 8005832:	68d3      	ldr	r3, [r2, #12]
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	6803      	ldr	r3, [r0, #0]
 800583c:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <HAL_TIM_Base_Start_IT+0x80>)
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005842:	bf18      	it	ne
 8005844:	4293      	cmpne	r3, r2
 8005846:	d019      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x5c>
 8005848:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800584c:	4293      	cmp	r3, r2
 800584e:	d015      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x5c>
 8005850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005854:	4293      	cmp	r3, r2
 8005856:	d011      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x5c>
 8005858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800585c:	4293      	cmp	r3, r2
 800585e:	d00d      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x5c>
 8005860:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005864:	4293      	cmp	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x5c>
 8005868:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800586c:	4293      	cmp	r3, r2
 800586e:	d005      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005878:	2000      	movs	r0, #0
 800587a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587c:	6899      	ldr	r1, [r3, #8]
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <HAL_TIM_Base_Start_IT+0x84>)
 8005880:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005882:	2a06      	cmp	r2, #6
 8005884:	bf18      	it	ne
 8005886:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800588a:	d007      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005894:	2000      	movs	r0, #0
 8005896:	4770      	bx	lr
    return HAL_ERROR;
 8005898:	2001      	movs	r0, #1
 800589a:	4770      	bx	lr
  return HAL_OK;
 800589c:	2000      	movs	r0, #0
}
 800589e:	4770      	bx	lr
 80058a0:	40010000 	.word	0x40010000
 80058a4:	00010007 	.word	0x00010007

080058a8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058a8:	4770      	bx	lr

080058aa <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058aa:	4770      	bx	lr

080058ac <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ac:	4770      	bx	lr

080058ae <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIM_IRQHandler>:
{
 80058b0:	b510      	push	{r4, lr}
 80058b2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058b4:	6803      	ldr	r3, [r0, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	f012 0f02 	tst.w	r2, #2
 80058bc:	d011      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	f012 0f02 	tst.w	r2, #2
 80058c4:	d00d      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058c6:	f06f 0202 	mvn.w	r2, #2
 80058ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058cc:	2301      	movs	r3, #1
 80058ce:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d0:	6803      	ldr	r3, [r0, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f013 0f03 	tst.w	r3, #3
 80058d8:	d079      	beq.n	80059ce <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80058da:	f7ff ffe6 	bl	80058aa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	2300      	movs	r3, #0
 80058e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	f012 0f04 	tst.w	r2, #4
 80058ea:	d012      	beq.n	8005912 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	f012 0f04 	tst.w	r2, #4
 80058f2:	d00e      	beq.n	8005912 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058f4:	f06f 0204 	mvn.w	r2, #4
 80058f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058fa:	2302      	movs	r3, #2
 80058fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005906:	d068      	beq.n	80059da <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005908:	4620      	mov	r0, r4
 800590a:	f7ff ffce 	bl	80058aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	2300      	movs	r3, #0
 8005910:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	f012 0f08 	tst.w	r2, #8
 800591a:	d012      	beq.n	8005942 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	f012 0f08 	tst.w	r2, #8
 8005922:	d00e      	beq.n	8005942 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005924:	f06f 0208 	mvn.w	r2, #8
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592a:	2304      	movs	r3, #4
 800592c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f013 0f03 	tst.w	r3, #3
 8005936:	d057      	beq.n	80059e8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005938:	4620      	mov	r0, r4
 800593a:	f7ff ffb6 	bl	80058aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	2300      	movs	r3, #0
 8005940:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	f012 0f10 	tst.w	r2, #16
 800594a:	d012      	beq.n	8005972 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	f012 0f10 	tst.w	r2, #16
 8005952:	d00e      	beq.n	8005972 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005954:	f06f 0210 	mvn.w	r2, #16
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800595a:	2308      	movs	r3, #8
 800595c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005966:	d046      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005968:	4620      	mov	r0, r4
 800596a:	f7ff ff9e 	bl	80058aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596e:	2300      	movs	r3, #0
 8005970:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	f012 0f01 	tst.w	r2, #1
 800597a:	d003      	beq.n	8005984 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	f012 0f01 	tst.w	r2, #1
 8005982:	d13f      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	f012 0f80 	tst.w	r2, #128	; 0x80
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005994:	d13d      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800599e:	d003      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80059a6:	d13b      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80059b0:	d003      	beq.n	80059ba <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80059b8:	d139      	bne.n	8005a2e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	f012 0f20 	tst.w	r2, #32
 80059c2:	d003      	beq.n	80059cc <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	f012 0f20 	tst.w	r2, #32
 80059ca:	d137      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x18c>
}
 80059cc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	f7ff ff6b 	bl	80058a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7ff ff6a 	bl	80058ac <HAL_TIM_PWM_PulseFinishedCallback>
 80059d8:	e781      	b.n	80058de <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	4620      	mov	r0, r4
 80059dc:	f7ff ff64 	bl	80058a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff ff63 	bl	80058ac <HAL_TIM_PWM_PulseFinishedCallback>
 80059e6:	e792      	b.n	800590e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e8:	4620      	mov	r0, r4
 80059ea:	f7ff ff5d 	bl	80058a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ee:	4620      	mov	r0, r4
 80059f0:	f7ff ff5c 	bl	80058ac <HAL_TIM_PWM_PulseFinishedCallback>
 80059f4:	e7a3      	b.n	800593e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7ff ff56 	bl	80058a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fc:	4620      	mov	r0, r4
 80059fe:	f7ff ff55 	bl	80058ac <HAL_TIM_PWM_PulseFinishedCallback>
 8005a02:	e7b4      	b.n	800596e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a04:	f06f 0201 	mvn.w	r2, #1
 8005a08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f7fc ffaa 	bl	8002964 <HAL_TIM_PeriodElapsedCallback>
 8005a10:	e7b8      	b.n	8005984 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 f8ca 	bl	8005bb2 <HAL_TIMEx_BreakCallback>
 8005a1e:	e7ba      	b.n	8005996 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f8c4 	bl	8005bb4 <HAL_TIMEx_Break2Callback>
 8005a2c:	e7bc      	b.n	80059a8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a32:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005a34:	4620      	mov	r0, r4
 8005a36:	f7ff ff3a 	bl	80058ae <HAL_TIM_TriggerCallback>
 8005a3a:	e7be      	b.n	80059ba <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a3c:	f06f 0220 	mvn.w	r2, #32
 8005a40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005a42:	4620      	mov	r0, r4
 8005a44:	f000 f8b4 	bl	8005bb0 <HAL_TIMEx_CommutCallback>
}
 8005a48:	e7c0      	b.n	80059cc <HAL_TIM_IRQHandler+0x11c>
	...

08005a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a4c:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	4a39      	ldr	r2, [pc, #228]	; (8005b38 <TIM_Base_SetConfig+0xec>)
 8005a52:	4290      	cmp	r0, r2
 8005a54:	bf14      	ite	ne
 8005a56:	f04f 0e00 	movne.w	lr, #0
 8005a5a:	f04f 0e01 	moveq.w	lr, #1
 8005a5e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005a62:	bf14      	ite	ne
 8005a64:	4672      	movne	r2, lr
 8005a66:	f04e 0201 	orreq.w	r2, lr, #1
 8005a6a:	b9aa      	cbnz	r2, 8005a98 <TIM_Base_SetConfig+0x4c>
 8005a6c:	4c33      	ldr	r4, [pc, #204]	; (8005b3c <TIM_Base_SetConfig+0xf0>)
 8005a6e:	42a0      	cmp	r0, r4
 8005a70:	bf14      	ite	ne
 8005a72:	2400      	movne	r4, #0
 8005a74:	2401      	moveq	r4, #1
 8005a76:	4d32      	ldr	r5, [pc, #200]	; (8005b40 <TIM_Base_SetConfig+0xf4>)
 8005a78:	42a8      	cmp	r0, r5
 8005a7a:	d00d      	beq.n	8005a98 <TIM_Base_SetConfig+0x4c>
 8005a7c:	b964      	cbnz	r4, 8005a98 <TIM_Base_SetConfig+0x4c>
 8005a7e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005a82:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8005a86:	42a0      	cmp	r0, r4
 8005a88:	bf14      	ite	ne
 8005a8a:	2400      	movne	r4, #0
 8005a8c:	2401      	moveq	r4, #1
 8005a8e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a92:	42a8      	cmp	r0, r5
 8005a94:	d000      	beq.n	8005a98 <TIM_Base_SetConfig+0x4c>
 8005a96:	b11c      	cbz	r4, 8005aa0 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a9c:	684c      	ldr	r4, [r1, #4]
 8005a9e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aa0:	bb12      	cbnz	r2, 8005ae8 <TIM_Base_SetConfig+0x9c>
 8005aa2:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <TIM_Base_SetConfig+0xf0>)
 8005aa4:	4290      	cmp	r0, r2
 8005aa6:	bf14      	ite	ne
 8005aa8:	2200      	movne	r2, #0
 8005aaa:	2201      	moveq	r2, #1
 8005aac:	4c24      	ldr	r4, [pc, #144]	; (8005b40 <TIM_Base_SetConfig+0xf4>)
 8005aae:	42a0      	cmp	r0, r4
 8005ab0:	d01a      	beq.n	8005ae8 <TIM_Base_SetConfig+0x9c>
 8005ab2:	b9ca      	cbnz	r2, 8005ae8 <TIM_Base_SetConfig+0x9c>
 8005ab4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005ab8:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005abc:	4290      	cmp	r0, r2
 8005abe:	bf14      	ite	ne
 8005ac0:	2200      	movne	r2, #0
 8005ac2:	2201      	moveq	r2, #1
 8005ac4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005ac8:	42a0      	cmp	r0, r4
 8005aca:	d00d      	beq.n	8005ae8 <TIM_Base_SetConfig+0x9c>
 8005acc:	b962      	cbnz	r2, 8005ae8 <TIM_Base_SetConfig+0x9c>
 8005ace:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <TIM_Base_SetConfig+0xf8>)
 8005ad0:	4290      	cmp	r0, r2
 8005ad2:	bf14      	ite	ne
 8005ad4:	2200      	movne	r2, #0
 8005ad6:	2201      	moveq	r2, #1
 8005ad8:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0x9c>
 8005ae0:	b912      	cbnz	r2, 8005ae8 <TIM_Base_SetConfig+0x9c>
 8005ae2:	4a19      	ldr	r2, [pc, #100]	; (8005b48 <TIM_Base_SetConfig+0xfc>)
 8005ae4:	4290      	cmp	r0, r2
 8005ae6:	d104      	bne.n	8005af2 <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae8:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aec:	68cb      	ldr	r3, [r1, #12]
 8005aee:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af6:	694a      	ldr	r2, [r1, #20]
 8005af8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005afa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b00:	680a      	ldr	r2, [r1, #0]
 8005b02:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b04:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <TIM_Base_SetConfig+0x100>)
 8005b06:	4290      	cmp	r0, r2
 8005b08:	bf14      	ite	ne
 8005b0a:	4673      	movne	r3, lr
 8005b0c:	f04e 0301 	orreq.w	r3, lr, #1
 8005b10:	b963      	cbnz	r3, 8005b2c <TIM_Base_SetConfig+0xe0>
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <TIM_Base_SetConfig+0xf8>)
 8005b14:	4298      	cmp	r0, r3
 8005b16:	bf14      	ite	ne
 8005b18:	2300      	movne	r3, #0
 8005b1a:	2301      	moveq	r3, #1
 8005b1c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005b20:	4290      	cmp	r0, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0xe0>
 8005b24:	b913      	cbnz	r3, 8005b2c <TIM_Base_SetConfig+0xe0>
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <TIM_Base_SetConfig+0xfc>)
 8005b28:	4298      	cmp	r0, r3
 8005b2a:	d101      	bne.n	8005b30 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b2c:	690b      	ldr	r3, [r1, #16]
 8005b2e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b30:	2301      	movs	r3, #1
 8005b32:	6143      	str	r3, [r0, #20]
}
 8005b34:	bd30      	pop	{r4, r5, pc}
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40014400 	.word	0x40014400
 8005b48:	40014800 	.word	0x40014800
 8005b4c:	40010400 	.word	0x40010400

08005b50 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005b50:	b360      	cbz	r0, 8005bac <HAL_TIM_Base_Init+0x5c>
{
 8005b52:	b510      	push	{r4, lr}
 8005b54:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005b56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005b5a:	b313      	cbz	r3, 8005ba2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b62:	4621      	mov	r1, r4
 8005b64:	f851 0b04 	ldr.w	r0, [r1], #4
 8005b68:	f7ff ff70 	bl	8005a4c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005b76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005b7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005b7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005b82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005b96:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005b9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005b9e:	2000      	movs	r0, #0
}
 8005ba0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005ba2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005ba6:	f7ff fe39 	bl	800581c <HAL_TIM_Base_MspInit>
 8005baa:	e7d7      	b.n	8005b5c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005bac:	2001      	movs	r0, #1
}
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bb4:	4770      	bx	lr
	...

08005bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bbe:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bc0:	6883      	ldr	r3, [r0, #8]
 8005bc2:	6902      	ldr	r2, [r0, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	6942      	ldr	r2, [r0, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	69c2      	ldr	r2, [r0, #28]
 8005bcc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bce:	6808      	ldr	r0, [r1, #0]
 8005bd0:	4a88      	ldr	r2, [pc, #544]	; (8005df4 <UART_SetConfig+0x23c>)
 8005bd2:	4002      	ands	r2, r0
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	6853      	ldr	r3, [r2, #4]
 8005bdc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005be0:	68e1      	ldr	r1, [r4, #12]
 8005be2:	430b      	orrs	r3, r1
 8005be4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005be6:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005be8:	6822      	ldr	r2, [r4, #0]
 8005bea:	4b83      	ldr	r3, [pc, #524]	; (8005df8 <UART_SetConfig+0x240>)
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d001      	beq.n	8005bf4 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bf0:	6a23      	ldr	r3, [r4, #32]
 8005bf2:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf4:	6890      	ldr	r0, [r2, #8]
 8005bf6:	4b81      	ldr	r3, [pc, #516]	; (8005dfc <UART_SetConfig+0x244>)
 8005bf8:	4003      	ands	r3, r0
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005c02:	f023 030f 	bic.w	r3, r3, #15
 8005c06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c0c:	6822      	ldr	r2, [r4, #0]
 8005c0e:	4b7c      	ldr	r3, [pc, #496]	; (8005e00 <UART_SetConfig+0x248>)
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d021      	beq.n	8005c58 <UART_SetConfig+0xa0>
 8005c14:	4b7b      	ldr	r3, [pc, #492]	; (8005e04 <UART_SetConfig+0x24c>)
 8005c16:	429a      	cmp	r2, r3
 8005c18:	f000 808c 	beq.w	8005d34 <UART_SetConfig+0x17c>
 8005c1c:	4b7a      	ldr	r3, [pc, #488]	; (8005e08 <UART_SetConfig+0x250>)
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	f000 80a2 	beq.w	8005d68 <UART_SetConfig+0x1b0>
 8005c24:	4b79      	ldr	r3, [pc, #484]	; (8005e0c <UART_SetConfig+0x254>)
 8005c26:	429a      	cmp	r2, r3
 8005c28:	f000 80b5 	beq.w	8005d96 <UART_SetConfig+0x1de>
 8005c2c:	4b78      	ldr	r3, [pc, #480]	; (8005e10 <UART_SetConfig+0x258>)
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f000 80c8 	beq.w	8005dc4 <UART_SetConfig+0x20c>
 8005c34:	4b77      	ldr	r3, [pc, #476]	; (8005e14 <UART_SetConfig+0x25c>)
 8005c36:	429a      	cmp	r2, r3
 8005c38:	f000 80f4 	beq.w	8005e24 <UART_SetConfig+0x26c>
 8005c3c:	4b76      	ldr	r3, [pc, #472]	; (8005e18 <UART_SetConfig+0x260>)
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	f000 8119 	beq.w	8005e76 <UART_SetConfig+0x2be>
 8005c44:	4b75      	ldr	r3, [pc, #468]	; (8005e1c <UART_SetConfig+0x264>)
 8005c46:	429a      	cmp	r2, r3
 8005c48:	f000 812c 	beq.w	8005ea4 <UART_SetConfig+0x2ec>
 8005c4c:	4b6a      	ldr	r3, [pc, #424]	; (8005df8 <UART_SetConfig+0x240>)
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	f000 813f 	beq.w	8005ed2 <UART_SetConfig+0x31a>
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	e033      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005c58:	4b71      	ldr	r3, [pc, #452]	; (8005e20 <UART_SetConfig+0x268>)
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c60:	2b28      	cmp	r3, #40	; 0x28
 8005c62:	d865      	bhi.n	8005d30 <UART_SetConfig+0x178>
 8005c64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005c68:	00640029 	.word	0x00640029
 8005c6c:	00640064 	.word	0x00640064
 8005c70:	00640064 	.word	0x00640064
 8005c74:	00640064 	.word	0x00640064
 8005c78:	0064014d 	.word	0x0064014d
 8005c7c:	00640064 	.word	0x00640064
 8005c80:	00640064 	.word	0x00640064
 8005c84:	00640064 	.word	0x00640064
 8005c88:	0064002b 	.word	0x0064002b
 8005c8c:	00640064 	.word	0x00640064
 8005c90:	00640064 	.word	0x00640064
 8005c94:	00640064 	.word	0x00640064
 8005c98:	0064005e 	.word	0x0064005e
 8005c9c:	00640064 	.word	0x00640064
 8005ca0:	00640064 	.word	0x00640064
 8005ca4:	00640064 	.word	0x00640064
 8005ca8:	00640060 	.word	0x00640060
 8005cac:	00640064 	.word	0x00640064
 8005cb0:	00640064 	.word	0x00640064
 8005cb4:	00640064 	.word	0x00640064
 8005cb8:	0062      	.short	0x0062
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005cbe:	2308      	movs	r3, #8

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cc0:	494d      	ldr	r1, [pc, #308]	; (8005df8 <UART_SetConfig+0x240>)
 8005cc2:	428a      	cmp	r2, r1
 8005cc4:	f000 812f 	beq.w	8005f26 <UART_SetConfig+0x36e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc8:	69e0      	ldr	r0, [r4, #28]
 8005cca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005cce:	f000 81af 	beq.w	8006030 <UART_SetConfig+0x478>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	f200 8207 	bhi.w	80060e6 <UART_SetConfig+0x52e>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	f200 8251 	bhi.w	8006180 <UART_SetConfig+0x5c8>
 8005cde:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ce2:	021e      	.short	0x021e
 8005ce4:	024f0224 	.word	0x024f0224
 8005ce8:	0227024f 	.word	0x0227024f
 8005cec:	024f024f 	.word	0x024f024f
 8005cf0:	022c024f 	.word	0x022c024f
 8005cf4:	024f024f 	.word	0x024f024f
 8005cf8:	024f024f 	.word	0x024f024f
 8005cfc:	024f024f 	.word	0x024f024f
 8005d00:	0231024f 	.word	0x0231024f
 8005d04:	024f024f 	.word	0x024f024f
 8005d08:	024f024f 	.word	0x024f024f
 8005d0c:	024f024f 	.word	0x024f024f
 8005d10:	024f024f 	.word	0x024f024f
 8005d14:	024f024f 	.word	0x024f024f
 8005d18:	024f024f 	.word	0x024f024f
 8005d1c:	024f024f 	.word	0x024f024f
 8005d20:	023d024f 	.word	0x023d024f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d24:	2310      	movs	r3, #16
 8005d26:	e7cb      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d28:	2320      	movs	r3, #32
 8005d2a:	e7c9      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d2c:	2340      	movs	r3, #64	; 0x40
 8005d2e:	e7c7      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	e7c5      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d34:	4b3a      	ldr	r3, [pc, #232]	; (8005e20 <UART_SetConfig+0x268>)
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	d811      	bhi.n	8005d64 <UART_SetConfig+0x1ac>
 8005d40:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005d44:	00e10006 	.word	0x00e10006
 8005d48:	000a0008 	.word	0x000a0008
 8005d4c:	000e000c 	.word	0x000e000c
 8005d50:	2300      	movs	r3, #0
 8005d52:	e7b5      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d54:	2308      	movs	r3, #8
 8005d56:	e7b3      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	e7b1      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	e7af      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d60:	2340      	movs	r3, #64	; 0x40
 8005d62:	e7ad      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	e7ab      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d68:	4b2d      	ldr	r3, [pc, #180]	; (8005e20 <UART_SetConfig+0x268>)
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	d80e      	bhi.n	8005d92 <UART_SetConfig+0x1da>
 8005d74:	e8df f003 	tbb	[pc, r3]
 8005d78:	0705c903 	.word	0x0705c903
 8005d7c:	0b09      	.short	0x0b09
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e79e      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d82:	2308      	movs	r3, #8
 8005d84:	e79c      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d86:	2310      	movs	r3, #16
 8005d88:	e79a      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d8a:	2320      	movs	r3, #32
 8005d8c:	e798      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	e796      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	e794      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005d96:	4b22      	ldr	r3, [pc, #136]	; (8005e20 <UART_SetConfig+0x268>)
 8005d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	2b05      	cmp	r3, #5
 8005da0:	d80e      	bhi.n	8005dc0 <UART_SetConfig+0x208>
 8005da2:	e8df f003 	tbb	[pc, r3]
 8005da6:	b403      	.short	0xb403
 8005da8:	0b090705 	.word	0x0b090705
 8005dac:	2300      	movs	r3, #0
 8005dae:	e787      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005db0:	2308      	movs	r3, #8
 8005db2:	e785      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005db4:	2310      	movs	r3, #16
 8005db6:	e783      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005db8:	2320      	movs	r3, #32
 8005dba:	e781      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005dbc:	2340      	movs	r3, #64	; 0x40
 8005dbe:	e77f      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005dc0:	2380      	movs	r3, #128	; 0x80
 8005dc2:	e77d      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005dc4:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <UART_SetConfig+0x268>)
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	2b05      	cmp	r3, #5
 8005dce:	d80e      	bhi.n	8005dee <UART_SetConfig+0x236>
 8005dd0:	e8df f003 	tbb	[pc, r3]
 8005dd4:	07059f03 	.word	0x07059f03
 8005dd8:	0b09      	.short	0x0b09
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e770      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005dde:	2308      	movs	r3, #8
 8005de0:	e76e      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005de2:	2310      	movs	r3, #16
 8005de4:	e76c      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005de6:	2320      	movs	r3, #32
 8005de8:	e76a      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005dea:	2340      	movs	r3, #64	; 0x40
 8005dec:	e768      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	e766      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005df2:	bf00      	nop
 8005df4:	cfff69f3 	.word	0xcfff69f3
 8005df8:	58000c00 	.word	0x58000c00
 8005dfc:	11fff4ff 	.word	0x11fff4ff
 8005e00:	40011000 	.word	0x40011000
 8005e04:	40004400 	.word	0x40004400
 8005e08:	40004800 	.word	0x40004800
 8005e0c:	40004c00 	.word	0x40004c00
 8005e10:	40005000 	.word	0x40005000
 8005e14:	40011400 	.word	0x40011400
 8005e18:	40007800 	.word	0x40007800
 8005e1c:	40007c00 	.word	0x40007c00
 8005e20:	58024400 	.word	0x58024400
 8005e24:	4b7d      	ldr	r3, [pc, #500]	; (800601c <UART_SetConfig+0x464>)
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2c:	2b28      	cmp	r3, #40	; 0x28
 8005e2e:	d820      	bhi.n	8005e72 <UART_SetConfig+0x2ba>
 8005e30:	e8df f003 	tbb	[pc, r3]
 8005e34:	1f1f1f15 	.word	0x1f1f1f15
 8005e38:	1f1f1f1f 	.word	0x1f1f1f1f
 8005e3c:	1f1f1f71 	.word	0x1f1f1f71
 8005e40:	1f1f1f1f 	.word	0x1f1f1f1f
 8005e44:	1f1f1f17 	.word	0x1f1f1f17
 8005e48:	1f1f1f1f 	.word	0x1f1f1f1f
 8005e4c:	1f1f1f19 	.word	0x1f1f1f19
 8005e50:	1f1f1f1f 	.word	0x1f1f1f1f
 8005e54:	1f1f1f1b 	.word	0x1f1f1f1b
 8005e58:	1f1f1f1f 	.word	0x1f1f1f1f
 8005e5c:	1d          	.byte	0x1d
 8005e5d:	00          	.byte	0x00
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e72e      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e62:	2308      	movs	r3, #8
 8005e64:	e72c      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e66:	2310      	movs	r3, #16
 8005e68:	e72a      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	e728      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e6e:	2340      	movs	r3, #64	; 0x40
 8005e70:	e726      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	e724      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e76:	4b69      	ldr	r3, [pc, #420]	; (800601c <UART_SetConfig+0x464>)
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d80e      	bhi.n	8005ea0 <UART_SetConfig+0x2e8>
 8005e82:	e8df f003 	tbb	[pc, r3]
 8005e86:	4a03      	.short	0x4a03
 8005e88:	0b090705 	.word	0x0b090705
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e717      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e90:	2308      	movs	r3, #8
 8005e92:	e715      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e94:	2310      	movs	r3, #16
 8005e96:	e713      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e98:	2320      	movs	r3, #32
 8005e9a:	e711      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005e9c:	2340      	movs	r3, #64	; 0x40
 8005e9e:	e70f      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	e70d      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ea4:	4b5d      	ldr	r3, [pc, #372]	; (800601c <UART_SetConfig+0x464>)
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	2b05      	cmp	r3, #5
 8005eae:	d80e      	bhi.n	8005ece <UART_SetConfig+0x316>
 8005eb0:	e8df f003 	tbb	[pc, r3]
 8005eb4:	07053503 	.word	0x07053503
 8005eb8:	0b09      	.short	0x0b09
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e700      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	e6fe      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ec2:	2310      	movs	r3, #16
 8005ec4:	e6fc      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	e6fa      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005eca:	2340      	movs	r3, #64	; 0x40
 8005ecc:	e6f8      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ece:	2380      	movs	r3, #128	; 0x80
 8005ed0:	e6f6      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ed2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	d80e      	bhi.n	8005efe <UART_SetConfig+0x346>
 8005ee0:	e8df f003 	tbb	[pc, r3]
 8005ee4:	07051f03 	.word	0x07051f03
 8005ee8:	0b09      	.short	0x0b09
 8005eea:	2302      	movs	r3, #2
 8005eec:	e6e8      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005eee:	2308      	movs	r3, #8
 8005ef0:	e6e6      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	e6e4      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005ef6:	2320      	movs	r3, #32
 8005ef8:	e6e2      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005efa:	2340      	movs	r3, #64	; 0x40
 8005efc:	e6e0      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	e6de      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f02:	2304      	movs	r3, #4
 8005f04:	e6dc      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f06:	2304      	movs	r3, #4
 8005f08:	e6da      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f0a:	2304      	movs	r3, #4
 8005f0c:	e6d8      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f0e:	2304      	movs	r3, #4
 8005f10:	e6d6      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f12:	2304      	movs	r3, #4
 8005f14:	e6d4      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f16:	2304      	movs	r3, #4
 8005f18:	e6d2      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f1a:	2304      	movs	r3, #4
 8005f1c:	e6d0      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	e6ce      	b.n	8005cc0 <UART_SetConfig+0x108>
 8005f22:	2304      	movs	r3, #4
 8005f24:	e6cc      	b.n	8005cc0 <UART_SetConfig+0x108>
    switch (clocksource)
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d827      	bhi.n	8005f7a <UART_SetConfig+0x3c2>
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	f0c0 811a 	bcc.w	8006164 <UART_SetConfig+0x5ac>
 8005f30:	3b02      	subs	r3, #2
 8005f32:	2b1e      	cmp	r3, #30
 8005f34:	f200 8118 	bhi.w	8006168 <UART_SetConfig+0x5b0>
 8005f38:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005f3c:	01160050 	.word	0x01160050
 8005f40:	01160056 	.word	0x01160056
 8005f44:	01160116 	.word	0x01160116
 8005f48:	0116005b 	.word	0x0116005b
 8005f4c:	01160116 	.word	0x01160116
 8005f50:	01160116 	.word	0x01160116
 8005f54:	01160116 	.word	0x01160116
 8005f58:	01160060 	.word	0x01160060
 8005f5c:	01160116 	.word	0x01160116
 8005f60:	01160116 	.word	0x01160116
 8005f64:	01160116 	.word	0x01160116
 8005f68:	01160116 	.word	0x01160116
 8005f6c:	01160116 	.word	0x01160116
 8005f70:	01160116 	.word	0x01160116
 8005f74:	01160116 	.word	0x01160116
 8005f78:	006c      	.short	0x006c
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d12c      	bne.n	8005fd8 <UART_SetConfig+0x420>
        pclk = (uint32_t) LSE_VALUE;
 8005f7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f84:	4b26      	ldr	r3, [pc, #152]	; (8006020 <UART_SetConfig+0x468>)
 8005f86:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005f8a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f8e:	6865      	ldr	r5, [r4, #4]
 8005f90:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005f94:	4299      	cmp	r1, r3
 8005f96:	f200 80e9 	bhi.w	800616c <UART_SetConfig+0x5b4>
 8005f9a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005f9e:	f200 80e7 	bhi.w	8006170 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	4633      	mov	r3, r6
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	f7fa f9e4 	bl	8000374 <__aeabi_uldivmod>
 8005fac:	0209      	lsls	r1, r1, #8
 8005fae:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005fb2:	0200      	lsls	r0, r0, #8
 8005fb4:	086b      	lsrs	r3, r5, #1
 8005fb6:	18c0      	adds	r0, r0, r3
 8005fb8:	462a      	mov	r2, r5
 8005fba:	4633      	mov	r3, r6
 8005fbc:	f141 0100 	adc.w	r1, r1, #0
 8005fc0:	f7fa f9d8 	bl	8000374 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fc4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005fc8:	4b16      	ldr	r3, [pc, #88]	; (8006024 <UART_SetConfig+0x46c>)
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	f200 80d2 	bhi.w	8006174 <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	60d8      	str	r0, [r3, #12]
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	e0d4      	b.n	8006182 <UART_SetConfig+0x5ca>
    switch (clocksource)
 8005fd8:	2001      	movs	r0, #1
 8005fda:	e0d2      	b.n	8006182 <UART_SetConfig+0x5ca>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005fdc:	f7ff fa14 	bl	8005408 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d1ce      	bne.n	8005f82 <UART_SetConfig+0x3ca>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e0cc      	b.n	8006182 <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe8:	a803      	add	r0, sp, #12
 8005fea:	f7ff fa1f 	bl	800542c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fee:	9804      	ldr	r0, [sp, #16]
        break;
 8005ff0:	e7f6      	b.n	8005fe0 <UART_SetConfig+0x428>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ff2:	4668      	mov	r0, sp
 8005ff4:	f7ff fb16 	bl	8005624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ff8:	9801      	ldr	r0, [sp, #4]
        break;
 8005ffa:	e7f1      	b.n	8005fe0 <UART_SetConfig+0x428>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ffc:	4b07      	ldr	r3, [pc, #28]	; (800601c <UART_SetConfig+0x464>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f013 0f20 	tst.w	r3, #32
 8006004:	d008      	beq.n	8006018 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <UART_SetConfig+0x464>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800600e:	4806      	ldr	r0, [pc, #24]	; (8006028 <UART_SetConfig+0x470>)
 8006010:	40d8      	lsrs	r0, r3
 8006012:	e7e5      	b.n	8005fe0 <UART_SetConfig+0x428>
    switch (clocksource)
 8006014:	4805      	ldr	r0, [pc, #20]	; (800602c <UART_SetConfig+0x474>)
 8006016:	e7b4      	b.n	8005f82 <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 8006018:	4803      	ldr	r0, [pc, #12]	; (8006028 <UART_SetConfig+0x470>)
 800601a:	e7b2      	b.n	8005f82 <UART_SetConfig+0x3ca>
 800601c:	58024400 	.word	0x58024400
 8006020:	08006b40 	.word	0x08006b40
 8006024:	000ffcff 	.word	0x000ffcff
 8006028:	03d09000 	.word	0x03d09000
 800602c:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8006030:	2b20      	cmp	r3, #32
 8006032:	d815      	bhi.n	8006060 <UART_SetConfig+0x4a8>
 8006034:	2b20      	cmp	r3, #32
 8006036:	f200 809f 	bhi.w	8006178 <UART_SetConfig+0x5c0>
 800603a:	e8df f003 	tbb	[pc, r3]
 800603e:	3731      	.short	0x3731
 8006040:	9d3a9d9d 	.word	0x9d3a9d9d
 8006044:	9d3f9d9d 	.word	0x9d3f9d9d
 8006048:	9d9d9d9d 	.word	0x9d9d9d9d
 800604c:	9d449d9d 	.word	0x9d449d9d
 8006050:	9d9d9d9d 	.word	0x9d9d9d9d
 8006054:	9d9d9d9d 	.word	0x9d9d9d9d
 8006058:	9d9d9d9d 	.word	0x9d9d9d9d
 800605c:	9d9d      	.short	0x9d9d
 800605e:	50          	.byte	0x50
 800605f:	00          	.byte	0x00
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d11b      	bne.n	800609c <UART_SetConfig+0x4e4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006064:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006066:	4b4d      	ldr	r3, [pc, #308]	; (800619c <UART_SetConfig+0x5e4>)
 8006068:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800606c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006070:	6862      	ldr	r2, [r4, #4]
 8006072:	0853      	lsrs	r3, r2, #1
 8006074:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006078:	fbb0 f0f2 	udiv	r0, r0, r2
 800607c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607e:	f1a0 0210 	sub.w	r2, r0, #16
 8006082:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006086:	429a      	cmp	r2, r3
 8006088:	d878      	bhi.n	800617c <UART_SetConfig+0x5c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800608a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800608e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006092:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	60d8      	str	r0, [r3, #12]
 8006098:	2000      	movs	r0, #0
 800609a:	e072      	b.n	8006182 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800609c:	2001      	movs	r0, #1
 800609e:	e070      	b.n	8006182 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fe fb76 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d1dd      	bne.n	8006064 <UART_SetConfig+0x4ac>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e06a      	b.n	8006182 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ac:	f7fe fb82 	bl	80047b4 <HAL_RCC_GetPCLK2Freq>
        break;
 80060b0:	e7f8      	b.n	80060a4 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060b2:	a803      	add	r0, sp, #12
 80060b4:	f7ff f9ba 	bl	800542c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060b8:	9804      	ldr	r0, [sp, #16]
        break;
 80060ba:	e7f3      	b.n	80060a4 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060bc:	4668      	mov	r0, sp
 80060be:	f7ff fab1 	bl	8005624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060c2:	9801      	ldr	r0, [sp, #4]
        break;
 80060c4:	e7ee      	b.n	80060a4 <UART_SetConfig+0x4ec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060c6:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <UART_SetConfig+0x5e8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f013 0f20 	tst.w	r3, #32
 80060ce:	d008      	beq.n	80060e2 <UART_SetConfig+0x52a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060d0:	4b33      	ldr	r3, [pc, #204]	; (80061a0 <UART_SetConfig+0x5e8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80060d8:	4832      	ldr	r0, [pc, #200]	; (80061a4 <UART_SetConfig+0x5ec>)
 80060da:	40d8      	lsrs	r0, r3
 80060dc:	e7e2      	b.n	80060a4 <UART_SetConfig+0x4ec>
    switch (clocksource)
 80060de:	4832      	ldr	r0, [pc, #200]	; (80061a8 <UART_SetConfig+0x5f0>)
 80060e0:	e7c0      	b.n	8006064 <UART_SetConfig+0x4ac>
          pclk = (uint32_t) HSI_VALUE;
 80060e2:	4830      	ldr	r0, [pc, #192]	; (80061a4 <UART_SetConfig+0x5ec>)
 80060e4:	e7be      	b.n	8006064 <UART_SetConfig+0x4ac>
    switch (clocksource)
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d117      	bne.n	800611a <UART_SetConfig+0x562>
        break;
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80060f0:	4b2a      	ldr	r3, [pc, #168]	; (800619c <UART_SetConfig+0x5e4>)
 80060f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80060f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006100:	fbb0 f0f3 	udiv	r0, r0, r3
 8006104:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006106:	f1a0 0210 	sub.w	r2, r0, #16
 800610a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800610e:	429a      	cmp	r2, r3
 8006110:	d841      	bhi.n	8006196 <UART_SetConfig+0x5de>
      {
        huart->Instance->BRR = usartdiv;
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	60d8      	str	r0, [r3, #12]
 8006116:	2000      	movs	r0, #0
 8006118:	e033      	b.n	8006182 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800611a:	2001      	movs	r0, #1
 800611c:	e031      	b.n	8006182 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800611e:	f7fe fb37 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006122:	2800      	cmp	r0, #0
 8006124:	d1e3      	bne.n	80060ee <UART_SetConfig+0x536>
 8006126:	2000      	movs	r0, #0
 8006128:	e02b      	b.n	8006182 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800612a:	f7fe fb43 	bl	80047b4 <HAL_RCC_GetPCLK2Freq>
        break;
 800612e:	e7f8      	b.n	8006122 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006130:	a803      	add	r0, sp, #12
 8006132:	f7ff f97b 	bl	800542c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006136:	9804      	ldr	r0, [sp, #16]
        break;
 8006138:	e7f3      	b.n	8006122 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800613a:	4668      	mov	r0, sp
 800613c:	f7ff fa72 	bl	8005624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006140:	9801      	ldr	r0, [sp, #4]
        break;
 8006142:	e7ee      	b.n	8006122 <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006144:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <UART_SetConfig+0x5e8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f013 0f20 	tst.w	r3, #32
 800614c:	d008      	beq.n	8006160 <UART_SetConfig+0x5a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <UART_SetConfig+0x5e8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006156:	4813      	ldr	r0, [pc, #76]	; (80061a4 <UART_SetConfig+0x5ec>)
 8006158:	40d8      	lsrs	r0, r3
 800615a:	e7e2      	b.n	8006122 <UART_SetConfig+0x56a>
    switch (clocksource)
 800615c:	4812      	ldr	r0, [pc, #72]	; (80061a8 <UART_SetConfig+0x5f0>)
 800615e:	e7c6      	b.n	80060ee <UART_SetConfig+0x536>
          pclk = (uint32_t) HSI_VALUE;
 8006160:	4810      	ldr	r0, [pc, #64]	; (80061a4 <UART_SetConfig+0x5ec>)
 8006162:	e7c4      	b.n	80060ee <UART_SetConfig+0x536>
    switch (clocksource)
 8006164:	2001      	movs	r0, #1
 8006166:	e00c      	b.n	8006182 <UART_SetConfig+0x5ca>
 8006168:	2001      	movs	r0, #1
 800616a:	e00a      	b.n	8006182 <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800616c:	2001      	movs	r0, #1
 800616e:	e008      	b.n	8006182 <UART_SetConfig+0x5ca>
 8006170:	2001      	movs	r0, #1
 8006172:	e006      	b.n	8006182 <UART_SetConfig+0x5ca>
          ret = HAL_ERROR;
 8006174:	2001      	movs	r0, #1
 8006176:	e004      	b.n	8006182 <UART_SetConfig+0x5ca>
    switch (clocksource)
 8006178:	2001      	movs	r0, #1
 800617a:	e002      	b.n	8006182 <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800617c:	2001      	movs	r0, #1
 800617e:	e000      	b.n	8006182 <UART_SetConfig+0x5ca>
    switch (clocksource)
 8006180:	2001      	movs	r0, #1
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006182:	2301      	movs	r3, #1
 8006184:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006188:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800618c:	2300      	movs	r3, #0
 800618e:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006190:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8006192:	b006      	add	sp, #24
 8006194:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8006196:	2001      	movs	r0, #1
 8006198:	e7f3      	b.n	8006182 <UART_SetConfig+0x5ca>
 800619a:	bf00      	nop
 800619c:	08006b40 	.word	0x08006b40
 80061a0:	58024400 	.word	0x58024400
 80061a4:	03d09000 	.word	0x03d09000
 80061a8:	003d0900 	.word	0x003d0900

080061ac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061ae:	f013 0f01 	tst.w	r3, #1
 80061b2:	d006      	beq.n	80061c2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b4:	6802      	ldr	r2, [r0, #0]
 80061b6:	6853      	ldr	r3, [r2, #4]
 80061b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061bc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80061be:	430b      	orrs	r3, r1
 80061c0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061c4:	f013 0f02 	tst.w	r3, #2
 80061c8:	d006      	beq.n	80061d8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ca:	6802      	ldr	r2, [r0, #0]
 80061cc:	6853      	ldr	r3, [r2, #4]
 80061ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061da:	f013 0f04 	tst.w	r3, #4
 80061de:	d006      	beq.n	80061ee <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061e0:	6802      	ldr	r2, [r0, #0]
 80061e2:	6853      	ldr	r3, [r2, #4]
 80061e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061e8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80061ea:	430b      	orrs	r3, r1
 80061ec:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061f0:	f013 0f08 	tst.w	r3, #8
 80061f4:	d006      	beq.n	8006204 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f6:	6802      	ldr	r2, [r0, #0]
 80061f8:	6853      	ldr	r3, [r2, #4]
 80061fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061fe:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006200:	430b      	orrs	r3, r1
 8006202:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006204:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006206:	f013 0f10 	tst.w	r3, #16
 800620a:	d006      	beq.n	800621a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800620c:	6802      	ldr	r2, [r0, #0]
 800620e:	6893      	ldr	r3, [r2, #8]
 8006210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006214:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006216:	430b      	orrs	r3, r1
 8006218:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800621a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800621c:	f013 0f20 	tst.w	r3, #32
 8006220:	d006      	beq.n	8006230 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006222:	6802      	ldr	r2, [r0, #0]
 8006224:	6893      	ldr	r3, [r2, #8]
 8006226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800622a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800622c:	430b      	orrs	r3, r1
 800622e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006230:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006232:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006238:	6802      	ldr	r2, [r0, #0]
 800623a:	6853      	ldr	r3, [r2, #4]
 800623c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006240:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006242:	430b      	orrs	r3, r1
 8006244:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006246:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624c:	d00b      	beq.n	8006266 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006250:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006254:	d006      	beq.n	8006264 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006256:	6802      	ldr	r2, [r0, #0]
 8006258:	6853      	ldr	r3, [r2, #4]
 800625a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800625e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006260:	430b      	orrs	r3, r1
 8006262:	6053      	str	r3, [r2, #4]
  }
}
 8006264:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006266:	6802      	ldr	r2, [r0, #0]
 8006268:	6853      	ldr	r3, [r2, #4]
 800626a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800626e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006270:	430b      	orrs	r3, r1
 8006272:	6053      	str	r3, [r2, #4]
 8006274:	e7eb      	b.n	800624e <UART_AdvFeatureConfig+0xa2>

08006276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006276:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800627a:	4605      	mov	r5, r0
 800627c:	460f      	mov	r7, r1
 800627e:	4616      	mov	r6, r2
 8006280:	4699      	mov	r9, r3
 8006282:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	682c      	ldr	r4, [r5, #0]
 8006288:	69e4      	ldr	r4, [r4, #28]
 800628a:	ea37 0304 	bics.w	r3, r7, r4
 800628e:	bf0c      	ite	eq
 8006290:	f04f 0c01 	moveq.w	ip, #1
 8006294:	f04f 0c00 	movne.w	ip, #0
 8006298:	45b4      	cmp	ip, r6
 800629a:	d141      	bne.n	8006320 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629c:	f1b8 3fff 	cmp.w	r8, #4294967295
 80062a0:	d0f1      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a2:	f7fc ff07 	bl	80030b4 <HAL_GetTick>
 80062a6:	eba0 0009 	sub.w	r0, r0, r9
 80062aa:	4540      	cmp	r0, r8
 80062ac:	d824      	bhi.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x82>
 80062ae:	f1b8 0f00 	cmp.w	r8, #0
 80062b2:	d021      	beq.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x82>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	f012 0f04 	tst.w	r2, #4
 80062bc:	d0e3      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80062c4:	d0df      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062cc:	682a      	ldr	r2, [r5, #0]
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062d4:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	682a      	ldr	r2, [r5, #0]
 80062d8:	6893      	ldr	r3, [r2, #8]
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80062e0:	2320      	movs	r3, #32
 80062e2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80062e6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062ea:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ee:	2300      	movs	r3, #0
 80062f0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80

          return HAL_TIMEOUT;
 80062f4:	2003      	movs	r0, #3
 80062f6:	e014      	b.n	8006322 <UART_WaitOnFlagUntilTimeout+0xac>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062f8:	682a      	ldr	r2, [r5, #0]
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006300:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006302:	682a      	ldr	r2, [r5, #0]
 8006304:	6893      	ldr	r3, [r2, #8]
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800630c:	2320      	movs	r3, #32
 800630e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006312:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006316:	2300      	movs	r3, #0
 8006318:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800631c:	2003      	movs	r0, #3
 800631e:	e000      	b.n	8006322 <UART_WaitOnFlagUntilTimeout+0xac>
        }
      }
    }
  }
  return HAL_OK;
 8006320:	2000      	movs	r0, #0
}
 8006322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006326 <HAL_UART_Transmit>:
{
 8006326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800632e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006332:	2b20      	cmp	r3, #32
 8006334:	d158      	bne.n	80063e8 <HAL_UART_Transmit+0xc2>
 8006336:	4604      	mov	r4, r0
 8006338:	460d      	mov	r5, r1
 800633a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800633c:	2a00      	cmp	r2, #0
 800633e:	bf18      	it	ne
 8006340:	2900      	cmpne	r1, #0
 8006342:	d055      	beq.n	80063f0 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8006344:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006348:	2b01      	cmp	r3, #1
 800634a:	d053      	beq.n	80063f4 <HAL_UART_Transmit+0xce>
 800634c:	2301      	movs	r3, #1
 800634e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006352:	2300      	movs	r3, #0
 8006354:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006358:	2321      	movs	r3, #33	; 0x21
 800635a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 800635e:	f7fc fea9 	bl	80030b4 <HAL_GetTick>
 8006362:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006364:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8006368:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636c:	68a3      	ldr	r3, [r4, #8]
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006372:	d005      	beq.n	8006380 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8006374:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8006378:	2300      	movs	r3, #0
 800637a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 800637e:	e012      	b.n	80063a6 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006380:	6923      	ldr	r3, [r4, #16]
 8006382:	b113      	cbz	r3, 800638a <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8006384:	f04f 0800 	mov.w	r8, #0
 8006388:	e7f6      	b.n	8006378 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 800638a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800638c:	2500      	movs	r5, #0
 800638e:	e7f3      	b.n	8006378 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006390:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8006398:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800639c:	b292      	uxth	r2, r2
 800639e:	3a01      	subs	r2, #1
 80063a0:	b292      	uxth	r2, r2
 80063a2:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80063a6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	b183      	cbz	r3, 80063d0 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ae:	9600      	str	r6, [sp, #0]
 80063b0:	463b      	mov	r3, r7
 80063b2:	2200      	movs	r2, #0
 80063b4:	2180      	movs	r1, #128	; 0x80
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7ff ff5d 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 80063bc:	b9e0      	cbnz	r0, 80063f8 <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 80063be:	2d00      	cmp	r5, #0
 80063c0:	d1e6      	bne.n	8006390 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063c2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063cc:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80063ce:	e7e3      	b.n	8006398 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063d0:	9600      	str	r6, [sp, #0]
 80063d2:	463b      	mov	r3, r7
 80063d4:	2200      	movs	r2, #0
 80063d6:	2140      	movs	r1, #64	; 0x40
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff ff4c 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 80063de:	b968      	cbnz	r0, 80063fc <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 80063e0:	2320      	movs	r3, #32
 80063e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80063e6:	e000      	b.n	80063ea <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 80063e8:	2002      	movs	r0, #2
}
 80063ea:	b002      	add	sp, #8
 80063ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80063f0:	2001      	movs	r0, #1
 80063f2:	e7fa      	b.n	80063ea <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80063f4:	2002      	movs	r0, #2
 80063f6:	e7f8      	b.n	80063ea <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80063f8:	2003      	movs	r0, #3
 80063fa:	e7f6      	b.n	80063ea <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80063fc:	2003      	movs	r0, #3
 80063fe:	e7f4      	b.n	80063ea <HAL_UART_Transmit+0xc4>

08006400 <UART_CheckIdleState>:
{
 8006400:	b530      	push	{r4, r5, lr}
 8006402:	b083      	sub	sp, #12
 8006404:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006406:	2300      	movs	r3, #0
 8006408:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800640c:	f7fc fe52 	bl	80030b4 <HAL_GetTick>
 8006410:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	6812      	ldr	r2, [r2, #0]
 8006416:	f012 0f08 	tst.w	r2, #8
 800641a:	d10f      	bne.n	800643c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f013 0f04 	tst.w	r3, #4
 8006424:	d118      	bne.n	8006458 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006426:	2320      	movs	r3, #32
 8006428:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	2000      	movs	r0, #0
 8006432:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006434:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006438:	b003      	add	sp, #12
 800643a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800643c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	4603      	mov	r3, r0
 8006444:	2200      	movs	r2, #0
 8006446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff ff13 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8006450:	2800      	cmp	r0, #0
 8006452:	d0e3      	beq.n	800641c <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006454:	2003      	movs	r0, #3
 8006456:	e7ef      	b.n	8006438 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	462b      	mov	r3, r5
 8006460:	2200      	movs	r2, #0
 8006462:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff ff05 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 800646c:	2800      	cmp	r0, #0
 800646e:	d0da      	beq.n	8006426 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006470:	2003      	movs	r0, #3
 8006472:	e7e1      	b.n	8006438 <UART_CheckIdleState+0x38>

08006474 <HAL_UART_Init>:
  if (huart == NULL)
 8006474:	b378      	cbz	r0, 80064d6 <HAL_UART_Init+0x62>
{
 8006476:	b510      	push	{r4, lr}
 8006478:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800647a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800647e:	b30b      	cbz	r3, 80064c4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006480:	2324      	movs	r3, #36	; 0x24
 8006482:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006490:	4620      	mov	r0, r4
 8006492:	f7ff fb91 	bl	8005bb8 <UART_SetConfig>
 8006496:	2801      	cmp	r0, #1
 8006498:	d013      	beq.n	80064c2 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800649a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800649c:	b9bb      	cbnz	r3, 80064ce <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649e:	6822      	ldr	r2, [r4, #0]
 80064a0:	6853      	ldr	r3, [r2, #4]
 80064a2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80064a6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	6893      	ldr	r3, [r2, #8]
 80064ac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80064b0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80064b2:	6822      	ldr	r2, [r4, #0]
 80064b4:	6813      	ldr	r3, [r2, #0]
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80064bc:	4620      	mov	r0, r4
 80064be:	f7ff ff9f 	bl	8006400 <UART_CheckIdleState>
}
 80064c2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80064c4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80064c8:	f7fc fc28 	bl	8002d1c <HAL_UART_MspInit>
 80064cc:	e7d8      	b.n	8006480 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff fe6c 	bl	80061ac <UART_AdvFeatureConfig>
 80064d4:	e7e3      	b.n	800649e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80064d6:	2001      	movs	r0, #1
}
 80064d8:	4770      	bx	lr
	...

080064dc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80064de:	b92b      	cbnz	r3, 80064ec <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064e6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80064ea:	4770      	bx	lr
{
 80064ec:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064ee:	6803      	ldr	r3, [r0, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064f6:	6899      	ldr	r1, [r3, #8]
 80064f8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064fa:	4d09      	ldr	r5, [pc, #36]	; (8006520 <UARTEx_SetNbDataToProcess+0x44>)
 80064fc:	5c6b      	ldrb	r3, [r5, r1]
 80064fe:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 8006500:	4c08      	ldr	r4, [pc, #32]	; (8006524 <UARTEx_SetNbDataToProcess+0x48>)
 8006502:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006504:	fb93 f3f1 	sdiv	r3, r3, r1
 8006508:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800650c:	5cab      	ldrb	r3, [r5, r2]
 800650e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8006510:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006512:	fb93 f3f2 	sdiv	r3, r3, r2
 8006516:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800651a:	bc30      	pop	{r4, r5}
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	08006b60 	.word	0x08006b60
 8006524:	08006b58 	.word	0x08006b58

08006528 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006528:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800652c:	2b01      	cmp	r3, #1
 800652e:	d018      	beq.n	8006562 <HAL_UARTEx_DisableFifoMode+0x3a>
 8006530:	2301      	movs	r3, #1
 8006532:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006536:	2324      	movs	r3, #36	; 0x24
 8006538:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800653c:	6803      	ldr	r3, [r0, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006540:	6819      	ldr	r1, [r3, #0]
 8006542:	f021 0101 	bic.w	r1, r1, #1
 8006546:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006548:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800654c:	2300      	movs	r3, #0
 800654e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006550:	6801      	ldr	r1, [r0, #0]
 8006552:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006554:	2220      	movs	r2, #32
 8006556:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800655a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800655e:	4618      	mov	r0, r3
 8006560:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006562:	2002      	movs	r0, #2
}
 8006564:	4770      	bx	lr

08006566 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006566:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006568:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800656c:	2b01      	cmp	r3, #1
 800656e:	d01d      	beq.n	80065ac <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006570:	4604      	mov	r4, r0
 8006572:	2301      	movs	r3, #1
 8006574:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006578:	2324      	movs	r3, #36	; 0x24
 800657a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800657e:	6803      	ldr	r3, [r0, #0]
 8006580:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800658a:	6802      	ldr	r2, [r0, #0]
 800658c:	6893      	ldr	r3, [r2, #8]
 800658e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006592:	4319      	orrs	r1, r3
 8006594:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006596:	f7ff ffa1 	bl	80064dc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800659e:	2320      	movs	r3, #32
 80065a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80065a4:	2000      	movs	r0, #0
 80065a6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80065ac:	2002      	movs	r0, #2
 80065ae:	e7fc      	b.n	80065aa <HAL_UARTEx_SetTxFifoThreshold+0x44>

080065b0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80065b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80065b2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d01d      	beq.n	80065f6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80065ba:	4604      	mov	r4, r0
 80065bc:	2301      	movs	r3, #1
 80065be:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80065c2:	2324      	movs	r3, #36	; 0x24
 80065c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065c8:	6803      	ldr	r3, [r0, #0]
 80065ca:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065d4:	6802      	ldr	r2, [r0, #0]
 80065d6:	6893      	ldr	r3, [r2, #8]
 80065d8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80065dc:	4319      	orrs	r1, r3
 80065de:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80065e0:	f7ff ff7c 	bl	80064dc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80065e8:	2320      	movs	r3, #32
 80065ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80065ee:	2000      	movs	r0, #0
 80065f0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80065f6:	2002      	movs	r0, #2
 80065f8:	e7fc      	b.n	80065f4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080065fc <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80065fc:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065fe:	3301      	adds	r3, #1
 8006600:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <USB_CoreReset+0x38>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d811      	bhi.n	800662a <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006606:	6902      	ldr	r2, [r0, #16]
 8006608:	2a00      	cmp	r2, #0
 800660a:	daf8      	bge.n	80065fe <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800660c:	6903      	ldr	r3, [r0, #16]
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	6103      	str	r3, [r0, #16]
  count = 0U;
 8006614:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8006616:	3301      	adds	r3, #1
 8006618:	4a06      	ldr	r2, [pc, #24]	; (8006634 <USB_CoreReset+0x38>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d807      	bhi.n	800662e <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800661e:	6902      	ldr	r2, [r0, #16]
 8006620:	f012 0f01 	tst.w	r2, #1
 8006624:	d1f7      	bne.n	8006616 <USB_CoreReset+0x1a>

  return HAL_OK;
 8006626:	2000      	movs	r0, #0
 8006628:	4770      	bx	lr
      return HAL_TIMEOUT;
 800662a:	2003      	movs	r0, #3
 800662c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800662e:	2003      	movs	r0, #3
}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	00030d40 	.word	0x00030d40

08006638 <USB_CoreInit>:
{
 8006638:	b084      	sub	sp, #16
 800663a:	b510      	push	{r4, lr}
 800663c:	4604      	mov	r4, r0
 800663e:	a803      	add	r0, sp, #12
 8006640:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006644:	9b08      	ldr	r3, [sp, #32]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d11d      	bne.n	8006686 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800664a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800664c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006650:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006652:	68e2      	ldr	r2, [r4, #12]
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <USB_CoreInit+0x94>)
 8006656:	4013      	ands	r3, r2
 8006658:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006660:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8006662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d009      	beq.n	800667c <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8006668:	4620      	mov	r0, r4
 800666a:	f7ff ffc7 	bl	80065fc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800666e:	9b06      	ldr	r3, [sp, #24]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d01b      	beq.n	80066ac <USB_CoreInit+0x74>
}
 8006674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006678:	b004      	add	sp, #16
 800667a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800667c:	68e3      	ldr	r3, [r4, #12]
 800667e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006682:	60e3      	str	r3, [r4, #12]
 8006684:	e7f0      	b.n	8006668 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006686:	68e3      	ldr	r3, [r4, #12]
 8006688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800668c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800668e:	4620      	mov	r0, r4
 8006690:	f7ff ffb4 	bl	80065fc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006696:	b923      	cbnz	r3, 80066a2 <USB_CoreInit+0x6a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006698:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800669a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669e:	63a3      	str	r3, [r4, #56]	; 0x38
 80066a0:	e7e5      	b.n	800666e <USB_CoreInit+0x36>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80066aa:	e7e0      	b.n	800666e <USB_CoreInit+0x36>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80066ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80066b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <USB_CoreInit+0x98>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066ba:	68a3      	ldr	r3, [r4, #8]
 80066bc:	f043 0306 	orr.w	r3, r3, #6
 80066c0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066c2:	68a3      	ldr	r3, [r4, #8]
 80066c4:	f043 0320 	orr.w	r3, r3, #32
 80066c8:	60a3      	str	r3, [r4, #8]
 80066ca:	e7d3      	b.n	8006674 <USB_CoreInit+0x3c>
 80066cc:	ffbdffbf 	.word	0xffbdffbf
 80066d0:	03ee0000 	.word	0x03ee0000

080066d4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066d4:	6883      	ldr	r3, [r0, #8]
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	6083      	str	r3, [r0, #8]
}
 80066dc:	2000      	movs	r0, #0
 80066de:	4770      	bx	lr

080066e0 <USB_SetCurrentMode>:
{
 80066e0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066e2:	68c3      	ldr	r3, [r0, #12]
 80066e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80066e8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80066ea:	2901      	cmp	r1, #1
 80066ec:	d009      	beq.n	8006702 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 80066ee:	b969      	cbnz	r1, 800670c <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066f0:	68c3      	ldr	r3, [r0, #12]
 80066f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80066f8:	2032      	movs	r0, #50	; 0x32
 80066fa:	f7fc fce1 	bl	80030c0 <HAL_Delay>
  return HAL_OK;
 80066fe:	2000      	movs	r0, #0
}
 8006700:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006702:	68c3      	ldr	r3, [r0, #12]
 8006704:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006708:	60c3      	str	r3, [r0, #12]
 800670a:	e7f5      	b.n	80066f8 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 800670c:	2001      	movs	r0, #1
 800670e:	e7f7      	b.n	8006700 <USB_SetCurrentMode+0x20>

08006710 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006710:	0189      	lsls	r1, r1, #6
 8006712:	f041 0120 	orr.w	r1, r1, #32
 8006716:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8006718:	2300      	movs	r3, #0
    if (++count > 200000U)
 800671a:	3301      	adds	r3, #1
 800671c:	4a05      	ldr	r2, [pc, #20]	; (8006734 <USB_FlushTxFifo+0x24>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d805      	bhi.n	800672e <USB_FlushTxFifo+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006722:	6902      	ldr	r2, [r0, #16]
 8006724:	f012 0f20 	tst.w	r2, #32
 8006728:	d1f7      	bne.n	800671a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800672a:	2000      	movs	r0, #0
 800672c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800672e:	2003      	movs	r0, #3
}
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	00030d40 	.word	0x00030d40

08006738 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006738:	2310      	movs	r3, #16
 800673a:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 800673c:	2300      	movs	r3, #0
    if (++count > 200000U)
 800673e:	3301      	adds	r3, #1
 8006740:	4a05      	ldr	r2, [pc, #20]	; (8006758 <USB_FlushRxFifo+0x20>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d805      	bhi.n	8006752 <USB_FlushRxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006746:	6902      	ldr	r2, [r0, #16]
 8006748:	f012 0f10 	tst.w	r2, #16
 800674c:	d1f7      	bne.n	800673e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800674e:	2000      	movs	r0, #0
 8006750:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006752:	2003      	movs	r0, #3
}
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	00030d40 	.word	0x00030d40

0800675c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800675c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8006762:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006766:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006768:	9b01      	ldr	r3, [sp, #4]
 800676a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800676e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006770:	9b01      	ldr	r3, [sp, #4]
 8006772:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006776:	d101      	bne.n	800677c <USB_DriveVbus+0x20>
 8006778:	2901      	cmp	r1, #1
 800677a:	d00c      	beq.n	8006796 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800677c:	9b01      	ldr	r3, [sp, #4]
 800677e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006782:	d005      	beq.n	8006790 <USB_DriveVbus+0x34>
 8006784:	b921      	cbnz	r1, 8006790 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800678c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8006790:	2000      	movs	r0, #0
 8006792:	b002      	add	sp, #8
 8006794:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800679c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 80067a0:	e7ec      	b.n	800677c <USB_DriveVbus+0x20>
	...

080067a4 <USB_HostInit>:
{
 80067a4:	b084      	sub	sp, #16
 80067a6:	b510      	push	{r4, lr}
 80067a8:	4604      	mov	r4, r0
 80067aa:	a803      	add	r0, sp, #12
 80067ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80067b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067bc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80067be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067c4:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80067c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80067cc:	d010      	beq.n	80067f0 <USB_HostInit+0x4c>
    if (cfg.speed == USBH_FSLS_SPEED)
 80067ce:	9b05      	ldr	r3, [sp, #20]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d006      	beq.n	80067e2 <USB_HostInit+0x3e>
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80067d4:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80067e0:	e00c      	b.n	80067fc <USB_HostInit+0x58>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80067e2:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80067e6:	f043 0304 	orr.w	r3, r3, #4
 80067ea:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80067ee:	e005      	b.n	80067fc <USB_HostInit+0x58>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80067f0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80067fc:	2110      	movs	r1, #16
 80067fe:	4620      	mov	r0, r4
 8006800:	f7ff ff86 	bl	8006710 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006804:	4620      	mov	r0, r4
 8006806:	f7ff ff97 	bl	8006738 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 800680a:	2200      	movs	r2, #0
 800680c:	e009      	b.n	8006822 <USB_HostInit+0x7e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800680e:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8006812:	f04f 31ff 	mov.w	r1, #4294967295
 8006816:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 800681a:	2100      	movs	r1, #0
 800681c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8006820:	3201      	adds	r2, #1
 8006822:	9b04      	ldr	r3, [sp, #16]
 8006824:	4293      	cmp	r3, r2
 8006826:	d8f2      	bhi.n	800680e <USB_HostInit+0x6a>
  (void)USB_DriveVbus(USBx, 1U);
 8006828:	2101      	movs	r1, #1
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff ff96 	bl	800675c <USB_DriveVbus>
  HAL_Delay(200U);
 8006830:	20c8      	movs	r0, #200	; 0xc8
 8006832:	f7fc fc45 	bl	80030c0 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800683a:	f04f 33ff 	mov.w	r3, #4294967295
 800683e:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006842:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006846:	d017      	beq.n	8006878 <USB_HostInit+0xd4>
    USBx->GRXFSIZ  = 0x200U;
 8006848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800684c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800684e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8006852:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <USB_HostInit+0xe8>)
 8006856:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	b91b      	cbnz	r3, 8006866 <USB_HostInit+0xc2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800685e:	69a3      	ldr	r3, [r4, #24]
 8006860:	f043 0310 	orr.w	r3, r3, #16
 8006864:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006866:	69a2      	ldr	r2, [r4, #24]
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <USB_HostInit+0xec>)
 800686a:	4313      	orrs	r3, r2
 800686c:	61a3      	str	r3, [r4, #24]
}
 800686e:	2000      	movs	r0, #0
 8006870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006874:	b004      	add	sp, #16
 8006876:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8006878:	2380      	movs	r3, #128	; 0x80
 800687a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800687c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8006880:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006882:	4b04      	ldr	r3, [pc, #16]	; (8006894 <USB_HostInit+0xf0>)
 8006884:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006888:	e7e7      	b.n	800685a <USB_HostInit+0xb6>
 800688a:	bf00      	nop
 800688c:	00e00300 	.word	0x00e00300
 8006890:	a3200008 	.word	0xa3200008
 8006894:	004000e0 	.word	0x004000e0

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4d0d      	ldr	r5, [pc, #52]	; (80068d0 <__libc_init_array+0x38>)
 800689c:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 800689e:	1b64      	subs	r4, r4, r5
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	2600      	movs	r6, #0
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	4d0b      	ldr	r5, [pc, #44]	; (80068d8 <__libc_init_array+0x40>)
 80068aa:	4c0c      	ldr	r4, [pc, #48]	; (80068dc <__libc_init_array+0x44>)
 80068ac:	f000 f83e 	bl	800692c <_init>
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	2600      	movs	r6, #0
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c0:	4798      	blx	r3
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ca:	4798      	blx	r3
 80068cc:	3601      	adds	r6, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	08006b70 	.word	0x08006b70
 80068d4:	08006b70 	.word	0x08006b70
 80068d8:	08006b70 	.word	0x08006b70
 80068dc:	08006b74 	.word	0x08006b74

080068e0 <memcmp>:
 80068e0:	b510      	push	{r4, lr}
 80068e2:	3901      	subs	r1, #1
 80068e4:	4402      	add	r2, r0
 80068e6:	4290      	cmp	r0, r2
 80068e8:	d101      	bne.n	80068ee <memcmp+0xe>
 80068ea:	2000      	movs	r0, #0
 80068ec:	e005      	b.n	80068fa <memcmp+0x1a>
 80068ee:	7803      	ldrb	r3, [r0, #0]
 80068f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	d001      	beq.n	80068fc <memcmp+0x1c>
 80068f8:	1b18      	subs	r0, r3, r4
 80068fa:	bd10      	pop	{r4, pc}
 80068fc:	3001      	adds	r0, #1
 80068fe:	e7f2      	b.n	80068e6 <memcmp+0x6>

08006900 <memcpy>:
 8006900:	440a      	add	r2, r1
 8006902:	4291      	cmp	r1, r2
 8006904:	f100 33ff 	add.w	r3, r0, #4294967295
 8006908:	d100      	bne.n	800690c <memcpy+0xc>
 800690a:	4770      	bx	lr
 800690c:	b510      	push	{r4, lr}
 800690e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006916:	4291      	cmp	r1, r2
 8006918:	d1f9      	bne.n	800690e <memcpy+0xe>
 800691a:	bd10      	pop	{r4, pc}

0800691c <memset>:
 800691c:	4402      	add	r2, r0
 800691e:	4603      	mov	r3, r0
 8006920:	4293      	cmp	r3, r2
 8006922:	d100      	bne.n	8006926 <memset+0xa>
 8006924:	4770      	bx	lr
 8006926:	f803 1b01 	strb.w	r1, [r3], #1
 800692a:	e7f9      	b.n	8006920 <memset+0x4>

0800692c <_init>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr

08006938 <_fini>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	bf00      	nop
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr
