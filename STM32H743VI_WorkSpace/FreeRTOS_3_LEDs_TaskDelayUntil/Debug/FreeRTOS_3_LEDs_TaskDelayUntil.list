
FreeRTOS_3_LEDs_TaskDelayUntil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a3f4  0800a3f4  0001a3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a3f8  0800a3f8  0001a3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  24000000  0800a3fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006074  24000024  0800a420  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006098  0800a420  00026098  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023af3  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ea7  00000000  00000000  00043b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d58  00000000  00000000  000479f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001bb0  00000000  00000000  00049748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038c93  00000000  00000000  0004b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002160a  00000000  00000000  00083f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a3a4  00000000  00000000  000a5595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021f939  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007ed0  00000000  00000000  0021f98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000024 	.word	0x24000024
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a1a4 	.word	0x0800a1a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000028 	.word	0x24000028
 80002dc:	0800a1a4 	.word	0x0800a1a4

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	24005240 	.word	0x24005240

08000374 <strlen>:
 8000374:	4603      	mov	r3, r0
 8000376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800037a:	2a00      	cmp	r2, #0
 800037c:	d1fb      	bne.n	8000376 <strlen+0x2>
 800037e:	1a18      	subs	r0, r3, r0
 8000380:	3801      	subs	r0, #1
 8000382:	4770      	bx	lr

08000384 <__aeabi_uldivmod>:
 8000384:	b953      	cbnz	r3, 800039c <__aeabi_uldivmod+0x18>
 8000386:	b94a      	cbnz	r2, 800039c <__aeabi_uldivmod+0x18>
 8000388:	2900      	cmp	r1, #0
 800038a:	bf08      	it	eq
 800038c:	2800      	cmpeq	r0, #0
 800038e:	bf1c      	itt	ne
 8000390:	f04f 31ff 	movne.w	r1, #4294967295
 8000394:	f04f 30ff 	movne.w	r0, #4294967295
 8000398:	f000 b974 	b.w	8000684 <__aeabi_idiv0>
 800039c:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a4:	f000 f806 	bl	80003b4 <__udivmoddi4>
 80003a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr

080003b4 <__udivmoddi4>:
 80003b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b8:	9d08      	ldr	r5, [sp, #32]
 80003ba:	4604      	mov	r4, r0
 80003bc:	468e      	mov	lr, r1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d14d      	bne.n	800045e <__udivmoddi4+0xaa>
 80003c2:	428a      	cmp	r2, r1
 80003c4:	4694      	mov	ip, r2
 80003c6:	d969      	bls.n	800049c <__udivmoddi4+0xe8>
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b152      	cbz	r2, 80003e4 <__udivmoddi4+0x30>
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	f1c2 0120 	rsb	r1, r2, #32
 80003d6:	fa20 f101 	lsr.w	r1, r0, r1
 80003da:	fa0c fc02 	lsl.w	ip, ip, r2
 80003de:	ea41 0e03 	orr.w	lr, r1, r3
 80003e2:	4094      	lsls	r4, r2
 80003e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e8:	0c21      	lsrs	r1, r4, #16
 80003ea:	fbbe f6f8 	udiv	r6, lr, r8
 80003ee:	fa1f f78c 	uxth.w	r7, ip
 80003f2:	fb08 e316 	mls	r3, r8, r6, lr
 80003f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003fa:	fb06 f107 	mul.w	r1, r6, r7
 80003fe:	4299      	cmp	r1, r3
 8000400:	d90a      	bls.n	8000418 <__udivmoddi4+0x64>
 8000402:	eb1c 0303 	adds.w	r3, ip, r3
 8000406:	f106 30ff 	add.w	r0, r6, #4294967295
 800040a:	f080 811f 	bcs.w	800064c <__udivmoddi4+0x298>
 800040e:	4299      	cmp	r1, r3
 8000410:	f240 811c 	bls.w	800064c <__udivmoddi4+0x298>
 8000414:	3e02      	subs	r6, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a5b      	subs	r3, r3, r1
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000428:	fb00 f707 	mul.w	r7, r0, r7
 800042c:	42a7      	cmp	r7, r4
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x92>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	f080 810a 	bcs.w	8000650 <__udivmoddi4+0x29c>
 800043c:	42a7      	cmp	r7, r4
 800043e:	f240 8107 	bls.w	8000650 <__udivmoddi4+0x29c>
 8000442:	4464      	add	r4, ip
 8000444:	3802      	subs	r0, #2
 8000446:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044a:	1be4      	subs	r4, r4, r7
 800044c:	2600      	movs	r6, #0
 800044e:	b11d      	cbz	r5, 8000458 <__udivmoddi4+0xa4>
 8000450:	40d4      	lsrs	r4, r2
 8000452:	2300      	movs	r3, #0
 8000454:	e9c5 4300 	strd	r4, r3, [r5]
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	428b      	cmp	r3, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0xc2>
 8000462:	2d00      	cmp	r5, #0
 8000464:	f000 80ef 	beq.w	8000646 <__udivmoddi4+0x292>
 8000468:	2600      	movs	r6, #0
 800046a:	e9c5 0100 	strd	r0, r1, [r5]
 800046e:	4630      	mov	r0, r6
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	fab3 f683 	clz	r6, r3
 800047a:	2e00      	cmp	r6, #0
 800047c:	d14a      	bne.n	8000514 <__udivmoddi4+0x160>
 800047e:	428b      	cmp	r3, r1
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xd4>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 80f9 	bhi.w	800067a <__udivmoddi4+0x2c6>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb61 0303 	sbc.w	r3, r1, r3
 800048e:	2001      	movs	r0, #1
 8000490:	469e      	mov	lr, r3
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e0      	beq.n	8000458 <__udivmoddi4+0xa4>
 8000496:	e9c5 4e00 	strd	r4, lr, [r5]
 800049a:	e7dd      	b.n	8000458 <__udivmoddi4+0xa4>
 800049c:	b902      	cbnz	r2, 80004a0 <__udivmoddi4+0xec>
 800049e:	deff      	udf	#255	; 0xff
 80004a0:	fab2 f282 	clz	r2, r2
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	f040 8092 	bne.w	80005ce <__udivmoddi4+0x21a>
 80004aa:	eba1 010c 	sub.w	r1, r1, ip
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f fe8c 	uxth.w	lr, ip
 80004b6:	2601      	movs	r6, #1
 80004b8:	0c20      	lsrs	r0, r4, #16
 80004ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80004be:	fb07 1113 	mls	r1, r7, r3, r1
 80004c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c6:	fb0e f003 	mul.w	r0, lr, r3
 80004ca:	4288      	cmp	r0, r1
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x12c>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d6:	d202      	bcs.n	80004de <__udivmoddi4+0x12a>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f200 80cb 	bhi.w	8000674 <__udivmoddi4+0x2c0>
 80004de:	4643      	mov	r3, r8
 80004e0:	1a09      	subs	r1, r1, r0
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e8:	fb07 1110 	mls	r1, r7, r0, r1
 80004ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004f0:	fb0e fe00 	mul.w	lr, lr, r0
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x156>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d202      	bcs.n	8000508 <__udivmoddi4+0x154>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f200 80bb 	bhi.w	800067e <__udivmoddi4+0x2ca>
 8000508:	4608      	mov	r0, r1
 800050a:	eba4 040e 	sub.w	r4, r4, lr
 800050e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x9a>
 8000514:	f1c6 0720 	rsb	r7, r6, #32
 8000518:	40b3      	lsls	r3, r6
 800051a:	fa22 fc07 	lsr.w	ip, r2, r7
 800051e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000522:	fa20 f407 	lsr.w	r4, r0, r7
 8000526:	fa01 f306 	lsl.w	r3, r1, r6
 800052a:	431c      	orrs	r4, r3
 800052c:	40f9      	lsrs	r1, r7
 800052e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000532:	fa00 f306 	lsl.w	r3, r0, r6
 8000536:	fbb1 f8f9 	udiv	r8, r1, r9
 800053a:	0c20      	lsrs	r0, r4, #16
 800053c:	fa1f fe8c 	uxth.w	lr, ip
 8000540:	fb09 1118 	mls	r1, r9, r8, r1
 8000544:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000548:	fb08 f00e 	mul.w	r0, r8, lr
 800054c:	4288      	cmp	r0, r1
 800054e:	fa02 f206 	lsl.w	r2, r2, r6
 8000552:	d90b      	bls.n	800056c <__udivmoddi4+0x1b8>
 8000554:	eb1c 0101 	adds.w	r1, ip, r1
 8000558:	f108 3aff 	add.w	sl, r8, #4294967295
 800055c:	f080 8088 	bcs.w	8000670 <__udivmoddi4+0x2bc>
 8000560:	4288      	cmp	r0, r1
 8000562:	f240 8085 	bls.w	8000670 <__udivmoddi4+0x2bc>
 8000566:	f1a8 0802 	sub.w	r8, r8, #2
 800056a:	4461      	add	r1, ip
 800056c:	1a09      	subs	r1, r1, r0
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb1 f0f9 	udiv	r0, r1, r9
 8000574:	fb09 1110 	mls	r1, r9, r0, r1
 8000578:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800057c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000580:	458e      	cmp	lr, r1
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x1e2>
 8000584:	eb1c 0101 	adds.w	r1, ip, r1
 8000588:	f100 34ff 	add.w	r4, r0, #4294967295
 800058c:	d26c      	bcs.n	8000668 <__udivmoddi4+0x2b4>
 800058e:	458e      	cmp	lr, r1
 8000590:	d96a      	bls.n	8000668 <__udivmoddi4+0x2b4>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800059a:	fba0 9402 	umull	r9, r4, r0, r2
 800059e:	eba1 010e 	sub.w	r1, r1, lr
 80005a2:	42a1      	cmp	r1, r4
 80005a4:	46c8      	mov	r8, r9
 80005a6:	46a6      	mov	lr, r4
 80005a8:	d356      	bcc.n	8000658 <__udivmoddi4+0x2a4>
 80005aa:	d053      	beq.n	8000654 <__udivmoddi4+0x2a0>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x212>
 80005ae:	ebb3 0208 	subs.w	r2, r3, r8
 80005b2:	eb61 010e 	sbc.w	r1, r1, lr
 80005b6:	fa01 f707 	lsl.w	r7, r1, r7
 80005ba:	fa22 f306 	lsr.w	r3, r2, r6
 80005be:	40f1      	lsrs	r1, r6
 80005c0:	431f      	orrs	r7, r3
 80005c2:	e9c5 7100 	strd	r7, r1, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	40d8      	lsrs	r0, r3
 80005d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
 80005dc:	4091      	lsls	r1, r2
 80005de:	4301      	orrs	r1, r0
 80005e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e4:	fa1f fe8c 	uxth.w	lr, ip
 80005e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80005ec:	fb07 3610 	mls	r6, r7, r0, r3
 80005f0:	0c0b      	lsrs	r3, r1, #16
 80005f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f6:	fb00 f60e 	mul.w	r6, r0, lr
 80005fa:	429e      	cmp	r6, r3
 80005fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000600:	d908      	bls.n	8000614 <__udivmoddi4+0x260>
 8000602:	eb1c 0303 	adds.w	r3, ip, r3
 8000606:	f100 38ff 	add.w	r8, r0, #4294967295
 800060a:	d22f      	bcs.n	800066c <__udivmoddi4+0x2b8>
 800060c:	429e      	cmp	r6, r3
 800060e:	d92d      	bls.n	800066c <__udivmoddi4+0x2b8>
 8000610:	3802      	subs	r0, #2
 8000612:	4463      	add	r3, ip
 8000614:	1b9b      	subs	r3, r3, r6
 8000616:	b289      	uxth	r1, r1
 8000618:	fbb3 f6f7 	udiv	r6, r3, r7
 800061c:	fb07 3316 	mls	r3, r7, r6, r3
 8000620:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000624:	fb06 f30e 	mul.w	r3, r6, lr
 8000628:	428b      	cmp	r3, r1
 800062a:	d908      	bls.n	800063e <__udivmoddi4+0x28a>
 800062c:	eb1c 0101 	adds.w	r1, ip, r1
 8000630:	f106 38ff 	add.w	r8, r6, #4294967295
 8000634:	d216      	bcs.n	8000664 <__udivmoddi4+0x2b0>
 8000636:	428b      	cmp	r3, r1
 8000638:	d914      	bls.n	8000664 <__udivmoddi4+0x2b0>
 800063a:	3e02      	subs	r6, #2
 800063c:	4461      	add	r1, ip
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000644:	e738      	b.n	80004b8 <__udivmoddi4+0x104>
 8000646:	462e      	mov	r6, r5
 8000648:	4628      	mov	r0, r5
 800064a:	e705      	b.n	8000458 <__udivmoddi4+0xa4>
 800064c:	4606      	mov	r6, r0
 800064e:	e6e3      	b.n	8000418 <__udivmoddi4+0x64>
 8000650:	4618      	mov	r0, r3
 8000652:	e6f8      	b.n	8000446 <__udivmoddi4+0x92>
 8000654:	454b      	cmp	r3, r9
 8000656:	d2a9      	bcs.n	80005ac <__udivmoddi4+0x1f8>
 8000658:	ebb9 0802 	subs.w	r8, r9, r2
 800065c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000660:	3801      	subs	r0, #1
 8000662:	e7a3      	b.n	80005ac <__udivmoddi4+0x1f8>
 8000664:	4646      	mov	r6, r8
 8000666:	e7ea      	b.n	800063e <__udivmoddi4+0x28a>
 8000668:	4620      	mov	r0, r4
 800066a:	e794      	b.n	8000596 <__udivmoddi4+0x1e2>
 800066c:	4640      	mov	r0, r8
 800066e:	e7d1      	b.n	8000614 <__udivmoddi4+0x260>
 8000670:	46d0      	mov	r8, sl
 8000672:	e77b      	b.n	800056c <__udivmoddi4+0x1b8>
 8000674:	3b02      	subs	r3, #2
 8000676:	4461      	add	r1, ip
 8000678:	e732      	b.n	80004e0 <__udivmoddi4+0x12c>
 800067a:	4630      	mov	r0, r6
 800067c:	e709      	b.n	8000492 <__udivmoddi4+0xde>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	e742      	b.n	800050a <__udivmoddi4+0x156>

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f103 0208 	add.w	r2, r3, #8
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f103 0208 	add.w	r2, r3, #8
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f103 0208 	add.w	r2, r3, #8
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80006e2:	b480      	push	{r7}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800072a:	b480      	push	{r7}
 800072c:	b085      	sub	sp, #20
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d103      	bne.n	800074a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e00c      	b.n	8000764 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3308      	adds	r3, #8
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e002      	b.n	8000758 <vListInsert+0x2e>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	429a      	cmp	r2, r3
 8000762:	d2f6      	bcs.n	8000752 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	601a      	str	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	6892      	ldr	r2, [r2, #8]
 80007b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	6852      	ldr	r2, [r2, #4]
 80007bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d103      	bne.n	80007d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af04      	add	r7, sp, #16
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4613      	mov	r3, r2
 80007fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4618      	mov	r0, r3
 8000806:	f000 feff 	bl	8001608 <pvPortMalloc>
 800080a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00e      	beq.n	8000830 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000812:	205c      	movs	r0, #92	; 0x5c
 8000814:	f000 fef8 	bl	8001608 <pvPortMalloc>
 8000818:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
 8000826:	e005      	b.n	8000834 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000828:	6978      	ldr	r0, [r7, #20]
 800082a:	f000 ffd3 	bl	80017d4 <vPortFree>
 800082e:	e001      	b.n	8000834 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d013      	beq.n	8000862 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	2300      	movs	r3, #0
 800083e:	9303      	str	r3, [sp, #12]
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f000 f80e 	bl	8000872 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000856:	69f8      	ldr	r0, [r7, #28]
 8000858:	f000 f8a4 	bl	80009a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	e002      	b.n	8000868 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000868:	69bb      	ldr	r3, [r7, #24]
    }
 800086a:	4618      	mov	r0, r3
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b088      	sub	sp, #32
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000882:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	461a      	mov	r2, r3
 800088a:	21a5      	movs	r1, #165	; 0xa5
 800088c:	f009 fc82 	bl	800a194 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800089a:	440b      	add	r3, r1
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	f023 0307 	bic.w	r3, r3, #7
 80008a8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00c      	beq.n	80008ce <prvInitialiseNewTask+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b8:	b672      	cpsid	i
 80008ba:	f383 8811 	msr	BASEPRI, r3
 80008be:	f3bf 8f6f 	isb	sy
 80008c2:	f3bf 8f4f 	dsb	sy
 80008c6:	b662      	cpsie	i
 80008c8:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008ca:	bf00      	nop
 80008cc:	e7fe      	b.n	80008cc <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d01f      	beq.n	8000914 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
 80008d8:	e012      	b.n	8000900 <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	7819      	ldrb	r1, [r3, #0]
 80008e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	3334      	adds	r3, #52	; 0x34
 80008ea:	460a      	mov	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d006      	beq.n	8000908 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3301      	adds	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	2b0f      	cmp	r3, #15
 8000904:	d9e9      	bls.n	80008da <prvInitialiseNewTask+0x68>
 8000906:	e000      	b.n	800090a <prvInitialiseNewTask+0x98>
            {
                break;
 8000908:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800090a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000912:	e003      	b.n	800091c <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091e:	2b06      	cmp	r3, #6
 8000920:	d901      	bls.n	8000926 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000922:	2306      	movs	r3, #6
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000930:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8000932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000934:	2200      	movs	r2, #0
 8000936:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093a:	3304      	adds	r3, #4
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fec3 	bl	80006c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000944:	3318      	adds	r3, #24
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff febe 	bl	80006c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000950:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000954:	f1c3 0207 	rsb	r2, r3, #7
 8000958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000964:	3354      	adds	r3, #84	; 0x54
 8000966:	2204      	movs	r2, #4
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f009 fc12 	bl	800a194 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000972:	3358      	adds	r3, #88	; 0x58
 8000974:	2201      	movs	r2, #1
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f009 fc0b 	bl	800a194 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	68f9      	ldr	r1, [r7, #12]
 8000982:	69b8      	ldr	r0, [r7, #24]
 8000984:	f000 fc06 	bl	8001194 <pxPortInitialiseStack>
 8000988:	4602      	mov	r2, r0
 800098a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800098c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000998:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80009a4:	b5b0      	push	{r4, r5, r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80009ac:	f000 fd00 	bl	80013b0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80009b0:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <prvAddNewTaskToReadyList+0xe4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a34      	ldr	r2, [pc, #208]	; (8000a88 <prvAddNewTaskToReadyList+0xe4>)
 80009b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d109      	bne.n	80009d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80009c2:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <prvAddNewTaskToReadyList+0xe4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d110      	bne.n	80009f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80009d0:	f000 face 	bl	8000f70 <prvInitialiseTaskLists>
 80009d4:	e00d      	b.n	80009f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <prvAddNewTaskToReadyList+0xec>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d109      	bne.n	80009f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d802      	bhi.n	80009f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80009ec:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <prvAddNewTaskToReadyList+0xf0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3301      	adds	r3, #1
 80009f8:	4a26      	ldr	r2, [pc, #152]	; (8000a94 <prvAddNewTaskToReadyList+0xf0>)
 80009fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <prvAddNewTaskToReadyList+0xf0>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d016      	beq.n	8000a38 <prvAddNewTaskToReadyList+0x94>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fff1 	bl	80039f4 <SEGGER_SYSVIEW_OnTaskCreate>
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	461d      	mov	r5, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	461c      	mov	r4, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	1ae3      	subs	r3, r4, r3
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	462b      	mov	r3, r5
 8000a34:	f001 f8a0 	bl	8001b78 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f85e 	bl	8003afc <SEGGER_SYSVIEW_OnTaskStartReady>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a44:	2201      	movs	r2, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <prvAddNewTaskToReadyList+0xf4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <prvAddNewTaskToReadyList+0xf4>)
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <prvAddNewTaskToReadyList+0xf8>)
 8000a60:	441a      	add	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4610      	mov	r0, r2
 8000a6a:	f7ff fe3a 	bl	80006e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000a6e:	f000 fcd3 	bl	8001418 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <prvAddNewTaskToReadyList+0xec>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <prvAddNewTaskToReadyList+0xe8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bdb0      	pop	{r4, r5, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	24000140 	.word	0x24000140
 8000a8c:	24000040 	.word	0x24000040
 8000a90:	2400014c 	.word	0x2400014c
 8000a94:	2400015c 	.word	0x2400015c
 8000a98:	24000148 	.word	0x24000148
 8000a9c:	24000044 	.word	0x24000044

08000aa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d01d      	beq.n	8000aee <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <vTaskDelay+0x6c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00c      	beq.n	8000ad4 <vTaskDelay+0x34>
        __asm volatile
 8000aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000abe:	b672      	cpsid	i
 8000ac0:	f383 8811 	msr	BASEPRI, r3
 8000ac4:	f3bf 8f6f 	isb	sy
 8000ac8:	f3bf 8f4f 	dsb	sy
 8000acc:	b662      	cpsie	i
 8000ace:	60bb      	str	r3, [r7, #8]
    }
 8000ad0:	bf00      	nop
 8000ad2:	e7fe      	b.n	8000ad2 <vTaskDelay+0x32>
            vTaskSuspendAll();
 8000ad4:	f000 f87e 	bl	8000bd4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	2023      	movs	r0, #35	; 0x23
 8000adc:	f002 fc0e 	bl	80032fc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 fade 	bl	80010a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000ae8:	f000 f882 	bl	8000bf0 <xTaskResumeAll>
 8000aec:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d107      	bne.n	8000b04 <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <vTaskDelay+0x70>)
 8000af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	f3bf 8f4f 	dsb	sy
 8000b00:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24000168 	.word	0x24000168
 8000b10:	e000ed04 	.word	0xe000ed04

08000b14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <vTaskStartScheduler+0xa0>)
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	4924      	ldr	r1, [pc, #144]	; (8000bb8 <vTaskStartScheduler+0xa4>)
 8000b28:	4824      	ldr	r0, [pc, #144]	; (8000bbc <vTaskStartScheduler+0xa8>)
 8000b2a:	f7ff fe61 	bl	80007f0 <xTaskCreate>
 8000b2e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d126      	bne.n	8000b84 <vTaskStartScheduler+0x70>
        __asm volatile
 8000b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3a:	b672      	cpsid	i
 8000b3c:	f383 8811 	msr	BASEPRI, r3
 8000b40:	f3bf 8f6f 	isb	sy
 8000b44:	f3bf 8f4f 	dsb	sy
 8000b48:	b662      	cpsie	i
 8000b4a:	60bb      	str	r3, [r7, #8]
    }
 8000b4c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <vTaskStartScheduler+0xac>)
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <vTaskStartScheduler+0xb0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <vTaskStartScheduler+0xb4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <vTaskStartScheduler+0xb8>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <vTaskStartScheduler+0xa0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d102      	bne.n	8000b74 <vTaskStartScheduler+0x60>
 8000b6e:	f002 ff25 	bl	80039bc <SEGGER_SYSVIEW_OnIdle>
 8000b72:	e004      	b.n	8000b7e <vTaskStartScheduler+0x6a>
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <vTaskStartScheduler+0xb8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 ff7d 	bl	8003a78 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000b7e:	f000 fb99 	bl	80012b4 <xPortStartScheduler>
 8000b82:	e010      	b.n	8000ba6 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8a:	d10c      	bne.n	8000ba6 <vTaskStartScheduler+0x92>
        __asm volatile
 8000b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b90:	b672      	cpsid	i
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	b662      	cpsie	i
 8000ba0:	607b      	str	r3, [r7, #4]
    }
 8000ba2:	bf00      	nop
 8000ba4:	e7fe      	b.n	8000ba4 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <vTaskStartScheduler+0xbc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000164 	.word	0x24000164
 8000bb8:	0800a1bc 	.word	0x0800a1bc
 8000bbc:	08000f4d 	.word	0x08000f4d
 8000bc0:	24000160 	.word	0x24000160
 8000bc4:	2400014c 	.word	0x2400014c
 8000bc8:	24000144 	.word	0x24000144
 8000bcc:	24000040 	.word	0x24000040
 8000bd0:	24000000 	.word	0x24000000

08000bd4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <vTaskSuspendAll+0x18>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a03      	ldr	r2, [pc, #12]	; (8000bec <vTaskSuspendAll+0x18>)
 8000be0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	24000168 	.word	0x24000168

08000bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <xTaskResumeAll+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10c      	bne.n	8000c20 <xTaskResumeAll+0x30>
        __asm volatile
 8000c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c0a:	b672      	cpsid	i
 8000c0c:	f383 8811 	msr	BASEPRI, r3
 8000c10:	f3bf 8f6f 	isb	sy
 8000c14:	f3bf 8f4f 	dsb	sy
 8000c18:	b662      	cpsie	i
 8000c1a:	603b      	str	r3, [r7, #0]
    }
 8000c1c:	bf00      	nop
 8000c1e:	e7fe      	b.n	8000c1e <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c20:	f000 fbc6 	bl	80013b0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <xTaskResumeAll+0x108>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	4a33      	ldr	r2, [pc, #204]	; (8000cf8 <xTaskResumeAll+0x108>)
 8000c2c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c2e:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <xTaskResumeAll+0x108>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d159      	bne.n	8000cea <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <xTaskResumeAll+0x10c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d055      	beq.n	8000cea <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c3e:	e032      	b.n	8000ca6 <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c40:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <xTaskResumeAll+0x110>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3318      	adds	r3, #24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fda5 	bl	800079c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3304      	adds	r3, #4
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fda0 	bl	800079c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 ff4c 	bl	8003afc <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	2201      	movs	r2, #1
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <xTaskResumeAll+0x114>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	4a24      	ldr	r2, [pc, #144]	; (8000d04 <xTaskResumeAll+0x114>)
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <xTaskResumeAll+0x118>)
 8000c84:	441a      	add	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	f7ff fd28 	bl	80006e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <xTaskResumeAll+0x11c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d302      	bcc.n	8000ca6 <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <xTaskResumeAll+0x120>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <xTaskResumeAll+0x110>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1c8      	bne.n	8000c40 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000cb4:	f000 f9da 	bl	800106c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <xTaskResumeAll+0x124>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d010      	beq.n	8000ce6 <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000cc4:	f000 f83a 	bl	8000d3c <xTaskIncrementTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <xTaskResumeAll+0x120>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f1      	bne.n	8000cc4 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <xTaskResumeAll+0x124>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <xTaskResumeAll+0x120>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000cea:	f000 fb95 	bl	8001418 <vPortExitCritical>

    return xAlreadyYielded;
 8000cee:	687b      	ldr	r3, [r7, #4]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	24000168 	.word	0x24000168
 8000cfc:	24000140 	.word	0x24000140
 8000d00:	24000100 	.word	0x24000100
 8000d04:	24000148 	.word	0x24000148
 8000d08:	24000044 	.word	0x24000044
 8000d0c:	24000040 	.word	0x24000040
 8000d10:	24000154 	.word	0x24000154
 8000d14:	24000150 	.word	0x24000150

08000d18 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d1e:	f000 fc2f 	bl	8001580 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <xTaskGetTickCountFromISR+0x20>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000d2c:	683b      	ldr	r3, [r7, #0]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24000144 	.word	0x24000144

08000d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d46:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <xTaskIncrementTick+0x114>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d175      	bne.n	8000e3a <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d4e:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <xTaskIncrementTick+0x118>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <xTaskIncrementTick+0x118>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d122      	bne.n	8000da8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <xTaskIncrementTick+0x11c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00c      	beq.n	8000d86 <xTaskIncrementTick+0x4a>
        __asm volatile
 8000d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d70:	b672      	cpsid	i
 8000d72:	f383 8811 	msr	BASEPRI, r3
 8000d76:	f3bf 8f6f 	isb	sy
 8000d7a:	f3bf 8f4f 	dsb	sy
 8000d7e:	b662      	cpsie	i
 8000d80:	603b      	str	r3, [r7, #0]
    }
 8000d82:	bf00      	nop
 8000d84:	e7fe      	b.n	8000d84 <xTaskIncrementTick+0x48>
 8000d86:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <xTaskIncrementTick+0x11c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <xTaskIncrementTick+0x120>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <xTaskIncrementTick+0x11c>)
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <xTaskIncrementTick+0x120>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <xTaskIncrementTick+0x124>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <xTaskIncrementTick+0x124>)
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	f000 f962 	bl	800106c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <xTaskIncrementTick+0x128>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d348      	bcc.n	8000e44 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <xTaskIncrementTick+0x11c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d104      	bne.n	8000dc6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <xTaskIncrementTick+0x128>)
 8000dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc2:	601a      	str	r2, [r3, #0]
                    break;
 8000dc4:	e03e      	b.n	8000e44 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <xTaskIncrementTick+0x11c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d203      	bcs.n	8000de6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000dde:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <xTaskIncrementTick+0x128>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000de4:	e02e      	b.n	8000e44 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3304      	adds	r3, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fcd6 	bl	800079c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	3318      	adds	r3, #24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fccd 	bl	800079c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fe79 	bl	8003afc <SEGGER_SYSVIEW_OnTaskStartReady>
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	2201      	movs	r2, #1
 8000e10:	409a      	lsls	r2, r3
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <xTaskIncrementTick+0x12c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <xTaskIncrementTick+0x12c>)
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <xTaskIncrementTick+0x130>)
 8000e2a:	441a      	add	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4610      	mov	r0, r2
 8000e34:	f7ff fc55 	bl	80006e2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e38:	e7bb      	b.n	8000db2 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <xTaskIncrementTick+0x134>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <xTaskIncrementTick+0x134>)
 8000e42:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000e44:	697b      	ldr	r3, [r7, #20]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	24000168 	.word	0x24000168
 8000e54:	24000144 	.word	0x24000144
 8000e58:	240000f8 	.word	0x240000f8
 8000e5c:	240000fc 	.word	0x240000fc
 8000e60:	24000158 	.word	0x24000158
 8000e64:	24000160 	.word	0x24000160
 8000e68:	24000148 	.word	0x24000148
 8000e6c:	24000044 	.word	0x24000044
 8000e70:	24000150 	.word	0x24000150

08000e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <vTaskSwitchContext+0xc0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <vTaskSwitchContext+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000e88:	e04f      	b.n	8000f2a <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <vTaskSwitchContext+0xc4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <vTaskSwitchContext+0xc8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	fab3 f383 	clz	r3, r3
 8000e9c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	f1c3 031f 	rsb	r3, r3, #31
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	4926      	ldr	r1, [pc, #152]	; (8000f40 <vTaskSwitchContext+0xcc>)
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <vTaskSwitchContext+0x60>
        __asm volatile
 8000eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebe:	b672      	cpsid	i
 8000ec0:	f383 8811 	msr	BASEPRI, r3
 8000ec4:	f3bf 8f6f 	isb	sy
 8000ec8:	f3bf 8f4f 	dsb	sy
 8000ecc:	b662      	cpsie	i
 8000ece:	607b      	str	r3, [r7, #4]
    }
 8000ed0:	bf00      	nop
 8000ed2:	e7fe      	b.n	8000ed2 <vTaskSwitchContext+0x5e>
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <vTaskSwitchContext+0xcc>)
 8000ee0:	4413      	add	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	3308      	adds	r3, #8
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d104      	bne.n	8000f04 <vTaskSwitchContext+0x90>
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <vTaskSwitchContext+0xd0>)
 8000f0c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <vTaskSwitchContext+0xd0>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <vTaskSwitchContext+0xd4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d102      	bne.n	8000f20 <vTaskSwitchContext+0xac>
 8000f1a:	f002 fd4f 	bl	80039bc <SEGGER_SYSVIEW_OnIdle>
}
 8000f1e:	e004      	b.n	8000f2a <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <vTaskSwitchContext+0xd0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 fda7 	bl	8003a78 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	24000168 	.word	0x24000168
 8000f38:	24000154 	.word	0x24000154
 8000f3c:	24000148 	.word	0x24000148
 8000f40:	24000044 	.word	0x24000044
 8000f44:	24000040 	.word	0x24000040
 8000f48:	24000164 	.word	0x24000164

08000f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f54:	f000 f84c 	bl	8000ff0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <prvIdleTask+0x20>)
 8000f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	f3bf 8f4f 	dsb	sy
 8000f64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f68:	e7f4      	b.n	8000f54 <prvIdleTask+0x8>
 8000f6a:	bf00      	nop
 8000f6c:	e000ed04 	.word	0xe000ed04

08000f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	e00c      	b.n	8000f96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <prvInitialiseTaskLists+0x60>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fb7c 	bl	8000688 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b06      	cmp	r3, #6
 8000f9a:	d9ef      	bls.n	8000f7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <prvInitialiseTaskLists+0x64>)
 8000f9e:	f7ff fb73 	bl	8000688 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <prvInitialiseTaskLists+0x68>)
 8000fa4:	f7ff fb70 	bl	8000688 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <prvInitialiseTaskLists+0x6c>)
 8000faa:	f7ff fb6d 	bl	8000688 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000fae:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <prvInitialiseTaskLists+0x70>)
 8000fb0:	f7ff fb6a 	bl	8000688 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <prvInitialiseTaskLists+0x74>)
 8000fb6:	f7ff fb67 	bl	8000688 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <prvInitialiseTaskLists+0x78>)
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <prvInitialiseTaskLists+0x64>)
 8000fbe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <prvInitialiseTaskLists+0x7c>)
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <prvInitialiseTaskLists+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000044 	.word	0x24000044
 8000fd4:	240000d0 	.word	0x240000d0
 8000fd8:	240000e4 	.word	0x240000e4
 8000fdc:	24000100 	.word	0x24000100
 8000fe0:	24000114 	.word	0x24000114
 8000fe4:	2400012c 	.word	0x2400012c
 8000fe8:	240000f8 	.word	0x240000f8
 8000fec:	240000fc 	.word	0x240000fc

08000ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ff6:	e019      	b.n	800102c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000ff8:	f000 f9da 	bl	80013b0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <prvCheckTasksWaitingTermination+0x50>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3304      	adds	r3, #4
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fbc7 	bl	800079c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <prvCheckTasksWaitingTermination+0x54>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3b01      	subs	r3, #1
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <prvCheckTasksWaitingTermination+0x54>)
 8001016:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <prvCheckTasksWaitingTermination+0x58>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <prvCheckTasksWaitingTermination+0x58>)
 8001020:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001022:	f000 f9f9 	bl	8001418 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f810 	bl	800104c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <prvCheckTasksWaitingTermination+0x58>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1e1      	bne.n	8000ff8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	24000114 	.word	0x24000114
 8001044:	24000140 	.word	0x24000140
 8001048:	24000128 	.word	0x24000128

0800104c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fbbb 	bl	80017d4 <vPortFree>
                vPortFree( pxTCB );
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fbb8 	bl	80017d4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <prvResetNextTaskUnblockTime+0x30>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <prvResetNextTaskUnblockTime+0x34>)
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001082:	e005      	b.n	8001090 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <prvResetNextTaskUnblockTime+0x30>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <prvResetNextTaskUnblockTime+0x34>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	240000f8 	.word	0x240000f8
 80010a0:	24000160 	.word	0x24000160

080010a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <prvAddCurrentTaskToDelayedList+0xd4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010b4:	4b31      	ldr	r3, [pc, #196]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3304      	adds	r3, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fb6e 	bl	800079c <uxListRemove>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10b      	bne.n	80010de <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2201      	movs	r2, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <prvAddCurrentTaskToDelayedList+0xdc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4013      	ands	r3, r2
 80010da:	4a29      	ldr	r2, [pc, #164]	; (8001180 <prvAddCurrentTaskToDelayedList+0xdc>)
 80010dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d110      	bne.n	8001108 <prvAddCurrentTaskToDelayedList+0x64>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00d      	beq.n	8001108 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	211b      	movs	r1, #27
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fd44 	bl	8003b80 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3304      	adds	r3, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4820      	ldr	r0, [pc, #128]	; (8001184 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001102:	f7ff faee 	bl	80006e2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001106:	e032      	b.n	800116e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d20f      	bcs.n	8001140 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2104      	movs	r1, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fd2a 	bl	8003b80 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <prvAddCurrentTaskToDelayedList+0xe4>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3304      	adds	r3, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f7ff faf6 	bl	800072a <vListInsert>
}
 800113e:	e016      	b.n	800116e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2104      	movs	r1, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fd1a 	bl	8003b80 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <prvAddCurrentTaskToDelayedList+0xe8>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3304      	adds	r3, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff fae6 	bl	800072a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <prvAddCurrentTaskToDelayedList+0xec>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	429a      	cmp	r2, r3
 8001166:	d202      	bcs.n	800116e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <prvAddCurrentTaskToDelayedList+0xec>)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000144 	.word	0x24000144
 800117c:	24000040 	.word	0x24000040
 8001180:	24000148 	.word	0x24000148
 8001184:	2400012c 	.word	0x2400012c
 8001188:	240000fc 	.word	0x240000fc
 800118c:	240000f8 	.word	0x240000f8
 8001190:	24000160 	.word	0x24000160

08001194 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3b04      	subs	r3, #4
 80011a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3b04      	subs	r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f023 0201 	bic.w	r2, r3, #1
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3b04      	subs	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <pxPortInitialiseStack+0x64>)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3b14      	subs	r3, #20
 80011ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3b04      	subs	r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f06f 0202 	mvn.w	r2, #2
 80011e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3b20      	subs	r3, #32
 80011e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	080011fd 	.word	0x080011fd

080011fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <prvTaskExitError+0x5c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120e:	d00c      	beq.n	800122a <prvTaskExitError+0x2e>
        __asm volatile
 8001210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001214:	b672      	cpsid	i
 8001216:	f383 8811 	msr	BASEPRI, r3
 800121a:	f3bf 8f6f 	isb	sy
 800121e:	f3bf 8f4f 	dsb	sy
 8001222:	b662      	cpsie	i
 8001224:	60fb      	str	r3, [r7, #12]
    }
 8001226:	bf00      	nop
 8001228:	e7fe      	b.n	8001228 <prvTaskExitError+0x2c>
        __asm volatile
 800122a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800122e:	b672      	cpsid	i
 8001230:	f383 8811 	msr	BASEPRI, r3
 8001234:	f3bf 8f6f 	isb	sy
 8001238:	f3bf 8f4f 	dsb	sy
 800123c:	b662      	cpsie	i
 800123e:	60bb      	str	r3, [r7, #8]
    }
 8001240:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001242:	bf00      	nop
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0fc      	beq.n	8001244 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	24000004 	.word	0x24000004
 800125c:	00000000 	.word	0x00000000

08001260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <pxCurrentTCBConst2>)
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	6808      	ldr	r0, [r1, #0]
 8001266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800126a:	f380 8809 	msr	PSP, r0
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f04f 0000 	mov.w	r0, #0
 8001276:	f380 8811 	msr	BASEPRI, r0
 800127a:	4770      	bx	lr
 800127c:	f3af 8000 	nop.w

08001280 <pxCurrentTCBConst2>:
 8001280:	24000040 	.word	0x24000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop

08001288 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <prvPortStartFirstTask+0x24>)
 800128a:	6800      	ldr	r0, [r0, #0]
 800128c:	6800      	ldr	r0, [r0, #0]
 800128e:	f380 8808 	msr	MSP, r0
 8001292:	f04f 0000 	mov.w	r0, #0
 8001296:	f380 8814 	msr	CONTROL, r0
 800129a:	b662      	cpsie	i
 800129c:	b661      	cpsie	f
 800129e:	f3bf 8f4f 	dsb	sy
 80012a2:	f3bf 8f6f 	isb	sy
 80012a6:	df00      	svc	0
 80012a8:	bf00      	nop
 80012aa:	0000      	.short	0x0000
 80012ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop

080012b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80012ba:	4b37      	ldr	r3, [pc, #220]	; (8001398 <xPortStartScheduler+0xe4>)
 80012bc:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <xPortStartScheduler+0xe8>)
 80012e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <xPortStartScheduler+0xec>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012e8:	e009      	b.n	80012fe <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <xPortStartScheduler+0xec>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <xPortStartScheduler+0xec>)
 80012f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	2b80      	cmp	r3, #128	; 0x80
 8001308:	d0ef      	beq.n	80012ea <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <xPortStartScheduler+0xec>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	d00c      	beq.n	8001330 <xPortStartScheduler+0x7c>
        __asm volatile
 8001316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131a:	b672      	cpsid	i
 800131c:	f383 8811 	msr	BASEPRI, r3
 8001320:	f3bf 8f6f 	isb	sy
 8001324:	f3bf 8f4f 	dsb	sy
 8001328:	b662      	cpsie	i
 800132a:	60bb      	str	r3, [r7, #8]
    }
 800132c:	bf00      	nop
 800132e:	e7fe      	b.n	800132e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <xPortStartScheduler+0xec>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <xPortStartScheduler+0xec>)
 8001338:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <xPortStartScheduler+0xec>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <xPortStartScheduler+0xec>)
 8001344:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <xPortStartScheduler+0xf0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <xPortStartScheduler+0xf0>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <xPortStartScheduler+0xf0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <xPortStartScheduler+0xf0>)
 8001360:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001364:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001366:	f000 f8db 	bl	8001520 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <xPortStartScheduler+0xf4>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001370:	f000 f8fa 	bl	8001568 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <xPortStartScheduler+0xf8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <xPortStartScheduler+0xf8>)
 800137a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800137e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001380:	f7ff ff82 	bl	8001288 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001384:	f7ff fd76 	bl	8000e74 <vTaskSwitchContext>
    prvTaskExitError();
 8001388:	f7ff ff38 	bl	80011fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e400 	.word	0xe000e400
 800139c:	2400016c 	.word	0x2400016c
 80013a0:	24000170 	.word	0x24000170
 80013a4:	e000ed20 	.word	0xe000ed20
 80013a8:	24000004 	.word	0x24000004
 80013ac:	e000ef34 	.word	0xe000ef34

080013b0 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
        __asm volatile
 80013b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ba:	b672      	cpsid	i
 80013bc:	f383 8811 	msr	BASEPRI, r3
 80013c0:	f3bf 8f6f 	isb	sy
 80013c4:	f3bf 8f4f 	dsb	sy
 80013c8:	b662      	cpsie	i
 80013ca:	607b      	str	r3, [r7, #4]
    }
 80013cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <vPortEnterCritical+0x60>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <vPortEnterCritical+0x60>)
 80013d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <vPortEnterCritical+0x60>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d111      	bne.n	8001404 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <vPortEnterCritical+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00c      	beq.n	8001404 <vPortEnterCritical+0x54>
        __asm volatile
 80013ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ee:	b672      	cpsid	i
 80013f0:	f383 8811 	msr	BASEPRI, r3
 80013f4:	f3bf 8f6f 	isb	sy
 80013f8:	f3bf 8f4f 	dsb	sy
 80013fc:	b662      	cpsie	i
 80013fe:	603b      	str	r3, [r7, #0]
    }
 8001400:	bf00      	nop
 8001402:	e7fe      	b.n	8001402 <vPortEnterCritical+0x52>
    }
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	24000004 	.word	0x24000004
 8001414:	e000ed04 	.word	0xe000ed04

08001418 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <vPortExitCritical+0x54>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <vPortExitCritical+0x28>
        __asm volatile
 8001426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800142a:	b672      	cpsid	i
 800142c:	f383 8811 	msr	BASEPRI, r3
 8001430:	f3bf 8f6f 	isb	sy
 8001434:	f3bf 8f4f 	dsb	sy
 8001438:	b662      	cpsie	i
 800143a:	607b      	str	r3, [r7, #4]
    }
 800143c:	bf00      	nop
 800143e:	e7fe      	b.n	800143e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <vPortExitCritical+0x54>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <vPortExitCritical+0x54>)
 8001448:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <vPortExitCritical+0x54>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <vPortExitCritical+0x46>
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800145c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	24000004 	.word	0x24000004

08001470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001470:	f3ef 8009 	mrs	r0, PSP
 8001474:	f3bf 8f6f 	isb	sy
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <pxCurrentTCBConst>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	f01e 0f10 	tst.w	lr, #16
 8001480:	bf08      	it	eq
 8001482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800148a:	6010      	str	r0, [r2, #0]
 800148c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001494:	b672      	cpsid	i
 8001496:	f380 8811 	msr	BASEPRI, r0
 800149a:	f3bf 8f4f 	dsb	sy
 800149e:	f3bf 8f6f 	isb	sy
 80014a2:	b662      	cpsie	i
 80014a4:	f7ff fce6 	bl	8000e74 <vTaskSwitchContext>
 80014a8:	f04f 0000 	mov.w	r0, #0
 80014ac:	f380 8811 	msr	BASEPRI, r0
 80014b0:	bc09      	pop	{r0, r3}
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	6808      	ldr	r0, [r1, #0]
 80014b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ba:	f01e 0f10 	tst.w	lr, #16
 80014be:	bf08      	it	eq
 80014c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80014c4:	f380 8809 	msr	PSP, r0
 80014c8:	f3bf 8f6f 	isb	sy
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <pxCurrentTCBConst>:
 80014d0:	24000040 	.word	0x24000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop

080014d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
        __asm volatile
 80014de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e2:	b672      	cpsid	i
 80014e4:	f383 8811 	msr	BASEPRI, r3
 80014e8:	f3bf 8f6f 	isb	sy
 80014ec:	f3bf 8f4f 	dsb	sy
 80014f0:	b662      	cpsie	i
 80014f2:	607b      	str	r3, [r7, #4]
    }
 80014f4:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80014f6:	f7ff fc21 	bl	8000d3c <xTaskIncrementTick>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <SysTick_Handler+0x44>)
 8001502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f383 8811 	msr	BASEPRI, r3
    }
 8001512:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	e000ed04 	.word	0xe000ed04

08001520 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <vPortSetupTimerInterrupt+0x34>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <vPortSetupTimerInterrupt+0x38>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <vPortSetupTimerInterrupt+0x3c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <vPortSetupTimerInterrupt+0x40>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	099b      	lsrs	r3, r3, #6
 800153c:	4a09      	ldr	r2, [pc, #36]	; (8001564 <vPortSetupTimerInterrupt+0x44>)
 800153e:	3b01      	subs	r3, #1
 8001540:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <vPortSetupTimerInterrupt+0x34>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010
 8001558:	e000e018 	.word	0xe000e018
 800155c:	24000014 	.word	0x24000014
 8001560:	10624dd3 	.word	0x10624dd3
 8001564:	e000e014 	.word	0xe000e014

08001568 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001568:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001578 <vPortEnableVFP+0x10>
 800156c:	6801      	ldr	r1, [r0, #0]
 800156e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001572:	6001      	str	r1, [r0, #0]
 8001574:	4770      	bx	lr
 8001576:	0000      	.short	0x0000
 8001578:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop

08001580 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001586:	f3ef 8305 	mrs	r3, IPSR
 800158a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b0f      	cmp	r3, #15
 8001590:	d916      	bls.n	80015c0 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001592:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <vPortValidateInterruptPriority+0x78>)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <vPortValidateInterruptPriority+0x7c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	7afa      	ldrb	r2, [r7, #11]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d20c      	bcs.n	80015c0 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80015a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015aa:	b672      	cpsid	i
 80015ac:	f383 8811 	msr	BASEPRI, r3
 80015b0:	f3bf 8f6f 	isb	sy
 80015b4:	f3bf 8f4f 	dsb	sy
 80015b8:	b662      	cpsie	i
 80015ba:	607b      	str	r3, [r7, #4]
    }
 80015bc:	bf00      	nop
 80015be:	e7fe      	b.n	80015be <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <vPortValidateInterruptPriority+0x80>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <vPortValidateInterruptPriority+0x84>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d90c      	bls.n	80015ea <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 80015d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d4:	b672      	cpsid	i
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	b662      	cpsie	i
 80015e4:	603b      	str	r3, [r7, #0]
    }
 80015e6:	bf00      	nop
 80015e8:	e7fe      	b.n	80015e8 <vPortValidateInterruptPriority+0x68>
    }
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e3f0 	.word	0xe000e3f0
 80015fc:	2400016c 	.word	0x2400016c
 8001600:	e000ed0c 	.word	0xe000ed0c
 8001604:	24000170 	.word	0x24000170

08001608 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001614:	f7ff fade 	bl	8000bd4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <pvPortMalloc+0x1b4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001620:	f000 f93e 	bl	80018a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <pvPortMalloc+0x1b8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	f040 80ab 	bne.w	8001788 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d02f      	beq.n	8001698 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001638:	2208      	movs	r2, #8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d229      	bcs.n	8001698 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8001644:	2208      	movs	r2, #8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	2b00      	cmp	r3, #0
 8001654:	d023      	beq.n	800169e <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f023 0307 	bic.w	r3, r3, #7
 800165c:	3308      	adds	r3, #8
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d216      	bcs.n	8001692 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f023 0307 	bic.w	r3, r3, #7
 800166a:	3308      	adds	r3, #8
 800166c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	2b00      	cmp	r3, #0
 8001676:	d012      	beq.n	800169e <pvPortMalloc+0x96>
        __asm volatile
 8001678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167c:	b672      	cpsid	i
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	b662      	cpsie	i
 800168c:	617b      	str	r3, [r7, #20]
    }
 800168e:	bf00      	nop
 8001690:	e7fe      	b.n	8001690 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001696:	e002      	b.n	800169e <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	e000      	b.n	80016a0 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800169e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d070      	beq.n	8001788 <pvPortMalloc+0x180>
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <pvPortMalloc+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d86b      	bhi.n	8001788 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80016b0:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <pvPortMalloc+0x1c0>)
 80016b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80016b4:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <pvPortMalloc+0x1c0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016ba:	e004      	b.n	80016c6 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d903      	bls.n	80016d8 <pvPortMalloc+0xd0>
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f1      	bne.n	80016bc <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80016d8:	4b38      	ldr	r3, [pc, #224]	; (80017bc <pvPortMalloc+0x1b4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	429a      	cmp	r2, r3
 80016e0:	d052      	beq.n	8001788 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2208      	movs	r2, #8
 80016e8:	4413      	add	r3, r2
 80016ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	1ad2      	subs	r2, r2, r3
 80016fc:	2308      	movs	r3, #8
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	429a      	cmp	r2, r3
 8001702:	d921      	bls.n	8001748 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00c      	beq.n	8001730 <pvPortMalloc+0x128>
        __asm volatile
 8001716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800171a:	b672      	cpsid	i
 800171c:	f383 8811 	msr	BASEPRI, r3
 8001720:	f3bf 8f6f 	isb	sy
 8001724:	f3bf 8f4f 	dsb	sy
 8001728:	b662      	cpsie	i
 800172a:	613b      	str	r3, [r7, #16]
    }
 800172c:	bf00      	nop
 800172e:	e7fe      	b.n	800172e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1ad2      	subs	r2, r2, r3
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001742:	69b8      	ldr	r0, [r7, #24]
 8001744:	f000 f90e 	bl	8001964 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <pvPortMalloc+0x1bc>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <pvPortMalloc+0x1bc>)
 8001754:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <pvPortMalloc+0x1bc>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <pvPortMalloc+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d203      	bcs.n	800176a <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <pvPortMalloc+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a19      	ldr	r2, [pc, #100]	; (80017cc <pvPortMalloc+0x1c4>)
 8001768:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <pvPortMalloc+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	431a      	orrs	r2, r3
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <pvPortMalloc+0x1c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <pvPortMalloc+0x1c8>)
 8001786:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001788:	f7ff fa32 	bl	8000bf0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00c      	beq.n	80017b0 <pvPortMalloc+0x1a8>
        __asm volatile
 8001796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179a:	b672      	cpsid	i
 800179c:	f383 8811 	msr	BASEPRI, r3
 80017a0:	f3bf 8f6f 	isb	sy
 80017a4:	f3bf 8f4f 	dsb	sy
 80017a8:	b662      	cpsie	i
 80017aa:	60fb      	str	r3, [r7, #12]
    }
 80017ac:	bf00      	nop
 80017ae:	e7fe      	b.n	80017ae <pvPortMalloc+0x1a6>
    return pvReturn;
 80017b0:	69fb      	ldr	r3, [r7, #28]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2400517c 	.word	0x2400517c
 80017c0:	24005190 	.word	0x24005190
 80017c4:	24005180 	.word	0x24005180
 80017c8:	24005174 	.word	0x24005174
 80017cc:	24005184 	.word	0x24005184
 80017d0:	24005188 	.word	0x24005188

080017d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d051      	beq.n	800188a <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80017e6:	2308      	movs	r3, #8
 80017e8:	425b      	negs	r3, r3
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <vPortFree+0xc0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <vPortFree+0x48>
        __asm volatile
 8001802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001806:	b672      	cpsid	i
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	b662      	cpsie	i
 8001816:	60fb      	str	r3, [r7, #12]
    }
 8001818:	bf00      	nop
 800181a:	e7fe      	b.n	800181a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00c      	beq.n	800183e <vPortFree+0x6a>
        __asm volatile
 8001824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001828:	b672      	cpsid	i
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	b662      	cpsie	i
 8001838:	60bb      	str	r3, [r7, #8]
    }
 800183a:	bf00      	nop
 800183c:	e7fe      	b.n	800183c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <vPortFree+0xc0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01e      	beq.n	800188a <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11a      	bne.n	800188a <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <vPortFree+0xc0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001864:	f7ff f9b6 	bl	8000bd4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <vPortFree+0xc4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4413      	add	r3, r2
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <vPortFree+0xc4>)
 8001874:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001876:	6938      	ldr	r0, [r7, #16]
 8001878:	f000 f874 	bl	8001964 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <vPortFree+0xc8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <vPortFree+0xc8>)
 8001884:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001886:	f7ff f9b3 	bl	8000bf0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	24005190 	.word	0x24005190
 8001898:	24005180 	.word	0x24005180
 800189c:	2400518c 	.word	0x2400518c

080018a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80018a6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80018aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <prvHeapInit+0xac>)
 80018ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3307      	adds	r3, #7
 80018be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f023 0307 	bic.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <prvHeapInit+0xac>)
 80018d0:	4413      	add	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <prvHeapInit+0xb0>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <prvHeapInit+0xb0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80018ec:	2208      	movs	r2, #8
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f023 0307 	bic.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <prvHeapInit+0xb4>)
 8001900:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <prvHeapInit+0xb4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <prvHeapInit+0xb4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	1ad2      	subs	r2, r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <prvHeapInit+0xb4>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <prvHeapInit+0xb8>)
 800192e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a09      	ldr	r2, [pc, #36]	; (800195c <prvHeapInit+0xbc>)
 8001936:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <prvHeapInit+0xc0>)
 800193a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	24000174 	.word	0x24000174
 8001950:	24005174 	.word	0x24005174
 8001954:	2400517c 	.word	0x2400517c
 8001958:	24005184 	.word	0x24005184
 800195c:	24005180 	.word	0x24005180
 8001960:	24005190 	.word	0x24005190

08001964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800196c:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <prvInsertBlockIntoFreeList+0xac>)
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e002      	b.n	8001978 <prvInsertBlockIntoFreeList+0x14>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d8f7      	bhi.n	8001972 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	d108      	bne.n	80019a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	441a      	add	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	441a      	add	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d118      	bne.n	80019ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <prvInsertBlockIntoFreeList+0xb0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d00d      	beq.n	80019e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	441a      	add	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e008      	b.n	80019f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <prvInsertBlockIntoFreeList+0xb0>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e003      	b.n	80019f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d002      	beq.n	8001a02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	24005174 	.word	0x24005174
 8001a14:	2400517c 	.word	0x2400517c

08001a18 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <_cbSendSystemDesc+0x14>)
 8001a1e:	f001 ff77 	bl	8003910 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <_cbSendSystemDesc+0x18>)
 8001a24:	f001 ff74 	bl	8003910 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	0800a1c4 	.word	0x0800a1c4
 8001a30:	0800a1f8 	.word	0x0800a1f8

08001a34 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SEGGER_SYSVIEW_Conf+0x20>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SEGGER_SYSVIEW_Conf+0x20>)
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SEGGER_SYSVIEW_Conf+0x24>)
 8001a42:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <SEGGER_SYSVIEW_Conf+0x28>)
 8001a44:	f001 fbe8 	bl	8003218 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001a48:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a4c:	f001 fc28 	bl	80032a0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	24000014 	.word	0x24000014
 8001a58:	08001a19 	.word	0x08001a19
 8001a5c:	0800a38c 	.word	0x0800a38c

08001a60 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	e033      	b.n	8001ad4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001a6c:	491e      	ldr	r1, [pc, #120]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	491a      	ldr	r1, [pc, #104]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	6819      	ldr	r1, [r3, #0]
 8001a8e:	4c16      	ldr	r4, [pc, #88]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4423      	add	r3, r4
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	681c      	ldr	r4, [r3, #0]
 8001aa0:	4d11      	ldr	r5, [pc, #68]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	442b      	add	r3, r5
 8001aae:	330c      	adds	r3, #12
 8001ab0:	681d      	ldr	r5, [r3, #0]
 8001ab2:	4e0d      	ldr	r6, [pc, #52]	; (8001ae8 <_cbSendTaskList+0x88>)
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4433      	add	r3, r6
 8001ac0:	3310      	adds	r3, #16
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f000 f8bd 	bl	8001c48 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <_cbSendTaskList+0x8c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3c6      	bcc.n	8001a6c <_cbSendTaskList+0xc>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae8:	24005194 	.word	0x24005194
 8001aec:	24005234 	.word	0x24005234

08001af0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001af8:	f7ff f90e 	bl	8000d18 <xTaskGetTickCountFromISR>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2200      	movs	r2, #0
 8001b00:	469a      	mov	sl, r3
 8001b02:	4693      	mov	fp, r2
 8001b04:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	f04f 0a00 	mov.w	sl, #0
 8001b14:	f04f 0b00 	mov.w	fp, #0
 8001b18:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001b1c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001b20:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001b24:	4652      	mov	r2, sl
 8001b26:	465b      	mov	r3, fp
 8001b28:	1a14      	subs	r4, r2, r0
 8001b2a:	eb63 0501 	sbc.w	r5, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	00ab      	lsls	r3, r5, #2
 8001b38:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001b3c:	00a2      	lsls	r2, r4, #2
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	eb14 0800 	adds.w	r8, r4, r0
 8001b46:	eb45 0901 	adc.w	r9, r5, r1
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001b66:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001b78 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001b86:	2205      	movs	r2, #5
 8001b88:	492b      	ldr	r1, [pc, #172]	; (8001c38 <SYSVIEW_AddTask+0xc0>)
 8001b8a:	68b8      	ldr	r0, [r7, #8]
 8001b8c:	f008 fae4 	bl	800a158 <memcmp>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d04b      	beq.n	8001c2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <SYSVIEW_AddTask+0xc4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b07      	cmp	r3, #7
 8001b9c:	d903      	bls.n	8001ba6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001b9e:	4828      	ldr	r0, [pc, #160]	; (8001c40 <SYSVIEW_AddTask+0xc8>)
 8001ba0:	f002 f93e 	bl	8003e20 <SEGGER_SYSVIEW_Warn>
    return;
 8001ba4:	e044      	b.n	8001c30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <SYSVIEW_AddTask+0xc4>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4926      	ldr	r1, [pc, #152]	; (8001c44 <SYSVIEW_AddTask+0xcc>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <SYSVIEW_AddTask+0xc4>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4921      	ldr	r1, [pc, #132]	; (8001c44 <SYSVIEW_AddTask+0xcc>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	3304      	adds	r3, #4
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <SYSVIEW_AddTask+0xc4>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	491b      	ldr	r1, [pc, #108]	; (8001c44 <SYSVIEW_AddTask+0xcc>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3308      	adds	r3, #8
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <SYSVIEW_AddTask+0xc4>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4916      	ldr	r1, [pc, #88]	; (8001c44 <SYSVIEW_AddTask+0xcc>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <SYSVIEW_AddTask+0xc4>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4910      	ldr	r1, [pc, #64]	; (8001c44 <SYSVIEW_AddTask+0xcc>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3310      	adds	r3, #16
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <SYSVIEW_AddTask+0xc4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <SYSVIEW_AddTask+0xc4>)
 8001c1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f80e 	bl	8001c48 <SYSVIEW_SendTaskInfo>
 8001c2c:	e000      	b.n	8001c30 <SYSVIEW_AddTask+0xb8>
    return;
 8001c2e:	bf00      	nop

}
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	0800a208 	.word	0x0800a208
 8001c3c:	24005234 	.word	0x24005234
 8001c40:	0800a210 	.word	0x0800a210
 8001c44:	24005194 	.word	0x24005194

08001c48 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	2214      	movs	r2, #20
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f008 fa98 	bl	800a194 <memset>
  TaskInfo.TaskID     = TaskID;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fd4f 	bl	8003720 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001d22:	f002 f8d9 	bl	8003ed8 <SEGGER_SYSVIEW_IsStarted>
 8001d26:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001d2e:	f001 fb7b 	bl	8003428 <SEGGER_SYSVIEW_Start>
  }
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <_cbOnUARTRx+0x3c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d806      	bhi.n	8001d5c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <_cbOnUARTRx+0x3c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <_cbOnUARTRx+0x3c>)
 8001d58:	701a      	strb	r2, [r3, #0]
    goto Done;
 8001d5a:	e009      	b.n	8001d70 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8001d5c:	f7ff ffde 	bl	8001d1c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <_cbOnUARTRx+0x3c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4618      	mov	r0, r3
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f000 fb9a 	bl	80024a4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8001d70:	bf00      	nop
}
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	24000008 	.word	0x24000008

08001d7c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <_cbOnUARTTx+0x5c>)
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d80f      	bhi.n	8001dac <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <_cbOnUARTTx+0x5c>)
 8001d8e:	785b      	ldrb	r3, [r3, #1]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <_cbOnUARTTx+0x60>)
 8001d94:	5c9a      	ldrb	r2, [r3, r2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <_cbOnUARTTx+0x5c>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <_cbOnUARTTx+0x5c>)
 8001da4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8001daa:	e00f      	b.n	8001dcc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <_cbOnUARTTx+0x5c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fa19 	bl	80021ec <SEGGER_RTT_ReadUpBufferNoLock>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da02      	bge.n	8001dca <_cbOnUARTTx+0x4e>
    r = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e000      	b.n	8001dcc <_cbOnUARTTx+0x50>
  }
Done:
 8001dca:	bf00      	nop
  return r;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	24000008 	.word	0x24000008
 8001ddc:	0800a394 	.word	0x0800a394

08001de0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <SEGGER_UART_init+0x1c>)
 8001dea:	4905      	ldr	r1, [pc, #20]	; (8001e00 <SEGGER_UART_init+0x20>)
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f863 	bl	8001eb8 <HIF_UART_Init>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08001d3d 	.word	0x08001d3d
 8001e00:	08001d7d 	.word	0x08001d7d

08001e04 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <USART2_IRQHandler+0x80>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d011      	beq.n	8001e3e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <USART2_IRQHandler+0x84>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 030b 	and.w	r3, r3, #11
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d108      	bne.n	8001e3e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <USART2_IRQHandler+0x88>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <USART2_IRQHandler+0x88>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01a      	beq.n	8001e7e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <USART2_IRQHandler+0x8c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d015      	beq.n	8001e7c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <USART2_IRQHandler+0x8c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1dfa      	adds	r2, r7, #7
 8001e56:	4610      	mov	r0, r2
 8001e58:	4798      	blx	r3
 8001e5a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <USART2_IRQHandler+0x90>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <USART2_IRQHandler+0x90>)
 8001e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e006      	b.n	8001e7e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <USART2_IRQHandler+0x80>)
 8001e72:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <USART2_IRQHandler+0x84>)
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e000      	b.n	8001e7e <USART2_IRQHandler+0x7a>
      return;
 8001e7c:	bf00      	nop
    }
  }
}
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40004400 	.word	0x40004400
 8001e88:	40004404 	.word	0x40004404
 8001e8c:	24005238 	.word	0x24005238
 8001e90:	2400523c 	.word	0x2400523c
 8001e94:	4000440c 	.word	0x4000440c

08001e98 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	4000440c 	.word	0x4000440c

08001eb8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <HIF_UART_Init+0xc8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <HIF_UART_Init+0xc8>)
 8001eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ece:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HIF_UART_Init+0xcc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HIF_UART_Init+0xcc>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HIF_UART_Init+0xd0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ee8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001ef0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8001ef2:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <HIF_UART_Init+0xd0>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HIF_UART_Init+0xd4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f04:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001f0c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HIF_UART_Init+0xd4>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HIF_UART_Init+0xd8>)
 8001f16:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8001f1a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HIF_UART_Init+0xdc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HIF_UART_Init+0xe0>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HIF_UART_Init+0xe4>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f46:	d302      	bcc.n	8001f4e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8001f48:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001f4c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HIF_UART_Init+0xe8>)
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8001f5e:	4a11      	ldr	r2, [pc, #68]	; (8001fa4 <HIF_UART_Init+0xec>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8001f64:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HIF_UART_Init+0xf0>)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8001f6a:	2106      	movs	r1, #6
 8001f6c:	2026      	movs	r0, #38	; 0x26
 8001f6e:	f7ff feab 	bl	8001cc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8001f72:	2026      	movs	r0, #38	; 0x26
 8001f74:	f7ff fe8a 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	580244e8 	.word	0x580244e8
 8001f84:	580244d8 	.word	0x580244d8
 8001f88:	58020020 	.word	0x58020020
 8001f8c:	58020000 	.word	0x58020000
 8001f90:	4000440c 	.word	0x4000440c
 8001f94:	40004410 	.word	0x40004410
 8001f98:	40004414 	.word	0x40004414
 8001f9c:	007a1200 	.word	0x007a1200
 8001fa0:	40004408 	.word	0x40004408
 8001fa4:	24005238 	.word	0x24005238
 8001fa8:	2400523c 	.word	0x2400523c

08001fac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <_DoInit+0x98>)
 8001fb4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a20      	ldr	r2, [pc, #128]	; (8002048 <_DoInit+0x9c>)
 8001fc6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a20      	ldr	r2, [pc, #128]	; (800204c <_DoInit+0xa0>)
 8001fcc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <_DoInit+0x9c>)
 8001fec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a17      	ldr	r2, [pc, #92]	; (8002050 <_DoInit+0xa4>)
 8001ff2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3307      	adds	r3, #7
 8002010:	4a10      	ldr	r2, [pc, #64]	; (8002054 <_DoInit+0xa8>)
 8002012:	6810      	ldr	r0, [r2, #0]
 8002014:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002016:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <_DoInit+0xac>)
 800201e:	6810      	ldr	r0, [r2, #0]
 8002020:	6018      	str	r0, [r3, #0]
 8002022:	8891      	ldrh	r1, [r2, #4]
 8002024:	7992      	ldrb	r2, [r2, #6]
 8002026:	8099      	strh	r1, [r3, #4]
 8002028:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800202a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2220      	movs	r2, #32
 8002032:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002034:	f3bf 8f5f 	dmb	sy
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	24005240 	.word	0x24005240
 8002048:	0800a260 	.word	0x0800a260
 800204c:	240052e8 	.word	0x240052e8
 8002050:	240056e8 	.word	0x240056e8
 8002054:	0800a26c 	.word	0x0800a26c
 8002058:	0800a270 	.word	0x0800a270

0800205c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	429a      	cmp	r2, r3
 800207e:	d905      	bls.n	800208c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	e007      	b.n	800209c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	1acb      	subs	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3b01      	subs	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a6:	4293      	cmp	r3, r2
 80020a8:	bf28      	it	cs
 80020aa:	4613      	movcs	r3, r2
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80020ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4293      	cmp	r3, r2
 80020b4:	bf28      	it	cs
 80020b6:	4613      	movcs	r3, r2
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4413      	add	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	6978      	ldr	r0, [r7, #20]
 80020ca:	f008 f855 	bl	800a178 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80020ce:	6a3a      	ldr	r2, [r7, #32]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	4413      	add	r3, r2
 80020d4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	4413      	add	r3, r2
 80020dc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	4413      	add	r3, r2
 80020ec:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d101      	bne.n	80020fc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80020fc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1b2      	bne.n	8002072 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800210c:	6a3b      	ldr	r3, [r7, #32]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002116:	b580      	push	{r7, lr}
 8002118:	b088      	sub	sp, #32
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d911      	bls.n	800215e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	6938      	ldr	r0, [r7, #16]
 800214a:	f008 f815 	bl	800a178 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800214e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	441a      	add	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800215c:	e01f      	b.n	800219e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	6938      	ldr	r0, [r7, #16]
 8002172:	f008 f801 	bl	800a178 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4413      	add	r3, r2
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4619      	mov	r1, r3
 800218e:	6938      	ldr	r0, [r7, #16]
 8002190:	f007 fff2 	bl	800a178 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002194:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	60da      	str	r2, [r3, #12]
}
 800219e:	bf00      	nop
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80021a6:	b480      	push	{r7}
 80021a8:	b087      	sub	sp, #28
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d808      	bhi.n	80021d4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad2      	subs	r2, r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	3b01      	subs	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e004      	b.n	80021de <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80021de:	697b      	ldr	r3, [r7, #20]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80021f8:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80021fa:	623b      	str	r3, [r7, #32]
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8002206:	f7ff fed1 	bl	8001fac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4a37      	ldr	r2, [pc, #220]	; (80022f4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002218:	4413      	add	r3, r2
 800221a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	429a      	cmp	r2, r3
 8002236:	d92b      	bls.n	8002290 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4293      	cmp	r3, r2
 8002248:	bf28      	it	cs
 800224a:	4613      	movcs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	4413      	add	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	6939      	ldr	r1, [r7, #16]
 800225c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800225e:	f007 ff8b 	bl	800a178 <memcpy>
    NumBytesRead += NumBytesRem;
 8002262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4413      	add	r3, r2
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4413      	add	r3, r2
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800227a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4413      	add	r3, r2
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002288:	429a      	cmp	r2, r3
 800228a:	d101      	bne.n	8002290 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4293      	cmp	r3, r2
 800229e:	bf28      	it	cs
 80022a0:	4613      	movcs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d019      	beq.n	80022de <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	4413      	add	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	6939      	ldr	r1, [r7, #16]
 80022b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022ba:	f007 ff5d 	bl	800a178 <memcpy>
    NumBytesRead += NumBytesRem;
 80022be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4413      	add	r3, r2
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	4413      	add	r3, r2
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80022d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4413      	add	r3, r2
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3730      	adds	r7, #48	; 0x30
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	24005240 	.word	0x24005240

080022f8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	; 0x30
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <SEGGER_RTT_ReadNoLock+0x108>)
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <SEGGER_RTT_ReadNoLock+0x1e>
 8002312:	f7ff fe4b 	bl	8001fac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	3360      	adds	r3, #96	; 0x60
 8002322:	4a37      	ldr	r2, [pc, #220]	; (8002400 <SEGGER_RTT_ReadNoLock+0x108>)
 8002324:	4413      	add	r3, r2
 8002326:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800233c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	429a      	cmp	r2, r3
 8002342:	d92b      	bls.n	800239c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4293      	cmp	r3, r2
 8002354:	bf28      	it	cs
 8002356:	4613      	movcs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	4413      	add	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	6939      	ldr	r1, [r7, #16]
 8002368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800236a:	f007 ff05 	bl	800a178 <memcpy>
    NumBytesRead += NumBytesRem;
 800236e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	4413      	add	r3, r2
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4413      	add	r3, r2
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	4413      	add	r3, r2
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002394:	429a      	cmp	r2, r3
 8002396:	d101      	bne.n	800239c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002398:	2300      	movs	r3, #0
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bf28      	it	cs
 80023ac:	4613      	movcs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d019      	beq.n	80023ea <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	4413      	add	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023c6:	f007 fed7 	bl	800a178 <memcpy>
    NumBytesRead += NumBytesRem;
 80023ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4413      	add	r3, r2
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80023d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	4413      	add	r3, r2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	4413      	add	r3, r2
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3730      	adds	r7, #48	; 0x30
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	24005240 	.word	0x24005240

08002404 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	3360      	adds	r3, #96	; 0x60
 8002420:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002422:	4413      	add	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d029      	beq.n	8002482 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800242e:	2b02      	cmp	r3, #2
 8002430:	d82e      	bhi.n	8002490 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002436:	2b01      	cmp	r3, #1
 8002438:	d013      	beq.n	8002462 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800243a:	e029      	b.n	8002490 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800243c:	6978      	ldr	r0, [r7, #20]
 800243e:	f7ff feb2 	bl	80021a6 <_GetAvailWriteSpace>
 8002442:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d202      	bcs.n	8002452 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002450:	e021      	b.n	8002496 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff fe5b 	bl	8002116 <_WriteNoCheck>
    break;
 8002460:	e019      	b.n	8002496 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff fe9f 	bl	80021a6 <_GetAvailWriteSpace>
 8002468:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4293      	cmp	r3, r2
 8002470:	bf28      	it	cs
 8002472:	4613      	movcs	r3, r2
 8002474:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff fe4b 	bl	8002116 <_WriteNoCheck>
    break;
 8002480:	e009      	b.n	8002496 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	69b9      	ldr	r1, [r7, #24]
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	f7ff fde8 	bl	800205c <_WriteBlocking>
 800248c:	61f8      	str	r0, [r7, #28]
    break;
 800248e:	e002      	b.n	8002496 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
    break;
 8002494:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002496:	69fb      	ldr	r3, [r7, #28]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	24005240 	.word	0x24005240

080024a4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <SEGGER_RTT_WriteDownBuffer+0x48>)
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80024be:	f7ff fd75 	bl	8001fac <_DoInit>
  SEGGER_RTT_LOCK();
 80024c2:	f3ef 8311 	mrs	r3, BASEPRI
 80024c6:	f04f 0120 	mov.w	r1, #32
 80024ca:	f381 8811 	msr	BASEPRI, r1
 80024ce:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff ff95 	bl	8002404 <SEGGER_RTT_WriteDownBufferNoLock>
 80024da:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80024e2:	697b      	ldr	r3, [r7, #20]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3720      	adds	r7, #32
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	24005240 	.word	0x24005240

080024f0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <SEGGER_RTT_AllocUpBuffer+0x20>
 800250c:	f7ff fd4e 	bl	8001fac <_DoInit>
  SEGGER_RTT_LOCK();
 8002510:	f3ef 8311 	mrs	r3, BASEPRI
 8002514:	f04f 0120 	mov.w	r1, #32
 8002518:	f381 8811 	msr	BASEPRI, r1
 800251c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800251e:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002520:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002526:	6939      	ldr	r1, [r7, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	3304      	adds	r3, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3301      	adds	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	429a      	cmp	r2, r3
 800254c:	dbeb      	blt.n	8002526 <SEGGER_RTT_AllocUpBuffer+0x36>
 800254e:	e000      	b.n	8002552 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002550:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	da3f      	bge.n	80025dc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800255c:	6939      	ldr	r1, [r7, #16]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002570:	6939      	ldr	r1, [r7, #16]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	3304      	adds	r3, #4
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	3320      	adds	r3, #32
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800259a:	6939      	ldr	r1, [r7, #16]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	3328      	adds	r3, #40	; 0x28
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80025ae:	6939      	ldr	r1, [r7, #16]
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	3324      	adds	r3, #36	; 0x24
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80025c2:	6939      	ldr	r1, [r7, #16]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	332c      	adds	r3, #44	; 0x2c
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80025d6:	f3bf 8f5f 	dmb	sy
 80025da:	e002      	b.n	80025e2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80025e8:	69fb      	ldr	r3, [r7, #28]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24005240 	.word	0x24005240

080025f8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002614:	f7ff fcca 	bl	8001fac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002618:	4b1c      	ldr	r3, [pc, #112]	; (800268c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800261a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d82c      	bhi.n	800267c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002622:	f3ef 8311 	mrs	r3, BASEPRI
 8002626:	f04f 0120 	mov.w	r1, #32
 800262a:	f381 8811 	msr	BASEPRI, r1
 800262e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	3360      	adds	r3, #96	; 0x60
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800266c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e002      	b.n	8002682 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002684:	4618      	mov	r0, r3
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	24005240 	.word	0x24005240

08002690 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00f      	beq.n	80026c6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80026a6:	e002      	b.n	80026ae <_EncodeStr+0x1e>
      Len++;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	3301      	adds	r3, #1
 80026ac:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f6      	bne.n	80026a8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d901      	bls.n	80026c6 <_EncodeStr+0x36>
      Len = Limit;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2bfe      	cmp	r3, #254	; 0xfe
 80026ca:	d806      	bhi.n	80026da <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	60fa      	str	r2, [r7, #12]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	e011      	b.n	80026fe <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60fa      	str	r2, [r7, #12]
 80026e0:	22ff      	movs	r2, #255	; 0xff
 80026e2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	60fa      	str	r2, [r7, #12]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	0a19      	lsrs	r1, r3, #8
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	60fa      	str	r2, [r7, #12]
 80026fa:	b2ca      	uxtb	r2, r1
 80026fc:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002702:	e00a      	b.n	800271a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	1c53      	adds	r3, r2, #1
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1c59      	adds	r1, r3, #1
 800270e:	60f9      	str	r1, [r7, #12]
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	701a      	strb	r2, [r3, #0]
    n++;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3301      	adds	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	429a      	cmp	r2, r3
 8002720:	d3f0      	bcc.n	8002704 <_EncodeStr+0x74>
  }
  return pPayload;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <_HandleIncomingPacket+0xe0>)
 8002750:	7e1b      	ldrb	r3, [r3, #24]
 8002752:	4618      	mov	r0, r3
 8002754:	1cfb      	adds	r3, r7, #3
 8002756:	2201      	movs	r2, #1
 8002758:	4619      	mov	r1, r3
 800275a:	f7ff fdcd 	bl	80022f8 <SEGGER_RTT_ReadNoLock>
 800275e:	4603      	mov	r3, r0
 8002760:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	dd54      	ble.n	8002812 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	2b80      	cmp	r3, #128	; 0x80
 800276c:	d032      	beq.n	80027d4 <_HandleIncomingPacket+0x8c>
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	dc42      	bgt.n	80027f8 <_HandleIncomingPacket+0xb0>
 8002772:	2b07      	cmp	r3, #7
 8002774:	dc16      	bgt.n	80027a4 <_HandleIncomingPacket+0x5c>
 8002776:	2b00      	cmp	r3, #0
 8002778:	dd3e      	ble.n	80027f8 <_HandleIncomingPacket+0xb0>
 800277a:	3b01      	subs	r3, #1
 800277c:	2b06      	cmp	r3, #6
 800277e:	d83b      	bhi.n	80027f8 <_HandleIncomingPacket+0xb0>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <_HandleIncomingPacket+0x40>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	080027ab 	.word	0x080027ab
 800278c:	080027b1 	.word	0x080027b1
 8002790:	080027b7 	.word	0x080027b7
 8002794:	080027bd 	.word	0x080027bd
 8002798:	080027c3 	.word	0x080027c3
 800279c:	080027c9 	.word	0x080027c9
 80027a0:	080027cf 	.word	0x080027cf
 80027a4:	2b7f      	cmp	r3, #127	; 0x7f
 80027a6:	d036      	beq.n	8002816 <_HandleIncomingPacket+0xce>
 80027a8:	e026      	b.n	80027f8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80027aa:	f000 fe3d 	bl	8003428 <SEGGER_SYSVIEW_Start>
      break;
 80027ae:	e037      	b.n	8002820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80027b0:	f000 fef6 	bl	80035a0 <SEGGER_SYSVIEW_Stop>
      break;
 80027b4:	e034      	b.n	8002820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80027b6:	f001 f8cf 	bl	8003958 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80027ba:	e031      	b.n	8002820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80027bc:	f001 f894 	bl	80038e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80027c0:	e02e      	b.n	8002820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80027c2:	f000 ff13 	bl	80035ec <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80027c6:	e02b      	b.n	8002820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80027c8:	f001 fad8 	bl	8003d7c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80027cc:	e028      	b.n	8002820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80027ce:	f001 fab7 	bl	8003d40 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80027d2:	e025      	b.n	8002820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <_HandleIncomingPacket+0xe0>)
 80027d6:	7e1b      	ldrb	r3, [r3, #24]
 80027d8:	4618      	mov	r0, r3
 80027da:	1cfb      	adds	r3, r7, #3
 80027dc:	2201      	movs	r2, #1
 80027de:	4619      	mov	r1, r3
 80027e0:	f7ff fd8a 	bl	80022f8 <SEGGER_RTT_ReadNoLock>
 80027e4:	4603      	mov	r3, r0
 80027e6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	dd15      	ble.n	800281a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 fa25 	bl	8003c40 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80027f6:	e010      	b.n	800281a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	b25b      	sxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da0e      	bge.n	800281e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <_HandleIncomingPacket+0xe0>)
 8002802:	7e1b      	ldrb	r3, [r3, #24]
 8002804:	4618      	mov	r0, r3
 8002806:	1cfb      	adds	r3, r7, #3
 8002808:	2201      	movs	r2, #1
 800280a:	4619      	mov	r1, r3
 800280c:	f7ff fd74 	bl	80022f8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002810:	e005      	b.n	800281e <_HandleIncomingPacket+0xd6>
    }
  }
 8002812:	bf00      	nop
 8002814:	e004      	b.n	8002820 <_HandleIncomingPacket+0xd8>
      break;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <_HandleIncomingPacket+0xd8>
      break;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <_HandleIncomingPacket+0xd8>
      break;
 800281e:	bf00      	nop
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	24005b00 	.word	0x24005b00

0800282c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002832:	2301      	movs	r3, #1
 8002834:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	3301      	adds	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002840:	4b32      	ldr	r3, [pc, #200]	; (800290c <_TrySendOverflowPacket+0xe0>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	e00b      	b.n	8002860 <_TrySendOverflowPacket+0x34>
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	b2da      	uxtb	r2, r3
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	1c59      	adds	r1, r3, #1
 8002850:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	09db      	lsrs	r3, r3, #7
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	2b7f      	cmp	r3, #127	; 0x7f
 8002864:	d8f0      	bhi.n	8002848 <_TrySendOverflowPacket+0x1c>
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800286c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <_TrySendOverflowPacket+0xe4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <_TrySendOverflowPacket+0xe0>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	e00b      	b.n	80028a8 <_TrySendOverflowPacket+0x7c>
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	1c59      	adds	r1, r3, #1
 8002898:	6279      	str	r1, [r7, #36]	; 0x24
 800289a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	09db      	lsrs	r3, r3, #7
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	2b7f      	cmp	r3, #127	; 0x7f
 80028ac:	d8f0      	bhi.n	8002890 <_TrySendOverflowPacket+0x64>
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	627a      	str	r2, [r7, #36]	; 0x24
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <_TrySendOverflowPacket+0xe0>)
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	4618      	mov	r0, r3
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7fd fd06 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80028d4:	4603      	mov	r3, r0
 80028d6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80028d8:	f7ff fade 	bl	8001e98 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <_TrySendOverflowPacket+0xe0>)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <_TrySendOverflowPacket+0xe0>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <_TrySendOverflowPacket+0xe0>)
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e004      	b.n	8002900 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <_TrySendOverflowPacket+0xe0>)
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	4a03      	ldr	r2, [pc, #12]	; (800290c <_TrySendOverflowPacket+0xe0>)
 80028fe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002900:	693b      	ldr	r3, [r7, #16]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3730      	adds	r7, #48	; 0x30
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	24005b00 	.word	0x24005b00
 8002910:	e0001004 	.word	0xe0001004

08002914 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002920:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <_SendPacket+0x1c4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d010      	beq.n	800294a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002928:	4b6b      	ldr	r3, [pc, #428]	; (8002ad8 <_SendPacket+0x1c4>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80a5 	beq.w	8002a7c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002932:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <_SendPacket+0x1c4>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d109      	bne.n	800294e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800293a:	f7ff ff77 	bl	800282c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800293e:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <_SendPacket+0x1c4>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	f040 809c 	bne.w	8002a80 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8002948:	e001      	b.n	800294e <_SendPacket+0x3a>
    goto Send;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <_SendPacket+0x3c>
Send:
 800294e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b1f      	cmp	r3, #31
 8002954:	d809      	bhi.n	800296a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002956:	4b60      	ldr	r3, [pc, #384]	; (8002ad8 <_SendPacket+0x1c4>)
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 808d 	bne.w	8002a84 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b17      	cmp	r3, #23
 800296e:	d807      	bhi.n	8002980 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3b01      	subs	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e03d      	b.n	80029fc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b7f      	cmp	r3, #127	; 0x7f
 800298c:	d912      	bls.n	80029b4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	09da      	lsrs	r2, r3, #7
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	3a01      	subs	r2, #1
 80029a6:	60fa      	str	r2, [r7, #12]
 80029a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e006      	b.n	80029c2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b7f      	cmp	r3, #127	; 0x7f
 80029c6:	d912      	bls.n	80029ee <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	09da      	lsrs	r2, r3, #7
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	3a01      	subs	r2, #1
 80029e0:	60fa      	str	r2, [r7, #12]
 80029e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	e006      	b.n	80029fc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80029fc:	4b37      	ldr	r3, [pc, #220]	; (8002adc <_SendPacket+0x1c8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <_SendPacket+0x1c4>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	623b      	str	r3, [r7, #32]
 8002a14:	e00b      	b.n	8002a2e <_SendPacket+0x11a>
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1c59      	adds	r1, r3, #1
 8002a1e:	6279      	str	r1, [r7, #36]	; 0x24
 8002a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	09db      	lsrs	r3, r3, #7
 8002a2c:	623b      	str	r3, [r7, #32]
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	2b7f      	cmp	r3, #127	; 0x7f
 8002a32:	d8f0      	bhi.n	8002a16 <_SendPacket+0x102>
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	627a      	str	r2, [r7, #36]	; 0x24
 8002a3a:	6a3a      	ldr	r2, [r7, #32]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <_SendPacket+0x1c4>)
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	f7fd fc44 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002a5c:	f7ff fa1c 	bl	8001e98 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002a66:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <_SendPacket+0x1c4>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	60d3      	str	r3, [r2, #12]
 8002a6c:	e00b      	b.n	8002a86 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <_SendPacket+0x1c4>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <_SendPacket+0x1c4>)
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e004      	b.n	8002a86 <_SendPacket+0x172>
    goto SendDone;
 8002a7c:	bf00      	nop
 8002a7e:	e002      	b.n	8002a86 <_SendPacket+0x172>
      goto SendDone;
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <_SendPacket+0x172>
      goto SendDone;
 8002a84:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <_SendPacket+0x1c4>)
 8002a88:	7e1b      	ldrb	r3, [r3, #24]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <_SendPacket+0x1cc>)
 8002a8e:	460b      	mov	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	440b      	add	r3, r1
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	336c      	adds	r3, #108	; 0x6c
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <_SendPacket+0x1c4>)
 8002a9e:	7e1b      	ldrb	r3, [r3, #24]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	490f      	ldr	r1, [pc, #60]	; (8002ae0 <_SendPacket+0x1cc>)
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4403      	add	r3, r0
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	3370      	adds	r3, #112	; 0x70
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d00b      	beq.n	8002ace <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <_SendPacket+0x1c4>)
 8002ab8:	789b      	ldrb	r3, [r3, #2]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <_SendPacket+0x1c4>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002ac4:	f7ff fe40 	bl	8002748 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <_SendPacket+0x1c4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002ace:	bf00      	nop
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	24005b00 	.word	0x24005b00
 8002adc:	e0001004 	.word	0xe0001004
 8002ae0:	24005240 	.word	0x24005240

08002ae4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d80a      	bhi.n	8002b14 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6051      	str	r1, [r2, #4]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d15a      	bne.n	8002bd2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	e00b      	b.n	8002b56 <_StoreChar+0x72>
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1c59      	adds	r1, r3, #1
 8002b46:	6279      	str	r1, [r7, #36]	; 0x24
 8002b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	09db      	lsrs	r3, r3, #7
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2b7f      	cmp	r3, #127	; 0x7f
 8002b5a:	d8f0      	bhi.n	8002b3e <_StoreChar+0x5a>
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	627a      	str	r2, [r7, #36]	; 0x24
 8002b62:	6a3a      	ldr	r2, [r7, #32]
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e00b      	b.n	8002b8e <_StoreChar+0xaa>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	1c59      	adds	r1, r3, #1
 8002b7e:	61f9      	str	r1, [r7, #28]
 8002b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	09db      	lsrs	r3, r3, #7
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b7f      	cmp	r3, #127	; 0x7f
 8002b92:	d8f0      	bhi.n	8002b76 <_StoreChar+0x92>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	61fa      	str	r2, [r7, #28]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	221a      	movs	r2, #26
 8002baa:	6939      	ldr	r1, [r7, #16]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff feb1 	bl	8002914 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fdba 	bl	8002730 <_PreparePacket>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3728      	adds	r7, #40	; 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002bf6:	e007      	b.n	8002c08 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002bf8:	6a3a      	ldr	r2, [r7, #32]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	623b      	str	r3, [r7, #32]
    Width++;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3301      	adds	r3, #1
 8002c06:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d2f3      	bcs.n	8002bf8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d901      	bls.n	8002c1c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11f      	bne.n	8002c66 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01c      	beq.n	8002c66 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <_PrintUnsigned+0x66>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <_PrintUnsigned+0x66>
        c = '0';
 8002c3c:	2330      	movs	r3, #48	; 0x30
 8002c3e:	76fb      	strb	r3, [r7, #27]
 8002c40:	e001      	b.n	8002c46 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8002c42:	2320      	movs	r3, #32
 8002c44:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c46:	e007      	b.n	8002c58 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8002c4e:	7efb      	ldrb	r3, [r7, #27]
 8002c50:	4619      	mov	r1, r3
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff ff46 	bl	8002ae4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <_PrintUnsigned+0x8a>
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d3f0      	bcc.n	8002c48 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d903      	bls.n	8002c74 <_PrintUnsigned+0x98>
      NumDigits--;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	e009      	b.n	8002c88 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d200      	bcs.n	8002c88 <_PrintUnsigned+0xac>
        break;
 8002c86:	e005      	b.n	8002c94 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002c92:	e7e8      	b.n	8002c66 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <_PrintUnsigned+0x128>)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff ff14 	bl	8002ae4 <_StoreChar>
    Digit /= Base;
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e3      	bne.n	8002c94 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d011      	beq.n	8002cfa <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002cdc:	e006      	b.n	8002cec <_PrintUnsigned+0x110>
        FieldWidth--;
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8002ce4:	2120      	movs	r1, #32
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f7ff fefc 	bl	8002ae4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <_PrintUnsigned+0x11e>
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d3f1      	bcc.n	8002cde <_PrintUnsigned+0x102>
      }
    }
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	0800a3a4 	.word	0x0800a3a4

08002d08 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bfb8      	it	lt
 8002d1c:	425b      	neglt	r3, r3
 8002d1e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002d24:	e007      	b.n	8002d36 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d2e:	613b      	str	r3, [r7, #16]
    Width++;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3301      	adds	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	daf3      	bge.n	8002d26 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d901      	bls.n	8002d4a <_PrintInt+0x42>
    Width = NumDigits;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <_PrintInt+0x5e>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db04      	blt.n	8002d60 <_PrintInt+0x58>
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <_PrintInt+0x5e>
    FieldWidth--;
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <_PrintInt+0x6e>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <_PrintInt+0x9c>
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d111      	bne.n	8002da4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00e      	beq.n	8002da4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d86:	e006      	b.n	8002d96 <_PrintInt+0x8e>
        FieldWidth--;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8002d8e:	2120      	movs	r1, #32
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff fea7 	bl	8002ae4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <_PrintInt+0x9c>
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d3f1      	bcc.n	8002d88 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	da07      	bge.n	8002dba <_PrintInt+0xb2>
    v = -v;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	425b      	negs	r3, r3
 8002dae:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8002db0:	212d      	movs	r1, #45	; 0x2d
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7ff fe96 	bl	8002ae4 <_StoreChar>
 8002db8:	e008      	b.n	8002dcc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8002dc4:	212b      	movs	r1, #43	; 0x2b
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff fe8c 	bl	8002ae4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d019      	beq.n	8002e0a <_PrintInt+0x102>
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d114      	bne.n	8002e0a <_PrintInt+0x102>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d111      	bne.n	8002e0a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00e      	beq.n	8002e0a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002dec:	e006      	b.n	8002dfc <_PrintInt+0xf4>
        FieldWidth--;
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8002df4:	2130      	movs	r1, #48	; 0x30
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff fe74 	bl	8002ae4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <_PrintInt+0x102>
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3f1      	bcc.n	8002dee <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff fedf 	bl	8002bdc <_PrintUnsigned>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b098      	sub	sp, #96	; 0x60
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002e34:	f3ef 8311 	mrs	r3, BASEPRI
 8002e38:	f04f 0120 	mov.w	r1, #32
 8002e3c:	f381 8811 	msr	BASEPRI, r1
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
 8002e42:	48b7      	ldr	r0, [pc, #732]	; (8003120 <_VPrintTarget+0x2f8>)
 8002e44:	f7ff fc74 	bl	8002730 <_PreparePacket>
 8002e48:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8002e4a:	4bb5      	ldr	r3, [pc, #724]	; (8003120 <_VPrintTarget+0x2f8>)
 8002e4c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8002e6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8183 	beq.w	800317e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8002e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e7c:	2b25      	cmp	r3, #37	; 0x25
 8002e7e:	f040 8170 	bne.w	8003162 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002e82:	2300      	movs	r3, #0
 8002e84:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8002e92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e96:	3b23      	subs	r3, #35	; 0x23
 8002e98:	2b0d      	cmp	r3, #13
 8002e9a:	d83f      	bhi.n	8002f1c <_VPrintTarget+0xf4>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <_VPrintTarget+0x7c>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002f0d 	.word	0x08002f0d
 8002ea8:	08002f1d 	.word	0x08002f1d
 8002eac:	08002f1d 	.word	0x08002f1d
 8002eb0:	08002f1d 	.word	0x08002f1d
 8002eb4:	08002f1d 	.word	0x08002f1d
 8002eb8:	08002f1d 	.word	0x08002f1d
 8002ebc:	08002f1d 	.word	0x08002f1d
 8002ec0:	08002f1d 	.word	0x08002f1d
 8002ec4:	08002efd 	.word	0x08002efd
 8002ec8:	08002f1d 	.word	0x08002f1d
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002f1d 	.word	0x08002f1d
 8002ed4:	08002f1d 	.word	0x08002f1d
 8002ed8:	08002eed 	.word	0x08002eed
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e01a      	b.n	8002f22 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e012      	b.n	8002f22 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3301      	adds	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e00a      	b.n	8002f22 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0e:	f043 0308 	orr.w	r3, r3, #8
 8002f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e002      	b.n	8002f22 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f20:	bf00      	nop
        }
      } while (v);
 8002f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1b0      	bne.n	8002e8a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8002f34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f38:	2b2f      	cmp	r3, #47	; 0x2f
 8002f3a:	d912      	bls.n	8002f62 <_VPrintTarget+0x13a>
 8002f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f40:	2b39      	cmp	r3, #57	; 0x39
 8002f42:	d80e      	bhi.n	8002f62 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8002f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	461a      	mov	r2, r3
 8002f56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b30      	subs	r3, #48	; 0x30
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8002f60:	e7e4      	b.n	8002f2c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8002f62:	2300      	movs	r3, #0
 8002f64:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8002f6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f72:	2b2e      	cmp	r3, #46	; 0x2e
 8002f74:	d11d      	bne.n	8002fb2 <_VPrintTarget+0x18a>
        sFormat++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8002f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f88:	2b2f      	cmp	r3, #47	; 0x2f
 8002f8a:	d912      	bls.n	8002fb2 <_VPrintTarget+0x18a>
 8002f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f90:	2b39      	cmp	r3, #57	; 0x39
 8002f92:	d80e      	bhi.n	8002fb2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8002f9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002faa:	4413      	add	r3, r2
 8002fac:	3b30      	subs	r3, #48	; 0x30
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8002fb0:	e7e4      	b.n	8002f7c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8002fba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fbe:	2b6c      	cmp	r3, #108	; 0x6c
 8002fc0:	d003      	beq.n	8002fca <_VPrintTarget+0x1a2>
 8002fc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fc6:	2b68      	cmp	r3, #104	; 0x68
 8002fc8:	d107      	bne.n	8002fda <_VPrintTarget+0x1b2>
          c = *sFormat;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8002fd8:	e7ef      	b.n	8002fba <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8002fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fde:	2b25      	cmp	r3, #37	; 0x25
 8002fe0:	f000 80b3 	beq.w	800314a <_VPrintTarget+0x322>
 8002fe4:	2b25      	cmp	r3, #37	; 0x25
 8002fe6:	f2c0 80b7 	blt.w	8003158 <_VPrintTarget+0x330>
 8002fea:	2b78      	cmp	r3, #120	; 0x78
 8002fec:	f300 80b4 	bgt.w	8003158 <_VPrintTarget+0x330>
 8002ff0:	2b58      	cmp	r3, #88	; 0x58
 8002ff2:	f2c0 80b1 	blt.w	8003158 <_VPrintTarget+0x330>
 8002ff6:	3b58      	subs	r3, #88	; 0x58
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	f200 80ad 	bhi.w	8003158 <_VPrintTarget+0x330>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <_VPrintTarget+0x1dc>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	080030fb 	.word	0x080030fb
 8003008:	08003159 	.word	0x08003159
 800300c:	08003159 	.word	0x08003159
 8003010:	08003159 	.word	0x08003159
 8003014:	08003159 	.word	0x08003159
 8003018:	08003159 	.word	0x08003159
 800301c:	08003159 	.word	0x08003159
 8003020:	08003159 	.word	0x08003159
 8003024:	08003159 	.word	0x08003159
 8003028:	08003159 	.word	0x08003159
 800302c:	08003159 	.word	0x08003159
 8003030:	08003089 	.word	0x08003089
 8003034:	080030af 	.word	0x080030af
 8003038:	08003159 	.word	0x08003159
 800303c:	08003159 	.word	0x08003159
 8003040:	08003159 	.word	0x08003159
 8003044:	08003159 	.word	0x08003159
 8003048:	08003159 	.word	0x08003159
 800304c:	08003159 	.word	0x08003159
 8003050:	08003159 	.word	0x08003159
 8003054:	08003159 	.word	0x08003159
 8003058:	08003159 	.word	0x08003159
 800305c:	08003159 	.word	0x08003159
 8003060:	08003159 	.word	0x08003159
 8003064:	08003125 	.word	0x08003125
 8003068:	08003159 	.word	0x08003159
 800306c:	08003159 	.word	0x08003159
 8003070:	08003159 	.word	0x08003159
 8003074:	08003159 	.word	0x08003159
 8003078:	080030d5 	.word	0x080030d5
 800307c:	08003159 	.word	0x08003159
 8003080:	08003159 	.word	0x08003159
 8003084:	080030fb 	.word	0x080030fb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1d19      	adds	r1, r3, #4
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6011      	str	r1, [r2, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8003096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800309c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fd1c 	bl	8002ae4 <_StoreChar>
        break;
 80030ac:	e055      	b.n	800315a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	1d19      	adds	r1, r3, #4
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6011      	str	r1, [r2, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80030bc:	f107 0014 	add.w	r0, r7, #20
 80030c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ca:	220a      	movs	r2, #10
 80030cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80030ce:	f7ff fe1b 	bl	8002d08 <_PrintInt>
        break;
 80030d2:	e042      	b.n	800315a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	1d19      	adds	r1, r3, #4
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80030e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80030e4:	f107 0014 	add.w	r0, r7, #20
 80030e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f2:	220a      	movs	r2, #10
 80030f4:	f7ff fd72 	bl	8002bdc <_PrintUnsigned>
        break;
 80030f8:	e02f      	b.n	800315a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1d19      	adds	r1, r3, #4
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6011      	str	r1, [r2, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003108:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800310a:	f107 0014 	add.w	r0, r7, #20
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003118:	2210      	movs	r2, #16
 800311a:	f7ff fd5f 	bl	8002bdc <_PrintUnsigned>
        break;
 800311e:	e01c      	b.n	800315a <_VPrintTarget+0x332>
 8003120:	24005b30 	.word	0x24005b30
      case 'p':
        v = va_arg(*pParamList, int);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1d19      	adds	r1, r3, #4
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6011      	str	r1, [r2, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8003132:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003134:	f107 0014 	add.w	r0, r7, #20
 8003138:	2300      	movs	r3, #0
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	2308      	movs	r3, #8
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2308      	movs	r3, #8
 8003142:	2210      	movs	r2, #16
 8003144:	f7ff fd4a 	bl	8002bdc <_PrintUnsigned>
        break;
 8003148:	e007      	b.n	800315a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	2125      	movs	r1, #37	; 0x25
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fcc7 	bl	8002ae4 <_StoreChar>
        break;
 8003156:	e000      	b.n	800315a <_VPrintTarget+0x332>
      default:
        break;
 8003158:	bf00      	nop
      }
      sFormat++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e007      	b.n	8003172 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8003162:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fcb9 	bl	8002ae4 <_StoreChar>
    }
  } while (*sFormat);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f47f ae72 	bne.w	8002e60 <_VPrintTarget+0x38>
 800317c:	e000      	b.n	8003180 <_VPrintTarget+0x358>
      break;
 800317e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	2b00      	cmp	r3, #0
 8003184:	d041      	beq.n	800320a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	643b      	str	r3, [r7, #64]	; 0x40
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003196:	e00b      	b.n	80031b0 <_VPrintTarget+0x388>
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	b2da      	uxtb	r2, r3
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	6439      	str	r1, [r7, #64]	; 0x40
 80031a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ac:	09db      	lsrs	r3, r3, #7
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	2b7f      	cmp	r3, #127	; 0x7f
 80031b4:	d8f0      	bhi.n	8003198 <_VPrintTarget+0x370>
 80031b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	643a      	str	r2, [r7, #64]	; 0x40
 80031bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ca:	2300      	movs	r3, #0
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
 80031ce:	e00b      	b.n	80031e8 <_VPrintTarget+0x3c0>
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	63b9      	str	r1, [r7, #56]	; 0x38
 80031da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	09db      	lsrs	r3, r3, #7
 80031e6:	637b      	str	r3, [r7, #52]	; 0x34
 80031e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ea:	2b7f      	cmp	r3, #127	; 0x7f
 80031ec:	d8f0      	bhi.n	80031d0 <_VPrintTarget+0x3a8>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80031f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	69b9      	ldr	r1, [r7, #24]
 8003202:	221a      	movs	r2, #26
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fb85 	bl	8002914 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003210:	bf00      	nop
 8003212:	3758      	adds	r7, #88	; 0x58
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003226:	2300      	movs	r3, #0
 8003228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322c:	4917      	ldr	r1, [pc, #92]	; (800328c <SEGGER_SYSVIEW_Init+0x74>)
 800322e:	4818      	ldr	r0, [pc, #96]	; (8003290 <SEGGER_SYSVIEW_Init+0x78>)
 8003230:	f7ff f95e 	bl	80024f0 <SEGGER_RTT_AllocUpBuffer>
 8003234:	4603      	mov	r3, r0
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4b16      	ldr	r3, [pc, #88]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 800323a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 800323e:	785a      	ldrb	r2, [r3, #1]
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 8003242:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 8003246:	7e1b      	ldrb	r3, [r3, #24]
 8003248:	4618      	mov	r0, r3
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2308      	movs	r3, #8
 8003250:	4a11      	ldr	r2, [pc, #68]	; (8003298 <SEGGER_SYSVIEW_Init+0x80>)
 8003252:	490f      	ldr	r1, [pc, #60]	; (8003290 <SEGGER_SYSVIEW_Init+0x78>)
 8003254:	f7ff f9d0 	bl	80025f8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <SEGGER_SYSVIEW_Init+0x84>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 8003264:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800326c:	4a09      	ldr	r2, [pc, #36]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003272:	4a08      	ldr	r2, [pc, #32]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003278:	4a06      	ldr	r2, [pc, #24]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SEGGER_SYSVIEW_Init+0x7c>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	240056f8 	.word	0x240056f8
 8003290:	0800a278 	.word	0x0800a278
 8003294:	24005b00 	.word	0x24005b00
 8003298:	24005af8 	.word	0x24005af8
 800329c:	e0001004 	.word	0xe0001004

080032a0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6113      	str	r3, [r2, #16]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	24005b00 	.word	0x24005b00

080032c0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80032c8:	f3ef 8311 	mrs	r3, BASEPRI
 80032cc:	f04f 0120 	mov.w	r1, #32
 80032d0:	f381 8811 	msr	BASEPRI, r1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4808      	ldr	r0, [pc, #32]	; (80032f8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80032d8:	f7ff fa2a 	bl	8002730 <_PreparePacket>
 80032dc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f7ff fb16 	bl	8002914 <_SendPacket>
  RECORD_END();
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f383 8811 	msr	BASEPRI, r3
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	24005b30 	.word	0x24005b30

080032fc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003306:	f3ef 8311 	mrs	r3, BASEPRI
 800330a:	f04f 0120 	mov.w	r1, #32
 800330e:	f381 8811 	msr	BASEPRI, r1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	4816      	ldr	r0, [pc, #88]	; (8003370 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003316:	f7ff fa0b 	bl	8002730 <_PreparePacket>
 800331a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	e00b      	b.n	8003342 <SEGGER_SYSVIEW_RecordU32+0x46>
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	1c59      	adds	r1, r3, #1
 8003332:	61f9      	str	r1, [r7, #28]
 8003334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	09db      	lsrs	r3, r3, #7
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b7f      	cmp	r3, #127	; 0x7f
 8003346:	d8f0      	bhi.n	800332a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	61fa      	str	r2, [r7, #28]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	6938      	ldr	r0, [r7, #16]
 800335e:	f7ff fad9 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f383 8811 	msr	BASEPRI, r3
}
 8003368:	bf00      	nop
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	24005b30 	.word	0x24005b30

08003374 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	; 0x30
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003380:	f3ef 8311 	mrs	r3, BASEPRI
 8003384:	f04f 0120 	mov.w	r1, #32
 8003388:	f381 8811 	msr	BASEPRI, r1
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	4825      	ldr	r0, [pc, #148]	; (8003424 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003390:	f7ff f9ce 	bl	8002730 <_PreparePacket>
 8003394:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a2:	e00b      	b.n	80033bc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80033ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	09db      	lsrs	r3, r3, #7
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	2b7f      	cmp	r3, #127	; 0x7f
 80033c0:	d8f0      	bhi.n	80033a4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	e00b      	b.n	80033f4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	1c59      	adds	r1, r3, #1
 80033e4:	6279      	str	r1, [r7, #36]	; 0x24
 80033e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	09db      	lsrs	r3, r3, #7
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2b7f      	cmp	r3, #127	; 0x7f
 80033f8:	d8f0      	bhi.n	80033dc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	627a      	str	r2, [r7, #36]	; 0x24
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	69b8      	ldr	r0, [r7, #24]
 8003410:	f7ff fa80 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f383 8811 	msr	BASEPRI, r3
}
 800341a:	bf00      	nop
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	24005b30 	.word	0x24005b30

08003428 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800342e:	4b59      	ldr	r3, [pc, #356]	; (8003594 <SEGGER_SYSVIEW_Start+0x16c>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003434:	f3ef 8311 	mrs	r3, BASEPRI
 8003438:	f04f 0120 	mov.w	r1, #32
 800343c:	f381 8811 	msr	BASEPRI, r1
 8003440:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003442:	4b54      	ldr	r3, [pc, #336]	; (8003594 <SEGGER_SYSVIEW_Start+0x16c>)
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	220a      	movs	r2, #10
 8003448:	4953      	ldr	r1, [pc, #332]	; (8003598 <SEGGER_SYSVIEW_Start+0x170>)
 800344a:	4618      	mov	r0, r3
 800344c:	f7fc ff48 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003456:	f7fe fd1f 	bl	8001e98 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800345a:	200a      	movs	r0, #10
 800345c:	f7ff ff30 	bl	80032c0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003460:	f3ef 8311 	mrs	r3, BASEPRI
 8003464:	f04f 0120 	mov.w	r1, #32
 8003468:	f381 8811 	msr	BASEPRI, r1
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	484b      	ldr	r0, [pc, #300]	; (800359c <SEGGER_SYSVIEW_Start+0x174>)
 8003470:	f7ff f95e 	bl	8002730 <_PreparePacket>
 8003474:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347e:	4b45      	ldr	r3, [pc, #276]	; (8003594 <SEGGER_SYSVIEW_Start+0x16c>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
 8003484:	e00b      	b.n	800349e <SEGGER_SYSVIEW_Start+0x76>
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	b2da      	uxtb	r2, r3
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	1c59      	adds	r1, r3, #1
 800348e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	09db      	lsrs	r3, r3, #7
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	2b7f      	cmp	r3, #127	; 0x7f
 80034a2:	d8f0      	bhi.n	8003486 <SEGGER_SYSVIEW_Start+0x5e>
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	4b36      	ldr	r3, [pc, #216]	; (8003594 <SEGGER_SYSVIEW_Start+0x16c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	e00b      	b.n	80034d8 <SEGGER_SYSVIEW_Start+0xb0>
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	1c59      	adds	r1, r3, #1
 80034c8:	6279      	str	r1, [r7, #36]	; 0x24
 80034ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	09db      	lsrs	r3, r3, #7
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b7f      	cmp	r3, #127	; 0x7f
 80034dc:	d8f0      	bhi.n	80034c0 <SEGGER_SYSVIEW_Start+0x98>
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	627a      	str	r2, [r7, #36]	; 0x24
 80034e4:	6a3a      	ldr	r2, [r7, #32]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	4b28      	ldr	r3, [pc, #160]	; (8003594 <SEGGER_SYSVIEW_Start+0x16c>)
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e00b      	b.n	8003512 <SEGGER_SYSVIEW_Start+0xea>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	1c59      	adds	r1, r3, #1
 8003502:	61f9      	str	r1, [r7, #28]
 8003504:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	09db      	lsrs	r3, r3, #7
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b7f      	cmp	r3, #127	; 0x7f
 8003516:	d8f0      	bhi.n	80034fa <SEGGER_SYSVIEW_Start+0xd2>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	61fa      	str	r2, [r7, #28]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	e00b      	b.n	800354a <SEGGER_SYSVIEW_Start+0x122>
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	1c59      	adds	r1, r3, #1
 800353a:	6179      	str	r1, [r7, #20]
 800353c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	09db      	lsrs	r3, r3, #7
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b7f      	cmp	r3, #127	; 0x7f
 800354e:	d8f0      	bhi.n	8003532 <SEGGER_SYSVIEW_Start+0x10a>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	617a      	str	r2, [r7, #20]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003560:	2218      	movs	r2, #24
 8003562:	6839      	ldr	r1, [r7, #0]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff f9d5 	bl	8002914 <_SendPacket>
      RECORD_END();
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <SEGGER_SYSVIEW_Start+0x16c>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <SEGGER_SYSVIEW_Start+0x16c>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800357e:	f000 f9eb 	bl	8003958 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003582:	f000 f9b1 	bl	80038e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003586:	f000 fbf9 	bl	8003d7c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800358a:	bf00      	nop
 800358c:	3730      	adds	r7, #48	; 0x30
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	24005b00 	.word	0x24005b00
 8003598:	0800a398 	.word	0x0800a398
 800359c:	24005b30 	.word	0x24005b30

080035a0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80035a6:	f3ef 8311 	mrs	r3, BASEPRI
 80035aa:	f04f 0120 	mov.w	r1, #32
 80035ae:	f381 8811 	msr	BASEPRI, r1
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <SEGGER_SYSVIEW_Stop+0x44>)
 80035b6:	f7ff f8bb 	bl	8002730 <_PreparePacket>
 80035ba:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80035c4:	220b      	movs	r2, #11
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	f7ff f9a3 	bl	8002914 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f383 8811 	msr	BASEPRI, r3
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	24005b30 	.word	0x24005b30
 80035e8:	24005b00 	.word	0x24005b00

080035ec <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08c      	sub	sp, #48	; 0x30
 80035f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80035f2:	f3ef 8311 	mrs	r3, BASEPRI
 80035f6:	f04f 0120 	mov.w	r1, #32
 80035fa:	f381 8811 	msr	BASEPRI, r1
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	4845      	ldr	r0, [pc, #276]	; (8003718 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003602:	f7ff f895 	bl	8002730 <_PreparePacket>
 8003606:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003610:	4b42      	ldr	r3, [pc, #264]	; (800371c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
 8003616:	e00b      	b.n	8003630 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	b2da      	uxtb	r2, r3
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	1c59      	adds	r1, r3, #1
 8003620:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003622:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	09db      	lsrs	r3, r3, #7
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	2b7f      	cmp	r3, #127	; 0x7f
 8003634:	d8f0      	bhi.n	8003618 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800363c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	623b      	str	r3, [r7, #32]
 8003650:	e00b      	b.n	800366a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1c59      	adds	r1, r3, #1
 800365a:	6279      	str	r1, [r7, #36]	; 0x24
 800365c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	09db      	lsrs	r3, r3, #7
 8003668:	623b      	str	r3, [r7, #32]
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	2b7f      	cmp	r3, #127	; 0x7f
 800366e:	d8f0      	bhi.n	8003652 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	627a      	str	r2, [r7, #36]	; 0x24
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e00b      	b.n	80036a4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	1c59      	adds	r1, r3, #1
 8003694:	61f9      	str	r1, [r7, #28]
 8003696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	09db      	lsrs	r3, r3, #7
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b7f      	cmp	r3, #127	; 0x7f
 80036a8:	d8f0      	bhi.n	800368c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	61fa      	str	r2, [r7, #28]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	e00b      	b.n	80036dc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	6179      	str	r1, [r7, #20]
 80036ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	09db      	lsrs	r3, r3, #7
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b7f      	cmp	r3, #127	; 0x7f
 80036e0:	d8f0      	bhi.n	80036c4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	617a      	str	r2, [r7, #20]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80036f2:	2218      	movs	r2, #24
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	68b8      	ldr	r0, [r7, #8]
 80036f8:	f7ff f90c 	bl	8002914 <_SendPacket>
  RECORD_END();
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	4798      	blx	r3
  }
}
 8003710:	bf00      	nop
 8003712:	3730      	adds	r7, #48	; 0x30
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	24005b30 	.word	0x24005b30
 800371c:	24005b00 	.word	0x24005b00

08003720 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b092      	sub	sp, #72	; 0x48
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003728:	f3ef 8311 	mrs	r3, BASEPRI
 800372c:	f04f 0120 	mov.w	r1, #32
 8003730:	f381 8811 	msr	BASEPRI, r1
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	486a      	ldr	r0, [pc, #424]	; (80038e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003738:	f7fe fffa 	bl	8002730 <_PreparePacket>
 800373c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	647b      	str	r3, [r7, #68]	; 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
 8003752:	e00b      	b.n	800376c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003756:	b2da      	uxtb	r2, r3
 8003758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	6479      	str	r1, [r7, #68]	; 0x44
 800375e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003768:	09db      	lsrs	r3, r3, #7
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	2b7f      	cmp	r3, #127	; 0x7f
 8003770:	d8f0      	bhi.n	8003754 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	647a      	str	r2, [r7, #68]	; 0x44
 8003778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003780:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38
 800378c:	e00b      	b.n	80037a6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	b2da      	uxtb	r2, r3
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	1c59      	adds	r1, r3, #1
 8003796:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	09db      	lsrs	r3, r3, #7
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	2b7f      	cmp	r3, #127	; 0x7f
 80037aa:	d8f0      	bhi.n	800378e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80037ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ba:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	4619      	mov	r1, r3
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7fe ff63 	bl	8002690 <_EncodeStr>
 80037ca:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80037cc:	2209      	movs	r2, #9
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	6938      	ldr	r0, [r7, #16]
 80037d2:	f7ff f89f 	bl	8002914 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ea:	e00b      	b.n	8003804 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	1c59      	adds	r1, r3, #1
 80037f4:	6379      	str	r1, [r7, #52]	; 0x34
 80037f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	09db      	lsrs	r3, r3, #7
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	2b7f      	cmp	r3, #127	; 0x7f
 8003808:	d8f0      	bhi.n	80037ec <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	637a      	str	r2, [r7, #52]	; 0x34
 8003810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003818:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
 8003824:	e00b      	b.n	800383e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	b2da      	uxtb	r2, r3
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	1c59      	adds	r1, r3, #1
 800382e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	09db      	lsrs	r3, r3, #7
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	2b7f      	cmp	r3, #127	; 0x7f
 8003842:	d8f0      	bhi.n	8003826 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800384a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	e00b      	b.n	8003878 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	1c59      	adds	r1, r3, #1
 8003868:	6279      	str	r1, [r7, #36]	; 0x24
 800386a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	09db      	lsrs	r3, r3, #7
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	2b7f      	cmp	r3, #127	; 0x7f
 800387c:	d8f0      	bhi.n	8003860 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	627a      	str	r2, [r7, #36]	; 0x24
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e00b      	b.n	80038b0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	61f9      	str	r1, [r7, #28]
 80038a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	09db      	lsrs	r3, r3, #7
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b7f      	cmp	r3, #127	; 0x7f
 80038b4:	d8f0      	bhi.n	8003898 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	61fa      	str	r2, [r7, #28]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80038c6:	2215      	movs	r2, #21
 80038c8:	68f9      	ldr	r1, [r7, #12]
 80038ca:	6938      	ldr	r0, [r7, #16]
 80038cc:	f7ff f822 	bl	8002914 <_SendPacket>
  RECORD_END();
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f383 8811 	msr	BASEPRI, r3
}
 80038d6:	bf00      	nop
 80038d8:	3748      	adds	r7, #72	; 0x48
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24005b30 	.word	0x24005b30
 80038e4:	24005b00 	.word	0x24005b00

080038e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80038fe:	4b03      	ldr	r3, [pc, #12]	; (800390c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4798      	blx	r3
  }
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	24005b00 	.word	0x24005b00

08003910 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003918:	f3ef 8311 	mrs	r3, BASEPRI
 800391c:	f04f 0120 	mov.w	r1, #32
 8003920:	f381 8811 	msr	BASEPRI, r1
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	480b      	ldr	r0, [pc, #44]	; (8003954 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003928:	f7fe ff02 	bl	8002730 <_PreparePacket>
 800392c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	6938      	ldr	r0, [r7, #16]
 8003934:	f7fe feac 	bl	8002690 <_EncodeStr>
 8003938:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800393a:	220e      	movs	r2, #14
 800393c:	68f9      	ldr	r1, [r7, #12]
 800393e:	6938      	ldr	r0, [r7, #16]
 8003940:	f7fe ffe8 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f383 8811 	msr	BASEPRI, r3
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	24005b30 	.word	0x24005b30

08003958 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01a      	beq.n	800399c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003970:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4798      	blx	r3
 8003978:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800397c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800397e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	000a      	movs	r2, r1
 800398c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800398e:	4613      	mov	r3, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4621      	mov	r1, r4
 8003994:	200d      	movs	r0, #13
 8003996:	f7ff fced 	bl	8003374 <SEGGER_SYSVIEW_RecordU32x2>
 800399a:	e006      	b.n	80039aa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4619      	mov	r1, r3
 80039a2:	200c      	movs	r0, #12
 80039a4:	f7ff fcaa 	bl	80032fc <SEGGER_SYSVIEW_RecordU32>
  }
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd90      	pop	{r4, r7, pc}
 80039b2:	bf00      	nop
 80039b4:	24005b00 	.word	0x24005b00
 80039b8:	e0001004 	.word	0xe0001004

080039bc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80039c2:	f3ef 8311 	mrs	r3, BASEPRI
 80039c6:	f04f 0120 	mov.w	r1, #32
 80039ca:	f381 8811 	msr	BASEPRI, r1
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	4807      	ldr	r0, [pc, #28]	; (80039f0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80039d2:	f7fe fead 	bl	8002730 <_PreparePacket>
 80039d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80039d8:	2211      	movs	r2, #17
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f7fe ff99 	bl	8002914 <_SendPacket>
  RECORD_END();
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f383 8811 	msr	BASEPRI, r3
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	24005b30 	.word	0x24005b30

080039f4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80039fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003a00:	f04f 0120 	mov.w	r1, #32
 8003a04:	f381 8811 	msr	BASEPRI, r1
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	4819      	ldr	r0, [pc, #100]	; (8003a70 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003a0c:	f7fe fe90 	bl	8002730 <_PreparePacket>
 8003a10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	e00b      	b.n	8003a42 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	61f9      	str	r1, [r7, #28]
 8003a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	09db      	lsrs	r3, r3, #7
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b7f      	cmp	r3, #127	; 0x7f
 8003a46:	d8f0      	bhi.n	8003a2a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	61fa      	str	r2, [r7, #28]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003a58:	2208      	movs	r2, #8
 8003a5a:	68f9      	ldr	r1, [r7, #12]
 8003a5c:	6938      	ldr	r0, [r7, #16]
 8003a5e:	f7fe ff59 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f383 8811 	msr	BASEPRI, r3
}
 8003a68:	bf00      	nop
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	24005b30 	.word	0x24005b30
 8003a74:	24005b00 	.word	0x24005b00

08003a78 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a80:	f3ef 8311 	mrs	r3, BASEPRI
 8003a84:	f04f 0120 	mov.w	r1, #32
 8003a88:	f381 8811 	msr	BASEPRI, r1
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	4819      	ldr	r0, [pc, #100]	; (8003af4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003a90:	f7fe fe4e 	bl	8002730 <_PreparePacket>
 8003a94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003a9a:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e00b      	b.n	8003ac6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	1c59      	adds	r1, r3, #1
 8003ab6:	61f9      	str	r1, [r7, #28]
 8003ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	09db      	lsrs	r3, r3, #7
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aca:	d8f0      	bhi.n	8003aae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	61fa      	str	r2, [r7, #28]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003adc:	2204      	movs	r2, #4
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	6938      	ldr	r0, [r7, #16]
 8003ae2:	f7fe ff17 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f383 8811 	msr	BASEPRI, r3
}
 8003aec:	bf00      	nop
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	24005b30 	.word	0x24005b30
 8003af8:	24005b00 	.word	0x24005b00

08003afc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003b04:	f3ef 8311 	mrs	r3, BASEPRI
 8003b08:	f04f 0120 	mov.w	r1, #32
 8003b0c:	f381 8811 	msr	BASEPRI, r1
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	4819      	ldr	r0, [pc, #100]	; (8003b78 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003b14:	f7fe fe0c 	bl	8002730 <_PreparePacket>
 8003b18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003b1e:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	e00b      	b.n	8003b4a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	1c59      	adds	r1, r3, #1
 8003b3a:	61f9      	str	r1, [r7, #28]
 8003b3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	09db      	lsrs	r3, r3, #7
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b4e:	d8f0      	bhi.n	8003b32 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	61fa      	str	r2, [r7, #28]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003b60:	2206      	movs	r2, #6
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	6938      	ldr	r0, [r7, #16]
 8003b66:	f7fe fed5 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f383 8811 	msr	BASEPRI, r3
}
 8003b70:	bf00      	nop
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	24005b30 	.word	0x24005b30
 8003b7c:	24005b00 	.word	0x24005b00

08003b80 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b8e:	f04f 0120 	mov.w	r1, #32
 8003b92:	f381 8811 	msr	BASEPRI, r1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	4827      	ldr	r0, [pc, #156]	; (8003c38 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003b9a:	f7fe fdc9 	bl	8002730 <_PreparePacket>
 8003b9e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	623b      	str	r3, [r7, #32]
 8003bb6:	e00b      	b.n	8003bd0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	6279      	str	r1, [r7, #36]	; 0x24
 8003bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	09db      	lsrs	r3, r3, #7
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd4:	d8f0      	bhi.n	8003bb8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	627a      	str	r2, [r7, #36]	; 0x24
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e00b      	b.n	8003c08 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	61f9      	str	r1, [r7, #28]
 8003bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	09db      	lsrs	r3, r3, #7
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c0c:	d8f0      	bhi.n	8003bf0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	61fa      	str	r2, [r7, #28]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003c1e:	2207      	movs	r2, #7
 8003c20:	68f9      	ldr	r1, [r7, #12]
 8003c22:	6938      	ldr	r0, [r7, #16]
 8003c24:	f7fe fe76 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f383 8811 	msr	BASEPRI, r3
}
 8003c2e:	bf00      	nop
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	24005b30 	.word	0x24005b30
 8003c3c:	24005b00 	.word	0x24005b00

08003c40 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08c      	sub	sp, #48	; 0x30
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d06d      	beq.n	8003d2e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003c52:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5c:	e008      	b.n	8003c70 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d3f2      	bcc.n	8003c5e <SEGGER_SYSVIEW_SendModule+0x1e>
 8003c78:	e000      	b.n	8003c7c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003c7a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d055      	beq.n	8003d2e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003c82:	f3ef 8311 	mrs	r3, BASEPRI
 8003c86:	f04f 0120 	mov.w	r1, #32
 8003c8a:	f381 8811 	msr	BASEPRI, r1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	482a      	ldr	r0, [pc, #168]	; (8003d3c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003c92:	f7fe fd4d 	bl	8002730 <_PreparePacket>
 8003c96:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	e00b      	b.n	8003cbe <SEGGER_SYSVIEW_SendModule+0x7e>
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1c59      	adds	r1, r3, #1
 8003cae:	6279      	str	r1, [r7, #36]	; 0x24
 8003cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	09db      	lsrs	r3, r3, #7
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cc2:	d8f0      	bhi.n	8003ca6 <SEGGER_SYSVIEW_SendModule+0x66>
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	627a      	str	r2, [r7, #36]	; 0x24
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	e00b      	b.n	8003cf8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	1c59      	adds	r1, r3, #1
 8003ce8:	61f9      	str	r1, [r7, #28]
 8003cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	09db      	lsrs	r3, r3, #7
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8003cfc:	d8f0      	bhi.n	8003ce0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	61fa      	str	r2, [r7, #28]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	4619      	mov	r1, r3
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7fe fcba 	bl	8002690 <_EncodeStr>
 8003d1c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003d1e:	2216      	movs	r2, #22
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	6938      	ldr	r0, [r7, #16]
 8003d24:	f7fe fdf6 	bl	8002914 <_SendPacket>
      RECORD_END();
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3730      	adds	r7, #48	; 0x30
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	24005b28 	.word	0x24005b28
 8003d3c:	24005b30 	.word	0x24005b30

08003d40 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00f      	beq.n	8003d6e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f2      	bne.n	8003d54 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	24005b28 	.word	0x24005b28

08003d7c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003d82:	f3ef 8311 	mrs	r3, BASEPRI
 8003d86:	f04f 0120 	mov.w	r1, #32
 8003d8a:	f381 8811 	msr	BASEPRI, r1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	4817      	ldr	r0, [pc, #92]	; (8003df0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003d92:	f7fe fccd 	bl	8002730 <_PreparePacket>
 8003d96:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e00b      	b.n	8003dc0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	6179      	str	r1, [r7, #20]
 8003db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	09db      	lsrs	r3, r3, #7
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc4:	d8f0      	bhi.n	8003da8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	617a      	str	r2, [r7, #20]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003dd6:	221b      	movs	r2, #27
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	68b8      	ldr	r0, [r7, #8]
 8003ddc:	f7fe fd9a 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f383 8811 	msr	BASEPRI, r3
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	24005b30 	.word	0x24005b30
 8003df4:	24005b2c 	.word	0x24005b2c

08003df8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8003df8:	b40f      	push	{r0, r1, r2, r3}
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6938      	ldr	r0, [r7, #16]
 8003e0e:	f7ff f80b 	bl	8002e28 <_VPrintTarget>
  va_end(ParamList);
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e1c:	b004      	add	sp, #16
 8003e1e:	4770      	bx	lr

08003e20 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	; 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e28:	f3ef 8311 	mrs	r3, BASEPRI
 8003e2c:	f04f 0120 	mov.w	r1, #32
 8003e30:	f381 8811 	msr	BASEPRI, r1
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	4827      	ldr	r0, [pc, #156]	; (8003ed4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003e38:	f7fe fc7a 	bl	8002730 <_PreparePacket>
 8003e3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	6938      	ldr	r0, [r7, #16]
 8003e44:	f7fe fc24 	bl	8002690 <_EncodeStr>
 8003e48:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	2301      	movs	r3, #1
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	e00b      	b.n	8003e6c <SEGGER_SYSVIEW_Warn+0x4c>
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	1c59      	adds	r1, r3, #1
 8003e5c:	6279      	str	r1, [r7, #36]	; 0x24
 8003e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	09db      	lsrs	r3, r3, #7
 8003e6a:	623b      	str	r3, [r7, #32]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e70:	d8f0      	bhi.n	8003e54 <SEGGER_SYSVIEW_Warn+0x34>
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	627a      	str	r2, [r7, #36]	; 0x24
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e00b      	b.n	8003ea4 <SEGGER_SYSVIEW_Warn+0x84>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	61f9      	str	r1, [r7, #28]
 8003e96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	09db      	lsrs	r3, r3, #7
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ea8:	d8f0      	bhi.n	8003e8c <SEGGER_SYSVIEW_Warn+0x6c>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	61fa      	str	r2, [r7, #28]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003eba:	221a      	movs	r2, #26
 8003ebc:	68f9      	ldr	r1, [r7, #12]
 8003ebe:	6938      	ldr	r0, [r7, #16]
 8003ec0:	f7fe fd28 	bl	8002914 <_SendPacket>
  RECORD_END();
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f383 8811 	msr	BASEPRI, r3
}
 8003eca:	bf00      	nop
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	24005b30 	.word	0x24005b30

08003ed8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003edc:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003ede:	7e1b      	ldrb	r3, [r3, #24]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	440b      	add	r3, r1
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	336c      	adds	r3, #108	; 0x6c
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003ef4:	7e1b      	ldrb	r3, [r3, #24]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	490d      	ldr	r1, [pc, #52]	; (8003f30 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003efa:	4603      	mov	r3, r0
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4403      	add	r3, r0
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	440b      	add	r3, r1
 8003f04:	3370      	adds	r3, #112	; 0x70
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d00b      	beq.n	8003f24 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003f0c:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f0e:	789b      	ldrb	r3, [r3, #2]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d107      	bne.n	8003f24 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003f1a:	f7fe fc15 	bl	8002748 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003f1e:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8003f24:	4b01      	ldr	r3, [pc, #4]	; (8003f2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	24005b00 	.word	0x24005b00
 8003f30:	24005240 	.word	0x24005240

08003f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b08b      	sub	sp, #44	; 0x2c
 8003f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f3a:	f000 fd89 	bl	8004a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f3e:	f000 f8ab 	bl	8004098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f42:	f000 f9f7 	bl	8004334 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8003f46:	f000 f923 	bl	8004190 <MX_FDCAN2_Init>
  MX_USART2_UART_Init();
 8003f4a:	f000 f985 	bl	8004258 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8003f4e:	f000 f9cf 	bl	80042f0 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
	user_data = "Start of program\r\n";
 8003f52:	4b43      	ldr	r3, [pc, #268]	; (8004060 <main+0x12c>)
 8003f54:	4a43      	ldr	r2, [pc, #268]	; (8004064 <main+0x130>)
 8003f56:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 8003f58:	4b41      	ldr	r3, [pc, #260]	; (8004060 <main+0x12c>)
 8003f5a:	681c      	ldr	r4, [r3, #0]
 8003f5c:	4b40      	ldr	r3, [pc, #256]	; (8004060 <main+0x12c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc fa07 	bl	8000374 <strlen>
 8003f66:	4603      	mov	r3, r0
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6e:	4621      	mov	r1, r4
 8003f70:	483d      	ldr	r0, [pc, #244]	; (8004068 <main+0x134>)
 8003f72:	f004 fe47 	bl	8008c04 <HAL_UART_Transmit>

	// Enable CCYCCNT Counter
	DWT->CTRL |= (1 << 0);
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <main+0x138>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3c      	ldr	r2, [pc, #240]	; (800406c <main+0x138>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6013      	str	r3, [r2, #0]

	// Used for SEGGER UART
	SEGGER_UART_init(115200);
 8003f82:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003f86:	f7fd ff2b 	bl	8001de0 <SEGGER_UART_init>

	//Starting SEGGER SYSVIEW
	  SEGGER_SYSVIEW_Conf();
 8003f8a:	f7fd fd53 	bl	8001a34 <SEGGER_SYSVIEW_Conf>
	  //SEGGER_SYSVIEW_Start();

	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 100, "Green LED TASK", 1, &Task_GreenLED_Handle);
 8003f8e:	f107 030c 	add.w	r3, r7, #12
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	2301      	movs	r3, #1
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <main+0x13c>)
 8003f9a:	2264      	movs	r2, #100	; 0x64
 8003f9c:	4935      	ldr	r1, [pc, #212]	; (8004074 <main+0x140>)
 8003f9e:	4836      	ldr	r0, [pc, #216]	; (8004078 <main+0x144>)
 8003fa0:	f7fc fc26 	bl	80007f0 <xTaskCreate>
 8003fa4:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d00c      	beq.n	8003fc6 <main+0x92>
        __asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	b672      	cpsid	i
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	b662      	cpsie	i
 8003fc0:	61bb      	str	r3, [r7, #24]
    }
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <main+0x90>

	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 100, "Red LED TASK", 1, &Task_RedLED_Handle);
 8003fc6:	f107 0308 	add.w	r3, r7, #8
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2301      	movs	r3, #1
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <main+0x148>)
 8003fd2:	2264      	movs	r2, #100	; 0x64
 8003fd4:	492a      	ldr	r1, [pc, #168]	; (8004080 <main+0x14c>)
 8003fd6:	482b      	ldr	r0, [pc, #172]	; (8004084 <main+0x150>)
 8003fd8:	f7fc fc0a 	bl	80007f0 <xTaskCreate>
 8003fdc:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d00c      	beq.n	8003ffe <main+0xca>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	b672      	cpsid	i
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	b662      	cpsie	i
 8003ff8:	617b      	str	r3, [r7, #20]
    }
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <main+0xc8>

	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 100, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 8003ffe:	1d3b      	adds	r3, r7, #4
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	2301      	movs	r3, #1
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <main+0x154>)
 8004008:	2264      	movs	r2, #100	; 0x64
 800400a:	4920      	ldr	r1, [pc, #128]	; (800408c <main+0x158>)
 800400c:	4820      	ldr	r0, [pc, #128]	; (8004090 <main+0x15c>)
 800400e:	f7fc fbef 	bl	80007f0 <xTaskCreate>
 8004012:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d00c      	beq.n	8004034 <main+0x100>
        __asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	b672      	cpsid	i
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	b662      	cpsie	i
 800402e:	613b      	str	r3, [r7, #16]
    }
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <main+0xfe>

	  // Start FreeRTOS scheduler
	  vTaskStartScheduler();
 8004034:	f7fc fd6e 	bl	8000b14 <vTaskStartScheduler>

		user_data = "Scheduler called \r\n";
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <main+0x12c>)
 800403a:	4a16      	ldr	r2, [pc, #88]	; (8004094 <main+0x160>)
 800403c:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <main+0x12c>)
 8004040:	681c      	ldr	r4, [r3, #0]
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <main+0x12c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc f994 	bl	8000374 <strlen>
 800404c:	4603      	mov	r3, r0
 800404e:	b29a      	uxth	r2, r3
 8004050:	f04f 33ff 	mov.w	r3, #4294967295
 8004054:	4621      	mov	r1, r4
 8004056:	4804      	ldr	r0, [pc, #16]	; (8004068 <main+0x134>)
 8004058:	f004 fdd4 	bl	8008c04 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800405c:	e7fe      	b.n	800405c <main+0x128>
 800405e:	bf00      	nop
 8004060:	24000010 	.word	0x24000010
 8004064:	0800a290 	.word	0x0800a290
 8004068:	24005cb4 	.word	0x24005cb4
 800406c:	e0001000 	.word	0xe0001000
 8004070:	0800a2a4 	.word	0x0800a2a4
 8004074:	0800a2b4 	.word	0x0800a2b4
 8004078:	080043f9 	.word	0x080043f9
 800407c:	0800a2c0 	.word	0x0800a2c0
 8004080:	0800a2d0 	.word	0x0800a2d0
 8004084:	08004445 	.word	0x08004445
 8004088:	0800a2d8 	.word	0x0800a2d8
 800408c:	0800a2e8 	.word	0x0800a2e8
 8004090:	08004491 	.word	0x08004491
 8004094:	0800a2f0 	.word	0x0800a2f0

08004098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b09c      	sub	sp, #112	; 0x70
 800409c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800409e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a2:	224c      	movs	r2, #76	; 0x4c
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f006 f874 	bl	800a194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	2220      	movs	r2, #32
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f006 f86e 	bl	800a194 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80040b8:	2002      	movs	r0, #2
 80040ba:	f001 fef3 	bl	8005ea4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80040be:	2300      	movs	r3, #0
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	4b31      	ldr	r3, [pc, #196]	; (8004188 <SystemClock_Config+0xf0>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	4a30      	ldr	r2, [pc, #192]	; (8004188 <SystemClock_Config+0xf0>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040ce:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <SystemClock_Config+0xf0>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	4b2c      	ldr	r3, [pc, #176]	; (800418c <SystemClock_Config+0xf4>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80040e0:	4a2a      	ldr	r2, [pc, #168]	; (800418c <SystemClock_Config+0xf4>)
 80040e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e6:	6193      	str	r3, [r2, #24]
 80040e8:	4b28      	ldr	r3, [pc, #160]	; (800418c <SystemClock_Config+0xf4>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80040f4:	bf00      	nop
 80040f6:	4b25      	ldr	r3, [pc, #148]	; (800418c <SystemClock_Config+0xf4>)
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004102:	d1f8      	bne.n	80040f6 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800410e:	2302      	movs	r3, #2
 8004110:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004112:	2302      	movs	r3, #2
 8004114:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004116:	2301      	movs	r3, #1
 8004118:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800411a:	2312      	movs	r3, #18
 800411c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800411e:	2302      	movs	r3, #2
 8004120:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004122:	2303      	movs	r3, #3
 8004124:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004126:	2302      	movs	r3, #2
 8004128:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800412a:	230c      	movs	r3, #12
 800412c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800412e:	2302      	movs	r3, #2
 8004130:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8004132:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004136:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fefb 	bl	8005f38 <HAL_RCC_OscConfig>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004148:	f000 f9da 	bl	8004500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800414c:	233f      	movs	r3, #63	; 0x3f
 800414e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004150:	2302      	movs	r3, #2
 8004152:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8004168:	2300      	movs	r3, #0
 800416a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f002 faef 	bl	8006754 <HAL_RCC_ClockConfig>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800417c:	f000 f9c0 	bl	8004500 <Error_Handler>
  }
}
 8004180:	bf00      	nop
 8004182:	3770      	adds	r7, #112	; 0x70
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	58000400 	.word	0x58000400
 800418c:	58024800 	.word	0x58024800

08004190 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004194:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 8004196:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <MX_FDCAN2_Init+0xc4>)
 8004198:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80041a0:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80041a6:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80041b2:	4b27      	ldr	r3, [pc, #156]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80041c4:	4b22      	ldr	r3, [pc, #136]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041c6:	2202      	movs	r2, #2
 80041c8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80041ca:	4b21      	ldr	r3, [pc, #132]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041cc:	2202      	movs	r2, #2
 80041ce:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80041d0:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041d8:	2201      	movs	r2, #1
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041de:	2201      	movs	r2, #1
 80041e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80041e2:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80041ee:	4b18      	ldr	r3, [pc, #96]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80041f4:	4b16      	ldr	r3, [pc, #88]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 8004202:	2204      	movs	r2, #4
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 8004208:	2200      	movs	r2, #0
 800420a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800420c:	4b10      	ldr	r3, [pc, #64]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 800420e:	2204      	movs	r2, #4
 8004210:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 8004214:	2200      	movs	r2, #0
 8004216:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 800421a:	2204      	movs	r2, #4
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 8004220:	2200      	movs	r2, #0
 8004222:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 8004226:	2200      	movs	r2, #0
 8004228:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 800422c:	2200      	movs	r2, #0
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 8004232:	2200      	movs	r2, #0
 8004234:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 8004238:	2204      	movs	r2, #4
 800423a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800423c:	4804      	ldr	r0, [pc, #16]	; (8004250 <MX_FDCAN2_Init+0xc0>)
 800423e:	f000 fd73 	bl	8004d28 <HAL_FDCAN_Init>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8004248:	f000 f95a 	bl	8004500 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}
 8004250:	24005c14 	.word	0x24005c14
 8004254:	4000a400 	.word	0x4000a400

08004258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800425c:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 800425e:	4a23      	ldr	r2, [pc, #140]	; (80042ec <MX_USART2_UART_Init+0x94>)
 8004260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 8004264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800426a:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 8004278:	2200      	movs	r2, #0
 800427a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 800427e:	220c      	movs	r2, #12
 8004280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 8004284:	2200      	movs	r2, #0
 8004286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004288:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 800428a:	2200      	movs	r2, #0
 800428c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 8004290:	2200      	movs	r2, #0
 8004292:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 8004296:	2200      	movs	r2, #0
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 800429c:	2200      	movs	r2, #0
 800429e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042a0:	4811      	ldr	r0, [pc, #68]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 80042a2:	f004 fc5f 	bl	8008b64 <HAL_UART_Init>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80042ac:	f000 f928 	bl	8004500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042b0:	2100      	movs	r1, #0
 80042b2:	480d      	ldr	r0, [pc, #52]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 80042b4:	f005 fc4c 	bl	8009b50 <HAL_UARTEx_SetTxFifoThreshold>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80042be:	f000 f91f 	bl	8004500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042c2:	2100      	movs	r1, #0
 80042c4:	4808      	ldr	r0, [pc, #32]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 80042c6:	f005 fc81 	bl	8009bcc <HAL_UARTEx_SetRxFifoThreshold>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80042d0:	f000 f916 	bl	8004500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80042d4:	4804      	ldr	r0, [pc, #16]	; (80042e8 <MX_USART2_UART_Init+0x90>)
 80042d6:	f005 fc02 	bl	8009ade <HAL_UARTEx_DisableFifoMode>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80042e0:	f000 f90e 	bl	8004500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	24005cb4 	.word	0x24005cb4
 80042ec:	40004400 	.word	0x40004400

080042f0 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80042f4:	4b0d      	ldr	r3, [pc, #52]	; (800432c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80042f6:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80042f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80042fc:	2210      	movs	r2, #16
 80042fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004302:	2201      	movs	r2, #1
 8004304:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800430c:	4b07      	ldr	r3, [pc, #28]	; (800432c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800430e:	2202      	movs	r2, #2
 8004310:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004314:	2200      	movs	r2, #0
 8004316:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004318:	4804      	ldr	r0, [pc, #16]	; (800432c <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800431a:	f001 fd60 	bl	8005dde <HAL_HCD_Init>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8004324:	f000 f8ec 	bl	8004500 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	24005d44 	.word	0x24005d44
 8004330:	40080000 	.word	0x40080000

08004334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433a:	f107 0314 	add.w	r3, r7, #20
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	60da      	str	r2, [r3, #12]
 8004348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800434a:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <MX_GPIO_Init+0xbc>)
 800434c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <MX_GPIO_Init+0xbc>)
 8004352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800435a:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <MX_GPIO_Init+0xbc>)
 800435c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004368:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <MX_GPIO_Init+0xbc>)
 800436a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800436e:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <MX_GPIO_Init+0xbc>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <MX_GPIO_Init+0xbc>)
 800437a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <MX_GPIO_Init+0xbc>)
 8004388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <MX_GPIO_Init+0xbc>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <MX_GPIO_Init+0xbc>)
 8004398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a4:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <MX_GPIO_Init+0xbc>)
 80043a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043aa:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <MX_GPIO_Init+0xbc>)
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043b4:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <MX_GPIO_Init+0xbc>)
 80043b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80043c2:	2200      	movs	r2, #0
 80043c4:	2107      	movs	r1, #7
 80043c6:	480b      	ldr	r0, [pc, #44]	; (80043f4 <MX_GPIO_Init+0xc0>)
 80043c8:	f001 fcd6 	bl	8005d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80043cc:	2307      	movs	r3, #7
 80043ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d0:	2301      	movs	r3, #1
 80043d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d8:	2300      	movs	r3, #0
 80043da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043dc:	f107 0314 	add.w	r3, r7, #20
 80043e0:	4619      	mov	r1, r3
 80043e2:	4804      	ldr	r0, [pc, #16]	; (80043f4 <MX_GPIO_Init+0xc0>)
 80043e4:	f001 fb18 	bl	8005a18 <HAL_GPIO_Init>

}
 80043e8:	bf00      	nop
 80043ea:	3728      	adds	r7, #40	; 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	58024400 	.word	0x58024400
 80043f4:	58020800 	.word	0x58020800

080043f8 <Task_GreenLED_Handler>:

/* USER CODE BEGIN 4 */
static void Task_GreenLED_Handler(void* parameters)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Green -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004400:	480d      	ldr	r0, [pc, #52]	; (8004438 <Task_GreenLED_Handler+0x40>)
 8004402:	f7ff fcf9 	bl	8003df8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004406:	2102      	movs	r1, #2
 8004408:	480c      	ldr	r0, [pc, #48]	; (800443c <Task_GreenLED_Handler+0x44>)
 800440a:	f001 fcce 	bl	8005daa <HAL_GPIO_TogglePin>

		// 1000 system tickes -> needs to be converted to ms
		vTaskDelay(1000);
 800440e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004412:	f7fc fb45 	bl	8000aa0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8004416:	2102      	movs	r1, #2
 8004418:	4808      	ldr	r0, [pc, #32]	; (800443c <Task_GreenLED_Handler+0x44>)
 800441a:	f001 fcc6 	bl	8005daa <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 800441e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004422:	f7fc fb3d 	bl	8000aa0 <vTaskDelay>
		taskYIELD();
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <Task_GreenLED_Handler+0x48>)
 8004428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8004436:	e7e3      	b.n	8004400 <Task_GreenLED_Handler+0x8>
 8004438:	0800a304 	.word	0x0800a304
 800443c:	58020800 	.word	0x58020800
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <Task_RedLED_Handler>:
	}
}


static void Task_RedLED_Handler(void* parameters)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Red -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 800444c:	480d      	ldr	r0, [pc, #52]	; (8004484 <Task_RedLED_Handler+0x40>)
 800444e:	f7ff fcd3 	bl	8003df8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004452:	2101      	movs	r1, #1
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <Task_RedLED_Handler+0x44>)
 8004456:	f001 fca8 	bl	8005daa <HAL_GPIO_TogglePin>

		// 800 system tickes -> needs to be converted to ms
		vTaskDelay(800);
 800445a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800445e:	f7fc fb1f 	bl	8000aa0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8004462:	2101      	movs	r1, #1
 8004464:	4808      	ldr	r0, [pc, #32]	; (8004488 <Task_RedLED_Handler+0x44>)
 8004466:	f001 fca0 	bl	8005daa <HAL_GPIO_TogglePin>
		vTaskDelay(800);
 800446a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800446e:	f7fc fb17 	bl	8000aa0 <vTaskDelay>
		taskYIELD();
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <Task_RedLED_Handler+0x48>)
 8004474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8004482:	e7e3      	b.n	800444c <Task_RedLED_Handler+0x8>
 8004484:	0800a318 	.word	0x0800a318
 8004488:	58020800 	.word	0x58020800
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004498:	480d      	ldr	r0, [pc, #52]	; (80044d0 <Task_BlueLED_Handler+0x40>)
 800449a:	f7ff fcad 	bl	8003df8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 800449e:	2104      	movs	r1, #4
 80044a0:	480c      	ldr	r0, [pc, #48]	; (80044d4 <Task_BlueLED_Handler+0x44>)
 80044a2:	f001 fc82 	bl	8005daa <HAL_GPIO_TogglePin>

		// 400 system tickes -> needs to be converted to ms
		vTaskDelay(400);
 80044a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80044aa:	f7fc faf9 	bl	8000aa0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 80044ae:	2104      	movs	r1, #4
 80044b0:	4808      	ldr	r0, [pc, #32]	; (80044d4 <Task_BlueLED_Handler+0x44>)
 80044b2:	f001 fc7a 	bl	8005daa <HAL_GPIO_TogglePin>
		vTaskDelay(400);
 80044b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80044ba:	f7fc faf1 	bl	8000aa0 <vTaskDelay>
		taskYIELD();
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <Task_BlueLED_Handler+0x48>)
 80044c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 80044ce:	e7e3      	b.n	8004498 <Task_BlueLED_Handler+0x8>
 80044d0:	0800a32c 	.word	0x0800a32c
 80044d4:	58020800 	.word	0x58020800
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80044ee:	f000 faeb 	bl	8004ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40001000 	.word	0x40001000

08004500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004504:	b672      	cpsid	i
}
 8004506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004508:	e7fe      	b.n	8004508 <Error_Handler+0x8>
	...

0800450c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <HAL_MspInit+0x30>)
 8004514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <HAL_MspInit+0x30>)
 800451a:	f043 0302 	orr.w	r3, r3, #2
 800451e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_MspInit+0x30>)
 8004524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MspInit 1 */
  //vInitPrioGroupValue();

  /* USER CODE END MspInit 1 */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	58024400 	.word	0x58024400

08004540 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b0b8      	sub	sp, #224	; 0xe0
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004548:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004558:	f107 0310 	add.w	r3, r7, #16
 800455c:	22bc      	movs	r2, #188	; 0xbc
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f005 fe17 	bl	800a194 <memset>
  if(hfdcan->Instance==FDCAN2)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a29      	ldr	r2, [pc, #164]	; (8004610 <HAL_FDCAN_MspInit+0xd0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d14b      	bne.n	8004608 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004574:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004576:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800457a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800457c:	f107 0310 	add.w	r3, r7, #16
 8004580:	4618      	mov	r0, r3
 8004582:	f002 fcb5 	bl	8006ef0 <HAL_RCCEx_PeriphCLKConfig>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800458c:	f7ff ffb8 	bl	8004500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004590:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_FDCAN_MspInit+0xd4>)
 8004592:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004596:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <HAL_FDCAN_MspInit+0xd4>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <HAL_FDCAN_MspInit+0xd4>)
 80045a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ae:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_FDCAN_MspInit+0xd4>)
 80045b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <HAL_FDCAN_MspInit+0xd4>)
 80045b6:	f043 0302 	orr.w	r3, r3, #2
 80045ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <HAL_FDCAN_MspInit+0xd4>)
 80045c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80045cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80045d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d4:	2302      	movs	r3, #2
 80045d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80045e6:	2309      	movs	r3, #9
 80045e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045f0:	4619      	mov	r1, r3
 80045f2:	4809      	ldr	r0, [pc, #36]	; (8004618 <HAL_FDCAN_MspInit+0xd8>)
 80045f4:	f001 fa10 	bl	8005a18 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 80045f8:	2200      	movs	r2, #0
 80045fa:	2100      	movs	r1, #0
 80045fc:	2016      	movs	r0, #22
 80045fe:	f000 fb6b 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8004602:	2016      	movs	r0, #22
 8004604:	f000 fb82 	bl	8004d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8004608:	bf00      	nop
 800460a:	37e0      	adds	r7, #224	; 0xe0
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	4000a400 	.word	0x4000a400
 8004614:	58024400 	.word	0x58024400
 8004618:	58020400 	.word	0x58020400

0800461c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b0b8      	sub	sp, #224	; 0xe0
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	22bc      	movs	r2, #188	; 0xbc
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f005 fda9 	bl	800a194 <memset>
  if(huart->Instance==USART2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a24      	ldr	r2, [pc, #144]	; (80046d8 <HAL_UART_MspInit+0xbc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d141      	bne.n	80046d0 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800464c:	2302      	movs	r3, #2
 800464e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004650:	2300      	movs	r3, #0
 8004652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004656:	f107 0310 	add.w	r3, r7, #16
 800465a:	4618      	mov	r0, r3
 800465c:	f002 fc48 	bl	8006ef0 <HAL_RCCEx_PeriphCLKConfig>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004666:	f7ff ff4b 	bl	8004500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <HAL_UART_MspInit+0xc0>)
 800466c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004670:	4a1a      	ldr	r2, [pc, #104]	; (80046dc <HAL_UART_MspInit+0xc0>)
 8004672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004676:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <HAL_UART_MspInit+0xc0>)
 800467c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004688:	4b14      	ldr	r3, [pc, #80]	; (80046dc <HAL_UART_MspInit+0xc0>)
 800468a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800468e:	4a13      	ldr	r2, [pc, #76]	; (80046dc <HAL_UART_MspInit+0xc0>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004698:	4b10      	ldr	r3, [pc, #64]	; (80046dc <HAL_UART_MspInit+0xc0>)
 800469a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046a6:	230c      	movs	r3, #12
 80046a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ac:	2302      	movs	r3, #2
 80046ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046be:	2307      	movs	r3, #7
 80046c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80046c8:	4619      	mov	r1, r3
 80046ca:	4805      	ldr	r0, [pc, #20]	; (80046e0 <HAL_UART_MspInit+0xc4>)
 80046cc:	f001 f9a4 	bl	8005a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046d0:	bf00      	nop
 80046d2:	37e0      	adds	r7, #224	; 0xe0
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40004400 	.word	0x40004400
 80046dc:	58024400 	.word	0x58024400
 80046e0:	58020000 	.word	0x58020000

080046e4 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b0b8      	sub	sp, #224	; 0xe0
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046fc:	f107 0310 	add.w	r3, r7, #16
 8004700:	22bc      	movs	r2, #188	; 0xbc
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f005 fd45 	bl	800a194 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a27      	ldr	r2, [pc, #156]	; (80047ac <HAL_HCD_MspInit+0xc8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d146      	bne.n	80047a2 <HAL_HCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004714:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004718:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800471a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800471e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004722:	f107 0310 	add.w	r3, r7, #16
 8004726:	4618      	mov	r0, r3
 8004728:	f002 fbe2 	bl	8006ef0 <HAL_RCCEx_PeriphCLKConfig>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8004732:	f7ff fee5 	bl	8004500 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004736:	f001 fbef 	bl	8005f18 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800473a:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_HCD_MspInit+0xcc>)
 800473c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_HCD_MspInit+0xcc>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800474a:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_HCD_MspInit+0xcc>)
 800474c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004758:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800475c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004760:	2302      	movs	r3, #2
 8004762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004772:	230a      	movs	r3, #10
 8004774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004778:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800477c:	4619      	mov	r1, r3
 800477e:	480d      	ldr	r0, [pc, #52]	; (80047b4 <HAL_HCD_MspInit+0xd0>)
 8004780:	f001 f94a 	bl	8005a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_HCD_MspInit+0xcc>)
 8004786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <HAL_HCD_MspInit+0xcc>)
 800478c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004790:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_HCD_MspInit+0xcc>)
 8004796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800479a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80047a2:	bf00      	nop
 80047a4:	37e0      	adds	r7, #224	; 0xe0
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40080000 	.word	0x40080000
 80047b0:	58024400 	.word	0x58024400
 80047b4:	58020000 	.word	0x58020000

080047b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b090      	sub	sp, #64	; 0x40
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d827      	bhi.n	8004816 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80047c6:	2200      	movs	r2, #0
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	2036      	movs	r0, #54	; 0x36
 80047cc:	f000 fa84 	bl	8004cd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047d0:	2036      	movs	r0, #54	; 0x36
 80047d2:	f000 fa9b 	bl	8004d0c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80047d6:	4a29      	ldr	r2, [pc, #164]	; (800487c <HAL_InitTick+0xc4>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_InitTick+0xc8>)
 80047de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047e2:	4a27      	ldr	r2, [pc, #156]	; (8004880 <HAL_InitTick+0xc8>)
 80047e4:	f043 0310 	orr.w	r3, r3, #16
 80047e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <HAL_InitTick+0xc8>)
 80047ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047fa:	f107 0210 	add.w	r2, r7, #16
 80047fe:	f107 0314 	add.w	r3, r7, #20
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f002 fb31 	bl	8006e6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <HAL_InitTick+0x6a>
 8004814:	e001      	b.n	800481a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e02b      	b.n	8004872 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800481a:	f002 fafb 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 800481e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004820:	e004      	b.n	800482c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004822:	f002 faf7 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 8004826:	4603      	mov	r3, r0
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800482c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_InitTick+0xcc>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	0c9b      	lsrs	r3, r3, #18
 8004836:	3b01      	subs	r3, #1
 8004838:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_InitTick+0xd0>)
 800483c:	4a13      	ldr	r2, [pc, #76]	; (800488c <HAL_InitTick+0xd4>)
 800483e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_InitTick+0xd0>)
 8004842:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004846:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004848:	4a0f      	ldr	r2, [pc, #60]	; (8004888 <HAL_InitTick+0xd0>)
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800484e:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <HAL_InitTick+0xd0>)
 8004850:	2200      	movs	r2, #0
 8004852:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <HAL_InitTick+0xd0>)
 8004856:	2200      	movs	r2, #0
 8004858:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800485a:	480b      	ldr	r0, [pc, #44]	; (8004888 <HAL_InitTick+0xd0>)
 800485c:	f003 feb0 	bl	80085c0 <HAL_TIM_Base_Init>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004866:	4808      	ldr	r0, [pc, #32]	; (8004888 <HAL_InitTick+0xd0>)
 8004868:	f003 ff0c 	bl	8008684 <HAL_TIM_Base_Start_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	e000      	b.n	8004872 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
}
 8004872:	4618      	mov	r0, r3
 8004874:	3740      	adds	r7, #64	; 0x40
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	2400001c 	.word	0x2400001c
 8004880:	58024400 	.word	0x58024400
 8004884:	431bde83 	.word	0x431bde83
 8004888:	24006048 	.word	0x24006048
 800488c:	40001000 	.word	0x40001000

08004890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004894:	e7fe      	b.n	8004894 <NMI_Handler+0x4>

08004896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004896:	b480      	push	{r7}
 8004898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800489a:	e7fe      	b.n	800489a <HardFault_Handler+0x4>

0800489c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048a0:	e7fe      	b.n	80048a0 <MemManage_Handler+0x4>

080048a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048a6:	e7fe      	b.n	80048a6 <BusFault_Handler+0x4>

080048a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048ac:	e7fe      	b.n	80048ac <UsageFault_Handler+0x4>

080048ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <FDCAN2_IT1_IRQHandler+0x10>)
 80048c2:	f000 fc0f 	bl	80050e4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	24005c14 	.word	0x24005c14

080048d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <TIM6_DAC_IRQHandler+0x10>)
 80048d6:	f003 ff45 	bl	8008764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	24006048 	.word	0x24006048

080048e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <SystemInit+0xec>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <SystemInit+0xec>)
 80048f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <SystemInit+0xf0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	2b06      	cmp	r3, #6
 8004902:	d807      	bhi.n	8004914 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004904:	4b33      	ldr	r3, [pc, #204]	; (80049d4 <SystemInit+0xf0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 030f 	bic.w	r3, r3, #15
 800490c:	4a31      	ldr	r2, [pc, #196]	; (80049d4 <SystemInit+0xf0>)
 800490e:	f043 0307 	orr.w	r3, r3, #7
 8004912:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004914:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <SystemInit+0xf4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2f      	ldr	r2, [pc, #188]	; (80049d8 <SystemInit+0xf4>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <SystemInit+0xf4>)
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004926:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <SystemInit+0xf4>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	492b      	ldr	r1, [pc, #172]	; (80049d8 <SystemInit+0xf4>)
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <SystemInit+0xf8>)
 800492e:	4013      	ands	r3, r2
 8004930:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004932:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <SystemInit+0xf0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800493e:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <SystemInit+0xf0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 030f 	bic.w	r3, r3, #15
 8004946:	4a23      	ldr	r2, [pc, #140]	; (80049d4 <SystemInit+0xf0>)
 8004948:	f043 0307 	orr.w	r3, r3, #7
 800494c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800494e:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <SystemInit+0xf4>)
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004954:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <SystemInit+0xf4>)
 8004956:	2200      	movs	r2, #0
 8004958:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <SystemInit+0xf4>)
 800495c:	2200      	movs	r2, #0
 800495e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <SystemInit+0xf4>)
 8004962:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <SystemInit+0xfc>)
 8004964:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <SystemInit+0xf4>)
 8004968:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <SystemInit+0x100>)
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <SystemInit+0xf4>)
 800496e:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <SystemInit+0x104>)
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <SystemInit+0xf4>)
 8004974:	2200      	movs	r2, #0
 8004976:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <SystemInit+0xf4>)
 800497a:	4a1b      	ldr	r2, [pc, #108]	; (80049e8 <SystemInit+0x104>)
 800497c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <SystemInit+0xf4>)
 8004980:	2200      	movs	r2, #0
 8004982:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <SystemInit+0xf4>)
 8004986:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <SystemInit+0x104>)
 8004988:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <SystemInit+0xf4>)
 800498c:	2200      	movs	r2, #0
 800498e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <SystemInit+0xf4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <SystemInit+0xf4>)
 8004996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <SystemInit+0xf4>)
 800499e:	2200      	movs	r2, #0
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <SystemInit+0x108>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <SystemInit+0x10c>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ae:	d202      	bcs.n	80049b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <SystemInit+0x110>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <SystemInit+0x114>)
 80049b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80049bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <SystemInit+0xec>)
 80049c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80049c6:	bf00      	nop
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	52002000 	.word	0x52002000
 80049d8:	58024400 	.word	0x58024400
 80049dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80049e0:	02020200 	.word	0x02020200
 80049e4:	01ff0000 	.word	0x01ff0000
 80049e8:	01010280 	.word	0x01010280
 80049ec:	5c001000 	.word	0x5c001000
 80049f0:	ffff0000 	.word	0xffff0000
 80049f4:	51008108 	.word	0x51008108
 80049f8:	52004000 	.word	0x52004000

080049fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80049fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a00:	f7ff ff70 	bl	80048e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a04:	480c      	ldr	r0, [pc, #48]	; (8004a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a06:	490d      	ldr	r1, [pc, #52]	; (8004a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a08:	4a0d      	ldr	r2, [pc, #52]	; (8004a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a0c:	e002      	b.n	8004a14 <LoopCopyDataInit>

08004a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a12:	3304      	adds	r3, #4

08004a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a18:	d3f9      	bcc.n	8004a0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a1c:	4c0a      	ldr	r4, [pc, #40]	; (8004a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a20:	e001      	b.n	8004a26 <LoopFillZerobss>

08004a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a24:	3204      	adds	r2, #4

08004a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a28:	d3fb      	bcc.n	8004a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a2a:	f005 fb71 	bl	800a110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a2e:	f7ff fa81 	bl	8003f34 <main>
  bx  lr
 8004a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004a38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a3c:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8004a40:	0800a3fc 	.word	0x0800a3fc
  ldr r2, =_sbss
 8004a44:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8004a48:	24006098 	.word	0x24006098

08004a4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a4c:	e7fe      	b.n	8004a4c <ADC3_IRQHandler>
	...

08004a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a56:	2003      	movs	r0, #3
 8004a58:	f000 f933 	bl	8004cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a5c:	f002 f830 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <HAL_Init+0x68>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	4913      	ldr	r1, [pc, #76]	; (8004abc <HAL_Init+0x6c>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <HAL_Init+0x68>)
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <HAL_Init+0x6c>)
 8004a84:	5cd3      	ldrb	r3, [r2, r3]
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <HAL_Init+0x70>)
 8004a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a94:	4a0b      	ldr	r2, [pc, #44]	; (8004ac4 <HAL_Init+0x74>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a9a:	200f      	movs	r0, #15
 8004a9c:	f7ff fe8c 	bl	80047b8 <HAL_InitTick>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e002      	b.n	8004ab0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004aaa:	f7ff fd2f 	bl	800450c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	0800a3b4 	.word	0x0800a3b4
 8004ac0:	24000018 	.word	0x24000018
 8004ac4:	24000014 	.word	0x24000014

08004ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_IncTick+0x20>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_IncTick+0x24>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <HAL_IncTick+0x24>)
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	24000020 	.word	0x24000020
 8004aec:	24006094 	.word	0x24006094

08004af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return uwTick;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <HAL_GetTick+0x14>)
 8004af6:	681b      	ldr	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	24006094 	.word	0x24006094

08004b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b10:	f7ff ffee 	bl	8004af0 <HAL_GetTick>
 8004b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d005      	beq.n	8004b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <HAL_Delay+0x44>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b2e:	bf00      	nop
 8004b30:	f7ff ffde 	bl	8004af0 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d8f7      	bhi.n	8004b30 <HAL_Delay+0x28>
  {
  }
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	24000020 	.word	0x24000020

08004b50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_GetREVID+0x14>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	0c1b      	lsrs	r3, r3, #16
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	5c001000 	.word	0x5c001000

08004b68 <__NVIC_SetPriorityGrouping>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	60d3      	str	r3, [r2, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00
 8004bac:	05fa0000 	.word	0x05fa0000

08004bb0 <__NVIC_GetPriorityGrouping>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0307 	and.w	r3, r3, #7
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_EnableIRQ>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db0b      	blt.n	8004bf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4907      	ldr	r1, [pc, #28]	; (8004c04 <__NVIC_EnableIRQ+0x38>)
 8004be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2001      	movs	r0, #1
 8004bee:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e100 	.word	0xe000e100

08004c08 <__NVIC_SetPriority>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db0a      	blt.n	8004c32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	490c      	ldr	r1, [pc, #48]	; (8004c54 <__NVIC_SetPriority+0x4c>)
 8004c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c30:	e00a      	b.n	8004c48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4908      	ldr	r1, [pc, #32]	; (8004c58 <__NVIC_SetPriority+0x50>)
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	440b      	add	r3, r1
 8004c46:	761a      	strb	r2, [r3, #24]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000e100 	.word	0xe000e100
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf28      	it	cs
 8004c7a:	2304      	movcs	r3, #4
 8004c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d902      	bls.n	8004c8c <NVIC_EncodePriority+0x30>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3b03      	subs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <NVIC_EncodePriority+0x32>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	43d9      	mvns	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	4313      	orrs	r3, r2
         );
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3724      	adds	r7, #36	; 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff ff4c 	bl	8004b68 <__NVIC_SetPriorityGrouping>
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce6:	f7ff ff63 	bl	8004bb0 <__NVIC_GetPriorityGrouping>
 8004cea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	6978      	ldr	r0, [r7, #20]
 8004cf2:	f7ff ffb3 	bl	8004c5c <NVIC_EncodePriority>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff ff82 	bl	8004c08 <__NVIC_SetPriority>
}
 8004d04:	bf00      	nop
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ff56 	bl	8004bcc <__NVIC_EnableIRQ>
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b098      	sub	sp, #96	; 0x60
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004d30:	4a84      	ldr	r2, [pc, #528]	; (8004f44 <HAL_FDCAN_Init+0x21c>)
 8004d32:	f107 030c 	add.w	r3, r7, #12
 8004d36:	4611      	mov	r1, r2
 8004d38:	224c      	movs	r2, #76	; 0x4c
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f005 fa1c 	bl	800a178 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e1c6      	b.n	80050d8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7e      	ldr	r2, [pc, #504]	; (8004f48 <HAL_FDCAN_Init+0x220>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d106      	bne.n	8004d62 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fbe2 	bl	8004540 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0210 	bic.w	r2, r2, #16
 8004d8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d8c:	f7ff feb0 	bl	8004af0 <HAL_GetTick>
 8004d90:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d92:	e014      	b.n	8004dbe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d94:	f7ff feac 	bl	8004af0 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b0a      	cmp	r3, #10
 8004da0:	d90d      	bls.n	8004dbe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da8:	f043 0201 	orr.w	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e18c      	b.n	80050d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d0e3      	beq.n	8004d94 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ddc:	f7ff fe88 	bl	8004af0 <HAL_GetTick>
 8004de0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004de2:	e014      	b.n	8004e0e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004de4:	f7ff fe84 	bl	8004af0 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b0a      	cmp	r3, #10
 8004df0:	d90d      	bls.n	8004e0e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df8:	f043 0201 	orr.w	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2203      	movs	r2, #3
 8004e06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e164      	b.n	80050d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0e3      	beq.n	8004de4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0202 	orr.w	r2, r2, #2
 8004e2a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7c1b      	ldrb	r3, [r3, #16]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d108      	bne.n	8004e46 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e42:	619a      	str	r2, [r3, #24]
 8004e44:	e007      	b.n	8004e56 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e54:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	7c5b      	ldrb	r3, [r3, #17]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d108      	bne.n	8004e70 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6c:	619a      	str	r2, [r3, #24]
 8004e6e:	e007      	b.n	8004e80 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e7e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	7c9b      	ldrb	r3, [r3, #18]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d108      	bne.n	8004e9a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e96:	619a      	str	r2, [r3, #24]
 8004e98:	e007      	b.n	8004eaa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ea8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004ece:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0210 	bic.w	r2, r2, #16
 8004ede:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d108      	bne.n	8004efa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0204 	orr.w	r2, r2, #4
 8004ef6:	619a      	str	r2, [r3, #24]
 8004ef8:	e030      	b.n	8004f5c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d02c      	beq.n	8004f5c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d020      	beq.n	8004f4c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f18:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0210 	orr.w	r2, r2, #16
 8004f28:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d114      	bne.n	8004f5c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0220 	orr.w	r2, r2, #32
 8004f40:	619a      	str	r2, [r3, #24]
 8004f42:	e00b      	b.n	8004f5c <HAL_FDCAN_Init+0x234>
 8004f44:	0800a340 	.word	0x0800a340
 8004f48:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0220 	orr.w	r2, r2, #32
 8004f5a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f6c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f74:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f84:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f86:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f90:	d115      	bne.n	8004fbe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fa0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004faa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004fba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fbc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	4413      	add	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d011      	beq.n	800500e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004ff2:	f023 0107 	bic.w	r1, r3, #7
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	3360      	adds	r3, #96	; 0x60
 8004ffe:	443b      	add	r3, r7
 8005000:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800501e:	f023 0107 	bic.w	r1, r3, #7
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	3360      	adds	r3, #96	; 0x60
 800502a:	443b      	add	r3, r7
 800502c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503e:	2b00      	cmp	r3, #0
 8005040:	d012      	beq.n	8005068 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800504a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	3360      	adds	r3, #96	; 0x60
 8005056:	443b      	add	r3, r7
 8005058:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800505c:	011a      	lsls	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506c:	2b00      	cmp	r3, #0
 800506e:	d012      	beq.n	8005096 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005078:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	3360      	adds	r3, #96	; 0x60
 8005084:	443b      	add	r3, r7
 8005086:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800508a:	021a      	lsls	r2, r3, #8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <HAL_FDCAN_Init+0x3b8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d107      	bne.n	80050b0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f022 0203 	bic.w	r2, r2, #3
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fb1f 	bl	800570c <FDCAN_CalcultateRamBlockAddresses>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80050d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3760      	adds	r7, #96	; 0x60
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	4000a000 	.word	0x4000a000

080050e4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b092      	sub	sp, #72	; 0x48
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80050ec:	4b90      	ldr	r3, [pc, #576]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	079b      	lsls	r3, r3, #30
 80050f2:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80050f4:	4b8e      	ldr	r3, [pc, #568]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	079b      	lsls	r3, r3, #30
 80050fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fc:	4013      	ands	r3, r2
 80050fe:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005106:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800510a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005114:	4013      	ands	r3, r2
 8005116:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800512c:	4013      	ands	r3, r2
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800513a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005144:	4013      	ands	r3, r2
 8005146:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800515c:	4013      	ands	r3, r2
 800515e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005166:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005174:	4013      	ands	r3, r2
 8005176:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d011      	beq.n	80051aa <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800519c:	651a      	str	r2, [r3, #80]	; 0x50
 800519e:	4b64      	ldr	r3, [pc, #400]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa65 	bl	8005674 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01e      	beq.n	80051f6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d017      	beq.n	80051f6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051da:	4013      	ands	r3, r2
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051e6:	651a      	str	r2, [r3, #80]	; 0x50
 80051e8:	4b51      	ldr	r3, [pc, #324]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80051ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fa16 	bl	8005622 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80051f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005202:	4b4c      	ldr	r3, [pc, #304]	; (8005334 <HAL_FDCAN_IRQHandler+0x250>)
 8005204:	400b      	ands	r3, r1
 8005206:	6513      	str	r3, [r2, #80]	; 0x50
 8005208:	4a49      	ldr	r2, [pc, #292]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 800520a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520c:	0f9b      	lsrs	r3, r3, #30
 800520e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005210:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f9c4 	bl	80055a0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005224:	4b43      	ldr	r3, [pc, #268]	; (8005334 <HAL_FDCAN_IRQHandler+0x250>)
 8005226:	400b      	ands	r3, r1
 8005228:	6513      	str	r3, [r2, #80]	; 0x50
 800522a:	4a41      	ldr	r2, [pc, #260]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 800522c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800522e:	0f9b      	lsrs	r3, r3, #30
 8005230:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f9be 	bl	80055b6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005246:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <HAL_FDCAN_IRQHandler+0x250>)
 8005248:	400b      	ands	r3, r1
 800524a:	6513      	str	r3, [r2, #80]	; 0x50
 800524c:	4a38      	ldr	r2, [pc, #224]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 800524e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005250:	0f9b      	lsrs	r3, r3, #30
 8005252:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9b8 	bl	80055cc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005268:	4b32      	ldr	r3, [pc, #200]	; (8005334 <HAL_FDCAN_IRQHandler+0x250>)
 800526a:	400b      	ands	r3, r1
 800526c:	6513      	str	r3, [r2, #80]	; 0x50
 800526e:	4a30      	ldr	r2, [pc, #192]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	0f9b      	lsrs	r3, r3, #30
 8005274:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f9b2 	bl	80055e2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005288:	2b00      	cmp	r3, #0
 800528a:	d011      	beq.n	80052b0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a2:	651a      	str	r2, [r3, #80]	; 0x50
 80052a4:	4b22      	ldr	r3, [pc, #136]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f9a4 	bl	80055f8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01e      	beq.n	80052fc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e0:	4013      	ands	r3, r2
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ec:	651a      	str	r2, [r3, #80]	; 0x50
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80052f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f988 	bl	800560c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d016      	beq.n	8005338 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00f      	beq.n	8005338 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005320:	651a      	str	r2, [r3, #80]	; 0x50
 8005322:	4b03      	ldr	r3, [pc, #12]	; (8005330 <HAL_FDCAN_IRQHandler+0x24c>)
 8005324:	2200      	movs	r2, #0
 8005326:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f985 	bl	8005638 <HAL_FDCAN_RxBufferNewMessageCallback>
 800532e:	e003      	b.n	8005338 <HAL_FDCAN_IRQHandler+0x254>
 8005330:	4000a800 	.word	0x4000a800
 8005334:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d011      	beq.n	800536a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800535c:	651a      	str	r2, [r3, #80]	; 0x50
 800535e:	4b8d      	ldr	r3, [pc, #564]	; (8005594 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005360:	2200      	movs	r2, #0
 8005362:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f971 	bl	800564c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d011      	beq.n	800539c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800538e:	651a      	str	r2, [r3, #80]	; 0x50
 8005390:	4b80      	ldr	r3, [pc, #512]	; (8005594 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005392:	2200      	movs	r2, #0
 8005394:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f962 	bl	8005660 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d016      	beq.n	80053d8 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00f      	beq.n	80053d8 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053c0:	651a      	str	r2, [r3, #80]	; 0x50
 80053c2:	4b74      	ldr	r3, [pc, #464]	; (8005594 <HAL_FDCAN_IRQHandler+0x4b0>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e4:	4b6c      	ldr	r3, [pc, #432]	; (8005598 <HAL_FDCAN_IRQHandler+0x4b4>)
 80053e6:	400b      	ands	r3, r1
 80053e8:	6513      	str	r3, [r2, #80]	; 0x50
 80053ea:	4a6a      	ldr	r2, [pc, #424]	; (8005594 <HAL_FDCAN_IRQHandler+0x4b0>)
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	0f9b      	lsrs	r3, r3, #30
 80053f0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80053f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f951 	bl	800569c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d011      	beq.n	8005424 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005406:	4b64      	ldr	r3, [pc, #400]	; (8005598 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005408:	400b      	ands	r3, r1
 800540a:	6513      	str	r3, [r2, #80]	; 0x50
 800540c:	4a61      	ldr	r2, [pc, #388]	; (8005594 <HAL_FDCAN_IRQHandler+0x4b0>)
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	0f9b      	lsrs	r3, r3, #30
 8005412:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a5c      	ldr	r2, [pc, #368]	; (800559c <HAL_FDCAN_IRQHandler+0x4b8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	f040 80a6 	bne.w	800557c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 809e 	beq.w	800557c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	4013      	ands	r3, r2
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005462:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	6a3a      	ldr	r2, [r7, #32]
 800546c:	4013      	ands	r3, r2
 800546e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800547a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	4013      	ands	r3, r2
 8005486:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005492:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4013      	ands	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80054aa:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4013      	ands	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80054c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f8f2 	bl	80056b2 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80054dc:	6a39      	ldr	r1, [r7, #32]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f8f2 	bl	80056c8 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01b      	beq.n	800552a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d014      	beq.n	800552a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	0c1b      	lsrs	r3, r3, #16
 8005508:	b29b      	uxth	r3, r3
 800550a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005516:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2240      	movs	r2, #64	; 0x40
 800551e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	6939      	ldr	r1, [r7, #16]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8da 	bl	80056de <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005538:	69f9      	ldr	r1, [r7, #28]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8db 	bl	80056f6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f87e 	bl	8005688 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800558c:	bf00      	nop
 800558e:	3748      	adds	r7, #72	; 0x48
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	4000a800 	.word	0x4000a800
 8005598:	3fcfffff 	.word	0x3fcfffff
 800559c:	4000a000 	.word	0x4000a000

080055a0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005722:	4ba7      	ldr	r3, [pc, #668]	; (80059c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005724:	4013      	ands	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0091      	lsls	r1, r2, #2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	430b      	orrs	r3, r1
 8005730:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800573c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	041a      	lsls	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	4413      	add	r3, r2
 8005758:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005762:	4b97      	ldr	r3, [pc, #604]	; (80059c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005764:	4013      	ands	r3, r2
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	0091      	lsls	r1, r2, #2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	430b      	orrs	r3, r1
 8005770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005784:	041a      	lsls	r2, r3, #16
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4413      	add	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80057a4:	4b86      	ldr	r3, [pc, #536]	; (80059c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	0091      	lsls	r1, r2, #2
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	430b      	orrs	r3, r1
 80057b2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	041a      	lsls	r2, r3, #16
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4413      	add	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80057ec:	4b74      	ldr	r3, [pc, #464]	; (80059c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	0091      	lsls	r1, r2, #2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	430b      	orrs	r3, r1
 80057fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005806:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580e:	041a      	lsls	r2, r3, #16
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005822:	fb02 f303 	mul.w	r3, r2, r3
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	4413      	add	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005834:	4b62      	ldr	r3, [pc, #392]	; (80059c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005836:	4013      	ands	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	0091      	lsls	r1, r2, #2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	430b      	orrs	r3, r1
 8005842:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4413      	add	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005860:	4b57      	ldr	r3, [pc, #348]	; (80059c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005862:	4013      	ands	r3, r2
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	0091      	lsls	r1, r2, #2
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	430b      	orrs	r3, r1
 800586e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800587a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	041a      	lsls	r2, r3, #16
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	4413      	add	r3, r2
 8005898:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80058a2:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	0091      	lsls	r1, r2, #2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	430b      	orrs	r3, r1
 80058b0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058bc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	041a      	lsls	r2, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058d8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e0:	061a      	lsls	r2, r3, #24
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f0:	4b34      	ldr	r3, [pc, #208]	; (80059c4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80058f2:	4413      	add	r3, r2
 80058f4:	009a      	lsls	r2, r3, #2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	441a      	add	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005926:	fb01 f303 	mul.w	r3, r1, r3
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005956:	fb01 f303 	mul.w	r3, r1, r3
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	441a      	add	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d915      	bls.n	80059e8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80059bc:	e006      	b.n	80059cc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80059be:	bf00      	nop
 80059c0:	ffff0003 	.word	0xffff0003
 80059c4:	10002b00 	.word	0x10002b00
 80059c8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2203      	movs	r2, #3
 80059e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e010      	b.n	8005a0a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e005      	b.n	80059fc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3304      	adds	r3, #4
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d3f3      	bcc.n	80059f0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop

08005a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b089      	sub	sp, #36	; 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a26:	4b89      	ldr	r3, [pc, #548]	; (8005c4c <HAL_GPIO_Init+0x234>)
 8005a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a2a:	e194      	b.n	8005d56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	2101      	movs	r1, #1
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	fa01 f303 	lsl.w	r3, r1, r3
 8005a38:	4013      	ands	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8186 	beq.w	8005d50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d00b      	beq.n	8005a64 <HAL_GPIO_Init+0x4c>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d007      	beq.n	8005a64 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a58:	2b11      	cmp	r3, #17
 8005a5a:	d003      	beq.n	8005a64 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b12      	cmp	r3, #18
 8005a62:	d130      	bne.n	8005ac6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	2203      	movs	r2, #3
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	43db      	mvns	r3, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	f003 0201 	and.w	r2, r3, #1
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4013      	ands	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0xee>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b12      	cmp	r3, #18
 8005b04:	d123      	bne.n	8005b4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	08da      	lsrs	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3208      	adds	r2, #8
 8005b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4013      	ands	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	08da      	lsrs	r2, r3, #3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3208      	adds	r2, #8
 8005b48:	69b9      	ldr	r1, [r7, #24]
 8005b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	2203      	movs	r2, #3
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4013      	ands	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f003 0203 	and.w	r2, r3, #3
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80e0 	beq.w	8005d50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b90:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <HAL_GPIO_Init+0x238>)
 8005b92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b96:	4a2e      	ldr	r2, [pc, #184]	; (8005c50 <HAL_GPIO_Init+0x238>)
 8005b98:	f043 0302 	orr.w	r3, r3, #2
 8005b9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <HAL_GPIO_Init+0x238>)
 8005ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bae:	4a29      	ldr	r2, [pc, #164]	; (8005c54 <HAL_GPIO_Init+0x23c>)
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	089b      	lsrs	r3, r3, #2
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	220f      	movs	r2, #15
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a20      	ldr	r2, [pc, #128]	; (8005c58 <HAL_GPIO_Init+0x240>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d052      	beq.n	8005c80 <HAL_GPIO_Init+0x268>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <HAL_GPIO_Init+0x244>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d031      	beq.n	8005c46 <HAL_GPIO_Init+0x22e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1e      	ldr	r2, [pc, #120]	; (8005c60 <HAL_GPIO_Init+0x248>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d02b      	beq.n	8005c42 <HAL_GPIO_Init+0x22a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <HAL_GPIO_Init+0x24c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d025      	beq.n	8005c3e <HAL_GPIO_Init+0x226>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1c      	ldr	r2, [pc, #112]	; (8005c68 <HAL_GPIO_Init+0x250>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01f      	beq.n	8005c3a <HAL_GPIO_Init+0x222>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	; (8005c6c <HAL_GPIO_Init+0x254>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d019      	beq.n	8005c36 <HAL_GPIO_Init+0x21e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1a      	ldr	r2, [pc, #104]	; (8005c70 <HAL_GPIO_Init+0x258>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <HAL_GPIO_Init+0x21a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	; (8005c74 <HAL_GPIO_Init+0x25c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00d      	beq.n	8005c2e <HAL_GPIO_Init+0x216>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <HAL_GPIO_Init+0x260>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <HAL_GPIO_Init+0x212>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <HAL_GPIO_Init+0x264>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <HAL_GPIO_Init+0x20e>
 8005c22:	2309      	movs	r3, #9
 8005c24:	e02d      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c26:	230a      	movs	r3, #10
 8005c28:	e02b      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	e029      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c2e:	2307      	movs	r3, #7
 8005c30:	e027      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c32:	2306      	movs	r3, #6
 8005c34:	e025      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c36:	2305      	movs	r3, #5
 8005c38:	e023      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	e021      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e01f      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e01d      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e01b      	b.n	8005c82 <HAL_GPIO_Init+0x26a>
 8005c4a:	bf00      	nop
 8005c4c:	58000080 	.word	0x58000080
 8005c50:	58024400 	.word	0x58024400
 8005c54:	58000400 	.word	0x58000400
 8005c58:	58020000 	.word	0x58020000
 8005c5c:	58020400 	.word	0x58020400
 8005c60:	58020800 	.word	0x58020800
 8005c64:	58020c00 	.word	0x58020c00
 8005c68:	58021000 	.word	0x58021000
 8005c6c:	58021400 	.word	0x58021400
 8005c70:	58021800 	.word	0x58021800
 8005c74:	58021c00 	.word	0x58021c00
 8005c78:	58022000 	.word	0x58022000
 8005c7c:	58022400 	.word	0x58022400
 8005c80:	2300      	movs	r3, #0
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	f002 0203 	and.w	r2, r2, #3
 8005c88:	0092      	lsls	r2, r2, #2
 8005c8a:	4093      	lsls	r3, r2
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c92:	4938      	ldr	r1, [pc, #224]	; (8005d74 <HAL_GPIO_Init+0x35c>)
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	089b      	lsrs	r3, r3, #2
 8005c98:	3302      	adds	r3, #2
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4013      	ands	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4013      	ands	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4013      	ands	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	3301      	adds	r3, #1
 8005d54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f ae63 	bne.w	8005a2c <HAL_GPIO_Init+0x14>
  }
}
 8005d66:	bf00      	nop
 8005d68:	bf00      	nop
 8005d6a:	3724      	adds	r7, #36	; 0x24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	58000400 	.word	0x58000400

08005d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	807b      	strh	r3, [r7, #2]
 8005d84:	4613      	mov	r3, r2
 8005d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d88:	787b      	ldrb	r3, [r7, #1]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d8e:	887a      	ldrh	r2, [r7, #2]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d94:	e003      	b.n	8005d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d96:	887b      	ldrh	r3, [r7, #2]
 8005d98:	041a      	lsls	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	619a      	str	r2, [r3, #24]
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dbc:	887a      	ldrh	r2, [r7, #2]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	041a      	lsls	r2, r3, #16
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	43d9      	mvns	r1, r3
 8005dc8:	887b      	ldrh	r3, [r7, #2]
 8005dca:	400b      	ands	r3, r1
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	619a      	str	r2, [r3, #24]
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de0:	b08f      	sub	sp, #60	; 0x3c
 8005de2:	af0a      	add	r7, sp, #40	; 0x28
 8005de4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e054      	b.n	8005e9a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fe fc6a 	bl	80046e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2203      	movs	r2, #3
 8005e14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f003 ffc6 	bl	8009dc0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	687e      	ldr	r6, [r7, #4]
 8005e3c:	466d      	mov	r5, sp
 8005e3e:	f106 0410 	add.w	r4, r6, #16
 8005e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e52:	1d33      	adds	r3, r6, #4
 8005e54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e56:	6838      	ldr	r0, [r7, #0]
 8005e58:	f003 ff44 	bl	8009ce4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2101      	movs	r1, #1
 8005e62:	4618      	mov	r0, r3
 8005e64:	f003 ffbd 	bl	8009de2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	687e      	ldr	r6, [r7, #4]
 8005e70:	466d      	mov	r5, sp
 8005e72:	f106 0410 	add.w	r4, r6, #16
 8005e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e82:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e86:	1d33      	adds	r3, r6, #4
 8005e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f004 f850 	bl	8009f30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005ea4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005eac:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d00a      	beq.n	8005ece <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005eb8:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d001      	beq.n	8005eca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e01f      	b.n	8005f0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e01d      	b.n	8005f0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ece:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f023 0207 	bic.w	r2, r3, #7
 8005ed6:	490f      	ldr	r1, [pc, #60]	; (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ede:	f7fe fe07 	bl	8004af0 <HAL_GetTick>
 8005ee2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ee4:	e009      	b.n	8005efa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ee6:	f7fe fe03 	bl	8004af0 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ef4:	d901      	bls.n	8005efa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e007      	b.n	8005f0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_PWREx_ConfigSupply+0x70>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f06:	d1ee      	bne.n	8005ee6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	58024800 	.word	0x58024800

08005f18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a04      	ldr	r2, [pc, #16]	; (8005f34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f26:	60d3      	str	r3, [r2, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	58024800 	.word	0x58024800

08005f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08c      	sub	sp, #48	; 0x30
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e3fd      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8087 	beq.w	8006066 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f58:	4b99      	ldr	r3, [pc, #612]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f62:	4b97      	ldr	r3, [pc, #604]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d007      	beq.n	8005f7e <HAL_RCC_OscConfig+0x46>
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b18      	cmp	r3, #24
 8005f72:	d110      	bne.n	8005f96 <HAL_RCC_OscConfig+0x5e>
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d10b      	bne.n	8005f96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7e:	4b90      	ldr	r3, [pc, #576]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d06c      	beq.n	8006064 <HAL_RCC_OscConfig+0x12c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d168      	bne.n	8006064 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e3d7      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9e:	d106      	bne.n	8005fae <HAL_RCC_OscConfig+0x76>
 8005fa0:	4b87      	ldr	r3, [pc, #540]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a86      	ldr	r2, [pc, #536]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	e02e      	b.n	800600c <HAL_RCC_OscConfig+0xd4>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x98>
 8005fb6:	4b82      	ldr	r3, [pc, #520]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a81      	ldr	r2, [pc, #516]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	4b7f      	ldr	r3, [pc, #508]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a7e      	ldr	r2, [pc, #504]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e01d      	b.n	800600c <HAL_RCC_OscConfig+0xd4>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCC_OscConfig+0xbc>
 8005fda:	4b79      	ldr	r3, [pc, #484]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a78      	ldr	r2, [pc, #480]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b76      	ldr	r3, [pc, #472]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a75      	ldr	r2, [pc, #468]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e00b      	b.n	800600c <HAL_RCC_OscConfig+0xd4>
 8005ff4:	4b72      	ldr	r3, [pc, #456]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a71      	ldr	r2, [pc, #452]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	4b6f      	ldr	r3, [pc, #444]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a6e      	ldr	r2, [pc, #440]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800600a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d013      	beq.n	800603c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fe fd6c 	bl	8004af0 <HAL_GetTick>
 8006018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800601c:	f7fe fd68 	bl	8004af0 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b64      	cmp	r3, #100	; 0x64
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e38b      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800602e:	4b64      	ldr	r3, [pc, #400]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0xe4>
 800603a:	e014      	b.n	8006066 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fe fd58 	bl	8004af0 <HAL_GetTick>
 8006040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006044:	f7fe fd54 	bl	8004af0 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b64      	cmp	r3, #100	; 0x64
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e377      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006056:	4b5a      	ldr	r3, [pc, #360]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0x10c>
 8006062:	e000      	b.n	8006066 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80ae 	beq.w	80061d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006074:	4b52      	ldr	r3, [pc, #328]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800607c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800607e:	4b50      	ldr	r3, [pc, #320]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <HAL_RCC_OscConfig+0x162>
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	2b18      	cmp	r3, #24
 800608e:	d13a      	bne.n	8006106 <HAL_RCC_OscConfig+0x1ce>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d135      	bne.n	8006106 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800609a:	4b49      	ldr	r3, [pc, #292]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <HAL_RCC_OscConfig+0x17a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e349      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b2:	f7fe fd4d 	bl	8004b50 <HAL_GetREVID>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80060bc:	4293      	cmp	r3, r2
 80060be:	d817      	bhi.n	80060f0 <HAL_RCC_OscConfig+0x1b8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d108      	bne.n	80060da <HAL_RCC_OscConfig+0x1a2>
 80060c8:	4b3d      	ldr	r3, [pc, #244]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060d0:	4a3b      	ldr	r2, [pc, #236]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d8:	e07a      	b.n	80061d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060da:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	031b      	lsls	r3, r3, #12
 80060e8:	4935      	ldr	r1, [pc, #212]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060ee:	e06f      	b.n	80061d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f0:	4b33      	ldr	r3, [pc, #204]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	061b      	lsls	r3, r3, #24
 80060fe:	4930      	ldr	r1, [pc, #192]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006100:	4313      	orrs	r3, r2
 8006102:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006104:	e064      	b.n	80061d0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d045      	beq.n	800619a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800610e:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f023 0219 	bic.w	r2, r3, #25
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	4929      	ldr	r1, [pc, #164]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fe fce6 	bl	8004af0 <HAL_GetTick>
 8006124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006128:	f7fe fce2 	bl	8004af0 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e305      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800613a:	4b21      	ldr	r3, [pc, #132]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006146:	f7fe fd03 	bl	8004b50 <HAL_GetREVID>
 800614a:	4603      	mov	r3, r0
 800614c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006150:	4293      	cmp	r3, r2
 8006152:	d817      	bhi.n	8006184 <HAL_RCC_OscConfig+0x24c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	d108      	bne.n	800616e <HAL_RCC_OscConfig+0x236>
 800615c:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006164:	4a16      	ldr	r2, [pc, #88]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616a:	6053      	str	r3, [r2, #4]
 800616c:	e030      	b.n	80061d0 <HAL_RCC_OscConfig+0x298>
 800616e:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	031b      	lsls	r3, r3, #12
 800617c:	4910      	ldr	r1, [pc, #64]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 800617e:	4313      	orrs	r3, r2
 8006180:	604b      	str	r3, [r1, #4]
 8006182:	e025      	b.n	80061d0 <HAL_RCC_OscConfig+0x298>
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	490b      	ldr	r1, [pc, #44]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 8006194:	4313      	orrs	r3, r2
 8006196:	604b      	str	r3, [r1, #4]
 8006198:	e01a      	b.n	80061d0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <HAL_RCC_OscConfig+0x288>)
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a6:	f7fe fca3 	bl	8004af0 <HAL_GetTick>
 80061aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061ac:	e00a      	b.n	80061c4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ae:	f7fe fc9f 	bl	8004af0 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d903      	bls.n	80061c4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e2c2      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
 80061c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061c4:	4b94      	ldr	r3, [pc, #592]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ee      	bne.n	80061ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80a9 	beq.w	8006330 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061de:	4b8e      	ldr	r3, [pc, #568]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061e8:	4b8b      	ldr	r3, [pc, #556]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d007      	beq.n	8006204 <HAL_RCC_OscConfig+0x2cc>
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b18      	cmp	r3, #24
 80061f8:	d13a      	bne.n	8006270 <HAL_RCC_OscConfig+0x338>
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d135      	bne.n	8006270 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006204:	4b84      	ldr	r3, [pc, #528]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_RCC_OscConfig+0x2e4>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	2b80      	cmp	r3, #128	; 0x80
 8006216:	d001      	beq.n	800621c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e294      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800621c:	f7fe fc98 	bl	8004b50 <HAL_GetREVID>
 8006220:	4603      	mov	r3, r0
 8006222:	f241 0203 	movw	r2, #4099	; 0x1003
 8006226:	4293      	cmp	r3, r2
 8006228:	d817      	bhi.n	800625a <HAL_RCC_OscConfig+0x322>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	2b20      	cmp	r3, #32
 8006230:	d108      	bne.n	8006244 <HAL_RCC_OscConfig+0x30c>
 8006232:	4b79      	ldr	r3, [pc, #484]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800623a:	4a77      	ldr	r2, [pc, #476]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800623c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006240:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006242:	e075      	b.n	8006330 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006244:	4b74      	ldr	r3, [pc, #464]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	069b      	lsls	r3, r3, #26
 8006252:	4971      	ldr	r1, [pc, #452]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 8006254:	4313      	orrs	r3, r2
 8006256:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006258:	e06a      	b.n	8006330 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800625a:	4b6f      	ldr	r3, [pc, #444]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	061b      	lsls	r3, r3, #24
 8006268:	496b      	ldr	r1, [pc, #428]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800626a:	4313      	orrs	r3, r2
 800626c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800626e:	e05f      	b.n	8006330 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d042      	beq.n	80062fe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006278:	4b67      	ldr	r3, [pc, #412]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a66      	ldr	r2, [pc, #408]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800627e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006284:	f7fe fc34 	bl	8004af0 <HAL_GetTick>
 8006288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800628c:	f7fe fc30 	bl	8004af0 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e253      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800629e:	4b5e      	ldr	r3, [pc, #376]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062aa:	f7fe fc51 	bl	8004b50 <HAL_GetREVID>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d817      	bhi.n	80062e8 <HAL_RCC_OscConfig+0x3b0>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d108      	bne.n	80062d2 <HAL_RCC_OscConfig+0x39a>
 80062c0:	4b55      	ldr	r3, [pc, #340]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80062c8:	4a53      	ldr	r2, [pc, #332]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80062ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ce:	6053      	str	r3, [r2, #4]
 80062d0:	e02e      	b.n	8006330 <HAL_RCC_OscConfig+0x3f8>
 80062d2:	4b51      	ldr	r3, [pc, #324]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	069b      	lsls	r3, r3, #26
 80062e0:	494d      	ldr	r1, [pc, #308]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	604b      	str	r3, [r1, #4]
 80062e6:	e023      	b.n	8006330 <HAL_RCC_OscConfig+0x3f8>
 80062e8:	4b4b      	ldr	r3, [pc, #300]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	061b      	lsls	r3, r3, #24
 80062f6:	4948      	ldr	r1, [pc, #288]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60cb      	str	r3, [r1, #12]
 80062fc:	e018      	b.n	8006330 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062fe:	4b46      	ldr	r3, [pc, #280]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a45      	ldr	r2, [pc, #276]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 8006304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630a:	f7fe fbf1 	bl	8004af0 <HAL_GetTick>
 800630e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006312:	f7fe fbed 	bl	8004af0 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e210      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006324:	4b3c      	ldr	r3, [pc, #240]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f0      	bne.n	8006312 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d036      	beq.n	80063aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d019      	beq.n	8006378 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006344:	4b34      	ldr	r3, [pc, #208]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 8006346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006348:	4a33      	ldr	r2, [pc, #204]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006350:	f7fe fbce 	bl	8004af0 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006358:	f7fe fbca 	bl	8004af0 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e1ed      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800636a:	4b2b      	ldr	r3, [pc, #172]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800636c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x420>
 8006376:	e018      	b.n	80063aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006378:	4b27      	ldr	r3, [pc, #156]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800637a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637c:	4a26      	ldr	r2, [pc, #152]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006384:	f7fe fbb4 	bl	8004af0 <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800638c:	f7fe fbb0 	bl	8004af0 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e1d3      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800639e:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80063a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d038      	beq.n	8006428 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d019      	beq.n	80063f2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063be:	4b16      	ldr	r3, [pc, #88]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a15      	ldr	r2, [pc, #84]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80063c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063ca:	f7fe fb91 	bl	8004af0 <HAL_GetTick>
 80063ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063d2:	f7fe fb8d 	bl	8004af0 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e1b0      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063e4:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x49a>
 80063f0:	e01a      	b.n	8006428 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a08      	ldr	r2, [pc, #32]	; (8006418 <HAL_RCC_OscConfig+0x4e0>)
 80063f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063fe:	f7fe fb77 	bl	8004af0 <HAL_GetTick>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006404:	e00a      	b.n	800641c <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006406:	f7fe fb73 	bl	8004af0 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d903      	bls.n	800641c <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e196      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
 8006418:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800641c:	4b99      	ldr	r3, [pc, #612]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ee      	bne.n	8006406 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8081 	beq.w	8006538 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006436:	4b94      	ldr	r3, [pc, #592]	; (8006688 <HAL_RCC_OscConfig+0x750>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a93      	ldr	r2, [pc, #588]	; (8006688 <HAL_RCC_OscConfig+0x750>)
 800643c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006442:	f7fe fb55 	bl	8004af0 <HAL_GetTick>
 8006446:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800644a:	f7fe fb51 	bl	8004af0 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b64      	cmp	r3, #100	; 0x64
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e174      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800645c:	4b8a      	ldr	r3, [pc, #552]	; (8006688 <HAL_RCC_OscConfig+0x750>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x546>
 8006470:	4b84      	ldr	r3, [pc, #528]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	4a83      	ldr	r2, [pc, #524]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	6713      	str	r3, [r2, #112]	; 0x70
 800647c:	e02d      	b.n	80064da <HAL_RCC_OscConfig+0x5a2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x568>
 8006486:	4b7f      	ldr	r3, [pc, #508]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	4a7e      	ldr	r2, [pc, #504]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800648c:	f023 0301 	bic.w	r3, r3, #1
 8006490:	6713      	str	r3, [r2, #112]	; 0x70
 8006492:	4b7c      	ldr	r3, [pc, #496]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	4a7b      	ldr	r2, [pc, #492]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006498:	f023 0304 	bic.w	r3, r3, #4
 800649c:	6713      	str	r3, [r2, #112]	; 0x70
 800649e:	e01c      	b.n	80064da <HAL_RCC_OscConfig+0x5a2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d10c      	bne.n	80064c2 <HAL_RCC_OscConfig+0x58a>
 80064a8:	4b76      	ldr	r3, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	4a75      	ldr	r2, [pc, #468]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80064ae:	f043 0304 	orr.w	r3, r3, #4
 80064b2:	6713      	str	r3, [r2, #112]	; 0x70
 80064b4:	4b73      	ldr	r3, [pc, #460]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	4a72      	ldr	r2, [pc, #456]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6713      	str	r3, [r2, #112]	; 0x70
 80064c0:	e00b      	b.n	80064da <HAL_RCC_OscConfig+0x5a2>
 80064c2:	4b70      	ldr	r3, [pc, #448]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	4a6f      	ldr	r2, [pc, #444]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	6713      	str	r3, [r2, #112]	; 0x70
 80064ce:	4b6d      	ldr	r3, [pc, #436]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	4a6c      	ldr	r2, [pc, #432]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80064d4:	f023 0304 	bic.w	r3, r3, #4
 80064d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d015      	beq.n	800650e <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e2:	f7fe fb05 	bl	8004af0 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064e8:	e00a      	b.n	8006500 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ea:	f7fe fb01 	bl	8004af0 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e122      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006500:	4b60      	ldr	r3, [pc, #384]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0ee      	beq.n	80064ea <HAL_RCC_OscConfig+0x5b2>
 800650c:	e014      	b.n	8006538 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650e:	f7fe faef 	bl	8004af0 <HAL_GetTick>
 8006512:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006514:	e00a      	b.n	800652c <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006516:	f7fe faeb 	bl	8004af0 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	; 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e10c      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800652c:	4b55      	ldr	r3, [pc, #340]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1ee      	bne.n	8006516 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8101 	beq.w	8006744 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006542:	4b50      	ldr	r3, [pc, #320]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800654a:	2b18      	cmp	r3, #24
 800654c:	f000 80bc 	beq.w	80066c8 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	2b02      	cmp	r3, #2
 8006556:	f040 809d 	bne.w	8006694 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655a:	4b4a      	ldr	r3, [pc, #296]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a49      	ldr	r2, [pc, #292]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006566:	f7fe fac3 	bl	8004af0 <HAL_GetTick>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800656e:	f7fe fabf 	bl	8004af0 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e0e2      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006580:	4b40      	ldr	r3, [pc, #256]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800658c:	4b3d      	ldr	r3, [pc, #244]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800658e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006590:	4b3e      	ldr	r3, [pc, #248]	; (800668c <HAL_RCC_OscConfig+0x754>)
 8006592:	4013      	ands	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800659c:	0112      	lsls	r2, r2, #4
 800659e:	430a      	orrs	r2, r1
 80065a0:	4938      	ldr	r1, [pc, #224]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	628b      	str	r3, [r1, #40]	; 0x28
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	3b01      	subs	r3, #1
 80065ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b4:	3b01      	subs	r3, #1
 80065b6:	025b      	lsls	r3, r3, #9
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	3b01      	subs	r3, #1
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	3b01      	subs	r3, #1
 80065d0:	061b      	lsls	r3, r3, #24
 80065d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065d6:	492b      	ldr	r1, [pc, #172]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80065dc:	4b29      	ldr	r3, [pc, #164]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	4a28      	ldr	r2, [pc, #160]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065e8:	4b26      	ldr	r3, [pc, #152]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80065ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ec:	4b28      	ldr	r3, [pc, #160]	; (8006690 <HAL_RCC_OscConfig+0x758>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065f4:	00d2      	lsls	r2, r2, #3
 80065f6:	4923      	ldr	r1, [pc, #140]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065fc:	4b21      	ldr	r3, [pc, #132]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	f023 020c 	bic.w	r2, r3, #12
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	491e      	ldr	r1, [pc, #120]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800660e:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f023 0202 	bic.w	r2, r3, #2
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661a:	491a      	ldr	r1, [pc, #104]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800661c:	4313      	orrs	r3, r2
 800661e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006620:	4b18      	ldr	r3, [pc, #96]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	4a17      	ldr	r2, [pc, #92]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662c:	4b15      	ldr	r3, [pc, #84]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a14      	ldr	r2, [pc, #80]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800663e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a0b      	ldr	r2, [pc, #44]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800665a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fe fa48 	bl	8004af0 <HAL_GetTick>
 8006660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006664:	f7fe fa44 	bl	8004af0 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e067      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006676:	4b03      	ldr	r3, [pc, #12]	; (8006684 <HAL_RCC_OscConfig+0x74c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0f0      	beq.n	8006664 <HAL_RCC_OscConfig+0x72c>
 8006682:	e05f      	b.n	8006744 <HAL_RCC_OscConfig+0x80c>
 8006684:	58024400 	.word	0x58024400
 8006688:	58024800 	.word	0x58024800
 800668c:	fffffc0c 	.word	0xfffffc0c
 8006690:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006694:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <HAL_RCC_OscConfig+0x818>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a2d      	ldr	r2, [pc, #180]	; (8006750 <HAL_RCC_OscConfig+0x818>)
 800669a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800669e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a0:	f7fe fa26 	bl	8004af0 <HAL_GetTick>
 80066a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a8:	f7fe fa22 	bl	8004af0 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e045      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066ba:	4b25      	ldr	r3, [pc, #148]	; (8006750 <HAL_RCC_OscConfig+0x818>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <HAL_RCC_OscConfig+0x770>
 80066c6:	e03d      	b.n	8006744 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066c8:	4b21      	ldr	r3, [pc, #132]	; (8006750 <HAL_RCC_OscConfig+0x818>)
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066ce:	4b20      	ldr	r3, [pc, #128]	; (8006750 <HAL_RCC_OscConfig+0x818>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d031      	beq.n	8006740 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f003 0203 	and.w	r2, r3, #3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d12a      	bne.n	8006740 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d122      	bne.n	8006740 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006706:	429a      	cmp	r2, r3
 8006708:	d11a      	bne.n	8006740 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	0a5b      	lsrs	r3, r3, #9
 800670e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006716:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006718:	429a      	cmp	r2, r3
 800671a:	d111      	bne.n	8006740 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800672a:	429a      	cmp	r2, r3
 800672c:	d108      	bne.n	8006740 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	0e1b      	lsrs	r3, r3, #24
 8006732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800673c:	429a      	cmp	r2, r3
 800673e:	d001      	beq.n	8006744 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3730      	adds	r7, #48	; 0x30
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	58024400 	.word	0x58024400

08006754 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e19c      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006768:	4b8a      	ldr	r3, [pc, #552]	; (8006994 <HAL_RCC_ClockConfig+0x240>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d910      	bls.n	8006798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b87      	ldr	r3, [pc, #540]	; (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 020f 	bic.w	r2, r3, #15
 800677e:	4985      	ldr	r1, [pc, #532]	; (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b83      	ldr	r3, [pc, #524]	; (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e184      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d010      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	4b7b      	ldr	r3, [pc, #492]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d908      	bls.n	80067c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067b4:	4b78      	ldr	r3, [pc, #480]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	4975      	ldr	r1, [pc, #468]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d010      	beq.n	80067f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	4b70      	ldr	r3, [pc, #448]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067de:	429a      	cmp	r2, r3
 80067e0:	d908      	bls.n	80067f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067e2:	4b6d      	ldr	r3, [pc, #436]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	496a      	ldr	r1, [pc, #424]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d010      	beq.n	8006822 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	4b64      	ldr	r3, [pc, #400]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800680c:	429a      	cmp	r2, r3
 800680e:	d908      	bls.n	8006822 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006810:	4b61      	ldr	r3, [pc, #388]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	495e      	ldr	r1, [pc, #376]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 800681e:	4313      	orrs	r3, r2
 8006820:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d010      	beq.n	8006850 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69da      	ldr	r2, [r3, #28]
 8006832:	4b59      	ldr	r3, [pc, #356]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800683a:	429a      	cmp	r2, r3
 800683c:	d908      	bls.n	8006850 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800683e:	4b56      	ldr	r3, [pc, #344]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	4953      	ldr	r1, [pc, #332]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 800684c:	4313      	orrs	r3, r2
 800684e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	4b4d      	ldr	r3, [pc, #308]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	429a      	cmp	r2, r3
 800686a:	d908      	bls.n	800687e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800686c:	4b4a      	ldr	r3, [pc, #296]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f023 020f 	bic.w	r2, r3, #15
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	4947      	ldr	r1, [pc, #284]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 800687a:	4313      	orrs	r3, r2
 800687c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d055      	beq.n	8006936 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800688a:	4b43      	ldr	r3, [pc, #268]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	4940      	ldr	r1, [pc, #256]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006898:	4313      	orrs	r3, r2
 800689a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d107      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068a4:	4b3c      	ldr	r3, [pc, #240]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d121      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0f6      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d107      	bne.n	80068cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068bc:	4b36      	ldr	r3, [pc, #216]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d115      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0ea      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068d4:	4b30      	ldr	r3, [pc, #192]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0de      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068e4:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0d6      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068f4:	4b28      	ldr	r3, [pc, #160]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f023 0207 	bic.w	r2, r3, #7
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4925      	ldr	r1, [pc, #148]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006902:	4313      	orrs	r3, r2
 8006904:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006906:	f7fe f8f3 	bl	8004af0 <HAL_GetTick>
 800690a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690c:	e00a      	b.n	8006924 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800690e:	f7fe f8ef 	bl	8004af0 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	; 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e0be      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006924:	4b1c      	ldr	r3, [pc, #112]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	429a      	cmp	r2, r3
 8006934:	d1eb      	bne.n	800690e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d010      	beq.n	8006964 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	429a      	cmp	r2, r3
 8006950:	d208      	bcs.n	8006964 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f023 020f 	bic.w	r2, r3, #15
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	490e      	ldr	r1, [pc, #56]	; (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006960:	4313      	orrs	r3, r2
 8006962:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d214      	bcs.n	800699c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f023 020f 	bic.w	r2, r3, #15
 800697a:	4906      	ldr	r1, [pc, #24]	; (8006994 <HAL_RCC_ClockConfig+0x240>)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4313      	orrs	r3, r2
 8006980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006982:	4b04      	ldr	r3, [pc, #16]	; (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d005      	beq.n	800699c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e086      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
 8006994:	52002000 	.word	0x52002000
 8006998:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	4b3f      	ldr	r3, [pc, #252]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d208      	bcs.n	80069ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069b8:	4b3c      	ldr	r3, [pc, #240]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	4939      	ldr	r1, [pc, #228]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d010      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695a      	ldr	r2, [r3, #20]
 80069da:	4b34      	ldr	r3, [pc, #208]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d208      	bcs.n	80069f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069e6:	4b31      	ldr	r3, [pc, #196]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	492e      	ldr	r1, [pc, #184]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d010      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	4b28      	ldr	r3, [pc, #160]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d208      	bcs.n	8006a26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a14:	4b25      	ldr	r3, [pc, #148]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	4922      	ldr	r1, [pc, #136]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d010      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69da      	ldr	r2, [r3, #28]
 8006a36:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d208      	bcs.n	8006a54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a42:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	4917      	ldr	r1, [pc, #92]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a54:	f000 f834 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4b14      	ldr	r3, [pc, #80]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	0a1b      	lsrs	r3, r3, #8
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	4912      	ldr	r1, [pc, #72]	; (8006ab0 <HAL_RCC_ClockConfig+0x35c>)
 8006a66:	5ccb      	ldrb	r3, [r1, r3]
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	4a0d      	ldr	r2, [pc, #52]	; (8006ab0 <HAL_RCC_ClockConfig+0x35c>)
 8006a7c:	5cd3      	ldrb	r3, [r2, r3]
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
 8006a88:	4a0a      	ldr	r2, [pc, #40]	; (8006ab4 <HAL_RCC_ClockConfig+0x360>)
 8006a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a8c:	4a0a      	ldr	r2, [pc, #40]	; (8006ab8 <HAL_RCC_ClockConfig+0x364>)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <HAL_RCC_ClockConfig+0x368>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fd fe8e 	bl	80047b8 <HAL_InitTick>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	0800a3b4 	.word	0x0800a3b4
 8006ab4:	24000018 	.word	0x24000018
 8006ab8:	24000014 	.word	0x24000014
 8006abc:	2400001c 	.word	0x2400001c

08006ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ac6:	4bb3      	ldr	r3, [pc, #716]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ace:	2b18      	cmp	r3, #24
 8006ad0:	f200 8155 	bhi.w	8006d7e <HAL_RCC_GetSysClockFreq+0x2be>
 8006ad4:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006b41 	.word	0x08006b41
 8006ae0:	08006d7f 	.word	0x08006d7f
 8006ae4:	08006d7f 	.word	0x08006d7f
 8006ae8:	08006d7f 	.word	0x08006d7f
 8006aec:	08006d7f 	.word	0x08006d7f
 8006af0:	08006d7f 	.word	0x08006d7f
 8006af4:	08006d7f 	.word	0x08006d7f
 8006af8:	08006d7f 	.word	0x08006d7f
 8006afc:	08006b67 	.word	0x08006b67
 8006b00:	08006d7f 	.word	0x08006d7f
 8006b04:	08006d7f 	.word	0x08006d7f
 8006b08:	08006d7f 	.word	0x08006d7f
 8006b0c:	08006d7f 	.word	0x08006d7f
 8006b10:	08006d7f 	.word	0x08006d7f
 8006b14:	08006d7f 	.word	0x08006d7f
 8006b18:	08006d7f 	.word	0x08006d7f
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006d7f 	.word	0x08006d7f
 8006b24:	08006d7f 	.word	0x08006d7f
 8006b28:	08006d7f 	.word	0x08006d7f
 8006b2c:	08006d7f 	.word	0x08006d7f
 8006b30:	08006d7f 	.word	0x08006d7f
 8006b34:	08006d7f 	.word	0x08006d7f
 8006b38:	08006d7f 	.word	0x08006d7f
 8006b3c:	08006b73 	.word	0x08006b73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b40:	4b94      	ldr	r3, [pc, #592]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b4c:	4b91      	ldr	r3, [pc, #580]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	08db      	lsrs	r3, r3, #3
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	4a90      	ldr	r2, [pc, #576]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b5e:	e111      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b60:	4b8d      	ldr	r3, [pc, #564]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b62:	61bb      	str	r3, [r7, #24]
    break;
 8006b64:	e10e      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b66:	4b8d      	ldr	r3, [pc, #564]	; (8006d9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b68:	61bb      	str	r3, [r7, #24]
    break;
 8006b6a:	e10b      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006b6c:	4b8c      	ldr	r3, [pc, #560]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b6e:	61bb      	str	r3, [r7, #24]
    break;
 8006b70:	e108      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b72:	4b88      	ldr	r3, [pc, #544]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b7c:	4b85      	ldr	r3, [pc, #532]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b88:	4b82      	ldr	r3, [pc, #520]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b92:	4b80      	ldr	r3, [pc, #512]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b96:	08db      	lsrs	r3, r3, #3
 8006b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80e1 	beq.w	8006d78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	f000 8083 	beq.w	8006cc4 <HAL_RCC_GetSysClockFreq+0x204>
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	f200 80a1 	bhi.w	8006d08 <HAL_RCC_GetSysClockFreq+0x248>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x114>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d056      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bd2:	e099      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bd4:	4b6f      	ldr	r3, [pc, #444]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d02d      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006be0:	4b6c      	ldr	r3, [pc, #432]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	08db      	lsrs	r3, r3, #3
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	4a6b      	ldr	r2, [pc, #428]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0a:	4b62      	ldr	r3, [pc, #392]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c3a:	e087      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006da8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4e:	4b51      	ldr	r3, [pc, #324]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c7e:	e065      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006dac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c92:	4b40      	ldr	r3, [pc, #256]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cc2:	e043      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006db0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d06:	e021      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006dac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1a:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d4a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	0a5b      	lsrs	r3, r3, #9
 8006d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d56:	3301      	adds	r3, #1
 8006d58:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d70:	ee17 3a90 	vmov	r3, s15
 8006d74:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006d76:	e005      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
    break;
 8006d7c:	e002      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006d7e:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d80:	61bb      	str	r3, [r7, #24]
    break;
 8006d82:	bf00      	nop
  }

  return sysclockfreq;
 8006d84:	69bb      	ldr	r3, [r7, #24]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3724      	adds	r7, #36	; 0x24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	58024400 	.word	0x58024400
 8006d98:	03d09000 	.word	0x03d09000
 8006d9c:	003d0900 	.word	0x003d0900
 8006da0:	007a1200 	.word	0x007a1200
 8006da4:	46000000 	.word	0x46000000
 8006da8:	4c742400 	.word	0x4c742400
 8006dac:	4a742400 	.word	0x4a742400
 8006db0:	4af42400 	.word	0x4af42400

08006db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dba:	f7ff fe81 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	0a1b      	lsrs	r3, r3, #8
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	490f      	ldr	r1, [pc, #60]	; (8006e08 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dcc:	5ccb      	ldrb	r3, [r1, r3]
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	4a09      	ldr	r2, [pc, #36]	; (8006e08 <HAL_RCC_GetHCLKFreq+0x54>)
 8006de2:	5cd3      	ldrb	r3, [r2, r3]
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	fa22 f303 	lsr.w	r3, r2, r3
 8006dee:	4a07      	ldr	r2, [pc, #28]	; (8006e0c <HAL_RCC_GetHCLKFreq+0x58>)
 8006df0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006df2:	4a07      	ldr	r2, [pc, #28]	; (8006e10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <HAL_RCC_GetHCLKFreq+0x58>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	58024400 	.word	0x58024400
 8006e08:	0800a3b4 	.word	0x0800a3b4
 8006e0c:	24000018 	.word	0x24000018
 8006e10:	24000014 	.word	0x24000014

08006e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e18:	f7ff ffcc 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	091b      	lsrs	r3, r3, #4
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4904      	ldr	r1, [pc, #16]	; (8006e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	0800a3b4 	.word	0x0800a3b4

08006e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e44:	f7ff ffb6 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	0a1b      	lsrs	r3, r3, #8
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	4904      	ldr	r1, [pc, #16]	; (8006e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e56:	5ccb      	ldrb	r3, [r1, r3]
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	58024400 	.word	0x58024400
 8006e68:	0800a3b4 	.word	0x0800a3b4

08006e6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	223f      	movs	r2, #63	; 0x3f
 8006e7a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ee8 <HAL_RCC_GetClockConfig+0x7c>)
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f003 0207 	and.w	r2, r3, #7
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006e88:	4b17      	ldr	r3, [pc, #92]	; (8006ee8 <HAL_RCC_GetClockConfig+0x7c>)
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006e94:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <HAL_RCC_GetClockConfig+0x7c>)
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006ea0:	4b11      	ldr	r3, [pc, #68]	; (8006ee8 <HAL_RCC_GetClockConfig+0x7c>)
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006eac:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <HAL_RCC_GetClockConfig+0x7c>)
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <HAL_RCC_GetClockConfig+0x7c>)
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006ec4:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <HAL_RCC_GetClockConfig+0x7c>)
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <HAL_RCC_GetClockConfig+0x80>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 020f 	and.w	r2, r3, #15
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	601a      	str	r2, [r3, #0]
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	52002000 	.word	0x52002000

08006ef0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ef8:	2300      	movs	r3, #0
 8006efa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006efc:	2300      	movs	r3, #0
 8006efe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d03f      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f14:	d02a      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f1a:	d824      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f20:	d018      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f26:	d81e      	bhi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f30:	d007      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f32:	e018      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f34:	4ba3      	ldr	r3, [pc, #652]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4aa2      	ldr	r2, [pc, #648]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f40:	e015      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3304      	adds	r3, #4
 8006f46:	2102      	movs	r1, #2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 f9d5 	bl	80082f8 <RCCEx_PLL2_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f52:	e00c      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3324      	adds	r3, #36	; 0x24
 8006f58:	2102      	movs	r1, #2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 fa7e 	bl	800845c <RCCEx_PLL3_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f64:	e003      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6a:	e000      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f74:	4b93      	ldr	r3, [pc, #588]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f80:	4990      	ldr	r1, [pc, #576]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	650b      	str	r3, [r1, #80]	; 0x50
 8006f86:	e001      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d03d      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d826      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006fa0:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fbd 	.word	0x08006fbd
 8006fac:	08006fcb 	.word	0x08006fcb
 8006fb0:	08006fdd 	.word	0x08006fdd
 8006fb4:	08006ff5 	.word	0x08006ff5
 8006fb8:	08006ff5 	.word	0x08006ff5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fbc:	4b81      	ldr	r3, [pc, #516]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	4a80      	ldr	r2, [pc, #512]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc8:	e015      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	2100      	movs	r1, #0
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 f991 	bl	80082f8 <RCCEx_PLL2_Config>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fda:	e00c      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3324      	adds	r3, #36	; 0x24
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 fa3a 	bl	800845c <RCCEx_PLL3_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fec:	e003      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ffc:	4b71      	ldr	r3, [pc, #452]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007000:	f023 0207 	bic.w	r2, r3, #7
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007008:	496e      	ldr	r1, [pc, #440]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800700a:	4313      	orrs	r3, r2
 800700c:	650b      	str	r3, [r1, #80]	; 0x50
 800700e:	e001      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800701c:	2b00      	cmp	r3, #0
 800701e:	d042      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007028:	d02b      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800702a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800702e:	d825      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007030:	2bc0      	cmp	r3, #192	; 0xc0
 8007032:	d028      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007034:	2bc0      	cmp	r3, #192	; 0xc0
 8007036:	d821      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007038:	2b80      	cmp	r3, #128	; 0x80
 800703a:	d016      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800703c:	2b80      	cmp	r3, #128	; 0x80
 800703e:	d81d      	bhi.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007044:	2b40      	cmp	r3, #64	; 0x40
 8007046:	d007      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007048:	e018      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800704a:	4b5e      	ldr	r3, [pc, #376]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	4a5d      	ldr	r2, [pc, #372]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007056:	e017      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3304      	adds	r3, #4
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f001 f94a 	bl	80082f8 <RCCEx_PLL2_Config>
 8007064:	4603      	mov	r3, r0
 8007066:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007068:	e00e      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3324      	adds	r3, #36	; 0x24
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f001 f9f3 	bl	800845c <RCCEx_PLL3_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800707a:	e005      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	75fb      	strb	r3, [r7, #23]
      break;
 8007080:	e002      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007082:	bf00      	nop
 8007084:	e000      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800708e:	4b4d      	ldr	r3, [pc, #308]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007092:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709a:	494a      	ldr	r1, [pc, #296]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800709c:	4313      	orrs	r3, r2
 800709e:	650b      	str	r3, [r1, #80]	; 0x50
 80070a0:	e001      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d049      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070bc:	d030      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80070be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070c2:	d82a      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070c8:	d02c      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80070ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070ce:	d824      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070d4:	d018      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80070d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070da:	d81e      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80070e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070e4:	d007      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80070e6:	e018      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e8:	4b36      	ldr	r3, [pc, #216]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	4a35      	ldr	r2, [pc, #212]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070f4:	e017      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	2100      	movs	r1, #0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 f8fb 	bl	80082f8 <RCCEx_PLL2_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007106:	e00e      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3324      	adds	r3, #36	; 0x24
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f001 f9a4 	bl	800845c <RCCEx_PLL3_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007118:	e005      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
      break;
 800711e:	e002      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800712c:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800712e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007130:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800713a:	4922      	ldr	r1, [pc, #136]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800713c:	4313      	orrs	r3, r2
 800713e:	658b      	str	r3, [r1, #88]	; 0x58
 8007140:	e001      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04b      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800715c:	d030      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800715e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007162:	d82a      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007164:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007168:	d02e      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800716a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800716e:	d824      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007170:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007174:	d018      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800717a:	d81e      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007184:	d007      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007186:	e018      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007188:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	4a0d      	ldr	r2, [pc, #52]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800718e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007194:	e019      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3304      	adds	r3, #4
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f001 f8ab 	bl	80082f8 <RCCEx_PLL2_Config>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80071a6:	e010      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3324      	adds	r3, #36	; 0x24
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 f954 	bl	800845c <RCCEx_PLL3_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071b8:	e007      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
      break;
 80071be:	e004      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80071c4:	58024400 	.word	0x58024400
      break;
 80071c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071d0:	4b99      	ldr	r3, [pc, #612]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071de:	4996      	ldr	r1, [pc, #600]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	658b      	str	r3, [r1, #88]	; 0x58
 80071e4:	e001      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d032      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fa:	2b30      	cmp	r3, #48	; 0x30
 80071fc:	d01c      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80071fe:	2b30      	cmp	r3, #48	; 0x30
 8007200:	d817      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007202:	2b20      	cmp	r3, #32
 8007204:	d00c      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007206:	2b20      	cmp	r3, #32
 8007208:	d813      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d016      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800720e:	2b10      	cmp	r3, #16
 8007210:	d10f      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007212:	4b89      	ldr	r3, [pc, #548]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	4a88      	ldr	r2, [pc, #544]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800721c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800721e:	e00e      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3304      	adds	r3, #4
 8007224:	2102      	movs	r1, #2
 8007226:	4618      	mov	r0, r3
 8007228:	f001 f866 	bl	80082f8 <RCCEx_PLL2_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007230:	e005      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	75fb      	strb	r3, [r7, #23]
      break;
 8007236:	e002      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800723c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800723e:	7dfb      	ldrb	r3, [r7, #23]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007244:	4b7c      	ldr	r3, [pc, #496]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007248:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007250:	4979      	ldr	r1, [pc, #484]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007252:	4313      	orrs	r3, r2
 8007254:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007256:	e001      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d047      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007270:	d030      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007276:	d82a      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007278:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800727c:	d02c      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800727e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007282:	d824      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007288:	d018      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800728a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728e:	d81e      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007298:	d007      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800729a:	e018      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729c:	4b66      	ldr	r3, [pc, #408]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	4a65      	ldr	r2, [pc, #404]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072a8:	e017      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3304      	adds	r3, #4
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 f821 	bl	80082f8 <RCCEx_PLL2_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072ba:	e00e      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3324      	adds	r3, #36	; 0x24
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 f8ca 	bl	800845c <RCCEx_PLL3_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072cc:	e005      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
      break;
 80072d2:	e002      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80072d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072e0:	4b55      	ldr	r3, [pc, #340]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ec:	4952      	ldr	r1, [pc, #328]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	650b      	str	r3, [r1, #80]	; 0x50
 80072f2:	e001      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d049      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800730c:	d02e      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800730e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007312:	d828      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007318:	d02a      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800731a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800731e:	d822      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007324:	d026      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007326:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800732a:	d81c      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800732c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007330:	d010      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007336:	d816      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01d      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800733c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007340:	d111      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3304      	adds	r3, #4
 8007346:	2101      	movs	r1, #1
 8007348:	4618      	mov	r0, r3
 800734a:	f000 ffd5 	bl	80082f8 <RCCEx_PLL2_Config>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007352:	e012      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	2101      	movs	r1, #1
 800735a:	4618      	mov	r0, r3
 800735c:	f001 f87e 	bl	800845c <RCCEx_PLL3_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007364:	e009      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
      break;
 800736a:	e006      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800736c:	bf00      	nop
 800736e:	e004      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007370:	bf00      	nop
 8007372:	e002      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007380:	4b2d      	ldr	r3, [pc, #180]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738c:	492a      	ldr	r1, [pc, #168]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800738e:	4313      	orrs	r3, r2
 8007390:	650b      	str	r3, [r1, #80]	; 0x50
 8007392:	e001      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d04d      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073ae:	d02e      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80073b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073b4:	d828      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ba:	d02a      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c0:	d822      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80073c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073c6:	d026      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80073c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073cc:	d81c      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80073ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d2:	d010      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80073d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d8:	d816      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d01d      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80073de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073e2:	d111      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3304      	adds	r3, #4
 80073e8:	2101      	movs	r1, #1
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 ff84 	bl	80082f8 <RCCEx_PLL2_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073f4:	e012      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3324      	adds	r3, #36	; 0x24
 80073fa:	2101      	movs	r1, #1
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 f82d 	bl	800845c <RCCEx_PLL3_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007406:	e009      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
      break;
 800740c:	e006      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800740e:	bf00      	nop
 8007410:	e004      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007412:	bf00      	nop
 8007414:	e002      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007416:	bf00      	nop
 8007418:	e000      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800741a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10c      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007426:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007430:	4901      	ldr	r1, [pc, #4]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007432:	4313      	orrs	r3, r2
 8007434:	658b      	str	r3, [r1, #88]	; 0x58
 8007436:	e003      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d02f      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007454:	d00e      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800745a:	d814      	bhi.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d015      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007464:	d10f      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007466:	4baf      	ldr	r3, [pc, #700]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	4aae      	ldr	r2, [pc, #696]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800746c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007472:	e00c      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3304      	adds	r3, #4
 8007478:	2101      	movs	r1, #1
 800747a:	4618      	mov	r0, r3
 800747c:	f000 ff3c 	bl	80082f8 <RCCEx_PLL2_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007484:	e003      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
      break;
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800748c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007494:	4ba3      	ldr	r3, [pc, #652]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a0:	49a0      	ldr	r1, [pc, #640]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	650b      	str	r3, [r1, #80]	; 0x50
 80074a6:	e001      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d032      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d81b      	bhi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074ff 	.word	0x080074ff
 80074cc:	080074d9 	.word	0x080074d9
 80074d0:	080074e7 	.word	0x080074e7
 80074d4:	080074ff 	.word	0x080074ff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d8:	4b92      	ldr	r3, [pc, #584]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	4a91      	ldr	r2, [pc, #580]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074e4:	e00c      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3304      	adds	r3, #4
 80074ea:	2102      	movs	r1, #2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 ff03 	bl	80082f8 <RCCEx_PLL2_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074f6:	e003      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
      break;
 80074fc:	e000      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80074fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007506:	4b87      	ldr	r3, [pc, #540]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750a:	f023 0203 	bic.w	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007512:	4984      	ldr	r1, [pc, #528]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007514:	4313      	orrs	r3, r2
 8007516:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007518:	e001      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8086 	beq.w	8007638 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800752c:	4b7e      	ldr	r3, [pc, #504]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7d      	ldr	r2, [pc, #500]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007536:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007538:	f7fd fada 	bl	8004af0 <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800753e:	e009      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007540:	f7fd fad6 	bl	8004af0 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b64      	cmp	r3, #100	; 0x64
 800754c:	d902      	bls.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	75fb      	strb	r3, [r7, #23]
        break;
 8007552:	e005      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007554:	4b74      	ldr	r3, [pc, #464]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0ef      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d166      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007566:	4b6f      	ldr	r3, [pc, #444]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007568:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007570:	4053      	eors	r3, r2
 8007572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007576:	2b00      	cmp	r3, #0
 8007578:	d013      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800757a:	4b6a      	ldr	r3, [pc, #424]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800757c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007582:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007584:	4b67      	ldr	r3, [pc, #412]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007588:	4a66      	ldr	r2, [pc, #408]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800758a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800758e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007590:	4b64      	ldr	r3, [pc, #400]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007594:	4a63      	ldr	r2, [pc, #396]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800759a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800759c:	4a61      	ldr	r2, [pc, #388]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ac:	d115      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ae:	f7fd fa9f 	bl	8004af0 <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075b4:	e00b      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b6:	f7fd fa9b 	bl	8004af0 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d902      	bls.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	75fb      	strb	r3, [r7, #23]
            break;
 80075cc:	e005      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ce:	4b55      	ldr	r3, [pc, #340]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0ed      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d126      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ee:	d10d      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80075f0:	4b4c      	ldr	r3, [pc, #304]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075fe:	0919      	lsrs	r1, r3, #4
 8007600:	4b4a      	ldr	r3, [pc, #296]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007602:	400b      	ands	r3, r1
 8007604:	4947      	ldr	r1, [pc, #284]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007606:	4313      	orrs	r3, r2
 8007608:	610b      	str	r3, [r1, #16]
 800760a:	e005      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800760c:	4b45      	ldr	r3, [pc, #276]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	4a44      	ldr	r2, [pc, #272]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007612:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007616:	6113      	str	r3, [r2, #16]
 8007618:	4b42      	ldr	r3, [pc, #264]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800761a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007626:	493f      	ldr	r1, [pc, #252]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007628:	4313      	orrs	r3, r2
 800762a:	670b      	str	r3, [r1, #112]	; 0x70
 800762c:	e004      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	75bb      	strb	r3, [r7, #22]
 8007632:	e001      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8085 	beq.w	8007750 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800764a:	2b28      	cmp	r3, #40	; 0x28
 800764c:	d866      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800764e:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	08007731 	.word	0x08007731
 8007658:	0800771d 	.word	0x0800771d
 800765c:	0800771d 	.word	0x0800771d
 8007660:	0800771d 	.word	0x0800771d
 8007664:	0800771d 	.word	0x0800771d
 8007668:	0800771d 	.word	0x0800771d
 800766c:	0800771d 	.word	0x0800771d
 8007670:	0800771d 	.word	0x0800771d
 8007674:	080076f9 	.word	0x080076f9
 8007678:	0800771d 	.word	0x0800771d
 800767c:	0800771d 	.word	0x0800771d
 8007680:	0800771d 	.word	0x0800771d
 8007684:	0800771d 	.word	0x0800771d
 8007688:	0800771d 	.word	0x0800771d
 800768c:	0800771d 	.word	0x0800771d
 8007690:	0800771d 	.word	0x0800771d
 8007694:	0800770b 	.word	0x0800770b
 8007698:	0800771d 	.word	0x0800771d
 800769c:	0800771d 	.word	0x0800771d
 80076a0:	0800771d 	.word	0x0800771d
 80076a4:	0800771d 	.word	0x0800771d
 80076a8:	0800771d 	.word	0x0800771d
 80076ac:	0800771d 	.word	0x0800771d
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	08007731 	.word	0x08007731
 80076b8:	0800771d 	.word	0x0800771d
 80076bc:	0800771d 	.word	0x0800771d
 80076c0:	0800771d 	.word	0x0800771d
 80076c4:	0800771d 	.word	0x0800771d
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	0800771d 	.word	0x0800771d
 80076d0:	0800771d 	.word	0x0800771d
 80076d4:	08007731 	.word	0x08007731
 80076d8:	0800771d 	.word	0x0800771d
 80076dc:	0800771d 	.word	0x0800771d
 80076e0:	0800771d 	.word	0x0800771d
 80076e4:	0800771d 	.word	0x0800771d
 80076e8:	0800771d 	.word	0x0800771d
 80076ec:	0800771d 	.word	0x0800771d
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	08007731 	.word	0x08007731
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	2101      	movs	r1, #1
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fdfa 	bl	80082f8 <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007708:	e013      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3324      	adds	r3, #36	; 0x24
 800770e:	2101      	movs	r1, #1
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fea3 	bl	800845c <RCCEx_PLL3_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800771a:	e00a      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	75fb      	strb	r3, [r7, #23]
      break;
 8007720:	e007      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007722:	bf00      	nop
 8007724:	58024400 	.word	0x58024400
 8007728:	58024800 	.word	0x58024800
 800772c:	00ffffcf 	.word	0x00ffffcf
      break;
 8007730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d109      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007738:	4b96      	ldr	r3, [pc, #600]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007744:	4993      	ldr	r1, [pc, #588]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007746:	4313      	orrs	r3, r2
 8007748:	654b      	str	r3, [r1, #84]	; 0x54
 800774a:	e001      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0302 	and.w	r3, r3, #2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d038      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007760:	2b05      	cmp	r3, #5
 8007762:	d821      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007764:	a201      	add	r2, pc, #4	; (adr r2, 800776c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	080077af 	.word	0x080077af
 8007770:	08007785 	.word	0x08007785
 8007774:	08007797 	.word	0x08007797
 8007778:	080077af 	.word	0x080077af
 800777c:	080077af 	.word	0x080077af
 8007780:	080077af 	.word	0x080077af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	2101      	movs	r1, #1
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fdb4 	bl	80082f8 <RCCEx_PLL2_Config>
 8007790:	4603      	mov	r3, r0
 8007792:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007794:	e00c      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3324      	adds	r3, #36	; 0x24
 800779a:	2101      	movs	r1, #1
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fe5d 	bl	800845c <RCCEx_PLL3_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077a6:	e003      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	75fb      	strb	r3, [r7, #23]
      break;
 80077ac:	e000      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80077ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077b6:	4b77      	ldr	r3, [pc, #476]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ba:	f023 0207 	bic.w	r2, r3, #7
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c2:	4974      	ldr	r1, [pc, #464]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	654b      	str	r3, [r1, #84]	; 0x54
 80077c8:	e001      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d03a      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	d821      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	0800782f 	.word	0x0800782f
 80077f0:	08007805 	.word	0x08007805
 80077f4:	08007817 	.word	0x08007817
 80077f8:	0800782f 	.word	0x0800782f
 80077fc:	0800782f 	.word	0x0800782f
 8007800:	0800782f 	.word	0x0800782f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	2101      	movs	r1, #1
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fd74 	bl	80082f8 <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007814:	e00c      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3324      	adds	r3, #36	; 0x24
 800781a:	2101      	movs	r1, #1
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fe1d 	bl	800845c <RCCEx_PLL3_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007826:	e003      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
      break;
 800782c:	e000      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800782e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007836:	4b57      	ldr	r3, [pc, #348]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783a:	f023 0207 	bic.w	r2, r3, #7
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007844:	4953      	ldr	r1, [pc, #332]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007846:	4313      	orrs	r3, r2
 8007848:	658b      	str	r3, [r1, #88]	; 0x58
 800784a:	e001      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d04b      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007866:	d02e      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800786c:	d828      	bhi.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800786e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007872:	d02a      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007878:	d822      	bhi.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800787a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800787e:	d026      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007880:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007884:	d81c      	bhi.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800788a:	d010      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800788c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007890:	d816      	bhi.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d01d      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800789a:	d111      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3304      	adds	r3, #4
 80078a0:	2100      	movs	r1, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fd28 	bl	80082f8 <RCCEx_PLL2_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078ac:	e012      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3324      	adds	r3, #36	; 0x24
 80078b2:	2102      	movs	r1, #2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fdd1 	bl	800845c <RCCEx_PLL3_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078be:	e009      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
      break;
 80078c4:	e006      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80078c6:	bf00      	nop
 80078c8:	e004      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80078ca:	bf00      	nop
 80078cc:	e002      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80078ce:	bf00      	nop
 80078d0:	e000      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80078d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078da:	4b2e      	ldr	r3, [pc, #184]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e8:	492a      	ldr	r1, [pc, #168]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	654b      	str	r3, [r1, #84]	; 0x54
 80078ee:	e001      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d04d      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007906:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800790a:	d02e      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800790c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007910:	d828      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007916:	d02a      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791c:	d822      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800791e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007922:	d026      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007928:	d81c      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800792a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800792e:	d010      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007934:	d816      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01d      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800793a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800793e:	d111      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	2100      	movs	r1, #0
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fcd6 	bl	80082f8 <RCCEx_PLL2_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007950:	e012      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3324      	adds	r3, #36	; 0x24
 8007956:	2102      	movs	r1, #2
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fd7f 	bl	800845c <RCCEx_PLL3_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007962:	e009      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	75fb      	strb	r3, [r7, #23]
      break;
 8007968:	e006      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800796a:	bf00      	nop
 800796c:	e004      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10c      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800797e:	4b05      	ldr	r3, [pc, #20]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007982:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800798c:	4901      	ldr	r1, [pc, #4]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800798e:	4313      	orrs	r3, r2
 8007990:	658b      	str	r3, [r1, #88]	; 0x58
 8007992:	e003      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d04b      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079b2:	d02e      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80079b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079b8:	d828      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80079ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079be:	d02a      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c4:	d822      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80079c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079ca:	d026      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80079cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079d0:	d81c      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80079d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079d6:	d010      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80079d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079dc:	d816      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01d      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80079e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e6:	d111      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	2100      	movs	r1, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fc82 	bl	80082f8 <RCCEx_PLL2_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079f8:	e012      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3324      	adds	r3, #36	; 0x24
 80079fe:	2102      	movs	r1, #2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fd2b 	bl	800845c <RCCEx_PLL3_Config>
 8007a06:	4603      	mov	r3, r0
 8007a08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a0a:	e009      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a10:	e006      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a12:	bf00      	nop
 8007a14:	e004      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a16:	bf00      	nop
 8007a18:	e002      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a1a:	bf00      	nop
 8007a1c:	e000      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a26:	4b9d      	ldr	r3, [pc, #628]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a34:	4999      	ldr	r1, [pc, #612]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	658b      	str	r3, [r1, #88]	; 0x58
 8007a3a:	e001      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01a      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a56:	d10a      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3324      	adds	r3, #36	; 0x24
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fcfc 	bl	800845c <RCCEx_PLL3_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a6e:	4b8b      	ldr	r3, [pc, #556]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a7c:	4987      	ldr	r1, [pc, #540]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01a      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a98:	d10a      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3324      	adds	r3, #36	; 0x24
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fcdb 	bl	800845c <RCCEx_PLL3_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ab0:	4b7a      	ldr	r3, [pc, #488]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007abe:	4977      	ldr	r1, [pc, #476]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d034      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ada:	d01d      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ae0:	d817      	bhi.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aea:	d009      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007aec:	e011      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3304      	adds	r3, #4
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fbff 	bl	80082f8 <RCCEx_PLL2_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007afe:	e00c      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3324      	adds	r3, #36	; 0x24
 8007b04:	2102      	movs	r1, #2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fca8 	bl	800845c <RCCEx_PLL3_Config>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b10:	e003      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
      break;
 8007b16:	e000      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b20:	4b5e      	ldr	r3, [pc, #376]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b2e:	495b      	ldr	r1, [pc, #364]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	658b      	str	r3, [r1, #88]	; 0x58
 8007b34:	e001      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d033      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b50:	d01c      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007b52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b56:	d816      	bhi.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b5c:	d003      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b62:	d007      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007b64:	e00f      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b66:	4b4d      	ldr	r3, [pc, #308]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	4a4c      	ldr	r2, [pc, #304]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b72:	e00c      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3324      	adds	r3, #36	; 0x24
 8007b78:	2101      	movs	r1, #1
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 fc6e 	bl	800845c <RCCEx_PLL3_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b84:	e003      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
      break;
 8007b8a:	e000      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b94:	4b41      	ldr	r3, [pc, #260]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba2:	493e      	ldr	r1, [pc, #248]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	654b      	str	r3, [r1, #84]	; 0x54
 8007ba8:	e001      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d029      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc6:	d007      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007bc8:	e00f      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bca:	4b34      	ldr	r3, [pc, #208]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	4a33      	ldr	r2, [pc, #204]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bd6:	e00b      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	2102      	movs	r1, #2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fb8a 	bl	80082f8 <RCCEx_PLL2_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007be8:	e002      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
      break;
 8007bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bf6:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c02:	4926      	ldr	r1, [pc, #152]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c08:	e001      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3324      	adds	r3, #36	; 0x24
 8007c1e:	2102      	movs	r1, #2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fc1b 	bl	800845c <RCCEx_PLL3_Config>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d033      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c44:	d017      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c4a:	d811      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c50:	d013      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c56:	d80b      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d010      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c60:	d106      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c62:	4b0e      	ldr	r3, [pc, #56]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	4a0d      	ldr	r2, [pc, #52]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c6e:	e007      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
      break;
 8007c74:	e004      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10c      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c92:	4902      	ldr	r1, [pc, #8]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	654b      	str	r3, [r1, #84]	; 0x54
 8007c98:	e004      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007c9a:	bf00      	nop
 8007c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007cb0:	4b31      	ldr	r3, [pc, #196]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbc:	492e      	ldr	r1, [pc, #184]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007cce:	4b2a      	ldr	r3, [pc, #168]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cdc:	4926      	ldr	r1, [pc, #152]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cee:	4b22      	ldr	r3, [pc, #136]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cfa:	491f      	ldr	r1, [pc, #124]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00d      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	4a19      	ldr	r2, [pc, #100]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d16:	6113      	str	r3, [r2, #16]
 8007d18:	4b17      	ldr	r3, [pc, #92]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d22:	4915      	ldr	r1, [pc, #84]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da08      	bge.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d30:	4b11      	ldr	r3, [pc, #68]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3c:	490e      	ldr	r1, [pc, #56]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5c:	4906      	ldr	r1, [pc, #24]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007d62:	7dbb      	ldrb	r3, [r7, #22]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e000      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	58024400 	.word	0x58024400

08007d7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d80:	f7ff f818 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	091b      	lsrs	r3, r3, #4
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	4904      	ldr	r1, [pc, #16]	; (8007da4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d92:	5ccb      	ldrb	r3, [r1, r3]
 8007d94:	f003 031f 	and.w	r3, r3, #31
 8007d98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	58024400 	.word	0x58024400
 8007da4:	0800a3b4 	.word	0x0800a3b4

08007da8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b089      	sub	sp, #36	; 0x24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007db0:	4ba1      	ldr	r3, [pc, #644]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007dba:	4b9f      	ldr	r3, [pc, #636]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbe:	0b1b      	lsrs	r3, r3, #12
 8007dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007dc6:	4b9c      	ldr	r3, [pc, #624]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	091b      	lsrs	r3, r3, #4
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007dd2:	4b99      	ldr	r3, [pc, #612]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd6:	08db      	lsrs	r3, r3, #3
 8007dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	fb02 f303 	mul.w	r3, r2, r3
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8111 	beq.w	8008018 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	f000 8083 	beq.w	8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	f200 80a1 	bhi.w	8007f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d056      	beq.n	8007ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e12:	e099      	b.n	8007f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e14:	4b88      	ldr	r3, [pc, #544]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0320 	and.w	r3, r3, #32
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d02d      	beq.n	8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e20:	4b85      	ldr	r3, [pc, #532]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	08db      	lsrs	r3, r3, #3
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	4a84      	ldr	r2, [pc, #528]	; (800803c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e30:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	ee07 3a90 	vmov	s15, r3
 8007e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e4a:	4b7b      	ldr	r3, [pc, #492]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e7a:	e087      	b.n	8007f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008044 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8e:	4b6a      	ldr	r3, [pc, #424]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ebe:	e065      	b.n	8007f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed2:	4b59      	ldr	r3, [pc, #356]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f02:	e043      	b.n	8007f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800804c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f16:	4b48      	ldr	r3, [pc, #288]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f46:	e021      	b.n	8007f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5a:	4b37      	ldr	r3, [pc, #220]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f8c:	4b2a      	ldr	r3, [pc, #168]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	0a5b      	lsrs	r3, r3, #9
 8007f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fb2:	ee17 2a90 	vmov	r2, s15
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007fba:	4b1f      	ldr	r3, [pc, #124]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	0c1b      	lsrs	r3, r3, #16
 8007fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc4:	ee07 3a90 	vmov	s15, r3
 8007fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fe0:	ee17 2a90 	vmov	r2, s15
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007fe8:	4b13      	ldr	r3, [pc, #76]	; (8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	0e1b      	lsrs	r3, r3, #24
 8007fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008002:	edd7 6a07 	vldr	s13, [r7, #28]
 8008006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800800a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800800e:	ee17 2a90 	vmov	r2, s15
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008016:	e008      	b.n	800802a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
}
 800802a:	bf00      	nop
 800802c:	3724      	adds	r7, #36	; 0x24
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	58024400 	.word	0x58024400
 800803c:	03d09000 	.word	0x03d09000
 8008040:	46000000 	.word	0x46000000
 8008044:	4c742400 	.word	0x4c742400
 8008048:	4a742400 	.word	0x4a742400
 800804c:	4af42400 	.word	0x4af42400

08008050 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008050:	b480      	push	{r7}
 8008052:	b089      	sub	sp, #36	; 0x24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008058:	4ba1      	ldr	r3, [pc, #644]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800805a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805c:	f003 0303 	and.w	r3, r3, #3
 8008060:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008062:	4b9f      	ldr	r3, [pc, #636]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	0d1b      	lsrs	r3, r3, #20
 8008068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800806c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800806e:	4b9c      	ldr	r3, [pc, #624]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	0a1b      	lsrs	r3, r3, #8
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800807a:	4b99      	ldr	r3, [pc, #612]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807e:	08db      	lsrs	r3, r3, #3
 8008080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	fb02 f303 	mul.w	r3, r2, r3
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8111 	beq.w	80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	f000 8083 	beq.w	80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	f200 80a1 	bhi.w	80081f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d056      	beq.n	8008168 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80080ba:	e099      	b.n	80081f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080bc:	4b88      	ldr	r3, [pc, #544]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d02d      	beq.n	8008124 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080c8:	4b85      	ldr	r3, [pc, #532]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	08db      	lsrs	r3, r3, #3
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	4a84      	ldr	r2, [pc, #528]	; (80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080d4:	fa22 f303 	lsr.w	r3, r2, r3
 80080d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	ee07 3a90 	vmov	s15, r3
 80080e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080f2:	4b7b      	ldr	r3, [pc, #492]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008102:	ed97 6a03 	vldr	s12, [r7, #12]
 8008106:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800810a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800811a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008122:	e087      	b.n	8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008136:	4b6a      	ldr	r3, [pc, #424]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008146:	ed97 6a03 	vldr	s12, [r7, #12]
 800814a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800814e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800815a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008166:	e065      	b.n	8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008172:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800817a:	4b59      	ldr	r3, [pc, #356]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818a:	ed97 6a03 	vldr	s12, [r7, #12]
 800818e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800819e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081aa:	e043      	b.n	8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80081ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081be:	4b48      	ldr	r3, [pc, #288]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80081d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081ee:	e021      	b.n	8008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	ee07 3a90 	vmov	s15, r3
 80081f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008202:	4b37      	ldr	r3, [pc, #220]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008212:	ed97 6a03 	vldr	s12, [r7, #12]
 8008216:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800821a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800821e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800822a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008232:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008234:	4b2a      	ldr	r3, [pc, #168]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	0a5b      	lsrs	r3, r3, #9
 800823a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800824a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800824e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825a:	ee17 2a90 	vmov	r2, s15
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008262:	4b1f      	ldr	r3, [pc, #124]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	0c1b      	lsrs	r3, r3, #16
 8008268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008278:	ee37 7a87 	vadd.f32	s14, s15, s14
 800827c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008288:	ee17 2a90 	vmov	r2, s15
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008290:	4b13      	ldr	r3, [pc, #76]	; (80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	0e1b      	lsrs	r3, r3, #24
 8008296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082b6:	ee17 2a90 	vmov	r2, s15
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082be:	e008      	b.n	80082d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	609a      	str	r2, [r3, #8]
}
 80082d2:	bf00      	nop
 80082d4:	3724      	adds	r7, #36	; 0x24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	58024400 	.word	0x58024400
 80082e4:	03d09000 	.word	0x03d09000
 80082e8:	46000000 	.word	0x46000000
 80082ec:	4c742400 	.word	0x4c742400
 80082f0:	4a742400 	.word	0x4a742400
 80082f4:	4af42400 	.word	0x4af42400

080082f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008306:	4b53      	ldr	r3, [pc, #332]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b03      	cmp	r3, #3
 8008310:	d101      	bne.n	8008316 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e099      	b.n	800844a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008316:	4b4f      	ldr	r3, [pc, #316]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a4e      	ldr	r2, [pc, #312]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 800831c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008322:	f7fc fbe5 	bl	8004af0 <HAL_GetTick>
 8008326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008328:	e008      	b.n	800833c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800832a:	f7fc fbe1 	bl	8004af0 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	2b02      	cmp	r3, #2
 8008336:	d901      	bls.n	800833c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e086      	b.n	800844a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800833c:	4b45      	ldr	r3, [pc, #276]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1f0      	bne.n	800832a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008348:	4b42      	ldr	r3, [pc, #264]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	031b      	lsls	r3, r3, #12
 8008356:	493f      	ldr	r1, [pc, #252]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 8008358:	4313      	orrs	r3, r2
 800835a:	628b      	str	r3, [r1, #40]	; 0x28
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	3b01      	subs	r3, #1
 8008362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	3b01      	subs	r3, #1
 800836c:	025b      	lsls	r3, r3, #9
 800836e:	b29b      	uxth	r3, r3
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	3b01      	subs	r3, #1
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	3b01      	subs	r3, #1
 8008386:	061b      	lsls	r3, r3, #24
 8008388:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800838c:	4931      	ldr	r1, [pc, #196]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 800838e:	4313      	orrs	r3, r2
 8008390:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008392:	4b30      	ldr	r3, [pc, #192]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	492d      	ldr	r1, [pc, #180]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083a4:	4b2b      	ldr	r3, [pc, #172]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	f023 0220 	bic.w	r2, r3, #32
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	4928      	ldr	r1, [pc, #160]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083b6:	4b27      	ldr	r3, [pc, #156]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	4a26      	ldr	r2, [pc, #152]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083bc:	f023 0310 	bic.w	r3, r3, #16
 80083c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083c2:	4b24      	ldr	r3, [pc, #144]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083c6:	4b24      	ldr	r3, [pc, #144]	; (8008458 <RCCEx_PLL2_Config+0x160>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	69d2      	ldr	r2, [r2, #28]
 80083ce:	00d2      	lsls	r2, r2, #3
 80083d0:	4920      	ldr	r1, [pc, #128]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083d6:	4b1f      	ldr	r3, [pc, #124]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	4a1e      	ldr	r2, [pc, #120]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083dc:	f043 0310 	orr.w	r3, r3, #16
 80083e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d106      	bne.n	80083f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083e8:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	4a19      	ldr	r2, [pc, #100]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083f4:	e00f      	b.n	8008416 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d106      	bne.n	800840a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083fc:	4b15      	ldr	r3, [pc, #84]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	4a14      	ldr	r2, [pc, #80]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 8008402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008408:	e005      	b.n	8008416 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800840a:	4b12      	ldr	r3, [pc, #72]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 800840c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840e:	4a11      	ldr	r2, [pc, #68]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 8008410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008414:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008416:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a0e      	ldr	r2, [pc, #56]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 800841c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008422:	f7fc fb65 	bl	8004af0 <HAL_GetTick>
 8008426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008428:	e008      	b.n	800843c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800842a:	f7fc fb61 	bl	8004af0 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d901      	bls.n	800843c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e006      	b.n	800844a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800843c:	4b05      	ldr	r3, [pc, #20]	; (8008454 <RCCEx_PLL2_Config+0x15c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0f0      	beq.n	800842a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	58024400 	.word	0x58024400
 8008458:	ffff0007 	.word	0xffff0007

0800845c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800846a:	4b53      	ldr	r3, [pc, #332]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	2b03      	cmp	r3, #3
 8008474:	d101      	bne.n	800847a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e099      	b.n	80085ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800847a:	4b4f      	ldr	r3, [pc, #316]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a4e      	ldr	r2, [pc, #312]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008486:	f7fc fb33 	bl	8004af0 <HAL_GetTick>
 800848a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800848c:	e008      	b.n	80084a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800848e:	f7fc fb2f 	bl	8004af0 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d901      	bls.n	80084a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e086      	b.n	80085ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084a0:	4b45      	ldr	r3, [pc, #276]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f0      	bne.n	800848e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084ac:	4b42      	ldr	r3, [pc, #264]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	051b      	lsls	r3, r3, #20
 80084ba:	493f      	ldr	r1, [pc, #252]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	628b      	str	r3, [r1, #40]	; 0x28
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	025b      	lsls	r3, r3, #9
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	3b01      	subs	r3, #1
 80084dc:	041b      	lsls	r3, r3, #16
 80084de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	061b      	lsls	r3, r3, #24
 80084ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084f0:	4931      	ldr	r1, [pc, #196]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084f6:	4b30      	ldr	r3, [pc, #192]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	492d      	ldr	r1, [pc, #180]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008504:	4313      	orrs	r3, r2
 8008506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008508:	4b2b      	ldr	r3, [pc, #172]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	4928      	ldr	r1, [pc, #160]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008516:	4313      	orrs	r3, r2
 8008518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800851a:	4b27      	ldr	r3, [pc, #156]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	4a26      	ldr	r2, [pc, #152]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008526:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800852a:	4b24      	ldr	r3, [pc, #144]	; (80085bc <RCCEx_PLL3_Config+0x160>)
 800852c:	4013      	ands	r3, r2
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	69d2      	ldr	r2, [r2, #28]
 8008532:	00d2      	lsls	r2, r2, #3
 8008534:	4920      	ldr	r1, [pc, #128]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008536:	4313      	orrs	r3, r2
 8008538:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800853a:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800854c:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008552:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008558:	e00f      	b.n	800857a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d106      	bne.n	800856e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008560:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	4a14      	ldr	r2, [pc, #80]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800856a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800856c:	e005      	b.n	800857a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800856e:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	4a11      	ldr	r2, [pc, #68]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a0e      	ldr	r2, [pc, #56]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 8008580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008586:	f7fc fab3 	bl	8004af0 <HAL_GetTick>
 800858a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800858c:	e008      	b.n	80085a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800858e:	f7fc faaf 	bl	8004af0 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d901      	bls.n	80085a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e006      	b.n	80085ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <RCCEx_PLL3_Config+0x15c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0f0      	beq.n	800858e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	58024400 	.word	0x58024400
 80085bc:	ffff0007 	.word	0xffff0007

080085c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e049      	b.n	8008666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f841 	bl	800866e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3304      	adds	r3, #4
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f000 f9f8 	bl	80089f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b01      	cmp	r3, #1
 8008696:	d001      	beq.n	800869c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e04f      	b.n	800873c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0201 	orr.w	r2, r2, #1
 80086b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a23      	ldr	r2, [pc, #140]	; (8008748 <HAL_TIM_Base_Start_IT+0xc4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d01d      	beq.n	80086fa <HAL_TIM_Base_Start_IT+0x76>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086c6:	d018      	beq.n	80086fa <HAL_TIM_Base_Start_IT+0x76>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1f      	ldr	r2, [pc, #124]	; (800874c <HAL_TIM_Base_Start_IT+0xc8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d013      	beq.n	80086fa <HAL_TIM_Base_Start_IT+0x76>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1e      	ldr	r2, [pc, #120]	; (8008750 <HAL_TIM_Base_Start_IT+0xcc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00e      	beq.n	80086fa <HAL_TIM_Base_Start_IT+0x76>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1c      	ldr	r2, [pc, #112]	; (8008754 <HAL_TIM_Base_Start_IT+0xd0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d009      	beq.n	80086fa <HAL_TIM_Base_Start_IT+0x76>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <HAL_TIM_Base_Start_IT+0xd4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d004      	beq.n	80086fa <HAL_TIM_Base_Start_IT+0x76>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a19      	ldr	r2, [pc, #100]	; (800875c <HAL_TIM_Base_Start_IT+0xd8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d115      	bne.n	8008726 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	4b17      	ldr	r3, [pc, #92]	; (8008760 <HAL_TIM_Base_Start_IT+0xdc>)
 8008702:	4013      	ands	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b06      	cmp	r3, #6
 800870a:	d015      	beq.n	8008738 <HAL_TIM_Base_Start_IT+0xb4>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008712:	d011      	beq.n	8008738 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0201 	orr.w	r2, r2, #1
 8008722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008724:	e008      	b.n	8008738 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f042 0201 	orr.w	r2, r2, #1
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	e000      	b.n	800873a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008738:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	40010000 	.word	0x40010000
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40010400 	.word	0x40010400
 800875c:	40001800 	.word	0x40001800
 8008760:	00010007 	.word	0x00010007

08008764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b02      	cmp	r3, #2
 8008778:	d122      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b02      	cmp	r3, #2
 8008786:	d11b      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f06f 0202 	mvn.w	r2, #2
 8008790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f905 	bl	80089b6 <HAL_TIM_IC_CaptureCallback>
 80087ac:	e005      	b.n	80087ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f8f7 	bl	80089a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f908 	bl	80089ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	d122      	bne.n	8008814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d11b      	bne.n	8008814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f06f 0204 	mvn.w	r2, #4
 80087e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2202      	movs	r2, #2
 80087ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f8db 	bl	80089b6 <HAL_TIM_IC_CaptureCallback>
 8008800:	e005      	b.n	800880e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f8cd 	bl	80089a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f8de 	bl	80089ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b08      	cmp	r3, #8
 8008820:	d122      	bne.n	8008868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b08      	cmp	r3, #8
 800882e:	d11b      	bne.n	8008868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f06f 0208 	mvn.w	r2, #8
 8008838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2204      	movs	r2, #4
 800883e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	f003 0303 	and.w	r3, r3, #3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f8b1 	bl	80089b6 <HAL_TIM_IC_CaptureCallback>
 8008854:	e005      	b.n	8008862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f8a3 	bl	80089a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f8b4 	bl	80089ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0310 	and.w	r3, r3, #16
 8008872:	2b10      	cmp	r3, #16
 8008874:	d122      	bne.n	80088bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	2b10      	cmp	r3, #16
 8008882:	d11b      	bne.n	80088bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0210 	mvn.w	r2, #16
 800888c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2208      	movs	r2, #8
 8008892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f887 	bl	80089b6 <HAL_TIM_IC_CaptureCallback>
 80088a8:	e005      	b.n	80088b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f879 	bl	80089a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f88a 	bl	80089ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d10e      	bne.n	80088e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d107      	bne.n	80088e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f06f 0201 	mvn.w	r2, #1
 80088e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fb fdfa 	bl	80044dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f2:	2b80      	cmp	r3, #128	; 0x80
 80088f4:	d10e      	bne.n	8008914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008900:	2b80      	cmp	r3, #128	; 0x80
 8008902:	d107      	bne.n	8008914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800890c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f914 	bl	8008b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008922:	d10e      	bne.n	8008942 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892e:	2b80      	cmp	r3, #128	; 0x80
 8008930:	d107      	bne.n	8008942 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800893a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f907 	bl	8008b50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894c:	2b40      	cmp	r3, #64	; 0x40
 800894e:	d10e      	bne.n	800896e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895a:	2b40      	cmp	r3, #64	; 0x40
 800895c:	d107      	bne.n	800896e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f838 	bl	80089de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	f003 0320 	and.w	r3, r3, #32
 8008978:	2b20      	cmp	r3, #32
 800897a:	d10e      	bne.n	800899a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f003 0320 	and.w	r3, r3, #32
 8008986:	2b20      	cmp	r3, #32
 8008988:	d107      	bne.n	800899a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f06f 0220 	mvn.w	r2, #32
 8008992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f8c7 	bl	8008b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089aa:	bf00      	nop
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089e6:	bf00      	nop
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
	...

080089f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a40      	ldr	r2, [pc, #256]	; (8008b08 <TIM_Base_SetConfig+0x114>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d013      	beq.n	8008a34 <TIM_Base_SetConfig+0x40>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a12:	d00f      	beq.n	8008a34 <TIM_Base_SetConfig+0x40>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a3d      	ldr	r2, [pc, #244]	; (8008b0c <TIM_Base_SetConfig+0x118>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00b      	beq.n	8008a34 <TIM_Base_SetConfig+0x40>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a3c      	ldr	r2, [pc, #240]	; (8008b10 <TIM_Base_SetConfig+0x11c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d007      	beq.n	8008a34 <TIM_Base_SetConfig+0x40>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a3b      	ldr	r2, [pc, #236]	; (8008b14 <TIM_Base_SetConfig+0x120>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d003      	beq.n	8008a34 <TIM_Base_SetConfig+0x40>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a3a      	ldr	r2, [pc, #232]	; (8008b18 <TIM_Base_SetConfig+0x124>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d108      	bne.n	8008a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a2f      	ldr	r2, [pc, #188]	; (8008b08 <TIM_Base_SetConfig+0x114>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d01f      	beq.n	8008a8e <TIM_Base_SetConfig+0x9a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a54:	d01b      	beq.n	8008a8e <TIM_Base_SetConfig+0x9a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a2c      	ldr	r2, [pc, #176]	; (8008b0c <TIM_Base_SetConfig+0x118>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d017      	beq.n	8008a8e <TIM_Base_SetConfig+0x9a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a2b      	ldr	r2, [pc, #172]	; (8008b10 <TIM_Base_SetConfig+0x11c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d013      	beq.n	8008a8e <TIM_Base_SetConfig+0x9a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <TIM_Base_SetConfig+0x120>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00f      	beq.n	8008a8e <TIM_Base_SetConfig+0x9a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a29      	ldr	r2, [pc, #164]	; (8008b18 <TIM_Base_SetConfig+0x124>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00b      	beq.n	8008a8e <TIM_Base_SetConfig+0x9a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a28      	ldr	r2, [pc, #160]	; (8008b1c <TIM_Base_SetConfig+0x128>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d007      	beq.n	8008a8e <TIM_Base_SetConfig+0x9a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a27      	ldr	r2, [pc, #156]	; (8008b20 <TIM_Base_SetConfig+0x12c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d003      	beq.n	8008a8e <TIM_Base_SetConfig+0x9a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a26      	ldr	r2, [pc, #152]	; (8008b24 <TIM_Base_SetConfig+0x130>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d108      	bne.n	8008aa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a10      	ldr	r2, [pc, #64]	; (8008b08 <TIM_Base_SetConfig+0x114>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00f      	beq.n	8008aec <TIM_Base_SetConfig+0xf8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a12      	ldr	r2, [pc, #72]	; (8008b18 <TIM_Base_SetConfig+0x124>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00b      	beq.n	8008aec <TIM_Base_SetConfig+0xf8>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a11      	ldr	r2, [pc, #68]	; (8008b1c <TIM_Base_SetConfig+0x128>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d007      	beq.n	8008aec <TIM_Base_SetConfig+0xf8>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a10      	ldr	r2, [pc, #64]	; (8008b20 <TIM_Base_SetConfig+0x12c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d003      	beq.n	8008aec <TIM_Base_SetConfig+0xf8>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a0f      	ldr	r2, [pc, #60]	; (8008b24 <TIM_Base_SetConfig+0x130>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d103      	bne.n	8008af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	691a      	ldr	r2, [r3, #16]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	615a      	str	r2, [r3, #20]
}
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40010000 	.word	0x40010000
 8008b0c:	40000400 	.word	0x40000400
 8008b10:	40000800 	.word	0x40000800
 8008b14:	40000c00 	.word	0x40000c00
 8008b18:	40010400 	.word	0x40010400
 8008b1c:	40014000 	.word	0x40014000
 8008b20:	40014400 	.word	0x40014400
 8008b24:	40014800 	.word	0x40014800

08008b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e042      	b.n	8008bfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7fb fd47 	bl	800461c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2224      	movs	r2, #36	; 0x24
 8008b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 0201 	bic.w	r2, r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f8c2 	bl	8008d30 <UART_SetConfig>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d101      	bne.n	8008bb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e022      	b.n	8008bfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fe20 	bl	8009804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0201 	orr.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fea7 	bl	8009948 <UART_CheckIdleState>
 8008bfa:	4603      	mov	r3, r0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08a      	sub	sp, #40	; 0x28
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	4613      	mov	r3, r2
 8008c12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	f040 8083 	bne.w	8008d26 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <HAL_UART_Transmit+0x28>
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e07b      	b.n	8008d28 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <HAL_UART_Transmit+0x3a>
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	e074      	b.n	8008d28 <HAL_UART_Transmit+0x124>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2221      	movs	r2, #33	; 0x21
 8008c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c56:	f7fb ff4b 	bl	8004af0 <HAL_GetTick>
 8008c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	88fa      	ldrh	r2, [r7, #6]
 8008c60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	88fa      	ldrh	r2, [r7, #6]
 8008c68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c74:	d108      	bne.n	8008c88 <HAL_UART_Transmit+0x84>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d104      	bne.n	8008c88 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e003      	b.n	8008c90 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008c98:	e02c      	b.n	8008cf4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2180      	movs	r1, #128	; 0x80
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fe9a 	bl	80099de <UART_WaitOnFlagUntilTimeout>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e039      	b.n	8008d28 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	3302      	adds	r3, #2
 8008cce:	61bb      	str	r3, [r7, #24]
 8008cd0:	e007      	b.n	8008ce2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	781a      	ldrb	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1cc      	bne.n	8008c9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2200      	movs	r2, #0
 8008d08:	2140      	movs	r1, #64	; 0x40
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 fe67 	bl	80099de <UART_WaitOnFlagUntilTimeout>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e006      	b.n	8008d28 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	e000      	b.n	8008d28 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008d26:	2302      	movs	r3, #2
  }
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d34:	b092      	sub	sp, #72	; 0x48
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	4bbe      	ldr	r3, [pc, #760]	; (8009058 <UART_SetConfig+0x328>)
 8008d60:	4013      	ands	r3, r2
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	6812      	ldr	r2, [r2, #0]
 8008d66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4ab3      	ldr	r2, [pc, #716]	; (800905c <UART_SetConfig+0x32c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d004      	beq.n	8008d9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	4baf      	ldr	r3, [pc, #700]	; (8009060 <UART_SetConfig+0x330>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dac:	430b      	orrs	r3, r1
 8008dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	f023 010f 	bic.w	r1, r3, #15
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4aa6      	ldr	r2, [pc, #664]	; (8009064 <UART_SetConfig+0x334>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d177      	bne.n	8008ec0 <UART_SetConfig+0x190>
 8008dd0:	4ba5      	ldr	r3, [pc, #660]	; (8009068 <UART_SetConfig+0x338>)
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dd8:	2b28      	cmp	r3, #40	; 0x28
 8008dda:	d86d      	bhi.n	8008eb8 <UART_SetConfig+0x188>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <UART_SetConfig+0xb4>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008e89 	.word	0x08008e89
 8008de8:	08008eb9 	.word	0x08008eb9
 8008dec:	08008eb9 	.word	0x08008eb9
 8008df0:	08008eb9 	.word	0x08008eb9
 8008df4:	08008eb9 	.word	0x08008eb9
 8008df8:	08008eb9 	.word	0x08008eb9
 8008dfc:	08008eb9 	.word	0x08008eb9
 8008e00:	08008eb9 	.word	0x08008eb9
 8008e04:	08008e91 	.word	0x08008e91
 8008e08:	08008eb9 	.word	0x08008eb9
 8008e0c:	08008eb9 	.word	0x08008eb9
 8008e10:	08008eb9 	.word	0x08008eb9
 8008e14:	08008eb9 	.word	0x08008eb9
 8008e18:	08008eb9 	.word	0x08008eb9
 8008e1c:	08008eb9 	.word	0x08008eb9
 8008e20:	08008eb9 	.word	0x08008eb9
 8008e24:	08008e99 	.word	0x08008e99
 8008e28:	08008eb9 	.word	0x08008eb9
 8008e2c:	08008eb9 	.word	0x08008eb9
 8008e30:	08008eb9 	.word	0x08008eb9
 8008e34:	08008eb9 	.word	0x08008eb9
 8008e38:	08008eb9 	.word	0x08008eb9
 8008e3c:	08008eb9 	.word	0x08008eb9
 8008e40:	08008eb9 	.word	0x08008eb9
 8008e44:	08008ea1 	.word	0x08008ea1
 8008e48:	08008eb9 	.word	0x08008eb9
 8008e4c:	08008eb9 	.word	0x08008eb9
 8008e50:	08008eb9 	.word	0x08008eb9
 8008e54:	08008eb9 	.word	0x08008eb9
 8008e58:	08008eb9 	.word	0x08008eb9
 8008e5c:	08008eb9 	.word	0x08008eb9
 8008e60:	08008eb9 	.word	0x08008eb9
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008eb9 	.word	0x08008eb9
 8008e6c:	08008eb9 	.word	0x08008eb9
 8008e70:	08008eb9 	.word	0x08008eb9
 8008e74:	08008eb9 	.word	0x08008eb9
 8008e78:	08008eb9 	.word	0x08008eb9
 8008e7c:	08008eb9 	.word	0x08008eb9
 8008e80:	08008eb9 	.word	0x08008eb9
 8008e84:	08008eb1 	.word	0x08008eb1
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8e:	e222      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008e90:	2304      	movs	r3, #4
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e96:	e21e      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9e:	e21a      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea6:	e216      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eae:	e212      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008eb0:	2340      	movs	r3, #64	; 0x40
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb6:	e20e      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008eb8:	2380      	movs	r3, #128	; 0x80
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ebe:	e20a      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a69      	ldr	r2, [pc, #420]	; (800906c <UART_SetConfig+0x33c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d130      	bne.n	8008f2c <UART_SetConfig+0x1fc>
 8008eca:	4b67      	ldr	r3, [pc, #412]	; (8009068 <UART_SetConfig+0x338>)
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	d826      	bhi.n	8008f24 <UART_SetConfig+0x1f4>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <UART_SetConfig+0x1ac>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008ef5 	.word	0x08008ef5
 8008ee0:	08008efd 	.word	0x08008efd
 8008ee4:	08008f05 	.word	0x08008f05
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	08008f1d 	.word	0x08008f1d
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efa:	e1ec      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008efc:	2304      	movs	r3, #4
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f02:	e1e8      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f04:	2308      	movs	r3, #8
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0a:	e1e4      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f0c:	2310      	movs	r3, #16
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f12:	e1e0      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f14:	2320      	movs	r3, #32
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1a:	e1dc      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f1c:	2340      	movs	r3, #64	; 0x40
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f22:	e1d8      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f24:	2380      	movs	r3, #128	; 0x80
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2a:	e1d4      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a4f      	ldr	r2, [pc, #316]	; (8009070 <UART_SetConfig+0x340>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d130      	bne.n	8008f98 <UART_SetConfig+0x268>
 8008f36:	4b4c      	ldr	r3, [pc, #304]	; (8009068 <UART_SetConfig+0x338>)
 8008f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	2b05      	cmp	r3, #5
 8008f40:	d826      	bhi.n	8008f90 <UART_SetConfig+0x260>
 8008f42:	a201      	add	r2, pc, #4	; (adr r2, 8008f48 <UART_SetConfig+0x218>)
 8008f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f48:	08008f61 	.word	0x08008f61
 8008f4c:	08008f69 	.word	0x08008f69
 8008f50:	08008f71 	.word	0x08008f71
 8008f54:	08008f79 	.word	0x08008f79
 8008f58:	08008f81 	.word	0x08008f81
 8008f5c:	08008f89 	.word	0x08008f89
 8008f60:	2300      	movs	r3, #0
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f66:	e1b6      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6e:	e1b2      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f70:	2308      	movs	r3, #8
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f76:	e1ae      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f78:	2310      	movs	r3, #16
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7e:	e1aa      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f80:	2320      	movs	r3, #32
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f86:	e1a6      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f88:	2340      	movs	r3, #64	; 0x40
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f8e:	e1a2      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f90:	2380      	movs	r3, #128	; 0x80
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f96:	e19e      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a35      	ldr	r2, [pc, #212]	; (8009074 <UART_SetConfig+0x344>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d130      	bne.n	8009004 <UART_SetConfig+0x2d4>
 8008fa2:	4b31      	ldr	r3, [pc, #196]	; (8009068 <UART_SetConfig+0x338>)
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b05      	cmp	r3, #5
 8008fac:	d826      	bhi.n	8008ffc <UART_SetConfig+0x2cc>
 8008fae:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <UART_SetConfig+0x284>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08008fcd 	.word	0x08008fcd
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	08008fdd 	.word	0x08008fdd
 8008fc0:	08008fe5 	.word	0x08008fe5
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08008ff5 	.word	0x08008ff5
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd2:	e180      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fda:	e17c      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008fdc:	2308      	movs	r3, #8
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe2:	e178      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fea:	e174      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008fec:	2320      	movs	r3, #32
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ff2:	e170      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008ff4:	2340      	movs	r3, #64	; 0x40
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ffa:	e16c      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8008ffc:	2380      	movs	r3, #128	; 0x80
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009002:	e168      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1b      	ldr	r2, [pc, #108]	; (8009078 <UART_SetConfig+0x348>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d142      	bne.n	8009094 <UART_SetConfig+0x364>
 800900e:	4b16      	ldr	r3, [pc, #88]	; (8009068 <UART_SetConfig+0x338>)
 8009010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	2b05      	cmp	r3, #5
 8009018:	d838      	bhi.n	800908c <UART_SetConfig+0x35c>
 800901a:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <UART_SetConfig+0x2f0>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009039 	.word	0x08009039
 8009024:	08009041 	.word	0x08009041
 8009028:	08009049 	.word	0x08009049
 800902c:	08009051 	.word	0x08009051
 8009030:	0800907d 	.word	0x0800907d
 8009034:	08009085 	.word	0x08009085
 8009038:	2300      	movs	r3, #0
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903e:	e14a      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009040:	2304      	movs	r3, #4
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009046:	e146      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009048:	2308      	movs	r3, #8
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904e:	e142      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009050:	2310      	movs	r3, #16
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009056:	e13e      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009058:	cfff69f3 	.word	0xcfff69f3
 800905c:	58000c00 	.word	0x58000c00
 8009060:	11fff4ff 	.word	0x11fff4ff
 8009064:	40011000 	.word	0x40011000
 8009068:	58024400 	.word	0x58024400
 800906c:	40004400 	.word	0x40004400
 8009070:	40004800 	.word	0x40004800
 8009074:	40004c00 	.word	0x40004c00
 8009078:	40005000 	.word	0x40005000
 800907c:	2320      	movs	r3, #32
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e128      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009084:	2340      	movs	r3, #64	; 0x40
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908a:	e124      	b.n	80092d6 <UART_SetConfig+0x5a6>
 800908c:	2380      	movs	r3, #128	; 0x80
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009092:	e120      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4acb      	ldr	r2, [pc, #812]	; (80093c8 <UART_SetConfig+0x698>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d176      	bne.n	800918c <UART_SetConfig+0x45c>
 800909e:	4bcb      	ldr	r3, [pc, #812]	; (80093cc <UART_SetConfig+0x69c>)
 80090a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090a6:	2b28      	cmp	r3, #40	; 0x28
 80090a8:	d86c      	bhi.n	8009184 <UART_SetConfig+0x454>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <UART_SetConfig+0x380>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	08009155 	.word	0x08009155
 80090b4:	08009185 	.word	0x08009185
 80090b8:	08009185 	.word	0x08009185
 80090bc:	08009185 	.word	0x08009185
 80090c0:	08009185 	.word	0x08009185
 80090c4:	08009185 	.word	0x08009185
 80090c8:	08009185 	.word	0x08009185
 80090cc:	08009185 	.word	0x08009185
 80090d0:	0800915d 	.word	0x0800915d
 80090d4:	08009185 	.word	0x08009185
 80090d8:	08009185 	.word	0x08009185
 80090dc:	08009185 	.word	0x08009185
 80090e0:	08009185 	.word	0x08009185
 80090e4:	08009185 	.word	0x08009185
 80090e8:	08009185 	.word	0x08009185
 80090ec:	08009185 	.word	0x08009185
 80090f0:	08009165 	.word	0x08009165
 80090f4:	08009185 	.word	0x08009185
 80090f8:	08009185 	.word	0x08009185
 80090fc:	08009185 	.word	0x08009185
 8009100:	08009185 	.word	0x08009185
 8009104:	08009185 	.word	0x08009185
 8009108:	08009185 	.word	0x08009185
 800910c:	08009185 	.word	0x08009185
 8009110:	0800916d 	.word	0x0800916d
 8009114:	08009185 	.word	0x08009185
 8009118:	08009185 	.word	0x08009185
 800911c:	08009185 	.word	0x08009185
 8009120:	08009185 	.word	0x08009185
 8009124:	08009185 	.word	0x08009185
 8009128:	08009185 	.word	0x08009185
 800912c:	08009185 	.word	0x08009185
 8009130:	08009175 	.word	0x08009175
 8009134:	08009185 	.word	0x08009185
 8009138:	08009185 	.word	0x08009185
 800913c:	08009185 	.word	0x08009185
 8009140:	08009185 	.word	0x08009185
 8009144:	08009185 	.word	0x08009185
 8009148:	08009185 	.word	0x08009185
 800914c:	08009185 	.word	0x08009185
 8009150:	0800917d 	.word	0x0800917d
 8009154:	2301      	movs	r3, #1
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915a:	e0bc      	b.n	80092d6 <UART_SetConfig+0x5a6>
 800915c:	2304      	movs	r3, #4
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009162:	e0b8      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009164:	2308      	movs	r3, #8
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916a:	e0b4      	b.n	80092d6 <UART_SetConfig+0x5a6>
 800916c:	2310      	movs	r3, #16
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009172:	e0b0      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009174:	2320      	movs	r3, #32
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917a:	e0ac      	b.n	80092d6 <UART_SetConfig+0x5a6>
 800917c:	2340      	movs	r3, #64	; 0x40
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009182:	e0a8      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009184:	2380      	movs	r3, #128	; 0x80
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918a:	e0a4      	b.n	80092d6 <UART_SetConfig+0x5a6>
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a8f      	ldr	r2, [pc, #572]	; (80093d0 <UART_SetConfig+0x6a0>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d130      	bne.n	80091f8 <UART_SetConfig+0x4c8>
 8009196:	4b8d      	ldr	r3, [pc, #564]	; (80093cc <UART_SetConfig+0x69c>)
 8009198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	2b05      	cmp	r3, #5
 80091a0:	d826      	bhi.n	80091f0 <UART_SetConfig+0x4c0>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <UART_SetConfig+0x478>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091c1 	.word	0x080091c1
 80091ac:	080091c9 	.word	0x080091c9
 80091b0:	080091d1 	.word	0x080091d1
 80091b4:	080091d9 	.word	0x080091d9
 80091b8:	080091e1 	.word	0x080091e1
 80091bc:	080091e9 	.word	0x080091e9
 80091c0:	2300      	movs	r3, #0
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c6:	e086      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80091c8:	2304      	movs	r3, #4
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ce:	e082      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80091d0:	2308      	movs	r3, #8
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d6:	e07e      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80091d8:	2310      	movs	r3, #16
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091de:	e07a      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80091e0:	2320      	movs	r3, #32
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091e6:	e076      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80091e8:	2340      	movs	r3, #64	; 0x40
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ee:	e072      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80091f0:	2380      	movs	r3, #128	; 0x80
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091f6:	e06e      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a75      	ldr	r2, [pc, #468]	; (80093d4 <UART_SetConfig+0x6a4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d130      	bne.n	8009264 <UART_SetConfig+0x534>
 8009202:	4b72      	ldr	r3, [pc, #456]	; (80093cc <UART_SetConfig+0x69c>)
 8009204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	2b05      	cmp	r3, #5
 800920c:	d826      	bhi.n	800925c <UART_SetConfig+0x52c>
 800920e:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <UART_SetConfig+0x4e4>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	0800922d 	.word	0x0800922d
 8009218:	08009235 	.word	0x08009235
 800921c:	0800923d 	.word	0x0800923d
 8009220:	08009245 	.word	0x08009245
 8009224:	0800924d 	.word	0x0800924d
 8009228:	08009255 	.word	0x08009255
 800922c:	2300      	movs	r3, #0
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009232:	e050      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009234:	2304      	movs	r3, #4
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923a:	e04c      	b.n	80092d6 <UART_SetConfig+0x5a6>
 800923c:	2308      	movs	r3, #8
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009242:	e048      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009244:	2310      	movs	r3, #16
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800924a:	e044      	b.n	80092d6 <UART_SetConfig+0x5a6>
 800924c:	2320      	movs	r3, #32
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009252:	e040      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009254:	2340      	movs	r3, #64	; 0x40
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800925a:	e03c      	b.n	80092d6 <UART_SetConfig+0x5a6>
 800925c:	2380      	movs	r3, #128	; 0x80
 800925e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009262:	e038      	b.n	80092d6 <UART_SetConfig+0x5a6>
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a5b      	ldr	r2, [pc, #364]	; (80093d8 <UART_SetConfig+0x6a8>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d130      	bne.n	80092d0 <UART_SetConfig+0x5a0>
 800926e:	4b57      	ldr	r3, [pc, #348]	; (80093cc <UART_SetConfig+0x69c>)
 8009270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b05      	cmp	r3, #5
 8009278:	d826      	bhi.n	80092c8 <UART_SetConfig+0x598>
 800927a:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <UART_SetConfig+0x550>)
 800927c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009280:	08009299 	.word	0x08009299
 8009284:	080092a1 	.word	0x080092a1
 8009288:	080092a9 	.word	0x080092a9
 800928c:	080092b1 	.word	0x080092b1
 8009290:	080092b9 	.word	0x080092b9
 8009294:	080092c1 	.word	0x080092c1
 8009298:	2302      	movs	r3, #2
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929e:	e01a      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80092a0:	2304      	movs	r3, #4
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092a6:	e016      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80092a8:	2308      	movs	r3, #8
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ae:	e012      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80092b0:	2310      	movs	r3, #16
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092b6:	e00e      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80092b8:	2320      	movs	r3, #32
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092be:	e00a      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80092c0:	2340      	movs	r3, #64	; 0x40
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092c6:	e006      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80092c8:	2380      	movs	r3, #128	; 0x80
 80092ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ce:	e002      	b.n	80092d6 <UART_SetConfig+0x5a6>
 80092d0:	2380      	movs	r3, #128	; 0x80
 80092d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a3f      	ldr	r2, [pc, #252]	; (80093d8 <UART_SetConfig+0x6a8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	f040 80f8 	bne.w	80094d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	dc46      	bgt.n	8009378 <UART_SetConfig+0x648>
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	f2c0 8082 	blt.w	80093f4 <UART_SetConfig+0x6c4>
 80092f0:	3b02      	subs	r3, #2
 80092f2:	2b1e      	cmp	r3, #30
 80092f4:	d87e      	bhi.n	80093f4 <UART_SetConfig+0x6c4>
 80092f6:	a201      	add	r2, pc, #4	; (adr r2, 80092fc <UART_SetConfig+0x5cc>)
 80092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fc:	0800937f 	.word	0x0800937f
 8009300:	080093f5 	.word	0x080093f5
 8009304:	08009387 	.word	0x08009387
 8009308:	080093f5 	.word	0x080093f5
 800930c:	080093f5 	.word	0x080093f5
 8009310:	080093f5 	.word	0x080093f5
 8009314:	08009397 	.word	0x08009397
 8009318:	080093f5 	.word	0x080093f5
 800931c:	080093f5 	.word	0x080093f5
 8009320:	080093f5 	.word	0x080093f5
 8009324:	080093f5 	.word	0x080093f5
 8009328:	080093f5 	.word	0x080093f5
 800932c:	080093f5 	.word	0x080093f5
 8009330:	080093f5 	.word	0x080093f5
 8009334:	080093a7 	.word	0x080093a7
 8009338:	080093f5 	.word	0x080093f5
 800933c:	080093f5 	.word	0x080093f5
 8009340:	080093f5 	.word	0x080093f5
 8009344:	080093f5 	.word	0x080093f5
 8009348:	080093f5 	.word	0x080093f5
 800934c:	080093f5 	.word	0x080093f5
 8009350:	080093f5 	.word	0x080093f5
 8009354:	080093f5 	.word	0x080093f5
 8009358:	080093f5 	.word	0x080093f5
 800935c:	080093f5 	.word	0x080093f5
 8009360:	080093f5 	.word	0x080093f5
 8009364:	080093f5 	.word	0x080093f5
 8009368:	080093f5 	.word	0x080093f5
 800936c:	080093f5 	.word	0x080093f5
 8009370:	080093f5 	.word	0x080093f5
 8009374:	080093e7 	.word	0x080093e7
 8009378:	2b40      	cmp	r3, #64	; 0x40
 800937a:	d037      	beq.n	80093ec <UART_SetConfig+0x6bc>
 800937c:	e03a      	b.n	80093f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800937e:	f7fe fcfd 	bl	8007d7c <HAL_RCCEx_GetD3PCLK1Freq>
 8009382:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009384:	e03c      	b.n	8009400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800938a:	4618      	mov	r0, r3
 800938c:	f7fe fd0c 	bl	8007da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009394:	e034      	b.n	8009400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009396:	f107 0318 	add.w	r3, r7, #24
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fe58 	bl	8008050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093a4:	e02c      	b.n	8009400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093a6:	4b09      	ldr	r3, [pc, #36]	; (80093cc <UART_SetConfig+0x69c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d016      	beq.n	80093e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093b2:	4b06      	ldr	r3, [pc, #24]	; (80093cc <UART_SetConfig+0x69c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	08db      	lsrs	r3, r3, #3
 80093b8:	f003 0303 	and.w	r3, r3, #3
 80093bc:	4a07      	ldr	r2, [pc, #28]	; (80093dc <UART_SetConfig+0x6ac>)
 80093be:	fa22 f303 	lsr.w	r3, r2, r3
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093c4:	e01c      	b.n	8009400 <UART_SetConfig+0x6d0>
 80093c6:	bf00      	nop
 80093c8:	40011400 	.word	0x40011400
 80093cc:	58024400 	.word	0x58024400
 80093d0:	40007800 	.word	0x40007800
 80093d4:	40007c00 	.word	0x40007c00
 80093d8:	58000c00 	.word	0x58000c00
 80093dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80093e0:	4b9e      	ldr	r3, [pc, #632]	; (800965c <UART_SetConfig+0x92c>)
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e4:	e00c      	b.n	8009400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093e6:	4b9e      	ldr	r3, [pc, #632]	; (8009660 <UART_SetConfig+0x930>)
 80093e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093ea:	e009      	b.n	8009400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093f2:	e005      	b.n	8009400 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80093fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 81e0 	beq.w	80097c8 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	4a95      	ldr	r2, [pc, #596]	; (8009664 <UART_SetConfig+0x934>)
 800940e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009412:	461a      	mov	r2, r3
 8009414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009416:	fbb3 f3f2 	udiv	r3, r3, r2
 800941a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009428:	429a      	cmp	r2, r3
 800942a:	d305      	bcc.n	8009438 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009434:	429a      	cmp	r2, r3
 8009436:	d903      	bls.n	8009440 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800943e:	e1c3      	b.n	80097c8 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009442:	2200      	movs	r2, #0
 8009444:	60bb      	str	r3, [r7, #8]
 8009446:	60fa      	str	r2, [r7, #12]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	4a85      	ldr	r2, [pc, #532]	; (8009664 <UART_SetConfig+0x934>)
 800944e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009452:	b29b      	uxth	r3, r3
 8009454:	2200      	movs	r2, #0
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800945e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009462:	f7f6 ff8f 	bl	8000384 <__aeabi_uldivmod>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	4610      	mov	r0, r2
 800946c:	4619      	mov	r1, r3
 800946e:	f04f 0200 	mov.w	r2, #0
 8009472:	f04f 0300 	mov.w	r3, #0
 8009476:	020b      	lsls	r3, r1, #8
 8009478:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800947c:	0202      	lsls	r2, r0, #8
 800947e:	6979      	ldr	r1, [r7, #20]
 8009480:	6849      	ldr	r1, [r1, #4]
 8009482:	0849      	lsrs	r1, r1, #1
 8009484:	2000      	movs	r0, #0
 8009486:	460c      	mov	r4, r1
 8009488:	4605      	mov	r5, r0
 800948a:	eb12 0804 	adds.w	r8, r2, r4
 800948e:	eb43 0905 	adc.w	r9, r3, r5
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	469a      	mov	sl, r3
 800949a:	4693      	mov	fp, r2
 800949c:	4652      	mov	r2, sl
 800949e:	465b      	mov	r3, fp
 80094a0:	4640      	mov	r0, r8
 80094a2:	4649      	mov	r1, r9
 80094a4:	f7f6 ff6e 	bl	8000384 <__aeabi_uldivmod>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	4613      	mov	r3, r2
 80094ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094b6:	d308      	bcc.n	80094ca <UART_SetConfig+0x79a>
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094be:	d204      	bcs.n	80094ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094c6:	60da      	str	r2, [r3, #12]
 80094c8:	e17e      	b.n	80097c8 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80094d0:	e17a      	b.n	80097c8 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094da:	f040 80c7 	bne.w	800966c <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 80094de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80094e2:	2b20      	cmp	r3, #32
 80094e4:	dc48      	bgt.n	8009578 <UART_SetConfig+0x848>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	db7b      	blt.n	80095e2 <UART_SetConfig+0x8b2>
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d879      	bhi.n	80095e2 <UART_SetConfig+0x8b2>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <UART_SetConfig+0x7c4>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	0800957f 	.word	0x0800957f
 80094f8:	08009587 	.word	0x08009587
 80094fc:	080095e3 	.word	0x080095e3
 8009500:	080095e3 	.word	0x080095e3
 8009504:	0800958f 	.word	0x0800958f
 8009508:	080095e3 	.word	0x080095e3
 800950c:	080095e3 	.word	0x080095e3
 8009510:	080095e3 	.word	0x080095e3
 8009514:	0800959f 	.word	0x0800959f
 8009518:	080095e3 	.word	0x080095e3
 800951c:	080095e3 	.word	0x080095e3
 8009520:	080095e3 	.word	0x080095e3
 8009524:	080095e3 	.word	0x080095e3
 8009528:	080095e3 	.word	0x080095e3
 800952c:	080095e3 	.word	0x080095e3
 8009530:	080095e3 	.word	0x080095e3
 8009534:	080095af 	.word	0x080095af
 8009538:	080095e3 	.word	0x080095e3
 800953c:	080095e3 	.word	0x080095e3
 8009540:	080095e3 	.word	0x080095e3
 8009544:	080095e3 	.word	0x080095e3
 8009548:	080095e3 	.word	0x080095e3
 800954c:	080095e3 	.word	0x080095e3
 8009550:	080095e3 	.word	0x080095e3
 8009554:	080095e3 	.word	0x080095e3
 8009558:	080095e3 	.word	0x080095e3
 800955c:	080095e3 	.word	0x080095e3
 8009560:	080095e3 	.word	0x080095e3
 8009564:	080095e3 	.word	0x080095e3
 8009568:	080095e3 	.word	0x080095e3
 800956c:	080095e3 	.word	0x080095e3
 8009570:	080095e3 	.word	0x080095e3
 8009574:	080095d5 	.word	0x080095d5
 8009578:	2b40      	cmp	r3, #64	; 0x40
 800957a:	d02e      	beq.n	80095da <UART_SetConfig+0x8aa>
 800957c:	e031      	b.n	80095e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800957e:	f7fd fc49 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 8009582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009584:	e033      	b.n	80095ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009586:	f7fd fc5b 	bl	8006e40 <HAL_RCC_GetPCLK2Freq>
 800958a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800958c:	e02f      	b.n	80095ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800958e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fc08 	bl	8007da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800959c:	e027      	b.n	80095ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800959e:	f107 0318 	add.w	r3, r7, #24
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fd54 	bl	8008050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ac:	e01f      	b.n	80095ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ae:	4b2e      	ldr	r3, [pc, #184]	; (8009668 <UART_SetConfig+0x938>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 0320 	and.w	r3, r3, #32
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d009      	beq.n	80095ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095ba:	4b2b      	ldr	r3, [pc, #172]	; (8009668 <UART_SetConfig+0x938>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	08db      	lsrs	r3, r3, #3
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	4a25      	ldr	r2, [pc, #148]	; (800965c <UART_SetConfig+0x92c>)
 80095c6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095cc:	e00f      	b.n	80095ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80095ce:	4b23      	ldr	r3, [pc, #140]	; (800965c <UART_SetConfig+0x92c>)
 80095d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d2:	e00c      	b.n	80095ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095d4:	4b22      	ldr	r3, [pc, #136]	; (8009660 <UART_SetConfig+0x930>)
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d8:	e009      	b.n	80095ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e0:	e005      	b.n	80095ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80095ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 80e9 	beq.w	80097c8 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	4a1a      	ldr	r2, [pc, #104]	; (8009664 <UART_SetConfig+0x934>)
 80095fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009600:	461a      	mov	r2, r3
 8009602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009604:	fbb3 f3f2 	udiv	r3, r3, r2
 8009608:	005a      	lsls	r2, r3, #1
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	085b      	lsrs	r3, r3, #1
 8009610:	441a      	add	r2, r3
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	fbb2 f3f3 	udiv	r3, r2, r3
 800961a:	b29b      	uxth	r3, r3
 800961c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	2b0f      	cmp	r3, #15
 8009622:	d916      	bls.n	8009652 <UART_SetConfig+0x922>
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800962a:	d212      	bcs.n	8009652 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	b29b      	uxth	r3, r3
 8009630:	f023 030f 	bic.w	r3, r3, #15
 8009634:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	085b      	lsrs	r3, r3, #1
 800963a:	b29b      	uxth	r3, r3
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	b29a      	uxth	r2, r3
 8009642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009644:	4313      	orrs	r3, r2
 8009646:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800964e:	60da      	str	r2, [r3, #12]
 8009650:	e0ba      	b.n	80097c8 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009658:	e0b6      	b.n	80097c8 <UART_SetConfig+0xa98>
 800965a:	bf00      	nop
 800965c:	03d09000 	.word	0x03d09000
 8009660:	003d0900 	.word	0x003d0900
 8009664:	0800a3c4 	.word	0x0800a3c4
 8009668:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800966c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009670:	2b20      	cmp	r3, #32
 8009672:	dc49      	bgt.n	8009708 <UART_SetConfig+0x9d8>
 8009674:	2b00      	cmp	r3, #0
 8009676:	db7c      	blt.n	8009772 <UART_SetConfig+0xa42>
 8009678:	2b20      	cmp	r3, #32
 800967a:	d87a      	bhi.n	8009772 <UART_SetConfig+0xa42>
 800967c:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <UART_SetConfig+0x954>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	0800970f 	.word	0x0800970f
 8009688:	08009717 	.word	0x08009717
 800968c:	08009773 	.word	0x08009773
 8009690:	08009773 	.word	0x08009773
 8009694:	0800971f 	.word	0x0800971f
 8009698:	08009773 	.word	0x08009773
 800969c:	08009773 	.word	0x08009773
 80096a0:	08009773 	.word	0x08009773
 80096a4:	0800972f 	.word	0x0800972f
 80096a8:	08009773 	.word	0x08009773
 80096ac:	08009773 	.word	0x08009773
 80096b0:	08009773 	.word	0x08009773
 80096b4:	08009773 	.word	0x08009773
 80096b8:	08009773 	.word	0x08009773
 80096bc:	08009773 	.word	0x08009773
 80096c0:	08009773 	.word	0x08009773
 80096c4:	0800973f 	.word	0x0800973f
 80096c8:	08009773 	.word	0x08009773
 80096cc:	08009773 	.word	0x08009773
 80096d0:	08009773 	.word	0x08009773
 80096d4:	08009773 	.word	0x08009773
 80096d8:	08009773 	.word	0x08009773
 80096dc:	08009773 	.word	0x08009773
 80096e0:	08009773 	.word	0x08009773
 80096e4:	08009773 	.word	0x08009773
 80096e8:	08009773 	.word	0x08009773
 80096ec:	08009773 	.word	0x08009773
 80096f0:	08009773 	.word	0x08009773
 80096f4:	08009773 	.word	0x08009773
 80096f8:	08009773 	.word	0x08009773
 80096fc:	08009773 	.word	0x08009773
 8009700:	08009773 	.word	0x08009773
 8009704:	08009765 	.word	0x08009765
 8009708:	2b40      	cmp	r3, #64	; 0x40
 800970a:	d02e      	beq.n	800976a <UART_SetConfig+0xa3a>
 800970c:	e031      	b.n	8009772 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800970e:	f7fd fb81 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 8009712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009714:	e033      	b.n	800977e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009716:	f7fd fb93 	bl	8006e40 <HAL_RCC_GetPCLK2Freq>
 800971a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800971c:	e02f      	b.n	800977e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800971e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fb40 	bl	8007da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800972c:	e027      	b.n	800977e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800972e:	f107 0318 	add.w	r3, r7, #24
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fc8c 	bl	8008050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800973c:	e01f      	b.n	800977e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800973e:	4b2d      	ldr	r3, [pc, #180]	; (80097f4 <UART_SetConfig+0xac4>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0320 	and.w	r3, r3, #32
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800974a:	4b2a      	ldr	r3, [pc, #168]	; (80097f4 <UART_SetConfig+0xac4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	08db      	lsrs	r3, r3, #3
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	4a28      	ldr	r2, [pc, #160]	; (80097f8 <UART_SetConfig+0xac8>)
 8009756:	fa22 f303 	lsr.w	r3, r2, r3
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800975c:	e00f      	b.n	800977e <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800975e:	4b26      	ldr	r3, [pc, #152]	; (80097f8 <UART_SetConfig+0xac8>)
 8009760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009762:	e00c      	b.n	800977e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009764:	4b25      	ldr	r3, [pc, #148]	; (80097fc <UART_SetConfig+0xacc>)
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009768:	e009      	b.n	800977e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800976a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009770:	e005      	b.n	800977e <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 8009772:	2300      	movs	r3, #0
 8009774:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800977c:	bf00      	nop
    }

    if (pclk != 0U)
 800977e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009780:	2b00      	cmp	r3, #0
 8009782:	d021      	beq.n	80097c8 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	4a1d      	ldr	r2, [pc, #116]	; (8009800 <UART_SetConfig+0xad0>)
 800978a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978e:	461a      	mov	r2, r3
 8009790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009792:	fbb3 f2f2 	udiv	r2, r3, r2
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	085b      	lsrs	r3, r3, #1
 800979c:	441a      	add	r2, r3
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	2b0f      	cmp	r3, #15
 80097ae:	d908      	bls.n	80097c2 <UART_SetConfig+0xa92>
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b6:	d204      	bcs.n	80097c2 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097be:	60da      	str	r2, [r3, #12]
 80097c0:	e002      	b.n	80097c8 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2200      	movs	r2, #0
 80097dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2200      	movs	r2, #0
 80097e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80097e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3748      	adds	r7, #72	; 0x48
 80097ec:	46bd      	mov	sp, r7
 80097ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097f2:	bf00      	nop
 80097f4:	58024400 	.word	0x58024400
 80097f8:	03d09000 	.word	0x03d09000
 80097fc:	003d0900 	.word	0x003d0900
 8009800:	0800a3c4 	.word	0x0800a3c4

08009804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00a      	beq.n	800982e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00a      	beq.n	8009872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009876:	f003 0308 	and.w	r3, r3, #8
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00a      	beq.n	8009894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00a      	beq.n	80098b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00a      	beq.n	80098d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01a      	beq.n	800991a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009902:	d10a      	bne.n	800991a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	605a      	str	r2, [r3, #4]
  }
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af02      	add	r7, sp, #8
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009958:	f7fb f8ca 	bl	8004af0 <HAL_GetTick>
 800995c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	2b08      	cmp	r3, #8
 800996a:	d10e      	bne.n	800998a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800996c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f82f 	bl	80099de <UART_WaitOnFlagUntilTimeout>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e025      	b.n	80099d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b04      	cmp	r3, #4
 8009996:	d10e      	bne.n	80099b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f819 	bl	80099de <UART_WaitOnFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e00f      	b.n	80099d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	603b      	str	r3, [r7, #0]
 80099ea:	4613      	mov	r3, r2
 80099ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ee:	e062      	b.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f6:	d05e      	beq.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099f8:	f7fb f87a 	bl	8004af0 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d302      	bcc.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x30>
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d11d      	bne.n	8009a4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0201 	bic.w	r2, r2, #1
 8009a2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e045      	b.n	8009ad6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d02e      	beq.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a66:	d126      	bne.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0201 	bic.w	r2, r2, #1
 8009a90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e00f      	b.n	8009ad6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	69da      	ldr	r2, [r3, #28]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	bf0c      	ite	eq
 8009ac6:	2301      	moveq	r3, #1
 8009ac8:	2300      	movne	r3, #0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d08d      	beq.n	80099f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d101      	bne.n	8009af4 <HAL_UARTEx_DisableFifoMode+0x16>
 8009af0:	2302      	movs	r3, #2
 8009af2:	e027      	b.n	8009b44 <HAL_UARTEx_DisableFifoMode+0x66>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2224      	movs	r2, #36	; 0x24
 8009b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0201 	bic.w	r2, r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d101      	bne.n	8009b68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e02d      	b.n	8009bc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2224      	movs	r2, #36	; 0x24
 8009b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0201 	bic.w	r2, r2, #1
 8009b8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f84f 	bl	8009c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d101      	bne.n	8009be4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009be0:	2302      	movs	r3, #2
 8009be2:	e02d      	b.n	8009c40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2224      	movs	r2, #36	; 0x24
 8009bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 0201 	bic.w	r2, r2, #1
 8009c0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f811 	bl	8009c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2220      	movs	r2, #32
 8009c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d108      	bne.n	8009c6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c68:	e031      	b.n	8009cce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c6a:	2310      	movs	r3, #16
 8009c6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c6e:	2310      	movs	r3, #16
 8009c70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	0e5b      	lsrs	r3, r3, #25
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	f003 0307 	and.w	r3, r3, #7
 8009c80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	0f5b      	lsrs	r3, r3, #29
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	7b3a      	ldrb	r2, [r7, #12]
 8009c96:	4911      	ldr	r1, [pc, #68]	; (8009cdc <UARTEx_SetNbDataToProcess+0x94>)
 8009c98:	5c8a      	ldrb	r2, [r1, r2]
 8009c9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c9e:	7b3a      	ldrb	r2, [r7, #12]
 8009ca0:	490f      	ldr	r1, [pc, #60]	; (8009ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ca2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ca4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	7b7a      	ldrb	r2, [r7, #13]
 8009cb4:	4909      	ldr	r1, [pc, #36]	; (8009cdc <UARTEx_SetNbDataToProcess+0x94>)
 8009cb6:	5c8a      	ldrb	r2, [r1, r2]
 8009cb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cbc:	7b7a      	ldrb	r2, [r7, #13]
 8009cbe:	4908      	ldr	r1, [pc, #32]	; (8009ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8009cc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009cce:	bf00      	nop
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	0800a3dc 	.word	0x0800a3dc
 8009ce0:	0800a3e4 	.word	0x0800a3e4

08009ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	f107 001c 	add.w	r0, r7, #28
 8009cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d120      	bne.n	8009d3e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68da      	ldr	r2, [r3, #12]
 8009d0c:	4b2a      	ldr	r3, [pc, #168]	; (8009db8 <USB_CoreInit+0xd4>)
 8009d0e:	4013      	ands	r3, r2
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d105      	bne.n	8009d32 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f8c8 	bl	8009ec8 <USB_CoreReset>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73fb      	strb	r3, [r7, #15]
 8009d3c:	e01a      	b.n	8009d74 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8bc 	bl	8009ec8 <USB_CoreReset>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	639a      	str	r2, [r3, #56]	; 0x38
 8009d66:	e005      	b.n	8009d74 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d116      	bne.n	8009da8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <USB_CoreInit+0xd8>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f043 0206 	orr.w	r2, r3, #6
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f043 0220 	orr.w	r2, r3, #32
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009db4:	b004      	add	sp, #16
 8009db6:	4770      	bx	lr
 8009db8:	ffbdffbf 	.word	0xffbdffbf
 8009dbc:	03ee0000 	.word	0x03ee0000

08009dc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f023 0201 	bic.w	r2, r3, #1
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009dfa:	78fb      	ldrb	r3, [r7, #3]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d106      	bne.n	8009e0e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	60da      	str	r2, [r3, #12]
 8009e0c:	e00b      	b.n	8009e26 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d106      	bne.n	8009e22 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60da      	str	r2, [r3, #12]
 8009e20:	e001      	b.n	8009e26 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e003      	b.n	8009e2e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009e26:	2032      	movs	r0, #50	; 0x32
 8009e28:	f7fa fe6e 	bl	8004b08 <HAL_Delay>

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	019b      	lsls	r3, r3, #6
 8009e4a:	f043 0220 	orr.w	r2, r3, #32
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3301      	adds	r3, #1
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4a09      	ldr	r2, [pc, #36]	; (8009e80 <USB_FlushTxFifo+0x48>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d901      	bls.n	8009e64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e006      	b.n	8009e72 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	d0f0      	beq.n	8009e52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	00030d40 	.word	0x00030d40

08009e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2210      	movs	r2, #16
 8009e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4a09      	ldr	r2, [pc, #36]	; (8009ec4 <USB_FlushRxFifo+0x40>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d901      	bls.n	8009ea8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e006      	b.n	8009eb6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b10      	cmp	r3, #16
 8009eb2:	d0f0      	beq.n	8009e96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	00030d40 	.word	0x00030d40

08009ec8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	4a13      	ldr	r2, [pc, #76]	; (8009f2c <USB_CoreReset+0x64>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d901      	bls.n	8009ee6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e01b      	b.n	8009f1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	daf2      	bge.n	8009ed4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	f043 0201 	orr.w	r2, r3, #1
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3301      	adds	r3, #1
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4a09      	ldr	r2, [pc, #36]	; (8009f2c <USB_CoreReset+0x64>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d901      	bls.n	8009f10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e006      	b.n	8009f1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d0f0      	beq.n	8009efe <USB_CoreReset+0x36>

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	00030d40 	.word	0x00030d40

08009f30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f30:	b084      	sub	sp, #16
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	f107 001c 	add.w	r0, r7, #28
 8009f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	2300      	movs	r3, #0
 8009f50:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d018      	beq.n	8009fa8 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d10a      	bne.n	8009f92 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f8a:	f043 0304 	orr.w	r3, r3, #4
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	e014      	b.n	8009fbc <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fa0:	f023 0304 	bic.w	r3, r3, #4
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	e009      	b.n	8009fbc <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fb6:	f023 0304 	bic.w	r3, r3, #4
 8009fba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009fbc:	2110      	movs	r1, #16
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff ff3a 	bl	8009e38 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7ff ff5d 	bl	8009e84 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	e015      	b.n	8009ffc <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	429a      	cmp	r2, r3
 800a002:	d3e5      	bcc.n	8009fd0 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a004:	2101      	movs	r1, #1
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f848 	bl	800a09c <USB_DriveVbus>

  HAL_Delay(200U);
 800a00c:	20c8      	movs	r0, #200	; 0xc8
 800a00e:	f7fa fd7b 	bl	8004b08 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a032:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a14      	ldr	r2, [pc, #80]	; (800a088 <USB_HostInit+0x158>)
 800a038:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a13      	ldr	r2, [pc, #76]	; (800a08c <USB_HostInit+0x15c>)
 800a03e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a042:	e009      	b.n	800a058 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2280      	movs	r2, #128	; 0x80
 800a048:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a10      	ldr	r2, [pc, #64]	; (800a090 <USB_HostInit+0x160>)
 800a04e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a10      	ldr	r2, [pc, #64]	; (800a094 <USB_HostInit+0x164>)
 800a054:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d105      	bne.n	800a06a <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	f043 0210 	orr.w	r2, r3, #16
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699a      	ldr	r2, [r3, #24]
 800a06e:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <USB_HostInit+0x168>)
 800a070:	4313      	orrs	r3, r2
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a082:	b004      	add	sp, #16
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	01000200 	.word	0x01000200
 800a08c:	00e00300 	.word	0x00e00300
 800a090:	00600080 	.word	0x00600080
 800a094:	004000e0 	.word	0x004000e0
 800a098:	a3200008 	.word	0xa3200008

0800a09c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a0c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d109      	bne.n	800a0e0 <USB_DriveVbus+0x44>
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d106      	bne.n	800a0e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a0da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ea:	d109      	bne.n	800a100 <USB_DriveVbus+0x64>
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d106      	bne.n	800a100 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a0fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <__libc_init_array>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	4d0d      	ldr	r5, [pc, #52]	; (800a148 <__libc_init_array+0x38>)
 800a114:	4c0d      	ldr	r4, [pc, #52]	; (800a14c <__libc_init_array+0x3c>)
 800a116:	1b64      	subs	r4, r4, r5
 800a118:	10a4      	asrs	r4, r4, #2
 800a11a:	2600      	movs	r6, #0
 800a11c:	42a6      	cmp	r6, r4
 800a11e:	d109      	bne.n	800a134 <__libc_init_array+0x24>
 800a120:	4d0b      	ldr	r5, [pc, #44]	; (800a150 <__libc_init_array+0x40>)
 800a122:	4c0c      	ldr	r4, [pc, #48]	; (800a154 <__libc_init_array+0x44>)
 800a124:	f000 f83e 	bl	800a1a4 <_init>
 800a128:	1b64      	subs	r4, r4, r5
 800a12a:	10a4      	asrs	r4, r4, #2
 800a12c:	2600      	movs	r6, #0
 800a12e:	42a6      	cmp	r6, r4
 800a130:	d105      	bne.n	800a13e <__libc_init_array+0x2e>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	f855 3b04 	ldr.w	r3, [r5], #4
 800a138:	4798      	blx	r3
 800a13a:	3601      	adds	r6, #1
 800a13c:	e7ee      	b.n	800a11c <__libc_init_array+0xc>
 800a13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a142:	4798      	blx	r3
 800a144:	3601      	adds	r6, #1
 800a146:	e7f2      	b.n	800a12e <__libc_init_array+0x1e>
 800a148:	0800a3f4 	.word	0x0800a3f4
 800a14c:	0800a3f4 	.word	0x0800a3f4
 800a150:	0800a3f4 	.word	0x0800a3f4
 800a154:	0800a3f8 	.word	0x0800a3f8

0800a158 <memcmp>:
 800a158:	b510      	push	{r4, lr}
 800a15a:	3901      	subs	r1, #1
 800a15c:	4402      	add	r2, r0
 800a15e:	4290      	cmp	r0, r2
 800a160:	d101      	bne.n	800a166 <memcmp+0xe>
 800a162:	2000      	movs	r0, #0
 800a164:	e005      	b.n	800a172 <memcmp+0x1a>
 800a166:	7803      	ldrb	r3, [r0, #0]
 800a168:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	d001      	beq.n	800a174 <memcmp+0x1c>
 800a170:	1b18      	subs	r0, r3, r4
 800a172:	bd10      	pop	{r4, pc}
 800a174:	3001      	adds	r0, #1
 800a176:	e7f2      	b.n	800a15e <memcmp+0x6>

0800a178 <memcpy>:
 800a178:	440a      	add	r2, r1
 800a17a:	4291      	cmp	r1, r2
 800a17c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a180:	d100      	bne.n	800a184 <memcpy+0xc>
 800a182:	4770      	bx	lr
 800a184:	b510      	push	{r4, lr}
 800a186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a18a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a18e:	4291      	cmp	r1, r2
 800a190:	d1f9      	bne.n	800a186 <memcpy+0xe>
 800a192:	bd10      	pop	{r4, pc}

0800a194 <memset>:
 800a194:	4402      	add	r2, r0
 800a196:	4603      	mov	r3, r0
 800a198:	4293      	cmp	r3, r2
 800a19a:	d100      	bne.n	800a19e <memset+0xa>
 800a19c:	4770      	bx	lr
 800a19e:	f803 1b01 	strb.w	r1, [r3], #1
 800a1a2:	e7f9      	b.n	800a198 <memset+0x4>

0800a1a4 <_init>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr

0800a1b0 <_fini>:
 800a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b2:	bf00      	nop
 800a1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b6:	bc08      	pop	{r3}
 800a1b8:	469e      	mov	lr, r3
 800a1ba:	4770      	bx	lr
