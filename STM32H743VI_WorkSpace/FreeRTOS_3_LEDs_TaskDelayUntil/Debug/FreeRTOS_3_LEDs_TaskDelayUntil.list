
FreeRTOS_3_LEDs_TaskDelayUntil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800896c  0800896c  0001896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  08008b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0007f7e4  24000020  08008b78  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2407f804  08008b78  0002f804  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020a38  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000394e  00000000  00000000  00040a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a70  00000000  00000000  000443d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000018b8  00000000  00000000  00045e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000386a9  00000000  00000000  00047700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e404  00000000  00000000  0007fda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175cd2  00000000  00000000  0009e1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00213e7f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007154  00000000  00000000  00213ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000020 	.word	0x24000020
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008954 	.word	0x08008954

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000024 	.word	0x24000024
 80002dc:	08008954 	.word	0x08008954

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	2400723c 	.word	0x2400723c

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80003ce:	b480      	push	{r7}
 80003d0:	b085      	sub	sp, #20
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000416:	b480      	push	{r7}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800042c:	d103      	bne.n	8000436 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e00c      	b.n	8000450 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3308      	adds	r3, #8
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e002      	b.n	8000444 <vListInsert+0x2e>
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	429a      	cmp	r2, r3
 800044e:	d2f6      	bcs.n	800043e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	683a      	ldr	r2, [r7, #0]
 800046a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	6892      	ldr	r2, [r2, #8]
 800049e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6852      	ldr	r2, [r2, #4]
 80004a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d103      	bne.n	80004bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	1e5a      	subs	r2, r3, #1
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 ff09 	bl	8001308 <pvPortMalloc>
 80004f6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00e      	beq.n	800051c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80004fe:	205c      	movs	r0, #92	; 0x5c
 8000500:	f000 ff02 	bl	8001308 <pvPortMalloc>
 8000504:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	631a      	str	r2, [r3, #48]	; 0x30
 8000512:	e005      	b.n	8000520 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000514:	6978      	ldr	r0, [r7, #20]
 8000516:	f000 ffdd 	bl	80014d4 <vPortFree>
 800051a:	e001      	b.n	8000520 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d013      	beq.n	800054e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000526:	88fa      	ldrh	r2, [r7, #6]
 8000528:	2300      	movs	r3, #0
 800052a:	9303      	str	r3, [sp, #12]
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68b9      	ldr	r1, [r7, #8]
 800053c:	68f8      	ldr	r0, [r7, #12]
 800053e:	f000 f80e 	bl	800055e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000542:	69f8      	ldr	r0, [r7, #28]
 8000544:	f000 f8a4 	bl	8000690 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000548:	2301      	movs	r3, #1
 800054a:	61bb      	str	r3, [r7, #24]
 800054c:	e002      	b.n	8000554 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000554:	69bb      	ldr	r3, [r7, #24]
    }
 8000556:	4618      	mov	r0, r3
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b088      	sub	sp, #32
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800056e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	461a      	mov	r2, r3
 8000576:	21a5      	movs	r1, #165	; 0xa5
 8000578:	f008 f9e4 	bl	8008944 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000586:	440b      	add	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	f023 0307 	bic.w	r3, r3, #7
 8000594:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00c      	beq.n	80005ba <prvInitialiseNewTask+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	b672      	cpsid	i
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	b662      	cpsie	i
 80005b4:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d01f      	beq.n	8000600 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	e012      	b.n	80005ec <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	4413      	add	r3, r2
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	4413      	add	r3, r2
 80005d4:	3334      	adds	r3, #52	; 0x34
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3301      	adds	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d9e9      	bls.n	80005c6 <prvInitialiseNewTask+0x68>
 80005f2:	e000      	b.n	80005f6 <prvInitialiseNewTask+0x98>
            {
                break;
 80005f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80005fe:	e003      	b.n	8000608 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800060a:	2b06      	cmp	r3, #6
 800060c:	d901      	bls.n	8000612 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800060e:	2306      	movs	r3, #6
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800061c:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000620:	2200      	movs	r2, #0
 8000622:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000626:	3304      	adds	r3, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fec3 	bl	80003b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	3318      	adds	r3, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff febe 	bl	80003b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800063c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000640:	f1c3 0207 	rsb	r2, r3, #7
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800064a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000650:	3354      	adds	r3, #84	; 0x54
 8000652:	2204      	movs	r2, #4
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f008 f974 	bl	8008944 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	3358      	adds	r3, #88	; 0x58
 8000660:	2201      	movs	r2, #1
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f008 f96d 	bl	8008944 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	69b8      	ldr	r0, [r7, #24]
 8000670:	f000 fc06 	bl	8000e80 <pxPortInitialiseStack>
 8000674:	4602      	mov	r2, r0
 8000676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000678:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000684:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000698:	f000 fd02 	bl	80010a0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 80006a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80006ae:	4a32      	ldr	r2, [pc, #200]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80006b4:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <prvAddNewTaskToReadyList+0xe4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d110      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80006bc:	f000 face 	bl	8000c5c <prvInitialiseTaskLists>
 80006c0:	e00d      	b.n	80006de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <prvAddNewTaskToReadyList+0xec>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d802      	bhi.n	80006de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <prvAddNewTaskToReadyList+0xf0>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d016      	beq.n	8000724 <prvAddNewTaskToReadyList+0x94>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 f901 	bl	8003900 <SEGGER_SYSVIEW_OnTaskCreate>
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	461d      	mov	r5, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	461c      	mov	r4, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	1ae3      	subs	r3, r4, r3
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	462b      	mov	r3, r5
 8000720:	f001 f8aa 	bl	8001878 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f003 f96e 	bl	8003a08 <SEGGER_SYSVIEW_OnTaskStartReady>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000730:	2201      	movs	r2, #1
 8000732:	409a      	lsls	r2, r3
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <prvAddNewTaskToReadyList+0xf4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4313      	orrs	r3, r2
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <prvAddNewTaskToReadyList+0xf4>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <prvAddNewTaskToReadyList+0xf8>)
 800074c:	441a      	add	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3304      	adds	r3, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f7ff fe3a 	bl	80003ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800075a:	f000 fcd5 	bl	8001108 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <prvAddNewTaskToReadyList+0xec>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <prvAddNewTaskToReadyList+0xe8>)
 8000768:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bdb0      	pop	{r4, r5, r7, pc}
 8000772:	bf00      	nop
 8000774:	2400013c 	.word	0x2400013c
 8000778:	2400003c 	.word	0x2400003c
 800077c:	24000148 	.word	0x24000148
 8000780:	24000158 	.word	0x24000158
 8000784:	24000144 	.word	0x24000144
 8000788:	24000040 	.word	0x24000040

0800078c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d01d      	beq.n	80007da <vTaskDelay+0x4e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <vTaskDelay+0x6c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00c      	beq.n	80007c0 <vTaskDelay+0x34>
        __asm volatile
 80007a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007aa:	b672      	cpsid	i
 80007ac:	f383 8811 	msr	BASEPRI, r3
 80007b0:	f3bf 8f6f 	isb	sy
 80007b4:	f3bf 8f4f 	dsb	sy
 80007b8:	b662      	cpsie	i
 80007ba:	60bb      	str	r3, [r7, #8]
    }
 80007bc:	bf00      	nop
 80007be:	e7fe      	b.n	80007be <vTaskDelay+0x32>
            vTaskSuspendAll();
 80007c0:	f000 f87e 	bl	80008c0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	2023      	movs	r0, #35	; 0x23
 80007c8:	f002 fca4 	bl	8003114 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80007cc:	2100      	movs	r1, #0
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 fade 	bl	8000d90 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80007d4:	f000 f882 	bl	80008dc <xTaskResumeAll>
 80007d8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d107      	bne.n	80007f0 <vTaskDelay+0x64>
        {
            portYIELD_WITHIN_API();
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <vTaskDelay+0x70>)
 80007e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	f3bf 8f4f 	dsb	sy
 80007ec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	24000164 	.word	0x24000164
 80007fc:	e000ed04 	.word	0xe000ed04

08000800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <vTaskStartScheduler+0xa0>)
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	2300      	movs	r3, #0
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2300      	movs	r3, #0
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	4924      	ldr	r1, [pc, #144]	; (80008a4 <vTaskStartScheduler+0xa4>)
 8000814:	4824      	ldr	r0, [pc, #144]	; (80008a8 <vTaskStartScheduler+0xa8>)
 8000816:	f7ff fe61 	bl	80004dc <xTaskCreate>
 800081a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d126      	bne.n	8000870 <vTaskStartScheduler+0x70>
        __asm volatile
 8000822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000826:	b672      	cpsid	i
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	b662      	cpsie	i
 8000836:	60bb      	str	r3, [r7, #8]
    }
 8000838:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <vTaskStartScheduler+0xac>)
 800083c:	f04f 32ff 	mov.w	r2, #4294967295
 8000840:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <vTaskStartScheduler+0xb0>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <vTaskStartScheduler+0xb4>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <vTaskStartScheduler+0xb8>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <vTaskStartScheduler+0xa0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	429a      	cmp	r2, r3
 8000858:	d102      	bne.n	8000860 <vTaskStartScheduler+0x60>
 800085a:	f003 f835 	bl	80038c8 <SEGGER_SYSVIEW_OnIdle>
 800085e:	e004      	b.n	800086a <vTaskStartScheduler+0x6a>
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <vTaskStartScheduler+0xb8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f003 f88d 	bl	8003984 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800086a:	f000 fb9b 	bl	8000fa4 <xPortStartScheduler>
 800086e:	e010      	b.n	8000892 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000876:	d10c      	bne.n	8000892 <vTaskStartScheduler+0x92>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	b672      	cpsid	i
 800087e:	f383 8811 	msr	BASEPRI, r3
 8000882:	f3bf 8f6f 	isb	sy
 8000886:	f3bf 8f4f 	dsb	sy
 800088a:	b662      	cpsie	i
 800088c:	607b      	str	r3, [r7, #4]
    }
 800088e:	bf00      	nop
 8000890:	e7fe      	b.n	8000890 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <vTaskStartScheduler+0xbc>)
 8000894:	681b      	ldr	r3, [r3, #0]
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000160 	.word	0x24000160
 80008a4:	0800896c 	.word	0x0800896c
 80008a8:	08000c39 	.word	0x08000c39
 80008ac:	2400015c 	.word	0x2400015c
 80008b0:	24000148 	.word	0x24000148
 80008b4:	24000140 	.word	0x24000140
 80008b8:	2400003c 	.word	0x2400003c
 80008bc:	24000000 	.word	0x24000000

080008c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <vTaskSuspendAll+0x18>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <vTaskSuspendAll+0x18>)
 80008cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	24000164 	.word	0x24000164

080008dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <xTaskResumeAll+0x108>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10c      	bne.n	800090c <xTaskResumeAll+0x30>
        __asm volatile
 80008f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f6:	b672      	cpsid	i
 80008f8:	f383 8811 	msr	BASEPRI, r3
 80008fc:	f3bf 8f6f 	isb	sy
 8000900:	f3bf 8f4f 	dsb	sy
 8000904:	b662      	cpsie	i
 8000906:	603b      	str	r3, [r7, #0]
    }
 8000908:	bf00      	nop
 800090a:	e7fe      	b.n	800090a <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800090c:	f000 fbc8 	bl	80010a0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000910:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <xTaskResumeAll+0x108>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3b01      	subs	r3, #1
 8000916:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <xTaskResumeAll+0x108>)
 8000918:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <xTaskResumeAll+0x108>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d159      	bne.n	80009d6 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000922:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <xTaskResumeAll+0x10c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d055      	beq.n	80009d6 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800092a:	e032      	b.n	8000992 <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800092c:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <xTaskResumeAll+0x110>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3318      	adds	r3, #24
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fda5 	bl	8000488 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3304      	adds	r3, #4
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fda0 	bl	8000488 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4618      	mov	r0, r3
 800094c:	f003 f85c 	bl	8003a08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	2201      	movs	r2, #1
 8000956:	409a      	lsls	r2, r3
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <xTaskResumeAll+0x114>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4313      	orrs	r3, r2
 800095e:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <xTaskResumeAll+0x114>)
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <xTaskResumeAll+0x118>)
 8000970:	441a      	add	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3304      	adds	r3, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f7ff fd28 	bl	80003ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <xTaskResumeAll+0x11c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	429a      	cmp	r2, r3
 800098a:	d302      	bcc.n	8000992 <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <xTaskResumeAll+0x120>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <xTaskResumeAll+0x110>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1c8      	bne.n	800092c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80009a0:	f000 f9da 	bl	8000d58 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <xTaskResumeAll+0x124>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d010      	beq.n	80009d2 <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80009b0:	f000 f83a 	bl	8000a28 <xTaskIncrementTick>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <xTaskResumeAll+0x120>)
 80009bc:	2201      	movs	r2, #1
 80009be:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f1      	bne.n	80009b0 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <xTaskResumeAll+0x124>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <xTaskResumeAll+0x120>)
 80009d4:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80009d6:	f000 fb97 	bl	8001108 <vPortExitCritical>

    return xAlreadyYielded;
 80009da:	687b      	ldr	r3, [r7, #4]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	24000164 	.word	0x24000164
 80009e8:	2400013c 	.word	0x2400013c
 80009ec:	240000fc 	.word	0x240000fc
 80009f0:	24000144 	.word	0x24000144
 80009f4:	24000040 	.word	0x24000040
 80009f8:	2400003c 	.word	0x2400003c
 80009fc:	24000150 	.word	0x24000150
 8000a00:	2400014c 	.word	0x2400014c

08000a04 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a0a:	f000 fc39 	bl	8001280 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <xTaskGetTickCountFromISR+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000a18:	683b      	ldr	r3, [r7, #0]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000140 	.word	0x24000140

08000a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a32:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <xTaskIncrementTick+0x114>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d175      	bne.n	8000b26 <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <xTaskIncrementTick+0x118>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000a42:	4a3f      	ldr	r2, [pc, #252]	; (8000b40 <xTaskIncrementTick+0x118>)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d122      	bne.n	8000a94 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000a4e:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <xTaskIncrementTick+0x11c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00c      	beq.n	8000a72 <xTaskIncrementTick+0x4a>
        __asm volatile
 8000a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a5c:	b672      	cpsid	i
 8000a5e:	f383 8811 	msr	BASEPRI, r3
 8000a62:	f3bf 8f6f 	isb	sy
 8000a66:	f3bf 8f4f 	dsb	sy
 8000a6a:	b662      	cpsie	i
 8000a6c:	603b      	str	r3, [r7, #0]
    }
 8000a6e:	bf00      	nop
 8000a70:	e7fe      	b.n	8000a70 <xTaskIncrementTick+0x48>
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <xTaskIncrementTick+0x11c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <xTaskIncrementTick+0x120>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <xTaskIncrementTick+0x11c>)
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <xTaskIncrementTick+0x120>)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <xTaskIncrementTick+0x124>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a2f      	ldr	r2, [pc, #188]	; (8000b4c <xTaskIncrementTick+0x124>)
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	f000 f962 	bl	8000d58 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000a94:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <xTaskIncrementTick+0x128>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d348      	bcc.n	8000b30 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <xTaskIncrementTick+0x11c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d104      	bne.n	8000ab2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <xTaskIncrementTick+0x128>)
 8000aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8000aae:	601a      	str	r2, [r3, #0]
                    break;
 8000ab0:	e03e      	b.n	8000b30 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <xTaskIncrementTick+0x11c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d203      	bcs.n	8000ad2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <xTaskIncrementTick+0x128>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000ad0:	e02e      	b.n	8000b30 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fcd6 	bl	8000488 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d004      	beq.n	8000aee <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	3318      	adds	r3, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fccd 	bl	8000488 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 ff89 	bl	8003a08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afa:	2201      	movs	r2, #1
 8000afc:	409a      	lsls	r2, r3
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <xTaskIncrementTick+0x12c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <xTaskIncrementTick+0x12c>)
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <xTaskIncrementTick+0x130>)
 8000b16:	441a      	add	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4610      	mov	r0, r2
 8000b20:	f7ff fc55 	bl	80003ce <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b24:	e7bb      	b.n	8000a9e <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <xTaskIncrementTick+0x134>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <xTaskIncrementTick+0x134>)
 8000b2e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000b30:	697b      	ldr	r3, [r7, #20]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	24000164 	.word	0x24000164
 8000b40:	24000140 	.word	0x24000140
 8000b44:	240000f4 	.word	0x240000f4
 8000b48:	240000f8 	.word	0x240000f8
 8000b4c:	24000154 	.word	0x24000154
 8000b50:	2400015c 	.word	0x2400015c
 8000b54:	24000144 	.word	0x24000144
 8000b58:	24000040 	.word	0x24000040
 8000b5c:	2400014c 	.word	0x2400014c

08000b60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <vTaskSwitchContext+0xc0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <vTaskSwitchContext+0xc4>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000b74:	e04f      	b.n	8000c16 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000b76:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <vTaskSwitchContext+0xc4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <vTaskSwitchContext+0xc8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	fab3 f383 	clz	r3, r3
 8000b88:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	f1c3 031f 	rsb	r3, r3, #31
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	4926      	ldr	r1, [pc, #152]	; (8000c2c <vTaskSwitchContext+0xcc>)
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10c      	bne.n	8000bc0 <vTaskSwitchContext+0x60>
        __asm volatile
 8000ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000baa:	b672      	cpsid	i
 8000bac:	f383 8811 	msr	BASEPRI, r3
 8000bb0:	f3bf 8f6f 	isb	sy
 8000bb4:	f3bf 8f4f 	dsb	sy
 8000bb8:	b662      	cpsie	i
 8000bba:	607b      	str	r3, [r7, #4]
    }
 8000bbc:	bf00      	nop
 8000bbe:	e7fe      	b.n	8000bbe <vTaskSwitchContext+0x5e>
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <vTaskSwitchContext+0xcc>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	3308      	adds	r3, #8
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d104      	bne.n	8000bf0 <vTaskSwitchContext+0x90>
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <vTaskSwitchContext+0xd0>)
 8000bf8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <vTaskSwitchContext+0xd0>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <vTaskSwitchContext+0xd4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d102      	bne.n	8000c0c <vTaskSwitchContext+0xac>
 8000c06:	f002 fe5f 	bl	80038c8 <SEGGER_SYSVIEW_OnIdle>
}
 8000c0a:	e004      	b.n	8000c16 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <vTaskSwitchContext+0xd0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 feb7 	bl	8003984 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	24000164 	.word	0x24000164
 8000c24:	24000150 	.word	0x24000150
 8000c28:	24000144 	.word	0x24000144
 8000c2c:	24000040 	.word	0x24000040
 8000c30:	2400003c 	.word	0x2400003c
 8000c34:	24000160 	.word	0x24000160

08000c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000c40:	f000 f84c 	bl	8000cdc <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <prvIdleTask+0x20>)
 8000c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000c54:	e7f4      	b.n	8000c40 <prvIdleTask+0x8>
 8000c56:	bf00      	nop
 8000c58:	e000ed04 	.word	0xe000ed04

08000c5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	e00c      	b.n	8000c82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <prvInitialiseTaskLists+0x60>)
 8000c74:	4413      	add	r3, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb7c 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b06      	cmp	r3, #6
 8000c86:	d9ef      	bls.n	8000c68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <prvInitialiseTaskLists+0x64>)
 8000c8a:	f7ff fb73 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <prvInitialiseTaskLists+0x68>)
 8000c90:	f7ff fb70 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <prvInitialiseTaskLists+0x6c>)
 8000c96:	f7ff fb6d 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <prvInitialiseTaskLists+0x70>)
 8000c9c:	f7ff fb6a 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <prvInitialiseTaskLists+0x74>)
 8000ca2:	f7ff fb67 	bl	8000374 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <prvInitialiseTaskLists+0x78>)
 8000ca8:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <prvInitialiseTaskLists+0x64>)
 8000caa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <prvInitialiseTaskLists+0x7c>)
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <prvInitialiseTaskLists+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	24000040 	.word	0x24000040
 8000cc0:	240000cc 	.word	0x240000cc
 8000cc4:	240000e0 	.word	0x240000e0
 8000cc8:	240000fc 	.word	0x240000fc
 8000ccc:	24000110 	.word	0x24000110
 8000cd0:	24000128 	.word	0x24000128
 8000cd4:	240000f4 	.word	0x240000f4
 8000cd8:	240000f8 	.word	0x240000f8

08000cdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ce2:	e019      	b.n	8000d18 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000ce4:	f000 f9dc 	bl	80010a0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <prvCheckTasksWaitingTermination+0x50>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fbc7 	bl	8000488 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <prvCheckTasksWaitingTermination+0x54>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <prvCheckTasksWaitingTermination+0x54>)
 8000d02:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <prvCheckTasksWaitingTermination+0x58>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <prvCheckTasksWaitingTermination+0x58>)
 8000d0c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000d0e:	f000 f9fb 	bl	8001108 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f810 	bl	8000d38 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <prvCheckTasksWaitingTermination+0x58>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e1      	bne.n	8000ce4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24000110 	.word	0x24000110
 8000d30:	2400013c 	.word	0x2400013c
 8000d34:	24000124 	.word	0x24000124

08000d38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fbc5 	bl	80014d4 <vPortFree>
                vPortFree( pxTCB );
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 fbc2 	bl	80014d4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <prvResetNextTaskUnblockTime+0x30>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d104      	bne.n	8000d70 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <prvResetNextTaskUnblockTime+0x34>)
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000d6e:	e005      	b.n	8000d7c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <prvResetNextTaskUnblockTime+0x30>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <prvResetNextTaskUnblockTime+0x34>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	240000f4 	.word	0x240000f4
 8000d8c:	2400015c 	.word	0x2400015c

08000d90 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000d9a:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3304      	adds	r3, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fb6e 	bl	8000488 <uxListRemove>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10b      	bne.n	8000dca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	2201      	movs	r2, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8000dc8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d110      	bne.n	8000df4 <prvAddCurrentTaskToDelayedList+0x64>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00d      	beq.n	8000df4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	211b      	movs	r1, #27
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fe54 	bl	8003a8c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3304      	adds	r3, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4820      	ldr	r0, [pc, #128]	; (8000e70 <prvAddCurrentTaskToDelayedList+0xe0>)
 8000dee:	f7ff faee 	bl	80003ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000df2:	e032      	b.n	8000e5a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d20f      	bcs.n	8000e2c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2104      	movs	r1, #4
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fe3a 	bl	8003a8c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3304      	adds	r3, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4610      	mov	r0, r2
 8000e26:	f7ff faf6 	bl	8000416 <vListInsert>
}
 8000e2a:	e016      	b.n	8000e5a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2104      	movs	r1, #4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fe2a 	bl	8003a8c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3304      	adds	r3, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4610      	mov	r0, r2
 8000e46:	f7ff fae6 	bl	8000416 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <prvAddCurrentTaskToDelayedList+0xec>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d202      	bcs.n	8000e5a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <prvAddCurrentTaskToDelayedList+0xec>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	6013      	str	r3, [r2, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	24000140 	.word	0x24000140
 8000e68:	2400003c 	.word	0x2400003c
 8000e6c:	24000144 	.word	0x24000144
 8000e70:	24000128 	.word	0x24000128
 8000e74:	240000f8 	.word	0x240000f8
 8000e78:	240000f4 	.word	0x240000f4
 8000e7c:	2400015c 	.word	0x2400015c

08000e80 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3b04      	subs	r3, #4
 8000e9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	f023 0201 	bic.w	r2, r3, #1
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3b04      	subs	r3, #4
 8000eae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <pxPortInitialiseStack+0x64>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3b14      	subs	r3, #20
 8000eba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3b04      	subs	r3, #4
 8000ec6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f06f 0202 	mvn.w	r2, #2
 8000ece:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3b20      	subs	r3, #32
 8000ed4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	08000ee9 	.word	0x08000ee9

08000ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <prvTaskExitError+0x5c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efa:	d00c      	beq.n	8000f16 <prvTaskExitError+0x2e>
        __asm volatile
 8000efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f00:	b672      	cpsid	i
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	b662      	cpsie	i
 8000f10:	60fb      	str	r3, [r7, #12]
    }
 8000f12:	bf00      	nop
 8000f14:	e7fe      	b.n	8000f14 <prvTaskExitError+0x2c>
        __asm volatile
 8000f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f1a:	b672      	cpsid	i
 8000f1c:	f383 8811 	msr	BASEPRI, r3
 8000f20:	f3bf 8f6f 	isb	sy
 8000f24:	f3bf 8f4f 	dsb	sy
 8000f28:	b662      	cpsie	i
 8000f2a:	60bb      	str	r3, [r7, #8]
    }
 8000f2c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000f2e:	bf00      	nop
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0fc      	beq.n	8000f30 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	24000004 	.word	0x24000004
	...

08000f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <pxCurrentTCBConst2>)
 8000f52:	6819      	ldr	r1, [r3, #0]
 8000f54:	6808      	ldr	r0, [r1, #0]
 8000f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f5a:	f380 8809 	msr	PSP, r0
 8000f5e:	f3bf 8f6f 	isb	sy
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	f380 8811 	msr	BASEPRI, r0
 8000f6a:	4770      	bx	lr
 8000f6c:	f3af 8000 	nop.w

08000f70 <pxCurrentTCBConst2>:
 8000f70:	2400003c 	.word	0x2400003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop

08000f78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <prvPortStartFirstTask+0x24>)
 8000f7a:	6800      	ldr	r0, [r0, #0]
 8000f7c:	6800      	ldr	r0, [r0, #0]
 8000f7e:	f380 8808 	msr	MSP, r0
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	f380 8814 	msr	CONTROL, r0
 8000f8a:	b662      	cpsie	i
 8000f8c:	b661      	cpsie	f
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	f3bf 8f6f 	isb	sy
 8000f96:	df00      	svc	0
 8000f98:	bf00      	nop
 8000f9a:	0000      	.short	0x0000
 8000f9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop

08000fa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <xPortStartScheduler+0xe4>)
 8000fac:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <xPortStartScheduler+0xe8>)
 8000fd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <xPortStartScheduler+0xec>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000fd8:	e009      	b.n	8000fee <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <xPortStartScheduler+0xec>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	; (8001090 <xPortStartScheduler+0xec>)
 8000fe2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	2b80      	cmp	r3, #128	; 0x80
 8000ff8:	d0ef      	beq.n	8000fda <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <xPortStartScheduler+0xec>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	d00c      	beq.n	8001020 <xPortStartScheduler+0x7c>
        __asm volatile
 8001006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800100a:	b672      	cpsid	i
 800100c:	f383 8811 	msr	BASEPRI, r3
 8001010:	f3bf 8f6f 	isb	sy
 8001014:	f3bf 8f4f 	dsb	sy
 8001018:	b662      	cpsie	i
 800101a:	60bb      	str	r3, [r7, #8]
    }
 800101c:	bf00      	nop
 800101e:	e7fe      	b.n	800101e <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <xPortStartScheduler+0xec>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <xPortStartScheduler+0xec>)
 8001028:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <xPortStartScheduler+0xec>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <xPortStartScheduler+0xec>)
 8001034:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <xPortStartScheduler+0xf0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <xPortStartScheduler+0xf0>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001048:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <xPortStartScheduler+0xf0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <xPortStartScheduler+0xf0>)
 8001050:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001054:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001056:	f000 f8e3 	bl	8001220 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <xPortStartScheduler+0xf4>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001060:	f000 f902 	bl	8001268 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <xPortStartScheduler+0xf8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <xPortStartScheduler+0xf8>)
 800106a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800106e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001070:	f7ff ff82 	bl	8000f78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001074:	f7ff fd74 	bl	8000b60 <vTaskSwitchContext>
    prvTaskExitError();
 8001078:	f7ff ff36 	bl	8000ee8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e400 	.word	0xe000e400
 800108c:	24000168 	.word	0x24000168
 8001090:	2400016c 	.word	0x2400016c
 8001094:	e000ed20 	.word	0xe000ed20
 8001098:	24000004 	.word	0x24000004
 800109c:	e000ef34 	.word	0xe000ef34

080010a0 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
        __asm volatile
 80010a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010aa:	b672      	cpsid	i
 80010ac:	f383 8811 	msr	BASEPRI, r3
 80010b0:	f3bf 8f6f 	isb	sy
 80010b4:	f3bf 8f4f 	dsb	sy
 80010b8:	b662      	cpsie	i
 80010ba:	607b      	str	r3, [r7, #4]
    }
 80010bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <vPortEnterCritical+0x60>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <vPortEnterCritical+0x60>)
 80010c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <vPortEnterCritical+0x60>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d111      	bne.n	80010f4 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <vPortEnterCritical+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00c      	beq.n	80010f4 <vPortEnterCritical+0x54>
        __asm volatile
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	b672      	cpsid	i
 80010e0:	f383 8811 	msr	BASEPRI, r3
 80010e4:	f3bf 8f6f 	isb	sy
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	b662      	cpsie	i
 80010ee:	603b      	str	r3, [r7, #0]
    }
 80010f0:	bf00      	nop
 80010f2:	e7fe      	b.n	80010f2 <vPortEnterCritical+0x52>
    }
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	24000004 	.word	0x24000004
 8001104:	e000ed04 	.word	0xe000ed04

08001108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <vPortExitCritical+0x54>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10c      	bne.n	8001130 <vPortExitCritical+0x28>
        __asm volatile
 8001116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111a:	b672      	cpsid	i
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	b662      	cpsie	i
 800112a:	607b      	str	r3, [r7, #4]
    }
 800112c:	bf00      	nop
 800112e:	e7fe      	b.n	800112e <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <vPortExitCritical+0x54>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <vPortExitCritical+0x54>)
 8001138:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <vPortExitCritical+0x54>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <vPortExitCritical+0x46>
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800114c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	24000004 	.word	0x24000004

08001160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001160:	f3ef 8009 	mrs	r0, PSP
 8001164:	f3bf 8f6f 	isb	sy
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <pxCurrentTCBConst>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f01e 0f10 	tst.w	lr, #16
 8001170:	bf08      	it	eq
 8001172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117a:	6010      	str	r0, [r2, #0]
 800117c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001184:	b672      	cpsid	i
 8001186:	f380 8811 	msr	BASEPRI, r0
 800118a:	f3bf 8f4f 	dsb	sy
 800118e:	f3bf 8f6f 	isb	sy
 8001192:	b662      	cpsie	i
 8001194:	f7ff fce4 	bl	8000b60 <vTaskSwitchContext>
 8001198:	f04f 0000 	mov.w	r0, #0
 800119c:	f380 8811 	msr	BASEPRI, r0
 80011a0:	bc09      	pop	{r0, r3}
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	6808      	ldr	r0, [r1, #0]
 80011a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011aa:	f01e 0f10 	tst.w	lr, #16
 80011ae:	bf08      	it	eq
 80011b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80011b4:	f380 8809 	msr	PSP, r0
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <pxCurrentTCBConst>:
 80011c0:	2400003c 	.word	0x2400003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop

080011c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
        __asm volatile
 80011ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d2:	b672      	cpsid	i
 80011d4:	f383 8811 	msr	BASEPRI, r3
 80011d8:	f3bf 8f6f 	isb	sy
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	b662      	cpsie	i
 80011e2:	607b      	str	r3, [r7, #4]
    }
 80011e4:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80011e6:	f002 faf5 	bl	80037d4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80011ea:	f7ff fc1d 	bl	8000a28 <xTaskIncrementTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80011f4:	f002 fb4c 	bl	8003890 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <SysTick_Handler+0x54>)
 80011fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e001      	b.n	8001206 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8001202:	f002 fb29 	bl	8003858 <SEGGER_SYSVIEW_RecordExitISR>
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
        __asm volatile
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f383 8811 	msr	BASEPRI, r3
    }
 8001210:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000ed04 	.word	0xe000ed04

08001220 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <vPortSetupTimerInterrupt+0x34>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <vPortSetupTimerInterrupt+0x38>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <vPortSetupTimerInterrupt+0x3c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <vPortSetupTimerInterrupt+0x40>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	099b      	lsrs	r3, r3, #6
 800123c:	4a09      	ldr	r2, [pc, #36]	; (8001264 <vPortSetupTimerInterrupt+0x44>)
 800123e:	3b01      	subs	r3, #1
 8001240:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <vPortSetupTimerInterrupt+0x34>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010
 8001258:	e000e018 	.word	0xe000e018
 800125c:	24000010 	.word	0x24000010
 8001260:	10624dd3 	.word	0x10624dd3
 8001264:	e000e014 	.word	0xe000e014

08001268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001268:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001278 <vPortEnableVFP+0x10>
 800126c:	6801      	ldr	r1, [r0, #0]
 800126e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001272:	6001      	str	r1, [r0, #0]
 8001274:	4770      	bx	lr
 8001276:	0000      	.short	0x0000
 8001278:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop

08001280 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001286:	f3ef 8305 	mrs	r3, IPSR
 800128a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	d916      	bls.n	80012c0 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001292:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <vPortValidateInterruptPriority+0x78>)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <vPortValidateInterruptPriority+0x7c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	7afa      	ldrb	r2, [r7, #11]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d20c      	bcs.n	80012c0 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80012a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012aa:	b672      	cpsid	i
 80012ac:	f383 8811 	msr	BASEPRI, r3
 80012b0:	f3bf 8f6f 	isb	sy
 80012b4:	f3bf 8f4f 	dsb	sy
 80012b8:	b662      	cpsie	i
 80012ba:	607b      	str	r3, [r7, #4]
    }
 80012bc:	bf00      	nop
 80012be:	e7fe      	b.n	80012be <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <vPortValidateInterruptPriority+0x80>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <vPortValidateInterruptPriority+0x84>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d90c      	bls.n	80012ea <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 80012d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d4:	b672      	cpsid	i
 80012d6:	f383 8811 	msr	BASEPRI, r3
 80012da:	f3bf 8f6f 	isb	sy
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	b662      	cpsie	i
 80012e4:	603b      	str	r3, [r7, #0]
    }
 80012e6:	bf00      	nop
 80012e8:	e7fe      	b.n	80012e8 <vPortValidateInterruptPriority+0x68>
    }
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e3f0 	.word	0xe000e3f0
 80012fc:	24000168 	.word	0x24000168
 8001300:	e000ed0c 	.word	0xe000ed0c
 8001304:	2400016c 	.word	0x2400016c

08001308 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001314:	f7ff fad4 	bl	80008c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001318:	4b68      	ldr	r3, [pc, #416]	; (80014bc <pvPortMalloc+0x1b4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001320:	f000 f93e 	bl	80015a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <pvPortMalloc+0x1b8>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 80ab 	bne.w	8001488 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d02f      	beq.n	8001398 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001338:	2208      	movs	r2, #8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d229      	bcs.n	8001398 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8001344:	2208      	movs	r2, #8
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	2b00      	cmp	r3, #0
 8001354:	d023      	beq.n	800139e <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f023 0307 	bic.w	r3, r3, #7
 800135c:	3308      	adds	r3, #8
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	d216      	bcs.n	8001392 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	3308      	adds	r3, #8
 800136c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d012      	beq.n	800139e <pvPortMalloc+0x96>
        __asm volatile
 8001378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137c:	b672      	cpsid	i
 800137e:	f383 8811 	msr	BASEPRI, r3
 8001382:	f3bf 8f6f 	isb	sy
 8001386:	f3bf 8f4f 	dsb	sy
 800138a:	b662      	cpsie	i
 800138c:	617b      	str	r3, [r7, #20]
    }
 800138e:	bf00      	nop
 8001390:	e7fe      	b.n	8001390 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001396:	e002      	b.n	800139e <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	e000      	b.n	80013a0 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800139e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d070      	beq.n	8001488 <pvPortMalloc+0x180>
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <pvPortMalloc+0x1bc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d86b      	bhi.n	8001488 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <pvPortMalloc+0x1c0>)
 80013b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <pvPortMalloc+0x1c0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013ba:	e004      	b.n	80013c6 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d903      	bls.n	80013d8 <pvPortMalloc+0xd0>
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f1      	bne.n	80013bc <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80013d8:	4b38      	ldr	r3, [pc, #224]	; (80014bc <pvPortMalloc+0x1b4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013de:	429a      	cmp	r2, r3
 80013e0:	d052      	beq.n	8001488 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2208      	movs	r2, #8
 80013e8:	4413      	add	r3, r2
 80013ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	2308      	movs	r3, #8
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	429a      	cmp	r2, r3
 8001402:	d921      	bls.n	8001448 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00c      	beq.n	8001430 <pvPortMalloc+0x128>
        __asm volatile
 8001416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800141a:	b672      	cpsid	i
 800141c:	f383 8811 	msr	BASEPRI, r3
 8001420:	f3bf 8f6f 	isb	sy
 8001424:	f3bf 8f4f 	dsb	sy
 8001428:	b662      	cpsie	i
 800142a:	613b      	str	r3, [r7, #16]
    }
 800142c:	bf00      	nop
 800142e:	e7fe      	b.n	800142e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	1ad2      	subs	r2, r2, r3
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001442:	69b8      	ldr	r0, [r7, #24]
 8001444:	f000 f90e 	bl	8001664 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <pvPortMalloc+0x1bc>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <pvPortMalloc+0x1bc>)
 8001454:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <pvPortMalloc+0x1bc>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <pvPortMalloc+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d203      	bcs.n	800146a <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <pvPortMalloc+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a19      	ldr	r2, [pc, #100]	; (80014cc <pvPortMalloc+0x1c4>)
 8001468:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <pvPortMalloc+0x1b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	431a      	orrs	r2, r3
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <pvPortMalloc+0x1c8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <pvPortMalloc+0x1c8>)
 8001486:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001488:	f7ff fa28 	bl	80008dc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00c      	beq.n	80014b0 <pvPortMalloc+0x1a8>
        __asm volatile
 8001496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149a:	b672      	cpsid	i
 800149c:	f383 8811 	msr	BASEPRI, r3
 80014a0:	f3bf 8f6f 	isb	sy
 80014a4:	f3bf 8f4f 	dsb	sy
 80014a8:	b662      	cpsie	i
 80014aa:	60fb      	str	r3, [r7, #12]
    }
 80014ac:	bf00      	nop
 80014ae:	e7fe      	b.n	80014ae <pvPortMalloc+0x1a6>
    return pvReturn;
 80014b0:	69fb      	ldr	r3, [r7, #28]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	24007178 	.word	0x24007178
 80014c0:	2400718c 	.word	0x2400718c
 80014c4:	2400717c 	.word	0x2400717c
 80014c8:	24007170 	.word	0x24007170
 80014cc:	24007180 	.word	0x24007180
 80014d0:	24007184 	.word	0x24007184

080014d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d051      	beq.n	800158a <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80014e6:	2308      	movs	r3, #8
 80014e8:	425b      	negs	r3, r3
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4413      	add	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <vPortFree+0xc0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <vPortFree+0x48>
        __asm volatile
 8001502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001506:	b672      	cpsid	i
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	b662      	cpsie	i
 8001516:	60fb      	str	r3, [r7, #12]
    }
 8001518:	bf00      	nop
 800151a:	e7fe      	b.n	800151a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <vPortFree+0x6a>
        __asm volatile
 8001524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001528:	b672      	cpsid	i
 800152a:	f383 8811 	msr	BASEPRI, r3
 800152e:	f3bf 8f6f 	isb	sy
 8001532:	f3bf 8f4f 	dsb	sy
 8001536:	b662      	cpsie	i
 8001538:	60bb      	str	r3, [r7, #8]
    }
 800153a:	bf00      	nop
 800153c:	e7fe      	b.n	800153c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <vPortFree+0xc0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d01e      	beq.n	800158a <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d11a      	bne.n	800158a <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <vPortFree+0xc0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001564:	f7ff f9ac 	bl	80008c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <vPortFree+0xc4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4413      	add	r3, r2
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <vPortFree+0xc4>)
 8001574:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001576:	6938      	ldr	r0, [r7, #16]
 8001578:	f000 f874 	bl	8001664 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <vPortFree+0xc8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <vPortFree+0xc8>)
 8001584:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001586:	f7ff f9a9 	bl	80008dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2400718c 	.word	0x2400718c
 8001598:	2400717c 	.word	0x2400717c
 800159c:	24007188 	.word	0x24007188

080015a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80015a6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80015aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <prvHeapInit+0xac>)
 80015ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00c      	beq.n	80015d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3307      	adds	r3, #7
 80015be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 0307 	bic.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <prvHeapInit+0xac>)
 80015d0:	4413      	add	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <prvHeapInit+0xb0>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <prvHeapInit+0xb0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	4413      	add	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80015ec:	2208      	movs	r2, #8
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f023 0307 	bic.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <prvHeapInit+0xb4>)
 8001600:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <prvHeapInit+0xb4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <prvHeapInit+0xb4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	1ad2      	subs	r2, r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <prvHeapInit+0xb4>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <prvHeapInit+0xb8>)
 800162e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <prvHeapInit+0xbc>)
 8001636:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <prvHeapInit+0xc0>)
 800163a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	24000170 	.word	0x24000170
 8001650:	24007170 	.word	0x24007170
 8001654:	24007178 	.word	0x24007178
 8001658:	24007180 	.word	0x24007180
 800165c:	2400717c 	.word	0x2400717c
 8001660:	2400718c 	.word	0x2400718c

08001664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <prvInsertBlockIntoFreeList+0xac>)
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e002      	b.n	8001678 <prvInsertBlockIntoFreeList+0x14>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d8f7      	bhi.n	8001672 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4413      	add	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	d108      	bne.n	80016a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	441a      	add	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	441a      	add	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d118      	bne.n	80016ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <prvInsertBlockIntoFreeList+0xb0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d00d      	beq.n	80016e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	441a      	add	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e008      	b.n	80016f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <prvInsertBlockIntoFreeList+0xb0>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e003      	b.n	80016f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d002      	beq.n	8001702 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	24007170 	.word	0x24007170
 8001714:	24007178 	.word	0x24007178

08001718 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <_cbSendSystemDesc+0x14>)
 800171e:	f002 f803 	bl	8003728 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <_cbSendSystemDesc+0x18>)
 8001724:	f002 f800 	bl	8003728 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	08008974 	.word	0x08008974
 8001730:	080089a4 	.word	0x080089a4

08001734 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <SEGGER_SYSVIEW_Conf+0x20>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SEGGER_SYSVIEW_Conf+0x20>)
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SEGGER_SYSVIEW_Conf+0x24>)
 8001742:	4a06      	ldr	r2, [pc, #24]	; (800175c <SEGGER_SYSVIEW_Conf+0x28>)
 8001744:	f001 fc72 	bl	800302c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001748:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 800174c:	f001 fcb4 	bl	80030b8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	24000010 	.word	0x24000010
 8001758:	08001719 	.word	0x08001719
 800175c:	08008b04 	.word	0x08008b04

08001760 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e033      	b.n	80017d4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800176c:	491e      	ldr	r1, [pc, #120]	; (80017e8 <_cbSendTaskList+0x88>)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	491a      	ldr	r1, [pc, #104]	; (80017e8 <_cbSendTaskList+0x88>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	3304      	adds	r3, #4
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	4c16      	ldr	r4, [pc, #88]	; (80017e8 <_cbSendTaskList+0x88>)
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4423      	add	r3, r4
 800179c:	3308      	adds	r3, #8
 800179e:	681c      	ldr	r4, [r3, #0]
 80017a0:	4d11      	ldr	r5, [pc, #68]	; (80017e8 <_cbSendTaskList+0x88>)
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	442b      	add	r3, r5
 80017ae:	330c      	adds	r3, #12
 80017b0:	681d      	ldr	r5, [r3, #0]
 80017b2:	4e0d      	ldr	r6, [pc, #52]	; (80017e8 <_cbSendTaskList+0x88>)
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4433      	add	r3, r6
 80017c0:	3310      	adds	r3, #16
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	462b      	mov	r3, r5
 80017c8:	4622      	mov	r2, r4
 80017ca:	f000 f8bd 	bl	8001948 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3301      	adds	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <_cbSendTaskList+0x8c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d3c6      	bcc.n	800176c <_cbSendTaskList+0xc>
  }
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e8:	24007190 	.word	0x24007190
 80017ec:	24007230 	.word	0x24007230

080017f0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80017f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80017f8:	f7ff f904 	bl	8000a04 <xTaskGetTickCountFromISR>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2200      	movs	r2, #0
 8001800:	469a      	mov	sl, r3
 8001802:	4693      	mov	fp, r2
 8001804:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	f04f 0a00 	mov.w	sl, #0
 8001814:	f04f 0b00 	mov.w	fp, #0
 8001818:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800181c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001820:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001824:	4652      	mov	r2, sl
 8001826:	465b      	mov	r3, fp
 8001828:	1a14      	subs	r4, r2, r0
 800182a:	eb63 0501 	sbc.w	r5, r3, r1
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	00ab      	lsls	r3, r5, #2
 8001838:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800183c:	00a2      	lsls	r2, r4, #2
 800183e:	4614      	mov	r4, r2
 8001840:	461d      	mov	r5, r3
 8001842:	eb14 0800 	adds.w	r8, r4, r0
 8001846:	eb45 0901 	adc.w	r9, r5, r1
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800185a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800185e:	4690      	mov	r8, r2
 8001860:	4699      	mov	r9, r3
 8001862:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001866:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001878 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001886:	2205      	movs	r2, #5
 8001888:	492b      	ldr	r1, [pc, #172]	; (8001938 <SYSVIEW_AddTask+0xc0>)
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f007 f83c 	bl	8008908 <memcmp>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d04b      	beq.n	800192e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <SYSVIEW_AddTask+0xc4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b07      	cmp	r3, #7
 800189c:	d903      	bls.n	80018a6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800189e:	4828      	ldr	r0, [pc, #160]	; (8001940 <SYSVIEW_AddTask+0xc8>)
 80018a0:	f002 fa44 	bl	8003d2c <SEGGER_SYSVIEW_Warn>
    return;
 80018a4:	e044      	b.n	8001930 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <SYSVIEW_AddTask+0xc4>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4926      	ldr	r1, [pc, #152]	; (8001944 <SYSVIEW_AddTask+0xcc>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <SYSVIEW_AddTask+0xc4>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4921      	ldr	r1, [pc, #132]	; (8001944 <SYSVIEW_AddTask+0xcc>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3304      	adds	r3, #4
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <SYSVIEW_AddTask+0xc4>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	491b      	ldr	r1, [pc, #108]	; (8001944 <SYSVIEW_AddTask+0xcc>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3308      	adds	r3, #8
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <SYSVIEW_AddTask+0xc4>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4916      	ldr	r1, [pc, #88]	; (8001944 <SYSVIEW_AddTask+0xcc>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	330c      	adds	r3, #12
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <SYSVIEW_AddTask+0xc4>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4910      	ldr	r1, [pc, #64]	; (8001944 <SYSVIEW_AddTask+0xcc>)
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3310      	adds	r3, #16
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <SYSVIEW_AddTask+0xc4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	4a08      	ldr	r2, [pc, #32]	; (800193c <SYSVIEW_AddTask+0xc4>)
 800191a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f80e 	bl	8001948 <SYSVIEW_SendTaskInfo>
 800192c:	e000      	b.n	8001930 <SYSVIEW_AddTask+0xb8>
    return;
 800192e:	bf00      	nop

}
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	080089b4 	.word	0x080089b4
 800193c:	24007230 	.word	0x24007230
 8001940:	080089bc 	.word	0x080089bc
 8001944:	24007190 	.word	0x24007190

08001948 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	2214      	movs	r2, #20
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f006 fff0 	bl	8008944 <memset>
  TaskInfo.TaskID     = TaskID;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fddb 	bl	8003538 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001a22:	f002 f9df 	bl	8003de4 <SEGGER_SYSVIEW_IsStarted>
 8001a26:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001a2e:	f001 fc07 	bl	8003240 <SEGGER_SYSVIEW_Start>
  }
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <_cbOnUARTRx+0x3c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d806      	bhi.n	8001a5c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <_cbOnUARTRx+0x3c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_cbOnUARTRx+0x3c>)
 8001a58:	701a      	strb	r2, [r3, #0]
    goto Done;
 8001a5a:	e009      	b.n	8001a70 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8001a5c:	f7ff ffde 	bl	8001a1c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <_cbOnUARTRx+0x3c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4618      	mov	r0, r3
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f000 fb9e 	bl	80021ac <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8001a70:	bf00      	nop
}
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	24000008 	.word	0x24000008

08001a7c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <_cbOnUARTTx+0x5c>)
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d80f      	bhi.n	8001aac <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <_cbOnUARTTx+0x5c>)
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <_cbOnUARTTx+0x60>)
 8001a94:	5c9a      	ldrb	r2, [r3, r2]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <_cbOnUARTTx+0x5c>)
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <_cbOnUARTTx+0x5c>)
 8001aa4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8001aaa:	e00f      	b.n	8001acc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <_cbOnUARTTx+0x5c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fa1d 	bl	8001ef4 <SEGGER_RTT_ReadUpBufferNoLock>
 8001aba:	4603      	mov	r3, r0
 8001abc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	da02      	bge.n	8001aca <_cbOnUARTTx+0x4e>
    r = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e000      	b.n	8001acc <_cbOnUARTTx+0x50>
  }
Done:
 8001aca:	bf00      	nop
  return r;
 8001acc:	68fb      	ldr	r3, [r7, #12]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	24000008 	.word	0x24000008
 8001adc:	08008b0c 	.word	0x08008b0c

08001ae0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <SEGGER_UART_init+0x1c>)
 8001aea:	4905      	ldr	r1, [pc, #20]	; (8001b00 <SEGGER_UART_init+0x20>)
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f865 	bl	8001bbc <HIF_UART_Init>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	08001a3d 	.word	0x08001a3d
 8001b00:	08001a7d 	.word	0x08001a7d

08001b04 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <USART2_IRQHandler+0x80>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0320 	and.w	r3, r3, #32
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d011      	beq.n	8001b3e <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <USART2_IRQHandler+0x84>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 030b 	and.w	r3, r3, #11
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d108      	bne.n	8001b3e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <USART2_IRQHandler+0x88>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <USART2_IRQHandler+0x88>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	79fa      	ldrb	r2, [r7, #7]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01a      	beq.n	8001b7e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <USART2_IRQHandler+0x8c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d015      	beq.n	8001b7c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <USART2_IRQHandler+0x8c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1dfa      	adds	r2, r7, #7
 8001b56:	4610      	mov	r0, r2
 8001b58:	4798      	blx	r3
 8001b5a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <USART2_IRQHandler+0x90>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <USART2_IRQHandler+0x90>)
 8001b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e006      	b.n	8001b7e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <USART2_IRQHandler+0x80>)
 8001b72:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <USART2_IRQHandler+0x94>)
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e000      	b.n	8001b7e <USART2_IRQHandler+0x7a>
      return;
 8001b7c:	bf00      	nop
    }
  }
}
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	4000441c 	.word	0x4000441c
 8001b88:	40004424 	.word	0x40004424
 8001b8c:	24007234 	.word	0x24007234
 8001b90:	24007238 	.word	0x24007238
 8001b94:	40004400 	.word	0x40004400
 8001b98:	40004428 	.word	0x40004428

08001b9c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40004400 	.word	0x40004400

08001bbc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HIF_UART_Init+0xc8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a2d      	ldr	r2, [pc, #180]	; (8001c84 <HIF_UART_Init+0xc8>)
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd2:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HIF_UART_Init+0xcc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <HIF_UART_Init+0xcc>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HIF_UART_Init+0xd0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bec:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001bf4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8001bf6:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HIF_UART_Init+0xd0>)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HIF_UART_Init+0xd4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c08:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8001c12:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <HIF_UART_Init+0xd4>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HIF_UART_Init+0xd8>)
 8001c1a:	f248 022d 	movw	r2, #32813	; 0x802d
 8001c1e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HIF_UART_Init+0xdc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HIF_UART_Init+0xe0>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8001c32:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HIF_UART_Init+0xe4>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4a:	d302      	bcc.n	8001c52 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8001c4c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001c50:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <HIF_UART_Init+0xe8>)
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HIF_UART_Init+0xec>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HIF_UART_Init+0xf0>)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8001c6e:	2106      	movs	r1, #6
 8001c70:	2026      	movs	r0, #38	; 0x26
 8001c72:	f7ff fea9 	bl	80019c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8001c76:	2026      	movs	r0, #38	; 0x26
 8001c78:	f7ff fe88 	bl	800198c <__NVIC_EnableIRQ>
}
 8001c7c:	bf00      	nop
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	580244e8 	.word	0x580244e8
 8001c88:	580244e0 	.word	0x580244e0
 8001c8c:	58020020 	.word	0x58020020
 8001c90:	58020000 	.word	0x58020000
 8001c94:	40004400 	.word	0x40004400
 8001c98:	40004404 	.word	0x40004404
 8001c9c:	40004408 	.word	0x40004408
 8001ca0:	0e4e1c00 	.word	0x0e4e1c00
 8001ca4:	4000440c 	.word	0x4000440c
 8001ca8:	24007234 	.word	0x24007234
 8001cac:	24007238 	.word	0x24007238

08001cb0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <_DoInit+0xa0>)
 8001cb8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8001cba:	22a8      	movs	r2, #168	; 0xa8
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	f006 fe40 	bl	8008944 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4a20      	ldr	r2, [pc, #128]	; (8001d54 <_DoInit+0xa4>)
 8001cd4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <_DoInit+0xa8>)
 8001cda:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	4a16      	ldr	r2, [pc, #88]	; (8001d54 <_DoInit+0xa4>)
 8001cfa:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <_DoInit+0xac>)
 8001d00:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001d1a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	e00c      	b.n	8001d3e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f1c3 030f 	rsb	r3, r3, #15
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <_DoInit+0xb0>)
 8001d2c:	5cd1      	ldrb	r1, [r2, r3]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	460a      	mov	r2, r1
 8001d36:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	d9ef      	bls.n	8001d24 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001d44:	f3bf 8f5f 	dmb	sy
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2400723c 	.word	0x2400723c
 8001d54:	08008a0c 	.word	0x08008a0c
 8001d58:	240072e4 	.word	0x240072e4
 8001d5c:	240076e4 	.word	0x240076e4
 8001d60:	08008b10 	.word	0x08008b10

08001d64 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d905      	bls.n	8001d94 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	e007      	b.n	8001da4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	69b9      	ldr	r1, [r7, #24]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	1acb      	subs	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b01      	subs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dae:	4293      	cmp	r3, r2
 8001db0:	bf28      	it	cs
 8001db2:	4613      	movcs	r3, r2
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	bf28      	it	cs
 8001dbe:	4613      	movcs	r3, r2
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	6978      	ldr	r0, [r7, #20]
 8001dd2:	f006 fda9 	bl	8008928 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001dd6:	6a3a      	ldr	r2, [r7, #32]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	4413      	add	r3, r2
 8001ddc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	4413      	add	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	4413      	add	r3, r2
 8001df4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d101      	bne.n	8001e04 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001e04:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1b2      	bne.n	8001d7a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001e14:	6a3b      	ldr	r3, [r7, #32]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3728      	adds	r7, #40	; 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b088      	sub	sp, #32
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d911      	bls.n	8001e66 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	6938      	ldr	r0, [r7, #16]
 8001e52:	f006 fd69 	bl	8008928 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001e56:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	441a      	add	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001e64:	e01f      	b.n	8001ea6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	4413      	add	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	6938      	ldr	r0, [r7, #16]
 8001e7a:	f006 fd55 	bl	8008928 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4413      	add	r3, r2
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4619      	mov	r1, r3
 8001e96:	6938      	ldr	r0, [r7, #16]
 8001e98:	f006 fd46 	bl	8008928 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001e9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	60da      	str	r2, [r3, #12]
}
 8001ea6:	bf00      	nop
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001eae:	b480      	push	{r7}
 8001eb0:	b087      	sub	sp, #28
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d808      	bhi.n	8001edc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad2      	subs	r2, r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e004      	b.n	8001ee6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001ee6:	697b      	ldr	r3, [r7, #20]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	; 0x30
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8001f00:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8001f0e:	f7ff fecf 	bl	8001cb0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4a37      	ldr	r2, [pc, #220]	; (8001ffc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8001f20:	4413      	add	r3, r2
 8001f22:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d92b      	bls.n	8001f98 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	bf28      	it	cs
 8001f52:	4613      	movcs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5c:	4413      	add	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	6939      	ldr	r1, [r7, #16]
 8001f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f66:	f006 fcdf 	bl	8008928 <memcpy>
    NumBytesRead += NumBytesRem;
 8001f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	4413      	add	r3, r2
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	4413      	add	r3, r2
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4413      	add	r3, r2
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d101      	bne.n	8001f98 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	bf28      	it	cs
 8001fa8:	4613      	movcs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	4413      	add	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	6939      	ldr	r1, [r7, #16]
 8001fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fc2:	f006 fcb1 	bl	8008928 <memcpy>
    NumBytesRead += NumBytesRem;
 8001fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	4413      	add	r3, r2
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3730      	adds	r7, #48	; 0x30
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2400723c 	.word	0x2400723c

08002000 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800200c:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <SEGGER_RTT_ReadNoLock+0x108>)
 800200e:	623b      	str	r3, [r7, #32]
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <SEGGER_RTT_ReadNoLock+0x1e>
 800201a:	f7ff fe49 	bl	8001cb0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	3360      	adds	r3, #96	; 0x60
 800202a:	4a37      	ldr	r2, [pc, #220]	; (8002108 <SEGGER_RTT_ReadNoLock+0x108>)
 800202c:	4413      	add	r3, r2
 800202e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	429a      	cmp	r2, r3
 800204a:	d92b      	bls.n	80020a4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4293      	cmp	r3, r2
 800205c:	bf28      	it	cs
 800205e:	4613      	movcs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	4413      	add	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	6939      	ldr	r1, [r7, #16]
 8002070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002072:	f006 fc59 	bl	8008928 <memcpy>
    NumBytesRead += NumBytesRem;
 8002076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4413      	add	r3, r2
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	4413      	add	r3, r2
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800208e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4413      	add	r3, r2
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800209c:	429a      	cmp	r2, r3
 800209e:	d101      	bne.n	80020a4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf28      	it	cs
 80020b4:	4613      	movcs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d019      	beq.n	80020f2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	4413      	add	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	6939      	ldr	r1, [r7, #16]
 80020cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ce:	f006 fc2b 	bl	8008928 <memcpy>
    NumBytesRead += NumBytesRem;
 80020d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	4413      	add	r3, r2
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80020da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4413      	add	r3, r2
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80020ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4413      	add	r3, r2
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002100:	4618      	mov	r0, r3
 8002102:	3730      	adds	r7, #48	; 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2400723c 	.word	0x2400723c

0800210c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	3360      	adds	r3, #96	; 0x60
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800212a:	4413      	add	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d029      	beq.n	800218a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8002136:	2b02      	cmp	r3, #2
 8002138:	d82e      	bhi.n	8002198 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800213e:	2b01      	cmp	r3, #1
 8002140:	d013      	beq.n	800216a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8002142:	e029      	b.n	8002198 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f7ff feb2 	bl	8001eae <_GetAvailWriteSpace>
 800214a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d202      	bcs.n	800215a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002158:	e021      	b.n	800219e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff fe5b 	bl	8001e1e <_WriteNoCheck>
    break;
 8002168:	e019      	b.n	800219e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff fe9f 	bl	8001eae <_GetAvailWriteSpace>
 8002170:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4293      	cmp	r3, r2
 8002178:	bf28      	it	cs
 800217a:	4613      	movcs	r3, r2
 800217c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	69b9      	ldr	r1, [r7, #24]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff fe4b 	bl	8001e1e <_WriteNoCheck>
    break;
 8002188:	e009      	b.n	800219e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	69b9      	ldr	r1, [r7, #24]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff fde8 	bl	8001d64 <_WriteBlocking>
 8002194:	61f8      	str	r0, [r7, #28]
    break;
 8002196:	e002      	b.n	800219e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    break;
 800219c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800219e:	69fb      	ldr	r3, [r7, #28]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2400723c 	.word	0x2400723c

080021ac <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <SEGGER_RTT_WriteDownBuffer+0x1e>
 80021c6:	f7ff fd73 	bl	8001cb0 <_DoInit>
  SEGGER_RTT_LOCK();
 80021ca:	f3ef 8311 	mrs	r3, BASEPRI
 80021ce:	f04f 0120 	mov.w	r1, #32
 80021d2:	f381 8811 	msr	BASEPRI, r1
 80021d6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff ff95 	bl	800210c <SEGGER_RTT_WriteDownBufferNoLock>
 80021e2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80021ea:	697b      	ldr	r3, [r7, #20]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2400723c 	.word	0x2400723c

080021f8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002214:	f7ff fd4c 	bl	8001cb0 <_DoInit>
  SEGGER_RTT_LOCK();
 8002218:	f3ef 8311 	mrs	r3, BASEPRI
 800221c:	f04f 0120 	mov.w	r1, #32
 8002220:	f381 8811 	msr	BASEPRI, r1
 8002224:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002226:	4b35      	ldr	r3, [pc, #212]	; (80022fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002228:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800222e:	6939      	ldr	r1, [r7, #16]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	3304      	adds	r3, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	429a      	cmp	r2, r3
 8002254:	dbeb      	blt.n	800222e <SEGGER_RTT_AllocUpBuffer+0x36>
 8002256:	e000      	b.n	800225a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002258:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	429a      	cmp	r2, r3
 8002262:	da3f      	bge.n	80022e4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002264:	6939      	ldr	r1, [r7, #16]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002278:	6939      	ldr	r1, [r7, #16]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	3304      	adds	r3, #4
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800228e:	6939      	ldr	r1, [r7, #16]
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3320      	adds	r3, #32
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80022a2:	6939      	ldr	r1, [r7, #16]
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3328      	adds	r3, #40	; 0x28
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80022b6:	6939      	ldr	r1, [r7, #16]
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3324      	adds	r3, #36	; 0x24
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	332c      	adds	r3, #44	; 0x2c
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80022de:	f3bf 8f5f 	dmb	sy
 80022e2:	e002      	b.n	80022ea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80022f0:	69fb      	ldr	r3, [r7, #28]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2400723c 	.word	0x2400723c

08002300 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800231c:	f7ff fcc8 	bl	8001cb0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002322:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d82c      	bhi.n	8002384 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800232a:	f3ef 8311 	mrs	r3, BASEPRI
 800232e:	f04f 0120 	mov.w	r1, #32
 8002332:	f381 8811 	msr	BASEPRI, r1
 8002336:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	3360      	adds	r3, #96	; 0x60
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002372:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002374:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	e002      	b.n	800238a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800238c:	4618      	mov	r0, r3
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2400723c 	.word	0x2400723c

08002398 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00f      	beq.n	80023ce <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80023ae:	e002      	b.n	80023b6 <_EncodeStr+0x1e>
      Len++;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	3301      	adds	r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f6      	bne.n	80023b0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d901      	bls.n	80023ce <_EncodeStr+0x36>
      Len = Limit;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2bfe      	cmp	r3, #254	; 0xfe
 80023d2:	d806      	bhi.n	80023e2 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60fa      	str	r2, [r7, #12]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e011      	b.n	8002406 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	60fa      	str	r2, [r7, #12]
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	60fa      	str	r2, [r7, #12]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	0a19      	lsrs	r1, r3, #8
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	60fa      	str	r2, [r7, #12]
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800240a:	e00a      	b.n	8002422 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	1c53      	adds	r3, r2, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1c59      	adds	r1, r3, #1
 8002416:	60f9      	str	r1, [r7, #12]
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	701a      	strb	r2, [r3, #0]
    n++;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	429a      	cmp	r2, r3
 8002428:	d3f0      	bcc.n	800240c <_EncodeStr+0x74>
  }
  return pPayload;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3307      	adds	r3, #7
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002456:	4b35      	ldr	r3, [pc, #212]	; (800252c <_HandleIncomingPacket+0xdc>)
 8002458:	7e1b      	ldrb	r3, [r3, #24]
 800245a:	4618      	mov	r0, r3
 800245c:	1cfb      	adds	r3, r7, #3
 800245e:	2201      	movs	r2, #1
 8002460:	4619      	mov	r1, r3
 8002462:	f7ff fdcd 	bl	8002000 <SEGGER_RTT_ReadNoLock>
 8002466:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d052      	beq.n	8002514 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d031      	beq.n	80024d8 <_HandleIncomingPacket+0x88>
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	dc40      	bgt.n	80024fa <_HandleIncomingPacket+0xaa>
 8002478:	2b07      	cmp	r3, #7
 800247a:	dc15      	bgt.n	80024a8 <_HandleIncomingPacket+0x58>
 800247c:	2b00      	cmp	r3, #0
 800247e:	dd3c      	ble.n	80024fa <_HandleIncomingPacket+0xaa>
 8002480:	3b01      	subs	r3, #1
 8002482:	2b06      	cmp	r3, #6
 8002484:	d839      	bhi.n	80024fa <_HandleIncomingPacket+0xaa>
 8002486:	a201      	add	r2, pc, #4	; (adr r2, 800248c <_HandleIncomingPacket+0x3c>)
 8002488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248c:	080024af 	.word	0x080024af
 8002490:	080024b5 	.word	0x080024b5
 8002494:	080024bb 	.word	0x080024bb
 8002498:	080024c1 	.word	0x080024c1
 800249c:	080024c7 	.word	0x080024c7
 80024a0:	080024cd 	.word	0x080024cd
 80024a4:	080024d3 	.word	0x080024d3
 80024a8:	2b7f      	cmp	r3, #127	; 0x7f
 80024aa:	d035      	beq.n	8002518 <_HandleIncomingPacket+0xc8>
 80024ac:	e025      	b.n	80024fa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80024ae:	f000 fec7 	bl	8003240 <SEGGER_SYSVIEW_Start>
      break;
 80024b2:	e036      	b.n	8002522 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80024b4:	f000 ff80 	bl	80033b8 <SEGGER_SYSVIEW_Stop>
      break;
 80024b8:	e033      	b.n	8002522 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80024ba:	f001 f959 	bl	8003770 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80024be:	e030      	b.n	8002522 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80024c0:	f001 f91e 	bl	8003700 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80024c4:	e02d      	b.n	8002522 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80024c6:	f000 ff9d 	bl	8003404 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80024ca:	e02a      	b.n	8002522 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80024cc:	f001 fbdc 	bl	8003c88 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80024d0:	e027      	b.n	8002522 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80024d2:	f001 fbbb 	bl	8003c4c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80024d6:	e024      	b.n	8002522 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <_HandleIncomingPacket+0xdc>)
 80024da:	7e1b      	ldrb	r3, [r3, #24]
 80024dc:	4618      	mov	r0, r3
 80024de:	1cfb      	adds	r3, r7, #3
 80024e0:	2201      	movs	r2, #1
 80024e2:	4619      	mov	r1, r3
 80024e4:	f7ff fd8c 	bl	8002000 <SEGGER_RTT_ReadNoLock>
 80024e8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 fb2a 	bl	8003b4c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80024f8:	e010      	b.n	800251c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da0e      	bge.n	8002520 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <_HandleIncomingPacket+0xdc>)
 8002504:	7e1b      	ldrb	r3, [r3, #24]
 8002506:	4618      	mov	r0, r3
 8002508:	1cfb      	adds	r3, r7, #3
 800250a:	2201      	movs	r2, #1
 800250c:	4619      	mov	r1, r3
 800250e:	f7ff fd77 	bl	8002000 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002512:	e005      	b.n	8002520 <_HandleIncomingPacket+0xd0>
    }
  }
 8002514:	bf00      	nop
 8002516:	e004      	b.n	8002522 <_HandleIncomingPacket+0xd2>
      break;
 8002518:	bf00      	nop
 800251a:	e002      	b.n	8002522 <_HandleIncomingPacket+0xd2>
      break;
 800251c:	bf00      	nop
 800251e:	e000      	b.n	8002522 <_HandleIncomingPacket+0xd2>
      break;
 8002520:	bf00      	nop
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2407f2fc 	.word	0x2407f2fc

08002530 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002536:	2301      	movs	r3, #1
 8002538:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	3301      	adds	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <_TrySendOverflowPacket+0xe0>)
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
 800254a:	e00b      	b.n	8002564 <_TrySendOverflowPacket+0x34>
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	b2da      	uxtb	r2, r3
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	09db      	lsrs	r3, r3, #7
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	2b7f      	cmp	r3, #127	; 0x7f
 8002568:	d8f0      	bhi.n	800254c <_TrySendOverflowPacket+0x1c>
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <_TrySendOverflowPacket+0xe4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <_TrySendOverflowPacket+0xe0>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	e00b      	b.n	80025ac <_TrySendOverflowPacket+0x7c>
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	1c59      	adds	r1, r3, #1
 800259c:	6279      	str	r1, [r7, #36]	; 0x24
 800259e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	09db      	lsrs	r3, r3, #7
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b7f      	cmp	r3, #127	; 0x7f
 80025b0:	d8f0      	bhi.n	8002594 <_TrySendOverflowPacket+0x64>
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	627a      	str	r2, [r7, #36]	; 0x24
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_TrySendOverflowPacket+0xe0>)
 80025c4:	785b      	ldrb	r3, [r3, #1]
 80025c6:	4618      	mov	r0, r3
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fd fe84 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80025d8:	4603      	mov	r3, r0
 80025da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80025dc:	f7ff fade 	bl	8001b9c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <_TrySendOverflowPacket+0xe0>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_TrySendOverflowPacket+0xe0>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <_TrySendOverflowPacket+0xe0>)
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e004      	b.n	8002604 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <_TrySendOverflowPacket+0xe0>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <_TrySendOverflowPacket+0xe0>)
 8002602:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002604:	693b      	ldr	r3, [r7, #16]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3730      	adds	r7, #48	; 0x30
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2407f2fc 	.word	0x2407f2fc
 8002614:	e0001004 	.word	0xe0001004

08002618 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002624:	4b96      	ldr	r3, [pc, #600]	; (8002880 <_SendPacket+0x268>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d010      	beq.n	800264e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800262c:	4b94      	ldr	r3, [pc, #592]	; (8002880 <_SendPacket+0x268>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8130 	beq.w	8002896 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002636:	4b92      	ldr	r3, [pc, #584]	; (8002880 <_SendPacket+0x268>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d109      	bne.n	8002652 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800263e:	f7ff ff77 	bl	8002530 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002642:	4b8f      	ldr	r3, [pc, #572]	; (8002880 <_SendPacket+0x268>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f040 8127 	bne.w	800289a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800264c:	e001      	b.n	8002652 <_SendPacket+0x3a>
    goto Send;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <_SendPacket+0x3c>
Send:
 8002652:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b1f      	cmp	r3, #31
 8002658:	d809      	bhi.n	800266e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800265a:	4b89      	ldr	r3, [pc, #548]	; (8002880 <_SendPacket+0x268>)
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 8118 	bne.w	800289e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b17      	cmp	r3, #23
 8002672:	d807      	bhi.n	8002684 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3b01      	subs	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e0c4      	b.n	800280e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b7f      	cmp	r3, #127	; 0x7f
 8002690:	d912      	bls.n	80026b8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	09da      	lsrs	r2, r3, #7
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3b01      	subs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	3a01      	subs	r2, #1
 80026aa:	60fa      	str	r2, [r7, #12]
 80026ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e006      	b.n	80026c6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b7e      	cmp	r3, #126	; 0x7e
 80026ca:	d807      	bhi.n	80026dc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e098      	b.n	800280e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e2:	d212      	bcs.n	800270a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	09da      	lsrs	r2, r3, #7
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	3a01      	subs	r2, #1
 80026fc:	60fa      	str	r2, [r7, #12]
 80026fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002702:	b2da      	uxtb	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e081      	b.n	800280e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002710:	d21d      	bcs.n	800274e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0b9a      	lsrs	r2, r3, #14
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3b01      	subs	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	09db      	lsrs	r3, r3, #7
 8002726:	b2db      	uxtb	r3, r3
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	3a01      	subs	r2, #1
 800272c:	60fa      	str	r2, [r7, #12]
 800272e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002732:	b2da      	uxtb	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	3a01      	subs	r2, #1
 8002740:	60fa      	str	r2, [r7, #12]
 8002742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e05f      	b.n	800280e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002754:	d228      	bcs.n	80027a8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0d5a      	lsrs	r2, r3, #21
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b01      	subs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0b9b      	lsrs	r3, r3, #14
 800276a:	b2db      	uxtb	r3, r3
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	3a01      	subs	r2, #1
 8002770:	60fa      	str	r2, [r7, #12]
 8002772:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	09db      	lsrs	r3, r3, #7
 8002780:	b2db      	uxtb	r3, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	3a01      	subs	r2, #1
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	3a01      	subs	r2, #1
 800279a:	60fa      	str	r2, [r7, #12]
 800279c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e032      	b.n	800280e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0f1a      	lsrs	r2, r3, #28
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	0d5b      	lsrs	r3, r3, #21
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	3a01      	subs	r2, #1
 80027c2:	60fa      	str	r2, [r7, #12]
 80027c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0b9b      	lsrs	r3, r3, #14
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	3a01      	subs	r2, #1
 80027d8:	60fa      	str	r2, [r7, #12]
 80027da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	09db      	lsrs	r3, r3, #7
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	3a01      	subs	r2, #1
 80027ee:	60fa      	str	r2, [r7, #12]
 80027f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	3a01      	subs	r2, #1
 8002802:	60fa      	str	r2, [r7, #12]
 8002804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <_SendPacket+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <_SendPacket+0x268>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	623b      	str	r3, [r7, #32]
 8002826:	e00b      	b.n	8002840 <_SendPacket+0x228>
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	6279      	str	r1, [r7, #36]	; 0x24
 8002832:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	09db      	lsrs	r3, r3, #7
 800283e:	623b      	str	r3, [r7, #32]
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2b7f      	cmp	r3, #127	; 0x7f
 8002844:	d8f0      	bhi.n	8002828 <_SendPacket+0x210>
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	627a      	str	r2, [r7, #36]	; 0x24
 800284c:	6a3a      	ldr	r2, [r7, #32]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <_SendPacket+0x268>)
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	4618      	mov	r0, r3
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	461a      	mov	r2, r3
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	f7fd fd3b 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800286a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800286c:	f7ff f996 	bl	8001b9c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002876:	4a02      	ldr	r2, [pc, #8]	; (8002880 <_SendPacket+0x268>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	60d3      	str	r3, [r2, #12]
 800287c:	e010      	b.n	80028a0 <_SendPacket+0x288>
 800287e:	bf00      	nop
 8002880:	2407f2fc 	.word	0x2407f2fc
 8002884:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <_SendPacket+0x2d8>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <_SendPacket+0x2d8>)
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e004      	b.n	80028a0 <_SendPacket+0x288>
    goto SendDone;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <_SendPacket+0x288>
      goto SendDone;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <_SendPacket+0x288>
      goto SendDone;
 800289e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_SendPacket+0x2d8>)
 80028a2:	7e1b      	ldrb	r3, [r3, #24]
 80028a4:	4619      	mov	r1, r3
 80028a6:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <_SendPacket+0x2dc>)
 80028a8:	460b      	mov	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	336c      	adds	r3, #108	; 0x6c
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <_SendPacket+0x2d8>)
 80028b8:	7e1b      	ldrb	r3, [r3, #24]
 80028ba:	4618      	mov	r0, r3
 80028bc:	490d      	ldr	r1, [pc, #52]	; (80028f4 <_SendPacket+0x2dc>)
 80028be:	4603      	mov	r3, r0
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4403      	add	r3, r0
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3370      	adds	r3, #112	; 0x70
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d00b      	beq.n	80028e8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_SendPacket+0x2d8>)
 80028d2:	789b      	ldrb	r3, [r3, #2]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <_SendPacket+0x2d8>)
 80028da:	2201      	movs	r2, #1
 80028dc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80028de:	f7ff fdb7 	bl	8002450 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80028e2:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <_SendPacket+0x2d8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80028e8:	bf00      	nop
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2407f2fc 	.word	0x2407f2fc
 80028f4:	2400723c 	.word	0x2400723c

080028f8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3301      	adds	r3, #1
 800290e:	2b80      	cmp	r3, #128	; 0x80
 8002910:	d80a      	bhi.n	8002928 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	1c59      	adds	r1, r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6051      	str	r1, [r2, #4]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b80      	cmp	r3, #128	; 0x80
 800292e:	d15a      	bne.n	80029e6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	623b      	str	r3, [r7, #32]
 8002950:	e00b      	b.n	800296a <_StoreChar+0x72>
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	6279      	str	r1, [r7, #36]	; 0x24
 800295c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	09db      	lsrs	r3, r3, #7
 8002968:	623b      	str	r3, [r7, #32]
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2b7f      	cmp	r3, #127	; 0x7f
 800296e:	d8f0      	bhi.n	8002952 <_StoreChar+0x5a>
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	627a      	str	r2, [r7, #36]	; 0x24
 8002976:	6a3a      	ldr	r2, [r7, #32]
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	e00b      	b.n	80029a2 <_StoreChar+0xaa>
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	1c59      	adds	r1, r3, #1
 8002992:	61f9      	str	r1, [r7, #28]
 8002994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	09db      	lsrs	r3, r3, #7
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b7f      	cmp	r3, #127	; 0x7f
 80029a6:	d8f0      	bhi.n	800298a <_StoreChar+0x92>
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	61fa      	str	r2, [r7, #28]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	221a      	movs	r2, #26
 80029be:	6939      	ldr	r1, [r7, #16]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fe29 	bl	8002618 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fd34 	bl	8002438 <_PreparePacket>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  }
}
 80029e6:	bf00      	nop
 80029e8:	3728      	adds	r7, #40	; 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002a02:	2301      	movs	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002a0a:	e007      	b.n	8002a1c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	623b      	str	r3, [r7, #32]
    Width++;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d2f3      	bcs.n	8002a0c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d901      	bls.n	8002a30 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8002a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11f      	bne.n	8002a7a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01c      	beq.n	8002a7a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <_PrintUnsigned+0x66>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_PrintUnsigned+0x66>
        c = '0';
 8002a50:	2330      	movs	r3, #48	; 0x30
 8002a52:	76fb      	strb	r3, [r7, #27]
 8002a54:	e001      	b.n	8002a5a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8002a56:	2320      	movs	r3, #32
 8002a58:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002a5a:	e007      	b.n	8002a6c <_PrintUnsigned+0x7c>
        FieldWidth--;
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8002a62:	7efb      	ldrb	r3, [r7, #27]
 8002a64:	4619      	mov	r1, r3
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff ff46 	bl	80028f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <_PrintUnsigned+0x8a>
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d3f0      	bcc.n	8002a5c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d903      	bls.n	8002a88 <_PrintUnsigned+0x98>
      NumDigits--;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	e009      	b.n	8002a9c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d200      	bcs.n	8002a9c <_PrintUnsigned+0xac>
        break;
 8002a9a:	e005      	b.n	8002aa8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002aa6:	e7e8      	b.n	8002a7a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <_PrintUnsigned+0x128>)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff ff14 	bl	80028f8 <_StoreChar>
    Digit /= Base;
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e3      	bne.n	8002aa8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d011      	beq.n	8002b0e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002af0:	e006      	b.n	8002b00 <_PrintUnsigned+0x110>
        FieldWidth--;
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	3b01      	subs	r3, #1
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8002af8:	2120      	movs	r1, #32
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff fefc 	bl	80028f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <_PrintUnsigned+0x11e>
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3f1      	bcc.n	8002af2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	08008b30 	.word	0x08008b30

08002b1c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bfb8      	it	lt
 8002b30:	425b      	neglt	r3, r3
 8002b32:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002b34:	2301      	movs	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002b38:	e007      	b.n	8002b4a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b42:	613b      	str	r3, [r7, #16]
    Width++;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	daf3      	bge.n	8002b3a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d901      	bls.n	8002b5e <_PrintInt+0x42>
    Width = NumDigits;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <_PrintInt+0x5e>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db04      	blt.n	8002b74 <_PrintInt+0x58>
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <_PrintInt+0x5e>
    FieldWidth--;
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <_PrintInt+0x6e>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <_PrintInt+0x9c>
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00e      	beq.n	8002bb8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002b9a:	e006      	b.n	8002baa <_PrintInt+0x8e>
        FieldWidth--;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff fea7 	bl	80028f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <_PrintInt+0x9c>
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3f1      	bcc.n	8002b9c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	da07      	bge.n	8002bce <_PrintInt+0xb2>
    v = -v;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	425b      	negs	r3, r3
 8002bc2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8002bc4:	212d      	movs	r1, #45	; 0x2d
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fe96 	bl	80028f8 <_StoreChar>
 8002bcc:	e008      	b.n	8002be0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8002bd8:	212b      	movs	r1, #43	; 0x2b
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff fe8c 	bl	80028f8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d019      	beq.n	8002c1e <_PrintInt+0x102>
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d114      	bne.n	8002c1e <_PrintInt+0x102>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d111      	bne.n	8002c1e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c00:	e006      	b.n	8002c10 <_PrintInt+0xf4>
        FieldWidth--;
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8002c08:	2130      	movs	r1, #48	; 0x30
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff fe74 	bl	80028f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <_PrintInt+0x102>
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d3f1      	bcc.n	8002c02 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff fedf 	bl	80029f0 <_PrintUnsigned>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b098      	sub	sp, #96	; 0x60
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c48:	f3ef 8311 	mrs	r3, BASEPRI
 8002c4c:	f04f 0120 	mov.w	r1, #32
 8002c50:	f381 8811 	msr	BASEPRI, r1
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
 8002c56:	48b7      	ldr	r0, [pc, #732]	; (8002f34 <_VPrintTarget+0x2f8>)
 8002c58:	f7ff fbee 	bl	8002438 <_PreparePacket>
 8002c5c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8002c5e:	4bb5      	ldr	r3, [pc, #724]	; (8002f34 <_VPrintTarget+0x2f8>)
 8002c60:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8002c82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8183 	beq.w	8002f92 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8002c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c90:	2b25      	cmp	r3, #37	; 0x25
 8002c92:	f040 8170 	bne.w	8002f76 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8002ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002caa:	3b23      	subs	r3, #35	; 0x23
 8002cac:	2b0d      	cmp	r3, #13
 8002cae:	d83f      	bhi.n	8002d30 <_VPrintTarget+0xf4>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <_VPrintTarget+0x7c>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002d21 	.word	0x08002d21
 8002cbc:	08002d31 	.word	0x08002d31
 8002cc0:	08002d31 	.word	0x08002d31
 8002cc4:	08002d31 	.word	0x08002d31
 8002cc8:	08002d31 	.word	0x08002d31
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002d31 	.word	0x08002d31
 8002cd4:	08002d31 	.word	0x08002d31
 8002cd8:	08002d11 	.word	0x08002d11
 8002cdc:	08002d31 	.word	0x08002d31
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002d31 	.word	0x08002d31
 8002ce8:	08002d31 	.word	0x08002d31
 8002cec:	08002d01 	.word	0x08002d01
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e01a      	b.n	8002d36 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d02:	f043 0302 	orr.w	r3, r3, #2
 8002d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e012      	b.n	8002d36 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e00a      	b.n	8002d36 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d22:	f043 0308 	orr.w	r3, r3, #8
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e002      	b.n	8002d36 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8002d30:	2300      	movs	r3, #0
 8002d32:	653b      	str	r3, [r7, #80]	; 0x50
 8002d34:	bf00      	nop
        }
      } while (v);
 8002d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1b0      	bne.n	8002c9e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8002d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d4c:	2b2f      	cmp	r3, #47	; 0x2f
 8002d4e:	d912      	bls.n	8002d76 <_VPrintTarget+0x13a>
 8002d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d54:	2b39      	cmp	r3, #57	; 0x39
 8002d56:	d80e      	bhi.n	8002d76 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8002d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b30      	subs	r3, #48	; 0x30
 8002d72:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8002d74:	e7e4      	b.n	8002d40 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8002d82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d86:	2b2e      	cmp	r3, #46	; 0x2e
 8002d88:	d11d      	bne.n	8002dc6 <_VPrintTarget+0x18a>
        sFormat++;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8002d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d9c:	2b2f      	cmp	r3, #47	; 0x2f
 8002d9e:	d912      	bls.n	8002dc6 <_VPrintTarget+0x18a>
 8002da0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002da4:	2b39      	cmp	r3, #57	; 0x39
 8002da6:	d80e      	bhi.n	8002dc6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8002dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	461a      	mov	r2, r3
 8002dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b30      	subs	r3, #48	; 0x30
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8002dc4:	e7e4      	b.n	8002d90 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8002dce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dd2:	2b6c      	cmp	r3, #108	; 0x6c
 8002dd4:	d003      	beq.n	8002dde <_VPrintTarget+0x1a2>
 8002dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dda:	2b68      	cmp	r3, #104	; 0x68
 8002ddc:	d107      	bne.n	8002dee <_VPrintTarget+0x1b2>
          c = *sFormat;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3301      	adds	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8002dec:	e7ef      	b.n	8002dce <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8002dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002df2:	2b25      	cmp	r3, #37	; 0x25
 8002df4:	f000 80b3 	beq.w	8002f5e <_VPrintTarget+0x322>
 8002df8:	2b25      	cmp	r3, #37	; 0x25
 8002dfa:	f2c0 80b7 	blt.w	8002f6c <_VPrintTarget+0x330>
 8002dfe:	2b78      	cmp	r3, #120	; 0x78
 8002e00:	f300 80b4 	bgt.w	8002f6c <_VPrintTarget+0x330>
 8002e04:	2b58      	cmp	r3, #88	; 0x58
 8002e06:	f2c0 80b1 	blt.w	8002f6c <_VPrintTarget+0x330>
 8002e0a:	3b58      	subs	r3, #88	; 0x58
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	f200 80ad 	bhi.w	8002f6c <_VPrintTarget+0x330>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <_VPrintTarget+0x1dc>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002f0f 	.word	0x08002f0f
 8002e1c:	08002f6d 	.word	0x08002f6d
 8002e20:	08002f6d 	.word	0x08002f6d
 8002e24:	08002f6d 	.word	0x08002f6d
 8002e28:	08002f6d 	.word	0x08002f6d
 8002e2c:	08002f6d 	.word	0x08002f6d
 8002e30:	08002f6d 	.word	0x08002f6d
 8002e34:	08002f6d 	.word	0x08002f6d
 8002e38:	08002f6d 	.word	0x08002f6d
 8002e3c:	08002f6d 	.word	0x08002f6d
 8002e40:	08002f6d 	.word	0x08002f6d
 8002e44:	08002e9d 	.word	0x08002e9d
 8002e48:	08002ec3 	.word	0x08002ec3
 8002e4c:	08002f6d 	.word	0x08002f6d
 8002e50:	08002f6d 	.word	0x08002f6d
 8002e54:	08002f6d 	.word	0x08002f6d
 8002e58:	08002f6d 	.word	0x08002f6d
 8002e5c:	08002f6d 	.word	0x08002f6d
 8002e60:	08002f6d 	.word	0x08002f6d
 8002e64:	08002f6d 	.word	0x08002f6d
 8002e68:	08002f6d 	.word	0x08002f6d
 8002e6c:	08002f6d 	.word	0x08002f6d
 8002e70:	08002f6d 	.word	0x08002f6d
 8002e74:	08002f6d 	.word	0x08002f6d
 8002e78:	08002f39 	.word	0x08002f39
 8002e7c:	08002f6d 	.word	0x08002f6d
 8002e80:	08002f6d 	.word	0x08002f6d
 8002e84:	08002f6d 	.word	0x08002f6d
 8002e88:	08002f6d 	.word	0x08002f6d
 8002e8c:	08002ee9 	.word	0x08002ee9
 8002e90:	08002f6d 	.word	0x08002f6d
 8002e94:	08002f6d 	.word	0x08002f6d
 8002e98:	08002f0f 	.word	0x08002f0f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1d19      	adds	r1, r3, #4
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6011      	str	r1, [r2, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8002eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8002eb0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fd1c 	bl	80028f8 <_StoreChar>
        break;
 8002ec0:	e055      	b.n	8002f6e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1d19      	adds	r1, r3, #4
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6011      	str	r1, [r2, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8002ed0:	f107 0014 	add.w	r0, r7, #20
 8002ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	220a      	movs	r2, #10
 8002ee0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002ee2:	f7ff fe1b 	bl	8002b1c <_PrintInt>
        break;
 8002ee6:	e042      	b.n	8002f6e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	1d19      	adds	r1, r3, #4
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6011      	str	r1, [r2, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8002ef6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002ef8:	f107 0014 	add.w	r0, r7, #20
 8002efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	220a      	movs	r2, #10
 8002f08:	f7ff fd72 	bl	80029f0 <_PrintUnsigned>
        break;
 8002f0c:	e02f      	b.n	8002f6e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	1d19      	adds	r1, r3, #4
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6011      	str	r1, [r2, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8002f1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f1e:	f107 0014 	add.w	r0, r7, #20
 8002f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	f7ff fd5f 	bl	80029f0 <_PrintUnsigned>
        break;
 8002f32:	e01c      	b.n	8002f6e <_VPrintTarget+0x332>
 8002f34:	2407f32c 	.word	0x2407f32c
      case 'p':
        v = va_arg(*pParamList, int);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1d19      	adds	r1, r3, #4
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8002f46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f48:	f107 0014 	add.w	r0, r7, #20
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	2308      	movs	r3, #8
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2308      	movs	r3, #8
 8002f56:	2210      	movs	r2, #16
 8002f58:	f7ff fd4a 	bl	80029f0 <_PrintUnsigned>
        break;
 8002f5c:	e007      	b.n	8002f6e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	2125      	movs	r1, #37	; 0x25
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fcc7 	bl	80028f8 <_StoreChar>
        break;
 8002f6a:	e000      	b.n	8002f6e <_VPrintTarget+0x332>
      default:
        break;
 8002f6c:	bf00      	nop
      }
      sFormat++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e007      	b.n	8002f86 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8002f76:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fcb9 	bl	80028f8 <_StoreChar>
    }
  } while (*sFormat);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f47f ae72 	bne.w	8002c74 <_VPrintTarget+0x38>
 8002f90:	e000      	b.n	8002f94 <_VPrintTarget+0x358>
      break;
 8002f92:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d041      	beq.n	800301e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002faa:	e00b      	b.n	8002fc4 <_VPrintTarget+0x388>
 8002fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb2:	1c59      	adds	r1, r3, #1
 8002fb4:	6439      	str	r1, [r7, #64]	; 0x40
 8002fb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	09db      	lsrs	r3, r3, #7
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc8:	d8f0      	bhi.n	8002fac <_VPrintTarget+0x370>
 8002fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	643a      	str	r2, [r7, #64]	; 0x40
 8002fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fde:	2300      	movs	r3, #0
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe2:	e00b      	b.n	8002ffc <_VPrintTarget+0x3c0>
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	1c59      	adds	r1, r3, #1
 8002fec:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff8:	09db      	lsrs	r3, r3, #7
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8003000:	d8f0      	bhi.n	8002fe4 <_VPrintTarget+0x3a8>
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	63ba      	str	r2, [r7, #56]	; 0x38
 8003008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	69b9      	ldr	r1, [r7, #24]
 8003016:	221a      	movs	r2, #26
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fafd 	bl	8002618 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003024:	bf00      	nop
 8003026:	3758      	adds	r7, #88	; 0x58
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800303a:	2300      	movs	r3, #0
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <SEGGER_SYSVIEW_Init+0x74>)
 800303e:	4919      	ldr	r1, [pc, #100]	; (80030a4 <SEGGER_SYSVIEW_Init+0x78>)
 8003040:	4819      	ldr	r0, [pc, #100]	; (80030a8 <SEGGER_SYSVIEW_Init+0x7c>)
 8003042:	f7ff f8d9 	bl	80021f8 <SEGGER_RTT_AllocUpBuffer>
 8003046:	4603      	mov	r3, r0
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4b18      	ldr	r3, [pc, #96]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 800304c:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 8003050:	785a      	ldrb	r2, [r3, #1]
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 8003054:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 8003058:	7e1b      	ldrb	r3, [r3, #24]
 800305a:	4618      	mov	r0, r3
 800305c:	2300      	movs	r3, #0
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2308      	movs	r3, #8
 8003062:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <SEGGER_SYSVIEW_Init+0x84>)
 8003064:	4910      	ldr	r1, [pc, #64]	; (80030a8 <SEGGER_SYSVIEW_Init+0x7c>)
 8003066:	f7ff f94b 	bl	8002300 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <SEGGER_SYSVIEW_Init+0x88>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 8003076:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003078:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003084:	4a09      	ldr	r2, [pc, #36]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800308a:	4a08      	ldr	r2, [pc, #32]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <SEGGER_SYSVIEW_Init+0x80>)
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	00077c00 	.word	0x00077c00
 80030a4:	240076f4 	.word	0x240076f4
 80030a8:	08008a18 	.word	0x08008a18
 80030ac:	2407f2fc 	.word	0x2407f2fc
 80030b0:	2407f2f4 	.word	0x2407f2f4
 80030b4:	e0001004 	.word	0xe0001004

080030b8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6113      	str	r3, [r2, #16]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	2407f2fc 	.word	0x2407f2fc

080030d8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80030e0:	f3ef 8311 	mrs	r3, BASEPRI
 80030e4:	f04f 0120 	mov.w	r1, #32
 80030e8:	f381 8811 	msr	BASEPRI, r1
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4808      	ldr	r0, [pc, #32]	; (8003110 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80030f0:	f7ff f9a2 	bl	8002438 <_PreparePacket>
 80030f4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68b8      	ldr	r0, [r7, #8]
 80030fc:	f7ff fa8c 	bl	8002618 <_SendPacket>
  RECORD_END();
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f383 8811 	msr	BASEPRI, r3
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2407f32c 	.word	0x2407f32c

08003114 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800311e:	f3ef 8311 	mrs	r3, BASEPRI
 8003122:	f04f 0120 	mov.w	r1, #32
 8003126:	f381 8811 	msr	BASEPRI, r1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	4816      	ldr	r0, [pc, #88]	; (8003188 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800312e:	f7ff f983 	bl	8002438 <_PreparePacket>
 8003132:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	e00b      	b.n	800315a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1c59      	adds	r1, r3, #1
 800314a:	61f9      	str	r1, [r7, #28]
 800314c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	09db      	lsrs	r3, r3, #7
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b7f      	cmp	r3, #127	; 0x7f
 800315e:	d8f0      	bhi.n	8003142 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	61fa      	str	r2, [r7, #28]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	6938      	ldr	r0, [r7, #16]
 8003176:	f7ff fa4f 	bl	8002618 <_SendPacket>
  RECORD_END();
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f383 8811 	msr	BASEPRI, r3
}
 8003180:	bf00      	nop
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	2407f32c 	.word	0x2407f32c

0800318c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	; 0x30
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003198:	f3ef 8311 	mrs	r3, BASEPRI
 800319c:	f04f 0120 	mov.w	r1, #32
 80031a0:	f381 8811 	msr	BASEPRI, r1
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	4825      	ldr	r0, [pc, #148]	; (800323c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80031a8:	f7ff f946 	bl	8002438 <_PreparePacket>
 80031ac:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ba:	e00b      	b.n	80031d4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80031c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	09db      	lsrs	r3, r3, #7
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	2b7f      	cmp	r3, #127	; 0x7f
 80031d8:	d8f0      	bhi.n	80031bc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	623b      	str	r3, [r7, #32]
 80031f2:	e00b      	b.n	800320c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	1c59      	adds	r1, r3, #1
 80031fc:	6279      	str	r1, [r7, #36]	; 0x24
 80031fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	09db      	lsrs	r3, r3, #7
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	2b7f      	cmp	r3, #127	; 0x7f
 8003210:	d8f0      	bhi.n	80031f4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	627a      	str	r2, [r7, #36]	; 0x24
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	6979      	ldr	r1, [r7, #20]
 8003226:	69b8      	ldr	r0, [r7, #24]
 8003228:	f7ff f9f6 	bl	8002618 <_SendPacket>
  RECORD_END();
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f383 8811 	msr	BASEPRI, r3
}
 8003232:	bf00      	nop
 8003234:	3730      	adds	r7, #48	; 0x30
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	2407f32c 	.word	0x2407f32c

08003240 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b08c      	sub	sp, #48	; 0x30
 8003244:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003246:	4b59      	ldr	r3, [pc, #356]	; (80033ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800324c:	f3ef 8311 	mrs	r3, BASEPRI
 8003250:	f04f 0120 	mov.w	r1, #32
 8003254:	f381 8811 	msr	BASEPRI, r1
 8003258:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800325a:	4b54      	ldr	r3, [pc, #336]	; (80033ac <SEGGER_SYSVIEW_Start+0x16c>)
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	220a      	movs	r2, #10
 8003260:	4953      	ldr	r1, [pc, #332]	; (80033b0 <SEGGER_SYSVIEW_Start+0x170>)
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f83c 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800326e:	f7fe fc95 	bl	8001b9c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003272:	200a      	movs	r0, #10
 8003274:	f7ff ff30 	bl	80030d8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003278:	f3ef 8311 	mrs	r3, BASEPRI
 800327c:	f04f 0120 	mov.w	r1, #32
 8003280:	f381 8811 	msr	BASEPRI, r1
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	484b      	ldr	r0, [pc, #300]	; (80033b4 <SEGGER_SYSVIEW_Start+0x174>)
 8003288:	f7ff f8d6 	bl	8002438 <_PreparePacket>
 800328c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003296:	4b45      	ldr	r3, [pc, #276]	; (80033ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
 800329c:	e00b      	b.n	80032b6 <SEGGER_SYSVIEW_Start+0x76>
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a4:	1c59      	adds	r1, r3, #1
 80032a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80032a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	09db      	lsrs	r3, r3, #7
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	2b7f      	cmp	r3, #127	; 0x7f
 80032ba:	d8f0      	bhi.n	800329e <SEGGER_SYSVIEW_Start+0x5e>
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	4b36      	ldr	r3, [pc, #216]	; (80033ac <SEGGER_SYSVIEW_Start+0x16c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	e00b      	b.n	80032f0 <SEGGER_SYSVIEW_Start+0xb0>
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	1c59      	adds	r1, r3, #1
 80032e0:	6279      	str	r1, [r7, #36]	; 0x24
 80032e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	09db      	lsrs	r3, r3, #7
 80032ee:	623b      	str	r3, [r7, #32]
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	2b7f      	cmp	r3, #127	; 0x7f
 80032f4:	d8f0      	bhi.n	80032d8 <SEGGER_SYSVIEW_Start+0x98>
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	627a      	str	r2, [r7, #36]	; 0x24
 80032fc:	6a3a      	ldr	r2, [r7, #32]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	4b28      	ldr	r3, [pc, #160]	; (80033ac <SEGGER_SYSVIEW_Start+0x16c>)
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e00b      	b.n	800332a <SEGGER_SYSVIEW_Start+0xea>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	1c59      	adds	r1, r3, #1
 800331a:	61f9      	str	r1, [r7, #28]
 800331c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	09db      	lsrs	r3, r3, #7
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b7f      	cmp	r3, #127	; 0x7f
 800332e:	d8f0      	bhi.n	8003312 <SEGGER_SYSVIEW_Start+0xd2>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	61fa      	str	r2, [r7, #28]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	e00b      	b.n	8003362 <SEGGER_SYSVIEW_Start+0x122>
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	6179      	str	r1, [r7, #20]
 8003354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	09db      	lsrs	r3, r3, #7
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b7f      	cmp	r3, #127	; 0x7f
 8003366:	d8f0      	bhi.n	800334a <SEGGER_SYSVIEW_Start+0x10a>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	617a      	str	r2, [r7, #20]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003378:	2218      	movs	r2, #24
 800337a:	6839      	ldr	r1, [r7, #0]
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff f94b 	bl	8002618 <_SendPacket>
      RECORD_END();
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <SEGGER_SYSVIEW_Start+0x16c>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <SEGGER_SYSVIEW_Start+0x16c>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003396:	f000 f9eb 	bl	8003770 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800339a:	f000 f9b1 	bl	8003700 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800339e:	f000 fc73 	bl	8003c88 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80033a2:	bf00      	nop
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2407f2fc 	.word	0x2407f2fc
 80033b0:	08008b24 	.word	0x08008b24
 80033b4:	2407f32c 	.word	0x2407f32c

080033b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80033be:	f3ef 8311 	mrs	r3, BASEPRI
 80033c2:	f04f 0120 	mov.w	r1, #32
 80033c6:	f381 8811 	msr	BASEPRI, r1
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	480b      	ldr	r0, [pc, #44]	; (80033fc <SEGGER_SYSVIEW_Stop+0x44>)
 80033ce:	f7ff f833 	bl	8002438 <_PreparePacket>
 80033d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <SEGGER_SYSVIEW_Stop+0x48>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80033dc:	220b      	movs	r2, #11
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	6838      	ldr	r0, [r7, #0]
 80033e2:	f7ff f919 	bl	8002618 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <SEGGER_SYSVIEW_Stop+0x48>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f383 8811 	msr	BASEPRI, r3
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2407f32c 	.word	0x2407f32c
 8003400:	2407f2fc 	.word	0x2407f2fc

08003404 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	; 0x30
 8003408:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800340a:	f3ef 8311 	mrs	r3, BASEPRI
 800340e:	f04f 0120 	mov.w	r1, #32
 8003412:	f381 8811 	msr	BASEPRI, r1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	4845      	ldr	r0, [pc, #276]	; (8003530 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800341a:	f7ff f80d 	bl	8002438 <_PreparePacket>
 800341e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003428:	4b42      	ldr	r3, [pc, #264]	; (8003534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
 800342e:	e00b      	b.n	8003448 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	b2da      	uxtb	r2, r3
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	1c59      	adds	r1, r3, #1
 8003438:	62f9      	str	r1, [r7, #44]	; 0x2c
 800343a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	09db      	lsrs	r3, r3, #7
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	2b7f      	cmp	r3, #127	; 0x7f
 800344c:	d8f0      	bhi.n	8003430 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	623b      	str	r3, [r7, #32]
 8003468:	e00b      	b.n	8003482 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	6279      	str	r1, [r7, #36]	; 0x24
 8003474:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	09db      	lsrs	r3, r3, #7
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2b7f      	cmp	r3, #127	; 0x7f
 8003486:	d8f0      	bhi.n	800346a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	627a      	str	r2, [r7, #36]	; 0x24
 800348e:	6a3a      	ldr	r2, [r7, #32]
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	e00b      	b.n	80034bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	61f9      	str	r1, [r7, #28]
 80034ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	09db      	lsrs	r3, r3, #7
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b7f      	cmp	r3, #127	; 0x7f
 80034c0:	d8f0      	bhi.n	80034a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	61fa      	str	r2, [r7, #28]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	e00b      	b.n	80034f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1c59      	adds	r1, r3, #1
 80034e4:	6179      	str	r1, [r7, #20]
 80034e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	09db      	lsrs	r3, r3, #7
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b7f      	cmp	r3, #127	; 0x7f
 80034f8:	d8f0      	bhi.n	80034dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	617a      	str	r2, [r7, #20]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800350a:	2218      	movs	r2, #24
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	68b8      	ldr	r0, [r7, #8]
 8003510:	f7ff f882 	bl	8002618 <_SendPacket>
  RECORD_END();
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	4798      	blx	r3
  }
}
 8003528:	bf00      	nop
 800352a:	3730      	adds	r7, #48	; 0x30
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	2407f32c 	.word	0x2407f32c
 8003534:	2407f2fc 	.word	0x2407f2fc

08003538 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b092      	sub	sp, #72	; 0x48
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003540:	f3ef 8311 	mrs	r3, BASEPRI
 8003544:	f04f 0120 	mov.w	r1, #32
 8003548:	f381 8811 	msr	BASEPRI, r1
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	486a      	ldr	r0, [pc, #424]	; (80036f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003550:	f7fe ff72 	bl	8002438 <_PreparePacket>
 8003554:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	647b      	str	r3, [r7, #68]	; 0x44
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b66      	ldr	r3, [pc, #408]	; (80036fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	643b      	str	r3, [r7, #64]	; 0x40
 800356a:	e00b      	b.n	8003584 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800356c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356e:	b2da      	uxtb	r2, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	6479      	str	r1, [r7, #68]	; 0x44
 8003576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003580:	09db      	lsrs	r3, r3, #7
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	2b7f      	cmp	r3, #127	; 0x7f
 8003588:	d8f0      	bhi.n	800356c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800358a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	647a      	str	r2, [r7, #68]	; 0x44
 8003590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003598:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a4:	e00b      	b.n	80035be <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ac:	1c59      	adds	r1, r3, #1
 80035ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 80035b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	09db      	lsrs	r3, r3, #7
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	2b7f      	cmp	r3, #127	; 0x7f
 80035c2:	d8f0      	bhi.n	80035a6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	4619      	mov	r1, r3
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7fe fedb 	bl	8002398 <_EncodeStr>
 80035e2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80035e4:	2209      	movs	r2, #9
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	6938      	ldr	r0, [r7, #16]
 80035ea:	f7ff f815 	bl	8002618 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	637b      	str	r3, [r7, #52]	; 0x34
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b40      	ldr	r3, [pc, #256]	; (80036fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
 8003602:	e00b      	b.n	800361c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	b2da      	uxtb	r2, r3
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	1c59      	adds	r1, r3, #1
 800360c:	6379      	str	r1, [r7, #52]	; 0x34
 800360e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	09db      	lsrs	r3, r3, #7
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	2b7f      	cmp	r3, #127	; 0x7f
 8003620:	d8f0      	bhi.n	8003604 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	637a      	str	r2, [r7, #52]	; 0x34
 8003628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
 800363c:	e00b      	b.n	8003656 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	b2da      	uxtb	r2, r3
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	1c59      	adds	r1, r3, #1
 8003646:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	09db      	lsrs	r3, r3, #7
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	2b7f      	cmp	r3, #127	; 0x7f
 800365a:	d8f0      	bhi.n	800363e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	623b      	str	r3, [r7, #32]
 8003676:	e00b      	b.n	8003690 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1c59      	adds	r1, r3, #1
 8003680:	6279      	str	r1, [r7, #36]	; 0x24
 8003682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	09db      	lsrs	r3, r3, #7
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2b7f      	cmp	r3, #127	; 0x7f
 8003694:	d8f0      	bhi.n	8003678 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	627a      	str	r2, [r7, #36]	; 0x24
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e00b      	b.n	80036c8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	1c59      	adds	r1, r3, #1
 80036b8:	61f9      	str	r1, [r7, #28]
 80036ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	09db      	lsrs	r3, r3, #7
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b7f      	cmp	r3, #127	; 0x7f
 80036cc:	d8f0      	bhi.n	80036b0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	61fa      	str	r2, [r7, #28]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80036de:	2215      	movs	r2, #21
 80036e0:	68f9      	ldr	r1, [r7, #12]
 80036e2:	6938      	ldr	r0, [r7, #16]
 80036e4:	f7fe ff98 	bl	8002618 <_SendPacket>
  RECORD_END();
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f383 8811 	msr	BASEPRI, r3
}
 80036ee:	bf00      	nop
 80036f0:	3748      	adds	r7, #72	; 0x48
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	2407f32c 	.word	0x2407f32c
 80036fc:	2407f2fc 	.word	0x2407f2fc

08003700 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003716:	4b03      	ldr	r3, [pc, #12]	; (8003724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4798      	blx	r3
  }
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2407f2fc 	.word	0x2407f2fc

08003728 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003730:	f3ef 8311 	mrs	r3, BASEPRI
 8003734:	f04f 0120 	mov.w	r1, #32
 8003738:	f381 8811 	msr	BASEPRI, r1
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	480b      	ldr	r0, [pc, #44]	; (800376c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003740:	f7fe fe7a 	bl	8002438 <_PreparePacket>
 8003744:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	6938      	ldr	r0, [r7, #16]
 800374c:	f7fe fe24 	bl	8002398 <_EncodeStr>
 8003750:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003752:	220e      	movs	r2, #14
 8003754:	68f9      	ldr	r1, [r7, #12]
 8003756:	6938      	ldr	r0, [r7, #16]
 8003758:	f7fe ff5e 	bl	8002618 <_SendPacket>
  RECORD_END();
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f383 8811 	msr	BASEPRI, r3
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	2407f32c 	.word	0x2407f32c

08003770 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01a      	beq.n	80037b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800377e:	4b13      	ldr	r3, [pc, #76]	; (80037cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4798      	blx	r3
 8003790:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003794:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	000a      	movs	r2, r1
 80037a4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80037a6:	4613      	mov	r3, r2
 80037a8:	461a      	mov	r2, r3
 80037aa:	4621      	mov	r1, r4
 80037ac:	200d      	movs	r0, #13
 80037ae:	f7ff fced 	bl	800318c <SEGGER_SYSVIEW_RecordU32x2>
 80037b2:	e006      	b.n	80037c2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	200c      	movs	r0, #12
 80037bc:	f7ff fcaa 	bl	8003114 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2407f2fc 	.word	0x2407f2fc
 80037d0:	e0001004 	.word	0xe0001004

080037d4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80037da:	f3ef 8311 	mrs	r3, BASEPRI
 80037de:	f04f 0120 	mov.w	r1, #32
 80037e2:	f381 8811 	msr	BASEPRI, r1
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	4819      	ldr	r0, [pc, #100]	; (8003850 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80037ea:	f7fe fe25 	bl	8002438 <_PreparePacket>
 80037ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	e00b      	b.n	8003820 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	6179      	str	r1, [r7, #20]
 8003812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	09db      	lsrs	r3, r3, #7
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b7f      	cmp	r3, #127	; 0x7f
 8003824:	d8f0      	bhi.n	8003808 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	617a      	str	r2, [r7, #20]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003836:	2202      	movs	r2, #2
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68b8      	ldr	r0, [r7, #8]
 800383c:	f7fe feec 	bl	8002618 <_SendPacket>
  RECORD_END();
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f383 8811 	msr	BASEPRI, r3
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2407f32c 	.word	0x2407f32c
 8003854:	e000ed04 	.word	0xe000ed04

08003858 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800385e:	f3ef 8311 	mrs	r3, BASEPRI
 8003862:	f04f 0120 	mov.w	r1, #32
 8003866:	f381 8811 	msr	BASEPRI, r1
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	4807      	ldr	r0, [pc, #28]	; (800388c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800386e:	f7fe fde3 	bl	8002438 <_PreparePacket>
 8003872:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003874:	2203      	movs	r2, #3
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	6838      	ldr	r0, [r7, #0]
 800387a:	f7fe fecd 	bl	8002618 <_SendPacket>
  RECORD_END();
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f383 8811 	msr	BASEPRI, r3
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	2407f32c 	.word	0x2407f32c

08003890 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003896:	f3ef 8311 	mrs	r3, BASEPRI
 800389a:	f04f 0120 	mov.w	r1, #32
 800389e:	f381 8811 	msr	BASEPRI, r1
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	4807      	ldr	r0, [pc, #28]	; (80038c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80038a6:	f7fe fdc7 	bl	8002438 <_PreparePacket>
 80038aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80038ac:	2212      	movs	r2, #18
 80038ae:	6839      	ldr	r1, [r7, #0]
 80038b0:	6838      	ldr	r0, [r7, #0]
 80038b2:	f7fe feb1 	bl	8002618 <_SendPacket>
  RECORD_END();
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f383 8811 	msr	BASEPRI, r3
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	2407f32c 	.word	0x2407f32c

080038c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80038ce:	f3ef 8311 	mrs	r3, BASEPRI
 80038d2:	f04f 0120 	mov.w	r1, #32
 80038d6:	f381 8811 	msr	BASEPRI, r1
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	4807      	ldr	r0, [pc, #28]	; (80038fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80038de:	f7fe fdab 	bl	8002438 <_PreparePacket>
 80038e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80038e4:	2211      	movs	r2, #17
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	6838      	ldr	r0, [r7, #0]
 80038ea:	f7fe fe95 	bl	8002618 <_SendPacket>
  RECORD_END();
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f383 8811 	msr	BASEPRI, r3
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	2407f32c 	.word	0x2407f32c

08003900 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003908:	f3ef 8311 	mrs	r3, BASEPRI
 800390c:	f04f 0120 	mov.w	r1, #32
 8003910:	f381 8811 	msr	BASEPRI, r1
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	4819      	ldr	r0, [pc, #100]	; (800397c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003918:	f7fe fd8e 	bl	8002438 <_PreparePacket>
 800391c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e00b      	b.n	800394e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	1c59      	adds	r1, r3, #1
 800393e:	61f9      	str	r1, [r7, #28]
 8003940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	09db      	lsrs	r3, r3, #7
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b7f      	cmp	r3, #127	; 0x7f
 8003952:	d8f0      	bhi.n	8003936 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	61fa      	str	r2, [r7, #28]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003964:	2208      	movs	r2, #8
 8003966:	68f9      	ldr	r1, [r7, #12]
 8003968:	6938      	ldr	r0, [r7, #16]
 800396a:	f7fe fe55 	bl	8002618 <_SendPacket>
  RECORD_END();
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f383 8811 	msr	BASEPRI, r3
}
 8003974:	bf00      	nop
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	2407f32c 	.word	0x2407f32c
 8003980:	2407f2fc 	.word	0x2407f2fc

08003984 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800398c:	f3ef 8311 	mrs	r3, BASEPRI
 8003990:	f04f 0120 	mov.w	r1, #32
 8003994:	f381 8811 	msr	BASEPRI, r1
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	4819      	ldr	r0, [pc, #100]	; (8003a00 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800399c:	f7fe fd4c 	bl	8002438 <_PreparePacket>
 80039a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80039a6:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e00b      	b.n	80039d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	1c59      	adds	r1, r3, #1
 80039c2:	61f9      	str	r1, [r7, #28]
 80039c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	09db      	lsrs	r3, r3, #7
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b7f      	cmp	r3, #127	; 0x7f
 80039d6:	d8f0      	bhi.n	80039ba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	61fa      	str	r2, [r7, #28]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80039e8:	2204      	movs	r2, #4
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	6938      	ldr	r0, [r7, #16]
 80039ee:	f7fe fe13 	bl	8002618 <_SendPacket>
  RECORD_END();
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f383 8811 	msr	BASEPRI, r3
}
 80039f8:	bf00      	nop
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	2407f32c 	.word	0x2407f32c
 8003a04:	2407f2fc 	.word	0x2407f2fc

08003a08 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a10:	f3ef 8311 	mrs	r3, BASEPRI
 8003a14:	f04f 0120 	mov.w	r1, #32
 8003a18:	f381 8811 	msr	BASEPRI, r1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	4819      	ldr	r0, [pc, #100]	; (8003a84 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003a20:	f7fe fd0a 	bl	8002438 <_PreparePacket>
 8003a24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e00b      	b.n	8003a56 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	1c59      	adds	r1, r3, #1
 8003a46:	61f9      	str	r1, [r7, #28]
 8003a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	09db      	lsrs	r3, r3, #7
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b7f      	cmp	r3, #127	; 0x7f
 8003a5a:	d8f0      	bhi.n	8003a3e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	61fa      	str	r2, [r7, #28]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003a6c:	2206      	movs	r2, #6
 8003a6e:	68f9      	ldr	r1, [r7, #12]
 8003a70:	6938      	ldr	r0, [r7, #16]
 8003a72:	f7fe fdd1 	bl	8002618 <_SendPacket>
  RECORD_END();
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f383 8811 	msr	BASEPRI, r3
}
 8003a7c:	bf00      	nop
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	2407f32c 	.word	0x2407f32c
 8003a88:	2407f2fc 	.word	0x2407f2fc

08003a8c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a96:	f3ef 8311 	mrs	r3, BASEPRI
 8003a9a:	f04f 0120 	mov.w	r1, #32
 8003a9e:	f381 8811 	msr	BASEPRI, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	4827      	ldr	r0, [pc, #156]	; (8003b44 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003aa6:	f7fe fcc7 	bl	8002438 <_PreparePacket>
 8003aaa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	623b      	str	r3, [r7, #32]
 8003ac2:	e00b      	b.n	8003adc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	1c59      	adds	r1, r3, #1
 8003acc:	6279      	str	r1, [r7, #36]	; 0x24
 8003ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	09db      	lsrs	r3, r3, #7
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2b7f      	cmp	r3, #127	; 0x7f
 8003ae0:	d8f0      	bhi.n	8003ac4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e00b      	b.n	8003b14 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	1c59      	adds	r1, r3, #1
 8003b04:	61f9      	str	r1, [r7, #28]
 8003b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	09db      	lsrs	r3, r3, #7
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b7f      	cmp	r3, #127	; 0x7f
 8003b18:	d8f0      	bhi.n	8003afc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	61fa      	str	r2, [r7, #28]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003b2a:	2207      	movs	r2, #7
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	6938      	ldr	r0, [r7, #16]
 8003b30:	f7fe fd72 	bl	8002618 <_SendPacket>
  RECORD_END();
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f383 8811 	msr	BASEPRI, r3
}
 8003b3a:	bf00      	nop
 8003b3c:	3728      	adds	r7, #40	; 0x28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	2407f32c 	.word	0x2407f32c
 8003b48:	2407f2fc 	.word	0x2407f2fc

08003b4c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08c      	sub	sp, #48	; 0x30
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003b56:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06d      	beq.n	8003c3a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003b5e:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003b64:	2300      	movs	r3, #0
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b68:	e008      	b.n	8003b7c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	3301      	adds	r3, #1
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3f2      	bcc.n	8003b6a <SEGGER_SYSVIEW_SendModule+0x1e>
 8003b84:	e000      	b.n	8003b88 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003b86:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d055      	beq.n	8003c3a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b92:	f04f 0120 	mov.w	r1, #32
 8003b96:	f381 8811 	msr	BASEPRI, r1
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	482a      	ldr	r0, [pc, #168]	; (8003c48 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003b9e:	f7fe fc4b 	bl	8002438 <_PreparePacket>
 8003ba2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	e00b      	b.n	8003bca <SEGGER_SYSVIEW_SendModule+0x7e>
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	6279      	str	r1, [r7, #36]	; 0x24
 8003bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	09db      	lsrs	r3, r3, #7
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8003bce:	d8f0      	bhi.n	8003bb2 <SEGGER_SYSVIEW_SendModule+0x66>
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	627a      	str	r2, [r7, #36]	; 0x24
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e00b      	b.n	8003c04 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	1c59      	adds	r1, r3, #1
 8003bf4:	61f9      	str	r1, [r7, #28]
 8003bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	09db      	lsrs	r3, r3, #7
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b7f      	cmp	r3, #127	; 0x7f
 8003c08:	d8f0      	bhi.n	8003bec <SEGGER_SYSVIEW_SendModule+0xa0>
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	61fa      	str	r2, [r7, #28]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	4619      	mov	r1, r3
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7fe fbb8 	bl	8002398 <_EncodeStr>
 8003c28:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003c2a:	2216      	movs	r2, #22
 8003c2c:	68f9      	ldr	r1, [r7, #12]
 8003c2e:	6938      	ldr	r0, [r7, #16]
 8003c30:	f7fe fcf2 	bl	8002618 <_SendPacket>
      RECORD_END();
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	3730      	adds	r7, #48	; 0x30
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2407f324 	.word	0x2407f324
 8003c48:	2407f32c 	.word	0x2407f32c

08003c4c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00f      	beq.n	8003c7a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f2      	bne.n	8003c60 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	2407f324 	.word	0x2407f324

08003c88 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c92:	f04f 0120 	mov.w	r1, #32
 8003c96:	f381 8811 	msr	BASEPRI, r1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	4817      	ldr	r0, [pc, #92]	; (8003cfc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003c9e:	f7fe fbcb 	bl	8002438 <_PreparePacket>
 8003ca2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e00b      	b.n	8003ccc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	6179      	str	r1, [r7, #20]
 8003cbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	09db      	lsrs	r3, r3, #7
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b7f      	cmp	r3, #127	; 0x7f
 8003cd0:	d8f0      	bhi.n	8003cb4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	617a      	str	r2, [r7, #20]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003ce2:	221b      	movs	r2, #27
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	68b8      	ldr	r0, [r7, #8]
 8003ce8:	f7fe fc96 	bl	8002618 <_SendPacket>
  RECORD_END();
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f383 8811 	msr	BASEPRI, r3
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2407f32c 	.word	0x2407f32c
 8003d00:	2407f328 	.word	0x2407f328

08003d04 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8003d04:	b40f      	push	{r0, r1, r2, r3}
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	461a      	mov	r2, r3
 8003d16:	2100      	movs	r1, #0
 8003d18:	6938      	ldr	r0, [r7, #16]
 8003d1a:	f7fe ff8f 	bl	8002c3c <_VPrintTarget>
  va_end(ParamList);
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d28:	b004      	add	sp, #16
 8003d2a:	4770      	bx	lr

08003d2c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003d34:	f3ef 8311 	mrs	r3, BASEPRI
 8003d38:	f04f 0120 	mov.w	r1, #32
 8003d3c:	f381 8811 	msr	BASEPRI, r1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	4827      	ldr	r0, [pc, #156]	; (8003de0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003d44:	f7fe fb78 	bl	8002438 <_PreparePacket>
 8003d48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003d4a:	2280      	movs	r2, #128	; 0x80
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	6938      	ldr	r0, [r7, #16]
 8003d50:	f7fe fb22 	bl	8002398 <_EncodeStr>
 8003d54:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	623b      	str	r3, [r7, #32]
 8003d5e:	e00b      	b.n	8003d78 <SEGGER_SYSVIEW_Warn+0x4c>
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1c59      	adds	r1, r3, #1
 8003d68:	6279      	str	r1, [r7, #36]	; 0x24
 8003d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	09db      	lsrs	r3, r3, #7
 8003d76:	623b      	str	r3, [r7, #32]
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d7c:	d8f0      	bhi.n	8003d60 <SEGGER_SYSVIEW_Warn+0x34>
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	627a      	str	r2, [r7, #36]	; 0x24
 8003d84:	6a3a      	ldr	r2, [r7, #32]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	e00b      	b.n	8003db0 <SEGGER_SYSVIEW_Warn+0x84>
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	61f9      	str	r1, [r7, #28]
 8003da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b7f      	cmp	r3, #127	; 0x7f
 8003db4:	d8f0      	bhi.n	8003d98 <SEGGER_SYSVIEW_Warn+0x6c>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	61fa      	str	r2, [r7, #28]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003dc6:	221a      	movs	r2, #26
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	6938      	ldr	r0, [r7, #16]
 8003dcc:	f7fe fc24 	bl	8002618 <_SendPacket>
  RECORD_END();
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f383 8811 	msr	BASEPRI, r3
}
 8003dd6:	bf00      	nop
 8003dd8:	3728      	adds	r7, #40	; 0x28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2407f32c 	.word	0x2407f32c

08003de4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003dea:	7e1b      	ldrb	r3, [r3, #24]
 8003dec:	4619      	mov	r1, r3
 8003dee:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003df0:	460b      	mov	r3, r1
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	440b      	add	r3, r1
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	336c      	adds	r3, #108	; 0x6c
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003e00:	7e1b      	ldrb	r3, [r3, #24]
 8003e02:	4618      	mov	r0, r3
 8003e04:	490d      	ldr	r1, [pc, #52]	; (8003e3c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003e06:	4603      	mov	r3, r0
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4403      	add	r3, r0
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	440b      	add	r3, r1
 8003e10:	3370      	adds	r3, #112	; 0x70
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d00b      	beq.n	8003e30 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003e1a:	789b      	ldrb	r3, [r3, #2]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003e26:	f7fe fb13 	bl	8002450 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003e2a:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	2407f2fc 	.word	0x2407f2fc
 8003e3c:	2400723c 	.word	0x2400723c

08003e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e46:	f000 fd0d 	bl	8004864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e4a:	f000 f87d 	bl	8003f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e4e:	f000 f9af 	bl	80041b0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8003e52:	f000 f927 	bl	80040a4 <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 8003e56:	f000 f989 	bl	800416c <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
//	user_data = "Start of program\r\n";
//	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

	// Enable CCYCCNT Counter
	DWT->CTRL |= (1 << 0);
 8003e5a:	4b30      	ldr	r3, [pc, #192]	; (8003f1c <main+0xdc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <main+0xdc>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6013      	str	r3, [r2, #0]

	// Used for SEGGER UART
	SEGGER_UART_init(500000);
 8003e66:	482e      	ldr	r0, [pc, #184]	; (8003f20 <main+0xe0>)
 8003e68:	f7fd fe3a 	bl	8001ae0 <SEGGER_UART_init>

	//Starting SEGGER SYSVIEW
	  SEGGER_SYSVIEW_Conf();
 8003e6c:	f7fd fc62 	bl	8001734 <SEGGER_SYSVIEW_Conf>
	  //SEGGER_SYSVIEW_Start();

	  TaskStatus = xTaskCreate(Task_GreenLED_Handler, "GreenLED", 100, "Green LED TASK", 1, &Task_GreenLED_Handle);
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	2301      	movs	r3, #1
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	4b2a      	ldr	r3, [pc, #168]	; (8003f24 <main+0xe4>)
 8003e7c:	2264      	movs	r2, #100	; 0x64
 8003e7e:	492a      	ldr	r1, [pc, #168]	; (8003f28 <main+0xe8>)
 8003e80:	482a      	ldr	r0, [pc, #168]	; (8003f2c <main+0xec>)
 8003e82:	f7fc fb2b 	bl	80004dc <xTaskCreate>
 8003e86:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d00c      	beq.n	8003ea8 <main+0x68>
        __asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	b672      	cpsid	i
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	b662      	cpsie	i
 8003ea2:	61bb      	str	r3, [r7, #24]
    }
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <main+0x66>

	  TaskStatus = xTaskCreate(Task_RedLED_Handler, "RedLED", 100, "Red LED TASK", 1, &Task_RedLED_Handle);
 8003ea8:	f107 0308 	add.w	r3, r7, #8
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <main+0xf0>)
 8003eb4:	2264      	movs	r2, #100	; 0x64
 8003eb6:	491f      	ldr	r1, [pc, #124]	; (8003f34 <main+0xf4>)
 8003eb8:	481f      	ldr	r0, [pc, #124]	; (8003f38 <main+0xf8>)
 8003eba:	f7fc fb0f 	bl	80004dc <xTaskCreate>
 8003ebe:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d00c      	beq.n	8003ee0 <main+0xa0>
        __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	b672      	cpsid	i
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	b662      	cpsie	i
 8003eda:	617b      	str	r3, [r7, #20]
    }
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <main+0x9e>

	  TaskStatus = xTaskCreate(Task_BlueLED_Handler, "BlueLED", 100, "Blue LED TASK", 1, &Task_BlueLED_Handle);
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <main+0xfc>)
 8003eea:	2264      	movs	r2, #100	; 0x64
 8003eec:	4914      	ldr	r1, [pc, #80]	; (8003f40 <main+0x100>)
 8003eee:	4815      	ldr	r0, [pc, #84]	; (8003f44 <main+0x104>)
 8003ef0:	f7fc faf4 	bl	80004dc <xTaskCreate>
 8003ef4:	61f8      	str	r0, [r7, #28]
	  configASSERT(TaskStatus == pdPASS);
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d00c      	beq.n	8003f16 <main+0xd6>
        __asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	b672      	cpsid	i
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	b662      	cpsie	i
 8003f10:	613b      	str	r3, [r7, #16]
    }
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <main+0xd4>

	  // Start FreeRTOS scheduler
	  vTaskStartScheduler();
 8003f16:	f7fc fc73 	bl	8000800 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f1a:	e7fe      	b.n	8003f1a <main+0xda>
 8003f1c:	e0001000 	.word	0xe0001000
 8003f20:	0007a120 	.word	0x0007a120
 8003f24:	08008a30 	.word	0x08008a30
 8003f28:	08008a40 	.word	0x08008a40
 8003f2c:	080042a1 	.word	0x080042a1
 8003f30:	08008a4c 	.word	0x08008a4c
 8003f34:	08008a5c 	.word	0x08008a5c
 8003f38:	080042ed 	.word	0x080042ed
 8003f3c:	08008a64 	.word	0x08008a64
 8003f40:	08008a74 	.word	0x08008a74
 8003f44:	08004339 	.word	0x08004339

08003f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b09e      	sub	sp, #120	; 0x78
 8003f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f52:	224c      	movs	r2, #76	; 0x4c
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 fcf4 	bl	8008944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	2220      	movs	r2, #32
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f004 fced 	bl	8008944 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003f6a:	2002      	movs	r0, #2
 8003f6c:	f001 fec8 	bl	8005d00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	4b48      	ldr	r3, [pc, #288]	; (8004098 <SystemClock_Config+0x150>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	4a47      	ldr	r2, [pc, #284]	; (8004098 <SystemClock_Config+0x150>)
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f80:	4b45      	ldr	r3, [pc, #276]	; (8004098 <SystemClock_Config+0x150>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	4b44      	ldr	r3, [pc, #272]	; (800409c <SystemClock_Config+0x154>)
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	4a43      	ldr	r2, [pc, #268]	; (800409c <SystemClock_Config+0x154>)
 8003f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f94:	6193      	str	r3, [r2, #24]
 8003f96:	4b41      	ldr	r3, [pc, #260]	; (800409c <SystemClock_Config+0x154>)
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003fa2:	bf00      	nop
 8003fa4:	4b3d      	ldr	r3, [pc, #244]	; (800409c <SystemClock_Config+0x154>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb0:	d1f8      	bne.n	8003fa4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <SystemClock_Config+0x158>)
 8003fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fb8:	4a39      	ldr	r2, [pc, #228]	; (80040a0 <SystemClock_Config+0x158>)
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fc2:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <SystemClock_Config+0x158>)
 8003fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4b31      	ldr	r3, [pc, #196]	; (800409c <SystemClock_Config+0x154>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	4a30      	ldr	r2, [pc, #192]	; (800409c <SystemClock_Config+0x154>)
 8003fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fde:	6193      	str	r3, [r2, #24]
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	; (800409c <SystemClock_Config+0x154>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <SystemClock_Config+0x150>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <SystemClock_Config+0x150>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <SystemClock_Config+0x150>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004002:	bf00      	nop
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <SystemClock_Config+0x154>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004010:	d1f8      	bne.n	8004004 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004012:	2301      	movs	r3, #1
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800401a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800401c:	2302      	movs	r3, #2
 800401e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004020:	2302      	movs	r3, #2
 8004022:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004024:	2301      	movs	r3, #1
 8004026:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004028:	2378      	movs	r3, #120	; 0x78
 800402a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800402c:	2302      	movs	r3, #2
 800402e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8004030:	230f      	movs	r3, #15
 8004032:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004034:	2302      	movs	r3, #2
 8004036:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004038:	230c      	movs	r3, #12
 800403a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800403c:	2300      	movs	r3, #0
 800403e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fea3 	bl	8005d94 <HAL_RCC_OscConfig>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8004054:	f000 f9a8 	bl	80043a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004058:	233f      	movs	r3, #63	; 0x3f
 800405a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800405c:	2303      	movs	r3, #3
 800405e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004064:	2308      	movs	r3, #8
 8004066:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004068:	2340      	movs	r3, #64	; 0x40
 800406a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800407a:	f107 030c 	add.w	r3, r7, #12
 800407e:	2104      	movs	r1, #4
 8004080:	4618      	mov	r0, r3
 8004082:	f002 fab5 	bl	80065f0 <HAL_RCC_ClockConfig>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800408c:	f000 f98c 	bl	80043a8 <Error_Handler>
  }
}
 8004090:	bf00      	nop
 8004092:	3778      	adds	r7, #120	; 0x78
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	58000400 	.word	0x58000400
 800409c:	58024800 	.word	0x58024800
 80040a0:	58024400 	.word	0x58024400

080040a4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040aa:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <MX_FDCAN2_Init+0xc4>)
 80040ac:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80040ae:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80040b4:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80040ba:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040bc:	2200      	movs	r2, #0
 80040be:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80040c0:	4b28      	ldr	r3, [pc, #160]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80040c6:	4b27      	ldr	r3, [pc, #156]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040ce:	2210      	movs	r2, #16
 80040d0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80040d8:	4b22      	ldr	r3, [pc, #136]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040da:	2202      	movs	r2, #2
 80040dc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040e0:	2202      	movs	r2, #2
 80040e2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80040e4:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80040ea:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80040f6:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 80040fe:	2200      	movs	r2, #0
 8004100:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8004102:	4b18      	ldr	r3, [pc, #96]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004104:	2200      	movs	r2, #0
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 800410a:	2200      	movs	r2, #0
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004110:	2200      	movs	r2, #0
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004116:	2204      	movs	r2, #4
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 800411c:	2200      	movs	r2, #0
 800411e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004122:	2204      	movs	r2, #4
 8004124:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004128:	2200      	movs	r2, #0
 800412a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 800412e:	2204      	movs	r2, #4
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004134:	2200      	movs	r2, #0
 8004136:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 800413a:	2200      	movs	r2, #0
 800413c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004140:	2200      	movs	r2, #0
 8004142:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004146:	2200      	movs	r2, #0
 8004148:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 800414c:	2204      	movs	r2, #4
 800414e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8004150:	4804      	ldr	r0, [pc, #16]	; (8004164 <MX_FDCAN2_Init+0xc0>)
 8004152:	f000 fcf3 	bl	8004b3c <HAL_FDCAN_Init>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800415c:	f000 f924 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2407f410 	.word	0x2407f410
 8004168:	4000a400 	.word	0x4000a400

0800416c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004172:	4a0e      	ldr	r2, [pc, #56]	; (80041ac <MX_USB_OTG_FS_HCD_Init+0x40>)
 8004174:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004178:	2210      	movs	r2, #16
 800417a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800417e:	2201      	movs	r2, #1
 8004180:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800418a:	2202      	movs	r2, #2
 800418c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004190:	2200      	movs	r2, #0
 8004192:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004194:	4804      	ldr	r0, [pc, #16]	; (80041a8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8004196:	f001 fd51 	bl	8005c3c <HAL_HCD_Init>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 80041a0:	f000 f902 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80041a4:	bf00      	nop
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2407f4b0 	.word	0x2407f4b0
 80041ac:	40080000 	.word	0x40080000

080041b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	609a      	str	r2, [r3, #8]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041c6:	4b34      	ldr	r3, [pc, #208]	; (8004298 <MX_GPIO_Init+0xe8>)
 80041c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041cc:	4a32      	ldr	r2, [pc, #200]	; (8004298 <MX_GPIO_Init+0xe8>)
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d6:	4b30      	ldr	r3, [pc, #192]	; (8004298 <MX_GPIO_Init+0xe8>)
 80041d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041e4:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <MX_GPIO_Init+0xe8>)
 80041e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ea:	4a2b      	ldr	r2, [pc, #172]	; (8004298 <MX_GPIO_Init+0xe8>)
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041f4:	4b28      	ldr	r3, [pc, #160]	; (8004298 <MX_GPIO_Init+0xe8>)
 80041f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004202:	4b25      	ldr	r3, [pc, #148]	; (8004298 <MX_GPIO_Init+0xe8>)
 8004204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004208:	4a23      	ldr	r2, [pc, #140]	; (8004298 <MX_GPIO_Init+0xe8>)
 800420a:	f043 0302 	orr.w	r3, r3, #2
 800420e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004212:	4b21      	ldr	r3, [pc, #132]	; (8004298 <MX_GPIO_Init+0xe8>)
 8004214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004220:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <MX_GPIO_Init+0xe8>)
 8004222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004226:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <MX_GPIO_Init+0xe8>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004230:	4b19      	ldr	r3, [pc, #100]	; (8004298 <MX_GPIO_Init+0xe8>)
 8004232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800423e:	2200      	movs	r2, #0
 8004240:	2107      	movs	r1, #7
 8004242:	4816      	ldr	r0, [pc, #88]	; (800429c <MX_GPIO_Init+0xec>)
 8004244:	f001 fca2 	bl	8005b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800424c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800424e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	4619      	mov	r1, r3
 800425e:	480f      	ldr	r0, [pc, #60]	; (800429c <MX_GPIO_Init+0xec>)
 8004260:	f001 fae4 	bl	800582c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004264:	2307      	movs	r3, #7
 8004266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004268:	2301      	movs	r3, #1
 800426a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	2300      	movs	r3, #0
 8004272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	4619      	mov	r1, r3
 800427a:	4808      	ldr	r0, [pc, #32]	; (800429c <MX_GPIO_Init+0xec>)
 800427c:	f001 fad6 	bl	800582c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2105      	movs	r1, #5
 8004284:	2028      	movs	r0, #40	; 0x28
 8004286:	f000 fc31 	bl	8004aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800428a:	2028      	movs	r0, #40	; 0x28
 800428c:	f000 fc48 	bl	8004b20 <HAL_NVIC_EnableIRQ>

}
 8004290:	bf00      	nop
 8004292:	3728      	adds	r7, #40	; 0x28
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	58024400 	.word	0x58024400
 800429c:	58020800 	.word	0x58020800

080042a0 <Task_GreenLED_Handler>:

/* USER CODE BEGIN 4 */
static void Task_GreenLED_Handler(void* parameters)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Green -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80042a8:	480d      	ldr	r0, [pc, #52]	; (80042e0 <Task_GreenLED_Handler+0x40>)
 80042aa:	f7ff fd2b 	bl	8003d04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80042ae:	2102      	movs	r1, #2
 80042b0:	480c      	ldr	r0, [pc, #48]	; (80042e4 <Task_GreenLED_Handler+0x44>)
 80042b2:	f001 fc84 	bl	8005bbe <HAL_GPIO_TogglePin>

		// 1000 system tickes -> needs to be converted to ms
		vTaskDelay(1000);
 80042b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042ba:	f7fc fa67 	bl	800078c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80042be:	2102      	movs	r1, #2
 80042c0:	4808      	ldr	r0, [pc, #32]	; (80042e4 <Task_GreenLED_Handler+0x44>)
 80042c2:	f001 fc7c 	bl	8005bbe <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80042c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042ca:	f7fc fa5f 	bl	800078c <vTaskDelay>
		taskYIELD();
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <Task_GreenLED_Handler+0x48>)
 80042d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 80042de:	e7e3      	b.n	80042a8 <Task_GreenLED_Handler+0x8>
 80042e0:	08008a7c 	.word	0x08008a7c
 80042e4:	58020800 	.word	0x58020800
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <Task_RedLED_Handler>:
	}
}


static void Task_RedLED_Handler(void* parameters)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Red -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80042f4:	480d      	ldr	r0, [pc, #52]	; (800432c <Task_RedLED_Handler+0x40>)
 80042f6:	f7ff fd05 	bl	8003d04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 80042fa:	2101      	movs	r1, #1
 80042fc:	480c      	ldr	r0, [pc, #48]	; (8004330 <Task_RedLED_Handler+0x44>)
 80042fe:	f001 fc5e 	bl	8005bbe <HAL_GPIO_TogglePin>

		// 800 system tickes -> needs to be converted to ms
		vTaskDelay(800);
 8004302:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004306:	f7fc fa41 	bl	800078c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 800430a:	2101      	movs	r1, #1
 800430c:	4808      	ldr	r0, [pc, #32]	; (8004330 <Task_RedLED_Handler+0x44>)
 800430e:	f001 fc56 	bl	8005bbe <HAL_GPIO_TogglePin>
		vTaskDelay(800);
 8004312:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004316:	f7fc fa39 	bl	800078c <vTaskDelay>
		taskYIELD();
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <Task_RedLED_Handler+0x48>)
 800431c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 800432a:	e7e3      	b.n	80042f4 <Task_RedLED_Handler+0x8>
 800432c:	08008a90 	.word	0x08008a90
 8004330:	58020800 	.word	0x58020800
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <Task_BlueLED_Handler>:
	}
}


static void Task_BlueLED_Handler(void* parameters)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	{
//		user_data = "Blue -\r\n";
//		HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);
//		printf("%s\n", (char*)parameters);

		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <Task_BlueLED_Handler+0x40>)
 8004342:	f7ff fcdf 	bl	8003d04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004346:	2104      	movs	r1, #4
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <Task_BlueLED_Handler+0x44>)
 800434a:	f001 fc38 	bl	8005bbe <HAL_GPIO_TogglePin>

		// 400 system tickes -> needs to be converted to ms
		vTaskDelay(400);
 800434e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004352:	f7fc fa1b 	bl	800078c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8004356:	2104      	movs	r1, #4
 8004358:	4808      	ldr	r0, [pc, #32]	; (800437c <Task_BlueLED_Handler+0x44>)
 800435a:	f001 fc30 	bl	8005bbe <HAL_GPIO_TogglePin>
		vTaskDelay(400);
 800435e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004362:	f7fc fa13 	bl	800078c <vTaskDelay>
		taskYIELD();
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <Task_BlueLED_Handler+0x48>)
 8004368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8004376:	e7e3      	b.n	8004340 <Task_BlueLED_Handler+0x8>
 8004378:	08008aa4 	.word	0x08008aa4
 800437c:	58020800 	.word	0x58020800
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004396:	f000 faa1 	bl	80048dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40001000 	.word	0x40001000

080043a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043ac:	b672      	cpsid	i
}
 80043ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043b0:	e7fe      	b.n	80043b0 <Error_Handler+0x8>
	...

080043b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ba:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_MspInit+0x30>)
 80043bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043c0:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <HAL_MspInit+0x30>)
 80043c2:	f043 0302 	orr.w	r3, r3, #2
 80043c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_MspInit+0x30>)
 80043cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MspInit 1 */
  //vInitPrioGroupValue();

  /* USER CODE END MspInit 1 */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	58024400 	.word	0x58024400

080043e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b0b8      	sub	sp, #224	; 0xe0
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004400:	f107 0310 	add.w	r3, r7, #16
 8004404:	22bc      	movs	r2, #188	; 0xbc
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f004 fa9b 	bl	8008944 <memset>
  if(hfdcan->Instance==FDCAN2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <HAL_FDCAN_MspInit+0xe0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d153      	bne.n	80044c0 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800441e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004422:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004424:	f107 0310 	add.w	r3, r7, #16
 8004428:	4618      	mov	r0, r3
 800442a:	f002 fc99 	bl	8006d60 <HAL_RCCEx_PeriphCLKConfig>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004434:	f7ff ffb8 	bl	80043a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004438:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_FDCAN_MspInit+0xe4>)
 800443a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800443e:	4a23      	ldr	r2, [pc, #140]	; (80044cc <HAL_FDCAN_MspInit+0xe4>)
 8004440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004444:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004448:	4b20      	ldr	r3, [pc, #128]	; (80044cc <HAL_FDCAN_MspInit+0xe4>)
 800444a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <HAL_FDCAN_MspInit+0xe4>)
 8004458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <HAL_FDCAN_MspInit+0xe4>)
 800445e:	f043 0302 	orr.w	r3, r3, #2
 8004462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_FDCAN_MspInit+0xe4>)
 8004468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004474:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004478:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447c:	2302      	movs	r3, #2
 800447e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800448e:	2309      	movs	r3, #9
 8004490:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004494:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004498:	4619      	mov	r1, r3
 800449a:	480d      	ldr	r0, [pc, #52]	; (80044d0 <HAL_FDCAN_MspInit+0xe8>)
 800449c:	f001 f9c6 	bl	800582c <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80044a0:	2200      	movs	r2, #0
 80044a2:	2100      	movs	r1, #0
 80044a4:	2014      	movs	r0, #20
 80044a6:	f000 fb21 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80044aa:	2014      	movs	r0, #20
 80044ac:	f000 fb38 	bl	8004b20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 80044b0:	2200      	movs	r2, #0
 80044b2:	2100      	movs	r1, #0
 80044b4:	2016      	movs	r0, #22
 80044b6:	f000 fb19 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80044ba:	2016      	movs	r0, #22
 80044bc:	f000 fb30 	bl	8004b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80044c0:	bf00      	nop
 80044c2:	37e0      	adds	r7, #224	; 0xe0
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	4000a400 	.word	0x4000a400
 80044cc:	58024400 	.word	0x58024400
 80044d0:	58020400 	.word	0x58020400

080044d4 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b0b8      	sub	sp, #224	; 0xe0
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044ec:	f107 0310 	add.w	r3, r7, #16
 80044f0:	22bc      	movs	r2, #188	; 0xbc
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f004 fa25 	bl	8008944 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a27      	ldr	r2, [pc, #156]	; (800459c <HAL_HCD_MspInit+0xc8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d146      	bne.n	8004592 <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004508:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800450a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800450e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004512:	f107 0310 	add.w	r3, r7, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f002 fc22 	bl	8006d60 <HAL_RCCEx_PeriphCLKConfig>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8004522:	f7ff ff41 	bl	80043a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004526:	f001 fc25 	bl	8005d74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452a:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_HCD_MspInit+0xcc>)
 800452c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_HCD_MspInit+0xcc>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800453a:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_HCD_MspInit+0xcc>)
 800453c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004548:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800454c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004550:	2302      	movs	r3, #2
 8004552:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004562:	230a      	movs	r3, #10
 8004564:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004568:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800456c:	4619      	mov	r1, r3
 800456e:	480d      	ldr	r0, [pc, #52]	; (80045a4 <HAL_HCD_MspInit+0xd0>)
 8004570:	f001 f95c 	bl	800582c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <HAL_HCD_MspInit+0xcc>)
 8004576:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_HCD_MspInit+0xcc>)
 800457c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004580:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_HCD_MspInit+0xcc>)
 8004586:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800458a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004592:	bf00      	nop
 8004594:	37e0      	adds	r7, #224	; 0xe0
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40080000 	.word	0x40080000
 80045a0:	58024400 	.word	0x58024400
 80045a4:	58020000 	.word	0x58020000

080045a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b090      	sub	sp, #64	; 0x40
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	d827      	bhi.n	8004606 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80045b6:	2200      	movs	r2, #0
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	2036      	movs	r0, #54	; 0x36
 80045bc:	f000 fa96 	bl	8004aec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045c0:	2036      	movs	r0, #54	; 0x36
 80045c2:	f000 faad 	bl	8004b20 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80045c6:	4a29      	ldr	r2, [pc, #164]	; (800466c <HAL_InitTick+0xc4>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <HAL_InitTick+0xc8>)
 80045ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045d2:	4a27      	ldr	r2, [pc, #156]	; (8004670 <HAL_InitTick+0xc8>)
 80045d4:	f043 0310 	orr.w	r3, r3, #16
 80045d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045dc:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_InitTick+0xc8>)
 80045de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045ea:	f107 0210 	add.w	r2, r7, #16
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f002 fb71 	bl	8006cdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_InitTick+0x6a>
 8004604:	e001      	b.n	800460a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e02b      	b.n	8004662 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800460a:	f002 fb51 	bl	8006cb0 <HAL_RCC_GetPCLK1Freq>
 800460e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004610:	e004      	b.n	800461c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004612:	f002 fb4d 	bl	8006cb0 <HAL_RCC_GetPCLK1Freq>
 8004616:	4603      	mov	r3, r0
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <HAL_InitTick+0xcc>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	0c9b      	lsrs	r3, r3, #18
 8004626:	3b01      	subs	r3, #1
 8004628:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_InitTick+0xd0>)
 800462c:	4a13      	ldr	r2, [pc, #76]	; (800467c <HAL_InitTick+0xd4>)
 800462e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_InitTick+0xd0>)
 8004632:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004636:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004638:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <HAL_InitTick+0xd0>)
 800463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800463e:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_InitTick+0xd0>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_InitTick+0xd0>)
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800464a:	480b      	ldr	r0, [pc, #44]	; (8004678 <HAL_InitTick+0xd0>)
 800464c:	f003 fc32 	bl	8007eb4 <HAL_TIM_Base_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004656:	4808      	ldr	r0, [pc, #32]	; (8004678 <HAL_InitTick+0xd0>)
 8004658:	f003 fc8e 	bl	8007f78 <HAL_TIM_Base_Start_IT>
 800465c:	4603      	mov	r3, r0
 800465e:	e000      	b.n	8004662 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
}
 8004662:	4618      	mov	r0, r3
 8004664:	3740      	adds	r7, #64	; 0x40
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	24000018 	.word	0x24000018
 8004670:	58024400 	.word	0x58024400
 8004674:	431bde83 	.word	0x431bde83
 8004678:	2407f7b4 	.word	0x2407f7b4
 800467c:	40001000 	.word	0x40001000

08004680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004684:	e7fe      	b.n	8004684 <NMI_Handler+0x4>

08004686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004686:	b480      	push	{r7}
 8004688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800468a:	e7fe      	b.n	800468a <HardFault_Handler+0x4>

0800468c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004690:	e7fe      	b.n	8004690 <MemManage_Handler+0x4>

08004692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004692:	b480      	push	{r7}
 8004694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004696:	e7fe      	b.n	8004696 <BusFault_Handler+0x4>

08004698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800469c:	e7fe      	b.n	800469c <UsageFault_Handler+0x4>

0800469e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046a2:	bf00      	nop
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80046b0:	4802      	ldr	r0, [pc, #8]	; (80046bc <FDCAN2_IT0_IRQHandler+0x10>)
 80046b2:	f000 fc21 	bl	8004ef8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2407f410 	.word	0x2407f410

080046c0 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80046c4:	4802      	ldr	r0, [pc, #8]	; (80046d0 <FDCAN2_IT1_IRQHandler+0x10>)
 80046c6:	f000 fc17 	bl	8004ef8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	2407f410 	.word	0x2407f410

080046d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80046d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046dc:	f001 fa89 	bl	8005bf2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046e0:	bf00      	nop
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <TIM6_DAC_IRQHandler+0x10>)
 80046ea:	f003 fcbd 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	2407f7b4 	.word	0x2407f7b4

080046f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046fc:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <SystemInit+0xec>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <SystemInit+0xec>)
 8004704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800470c:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <SystemInit+0xf0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	2b06      	cmp	r3, #6
 8004716:	d807      	bhi.n	8004728 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004718:	4b33      	ldr	r3, [pc, #204]	; (80047e8 <SystemInit+0xf0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 030f 	bic.w	r3, r3, #15
 8004720:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <SystemInit+0xf0>)
 8004722:	f043 0307 	orr.w	r3, r3, #7
 8004726:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004728:	4b30      	ldr	r3, [pc, #192]	; (80047ec <SystemInit+0xf4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2f      	ldr	r2, [pc, #188]	; (80047ec <SystemInit+0xf4>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004734:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <SystemInit+0xf4>)
 8004736:	2200      	movs	r2, #0
 8004738:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800473a:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <SystemInit+0xf4>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	492b      	ldr	r1, [pc, #172]	; (80047ec <SystemInit+0xf4>)
 8004740:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <SystemInit+0xf8>)
 8004742:	4013      	ands	r3, r2
 8004744:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004746:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <SystemInit+0xf0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004752:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <SystemInit+0xf0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 030f 	bic.w	r3, r3, #15
 800475a:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <SystemInit+0xf0>)
 800475c:	f043 0307 	orr.w	r3, r3, #7
 8004760:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <SystemInit+0xf4>)
 8004764:	2200      	movs	r2, #0
 8004766:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004768:	4b20      	ldr	r3, [pc, #128]	; (80047ec <SystemInit+0xf4>)
 800476a:	2200      	movs	r2, #0
 800476c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <SystemInit+0xf4>)
 8004770:	2200      	movs	r2, #0
 8004772:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <SystemInit+0xf4>)
 8004776:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <SystemInit+0xfc>)
 8004778:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <SystemInit+0xf4>)
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <SystemInit+0x100>)
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <SystemInit+0xf4>)
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <SystemInit+0x104>)
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004786:	4b19      	ldr	r3, [pc, #100]	; (80047ec <SystemInit+0xf4>)
 8004788:	2200      	movs	r2, #0
 800478a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800478c:	4b17      	ldr	r3, [pc, #92]	; (80047ec <SystemInit+0xf4>)
 800478e:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <SystemInit+0x104>)
 8004790:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004792:	4b16      	ldr	r3, [pc, #88]	; (80047ec <SystemInit+0xf4>)
 8004794:	2200      	movs	r2, #0
 8004796:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <SystemInit+0xf4>)
 800479a:	4a18      	ldr	r2, [pc, #96]	; (80047fc <SystemInit+0x104>)
 800479c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800479e:	4b13      	ldr	r3, [pc, #76]	; (80047ec <SystemInit+0xf4>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <SystemInit+0xf4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a10      	ldr	r2, [pc, #64]	; (80047ec <SystemInit+0xf4>)
 80047aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <SystemInit+0xf4>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <SystemInit+0x108>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <SystemInit+0x10c>)
 80047bc:	4013      	ands	r3, r2
 80047be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c2:	d202      	bcs.n	80047ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80047c4:	4b10      	ldr	r3, [pc, #64]	; (8004808 <SystemInit+0x110>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <SystemInit+0x114>)
 80047cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80047d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047d2:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <SystemInit+0xec>)
 80047d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047d8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80047da:	bf00      	nop
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000ed00 	.word	0xe000ed00
 80047e8:	52002000 	.word	0x52002000
 80047ec:	58024400 	.word	0x58024400
 80047f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80047f4:	02020200 	.word	0x02020200
 80047f8:	01ff0000 	.word	0x01ff0000
 80047fc:	01010280 	.word	0x01010280
 8004800:	5c001000 	.word	0x5c001000
 8004804:	ffff0000 	.word	0xffff0000
 8004808:	51008108 	.word	0x51008108
 800480c:	52004000 	.word	0x52004000

08004810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004814:	f7ff ff70 	bl	80046f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004818:	480c      	ldr	r0, [pc, #48]	; (800484c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800481a:	490d      	ldr	r1, [pc, #52]	; (8004850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800481c:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800481e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004820:	e002      	b.n	8004828 <LoopCopyDataInit>

08004822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004826:	3304      	adds	r3, #4

08004828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800482a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800482c:	d3f9      	bcc.n	8004822 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004830:	4c0a      	ldr	r4, [pc, #40]	; (800485c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004834:	e001      	b.n	800483a <LoopFillZerobss>

08004836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004838:	3204      	adds	r2, #4

0800483a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800483a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800483c:	d3fb      	bcc.n	8004836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800483e:	f004 f83f 	bl	80088c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004842:	f7ff fafd 	bl	8003e40 <main>
  bx  lr
 8004846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004848:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800484c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004850:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8004854:	08008b58 	.word	0x08008b58
  ldr r2, =_sbss
 8004858:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 800485c:	2407f804 	.word	0x2407f804

08004860 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004860:	e7fe      	b.n	8004860 <ADC3_IRQHandler>
	...

08004864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800486a:	2003      	movs	r0, #3
 800486c:	f000 f933 	bl	8004ad6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004870:	f002 f874 	bl	800695c <HAL_RCC_GetSysClockFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_Init+0x68>)
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	4913      	ldr	r1, [pc, #76]	; (80048d0 <HAL_Init+0x6c>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <HAL_Init+0x68>)
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	4a0e      	ldr	r2, [pc, #56]	; (80048d0 <HAL_Init+0x6c>)
 8004898:	5cd3      	ldrb	r3, [r2, r3]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <HAL_Init+0x70>)
 80048a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048a8:	4a0b      	ldr	r2, [pc, #44]	; (80048d8 <HAL_Init+0x74>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048ae:	200f      	movs	r0, #15
 80048b0:	f7ff fe7a 	bl	80045a8 <HAL_InitTick>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e002      	b.n	80048c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80048be:	f7ff fd79 	bl	80043b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	58024400 	.word	0x58024400
 80048d0:	08008b40 	.word	0x08008b40
 80048d4:	24000014 	.word	0x24000014
 80048d8:	24000010 	.word	0x24000010

080048dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_IncTick+0x20>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_IncTick+0x24>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	4a04      	ldr	r2, [pc, #16]	; (8004900 <HAL_IncTick+0x24>)
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	2400001c 	.word	0x2400001c
 8004900:	2407f800 	.word	0x2407f800

08004904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return uwTick;
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <HAL_GetTick+0x14>)
 800490a:	681b      	ldr	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	2407f800 	.word	0x2407f800

0800491c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004924:	f7ff ffee 	bl	8004904 <HAL_GetTick>
 8004928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d005      	beq.n	8004942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_Delay+0x44>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004942:	bf00      	nop
 8004944:	f7ff ffde 	bl	8004904 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d8f7      	bhi.n	8004944 <HAL_Delay+0x28>
  {
  }
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	2400001c 	.word	0x2400001c

08004964 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_GetREVID+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	0c1b      	lsrs	r3, r3, #16
}
 800496e:	4618      	mov	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	5c001000 	.word	0x5c001000

0800497c <__NVIC_SetPriorityGrouping>:
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <__NVIC_SetPriorityGrouping+0x40>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004998:	4013      	ands	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049a4:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <__NVIC_SetPriorityGrouping+0x44>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049aa:	4a04      	ldr	r2, [pc, #16]	; (80049bc <__NVIC_SetPriorityGrouping+0x40>)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	60d3      	str	r3, [r2, #12]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000ed00 	.word	0xe000ed00
 80049c0:	05fa0000 	.word	0x05fa0000

080049c4 <__NVIC_GetPriorityGrouping>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <__NVIC_GetPriorityGrouping+0x18>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	f003 0307 	and.w	r3, r3, #7
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <__NVIC_EnableIRQ>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	db0b      	blt.n	8004a0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	f003 021f 	and.w	r2, r3, #31
 80049f8:	4907      	ldr	r1, [pc, #28]	; (8004a18 <__NVIC_EnableIRQ+0x38>)
 80049fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	2001      	movs	r0, #1
 8004a02:	fa00 f202 	lsl.w	r2, r0, r2
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000e100 	.word	0xe000e100

08004a1c <__NVIC_SetPriority>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	6039      	str	r1, [r7, #0]
 8004a26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db0a      	blt.n	8004a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	490c      	ldr	r1, [pc, #48]	; (8004a68 <__NVIC_SetPriority+0x4c>)
 8004a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a3a:	0112      	lsls	r2, r2, #4
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	440b      	add	r3, r1
 8004a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a44:	e00a      	b.n	8004a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4908      	ldr	r1, [pc, #32]	; (8004a6c <__NVIC_SetPriority+0x50>)
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	3b04      	subs	r3, #4
 8004a54:	0112      	lsls	r2, r2, #4
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	440b      	add	r3, r1
 8004a5a:	761a      	strb	r2, [r3, #24]
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000e100 	.word	0xe000e100
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f1c3 0307 	rsb	r3, r3, #7
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	bf28      	it	cs
 8004a8e:	2304      	movcs	r3, #4
 8004a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3304      	adds	r3, #4
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d902      	bls.n	8004aa0 <NVIC_EncodePriority+0x30>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3b03      	subs	r3, #3
 8004a9e:	e000      	b.n	8004aa2 <NVIC_EncodePriority+0x32>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac2:	43d9      	mvns	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	4313      	orrs	r3, r2
         );
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3724      	adds	r7, #36	; 0x24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ff4c 	bl	800497c <__NVIC_SetPriorityGrouping>
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004afa:	f7ff ff63 	bl	80049c4 <__NVIC_GetPriorityGrouping>
 8004afe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	6978      	ldr	r0, [r7, #20]
 8004b06:	f7ff ffb3 	bl	8004a70 <NVIC_EncodePriority>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b10:	4611      	mov	r1, r2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ff82 	bl	8004a1c <__NVIC_SetPriority>
}
 8004b18:	bf00      	nop
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff56 	bl	80049e0 <__NVIC_EnableIRQ>
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b098      	sub	sp, #96	; 0x60
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004b44:	4a84      	ldr	r2, [pc, #528]	; (8004d58 <HAL_FDCAN_Init+0x21c>)
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	224c      	movs	r2, #76	; 0x4c
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f003 feea 	bl	8008928 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e1c6      	b.n	8004eec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7e      	ldr	r2, [pc, #504]	; (8004d5c <HAL_FDCAN_Init+0x220>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d106      	bne.n	8004b76 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b70:	461a      	mov	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff fc2c 	bl	80043e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0210 	bic.w	r2, r2, #16
 8004b9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba0:	f7ff feb0 	bl	8004904 <HAL_GetTick>
 8004ba4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ba6:	e014      	b.n	8004bd2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ba8:	f7ff feac 	bl	8004904 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b0a      	cmp	r3, #10
 8004bb4:	d90d      	bls.n	8004bd2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bbc:	f043 0201 	orr.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e18c      	b.n	8004eec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d0e3      	beq.n	8004ba8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bf0:	f7ff fe88 	bl	8004904 <HAL_GetTick>
 8004bf4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004bf6:	e014      	b.n	8004c22 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004bf8:	f7ff fe84 	bl	8004904 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b0a      	cmp	r3, #10
 8004c04:	d90d      	bls.n	8004c22 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0c:	f043 0201 	orr.w	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e164      	b.n	8004eec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0e3      	beq.n	8004bf8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0202 	orr.w	r2, r2, #2
 8004c3e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7c1b      	ldrb	r3, [r3, #16]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d108      	bne.n	8004c5a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c56:	619a      	str	r2, [r3, #24]
 8004c58:	e007      	b.n	8004c6a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c68:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7c5b      	ldrb	r3, [r3, #17]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d108      	bne.n	8004c84 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c80:	619a      	str	r2, [r3, #24]
 8004c82:	e007      	b.n	8004c94 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c92:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7c9b      	ldrb	r3, [r3, #18]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d108      	bne.n	8004cae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004caa:	619a      	str	r2, [r3, #24]
 8004cac:	e007      	b.n	8004cbe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cbc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004ce2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0210 	bic.w	r2, r2, #16
 8004cf2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d108      	bne.n	8004d0e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0204 	orr.w	r2, r2, #4
 8004d0a:	619a      	str	r2, [r3, #24]
 8004d0c:	e030      	b.n	8004d70 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d02c      	beq.n	8004d70 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d020      	beq.n	8004d60 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d2c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0210 	orr.w	r2, r2, #16
 8004d3c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d114      	bne.n	8004d70 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0220 	orr.w	r2, r2, #32
 8004d54:	619a      	str	r2, [r3, #24]
 8004d56:	e00b      	b.n	8004d70 <HAL_FDCAN_Init+0x234>
 8004d58:	08008ab8 	.word	0x08008ab8
 8004d5c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0220 	orr.w	r2, r2, #32
 8004d6e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004d80:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004d88:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004d98:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004d9a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da4:	d115      	bne.n	8004dd2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	3b01      	subs	r3, #1
 8004db2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004db4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004dbe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004dce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004dd0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df8:	4413      	add	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d011      	beq.n	8004e22 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004e06:	f023 0107 	bic.w	r1, r3, #7
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	3360      	adds	r3, #96	; 0x60
 8004e12:	443b      	add	r3, r7
 8004e14:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d011      	beq.n	8004e4e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004e32:	f023 0107 	bic.w	r1, r3, #7
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	3360      	adds	r3, #96	; 0x60
 8004e3e:	443b      	add	r3, r7
 8004e40:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d012      	beq.n	8004e7c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004e5e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	3360      	adds	r3, #96	; 0x60
 8004e6a:	443b      	add	r3, r7
 8004e6c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004e70:	011a      	lsls	r2, r3, #4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d012      	beq.n	8004eaa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004e8c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	3360      	adds	r3, #96	; 0x60
 8004e98:	443b      	add	r3, r7
 8004e9a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a11      	ldr	r2, [pc, #68]	; (8004ef4 <HAL_FDCAN_Init+0x3b8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d107      	bne.n	8004ec4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f022 0203 	bic.w	r2, r2, #3
 8004ec2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fb1f 	bl	8005520 <FDCAN_CalcultateRamBlockAddresses>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004ee8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3760      	adds	r7, #96	; 0x60
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	4000a000 	.word	0x4000a000

08004ef8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b096      	sub	sp, #88	; 0x58
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004f00:	4b9a      	ldr	r3, [pc, #616]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	079b      	lsls	r3, r3, #30
 8004f06:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004f08:	4b98      	ldr	r3, [pc, #608]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	079b      	lsls	r3, r3, #30
 8004f0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f10:	4013      	ands	r3, r2
 8004f12:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004f1e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f28:	4013      	ands	r3, r2
 8004f2a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f40:	4013      	ands	r3, r2
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f58:	4013      	ands	r3, r2
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f62:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004f66:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f70:	4013      	ands	r3, r2
 8004f72:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f88:	4013      	ands	r3, r2
 8004f8a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8004fbe:	4b6b      	ldr	r3, [pc, #428]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fa5f 	bl	8005488 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fcc:	0a9b      	lsrs	r3, r3, #10
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01d      	beq.n	8005012 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	0a9b      	lsrs	r3, r3, #10
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d017      	beq.n	8005012 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005002:	651a      	str	r2, [r3, #80]	; 0x50
 8005004:	4b59      	ldr	r3, [pc, #356]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8005006:	2200      	movs	r2, #0
 8005008:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800500a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa12 	bl	8005436 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800501e:	4b54      	ldr	r3, [pc, #336]	; (8005170 <HAL_FDCAN_IRQHandler+0x278>)
 8005020:	400b      	ands	r3, r1
 8005022:	6513      	str	r3, [r2, #80]	; 0x50
 8005024:	4a51      	ldr	r2, [pc, #324]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8005026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005028:	0f9b      	lsrs	r3, r3, #30
 800502a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800502c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9c0 	bl	80053b4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005040:	4b4b      	ldr	r3, [pc, #300]	; (8005170 <HAL_FDCAN_IRQHandler+0x278>)
 8005042:	400b      	ands	r3, r1
 8005044:	6513      	str	r3, [r2, #80]	; 0x50
 8005046:	4a49      	ldr	r2, [pc, #292]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8005048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504a:	0f9b      	lsrs	r3, r3, #30
 800504c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800504e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f9ba 	bl	80053ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005062:	4b43      	ldr	r3, [pc, #268]	; (8005170 <HAL_FDCAN_IRQHandler+0x278>)
 8005064:	400b      	ands	r3, r1
 8005066:	6513      	str	r3, [r2, #80]	; 0x50
 8005068:	4a40      	ldr	r2, [pc, #256]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 800506a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506c:	0f9b      	lsrs	r3, r3, #30
 800506e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005070:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f9b4 	bl	80053e0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005084:	4b3a      	ldr	r3, [pc, #232]	; (8005170 <HAL_FDCAN_IRQHandler+0x278>)
 8005086:	400b      	ands	r3, r1
 8005088:	6513      	str	r3, [r2, #80]	; 0x50
 800508a:	4a38      	ldr	r2, [pc, #224]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 800508c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508e:	0f9b      	lsrs	r3, r3, #30
 8005090:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005092:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f9ae 	bl	80053f6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509c:	0adb      	lsrs	r3, r3, #11
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d010      	beq.n	80050c8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	0adb      	lsrs	r3, r3, #11
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ba:	651a      	str	r2, [r3, #80]	; 0x50
 80050bc:	4b2b      	ldr	r3, [pc, #172]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 80050be:	2200      	movs	r2, #0
 80050c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f9a2 	bl	800540c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80050c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ca:	0a5b      	lsrs	r3, r3, #9
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01d      	beq.n	8005110 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	0a5b      	lsrs	r3, r3, #9
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d017      	beq.n	8005110 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050e8:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f4:	4013      	ands	r3, r2
 80050f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005100:	651a      	str	r2, [r3, #80]	; 0x50
 8005102:	4b1a      	ldr	r3, [pc, #104]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8005104:	2200      	movs	r2, #0
 8005106:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f988 	bl	8005420 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005112:	0cdb      	lsrs	r3, r3, #19
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d010      	beq.n	800513e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	0cdb      	lsrs	r3, r3, #19
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005130:	651a      	str	r2, [r3, #80]	; 0x50
 8005132:	4b0e      	ldr	r3, [pc, #56]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8005134:	2200      	movs	r2, #0
 8005136:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f987 	bl	800544c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800513e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800515e:	651a      	str	r2, [r3, #80]	; 0x50
 8005160:	4b02      	ldr	r3, [pc, #8]	; (800516c <HAL_FDCAN_IRQHandler+0x274>)
 8005162:	2200      	movs	r2, #0
 8005164:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	e004      	b.n	8005174 <HAL_FDCAN_IRQHandler+0x27c>
 800516a:	bf00      	nop
 800516c:	4000a800 	.word	0x4000a800
 8005170:	3fcfffff 	.word	0x3fcfffff
 8005174:	f000 f974 	bl	8005460 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517a:	0c9b      	lsrs	r3, r3, #18
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	0c9b      	lsrs	r3, r3, #18
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005198:	651a      	str	r2, [r3, #80]	; 0x50
 800519a:	4b83      	ldr	r3, [pc, #524]	; (80053a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800519c:	2200      	movs	r2, #0
 800519e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f967 	bl	8005474 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80051a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a8:	0c5b      	lsrs	r3, r3, #17
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d015      	beq.n	80051de <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	0c5b      	lsrs	r3, r3, #17
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00f      	beq.n	80051de <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051c6:	651a      	str	r2, [r3, #80]	; 0x50
 80051c8:	4b77      	ldr	r3, [pc, #476]	; (80053a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80051de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051ea:	4b70      	ldr	r3, [pc, #448]	; (80053ac <HAL_FDCAN_IRQHandler+0x4b4>)
 80051ec:	400b      	ands	r3, r1
 80051ee:	6513      	str	r3, [r2, #80]	; 0x50
 80051f0:	4a6d      	ldr	r2, [pc, #436]	; (80053a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80051f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f4:	0f9b      	lsrs	r3, r3, #30
 80051f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80051f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f958 	bl	80054b0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005202:	2b00      	cmp	r3, #0
 8005204:	d011      	beq.n	800522a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800520c:	4b67      	ldr	r3, [pc, #412]	; (80053ac <HAL_FDCAN_IRQHandler+0x4b4>)
 800520e:	400b      	ands	r3, r1
 8005210:	6513      	str	r3, [r2, #80]	; 0x50
 8005212:	4a65      	ldr	r2, [pc, #404]	; (80053a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005216:	0f9b      	lsrs	r3, r3, #30
 8005218:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a60      	ldr	r2, [pc, #384]	; (80053b0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	f040 80ac 	bne.w	800538e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a4 	beq.w	800538e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525a:	4013      	ands	r3, r2
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005272:	4013      	ands	r3, r2
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528a:	4013      	ands	r3, r2
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005298:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	6a3a      	ldr	r2, [r7, #32]
 80052a2:	4013      	ands	r3, r2
 80052a4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80052b0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80052dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8f1 	bl	80054c6 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80052f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f8f1 	bl	80054dc <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	099b      	lsrs	r3, r3, #6
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01a      	beq.n	800533c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	099b      	lsrs	r3, r3, #6
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d014      	beq.n	800533c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	b29b      	uxth	r3, r3
 800531c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005328:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	6939      	ldr	r1, [r7, #16]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f8db 	bl	80054f2 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d007      	beq.n	8005352 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800534a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f8dc 	bl	800550a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f87f 	bl	800549c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800539e:	bf00      	nop
 80053a0:	3758      	adds	r7, #88	; 0x58
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	4000a800 	.word	0x4000a800
 80053ac:	3fcfffff 	.word	0x3fcfffff
 80053b0:	4000a000 	.word	0x4000a000

080053b4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005536:	4ba7      	ldr	r3, [pc, #668]	; (80057d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005538:	4013      	ands	r3, r2
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	0091      	lsls	r1, r2, #2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	430b      	orrs	r3, r1
 8005544:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005550:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	041a      	lsls	r2, r3, #16
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	4413      	add	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005576:	4b97      	ldr	r3, [pc, #604]	; (80057d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005578:	4013      	ands	r3, r2
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	0091      	lsls	r1, r2, #2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	430b      	orrs	r3, r1
 8005584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005598:	041a      	lsls	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4413      	add	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80055b8:	4b86      	ldr	r3, [pc, #536]	; (80057d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	0091      	lsls	r1, r2, #2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055d2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	041a      	lsls	r2, r3, #16
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055ee:	fb02 f303 	mul.w	r3, r2, r3
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	4413      	add	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005600:	4b74      	ldr	r3, [pc, #464]	; (80057d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005602:	4013      	ands	r3, r2
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	0091      	lsls	r1, r2, #2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	430b      	orrs	r3, r1
 800560e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800561a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005622:	041a      	lsls	r2, r3, #16
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4413      	add	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005648:	4b62      	ldr	r3, [pc, #392]	; (80057d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800564a:	4013      	ands	r3, r2
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	0091      	lsls	r1, r2, #2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	430b      	orrs	r3, r1
 8005656:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4413      	add	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005674:	4b57      	ldr	r3, [pc, #348]	; (80057d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005676:	4013      	ands	r3, r2
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	0091      	lsls	r1, r2, #2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	430b      	orrs	r3, r1
 8005682:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800568e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	041a      	lsls	r2, r3, #16
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	4413      	add	r3, r2
 80056ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80056b6:	4b47      	ldr	r3, [pc, #284]	; (80057d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	0091      	lsls	r1, r2, #2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	430b      	orrs	r3, r1
 80056c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056d0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d8:	041a      	lsls	r2, r3, #16
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056ec:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f4:	061a      	lsls	r2, r3, #24
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005704:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005706:	4413      	add	r3, r2
 8005708:	009a      	lsls	r2, r3, #2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	441a      	add	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005752:	fb01 f303 	mul.w	r3, r1, r3
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80057b6:	fb01 f303 	mul.w	r3, r1, r3
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	441a      	add	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	4a04      	ldr	r2, [pc, #16]	; (80057dc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d915      	bls.n	80057fc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80057d0:	e006      	b.n	80057e0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80057d2:	bf00      	nop
 80057d4:	ffff0003 	.word	0xffff0003
 80057d8:	10002b00 	.word	0x10002b00
 80057dc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2203      	movs	r2, #3
 80057f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e010      	b.n	800581e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e005      	b.n	8005810 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3304      	adds	r3, #4
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	429a      	cmp	r2, r3
 800581a:	d3f3      	bcc.n	8005804 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800582c:	b480      	push	{r7}
 800582e:	b089      	sub	sp, #36	; 0x24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800583a:	4b89      	ldr	r3, [pc, #548]	; (8005a60 <HAL_GPIO_Init+0x234>)
 800583c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800583e:	e194      	b.n	8005b6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	2101      	movs	r1, #1
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	fa01 f303 	lsl.w	r3, r1, r3
 800584c:	4013      	ands	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8186 	beq.w	8005b64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d005      	beq.n	8005870 <HAL_GPIO_Init+0x44>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d130      	bne.n	80058d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	2203      	movs	r2, #3
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	43db      	mvns	r3, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4013      	ands	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058a6:	2201      	movs	r2, #1
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	f003 0201 	and.w	r2, r3, #1
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d017      	beq.n	800590e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	2203      	movs	r2, #3
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	43db      	mvns	r3, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4013      	ands	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4313      	orrs	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d123      	bne.n	8005962 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	08da      	lsrs	r2, r3, #3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3208      	adds	r2, #8
 8005922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	220f      	movs	r2, #15
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4313      	orrs	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	08da      	lsrs	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3208      	adds	r2, #8
 800595c:	69b9      	ldr	r1, [r7, #24]
 800595e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	2203      	movs	r2, #3
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43db      	mvns	r3, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4013      	ands	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0203 	and.w	r2, r3, #3
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4313      	orrs	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80e0 	beq.w	8005b64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a4:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <HAL_GPIO_Init+0x238>)
 80059a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059aa:	4a2e      	ldr	r2, [pc, #184]	; (8005a64 <HAL_GPIO_Init+0x238>)
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80059b4:	4b2b      	ldr	r3, [pc, #172]	; (8005a64 <HAL_GPIO_Init+0x238>)
 80059b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059c2:	4a29      	ldr	r2, [pc, #164]	; (8005a68 <HAL_GPIO_Init+0x23c>)
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	089b      	lsrs	r3, r3, #2
 80059c8:	3302      	adds	r3, #2
 80059ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	220f      	movs	r2, #15
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <HAL_GPIO_Init+0x240>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d052      	beq.n	8005a94 <HAL_GPIO_Init+0x268>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <HAL_GPIO_Init+0x244>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d031      	beq.n	8005a5a <HAL_GPIO_Init+0x22e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <HAL_GPIO_Init+0x248>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d02b      	beq.n	8005a56 <HAL_GPIO_Init+0x22a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_GPIO_Init+0x24c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d025      	beq.n	8005a52 <HAL_GPIO_Init+0x226>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <HAL_GPIO_Init+0x250>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01f      	beq.n	8005a4e <HAL_GPIO_Init+0x222>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <HAL_GPIO_Init+0x254>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d019      	beq.n	8005a4a <HAL_GPIO_Init+0x21e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1a      	ldr	r2, [pc, #104]	; (8005a84 <HAL_GPIO_Init+0x258>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <HAL_GPIO_Init+0x21a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a19      	ldr	r2, [pc, #100]	; (8005a88 <HAL_GPIO_Init+0x25c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00d      	beq.n	8005a42 <HAL_GPIO_Init+0x216>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <HAL_GPIO_Init+0x260>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <HAL_GPIO_Init+0x212>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <HAL_GPIO_Init+0x264>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d101      	bne.n	8005a3a <HAL_GPIO_Init+0x20e>
 8005a36:	2309      	movs	r3, #9
 8005a38:	e02d      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a3a:	230a      	movs	r3, #10
 8005a3c:	e02b      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a3e:	2308      	movs	r3, #8
 8005a40:	e029      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a42:	2307      	movs	r3, #7
 8005a44:	e027      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a46:	2306      	movs	r3, #6
 8005a48:	e025      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a4a:	2305      	movs	r3, #5
 8005a4c:	e023      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a4e:	2304      	movs	r3, #4
 8005a50:	e021      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a52:	2303      	movs	r3, #3
 8005a54:	e01f      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e01d      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e01b      	b.n	8005a96 <HAL_GPIO_Init+0x26a>
 8005a5e:	bf00      	nop
 8005a60:	58000080 	.word	0x58000080
 8005a64:	58024400 	.word	0x58024400
 8005a68:	58000400 	.word	0x58000400
 8005a6c:	58020000 	.word	0x58020000
 8005a70:	58020400 	.word	0x58020400
 8005a74:	58020800 	.word	0x58020800
 8005a78:	58020c00 	.word	0x58020c00
 8005a7c:	58021000 	.word	0x58021000
 8005a80:	58021400 	.word	0x58021400
 8005a84:	58021800 	.word	0x58021800
 8005a88:	58021c00 	.word	0x58021c00
 8005a8c:	58022000 	.word	0x58022000
 8005a90:	58022400 	.word	0x58022400
 8005a94:	2300      	movs	r3, #0
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	f002 0203 	and.w	r2, r2, #3
 8005a9c:	0092      	lsls	r2, r2, #2
 8005a9e:	4093      	lsls	r3, r2
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005aa6:	4938      	ldr	r1, [pc, #224]	; (8005b88 <HAL_GPIO_Init+0x35c>)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	089b      	lsrs	r3, r3, #2
 8005aac:	3302      	adds	r3, #2
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f47f ae63 	bne.w	8005840 <HAL_GPIO_Init+0x14>
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	3724      	adds	r7, #36	; 0x24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	58000400 	.word	0x58000400

08005b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	807b      	strh	r3, [r7, #2]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b9c:	787b      	ldrb	r3, [r7, #1]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ba2:	887a      	ldrh	r2, [r7, #2]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ba8:	e003      	b.n	8005bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005baa:	887b      	ldrh	r3, [r7, #2]
 8005bac:	041a      	lsls	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	619a      	str	r2, [r3, #24]
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bd0:	887a      	ldrh	r2, [r7, #2]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	041a      	lsls	r2, r3, #16
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	43d9      	mvns	r1, r3
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	400b      	ands	r3, r1
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	619a      	str	r2, [r3, #24]
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c10:	88fb      	ldrh	r3, [r7, #6]
 8005c12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 f804 	bl	8005c26 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b08f      	sub	sp, #60	; 0x3c
 8005c40:	af0a      	add	r7, sp, #40	; 0x28
 8005c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e054      	b.n	8005cf8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fe fc33 	bl	80044d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2203      	movs	r2, #3
 8005c72:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f002 fc59 	bl	8008544 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	603b      	str	r3, [r7, #0]
 8005c98:	687e      	ldr	r6, [r7, #4]
 8005c9a:	466d      	mov	r5, sp
 8005c9c:	f106 0410 	add.w	r4, r6, #16
 8005ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ca8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cac:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cb0:	1d33      	adds	r3, r6, #4
 8005cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cb4:	6838      	ldr	r0, [r7, #0]
 8005cb6:	f002 fbd7 	bl	8008468 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f002 fc50 	bl	8008566 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	687e      	ldr	r6, [r7, #4]
 8005cce:	466d      	mov	r5, sp
 8005cd0:	f106 0410 	add.w	r4, r6, #16
 8005cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ce4:	1d33      	adds	r3, r6, #4
 8005ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ce8:	6838      	ldr	r0, [r7, #0]
 8005cea:	f002 fd2f 	bl	800874c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_PWREx_ConfigSupply+0x70>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d00a      	beq.n	8005d2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <HAL_PWREx_ConfigSupply+0x70>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d001      	beq.n	8005d26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e01f      	b.n	8005d66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e01d      	b.n	8005d66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d2a:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <HAL_PWREx_ConfigSupply+0x70>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f023 0207 	bic.w	r2, r3, #7
 8005d32:	490f      	ldr	r1, [pc, #60]	; (8005d70 <HAL_PWREx_ConfigSupply+0x70>)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d3a:	f7fe fde3 	bl	8004904 <HAL_GetTick>
 8005d3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d40:	e009      	b.n	8005d56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d42:	f7fe fddf 	bl	8004904 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d50:	d901      	bls.n	8005d56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e007      	b.n	8005d66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d56:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <HAL_PWREx_ConfigSupply+0x70>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d62:	d1ee      	bne.n	8005d42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	58024800 	.word	0x58024800

08005d74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4a04      	ldr	r2, [pc, #16]	; (8005d90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d82:	60d3      	str	r3, [r2, #12]
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	58024800 	.word	0x58024800

08005d94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	; 0x30
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d102      	bne.n	8005da8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f000 bc1d 	b.w	80065e2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8087 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005db6:	4b99      	ldr	r3, [pc, #612]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dc0:	4b96      	ldr	r3, [pc, #600]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d007      	beq.n	8005ddc <HAL_RCC_OscConfig+0x48>
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	2b18      	cmp	r3, #24
 8005dd0:	d110      	bne.n	8005df4 <HAL_RCC_OscConfig+0x60>
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d10b      	bne.n	8005df4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ddc:	4b8f      	ldr	r3, [pc, #572]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d06c      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x12e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d168      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e3f6      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d106      	bne.n	8005e0c <HAL_RCC_OscConfig+0x78>
 8005dfe:	4b87      	ldr	r3, [pc, #540]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a86      	ldr	r2, [pc, #536]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e02e      	b.n	8005e6a <HAL_RCC_OscConfig+0xd6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10c      	bne.n	8005e2e <HAL_RCC_OscConfig+0x9a>
 8005e14:	4b81      	ldr	r3, [pc, #516]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a80      	ldr	r2, [pc, #512]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	4b7e      	ldr	r3, [pc, #504]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a7d      	ldr	r2, [pc, #500]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	e01d      	b.n	8005e6a <HAL_RCC_OscConfig+0xd6>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e36:	d10c      	bne.n	8005e52 <HAL_RCC_OscConfig+0xbe>
 8005e38:	4b78      	ldr	r3, [pc, #480]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a77      	ldr	r2, [pc, #476]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4b75      	ldr	r3, [pc, #468]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a74      	ldr	r2, [pc, #464]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	e00b      	b.n	8005e6a <HAL_RCC_OscConfig+0xd6>
 8005e52:	4b72      	ldr	r3, [pc, #456]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a71      	ldr	r2, [pc, #452]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	4b6f      	ldr	r3, [pc, #444]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6e      	ldr	r2, [pc, #440]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d013      	beq.n	8005e9a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e72:	f7fe fd47 	bl	8004904 <HAL_GetTick>
 8005e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e7a:	f7fe fd43 	bl	8004904 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b64      	cmp	r3, #100	; 0x64
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e3aa      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e8c:	4b63      	ldr	r3, [pc, #396]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0xe6>
 8005e98:	e014      	b.n	8005ec4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9a:	f7fe fd33 	bl	8004904 <HAL_GetTick>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea2:	f7fe fd2f 	bl	8004904 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b64      	cmp	r3, #100	; 0x64
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e396      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eb4:	4b59      	ldr	r3, [pc, #356]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x10e>
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80cb 	beq.w	8006068 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed2:	4b52      	ldr	r3, [pc, #328]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eda:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005edc:	4b4f      	ldr	r3, [pc, #316]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x164>
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2b18      	cmp	r3, #24
 8005eec:	d156      	bne.n	8005f9c <HAL_RCC_OscConfig+0x208>
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d151      	bne.n	8005f9c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef8:	4b48      	ldr	r3, [pc, #288]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_RCC_OscConfig+0x17c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e368      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f10:	4b42      	ldr	r3, [pc, #264]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f023 0219 	bic.w	r2, r3, #25
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	493f      	ldr	r1, [pc, #252]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f22:	f7fe fcef 	bl	8004904 <HAL_GetTick>
 8005f26:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2a:	f7fe fceb 	bl	8004904 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e352      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f3c:	4b37      	ldr	r3, [pc, #220]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f48:	f7fe fd0c 	bl	8004964 <HAL_GetREVID>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d817      	bhi.n	8005f86 <HAL_RCC_OscConfig+0x1f2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d108      	bne.n	8005f70 <HAL_RCC_OscConfig+0x1dc>
 8005f5e:	4b2f      	ldr	r3, [pc, #188]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f66:	4a2d      	ldr	r2, [pc, #180]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6e:	e07b      	b.n	8006068 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f70:	4b2a      	ldr	r3, [pc, #168]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	031b      	lsls	r3, r3, #12
 8005f7e:	4927      	ldr	r1, [pc, #156]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f84:	e070      	b.n	8006068 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f86:	4b25      	ldr	r3, [pc, #148]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	061b      	lsls	r3, r3, #24
 8005f94:	4921      	ldr	r1, [pc, #132]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f9a:	e065      	b.n	8006068 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d048      	beq.n	8006036 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fa4:	4b1d      	ldr	r3, [pc, #116]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 0219 	bic.w	r2, r3, #25
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	491a      	ldr	r1, [pc, #104]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fe fca5 	bl	8004904 <HAL_GetTick>
 8005fba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fbe:	f7fe fca1 	bl	8004904 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e308      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fdc:	f7fe fcc2 	bl	8004964 <HAL_GetREVID>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d81a      	bhi.n	8006020 <HAL_RCC_OscConfig+0x28c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d108      	bne.n	8006004 <HAL_RCC_OscConfig+0x270>
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ffa:	4a08      	ldr	r2, [pc, #32]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8005ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006000:	6053      	str	r3, [r2, #4]
 8006002:	e031      	b.n	8006068 <HAL_RCC_OscConfig+0x2d4>
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	031b      	lsls	r3, r3, #12
 8006012:	4902      	ldr	r1, [pc, #8]	; (800601c <HAL_RCC_OscConfig+0x288>)
 8006014:	4313      	orrs	r3, r2
 8006016:	604b      	str	r3, [r1, #4]
 8006018:	e026      	b.n	8006068 <HAL_RCC_OscConfig+0x2d4>
 800601a:	bf00      	nop
 800601c:	58024400 	.word	0x58024400
 8006020:	4b9a      	ldr	r3, [pc, #616]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	4997      	ldr	r1, [pc, #604]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006030:	4313      	orrs	r3, r2
 8006032:	604b      	str	r3, [r1, #4]
 8006034:	e018      	b.n	8006068 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006036:	4b95      	ldr	r3, [pc, #596]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a94      	ldr	r2, [pc, #592]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800603c:	f023 0301 	bic.w	r3, r3, #1
 8006040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006042:	f7fe fc5f 	bl	8004904 <HAL_GetTick>
 8006046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006048:	e008      	b.n	800605c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800604a:	f7fe fc5b 	bl	8004904 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e2c2      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800605c:	4b8b      	ldr	r3, [pc, #556]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1f0      	bne.n	800604a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 80a9 	beq.w	80061c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006076:	4b85      	ldr	r3, [pc, #532]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800607e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006080:	4b82      	ldr	r3, [pc, #520]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d007      	beq.n	800609c <HAL_RCC_OscConfig+0x308>
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b18      	cmp	r3, #24
 8006090:	d13a      	bne.n	8006108 <HAL_RCC_OscConfig+0x374>
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d135      	bne.n	8006108 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800609c:	4b7b      	ldr	r3, [pc, #492]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_OscConfig+0x320>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e296      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b4:	f7fe fc56 	bl	8004964 <HAL_GetREVID>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80060be:	4293      	cmp	r3, r2
 80060c0:	d817      	bhi.n	80060f2 <HAL_RCC_OscConfig+0x35e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d108      	bne.n	80060dc <HAL_RCC_OscConfig+0x348>
 80060ca:	4b70      	ldr	r3, [pc, #448]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060d2:	4a6e      	ldr	r2, [pc, #440]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 80060d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060da:	e075      	b.n	80061c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060dc:	4b6b      	ldr	r3, [pc, #428]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	069b      	lsls	r3, r3, #26
 80060ea:	4968      	ldr	r1, [pc, #416]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060f0:	e06a      	b.n	80061c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060f2:	4b66      	ldr	r3, [pc, #408]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	061b      	lsls	r3, r3, #24
 8006100:	4962      	ldr	r1, [pc, #392]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006102:	4313      	orrs	r3, r2
 8006104:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006106:	e05f      	b.n	80061c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d042      	beq.n	8006196 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006110:	4b5e      	ldr	r3, [pc, #376]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a5d      	ldr	r2, [pc, #372]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611c:	f7fe fbf2 	bl	8004904 <HAL_GetTick>
 8006120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006124:	f7fe fbee 	bl	8004904 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e255      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006136:	4b55      	ldr	r3, [pc, #340]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0f0      	beq.n	8006124 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006142:	f7fe fc0f 	bl	8004964 <HAL_GetREVID>
 8006146:	4603      	mov	r3, r0
 8006148:	f241 0203 	movw	r2, #4099	; 0x1003
 800614c:	4293      	cmp	r3, r2
 800614e:	d817      	bhi.n	8006180 <HAL_RCC_OscConfig+0x3ec>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	2b20      	cmp	r3, #32
 8006156:	d108      	bne.n	800616a <HAL_RCC_OscConfig+0x3d6>
 8006158:	4b4c      	ldr	r3, [pc, #304]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006160:	4a4a      	ldr	r2, [pc, #296]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006162:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006166:	6053      	str	r3, [r2, #4]
 8006168:	e02e      	b.n	80061c8 <HAL_RCC_OscConfig+0x434>
 800616a:	4b48      	ldr	r3, [pc, #288]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	069b      	lsls	r3, r3, #26
 8006178:	4944      	ldr	r1, [pc, #272]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800617a:	4313      	orrs	r3, r2
 800617c:	604b      	str	r3, [r1, #4]
 800617e:	e023      	b.n	80061c8 <HAL_RCC_OscConfig+0x434>
 8006180:	4b42      	ldr	r3, [pc, #264]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	061b      	lsls	r3, r3, #24
 800618e:	493f      	ldr	r1, [pc, #252]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006190:	4313      	orrs	r3, r2
 8006192:	60cb      	str	r3, [r1, #12]
 8006194:	e018      	b.n	80061c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006196:	4b3d      	ldr	r3, [pc, #244]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a3c      	ldr	r2, [pc, #240]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800619c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a2:	f7fe fbaf 	bl	8004904 <HAL_GetTick>
 80061a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061aa:	f7fe fbab 	bl	8004904 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e212      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061bc:	4b33      	ldr	r3, [pc, #204]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f0      	bne.n	80061aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d036      	beq.n	8006242 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d019      	beq.n	8006210 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061dc:	4b2b      	ldr	r3, [pc, #172]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 80061de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e0:	4a2a      	ldr	r2, [pc, #168]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e8:	f7fe fb8c 	bl	8004904 <HAL_GetTick>
 80061ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f0:	f7fe fb88 	bl	8004904 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e1ef      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006202:	4b22      	ldr	r3, [pc, #136]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCC_OscConfig+0x45c>
 800620e:	e018      	b.n	8006242 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006210:	4b1e      	ldr	r3, [pc, #120]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006214:	4a1d      	ldr	r2, [pc, #116]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621c:	f7fe fb72 	bl	8004904 <HAL_GetTick>
 8006220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006224:	f7fe fb6e 	bl	8004904 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e1d5      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006236:	4b15      	ldr	r3, [pc, #84]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d039      	beq.n	80062c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01c      	beq.n	8006290 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a0c      	ldr	r2, [pc, #48]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800625c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006260:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006262:	f7fe fb4f 	bl	8004904 <HAL_GetTick>
 8006266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800626a:	f7fe fb4b 	bl	8004904 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e1b2      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800627c:	4b03      	ldr	r3, [pc, #12]	; (800628c <HAL_RCC_OscConfig+0x4f8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <HAL_RCC_OscConfig+0x4d6>
 8006288:	e01b      	b.n	80062c2 <HAL_RCC_OscConfig+0x52e>
 800628a:	bf00      	nop
 800628c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006290:	4b9b      	ldr	r3, [pc, #620]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a9a      	ldr	r2, [pc, #616]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800629a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800629c:	f7fe fb32 	bl	8004904 <HAL_GetTick>
 80062a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062a4:	f7fe fb2e 	bl	8004904 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e195      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062b6:	4b92      	ldr	r3, [pc, #584]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8081 	beq.w	80063d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062d0:	4b8c      	ldr	r3, [pc, #560]	; (8006504 <HAL_RCC_OscConfig+0x770>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a8b      	ldr	r2, [pc, #556]	; (8006504 <HAL_RCC_OscConfig+0x770>)
 80062d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062dc:	f7fe fb12 	bl	8004904 <HAL_GetTick>
 80062e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062e4:	f7fe fb0e 	bl	8004904 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b64      	cmp	r3, #100	; 0x64
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e175      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062f6:	4b83      	ldr	r3, [pc, #524]	; (8006504 <HAL_RCC_OscConfig+0x770>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d106      	bne.n	8006318 <HAL_RCC_OscConfig+0x584>
 800630a:	4b7d      	ldr	r3, [pc, #500]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4a7c      	ldr	r2, [pc, #496]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	6713      	str	r3, [r2, #112]	; 0x70
 8006316:	e02d      	b.n	8006374 <HAL_RCC_OscConfig+0x5e0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10c      	bne.n	800633a <HAL_RCC_OscConfig+0x5a6>
 8006320:	4b77      	ldr	r3, [pc, #476]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006324:	4a76      	ldr	r2, [pc, #472]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	6713      	str	r3, [r2, #112]	; 0x70
 800632c:	4b74      	ldr	r3, [pc, #464]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	4a73      	ldr	r2, [pc, #460]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006332:	f023 0304 	bic.w	r3, r3, #4
 8006336:	6713      	str	r3, [r2, #112]	; 0x70
 8006338:	e01c      	b.n	8006374 <HAL_RCC_OscConfig+0x5e0>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b05      	cmp	r3, #5
 8006340:	d10c      	bne.n	800635c <HAL_RCC_OscConfig+0x5c8>
 8006342:	4b6f      	ldr	r3, [pc, #444]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006346:	4a6e      	ldr	r2, [pc, #440]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006348:	f043 0304 	orr.w	r3, r3, #4
 800634c:	6713      	str	r3, [r2, #112]	; 0x70
 800634e:	4b6c      	ldr	r3, [pc, #432]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	4a6b      	ldr	r2, [pc, #428]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	6713      	str	r3, [r2, #112]	; 0x70
 800635a:	e00b      	b.n	8006374 <HAL_RCC_OscConfig+0x5e0>
 800635c:	4b68      	ldr	r3, [pc, #416]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800635e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006360:	4a67      	ldr	r2, [pc, #412]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	6713      	str	r3, [r2, #112]	; 0x70
 8006368:	4b65      	ldr	r3, [pc, #404]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	4a64      	ldr	r2, [pc, #400]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800636e:	f023 0304 	bic.w	r3, r3, #4
 8006372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d015      	beq.n	80063a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637c:	f7fe fac2 	bl	8004904 <HAL_GetTick>
 8006380:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006382:	e00a      	b.n	800639a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006384:	f7fe fabe 	bl	8004904 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006392:	4293      	cmp	r3, r2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e123      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800639a:	4b59      	ldr	r3, [pc, #356]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0ee      	beq.n	8006384 <HAL_RCC_OscConfig+0x5f0>
 80063a6:	e014      	b.n	80063d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a8:	f7fe faac 	bl	8004904 <HAL_GetTick>
 80063ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063b0:	f7fe faa8 	bl	8004904 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e10d      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063c6:	4b4e      	ldr	r3, [pc, #312]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1ee      	bne.n	80063b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8102 	beq.w	80065e0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063dc:	4b48      	ldr	r3, [pc, #288]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063e4:	2b18      	cmp	r3, #24
 80063e6:	f000 80bd 	beq.w	8006564 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	f040 809e 	bne.w	8006530 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f4:	4b42      	ldr	r3, [pc, #264]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a41      	ldr	r2, [pc, #260]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80063fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fe fa80 	bl	8004904 <HAL_GetTick>
 8006404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006408:	f7fe fa7c 	bl	8004904 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e0e3      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800641a:	4b39      	ldr	r3, [pc, #228]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1f0      	bne.n	8006408 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006426:	4b36      	ldr	r3, [pc, #216]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800642a:	4b37      	ldr	r3, [pc, #220]	; (8006508 <HAL_RCC_OscConfig+0x774>)
 800642c:	4013      	ands	r3, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006436:	0112      	lsls	r2, r2, #4
 8006438:	430a      	orrs	r2, r1
 800643a:	4931      	ldr	r1, [pc, #196]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800643c:	4313      	orrs	r3, r2
 800643e:	628b      	str	r3, [r1, #40]	; 0x28
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	3b01      	subs	r3, #1
 8006446:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644e:	3b01      	subs	r3, #1
 8006450:	025b      	lsls	r3, r3, #9
 8006452:	b29b      	uxth	r3, r3
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	3b01      	subs	r3, #1
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	3b01      	subs	r3, #1
 800646a:	061b      	lsls	r3, r3, #24
 800646c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006470:	4923      	ldr	r1, [pc, #140]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006472:	4313      	orrs	r3, r2
 8006474:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006476:	4b22      	ldr	r3, [pc, #136]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	4a21      	ldr	r2, [pc, #132]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006482:	4b1f      	ldr	r3, [pc, #124]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006486:	4b21      	ldr	r3, [pc, #132]	; (800650c <HAL_RCC_OscConfig+0x778>)
 8006488:	4013      	ands	r3, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800648e:	00d2      	lsls	r2, r2, #3
 8006490:	491b      	ldr	r1, [pc, #108]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006492:	4313      	orrs	r3, r2
 8006494:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	f023 020c 	bic.w	r2, r3, #12
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	4917      	ldr	r1, [pc, #92]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80064a8:	4b15      	ldr	r3, [pc, #84]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	f023 0202 	bic.w	r2, r3, #2
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b4:	4912      	ldr	r1, [pc, #72]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064ba:	4b11      	ldr	r3, [pc, #68]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	4a10      	ldr	r2, [pc, #64]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c6:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064d2:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80064de:	4b08      	ldr	r3, [pc, #32]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	4a07      	ldr	r2, [pc, #28]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a04      	ldr	r2, [pc, #16]	; (8006500 <HAL_RCC_OscConfig+0x76c>)
 80064f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f6:	f7fe fa05 	bl	8004904 <HAL_GetTick>
 80064fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064fc:	e011      	b.n	8006522 <HAL_RCC_OscConfig+0x78e>
 80064fe:	bf00      	nop
 8006500:	58024400 	.word	0x58024400
 8006504:	58024800 	.word	0x58024800
 8006508:	fffffc0c 	.word	0xfffffc0c
 800650c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006510:	f7fe f9f8 	bl	8004904 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e05f      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006522:	4b32      	ldr	r3, [pc, #200]	; (80065ec <HAL_RCC_OscConfig+0x858>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0x77c>
 800652e:	e057      	b.n	80065e0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006530:	4b2e      	ldr	r3, [pc, #184]	; (80065ec <HAL_RCC_OscConfig+0x858>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <HAL_RCC_OscConfig+0x858>)
 8006536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800653a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fe f9e2 	bl	8004904 <HAL_GetTick>
 8006540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006544:	f7fe f9de 	bl	8004904 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e045      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006556:	4b25      	ldr	r3, [pc, #148]	; (80065ec <HAL_RCC_OscConfig+0x858>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0x7b0>
 8006562:	e03d      	b.n	80065e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006564:	4b21      	ldr	r3, [pc, #132]	; (80065ec <HAL_RCC_OscConfig+0x858>)
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800656a:	4b20      	ldr	r3, [pc, #128]	; (80065ec <HAL_RCC_OscConfig+0x858>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	2b01      	cmp	r3, #1
 8006576:	d031      	beq.n	80065dc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f003 0203 	and.w	r2, r3, #3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006582:	429a      	cmp	r2, r3
 8006584:	d12a      	bne.n	80065dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	091b      	lsrs	r3, r3, #4
 800658a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006592:	429a      	cmp	r2, r3
 8006594:	d122      	bne.n	80065dc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d11a      	bne.n	80065dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	0a5b      	lsrs	r3, r3, #9
 80065aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d111      	bne.n	80065dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d108      	bne.n	80065dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	0e1b      	lsrs	r3, r3, #24
 80065ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065d8:	429a      	cmp	r2, r3
 80065da:	d001      	beq.n	80065e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3730      	adds	r7, #48	; 0x30
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	58024400 	.word	0x58024400

080065f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e19c      	b.n	800693e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006604:	4b8a      	ldr	r3, [pc, #552]	; (8006830 <HAL_RCC_ClockConfig+0x240>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d910      	bls.n	8006634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	4b87      	ldr	r3, [pc, #540]	; (8006830 <HAL_RCC_ClockConfig+0x240>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f023 020f 	bic.w	r2, r3, #15
 800661a:	4985      	ldr	r1, [pc, #532]	; (8006830 <HAL_RCC_ClockConfig+0x240>)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	4313      	orrs	r3, r2
 8006620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006622:	4b83      	ldr	r3, [pc, #524]	; (8006830 <HAL_RCC_ClockConfig+0x240>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d001      	beq.n	8006634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e184      	b.n	800693e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d010      	beq.n	8006662 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	4b7b      	ldr	r3, [pc, #492]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800664c:	429a      	cmp	r2, r3
 800664e:	d908      	bls.n	8006662 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006650:	4b78      	ldr	r3, [pc, #480]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	4975      	ldr	r1, [pc, #468]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 800665e:	4313      	orrs	r3, r2
 8006660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d010      	beq.n	8006690 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	4b70      	ldr	r3, [pc, #448]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800667a:	429a      	cmp	r2, r3
 800667c:	d908      	bls.n	8006690 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800667e:	4b6d      	ldr	r3, [pc, #436]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	496a      	ldr	r1, [pc, #424]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 800668c:	4313      	orrs	r3, r2
 800668e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	4b64      	ldr	r3, [pc, #400]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d908      	bls.n	80066be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066ac:	4b61      	ldr	r3, [pc, #388]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	495e      	ldr	r1, [pc, #376]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d010      	beq.n	80066ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69da      	ldr	r2, [r3, #28]
 80066ce:	4b59      	ldr	r3, [pc, #356]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d908      	bls.n	80066ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80066da:	4b56      	ldr	r3, [pc, #344]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	4953      	ldr	r1, [pc, #332]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	4b4d      	ldr	r3, [pc, #308]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	429a      	cmp	r2, r3
 8006706:	d908      	bls.n	800671a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b4a      	ldr	r3, [pc, #296]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f023 020f 	bic.w	r2, r3, #15
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4947      	ldr	r1, [pc, #284]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006716:	4313      	orrs	r3, r2
 8006718:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d055      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006726:	4b43      	ldr	r3, [pc, #268]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	4940      	ldr	r1, [pc, #256]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006734:	4313      	orrs	r3, r2
 8006736:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d107      	bne.n	8006750 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006740:	4b3c      	ldr	r3, [pc, #240]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d121      	bne.n	8006790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e0f6      	b.n	800693e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b03      	cmp	r3, #3
 8006756:	d107      	bne.n	8006768 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006758:	4b36      	ldr	r3, [pc, #216]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d115      	bne.n	8006790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0ea      	b.n	800693e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d107      	bne.n	8006780 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006770:	4b30      	ldr	r3, [pc, #192]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0de      	b.n	800693e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006780:	4b2c      	ldr	r3, [pc, #176]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0d6      	b.n	800693e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006790:	4b28      	ldr	r3, [pc, #160]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f023 0207 	bic.w	r2, r3, #7
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	4925      	ldr	r1, [pc, #148]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a2:	f7fe f8af 	bl	8004904 <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a8:	e00a      	b.n	80067c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067aa:	f7fe f8ab 	bl	8004904 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e0be      	b.n	800693e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c0:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d1eb      	bne.n	80067aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d208      	bcs.n	8006800 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ee:	4b11      	ldr	r3, [pc, #68]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f023 020f 	bic.w	r2, r3, #15
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	490e      	ldr	r1, [pc, #56]	; (8006834 <HAL_RCC_ClockConfig+0x244>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_RCC_ClockConfig+0x240>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d214      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b08      	ldr	r3, [pc, #32]	; (8006830 <HAL_RCC_ClockConfig+0x240>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 020f 	bic.w	r2, r3, #15
 8006816:	4906      	ldr	r1, [pc, #24]	; (8006830 <HAL_RCC_ClockConfig+0x240>)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800681e:	4b04      	ldr	r3, [pc, #16]	; (8006830 <HAL_RCC_ClockConfig+0x240>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d005      	beq.n	8006838 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e086      	b.n	800693e <HAL_RCC_ClockConfig+0x34e>
 8006830:	52002000 	.word	0x52002000
 8006834:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d010      	beq.n	8006866 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	4b3f      	ldr	r3, [pc, #252]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006850:	429a      	cmp	r2, r3
 8006852:	d208      	bcs.n	8006866 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006854:	4b3c      	ldr	r3, [pc, #240]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	4939      	ldr	r1, [pc, #228]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 8006862:	4313      	orrs	r3, r2
 8006864:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d010      	beq.n	8006894 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	4b34      	ldr	r3, [pc, #208]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800687e:	429a      	cmp	r2, r3
 8006880:	d208      	bcs.n	8006894 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006882:	4b31      	ldr	r3, [pc, #196]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	492e      	ldr	r1, [pc, #184]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 8006890:	4313      	orrs	r3, r2
 8006892:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	d010      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	4b28      	ldr	r3, [pc, #160]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d208      	bcs.n	80068c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068b0:	4b25      	ldr	r3, [pc, #148]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	4922      	ldr	r1, [pc, #136]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d010      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69da      	ldr	r2, [r3, #28]
 80068d2:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068da:	429a      	cmp	r2, r3
 80068dc:	d208      	bcs.n	80068f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068de:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	4917      	ldr	r1, [pc, #92]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068f0:	f000 f834 	bl	800695c <HAL_RCC_GetSysClockFreq>
 80068f4:	4602      	mov	r2, r0
 80068f6:	4b14      	ldr	r3, [pc, #80]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	4912      	ldr	r1, [pc, #72]	; (800694c <HAL_RCC_ClockConfig+0x35c>)
 8006902:	5ccb      	ldrb	r3, [r1, r3]
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
 800690c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800690e:	4b0e      	ldr	r3, [pc, #56]	; (8006948 <HAL_RCC_ClockConfig+0x358>)
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	4a0d      	ldr	r2, [pc, #52]	; (800694c <HAL_RCC_ClockConfig+0x35c>)
 8006918:	5cd3      	ldrb	r3, [r2, r3]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <HAL_RCC_ClockConfig+0x360>)
 8006926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006928:	4a0a      	ldr	r2, [pc, #40]	; (8006954 <HAL_RCC_ClockConfig+0x364>)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800692e:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <HAL_RCC_ClockConfig+0x368>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7fd fe38 	bl	80045a8 <HAL_InitTick>
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	58024400 	.word	0x58024400
 800694c:	08008b40 	.word	0x08008b40
 8006950:	24000014 	.word	0x24000014
 8006954:	24000010 	.word	0x24000010
 8006958:	24000018 	.word	0x24000018

0800695c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800695c:	b480      	push	{r7}
 800695e:	b089      	sub	sp, #36	; 0x24
 8006960:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006962:	4bb3      	ldr	r3, [pc, #716]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800696a:	2b18      	cmp	r3, #24
 800696c:	f200 8155 	bhi.w	8006c1a <HAL_RCC_GetSysClockFreq+0x2be>
 8006970:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	080069dd 	.word	0x080069dd
 800697c:	08006c1b 	.word	0x08006c1b
 8006980:	08006c1b 	.word	0x08006c1b
 8006984:	08006c1b 	.word	0x08006c1b
 8006988:	08006c1b 	.word	0x08006c1b
 800698c:	08006c1b 	.word	0x08006c1b
 8006990:	08006c1b 	.word	0x08006c1b
 8006994:	08006c1b 	.word	0x08006c1b
 8006998:	08006a03 	.word	0x08006a03
 800699c:	08006c1b 	.word	0x08006c1b
 80069a0:	08006c1b 	.word	0x08006c1b
 80069a4:	08006c1b 	.word	0x08006c1b
 80069a8:	08006c1b 	.word	0x08006c1b
 80069ac:	08006c1b 	.word	0x08006c1b
 80069b0:	08006c1b 	.word	0x08006c1b
 80069b4:	08006c1b 	.word	0x08006c1b
 80069b8:	08006a09 	.word	0x08006a09
 80069bc:	08006c1b 	.word	0x08006c1b
 80069c0:	08006c1b 	.word	0x08006c1b
 80069c4:	08006c1b 	.word	0x08006c1b
 80069c8:	08006c1b 	.word	0x08006c1b
 80069cc:	08006c1b 	.word	0x08006c1b
 80069d0:	08006c1b 	.word	0x08006c1b
 80069d4:	08006c1b 	.word	0x08006c1b
 80069d8:	08006a0f 	.word	0x08006a0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069dc:	4b94      	ldr	r3, [pc, #592]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069e8:	4b91      	ldr	r3, [pc, #580]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	08db      	lsrs	r3, r3, #3
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	4a90      	ldr	r2, [pc, #576]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
 80069f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80069fa:	e111      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069fc:	4b8d      	ldr	r3, [pc, #564]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069fe:	61bb      	str	r3, [r7, #24]
    break;
 8006a00:	e10e      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a02:	4b8d      	ldr	r3, [pc, #564]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a04:	61bb      	str	r3, [r7, #24]
    break;
 8006a06:	e10b      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006a08:	4b8c      	ldr	r3, [pc, #560]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a0a:	61bb      	str	r3, [r7, #24]
    break;
 8006a0c:	e108      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a0e:	4b88      	ldr	r3, [pc, #544]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a18:	4b85      	ldr	r3, [pc, #532]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	091b      	lsrs	r3, r3, #4
 8006a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a24:	4b82      	ldr	r3, [pc, #520]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a2e:	4b80      	ldr	r3, [pc, #512]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a32:	08db      	lsrs	r3, r3, #3
 8006a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80e1 	beq.w	8006c14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	f000 8083 	beq.w	8006b60 <HAL_RCC_GetSysClockFreq+0x204>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f200 80a1 	bhi.w	8006ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <HAL_RCC_GetSysClockFreq+0x114>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d056      	beq.n	8006b1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a6e:	e099      	b.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a70:	4b6f      	ldr	r3, [pc, #444]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02d      	beq.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a7c:	4b6c      	ldr	r3, [pc, #432]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	08db      	lsrs	r3, r3, #3
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	4a6b      	ldr	r2, [pc, #428]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa6:	4b62      	ldr	r3, [pc, #392]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006ad6:	e087      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006c44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aea:	4b51      	ldr	r3, [pc, #324]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006afe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b1a:	e065      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b5e:	e043      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006c4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b2f      	ldr	r3, [pc, #188]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ba2:	e021      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006be8:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	0a5b      	lsrs	r3, r3, #9
 8006bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0c:	ee17 3a90 	vmov	r3, s15
 8006c10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c12:	e005      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61bb      	str	r3, [r7, #24]
    break;
 8006c18:	e002      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c1c:	61bb      	str	r3, [r7, #24]
    break;
 8006c1e:	bf00      	nop
  }

  return sysclockfreq;
 8006c20:	69bb      	ldr	r3, [r7, #24]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3724      	adds	r7, #36	; 0x24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	58024400 	.word	0x58024400
 8006c34:	03d09000 	.word	0x03d09000
 8006c38:	003d0900 	.word	0x003d0900
 8006c3c:	007a1200 	.word	0x007a1200
 8006c40:	46000000 	.word	0x46000000
 8006c44:	4c742400 	.word	0x4c742400
 8006c48:	4a742400 	.word	0x4a742400
 8006c4c:	4af42400 	.word	0x4af42400

08006c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c56:	f7ff fe81 	bl	800695c <HAL_RCC_GetSysClockFreq>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	490f      	ldr	r1, [pc, #60]	; (8006ca4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c68:	5ccb      	ldrb	r3, [r1, r3]
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c7e:	5cd3      	ldrb	r3, [r2, r3]
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8a:	4a07      	ldr	r2, [pc, #28]	; (8006ca8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c8e:	4a07      	ldr	r2, [pc, #28]	; (8006cac <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c96:	681b      	ldr	r3, [r3, #0]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	58024400 	.word	0x58024400
 8006ca4:	08008b40 	.word	0x08008b40
 8006ca8:	24000014 	.word	0x24000014
 8006cac:	24000010 	.word	0x24000010

08006cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cb4:	f7ff ffcc 	bl	8006c50 <HAL_RCC_GetHCLKFreq>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	091b      	lsrs	r3, r3, #4
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	4904      	ldr	r1, [pc, #16]	; (8006cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cc6:	5ccb      	ldrb	r3, [r1, r3]
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	08008b40 	.word	0x08008b40

08006cdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	223f      	movs	r2, #63	; 0x3f
 8006cea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006cec:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <HAL_RCC_GetClockConfig+0x7c>)
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f003 0207 	and.w	r2, r3, #7
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006cf8:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <HAL_RCC_GetClockConfig+0x7c>)
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006d04:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <HAL_RCC_GetClockConfig+0x7c>)
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f003 020f 	and.w	r2, r3, #15
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006d10:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <HAL_RCC_GetClockConfig+0x7c>)
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <HAL_RCC_GetClockConfig+0x7c>)
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006d28:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <HAL_RCC_GetClockConfig+0x7c>)
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <HAL_RCC_GetClockConfig+0x7c>)
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <HAL_RCC_GetClockConfig+0x80>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 020f 	and.w	r2, r3, #15
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	601a      	str	r2, [r3, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	52002000 	.word	0x52002000

08006d60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d68:	2300      	movs	r3, #0
 8006d6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d03f      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d84:	d02a      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006d86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d8a:	d824      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d90:	d018      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d96:	d81e      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da0:	d007      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006da2:	e018      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da4:	4ba3      	ldr	r3, [pc, #652]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	4aa2      	ldr	r2, [pc, #648]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006db0:	e015      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3304      	adds	r3, #4
 8006db6:	2102      	movs	r1, #2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 ff17 	bl	8007bec <RCCEx_PLL2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006dc2:	e00c      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3324      	adds	r3, #36	; 0x24
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 ffc0 	bl	8007d50 <RCCEx_PLL3_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006dd4:	e003      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dda:	e000      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006de4:	4b93      	ldr	r3, [pc, #588]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df0:	4990      	ldr	r1, [pc, #576]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	650b      	str	r3, [r1, #80]	; 0x50
 8006df6:	e001      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d03d      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d826      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e2d 	.word	0x08006e2d
 8006e1c:	08006e3b 	.word	0x08006e3b
 8006e20:	08006e4d 	.word	0x08006e4d
 8006e24:	08006e65 	.word	0x08006e65
 8006e28:	08006e65 	.word	0x08006e65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e2c:	4b81      	ldr	r3, [pc, #516]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	4a80      	ldr	r2, [pc, #512]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e38:	e015      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fed3 	bl	8007bec <RCCEx_PLL2_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e4a:	e00c      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3324      	adds	r3, #36	; 0x24
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 ff7c 	bl	8007d50 <RCCEx_PLL3_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e5c:	e003      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
      break;
 8006e62:	e000      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d109      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e6c:	4b71      	ldr	r3, [pc, #452]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e70:	f023 0207 	bic.w	r2, r3, #7
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e78:	496e      	ldr	r1, [pc, #440]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8006e7e:	e001      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d042      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e98:	d02b      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9e:	d825      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ea0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ea2:	d028      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ea4:	2bc0      	cmp	r3, #192	; 0xc0
 8006ea6:	d821      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ea8:	2b80      	cmp	r3, #128	; 0x80
 8006eaa:	d016      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006eac:	2b80      	cmp	r3, #128	; 0x80
 8006eae:	d81d      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006eb4:	2b40      	cmp	r3, #64	; 0x40
 8006eb6:	d007      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006eb8:	e018      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eba:	4b5e      	ldr	r3, [pc, #376]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	4a5d      	ldr	r2, [pc, #372]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ec6:	e017      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fe8c 	bl	8007bec <RCCEx_PLL2_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ed8:	e00e      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3324      	adds	r3, #36	; 0x24
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 ff35 	bl	8007d50 <RCCEx_PLL3_Config>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006eea:	e005      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef0:	e002      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006efe:	4b4d      	ldr	r3, [pc, #308]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	494a      	ldr	r1, [pc, #296]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	650b      	str	r3, [r1, #80]	; 0x50
 8006f10:	e001      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d049      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f2c:	d030      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006f2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f32:	d82a      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f38:	d02c      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f3e:	d824      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f44:	d018      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f4a:	d81e      	bhi.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f54:	d007      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006f56:	e018      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f58:	4b36      	ldr	r3, [pc, #216]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	4a35      	ldr	r2, [pc, #212]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f64:	e017      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fe3d 	bl	8007bec <RCCEx_PLL2_Config>
 8006f72:	4603      	mov	r3, r0
 8006f74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f76:	e00e      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3324      	adds	r3, #36	; 0x24
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fee6 	bl	8007d50 <RCCEx_PLL3_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f88:	e005      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8e:	e002      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f90:	bf00      	nop
 8006f92:	e000      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f9c:	4b25      	ldr	r3, [pc, #148]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006faa:	4922      	ldr	r1, [pc, #136]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	658b      	str	r3, [r1, #88]	; 0x58
 8006fb0:	e001      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d04b      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fcc:	d030      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fd2:	d82a      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fd8:	d02e      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fde:	d824      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fe4:	d018      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fea:	d81e      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ff4:	d007      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006ff6:	e018      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007004:	e019      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3304      	adds	r3, #4
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fded 	bl	8007bec <RCCEx_PLL2_Config>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007016:	e010      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3324      	adds	r3, #36	; 0x24
 800701c:	2100      	movs	r1, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fe96 	bl	8007d50 <RCCEx_PLL3_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007028:	e007      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	75fb      	strb	r3, [r7, #23]
      break;
 800702e:	e004      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007030:	bf00      	nop
 8007032:	e002      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007034:	58024400 	.word	0x58024400
      break;
 8007038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007040:	4b99      	ldr	r3, [pc, #612]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007044:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800704e:	4996      	ldr	r1, [pc, #600]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007050:	4313      	orrs	r3, r2
 8007052:	658b      	str	r3, [r1, #88]	; 0x58
 8007054:	e001      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d032      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706a:	2b30      	cmp	r3, #48	; 0x30
 800706c:	d01c      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800706e:	2b30      	cmp	r3, #48	; 0x30
 8007070:	d817      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007072:	2b20      	cmp	r3, #32
 8007074:	d00c      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d813      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d016      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800707e:	2b10      	cmp	r3, #16
 8007080:	d10f      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007082:	4b89      	ldr	r3, [pc, #548]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	4a88      	ldr	r2, [pc, #544]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800708c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800708e:	e00e      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3304      	adds	r3, #4
 8007094:	2102      	movs	r1, #2
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fda8 	bl	8007bec <RCCEx_PLL2_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80070a0:	e005      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	75fb      	strb	r3, [r7, #23]
      break;
 80070a6:	e002      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80070a8:	bf00      	nop
 80070aa:	e000      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80070ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d109      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070b4:	4b7c      	ldr	r3, [pc, #496]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c0:	4979      	ldr	r1, [pc, #484]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070c6:	e001      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d047      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e0:	d030      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80070e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e6:	d82a      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80070e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ec:	d02c      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80070ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070f2:	d824      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80070f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f8:	d018      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80070fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fe:	d81e      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007108:	d007      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800710a:	e018      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710c:	4b66      	ldr	r3, [pc, #408]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	4a65      	ldr	r2, [pc, #404]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007118:	e017      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3304      	adds	r3, #4
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fd63 	bl	8007bec <RCCEx_PLL2_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800712a:	e00e      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3324      	adds	r3, #36	; 0x24
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fe0c 	bl	8007d50 <RCCEx_PLL3_Config>
 8007138:	4603      	mov	r3, r0
 800713a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800713c:	e005      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	75fb      	strb	r3, [r7, #23]
      break;
 8007142:	e002      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007150:	4b55      	ldr	r3, [pc, #340]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007154:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715c:	4952      	ldr	r1, [pc, #328]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800715e:	4313      	orrs	r3, r2
 8007160:	650b      	str	r3, [r1, #80]	; 0x50
 8007162:	e001      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d049      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800717c:	d02e      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800717e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007182:	d828      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007184:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007188:	d02a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800718a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800718e:	d822      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007190:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007194:	d026      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800719a:	d81c      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800719c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a0:	d010      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80071a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a6:	d816      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01d      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b0:	d111      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	2101      	movs	r1, #1
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fd17 	bl	8007bec <RCCEx_PLL2_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071c2:	e012      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3324      	adds	r3, #36	; 0x24
 80071c8:	2101      	movs	r1, #1
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fdc0 	bl	8007d50 <RCCEx_PLL3_Config>
 80071d0:	4603      	mov	r3, r0
 80071d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071d4:	e009      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
      break;
 80071da:	e006      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071dc:	bf00      	nop
 80071de:	e004      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d109      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071f0:	4b2d      	ldr	r3, [pc, #180]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fc:	492a      	ldr	r1, [pc, #168]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	650b      	str	r3, [r1, #80]	; 0x50
 8007202:	e001      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d04d      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800721a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800721e:	d02e      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007224:	d828      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800722a:	d02a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d822      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007232:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007236:	d026      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007238:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800723c:	d81c      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800723e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007242:	d010      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007248:	d816      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01d      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800724e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007252:	d111      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3304      	adds	r3, #4
 8007258:	2101      	movs	r1, #1
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fcc6 	bl	8007bec <RCCEx_PLL2_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007264:	e012      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3324      	adds	r3, #36	; 0x24
 800726a:	2101      	movs	r1, #1
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fd6f 	bl	8007d50 <RCCEx_PLL3_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007276:	e009      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75fb      	strb	r3, [r7, #23]
      break;
 800727c:	e006      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800727e:	bf00      	nop
 8007280:	e004      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007282:	bf00      	nop
 8007284:	e002      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800728a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007296:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072a0:	4901      	ldr	r1, [pc, #4]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	658b      	str	r3, [r1, #88]	; 0x58
 80072a6:	e003      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80072a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d02f      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c4:	d00e      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80072c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ca:	d814      	bhi.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80072d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072d4:	d10f      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d6:	4baf      	ldr	r3, [pc, #700]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	4aae      	ldr	r2, [pc, #696]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072e2:	e00c      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fc7e 	bl	8007bec <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072f4:	e003      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
      break;
 80072fa:	e000      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80072fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d109      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007304:	4ba3      	ldr	r3, [pc, #652]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007308:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007310:	49a0      	ldr	r1, [pc, #640]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007312:	4313      	orrs	r3, r2
 8007314:	650b      	str	r3, [r1, #80]	; 0x50
 8007316:	e001      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d032      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732c:	2b03      	cmp	r3, #3
 800732e:	d81b      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007330:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	0800736f 	.word	0x0800736f
 800733c:	08007349 	.word	0x08007349
 8007340:	08007357 	.word	0x08007357
 8007344:	0800736f 	.word	0x0800736f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007348:	4b92      	ldr	r3, [pc, #584]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	4a91      	ldr	r2, [pc, #580]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800734e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007354:	e00c      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	2102      	movs	r1, #2
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fc45 	bl	8007bec <RCCEx_PLL2_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007366:	e003      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
      break;
 800736c:	e000      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800736e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007376:	4b87      	ldr	r3, [pc, #540]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737a:	f023 0203 	bic.w	r2, r3, #3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	4984      	ldr	r1, [pc, #528]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007384:	4313      	orrs	r3, r2
 8007386:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007388:	e001      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8086 	beq.w	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800739c:	4b7e      	ldr	r3, [pc, #504]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a7d      	ldr	r2, [pc, #500]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80073a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073a8:	f7fd faac 	bl	8004904 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ae:	e009      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b0:	f7fd faa8 	bl	8004904 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b64      	cmp	r3, #100	; 0x64
 80073bc:	d902      	bls.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	75fb      	strb	r3, [r7, #23]
        break;
 80073c2:	e005      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073c4:	4b74      	ldr	r3, [pc, #464]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0ef      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d166      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80073d6:	4b6f      	ldr	r3, [pc, #444]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073e0:	4053      	eors	r3, r2
 80073e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d013      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073ea:	4b6a      	ldr	r3, [pc, #424]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073f4:	4b67      	ldr	r3, [pc, #412]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f8:	4a66      	ldr	r2, [pc, #408]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007400:	4b64      	ldr	r3, [pc, #400]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	4a63      	ldr	r2, [pc, #396]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800740a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800740c:	4a61      	ldr	r2, [pc, #388]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741c:	d115      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741e:	f7fd fa71 	bl	8004904 <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007424:	e00b      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007426:	f7fd fa6d 	bl	8004904 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	f241 3288 	movw	r2, #5000	; 0x1388
 8007434:	4293      	cmp	r3, r2
 8007436:	d902      	bls.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	75fb      	strb	r3, [r7, #23]
            break;
 800743c:	e005      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800743e:	4b55      	ldr	r3, [pc, #340]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0ed      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d126      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745e:	d10d      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007460:	4b4c      	ldr	r3, [pc, #304]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800746e:	0919      	lsrs	r1, r3, #4
 8007470:	4b4a      	ldr	r3, [pc, #296]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007472:	400b      	ands	r3, r1
 8007474:	4947      	ldr	r1, [pc, #284]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007476:	4313      	orrs	r3, r2
 8007478:	610b      	str	r3, [r1, #16]
 800747a:	e005      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800747c:	4b45      	ldr	r3, [pc, #276]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	4a44      	ldr	r2, [pc, #272]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007482:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007486:	6113      	str	r3, [r2, #16]
 8007488:	4b42      	ldr	r3, [pc, #264]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800748a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007496:	493f      	ldr	r1, [pc, #252]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007498:	4313      	orrs	r3, r2
 800749a:	670b      	str	r3, [r1, #112]	; 0x70
 800749c:	e004      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	75bb      	strb	r3, [r7, #22]
 80074a2:	e001      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8085 	beq.w	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ba:	2b28      	cmp	r3, #40	; 0x28
 80074bc:	d866      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080075a1 	.word	0x080075a1
 80074c8:	0800758d 	.word	0x0800758d
 80074cc:	0800758d 	.word	0x0800758d
 80074d0:	0800758d 	.word	0x0800758d
 80074d4:	0800758d 	.word	0x0800758d
 80074d8:	0800758d 	.word	0x0800758d
 80074dc:	0800758d 	.word	0x0800758d
 80074e0:	0800758d 	.word	0x0800758d
 80074e4:	08007569 	.word	0x08007569
 80074e8:	0800758d 	.word	0x0800758d
 80074ec:	0800758d 	.word	0x0800758d
 80074f0:	0800758d 	.word	0x0800758d
 80074f4:	0800758d 	.word	0x0800758d
 80074f8:	0800758d 	.word	0x0800758d
 80074fc:	0800758d 	.word	0x0800758d
 8007500:	0800758d 	.word	0x0800758d
 8007504:	0800757b 	.word	0x0800757b
 8007508:	0800758d 	.word	0x0800758d
 800750c:	0800758d 	.word	0x0800758d
 8007510:	0800758d 	.word	0x0800758d
 8007514:	0800758d 	.word	0x0800758d
 8007518:	0800758d 	.word	0x0800758d
 800751c:	0800758d 	.word	0x0800758d
 8007520:	0800758d 	.word	0x0800758d
 8007524:	080075a1 	.word	0x080075a1
 8007528:	0800758d 	.word	0x0800758d
 800752c:	0800758d 	.word	0x0800758d
 8007530:	0800758d 	.word	0x0800758d
 8007534:	0800758d 	.word	0x0800758d
 8007538:	0800758d 	.word	0x0800758d
 800753c:	0800758d 	.word	0x0800758d
 8007540:	0800758d 	.word	0x0800758d
 8007544:	080075a1 	.word	0x080075a1
 8007548:	0800758d 	.word	0x0800758d
 800754c:	0800758d 	.word	0x0800758d
 8007550:	0800758d 	.word	0x0800758d
 8007554:	0800758d 	.word	0x0800758d
 8007558:	0800758d 	.word	0x0800758d
 800755c:	0800758d 	.word	0x0800758d
 8007560:	0800758d 	.word	0x0800758d
 8007564:	080075a1 	.word	0x080075a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	2101      	movs	r1, #1
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fb3c 	bl	8007bec <RCCEx_PLL2_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007578:	e013      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3324      	adds	r3, #36	; 0x24
 800757e:	2101      	movs	r1, #1
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fbe5 	bl	8007d50 <RCCEx_PLL3_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800758a:	e00a      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
      break;
 8007590:	e007      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400
 8007598:	58024800 	.word	0x58024800
 800759c:	00ffffcf 	.word	0x00ffffcf
      break;
 80075a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d109      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80075a8:	4b96      	ldr	r3, [pc, #600]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80075aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b4:	4993      	ldr	r1, [pc, #588]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	654b      	str	r3, [r1, #84]	; 0x54
 80075ba:	e001      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d038      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d0:	2b05      	cmp	r3, #5
 80075d2:	d821      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	0800761f 	.word	0x0800761f
 80075e0:	080075f5 	.word	0x080075f5
 80075e4:	08007607 	.word	0x08007607
 80075e8:	0800761f 	.word	0x0800761f
 80075ec:	0800761f 	.word	0x0800761f
 80075f0:	0800761f 	.word	0x0800761f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	2101      	movs	r1, #1
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 faf6 	bl	8007bec <RCCEx_PLL2_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007604:	e00c      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3324      	adds	r3, #36	; 0x24
 800760a:	2101      	movs	r1, #1
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fb9f 	bl	8007d50 <RCCEx_PLL3_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007616:	e003      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	75fb      	strb	r3, [r7, #23]
      break;
 800761c:	e000      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800761e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007626:	4b77      	ldr	r3, [pc, #476]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762a:	f023 0207 	bic.w	r2, r3, #7
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007632:	4974      	ldr	r1, [pc, #464]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007634:	4313      	orrs	r3, r2
 8007636:	654b      	str	r3, [r1, #84]	; 0x54
 8007638:	e001      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	d03a      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007650:	2b05      	cmp	r3, #5
 8007652:	d821      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007654:	a201      	add	r2, pc, #4	; (adr r2, 800765c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	0800769f 	.word	0x0800769f
 8007660:	08007675 	.word	0x08007675
 8007664:	08007687 	.word	0x08007687
 8007668:	0800769f 	.word	0x0800769f
 800766c:	0800769f 	.word	0x0800769f
 8007670:	0800769f 	.word	0x0800769f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	2101      	movs	r1, #1
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fab6 	bl	8007bec <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007684:	e00c      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3324      	adds	r3, #36	; 0x24
 800768a:	2101      	movs	r1, #1
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fb5f 	bl	8007d50 <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007696:	e003      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
      break;
 800769c:	e000      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800769e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076a6:	4b57      	ldr	r3, [pc, #348]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	f023 0207 	bic.w	r2, r3, #7
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	4953      	ldr	r1, [pc, #332]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	658b      	str	r3, [r1, #88]	; 0x58
 80076ba:	e001      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d04b      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076d6:	d02e      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80076d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076dc:	d828      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d02a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80076e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e8:	d822      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076ee:	d026      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80076f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076f4:	d81c      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fa:	d010      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80076fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007700:	d816      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01d      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800770a:	d111      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3304      	adds	r3, #4
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fa6a 	bl	8007bec <RCCEx_PLL2_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800771c:	e012      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3324      	adds	r3, #36	; 0x24
 8007722:	2102      	movs	r1, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fb13 	bl	8007d50 <RCCEx_PLL3_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800772e:	e009      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	75fb      	strb	r3, [r7, #23]
      break;
 8007734:	e006      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007758:	492a      	ldr	r1, [pc, #168]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800775a:	4313      	orrs	r3, r2
 800775c:	654b      	str	r3, [r1, #84]	; 0x54
 800775e:	e001      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d04d      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007776:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800777a:	d02e      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800777c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007780:	d828      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d02a      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778c:	d822      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800778e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007792:	d026      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007798:	d81c      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800779a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779e:	d010      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80077a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a4:	d816      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01d      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80077aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ae:	d111      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3304      	adds	r3, #4
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 fa18 	bl	8007bec <RCCEx_PLL2_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077c0:	e012      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3324      	adds	r3, #36	; 0x24
 80077c6:	2102      	movs	r1, #2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fac1 	bl	8007d50 <RCCEx_PLL3_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077d2:	e009      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
      break;
 80077d8:	e006      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077da:	bf00      	nop
 80077dc:	e004      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077de:	bf00      	nop
 80077e0:	e002      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077e2:	bf00      	nop
 80077e4:	e000      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10c      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077ee:	4b05      	ldr	r3, [pc, #20]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077fc:	4901      	ldr	r1, [pc, #4]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	658b      	str	r3, [r1, #88]	; 0x58
 8007802:	e003      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b00      	cmp	r3, #0
 8007816:	d04b      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800781e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007822:	d02e      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007824:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007828:	d828      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800782a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782e:	d02a      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007834:	d822      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007836:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800783a:	d026      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800783c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007840:	d81c      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007846:	d010      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800784c:	d816      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01d      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007856:	d111      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3304      	adds	r3, #4
 800785c:	2100      	movs	r1, #0
 800785e:	4618      	mov	r0, r3
 8007860:	f000 f9c4 	bl	8007bec <RCCEx_PLL2_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007868:	e012      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3324      	adds	r3, #36	; 0x24
 800786e:	2102      	movs	r1, #2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fa6d 	bl	8007d50 <RCCEx_PLL3_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800787a:	e009      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
      break;
 8007880:	e006      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007882:	bf00      	nop
 8007884:	e004      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007886:	bf00      	nop
 8007888:	e002      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800788e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007896:	4b9d      	ldr	r3, [pc, #628]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078a4:	4999      	ldr	r1, [pc, #612]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	658b      	str	r3, [r1, #88]	; 0x58
 80078aa:	e001      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01a      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c6:	d10a      	bne.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	2102      	movs	r1, #2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fa3e 	bl	8007d50 <RCCEx_PLL3_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078de:	4b8b      	ldr	r3, [pc, #556]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ec:	4987      	ldr	r1, [pc, #540]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01a      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007908:	d10a      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3324      	adds	r3, #36	; 0x24
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fa1d 	bl	8007d50 <RCCEx_PLL3_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007920:	4b7a      	ldr	r3, [pc, #488]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800792e:	4977      	ldr	r1, [pc, #476]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007930:	4313      	orrs	r3, r2
 8007932:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d034      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800794a:	d01d      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800794c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007950:	d817      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800795a:	d009      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800795c:	e011      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3304      	adds	r3, #4
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f941 	bl	8007bec <RCCEx_PLL2_Config>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800796e:	e00c      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3324      	adds	r3, #36	; 0x24
 8007974:	2102      	movs	r1, #2
 8007976:	4618      	mov	r0, r3
 8007978:	f000 f9ea 	bl	8007d50 <RCCEx_PLL3_Config>
 800797c:	4603      	mov	r3, r0
 800797e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007980:	e003      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	75fb      	strb	r3, [r7, #23]
      break;
 8007986:	e000      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007990:	4b5e      	ldr	r3, [pc, #376]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800799e:	495b      	ldr	r1, [pc, #364]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	658b      	str	r3, [r1, #88]	; 0x58
 80079a4:	e001      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d033      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079c0:	d01c      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80079c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079c6:	d816      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80079c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079cc:	d003      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80079ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079d2:	d007      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80079d4:	e00f      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d6:	4b4d      	ldr	r3, [pc, #308]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	4a4c      	ldr	r2, [pc, #304]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80079e2:	e00c      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3324      	adds	r3, #36	; 0x24
 80079e8:	2101      	movs	r1, #1
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 f9b0 	bl	8007d50 <RCCEx_PLL3_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80079f4:	e003      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
      break;
 80079fa:	e000      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80079fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a04:	4b41      	ldr	r3, [pc, #260]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a12:	493e      	ldr	r1, [pc, #248]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	654b      	str	r3, [r1, #84]	; 0x54
 8007a18:	e001      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d029      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a36:	d007      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007a38:	e00f      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a3a:	4b34      	ldr	r3, [pc, #208]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	4a33      	ldr	r2, [pc, #204]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a46:	e00b      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	2102      	movs	r1, #2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f8cc 	bl	8007bec <RCCEx_PLL2_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a58:	e002      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a66:	4b29      	ldr	r3, [pc, #164]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a72:	4926      	ldr	r1, [pc, #152]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a78:	e001      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3324      	adds	r3, #36	; 0x24
 8007a8e:	2102      	movs	r1, #2
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f95d 	bl	8007d50 <RCCEx_PLL3_Config>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d033      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab4:	d017      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aba:	d811      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac0:	d013      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac6:	d80b      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad0:	d106      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad2:	4b0e      	ldr	r3, [pc, #56]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	4a0d      	ldr	r2, [pc, #52]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007ade:	e007      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae4:	e004      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007ae6:	bf00      	nop
 8007ae8:	e002      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007aea:	bf00      	nop
 8007aec:	e000      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10c      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007af6:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b02:	4902      	ldr	r1, [pc, #8]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	654b      	str	r3, [r1, #84]	; 0x54
 8007b08:	e004      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007b0a:	bf00      	nop
 8007b0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b20:	4b31      	ldr	r3, [pc, #196]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2c:	492e      	ldr	r1, [pc, #184]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b3e:	4b2a      	ldr	r3, [pc, #168]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b4c:	4926      	ldr	r1, [pc, #152]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b5e:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b6a:	491f      	ldr	r1, [pc, #124]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00d      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b86:	6113      	str	r3, [r2, #16]
 8007b88:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b92:	4915      	ldr	r1, [pc, #84]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da08      	bge.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ba0:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bac:	490e      	ldr	r1, [pc, #56]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d009      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bbe:	4b0a      	ldr	r3, [pc, #40]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bcc:	4906      	ldr	r1, [pc, #24]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007bd2:	7dbb      	ldrb	r3, [r7, #22]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e000      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	58024400 	.word	0x58024400

08007bec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bfa:	4b53      	ldr	r3, [pc, #332]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d101      	bne.n	8007c0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e099      	b.n	8007d3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c0a:	4b4f      	ldr	r3, [pc, #316]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a4e      	ldr	r2, [pc, #312]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c16:	f7fc fe75 	bl	8004904 <HAL_GetTick>
 8007c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c1c:	e008      	b.n	8007c30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c1e:	f7fc fe71 	bl	8004904 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e086      	b.n	8007d3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c30:	4b45      	ldr	r3, [pc, #276]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f0      	bne.n	8007c1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c3c:	4b42      	ldr	r3, [pc, #264]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	031b      	lsls	r3, r3, #12
 8007c4a:	493f      	ldr	r1, [pc, #252]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	025b      	lsls	r3, r3, #9
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	431a      	orrs	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	041b      	lsls	r3, r3, #16
 8007c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	061b      	lsls	r3, r3, #24
 8007c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c80:	4931      	ldr	r1, [pc, #196]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c86:	4b30      	ldr	r3, [pc, #192]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	492d      	ldr	r1, [pc, #180]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c98:	4b2b      	ldr	r3, [pc, #172]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	f023 0220 	bic.w	r2, r3, #32
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	4928      	ldr	r1, [pc, #160]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007caa:	4b27      	ldr	r3, [pc, #156]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	4a26      	ldr	r2, [pc, #152]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cb0:	f023 0310 	bic.w	r3, r3, #16
 8007cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cba:	4b24      	ldr	r3, [pc, #144]	; (8007d4c <RCCEx_PLL2_Config+0x160>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	69d2      	ldr	r2, [r2, #28]
 8007cc2:	00d2      	lsls	r2, r2, #3
 8007cc4:	4920      	ldr	r1, [pc, #128]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cca:	4b1f      	ldr	r3, [pc, #124]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	f043 0310 	orr.w	r3, r3, #16
 8007cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d106      	bne.n	8007cea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	4a19      	ldr	r2, [pc, #100]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ce8:	e00f      	b.n	8007d0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d106      	bne.n	8007cfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cf0:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	4a14      	ldr	r2, [pc, #80]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cfc:	e005      	b.n	8007d0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	4a11      	ldr	r2, [pc, #68]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a0e      	ldr	r2, [pc, #56]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d16:	f7fc fdf5 	bl	8004904 <HAL_GetTick>
 8007d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d1c:	e008      	b.n	8007d30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d1e:	f7fc fdf1 	bl	8004904 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d901      	bls.n	8007d30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e006      	b.n	8007d3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d30:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0f0      	beq.n	8007d1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	58024400 	.word	0x58024400
 8007d4c:	ffff0007 	.word	0xffff0007

08007d50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d5e:	4b53      	ldr	r3, [pc, #332]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d101      	bne.n	8007d6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e099      	b.n	8007ea2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d6e:	4b4f      	ldr	r3, [pc, #316]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a4e      	ldr	r2, [pc, #312]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7a:	f7fc fdc3 	bl	8004904 <HAL_GetTick>
 8007d7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d80:	e008      	b.n	8007d94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d82:	f7fc fdbf 	bl	8004904 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e086      	b.n	8007ea2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d94:	4b45      	ldr	r3, [pc, #276]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1f0      	bne.n	8007d82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007da0:	4b42      	ldr	r3, [pc, #264]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	051b      	lsls	r3, r3, #20
 8007dae:	493f      	ldr	r1, [pc, #252]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	628b      	str	r3, [r1, #40]	; 0x28
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	025b      	lsls	r3, r3, #9
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	041b      	lsls	r3, r3, #16
 8007dd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	061b      	lsls	r3, r3, #24
 8007de0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007de4:	4931      	ldr	r1, [pc, #196]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dea:	4b30      	ldr	r3, [pc, #192]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	492d      	ldr	r1, [pc, #180]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007dfc:	4b2b      	ldr	r3, [pc, #172]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	4928      	ldr	r1, [pc, #160]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e0e:	4b27      	ldr	r3, [pc, #156]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	4a26      	ldr	r2, [pc, #152]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e1a:	4b24      	ldr	r3, [pc, #144]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1e:	4b24      	ldr	r3, [pc, #144]	; (8007eb0 <RCCEx_PLL3_Config+0x160>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	69d2      	ldr	r2, [r2, #28]
 8007e26:	00d2      	lsls	r2, r2, #3
 8007e28:	4920      	ldr	r1, [pc, #128]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e2e:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	4a1e      	ldr	r2, [pc, #120]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e40:	4b1a      	ldr	r3, [pc, #104]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	4a19      	ldr	r2, [pc, #100]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e4c:	e00f      	b.n	8007e6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d106      	bne.n	8007e62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e54:	4b15      	ldr	r3, [pc, #84]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	4a14      	ldr	r2, [pc, #80]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e60:	e005      	b.n	8007e6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e62:	4b12      	ldr	r3, [pc, #72]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	4a11      	ldr	r2, [pc, #68]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e6e:	4b0f      	ldr	r3, [pc, #60]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a0e      	ldr	r2, [pc, #56]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7a:	f7fc fd43 	bl	8004904 <HAL_GetTick>
 8007e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e80:	e008      	b.n	8007e94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e82:	f7fc fd3f 	bl	8004904 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d901      	bls.n	8007e94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e006      	b.n	8007ea2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0f0      	beq.n	8007e82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	58024400 	.word	0x58024400
 8007eb0:	ffff0007 	.word	0xffff0007

08007eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e049      	b.n	8007f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f841 	bl	8007f62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f000 fa00 	bl	80082f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
	...

08007f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d001      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e054      	b.n	800803a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a26      	ldr	r2, [pc, #152]	; (8008048 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d022      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fba:	d01d      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a22      	ldr	r2, [pc, #136]	; (800804c <HAL_TIM_Base_Start_IT+0xd4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d018      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a21      	ldr	r2, [pc, #132]	; (8008050 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d013      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a1f      	ldr	r2, [pc, #124]	; (8008054 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00e      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a1e      	ldr	r2, [pc, #120]	; (8008058 <HAL_TIM_Base_Start_IT+0xe0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d009      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1c      	ldr	r2, [pc, #112]	; (800805c <HAL_TIM_Base_Start_IT+0xe4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d004      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d115      	bne.n	8008024 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	4b19      	ldr	r3, [pc, #100]	; (8008064 <HAL_TIM_Base_Start_IT+0xec>)
 8008000:	4013      	ands	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b06      	cmp	r3, #6
 8008008:	d015      	beq.n	8008036 <HAL_TIM_Base_Start_IT+0xbe>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008010:	d011      	beq.n	8008036 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0201 	orr.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008022:	e008      	b.n	8008036 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	e000      	b.n	8008038 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008036:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40010000 	.word	0x40010000
 800804c:	40000400 	.word	0x40000400
 8008050:	40000800 	.word	0x40000800
 8008054:	40000c00 	.word	0x40000c00
 8008058:	40010400 	.word	0x40010400
 800805c:	40001800 	.word	0x40001800
 8008060:	40014000 	.word	0x40014000
 8008064:	00010007 	.word	0x00010007

08008068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b02      	cmp	r3, #2
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b02      	cmp	r3, #2
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0202 	mvn.w	r2, #2
 8008094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f905 	bl	80082ba <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f8f7 	bl	80082a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f908 	bl	80082ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d122      	bne.n	8008118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b04      	cmp	r3, #4
 80080de:	d11b      	bne.n	8008118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0204 	mvn.w	r2, #4
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f8db 	bl	80082ba <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f8cd 	bl	80082a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f8de 	bl	80082ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b08      	cmp	r3, #8
 8008124:	d122      	bne.n	800816c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b08      	cmp	r3, #8
 8008132:	d11b      	bne.n	800816c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0208 	mvn.w	r2, #8
 800813c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2204      	movs	r2, #4
 8008142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f8b1 	bl	80082ba <HAL_TIM_IC_CaptureCallback>
 8008158:	e005      	b.n	8008166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f8a3 	bl	80082a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f8b4 	bl	80082ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0310 	and.w	r3, r3, #16
 8008176:	2b10      	cmp	r3, #16
 8008178:	d122      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b10      	cmp	r3, #16
 8008186:	d11b      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0210 	mvn.w	r2, #16
 8008190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2208      	movs	r2, #8
 8008196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f887 	bl	80082ba <HAL_TIM_IC_CaptureCallback>
 80081ac:	e005      	b.n	80081ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f879 	bl	80082a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f88a 	bl	80082ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d10e      	bne.n	80081ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d107      	bne.n	80081ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0201 	mvn.w	r2, #1
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fc f8cc 	bl	8004384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f6:	2b80      	cmp	r3, #128	; 0x80
 80081f8:	d10e      	bne.n	8008218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008204:	2b80      	cmp	r3, #128	; 0x80
 8008206:	d107      	bne.n	8008218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f914 	bl	8008440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008226:	d10e      	bne.n	8008246 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	d107      	bne.n	8008246 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800823e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f907 	bl	8008454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d10e      	bne.n	8008272 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d107      	bne.n	8008272 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800826a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f838 	bl	80082e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b20      	cmp	r3, #32
 800827e:	d10e      	bne.n	800829e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b20      	cmp	r3, #32
 800828c:	d107      	bne.n	800829e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f06f 0220 	mvn.w	r2, #32
 8008296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f8c7 	bl	800842c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082ae:	bf00      	nop
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
	...

080082f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a40      	ldr	r2, [pc, #256]	; (800840c <TIM_Base_SetConfig+0x114>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d013      	beq.n	8008338 <TIM_Base_SetConfig+0x40>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008316:	d00f      	beq.n	8008338 <TIM_Base_SetConfig+0x40>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a3d      	ldr	r2, [pc, #244]	; (8008410 <TIM_Base_SetConfig+0x118>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00b      	beq.n	8008338 <TIM_Base_SetConfig+0x40>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a3c      	ldr	r2, [pc, #240]	; (8008414 <TIM_Base_SetConfig+0x11c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d007      	beq.n	8008338 <TIM_Base_SetConfig+0x40>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a3b      	ldr	r2, [pc, #236]	; (8008418 <TIM_Base_SetConfig+0x120>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d003      	beq.n	8008338 <TIM_Base_SetConfig+0x40>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a3a      	ldr	r2, [pc, #232]	; (800841c <TIM_Base_SetConfig+0x124>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d108      	bne.n	800834a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a2f      	ldr	r2, [pc, #188]	; (800840c <TIM_Base_SetConfig+0x114>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d01f      	beq.n	8008392 <TIM_Base_SetConfig+0x9a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008358:	d01b      	beq.n	8008392 <TIM_Base_SetConfig+0x9a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a2c      	ldr	r2, [pc, #176]	; (8008410 <TIM_Base_SetConfig+0x118>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d017      	beq.n	8008392 <TIM_Base_SetConfig+0x9a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a2b      	ldr	r2, [pc, #172]	; (8008414 <TIM_Base_SetConfig+0x11c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d013      	beq.n	8008392 <TIM_Base_SetConfig+0x9a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2a      	ldr	r2, [pc, #168]	; (8008418 <TIM_Base_SetConfig+0x120>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00f      	beq.n	8008392 <TIM_Base_SetConfig+0x9a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a29      	ldr	r2, [pc, #164]	; (800841c <TIM_Base_SetConfig+0x124>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00b      	beq.n	8008392 <TIM_Base_SetConfig+0x9a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a28      	ldr	r2, [pc, #160]	; (8008420 <TIM_Base_SetConfig+0x128>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d007      	beq.n	8008392 <TIM_Base_SetConfig+0x9a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a27      	ldr	r2, [pc, #156]	; (8008424 <TIM_Base_SetConfig+0x12c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d003      	beq.n	8008392 <TIM_Base_SetConfig+0x9a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a26      	ldr	r2, [pc, #152]	; (8008428 <TIM_Base_SetConfig+0x130>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d108      	bne.n	80083a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a10      	ldr	r2, [pc, #64]	; (800840c <TIM_Base_SetConfig+0x114>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00f      	beq.n	80083f0 <TIM_Base_SetConfig+0xf8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a12      	ldr	r2, [pc, #72]	; (800841c <TIM_Base_SetConfig+0x124>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d00b      	beq.n	80083f0 <TIM_Base_SetConfig+0xf8>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a11      	ldr	r2, [pc, #68]	; (8008420 <TIM_Base_SetConfig+0x128>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d007      	beq.n	80083f0 <TIM_Base_SetConfig+0xf8>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a10      	ldr	r2, [pc, #64]	; (8008424 <TIM_Base_SetConfig+0x12c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d003      	beq.n	80083f0 <TIM_Base_SetConfig+0xf8>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a0f      	ldr	r2, [pc, #60]	; (8008428 <TIM_Base_SetConfig+0x130>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d103      	bne.n	80083f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	615a      	str	r2, [r3, #20]
}
 80083fe:	bf00      	nop
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40010000 	.word	0x40010000
 8008410:	40000400 	.word	0x40000400
 8008414:	40000800 	.word	0x40000800
 8008418:	40000c00 	.word	0x40000c00
 800841c:	40010400 	.word	0x40010400
 8008420:	40014000 	.word	0x40014000
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800

0800842c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008468:	b084      	sub	sp, #16
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	f107 001c 	add.w	r0, r7, #28
 8008476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	2b01      	cmp	r3, #1
 800847e:	d120      	bne.n	80084c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	4b2a      	ldr	r3, [pc, #168]	; (800853c <USB_CoreInit+0xd4>)
 8008492:	4013      	ands	r3, r2
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d105      	bne.n	80084b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f914 	bl	80086e4 <USB_CoreReset>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
 80084c0:	e01a      	b.n	80084f8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f908 	bl	80086e4 <USB_CoreReset>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
 80084ea:	e005      	b.n	80084f8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d116      	bne.n	800852c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	b29a      	uxth	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800850c:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <USB_CoreInit+0xd8>)
 800850e:	4313      	orrs	r3, r2
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f043 0206 	orr.w	r2, r3, #6
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f043 0220 	orr.w	r2, r3, #32
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008538:	b004      	add	sp, #16
 800853a:	4770      	bx	lr
 800853c:	ffbdffbf 	.word	0xffbdffbf
 8008540:	03ee0000 	.word	0x03ee0000

08008544 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f023 0201 	bic.w	r2, r3, #1
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d115      	bne.n	80085b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008594:	2001      	movs	r0, #1
 8008596:	f7fc f9c1 	bl	800491c <HAL_Delay>
      ms++;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3301      	adds	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f891 	bl	80086c8 <USB_GetMode>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d01e      	beq.n	80085ea <USB_SetCurrentMode+0x84>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b31      	cmp	r3, #49	; 0x31
 80085b0:	d9f0      	bls.n	8008594 <USB_SetCurrentMode+0x2e>
 80085b2:	e01a      	b.n	80085ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d115      	bne.n	80085e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80085c6:	2001      	movs	r0, #1
 80085c8:	f7fc f9a8 	bl	800491c <HAL_Delay>
      ms++;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f878 	bl	80086c8 <USB_GetMode>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d005      	beq.n	80085ea <USB_SetCurrentMode+0x84>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b31      	cmp	r3, #49	; 0x31
 80085e2:	d9f0      	bls.n	80085c6 <USB_SetCurrentMode+0x60>
 80085e4:	e001      	b.n	80085ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e005      	b.n	80085f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b32      	cmp	r3, #50	; 0x32
 80085ee:	d101      	bne.n	80085f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e000      	b.n	80085f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3301      	adds	r3, #1
 8008612:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4a13      	ldr	r2, [pc, #76]	; (8008664 <USB_FlushTxFifo+0x64>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d901      	bls.n	8008620 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e01b      	b.n	8008658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	daf2      	bge.n	800860e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	019b      	lsls	r3, r3, #6
 8008630:	f043 0220 	orr.w	r2, r3, #32
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3301      	adds	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	4a08      	ldr	r2, [pc, #32]	; (8008664 <USB_FlushTxFifo+0x64>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d901      	bls.n	800864a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e006      	b.n	8008658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b20      	cmp	r3, #32
 8008654:	d0f0      	beq.n	8008638 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	00030d40 	.word	0x00030d40

08008668 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3301      	adds	r3, #1
 8008678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4a11      	ldr	r2, [pc, #68]	; (80086c4 <USB_FlushRxFifo+0x5c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d901      	bls.n	8008686 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e018      	b.n	80086b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	daf2      	bge.n	8008674 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2210      	movs	r2, #16
 8008696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4a08      	ldr	r2, [pc, #32]	; (80086c4 <USB_FlushRxFifo+0x5c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d901      	bls.n	80086aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e006      	b.n	80086b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0310 	and.w	r3, r3, #16
 80086b2:	2b10      	cmp	r3, #16
 80086b4:	d0f0      	beq.n	8008698 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	00030d40 	.word	0x00030d40

080086c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	f003 0301 	and.w	r3, r3, #1
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3301      	adds	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4a13      	ldr	r2, [pc, #76]	; (8008748 <USB_CoreReset+0x64>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d901      	bls.n	8008702 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e01b      	b.n	800873a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	daf2      	bge.n	80086f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f043 0201 	orr.w	r2, r3, #1
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3301      	adds	r3, #1
 800871e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a09      	ldr	r2, [pc, #36]	; (8008748 <USB_CoreReset+0x64>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d901      	bls.n	800872c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e006      	b.n	800873a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b01      	cmp	r3, #1
 8008736:	d0f0      	beq.n	800871a <USB_CoreReset+0x36>

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	00030d40 	.word	0x00030d40

0800874c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800874c:	b084      	sub	sp, #16
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800875a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800876c:	461a      	mov	r2, r3
 800876e:	2300      	movs	r3, #0
 8008770:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008792:	2b00      	cmp	r3, #0
 8008794:	d018      	beq.n	80087c8 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d10a      	bne.n	80087b2 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087aa:	f043 0304 	orr.w	r3, r3, #4
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	e014      	b.n	80087dc <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087c0:	f023 0304 	bic.w	r3, r3, #4
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	e009      	b.n	80087dc <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087d6:	f023 0304 	bic.w	r3, r3, #4
 80087da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087dc:	2110      	movs	r1, #16
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff ff0e 	bl	8008600 <USB_FlushTxFifo>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff ff3a 	bl	8008668 <USB_FlushRxFifo>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80087fe:	2300      	movs	r3, #0
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	e015      	b.n	8008830 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008810:	461a      	mov	r2, r3
 8008812:	f04f 33ff 	mov.w	r3, #4294967295
 8008816:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008824:	461a      	mov	r2, r3
 8008826:	2300      	movs	r3, #0
 8008828:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3301      	adds	r3, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	429a      	cmp	r2, r3
 8008836:	d3e5      	bcc.n	8008804 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f04f 32ff 	mov.w	r2, #4294967295
 8008844:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00b      	beq.n	800886a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008858:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a13      	ldr	r2, [pc, #76]	; (80088ac <USB_HostInit+0x160>)
 800885e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <USB_HostInit+0x164>)
 8008864:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008868:	e009      	b.n	800887e <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2280      	movs	r2, #128	; 0x80
 800886e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <USB_HostInit+0x168>)
 8008874:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <USB_HostInit+0x16c>)
 800887a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	2b00      	cmp	r3, #0
 8008882:	d105      	bne.n	8008890 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	f043 0210 	orr.w	r2, r3, #16
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	699a      	ldr	r2, [r3, #24]
 8008894:	4b09      	ldr	r3, [pc, #36]	; (80088bc <USB_HostInit+0x170>)
 8008896:	4313      	orrs	r3, r2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088a8:	b004      	add	sp, #16
 80088aa:	4770      	bx	lr
 80088ac:	01000200 	.word	0x01000200
 80088b0:	00e00300 	.word	0x00e00300
 80088b4:	00600080 	.word	0x00600080
 80088b8:	004000e0 	.word	0x004000e0
 80088bc:	a3200008 	.word	0xa3200008

080088c0 <__libc_init_array>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	4d0d      	ldr	r5, [pc, #52]	; (80088f8 <__libc_init_array+0x38>)
 80088c4:	4c0d      	ldr	r4, [pc, #52]	; (80088fc <__libc_init_array+0x3c>)
 80088c6:	1b64      	subs	r4, r4, r5
 80088c8:	10a4      	asrs	r4, r4, #2
 80088ca:	2600      	movs	r6, #0
 80088cc:	42a6      	cmp	r6, r4
 80088ce:	d109      	bne.n	80088e4 <__libc_init_array+0x24>
 80088d0:	4d0b      	ldr	r5, [pc, #44]	; (8008900 <__libc_init_array+0x40>)
 80088d2:	4c0c      	ldr	r4, [pc, #48]	; (8008904 <__libc_init_array+0x44>)
 80088d4:	f000 f83e 	bl	8008954 <_init>
 80088d8:	1b64      	subs	r4, r4, r5
 80088da:	10a4      	asrs	r4, r4, #2
 80088dc:	2600      	movs	r6, #0
 80088de:	42a6      	cmp	r6, r4
 80088e0:	d105      	bne.n	80088ee <__libc_init_array+0x2e>
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e8:	4798      	blx	r3
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7ee      	b.n	80088cc <__libc_init_array+0xc>
 80088ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f2:	4798      	blx	r3
 80088f4:	3601      	adds	r6, #1
 80088f6:	e7f2      	b.n	80088de <__libc_init_array+0x1e>
 80088f8:	08008b50 	.word	0x08008b50
 80088fc:	08008b50 	.word	0x08008b50
 8008900:	08008b50 	.word	0x08008b50
 8008904:	08008b54 	.word	0x08008b54

08008908 <memcmp>:
 8008908:	b510      	push	{r4, lr}
 800890a:	3901      	subs	r1, #1
 800890c:	4402      	add	r2, r0
 800890e:	4290      	cmp	r0, r2
 8008910:	d101      	bne.n	8008916 <memcmp+0xe>
 8008912:	2000      	movs	r0, #0
 8008914:	e005      	b.n	8008922 <memcmp+0x1a>
 8008916:	7803      	ldrb	r3, [r0, #0]
 8008918:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800891c:	42a3      	cmp	r3, r4
 800891e:	d001      	beq.n	8008924 <memcmp+0x1c>
 8008920:	1b18      	subs	r0, r3, r4
 8008922:	bd10      	pop	{r4, pc}
 8008924:	3001      	adds	r0, #1
 8008926:	e7f2      	b.n	800890e <memcmp+0x6>

08008928 <memcpy>:
 8008928:	440a      	add	r2, r1
 800892a:	4291      	cmp	r1, r2
 800892c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008930:	d100      	bne.n	8008934 <memcpy+0xc>
 8008932:	4770      	bx	lr
 8008934:	b510      	push	{r4, lr}
 8008936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800893e:	4291      	cmp	r1, r2
 8008940:	d1f9      	bne.n	8008936 <memcpy+0xe>
 8008942:	bd10      	pop	{r4, pc}

08008944 <memset>:
 8008944:	4402      	add	r2, r0
 8008946:	4603      	mov	r3, r0
 8008948:	4293      	cmp	r3, r2
 800894a:	d100      	bne.n	800894e <memset+0xa>
 800894c:	4770      	bx	lr
 800894e:	f803 1b01 	strb.w	r1, [r3], #1
 8008952:	e7f9      	b.n	8008948 <memset+0x4>

08008954 <_init>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr

08008960 <_fini>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr
