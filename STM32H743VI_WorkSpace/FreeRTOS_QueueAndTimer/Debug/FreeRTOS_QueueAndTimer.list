
FreeRTOS_QueueAndTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001072c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  080109cc  080109cc  000209cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010fc4  08010fc4  00020fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010fcc  08010fcc  00020fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010fd0  08010fd0  00020fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  08010fd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0007f5b4  240000a0  08011074  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2407f654  08011074  0003f654  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f1fa  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005386  00000000  00000000  0005f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002308  00000000  00000000  00064650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000020d0  00000000  00000000  00066958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c85f  00000000  00000000  00068a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d699  00000000  00000000  000a5287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018751e  00000000  00000000  000d2920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00259e3e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009f34  00000000  00000000  00259e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080109b4 	.word	0x080109b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	080109b4 	.word	0x080109b4

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	24006f38 	.word	0x24006f38

08000374 <strcmp>:
 8000374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800037c:	2a01      	cmp	r2, #1
 800037e:	bf28      	it	cs
 8000380:	429a      	cmpcs	r2, r3
 8000382:	d0f7      	beq.n	8000374 <strcmp>
 8000384:	1ad0      	subs	r0, r2, r3
 8000386:	4770      	bx	lr

08000388 <strlen>:
 8000388:	4603      	mov	r3, r0
 800038a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800038e:	2a00      	cmp	r2, #0
 8000390:	d1fb      	bne.n	800038a <strlen+0x2>
 8000392:	1a18      	subs	r0, r3, r0
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
	...

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295
 8000450:	f04f 30ff 	movne.w	r0, #4294967295
 8000454:	f000 b974 	b.w	8000740 <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9d08      	ldr	r5, [sp, #32]
 8000476:	4604      	mov	r4, r0
 8000478:	468e      	mov	lr, r1
 800047a:	2b00      	cmp	r3, #0
 800047c:	d14d      	bne.n	800051a <__udivmoddi4+0xaa>
 800047e:	428a      	cmp	r2, r1
 8000480:	4694      	mov	ip, r2
 8000482:	d969      	bls.n	8000558 <__udivmoddi4+0xe8>
 8000484:	fab2 f282 	clz	r2, r2
 8000488:	b152      	cbz	r2, 80004a0 <__udivmoddi4+0x30>
 800048a:	fa01 f302 	lsl.w	r3, r1, r2
 800048e:	f1c2 0120 	rsb	r1, r2, #32
 8000492:	fa20 f101 	lsr.w	r1, r0, r1
 8000496:	fa0c fc02 	lsl.w	ip, ip, r2
 800049a:	ea41 0e03 	orr.w	lr, r1, r3
 800049e:	4094      	lsls	r4, r2
 80004a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004a4:	0c21      	lsrs	r1, r4, #16
 80004a6:	fbbe f6f8 	udiv	r6, lr, r8
 80004aa:	fa1f f78c 	uxth.w	r7, ip
 80004ae:	fb08 e316 	mls	r3, r8, r6, lr
 80004b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004b6:	fb06 f107 	mul.w	r1, r6, r7
 80004ba:	4299      	cmp	r1, r3
 80004bc:	d90a      	bls.n	80004d4 <__udivmoddi4+0x64>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004c6:	f080 811f 	bcs.w	8000708 <__udivmoddi4+0x298>
 80004ca:	4299      	cmp	r1, r3
 80004cc:	f240 811c 	bls.w	8000708 <__udivmoddi4+0x298>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	1a5b      	subs	r3, r3, r1
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004dc:	fb08 3310 	mls	r3, r8, r0, r3
 80004e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004e4:	fb00 f707 	mul.w	r7, r0, r7
 80004e8:	42a7      	cmp	r7, r4
 80004ea:	d90a      	bls.n	8000502 <__udivmoddi4+0x92>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f4:	f080 810a 	bcs.w	800070c <__udivmoddi4+0x29c>
 80004f8:	42a7      	cmp	r7, r4
 80004fa:	f240 8107 	bls.w	800070c <__udivmoddi4+0x29c>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000506:	1be4      	subs	r4, r4, r7
 8000508:	2600      	movs	r6, #0
 800050a:	b11d      	cbz	r5, 8000514 <__udivmoddi4+0xa4>
 800050c:	40d4      	lsrs	r4, r2
 800050e:	2300      	movs	r3, #0
 8000510:	e9c5 4300 	strd	r4, r3, [r5]
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	428b      	cmp	r3, r1
 800051c:	d909      	bls.n	8000532 <__udivmoddi4+0xc2>
 800051e:	2d00      	cmp	r5, #0
 8000520:	f000 80ef 	beq.w	8000702 <__udivmoddi4+0x292>
 8000524:	2600      	movs	r6, #0
 8000526:	e9c5 0100 	strd	r0, r1, [r5]
 800052a:	4630      	mov	r0, r6
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	fab3 f683 	clz	r6, r3
 8000536:	2e00      	cmp	r6, #0
 8000538:	d14a      	bne.n	80005d0 <__udivmoddi4+0x160>
 800053a:	428b      	cmp	r3, r1
 800053c:	d302      	bcc.n	8000544 <__udivmoddi4+0xd4>
 800053e:	4282      	cmp	r2, r0
 8000540:	f200 80f9 	bhi.w	8000736 <__udivmoddi4+0x2c6>
 8000544:	1a84      	subs	r4, r0, r2
 8000546:	eb61 0303 	sbc.w	r3, r1, r3
 800054a:	2001      	movs	r0, #1
 800054c:	469e      	mov	lr, r3
 800054e:	2d00      	cmp	r5, #0
 8000550:	d0e0      	beq.n	8000514 <__udivmoddi4+0xa4>
 8000552:	e9c5 4e00 	strd	r4, lr, [r5]
 8000556:	e7dd      	b.n	8000514 <__udivmoddi4+0xa4>
 8000558:	b902      	cbnz	r2, 800055c <__udivmoddi4+0xec>
 800055a:	deff      	udf	#255	; 0xff
 800055c:	fab2 f282 	clz	r2, r2
 8000560:	2a00      	cmp	r2, #0
 8000562:	f040 8092 	bne.w	800068a <__udivmoddi4+0x21a>
 8000566:	eba1 010c 	sub.w	r1, r1, ip
 800056a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056e:	fa1f fe8c 	uxth.w	lr, ip
 8000572:	2601      	movs	r6, #1
 8000574:	0c20      	lsrs	r0, r4, #16
 8000576:	fbb1 f3f7 	udiv	r3, r1, r7
 800057a:	fb07 1113 	mls	r1, r7, r3, r1
 800057e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000582:	fb0e f003 	mul.w	r0, lr, r3
 8000586:	4288      	cmp	r0, r1
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x12c>
 800058a:	eb1c 0101 	adds.w	r1, ip, r1
 800058e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x12a>
 8000594:	4288      	cmp	r0, r1
 8000596:	f200 80cb 	bhi.w	8000730 <__udivmoddi4+0x2c0>
 800059a:	4643      	mov	r3, r8
 800059c:	1a09      	subs	r1, r1, r0
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a4:	fb07 1110 	mls	r1, r7, r0, r1
 80005a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005ac:	fb0e fe00 	mul.w	lr, lr, r0
 80005b0:	45a6      	cmp	lr, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x156>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005bc:	d202      	bcs.n	80005c4 <__udivmoddi4+0x154>
 80005be:	45a6      	cmp	lr, r4
 80005c0:	f200 80bb 	bhi.w	800073a <__udivmoddi4+0x2ca>
 80005c4:	4608      	mov	r0, r1
 80005c6:	eba4 040e 	sub.w	r4, r4, lr
 80005ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005ce:	e79c      	b.n	800050a <__udivmoddi4+0x9a>
 80005d0:	f1c6 0720 	rsb	r7, r6, #32
 80005d4:	40b3      	lsls	r3, r6
 80005d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005da:	ea4c 0c03 	orr.w	ip, ip, r3
 80005de:	fa20 f407 	lsr.w	r4, r0, r7
 80005e2:	fa01 f306 	lsl.w	r3, r1, r6
 80005e6:	431c      	orrs	r4, r3
 80005e8:	40f9      	lsrs	r1, r7
 80005ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005ee:	fa00 f306 	lsl.w	r3, r0, r6
 80005f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80005f6:	0c20      	lsrs	r0, r4, #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000600:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000604:	fb08 f00e 	mul.w	r0, r8, lr
 8000608:	4288      	cmp	r0, r1
 800060a:	fa02 f206 	lsl.w	r2, r2, r6
 800060e:	d90b      	bls.n	8000628 <__udivmoddi4+0x1b8>
 8000610:	eb1c 0101 	adds.w	r1, ip, r1
 8000614:	f108 3aff 	add.w	sl, r8, #4294967295
 8000618:	f080 8088 	bcs.w	800072c <__udivmoddi4+0x2bc>
 800061c:	4288      	cmp	r0, r1
 800061e:	f240 8085 	bls.w	800072c <__udivmoddi4+0x2bc>
 8000622:	f1a8 0802 	sub.w	r8, r8, #2
 8000626:	4461      	add	r1, ip
 8000628:	1a09      	subs	r1, r1, r0
 800062a:	b2a4      	uxth	r4, r4
 800062c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000630:	fb09 1110 	mls	r1, r9, r0, r1
 8000634:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000638:	fb00 fe0e 	mul.w	lr, r0, lr
 800063c:	458e      	cmp	lr, r1
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x1e2>
 8000640:	eb1c 0101 	adds.w	r1, ip, r1
 8000644:	f100 34ff 	add.w	r4, r0, #4294967295
 8000648:	d26c      	bcs.n	8000724 <__udivmoddi4+0x2b4>
 800064a:	458e      	cmp	lr, r1
 800064c:	d96a      	bls.n	8000724 <__udivmoddi4+0x2b4>
 800064e:	3802      	subs	r0, #2
 8000650:	4461      	add	r1, ip
 8000652:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000656:	fba0 9402 	umull	r9, r4, r0, r2
 800065a:	eba1 010e 	sub.w	r1, r1, lr
 800065e:	42a1      	cmp	r1, r4
 8000660:	46c8      	mov	r8, r9
 8000662:	46a6      	mov	lr, r4
 8000664:	d356      	bcc.n	8000714 <__udivmoddi4+0x2a4>
 8000666:	d053      	beq.n	8000710 <__udivmoddi4+0x2a0>
 8000668:	b15d      	cbz	r5, 8000682 <__udivmoddi4+0x212>
 800066a:	ebb3 0208 	subs.w	r2, r3, r8
 800066e:	eb61 010e 	sbc.w	r1, r1, lr
 8000672:	fa01 f707 	lsl.w	r7, r1, r7
 8000676:	fa22 f306 	lsr.w	r3, r2, r6
 800067a:	40f1      	lsrs	r1, r6
 800067c:	431f      	orrs	r7, r3
 800067e:	e9c5 7100 	strd	r7, r1, [r5]
 8000682:	2600      	movs	r6, #0
 8000684:	4631      	mov	r1, r6
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	40d8      	lsrs	r0, r3
 8000690:	fa0c fc02 	lsl.w	ip, ip, r2
 8000694:	fa21 f303 	lsr.w	r3, r1, r3
 8000698:	4091      	lsls	r1, r2
 800069a:	4301      	orrs	r1, r0
 800069c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006a0:	fa1f fe8c 	uxth.w	lr, ip
 80006a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80006a8:	fb07 3610 	mls	r6, r7, r0, r3
 80006ac:	0c0b      	lsrs	r3, r1, #16
 80006ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006b2:	fb00 f60e 	mul.w	r6, r0, lr
 80006b6:	429e      	cmp	r6, r3
 80006b8:	fa04 f402 	lsl.w	r4, r4, r2
 80006bc:	d908      	bls.n	80006d0 <__udivmoddi4+0x260>
 80006be:	eb1c 0303 	adds.w	r3, ip, r3
 80006c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006c6:	d22f      	bcs.n	8000728 <__udivmoddi4+0x2b8>
 80006c8:	429e      	cmp	r6, r3
 80006ca:	d92d      	bls.n	8000728 <__udivmoddi4+0x2b8>
 80006cc:	3802      	subs	r0, #2
 80006ce:	4463      	add	r3, ip
 80006d0:	1b9b      	subs	r3, r3, r6
 80006d2:	b289      	uxth	r1, r1
 80006d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006d8:	fb07 3316 	mls	r3, r7, r6, r3
 80006dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e0:	fb06 f30e 	mul.w	r3, r6, lr
 80006e4:	428b      	cmp	r3, r1
 80006e6:	d908      	bls.n	80006fa <__udivmoddi4+0x28a>
 80006e8:	eb1c 0101 	adds.w	r1, ip, r1
 80006ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80006f0:	d216      	bcs.n	8000720 <__udivmoddi4+0x2b0>
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d914      	bls.n	8000720 <__udivmoddi4+0x2b0>
 80006f6:	3e02      	subs	r6, #2
 80006f8:	4461      	add	r1, ip
 80006fa:	1ac9      	subs	r1, r1, r3
 80006fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000700:	e738      	b.n	8000574 <__udivmoddi4+0x104>
 8000702:	462e      	mov	r6, r5
 8000704:	4628      	mov	r0, r5
 8000706:	e705      	b.n	8000514 <__udivmoddi4+0xa4>
 8000708:	4606      	mov	r6, r0
 800070a:	e6e3      	b.n	80004d4 <__udivmoddi4+0x64>
 800070c:	4618      	mov	r0, r3
 800070e:	e6f8      	b.n	8000502 <__udivmoddi4+0x92>
 8000710:	454b      	cmp	r3, r9
 8000712:	d2a9      	bcs.n	8000668 <__udivmoddi4+0x1f8>
 8000714:	ebb9 0802 	subs.w	r8, r9, r2
 8000718:	eb64 0e0c 	sbc.w	lr, r4, ip
 800071c:	3801      	subs	r0, #1
 800071e:	e7a3      	b.n	8000668 <__udivmoddi4+0x1f8>
 8000720:	4646      	mov	r6, r8
 8000722:	e7ea      	b.n	80006fa <__udivmoddi4+0x28a>
 8000724:	4620      	mov	r0, r4
 8000726:	e794      	b.n	8000652 <__udivmoddi4+0x1e2>
 8000728:	4640      	mov	r0, r8
 800072a:	e7d1      	b.n	80006d0 <__udivmoddi4+0x260>
 800072c:	46d0      	mov	r8, sl
 800072e:	e77b      	b.n	8000628 <__udivmoddi4+0x1b8>
 8000730:	3b02      	subs	r3, #2
 8000732:	4461      	add	r1, ip
 8000734:	e732      	b.n	800059c <__udivmoddi4+0x12c>
 8000736:	4630      	mov	r0, r6
 8000738:	e709      	b.n	800054e <__udivmoddi4+0xde>
 800073a:	4464      	add	r4, ip
 800073c:	3802      	subs	r0, #2
 800073e:	e742      	b.n	80005c6 <__udivmoddi4+0x156>

08000740 <__aeabi_idiv0>:
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f103 0208 	add.w	r2, r3, #8
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f103 0208 	add.w	r2, r3, #8
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f103 0208 	add.w	r2, r3, #8
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800079e:	b480      	push	{r7}
 80007a0:	b085      	sub	sp, #20
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80007e6:	b480      	push	{r7}
 80007e8:	b085      	sub	sp, #20
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d103      	bne.n	8000806 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e00c      	b.n	8000820 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3308      	adds	r3, #8
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	e002      	b.n	8000814 <vListInsert+0x2e>
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	429a      	cmp	r2, r3
 800081e:	d2f6      	bcs.n	800080e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	6892      	ldr	r2, [r2, #8]
 800086e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	6852      	ldr	r2, [r2, #4]
 8000878:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	d103      	bne.n	800088c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10c      	bne.n	80008da <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	b672      	cpsid	i
 80008c6:	f383 8811 	msr	BASEPRI, r3
 80008ca:	f3bf 8f6f 	isb	sy
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	b662      	cpsie	i
 80008d4:	60bb      	str	r3, [r7, #8]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008d6:	bf00      	nop
 80008d8:	e7fe      	b.n	80008d8 <xQueueGenericReset+0x2c>

    taskENTER_CRITICAL();
 80008da:	f002 fcc9 	bl	8003270 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008e6:	68f9      	ldr	r1, [r7, #12]
 80008e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008ea:	fb01 f303 	mul.w	r3, r1, r3
 80008ee:	441a      	add	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2200      	movs	r2, #0
 80008f8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800090a:	3b01      	subs	r3, #1
 800090c:	68f9      	ldr	r1, [r7, #12]
 800090e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000910:	fb01 f303 	mul.w	r3, r1, r3
 8000914:	441a      	add	r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d114      	bne.n	800095a <xQueueGenericReset+0xae>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d01a      	beq.n	800096e <xQueueGenericReset+0xc2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3310      	adds	r3, #16
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fa4b 	bl	8001dd8 <xTaskRemoveFromEventList>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d012      	beq.n	800096e <xQueueGenericReset+0xc2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <xQueueGenericReset+0xd0>)
 800094a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	f3bf 8f4f 	dsb	sy
 8000954:	f3bf 8f6f 	isb	sy
 8000958:	e009      	b.n	800096e <xQueueGenericReset+0xc2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3310      	adds	r3, #16
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fef0 	bl	8000744 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3324      	adds	r3, #36	; 0x24
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff feeb 	bl	8000744 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800096e:	f002 fcb3 	bl	80032d8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	e000ed04 	.word	0xe000ed04

08000980 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af02      	add	r7, sp, #8
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	4613      	mov	r3, r2
 800098c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10c      	bne.n	80009ae <xQueueGenericCreate+0x2e>
        __asm volatile
 8000994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000998:	b672      	cpsid	i
 800099a:	f383 8811 	msr	BASEPRI, r3
 800099e:	f3bf 8f6f 	isb	sy
 80009a2:	f3bf 8f4f 	dsb	sy
 80009a6:	b662      	cpsie	i
 80009a8:	61bb      	str	r3, [r7, #24]
    }
 80009aa:	bf00      	nop
 80009ac:	e7fe      	b.n	80009ac <xQueueGenericCreate+0x2c>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	fb02 f303 	mul.w	r3, r2, r3
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d006      	beq.n	80009cc <xQueueGenericCreate+0x4c>
 80009be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d101      	bne.n	80009d0 <xQueueGenericCreate+0x50>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <xQueueGenericCreate+0x52>
 80009d0:	2300      	movs	r3, #0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d10c      	bne.n	80009f0 <xQueueGenericCreate+0x70>
        __asm volatile
 80009d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009da:	b672      	cpsid	i
 80009dc:	f383 8811 	msr	BASEPRI, r3
 80009e0:	f3bf 8f6f 	isb	sy
 80009e4:	f3bf 8f4f 	dsb	sy
 80009e8:	b662      	cpsie	i
 80009ea:	617b      	str	r3, [r7, #20]
    }
 80009ec:	bf00      	nop
 80009ee:	e7fe      	b.n	80009ee <xQueueGenericCreate+0x6e>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80009f6:	d90c      	bls.n	8000a12 <xQueueGenericCreate+0x92>
        __asm volatile
 80009f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009fc:	b672      	cpsid	i
 80009fe:	f383 8811 	msr	BASEPRI, r3
 8000a02:	f3bf 8f6f 	isb	sy
 8000a06:	f3bf 8f4f 	dsb	sy
 8000a0a:	b662      	cpsie	i
 8000a0c:	613b      	str	r3, [r7, #16]
    }
 8000a0e:	bf00      	nop
 8000a10:	e7fe      	b.n	8000a10 <xQueueGenericCreate+0x90>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	3350      	adds	r3, #80	; 0x50
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fd5e 	bl	80034d8 <pvPortMalloc>
 8000a1c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00d      	beq.n	8000a40 <xQueueGenericCreate+0xc0>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	3350      	adds	r3, #80	; 0x50
 8000a2c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4613      	mov	r3, r2
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f000 f805 	bl	8000a4a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000a40:	6a3b      	ldr	r3, [r7, #32]
    }
 8000a42:	4618      	mov	r0, r3
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	e002      	b.n	8000a6c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a78:	2101      	movs	r1, #1
 8000a7a:	69b8      	ldr	r0, [r7, #24]
 8000a7c:	f7ff ff16 	bl	80008ac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	78fa      	ldrb	r2, [r7, #3]
 8000a84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	68f9      	ldr	r1, [r7, #12]
 8000a8e:	2073      	movs	r0, #115	; 0x73
 8000a90:	f004 f99a 	bl	8004dc8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b090      	sub	sp, #64	; 0x40
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10c      	bne.n	8000ad2 <xQueueGenericSend+0x36>
        __asm volatile
 8000ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000abc:	b672      	cpsid	i
 8000abe:	f383 8811 	msr	BASEPRI, r3
 8000ac2:	f3bf 8f6f 	isb	sy
 8000ac6:	f3bf 8f4f 	dsb	sy
 8000aca:	b662      	cpsie	i
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000ace:	bf00      	nop
 8000ad0:	e7fe      	b.n	8000ad0 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d103      	bne.n	8000ae0 <xQueueGenericSend+0x44>
 8000ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <xQueueGenericSend+0x48>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <xQueueGenericSend+0x4a>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10c      	bne.n	8000b04 <xQueueGenericSend+0x68>
        __asm volatile
 8000aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aee:	b672      	cpsid	i
 8000af0:	f383 8811 	msr	BASEPRI, r3
 8000af4:	f3bf 8f6f 	isb	sy
 8000af8:	f3bf 8f4f 	dsb	sy
 8000afc:	b662      	cpsie	i
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b00:	bf00      	nop
 8000b02:	e7fe      	b.n	8000b02 <xQueueGenericSend+0x66>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d103      	bne.n	8000b12 <xQueueGenericSend+0x76>
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d101      	bne.n	8000b16 <xQueueGenericSend+0x7a>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <xQueueGenericSend+0x7c>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10c      	bne.n	8000b36 <xQueueGenericSend+0x9a>
        __asm volatile
 8000b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b20:	b672      	cpsid	i
 8000b22:	f383 8811 	msr	BASEPRI, r3
 8000b26:	f3bf 8f6f 	isb	sy
 8000b2a:	f3bf 8f4f 	dsb	sy
 8000b2e:	b662      	cpsie	i
 8000b30:	623b      	str	r3, [r7, #32]
    }
 8000b32:	bf00      	nop
 8000b34:	e7fe      	b.n	8000b34 <xQueueGenericSend+0x98>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b36:	f001 faf5 	bl	8002124 <xTaskGetSchedulerState>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <xQueueGenericSend+0xaa>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <xQueueGenericSend+0xae>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <xQueueGenericSend+0xb0>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10c      	bne.n	8000b6a <xQueueGenericSend+0xce>
        __asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b54:	b672      	cpsid	i
 8000b56:	f383 8811 	msr	BASEPRI, r3
 8000b5a:	f3bf 8f6f 	isb	sy
 8000b5e:	f3bf 8f4f 	dsb	sy
 8000b62:	b662      	cpsie	i
 8000b64:	61fb      	str	r3, [r7, #28]
    }
 8000b66:	bf00      	nop
 8000b68:	e7fe      	b.n	8000b68 <xQueueGenericSend+0xcc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b6a:	f002 fb81 	bl	8003270 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d302      	bcc.n	8000b80 <xQueueGenericSend+0xe4>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d136      	bne.n	8000bee <xQueueGenericSend+0x152>
            {
                traceQUEUE_SEND( pxQueue );
 8000b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b82:	4618      	mov	r0, r3
 8000b84:	f004 ff5c 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	460b      	mov	r3, r1
 8000b92:	4601      	mov	r1, r0
 8000b94:	205a      	movs	r0, #90	; 0x5a
 8000b96:	f004 f98d 	bl	8004eb4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ba0:	f000 fb5d 	bl	800125e <prvCopyDataToQueue>
 8000ba4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d010      	beq.n	8000bd0 <xQueueGenericSend+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb0:	3324      	adds	r3, #36	; 0x24
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 f910 	bl	8001dd8 <xTaskRemoveFromEventList>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d013      	beq.n	8000be6 <xQueueGenericSend+0x14a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000bbe:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <xQueueGenericSend+0x258>)
 8000bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	f3bf 8f4f 	dsb	sy
 8000bca:	f3bf 8f6f 	isb	sy
 8000bce:	e00a      	b.n	8000be6 <xQueueGenericSend+0x14a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <xQueueGenericSend+0x14a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <xQueueGenericSend+0x258>)
 8000bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	f3bf 8f4f 	dsb	sy
 8000be2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000be6:	f002 fb77 	bl	80032d8 <vPortExitCritical>
                return pdPASS;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e07d      	b.n	8000cea <xQueueGenericSend+0x24e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d110      	bne.n	8000c16 <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bf4:	f002 fb70 	bl	80032d8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 ff20 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	205a      	movs	r0, #90	; 0x5a
 8000c0e:	f004 f951 	bl	8004eb4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e069      	b.n	8000cea <xQueueGenericSend+0x24e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d106      	bne.n	8000c2a <xQueueGenericSend+0x18e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f941 	bl	8001ea8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c2a:	f002 fb55 	bl	80032d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c2e:	f000 fe81 	bl	8001934 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c32:	f002 fb1d 	bl	8003270 <vPortEnterCritical>
 8000c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c42:	d103      	bne.n	8000c4c <xQueueGenericSend+0x1b0>
 8000c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d103      	bne.n	8000c62 <xQueueGenericSend+0x1c6>
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c62:	f002 fb39 	bl	80032d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c66:	1d3a      	adds	r2, r7, #4
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f930 	bl	8001ed4 <xTaskCheckForTimeOut>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d124      	bne.n	8000cc4 <xQueueGenericSend+0x228>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c7c:	f000 fbe7 	bl	800144e <prvIsQueueFull>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d018      	beq.n	8000cb8 <xQueueGenericSend+0x21c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	3310      	adds	r3, #16
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 f84c 	bl	8001d2c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c96:	f000 fb72 	bl	800137e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000c9a:	f000 fe59 	bl	8001950 <xTaskResumeAll>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f47f af62 	bne.w	8000b6a <xQueueGenericSend+0xce>
                {
                    portYIELD_WITHIN_API();
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <xQueueGenericSend+0x258>)
 8000ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	f3bf 8f4f 	dsb	sy
 8000cb2:	f3bf 8f6f 	isb	sy
 8000cb6:	e758      	b.n	8000b6a <xQueueGenericSend+0xce>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cba:	f000 fb60 	bl	800137e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000cbe:	f000 fe47 	bl	8001950 <xTaskResumeAll>
 8000cc2:	e752      	b.n	8000b6a <xQueueGenericSend+0xce>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cc6:	f000 fb5a 	bl	800137e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cca:	f000 fe41 	bl	8001950 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 feb5 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	205a      	movs	r0, #90	; 0x5a
 8000ce4:	f004 f8e6 	bl	8004eb4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000ce8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3738      	adds	r7, #56	; 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000ed04 	.word	0xe000ed04

08000cf8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b090      	sub	sp, #64	; 0x40
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10c      	bne.n	8000d2a <xQueueGenericSendFromISR+0x32>
        __asm volatile
 8000d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d14:	b672      	cpsid	i
 8000d16:	f383 8811 	msr	BASEPRI, r3
 8000d1a:	f3bf 8f6f 	isb	sy
 8000d1e:	f3bf 8f4f 	dsb	sy
 8000d22:	b662      	cpsie	i
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000d26:	bf00      	nop
 8000d28:	e7fe      	b.n	8000d28 <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d103      	bne.n	8000d38 <xQueueGenericSendFromISR+0x40>
 8000d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <xQueueGenericSendFromISR+0x44>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <xQueueGenericSendFromISR+0x46>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10c      	bne.n	8000d5c <xQueueGenericSendFromISR+0x64>
        __asm volatile
 8000d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d46:	b672      	cpsid	i
 8000d48:	f383 8811 	msr	BASEPRI, r3
 8000d4c:	f3bf 8f6f 	isb	sy
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	b662      	cpsie	i
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000d58:	bf00      	nop
 8000d5a:	e7fe      	b.n	8000d5a <xQueueGenericSendFromISR+0x62>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d103      	bne.n	8000d6a <xQueueGenericSendFromISR+0x72>
 8000d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d101      	bne.n	8000d6e <xQueueGenericSendFromISR+0x76>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <xQueueGenericSendFromISR+0x78>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10c      	bne.n	8000d8e <xQueueGenericSendFromISR+0x96>
        __asm volatile
 8000d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d78:	b672      	cpsid	i
 8000d7a:	f383 8811 	msr	BASEPRI, r3
 8000d7e:	f3bf 8f6f 	isb	sy
 8000d82:	f3bf 8f4f 	dsb	sy
 8000d86:	b662      	cpsie	i
 8000d88:	623b      	str	r3, [r7, #32]
    }
 8000d8a:	bf00      	nop
 8000d8c:	e7fe      	b.n	8000d8c <xQueueGenericSendFromISR+0x94>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d8e:	f002 fb5f 	bl	8003450 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000d92:	f3ef 8211 	mrs	r2, BASEPRI
 8000d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9a:	b672      	cpsid	i
 8000d9c:	f383 8811 	msr	BASEPRI, r3
 8000da0:	f3bf 8f6f 	isb	sy
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	b662      	cpsie	i
 8000daa:	61fa      	str	r2, [r7, #28]
 8000dac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000dae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d302      	bcc.n	8000dc4 <xQueueGenericSendFromISR+0xcc>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d14a      	bne.n	8000e5a <xQueueGenericSendFromISR+0x162>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 fe32 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000ddc:	4601      	mov	r1, r0
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	461a      	mov	r2, r3
 8000de2:	2060      	movs	r0, #96	; 0x60
 8000de4:	f003 ff96 	bl	8004d14 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000dee:	f000 fa36 	bl	800125e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000df2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfa:	d112      	bne.n	8000e22 <xQueueGenericSendFromISR+0x12a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d027      	beq.n	8000e54 <xQueueGenericSendFromISR+0x15c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e06:	3324      	adds	r3, #36	; 0x24
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 ffe5 	bl	8001dd8 <xTaskRemoveFromEventList>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d01f      	beq.n	8000e54 <xQueueGenericSendFromISR+0x15c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d01c      	beq.n	8000e54 <xQueueGenericSendFromISR+0x15c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e018      	b.n	8000e54 <xQueueGenericSendFromISR+0x15c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000e22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000e26:	2b7f      	cmp	r3, #127	; 0x7f
 8000e28:	d10c      	bne.n	8000e44 <xQueueGenericSendFromISR+0x14c>
        __asm volatile
 8000e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e2e:	b672      	cpsid	i
 8000e30:	f383 8811 	msr	BASEPRI, r3
 8000e34:	f3bf 8f6f 	isb	sy
 8000e38:	f3bf 8f4f 	dsb	sy
 8000e3c:	b662      	cpsie	i
 8000e3e:	617b      	str	r3, [r7, #20]
    }
 8000e40:	bf00      	nop
 8000e42:	e7fe      	b.n	8000e42 <xQueueGenericSendFromISR+0x14a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000e44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	b25a      	sxtb	r2, r3
 8000e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000e54:	2301      	movs	r3, #1
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000e58:	e00b      	b.n	8000e72 <xQueueGenericSendFromISR+0x17a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f004 fdef 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000e62:	4601      	mov	r1, r0
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	461a      	mov	r2, r3
 8000e68:	2060      	movs	r0, #96	; 0x60
 8000e6a:	f003 ff53 	bl	8004d14 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e74:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000e7c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3740      	adds	r7, #64	; 0x40
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08f      	sub	sp, #60	; 0x3c
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <xQueueReceive+0x34>
        __asm volatile
 8000ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea6:	b672      	cpsid	i
 8000ea8:	f383 8811 	msr	BASEPRI, r3
 8000eac:	f3bf 8f6f 	isb	sy
 8000eb0:	f3bf 8f4f 	dsb	sy
 8000eb4:	b662      	cpsie	i
 8000eb6:	623b      	str	r3, [r7, #32]
    }
 8000eb8:	bf00      	nop
 8000eba:	e7fe      	b.n	8000eba <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d103      	bne.n	8000eca <xQueueReceive+0x42>
 8000ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <xQueueReceive+0x46>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <xQueueReceive+0x48>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10c      	bne.n	8000eee <xQueueReceive+0x66>
        __asm volatile
 8000ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed8:	b672      	cpsid	i
 8000eda:	f383 8811 	msr	BASEPRI, r3
 8000ede:	f3bf 8f6f 	isb	sy
 8000ee2:	f3bf 8f4f 	dsb	sy
 8000ee6:	b662      	cpsie	i
 8000ee8:	61fb      	str	r3, [r7, #28]
    }
 8000eea:	bf00      	nop
 8000eec:	e7fe      	b.n	8000eec <xQueueReceive+0x64>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000eee:	f001 f919 	bl	8002124 <xTaskGetSchedulerState>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <xQueueReceive+0x76>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <xQueueReceive+0x7a>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <xQueueReceive+0x7c>
 8000f02:	2300      	movs	r3, #0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10c      	bne.n	8000f22 <xQueueReceive+0x9a>
        __asm volatile
 8000f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0c:	b672      	cpsid	i
 8000f0e:	f383 8811 	msr	BASEPRI, r3
 8000f12:	f3bf 8f6f 	isb	sy
 8000f16:	f3bf 8f4f 	dsb	sy
 8000f1a:	b662      	cpsie	i
 8000f1c:	61bb      	str	r3, [r7, #24]
    }
 8000f1e:	bf00      	nop
 8000f20:	e7fe      	b.n	8000f20 <xQueueReceive+0x98>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f22:	f002 f9a5 	bl	8003270 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d02f      	beq.n	8000f92 <xQueueReceive+0x10a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f36:	f000 f9fc 	bl	8001332 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fd7f 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000f42:	4604      	mov	r4, r0
 8000f44:	2000      	movs	r0, #0
 8000f46:	f004 fd7b 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	9100      	str	r1, [sp, #0]
 8000f52:	4621      	mov	r1, r4
 8000f54:	205c      	movs	r0, #92	; 0x5c
 8000f56:	f003 ffad 	bl	8004eb4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	1e5a      	subs	r2, r3, #1
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00f      	beq.n	8000f8a <xQueueReceive+0x102>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 ff32 	bl	8001dd8 <xTaskRemoveFromEventList>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <xQueueReceive+0x102>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <xQueueReceive+0x228>)
 8000f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	f3bf 8f4f 	dsb	sy
 8000f86:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f8a:	f002 f9a5 	bl	80032d8 <vPortExitCritical>
                return pdPASS;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e08a      	b.n	80010a8 <xQueueReceive+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d113      	bne.n	8000fc0 <xQueueReceive+0x138>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000f98:	f002 f99e 	bl	80032d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fd4e 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f004 fd4a 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8000fac:	4602      	mov	r2, r0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	9100      	str	r1, [sp, #0]
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	205c      	movs	r0, #92	; 0x5c
 8000fb8:	f003 ff7c 	bl	8004eb4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e073      	b.n	80010a8 <xQueueReceive+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <xQueueReceive+0x14c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ff6c 	bl	8001ea8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000fd4:	f002 f980 	bl	80032d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000fd8:	f000 fcac 	bl	8001934 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000fdc:	f002 f948 	bl	8003270 <vPortEnterCritical>
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d103      	bne.n	8000ff6 <xQueueReceive+0x16e>
 8000fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001002:	d103      	bne.n	800100c <xQueueReceive+0x184>
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800100c:	f002 f964 	bl	80032d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001010:	1d3a      	adds	r2, r7, #4
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f000 ff5b 	bl	8001ed4 <xTaskCheckForTimeOut>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d124      	bne.n	800106e <xQueueReceive+0x1e6>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001026:	f000 f9fc 	bl	8001422 <prvIsQueueEmpty>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d018      	beq.n	8001062 <xQueueReceive+0x1da>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001032:	3324      	adds	r3, #36	; 0x24
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f000 fe77 	bl	8001d2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800103e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001040:	f000 f99d 	bl	800137e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001044:	f000 fc84 	bl	8001950 <xTaskResumeAll>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	f47f af69 	bne.w	8000f22 <xQueueReceive+0x9a>
                {
                    portYIELD_WITHIN_API();
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <xQueueReceive+0x228>)
 8001052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	f3bf 8f4f 	dsb	sy
 800105c:	f3bf 8f6f 	isb	sy
 8001060:	e75f      	b.n	8000f22 <xQueueReceive+0x9a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001064:	f000 f98b 	bl	800137e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001068:	f000 fc72 	bl	8001950 <xTaskResumeAll>
 800106c:	e759      	b.n	8000f22 <xQueueReceive+0x9a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800106e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001070:	f000 f985 	bl	800137e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001074:	f000 fc6c 	bl	8001950 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800107a:	f000 f9d2 	bl	8001422 <prvIsQueueEmpty>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	f43f af4e 	beq.w	8000f22 <xQueueReceive+0x9a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001088:	4618      	mov	r0, r3
 800108a:	f004 fcd9 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 800108e:	4604      	mov	r4, r0
 8001090:	2000      	movs	r0, #0
 8001092:	f004 fcd5 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8001096:	4602      	mov	r2, r0
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2101      	movs	r1, #1
 800109c:	9100      	str	r1, [sp, #0]
 800109e:	4621      	mov	r1, r4
 80010a0:	205c      	movs	r0, #92	; 0x5c
 80010a2:	f003 ff07 	bl	8004eb4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80010a6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3734      	adds	r7, #52	; 0x34
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	e000ed04 	.word	0xe000ed04

080010b4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b091      	sub	sp, #68	; 0x44
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80010c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <xQueueReceiveFromISR+0x30>
        __asm volatile
 80010ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ce:	b672      	cpsid	i
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	b662      	cpsie	i
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80010e0:	bf00      	nop
 80010e2:	e7fe      	b.n	80010e2 <xQueueReceiveFromISR+0x2e>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d103      	bne.n	80010f2 <xQueueReceiveFromISR+0x3e>
 80010ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <xQueueReceiveFromISR+0x42>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <xQueueReceiveFromISR+0x44>
 80010f6:	2300      	movs	r3, #0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10c      	bne.n	8001116 <xQueueReceiveFromISR+0x62>
        __asm volatile
 80010fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001100:	b672      	cpsid	i
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	b662      	cpsie	i
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001112:	bf00      	nop
 8001114:	e7fe      	b.n	8001114 <xQueueReceiveFromISR+0x60>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001116:	f002 f99b 	bl	8003450 <vPortValidateInterruptPriority>
        __asm volatile
 800111a:	f3ef 8211 	mrs	r2, BASEPRI
 800111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001122:	b672      	cpsid	i
 8001124:	f383 8811 	msr	BASEPRI, r3
 8001128:	f3bf 8f6f 	isb	sy
 800112c:	f3bf 8f4f 	dsb	sy
 8001130:	b662      	cpsie	i
 8001132:	623a      	str	r2, [r7, #32]
 8001134:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8001136:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800113a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001142:	2b00      	cmp	r3, #0
 8001144:	d04f      	beq.n	80011e6 <xQueueReceiveFromISR+0x132>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8001146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800114c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8001150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001152:	4618      	mov	r0, r3
 8001154:	f004 fc74 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8001158:	4604      	mov	r4, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fc6f 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 8001162:	4602      	mov	r2, r0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4621      	mov	r1, r4
 8001168:	2062      	movs	r0, #98	; 0x62
 800116a:	f003 fe2d 	bl	8004dc8 <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001172:	f000 f8de 	bl	8001332 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800117e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001186:	d112      	bne.n	80011ae <xQueueReceiveFromISR+0xfa>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d027      	beq.n	80011e0 <xQueueReceiveFromISR+0x12c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001192:	3310      	adds	r3, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fe1f 	bl	8001dd8 <xTaskRemoveFromEventList>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01f      	beq.n	80011e0 <xQueueReceiveFromISR+0x12c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01c      	beq.n	80011e0 <xQueueReceiveFromISR+0x12c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e018      	b.n	80011e0 <xQueueReceiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80011ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011b2:	2b7f      	cmp	r3, #127	; 0x7f
 80011b4:	d10c      	bne.n	80011d0 <xQueueReceiveFromISR+0x11c>
        __asm volatile
 80011b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ba:	b672      	cpsid	i
 80011bc:	f383 8811 	msr	BASEPRI, r3
 80011c0:	f3bf 8f6f 	isb	sy
 80011c4:	f3bf 8f4f 	dsb	sy
 80011c8:	b662      	cpsie	i
 80011ca:	61bb      	str	r3, [r7, #24]
    }
 80011cc:	bf00      	nop
 80011ce:	e7fe      	b.n	80011ce <xQueueReceiveFromISR+0x11a>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80011d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80011e0:	2301      	movs	r3, #1
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011e4:	e010      	b.n	8001208 <xQueueReceiveFromISR+0x154>
        }
        else
        {
            xReturn = pdFAIL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 80011ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 fc27 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 80011f2:	4604      	mov	r4, r0
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 fc22 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4621      	mov	r1, r4
 8001202:	2062      	movs	r0, #98	; 0x62
 8001204:	f003 fde0 	bl	8004dc8 <SEGGER_SYSVIEW_RecordU32x3>
 8001208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f383 8811 	msr	BASEPRI, r3
    }
 8001212:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001216:	4618      	mov	r0, r3
 8001218:	3744      	adds	r7, #68	; 0x44
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}

0800121e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10c      	bne.n	8001246 <uxQueueMessagesWaiting+0x28>
        __asm volatile
 800122c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001230:	b672      	cpsid	i
 8001232:	f383 8811 	msr	BASEPRI, r3
 8001236:	f3bf 8f6f 	isb	sy
 800123a:	f3bf 8f4f 	dsb	sy
 800123e:	b662      	cpsie	i
 8001240:	60bb      	str	r3, [r7, #8]
    }
 8001242:	bf00      	nop
 8001244:	e7fe      	b.n	8001244 <uxQueueMessagesWaiting+0x26>

    taskENTER_CRITICAL();
 8001246:	f002 f813 	bl	8003270 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8001250:	f002 f842 	bl	80032d8 <vPortExitCritical>

    return uxReturn;
 8001254:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10d      	bne.n	8001298 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14d      	bne.n	8001320 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 ff69 	bl	8002160 <xTaskPriorityDisinherit>
 800128e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	e043      	b.n	8001320 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d119      	bne.n	80012d2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6858      	ldr	r0, [r3, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	461a      	mov	r2, r3
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	f00e fa15 	bl	800f6d8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	441a      	add	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d32b      	bcc.n	8001320 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	e026      	b.n	8001320 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	68d8      	ldr	r0, [r3, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	461a      	mov	r2, r3
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	f00e f9fb 	bl	800f6d8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	425b      	negs	r3, r3
 80012ec:	441a      	add	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d207      	bcs.n	800130e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	425b      	negs	r3, r3
 8001308:	441a      	add	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d105      	bne.n	8001320 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	3b01      	subs	r3, #1
 800131e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001328:	697b      	ldr	r3, [r7, #20]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d018      	beq.n	8001376 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	441a      	add	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	429a      	cmp	r2, r3
 800135c:	d303      	bcc.n	8001366 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68d9      	ldr	r1, [r3, #12]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	461a      	mov	r2, r3
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f00e f9b1 	bl	800f6d8 <memcpy>
    }
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001386:	f001 ff73 	bl	8003270 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001390:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001392:	e011      	b.n	80013b8 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	2b00      	cmp	r3, #0
 800139a:	d012      	beq.n	80013c2 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3324      	adds	r3, #36	; 0x24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fd19 	bl	8001dd8 <xTaskRemoveFromEventList>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80013ac:	f000 fdfc 	bl	8001fa8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dce9      	bgt.n	8001394 <prvUnlockQueue+0x16>
 80013c0:	e000      	b.n	80013c4 <prvUnlockQueue+0x46>
                        break;
 80013c2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80013cc:	f001 ff84 	bl	80032d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80013d0:	f001 ff4e 	bl	8003270 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013da:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80013dc:	e011      	b.n	8001402 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d012      	beq.n	800140c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3310      	adds	r3, #16
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fcf4 	bl	8001dd8 <xTaskRemoveFromEventList>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80013f6:	f000 fdd7 	bl	8001fa8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001406:	2b00      	cmp	r3, #0
 8001408:	dce9      	bgt.n	80013de <prvUnlockQueue+0x60>
 800140a:	e000      	b.n	800140e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800140c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	22ff      	movs	r2, #255	; 0xff
 8001412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001416:	f001 ff5f 	bl	80032d8 <vPortExitCritical>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800142a:	f001 ff21 	bl	8003270 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001436:	2301      	movs	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e001      	b.n	8001440 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001440:	f001 ff4a 	bl	80032d8 <vPortExitCritical>

    return xReturn;
 8001444:	68fb      	ldr	r3, [r7, #12]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001456:	f001 ff0b 	bl	8003270 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	429a      	cmp	r2, r3
 8001464:	d102      	bne.n	800146c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001466:	2301      	movs	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e001      	b.n	8001470 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001470:	f001 ff32 	bl	80032d8 <vPortExitCritical>

    return xReturn;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800147e:	b480      	push	{r7}
 8001480:	b087      	sub	sp, #28
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10c      	bne.n	80014aa <xQueueIsQueueFullFromISR+0x2c>
        __asm volatile
 8001490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001494:	b672      	cpsid	i
 8001496:	f383 8811 	msr	BASEPRI, r3
 800149a:	f3bf 8f6f 	isb	sy
 800149e:	f3bf 8f4f 	dsb	sy
 80014a2:	b662      	cpsie	i
 80014a4:	60fb      	str	r3, [r7, #12]
    }
 80014a6:	bf00      	nop
 80014a8:	e7fe      	b.n	80014a8 <xQueueIsQueueFullFromISR+0x2a>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d102      	bne.n	80014bc <xQueueIsQueueFullFromISR+0x3e>
    {
        xReturn = pdTRUE;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e001      	b.n	80014c0 <xQueueIsQueueFullFromISR+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80014c0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80014c2:	4618      	mov	r0, r3
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e01e      	b.n	800151e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80014e0:	4a13      	ldr	r2, [pc, #76]	; (8001530 <vQueueAddToRegistry+0x60>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d115      	bne.n	8001518 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80014ec:	4910      	ldr	r1, [pc, #64]	; (8001530 <vQueueAddToRegistry+0x60>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <vQueueAddToRegistry+0x60>)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fa9b 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 800150a:	4601      	mov	r1, r0
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	2071      	movs	r0, #113	; 0x71
 8001512:	f003 fbff 	bl	8004d14 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001516:	e006      	b.n	8001526 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b07      	cmp	r3, #7
 8001522:	d9dd      	bls.n	80014e0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	240000bc 	.word	0x240000bc

08001534 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001544:	f001 fe94 	bl	8003270 <vPortEnterCritical>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800154e:	b25b      	sxtb	r3, r3
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d103      	bne.n	800155e <vQueueWaitForMessageRestricted+0x2a>
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001564:	b25b      	sxtb	r3, r3
 8001566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156a:	d103      	bne.n	8001574 <vQueueWaitForMessageRestricted+0x40>
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001574:	f001 feb0 	bl	80032d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157c:	2b00      	cmp	r3, #0
 800157e:	d106      	bne.n	800158e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3324      	adds	r3, #36	; 0x24
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fbf5 	bl	8001d78 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff fef5 	bl	800137e <prvUnlockQueue>
    }
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 ff91 	bl	80034d8 <pvPortMalloc>
 80015b6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00e      	beq.n	80015dc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80015be:	205c      	movs	r0, #92	; 0x5c
 80015c0:	f001 ff8a 	bl	80034d8 <pvPortMalloc>
 80015c4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
 80015d2:	e005      	b.n	80015e0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f002 f865 	bl	80036a4 <vPortFree>
 80015da:	e001      	b.n	80015e0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d013      	beq.n	800160e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	2300      	movs	r3, #0
 80015ea:	9303      	str	r3, [sp, #12]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f80e 	bl	800161e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001602:	69f8      	ldr	r0, [r7, #28]
 8001604:	f000 f8a4 	bl	8001750 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001608:	2301      	movs	r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	e002      	b.n	8001614 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001614:	69bb      	ldr	r3, [r7, #24]
    }
 8001616:	4618      	mov	r0, r3
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b088      	sub	sp, #32
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	461a      	mov	r2, r3
 8001636:	21a5      	movs	r1, #165	; 0xa5
 8001638:	f00e f85c 	bl	800f6f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001646:	440b      	add	r3, r1
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f023 0307 	bic.w	r3, r3, #7
 8001654:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00c      	beq.n	800167a <prvInitialiseNewTask+0x5c>
        __asm volatile
 8001660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001664:	b672      	cpsid	i
 8001666:	f383 8811 	msr	BASEPRI, r3
 800166a:	f3bf 8f6f 	isb	sy
 800166e:	f3bf 8f4f 	dsb	sy
 8001672:	b662      	cpsie	i
 8001674:	617b      	str	r3, [r7, #20]
    }
 8001676:	bf00      	nop
 8001678:	e7fe      	b.n	8001678 <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01f      	beq.n	80016c0 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	e012      	b.n	80016ac <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	7819      	ldrb	r1, [r3, #0]
 800168e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	3334      	adds	r3, #52	; 0x34
 8001696:	460a      	mov	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	d9e9      	bls.n	8001686 <prvInitialiseNewTask+0x68>
 80016b2:	e000      	b.n	80016b6 <prvInitialiseNewTask+0x98>
            {
                break;
 80016b4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016be:	e003      	b.n	80016c8 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80016c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d901      	bls.n	80016d2 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016ce:	2306      	movs	r3, #6
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016dc:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80016de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e0:	2200      	movs	r2, #0
 80016e2:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e6:	3304      	adds	r3, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f84b 	bl	8000784 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80016ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f0:	3318      	adds	r3, #24
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f846 	bl	8000784 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80016f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	f1c3 0207 	rsb	r2, r3, #7
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001710:	3354      	adds	r3, #84	; 0x54
 8001712:	2204      	movs	r2, #4
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f00d ffec 	bl	800f6f4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	3358      	adds	r3, #88	; 0x58
 8001720:	2201      	movs	r2, #1
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f00d ffe5 	bl	800f6f4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	69b8      	ldr	r0, [r7, #24]
 8001730:	f001 fc92 	bl	8003058 <pxPortInitialiseStack>
 8001734:	4602      	mov	r2, r0
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001744:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af02      	add	r7, sp, #8
 8001756:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001758:	f001 fd8a 	bl	8003270 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <prvAddNewTaskToReadyList+0xfc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4a3a      	ldr	r2, [pc, #232]	; (800184c <prvAddNewTaskToReadyList+0xfc>)
 8001764:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <prvAddNewTaskToReadyList+0x100>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800176e:	4a38      	ldr	r2, [pc, #224]	; (8001850 <prvAddNewTaskToReadyList+0x100>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <prvAddNewTaskToReadyList+0xfc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d110      	bne.n	800179e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800177c:	f000 fc38 	bl	8001ff0 <prvInitialiseTaskLists>
 8001780:	e00d      	b.n	800179e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <prvAddNewTaskToReadyList+0x104>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <prvAddNewTaskToReadyList+0x100>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	429a      	cmp	r2, r3
 8001796:	d802      	bhi.n	800179e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001798:	4a2d      	ldr	r2, [pc, #180]	; (8001850 <prvAddNewTaskToReadyList+0x100>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <prvAddNewTaskToReadyList+0x108>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <prvAddNewTaskToReadyList+0x108>)
 80017a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <prvAddNewTaskToReadyList+0x108>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d016      	beq.n	80017e4 <prvAddNewTaskToReadyList+0x94>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 f81b 	bl	80057f4 <SEGGER_SYSVIEW_OnTaskCreate>
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	461d      	mov	r5, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	461c      	mov	r4, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	1ae3      	subs	r3, r4, r3
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	462b      	mov	r3, r5
 80017e0:	f002 f932 	bl	8003a48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 f888 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <prvAddNewTaskToReadyList+0x10c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	4a18      	ldr	r2, [pc, #96]	; (800185c <prvAddNewTaskToReadyList+0x10c>)
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4a15      	ldr	r2, [pc, #84]	; (8001860 <prvAddNewTaskToReadyList+0x110>)
 800180c:	441a      	add	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7fe ffc2 	bl	800079e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800181a:	f001 fd5d 	bl	80032d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <prvAddNewTaskToReadyList+0x104>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00e      	beq.n	8001844 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <prvAddNewTaskToReadyList+0x100>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <prvAddNewTaskToReadyList+0x114>)
 8001836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f3bf 8f4f 	dsb	sy
 8001840:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bdb0      	pop	{r4, r5, r7, pc}
 800184c:	240001fc 	.word	0x240001fc
 8001850:	240000fc 	.word	0x240000fc
 8001854:	24000208 	.word	0x24000208
 8001858:	24000218 	.word	0x24000218
 800185c:	24000204 	.word	0x24000204
 8001860:	24000100 	.word	0x24000100
 8001864:	e000ed04 	.word	0xe000ed04

08001868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <vTaskStartScheduler+0xac>)
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2300      	movs	r3, #0
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	4927      	ldr	r1, [pc, #156]	; (8001918 <vTaskStartScheduler+0xb0>)
 800187c:	4827      	ldr	r0, [pc, #156]	; (800191c <vTaskStartScheduler+0xb4>)
 800187e:	f7ff fe8d 	bl	800159c <xTaskCreate>
 8001882:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800188a:	f001 f81b 	bl	80028c4 <xTimerCreateTimerTask>
 800188e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d126      	bne.n	80018e4 <vTaskStartScheduler+0x7c>
        __asm volatile
 8001896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189a:	b672      	cpsid	i
 800189c:	f383 8811 	msr	BASEPRI, r3
 80018a0:	f3bf 8f6f 	isb	sy
 80018a4:	f3bf 8f4f 	dsb	sy
 80018a8:	b662      	cpsie	i
 80018aa:	60bb      	str	r3, [r7, #8]
    }
 80018ac:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <vTaskStartScheduler+0xb8>)
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <vTaskStartScheduler+0xbc>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <vTaskStartScheduler+0xc0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <vTaskStartScheduler+0xc4>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <vTaskStartScheduler+0xac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d102      	bne.n	80018d4 <vTaskStartScheduler+0x6c>
 80018ce:	f003 ff75 	bl	80057bc <SEGGER_SYSVIEW_OnIdle>
 80018d2:	e004      	b.n	80018de <vTaskStartScheduler+0x76>
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <vTaskStartScheduler+0xc4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 ffcd 	bl	8005878 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80018de:	f001 fc49 	bl	8003174 <xPortStartScheduler>
 80018e2:	e010      	b.n	8001906 <vTaskStartScheduler+0x9e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ea:	d10c      	bne.n	8001906 <vTaskStartScheduler+0x9e>
        __asm volatile
 80018ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f0:	b672      	cpsid	i
 80018f2:	f383 8811 	msr	BASEPRI, r3
 80018f6:	f3bf 8f6f 	isb	sy
 80018fa:	f3bf 8f4f 	dsb	sy
 80018fe:	b662      	cpsie	i
 8001900:	607b      	str	r3, [r7, #4]
    }
 8001902:	bf00      	nop
 8001904:	e7fe      	b.n	8001904 <vTaskStartScheduler+0x9c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <vTaskStartScheduler+0xc8>)
 8001908:	681b      	ldr	r3, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	24000220 	.word	0x24000220
 8001918:	080109cc 	.word	0x080109cc
 800191c:	08001fc1 	.word	0x08001fc1
 8001920:	2400021c 	.word	0x2400021c
 8001924:	24000208 	.word	0x24000208
 8001928:	24000200 	.word	0x24000200
 800192c:	240000fc 	.word	0x240000fc
 8001930:	24000000 	.word	0x24000000

08001934 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <vTaskSuspendAll+0x18>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a03      	ldr	r2, [pc, #12]	; (800194c <vTaskSuspendAll+0x18>)
 8001940:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	24000224 	.word	0x24000224

08001950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800195e:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <xTaskResumeAll+0x120>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <xTaskResumeAll+0x30>
        __asm volatile
 8001966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196a:	b672      	cpsid	i
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	b662      	cpsie	i
 800197a:	603b      	str	r3, [r7, #0]
    }
 800197c:	bf00      	nop
 800197e:	e7fe      	b.n	800197e <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001980:	f001 fc76 	bl	8003270 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001984:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <xTaskResumeAll+0x120>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	4a39      	ldr	r2, [pc, #228]	; (8001a70 <xTaskResumeAll+0x120>)
 800198c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800198e:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <xTaskResumeAll+0x120>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d165      	bne.n	8001a62 <xTaskResumeAll+0x112>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <xTaskResumeAll+0x124>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d061      	beq.n	8001a62 <xTaskResumeAll+0x112>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800199e:	e032      	b.n	8001a06 <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <xTaskResumeAll+0x128>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3318      	adds	r3, #24
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe ff53 	bl	8000858 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3304      	adds	r3, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe ff4e 	bl	8000858 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 ff9c 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2201      	movs	r2, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <xTaskResumeAll+0x12c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <xTaskResumeAll+0x12c>)
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <xTaskResumeAll+0x130>)
 80019e4:	441a      	add	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3304      	adds	r3, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f7fe fed6 	bl	800079e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <xTaskResumeAll+0x134>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d302      	bcc.n	8001a06 <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <xTaskResumeAll+0x138>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <xTaskResumeAll+0x128>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1c8      	bne.n	80019a0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001a14:	f000 fb6a 	bl	80020ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <xTaskResumeAll+0x13c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001a24:	f000 f858 	bl	8001ad8 <xTaskIncrementTick>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <xTaskResumeAll+0x138>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f1      	bne.n	8001a24 <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <xTaskResumeAll+0x13c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <xTaskResumeAll+0x138>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <xTaskResumeAll+0x112>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <xTaskResumeAll+0x140>)
 8001a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f3bf 8f4f 	dsb	sy
 8001a5e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001a62:	f001 fc39 	bl	80032d8 <vPortExitCritical>

    return xAlreadyYielded;
 8001a66:	68bb      	ldr	r3, [r7, #8]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	24000224 	.word	0x24000224
 8001a74:	240001fc 	.word	0x240001fc
 8001a78:	240001bc 	.word	0x240001bc
 8001a7c:	24000204 	.word	0x24000204
 8001a80:	24000100 	.word	0x24000100
 8001a84:	240000fc 	.word	0x240000fc
 8001a88:	24000210 	.word	0x24000210
 8001a8c:	2400020c 	.word	0x2400020c
 8001a90:	e000ed04 	.word	0xe000ed04

08001a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <xTaskGetTickCount+0x1c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	24000200 	.word	0x24000200

08001ab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001aba:	f001 fcc9 	bl	8003450 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <xTaskGetTickCountFromISR+0x20>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001ac8:	683b      	ldr	r3, [r7, #0]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24000200 	.word	0x24000200

08001ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ae2:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <xTaskIncrementTick+0x150>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 8094 	bne.w	8001c14 <xTaskIncrementTick+0x13c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <xTaskIncrementTick+0x154>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001af4:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <xTaskIncrementTick+0x154>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d122      	bne.n	8001b46 <xTaskIncrementTick+0x6e>
        {
            taskSWITCH_DELAYED_LISTS();
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <xTaskIncrementTick+0x158>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00c      	beq.n	8001b24 <xTaskIncrementTick+0x4c>
        __asm volatile
 8001b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0e:	b672      	cpsid	i
 8001b10:	f383 8811 	msr	BASEPRI, r3
 8001b14:	f3bf 8f6f 	isb	sy
 8001b18:	f3bf 8f4f 	dsb	sy
 8001b1c:	b662      	cpsie	i
 8001b1e:	603b      	str	r3, [r7, #0]
    }
 8001b20:	bf00      	nop
 8001b22:	e7fe      	b.n	8001b22 <xTaskIncrementTick+0x4a>
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <xTaskIncrementTick+0x158>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <xTaskIncrementTick+0x15c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a40      	ldr	r2, [pc, #256]	; (8001c30 <xTaskIncrementTick+0x158>)
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <xTaskIncrementTick+0x15c>)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <xTaskIncrementTick+0x160>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	4a3e      	ldr	r2, [pc, #248]	; (8001c38 <xTaskIncrementTick+0x160>)
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	f000 fad3 	bl	80020ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <xTaskIncrementTick+0x164>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d34c      	bcc.n	8001bea <xTaskIncrementTick+0x112>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b50:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <xTaskIncrementTick+0x158>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <xTaskIncrementTick+0x164>)
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	601a      	str	r2, [r3, #0]
                    break;
 8001b62:	e042      	b.n	8001bea <xTaskIncrementTick+0x112>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b64:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <xTaskIncrementTick+0x158>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d203      	bcs.n	8001b84 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001b7c:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <xTaskIncrementTick+0x164>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b82:	e032      	b.n	8001bea <xTaskIncrementTick+0x112>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fe65 	bl	8000858 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <xTaskIncrementTick+0xc8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	3318      	adds	r3, #24
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fe5c 	bl	8000858 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 feaa 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	2201      	movs	r2, #1
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <xTaskIncrementTick+0x168>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <xTaskIncrementTick+0x168>)
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <xTaskIncrementTick+0x16c>)
 8001bc8:	441a      	add	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	f7fe fde4 	bl	800079e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <xTaskIncrementTick+0x170>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3b5      	bcc.n	8001b50 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001be4:	2301      	movs	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001be8:	e7b2      	b.n	8001b50 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <xTaskIncrementTick+0x170>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf0:	4914      	ldr	r1, [pc, #80]	; (8001c44 <xTaskIncrementTick+0x16c>)
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d901      	bls.n	8001c06 <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <xTaskIncrementTick+0x174>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <xTaskIncrementTick+0x146>
                {
                    xSwitchRequired = pdTRUE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e004      	b.n	8001c1e <xTaskIncrementTick+0x146>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <xTaskIncrementTick+0x178>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <xTaskIncrementTick+0x178>)
 8001c1c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001c1e:	697b      	ldr	r3, [r7, #20]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	24000224 	.word	0x24000224
 8001c2c:	24000200 	.word	0x24000200
 8001c30:	240001b4 	.word	0x240001b4
 8001c34:	240001b8 	.word	0x240001b8
 8001c38:	24000214 	.word	0x24000214
 8001c3c:	2400021c 	.word	0x2400021c
 8001c40:	24000204 	.word	0x24000204
 8001c44:	24000100 	.word	0x24000100
 8001c48:	240000fc 	.word	0x240000fc
 8001c4c:	24000210 	.word	0x24000210
 8001c50:	2400020c 	.word	0x2400020c

08001c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <vTaskSwitchContext+0xc0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <vTaskSwitchContext+0xc4>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001c68:	e04f      	b.n	8001d0a <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <vTaskSwitchContext+0xc4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <vTaskSwitchContext+0xc8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f1c3 031f 	rsb	r3, r3, #31
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	4926      	ldr	r1, [pc, #152]	; (8001d20 <vTaskSwitchContext+0xcc>)
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <vTaskSwitchContext+0x60>
        __asm volatile
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	b672      	cpsid	i
 8001ca0:	f383 8811 	msr	BASEPRI, r3
 8001ca4:	f3bf 8f6f 	isb	sy
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	b662      	cpsie	i
 8001cae:	607b      	str	r3, [r7, #4]
    }
 8001cb0:	bf00      	nop
 8001cb2:	e7fe      	b.n	8001cb2 <vTaskSwitchContext+0x5e>
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <vTaskSwitchContext+0xcc>)
 8001cc0:	4413      	add	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d104      	bne.n	8001ce4 <vTaskSwitchContext+0x90>
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <vTaskSwitchContext+0xd0>)
 8001cec:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <vTaskSwitchContext+0xd0>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <vTaskSwitchContext+0xd4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d102      	bne.n	8001d00 <vTaskSwitchContext+0xac>
 8001cfa:	f003 fd5f 	bl	80057bc <SEGGER_SYSVIEW_OnIdle>
}
 8001cfe:	e004      	b.n	8001d0a <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <vTaskSwitchContext+0xd0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fdb7 	bl	8005878 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	24000224 	.word	0x24000224
 8001d18:	24000210 	.word	0x24000210
 8001d1c:	24000204 	.word	0x24000204
 8001d20:	24000100 	.word	0x24000100
 8001d24:	240000fc 	.word	0x240000fc
 8001d28:	24000220 	.word	0x24000220

08001d2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10c      	bne.n	8001d56 <vTaskPlaceOnEventList+0x2a>
        __asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d40:	b672      	cpsid	i
 8001d42:	f383 8811 	msr	BASEPRI, r3
 8001d46:	f3bf 8f6f 	isb	sy
 8001d4a:	f3bf 8f4f 	dsb	sy
 8001d4e:	b662      	cpsie	i
 8001d50:	60fb      	str	r3, [r7, #12]
    }
 8001d52:	bf00      	nop
 8001d54:	e7fe      	b.n	8001d54 <vTaskPlaceOnEventList+0x28>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <vTaskPlaceOnEventList+0x48>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3318      	adds	r3, #24
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fd41 	bl	80007e6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d64:	2101      	movs	r1, #1
 8001d66:	6838      	ldr	r0, [r7, #0]
 8001d68:	f000 fd34 	bl	80027d4 <prvAddCurrentTaskToDelayedList>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	240000fc 	.word	0x240000fc

08001d78 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <vTaskPlaceOnEventListRestricted+0x2c>
        __asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8e:	b672      	cpsid	i
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	b662      	cpsie	i
 8001d9e:	617b      	str	r3, [r7, #20]
    }
 8001da0:	bf00      	nop
 8001da2:	e7fe      	b.n	8001da2 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <vTaskPlaceOnEventListRestricted+0x5c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3318      	adds	r3, #24
 8001daa:	4619      	mov	r1, r3
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7fe fcf6 	bl	800079e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <vTaskPlaceOnEventListRestricted+0x46>
        {
            xTicksToWait = portMAX_DELAY;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001dbe:	2024      	movs	r0, #36	; 0x24
 8001dc0:	f002 ff4e 	bl	8004c60 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	68b8      	ldr	r0, [r7, #8]
 8001dc8:	f000 fd04 	bl	80027d4 <prvAddCurrentTaskToDelayedList>
    }
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	240000fc 	.word	0x240000fc

08001dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <xTaskRemoveFromEventList+0x30>
        __asm volatile
 8001dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df2:	b672      	cpsid	i
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	b662      	cpsie	i
 8001e02:	60fb      	str	r3, [r7, #12]
    }
 8001e04:	bf00      	nop
 8001e06:	e7fe      	b.n	8001e06 <xTaskRemoveFromEventList+0x2e>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fd23 	bl	8000858 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <xTaskRemoveFromEventList+0xb8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d120      	bne.n	8001e5c <xTaskRemoveFromEventList+0x84>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fd1a 	bl	8000858 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fd68 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	2201      	movs	r2, #1
 8001e32:	409a      	lsls	r2, r3
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <xTaskRemoveFromEventList+0xbc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <xTaskRemoveFromEventList+0xbc>)
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <xTaskRemoveFromEventList+0xc0>)
 8001e4c:	441a      	add	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	3304      	adds	r3, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f7fe fca2 	bl	800079e <vListInsertEnd>
 8001e5a:	e005      	b.n	8001e68 <xTaskRemoveFromEventList+0x90>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	3318      	adds	r3, #24
 8001e60:	4619      	mov	r1, r3
 8001e62:	480e      	ldr	r0, [pc, #56]	; (8001e9c <xTaskRemoveFromEventList+0xc4>)
 8001e64:	f7fe fc9b 	bl	800079e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <xTaskRemoveFromEventList+0xc8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d905      	bls.n	8001e82 <xTaskRemoveFromEventList+0xaa>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <xTaskRemoveFromEventList+0xcc>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e001      	b.n	8001e86 <xTaskRemoveFromEventList+0xae>
    }
    else
    {
        xReturn = pdFALSE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001e86:	697b      	ldr	r3, [r7, #20]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	24000224 	.word	0x24000224
 8001e94:	24000204 	.word	0x24000204
 8001e98:	24000100 	.word	0x24000100
 8001e9c:	240001bc 	.word	0x240001bc
 8001ea0:	240000fc 	.word	0x240000fc
 8001ea4:	24000210 	.word	0x24000210

08001ea8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <vTaskInternalSetTimeOutState+0x24>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <vTaskInternalSetTimeOutState+0x28>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	605a      	str	r2, [r3, #4]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	24000214 	.word	0x24000214
 8001ed0:	24000200 	.word	0x24000200

08001ed4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <xTaskCheckForTimeOut+0x2a>
        __asm volatile
 8001ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee8:	b672      	cpsid	i
 8001eea:	f383 8811 	msr	BASEPRI, r3
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	b662      	cpsie	i
 8001ef8:	613b      	str	r3, [r7, #16]
    }
 8001efa:	bf00      	nop
 8001efc:	e7fe      	b.n	8001efc <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10c      	bne.n	8001f1e <xTaskCheckForTimeOut+0x4a>
        __asm volatile
 8001f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f08:	b672      	cpsid	i
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	b662      	cpsie	i
 8001f18:	60fb      	str	r3, [r7, #12]
    }
 8001f1a:	bf00      	nop
 8001f1c:	e7fe      	b.n	8001f1c <xTaskCheckForTimeOut+0x48>

    taskENTER_CRITICAL();
 8001f1e:	f001 f9a7 	bl	8003270 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <xTaskCheckForTimeOut+0xcc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3a:	d102      	bne.n	8001f42 <xTaskCheckForTimeOut+0x6e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	e026      	b.n	8001f90 <xTaskCheckForTimeOut+0xbc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <xTaskCheckForTimeOut+0xd0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d00a      	beq.n	8001f64 <xTaskCheckForTimeOut+0x90>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d305      	bcc.n	8001f64 <xTaskCheckForTimeOut+0x90>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e015      	b.n	8001f90 <xTaskCheckForTimeOut+0xbc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d20b      	bcs.n	8001f86 <xTaskCheckForTimeOut+0xb2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad2      	subs	r2, r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff94 	bl	8001ea8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	e004      	b.n	8001f90 <xTaskCheckForTimeOut+0xbc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001f90:	f001 f9a2 	bl	80032d8 <vPortExitCritical>

    return xReturn;
 8001f94:	69fb      	ldr	r3, [r7, #28]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	24000200 	.word	0x24000200
 8001fa4:	24000214 	.word	0x24000214

08001fa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <vTaskMissedYield+0x14>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	24000210 	.word	0x24000210

08001fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001fc8:	f000 f852 	bl	8002070 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <prvIdleTask+0x28>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d9f9      	bls.n	8001fc8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <prvIdleTask+0x2c>)
 8001fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001fe4:	e7f0      	b.n	8001fc8 <prvIdleTask+0x8>
 8001fe6:	bf00      	nop
 8001fe8:	24000100 	.word	0x24000100
 8001fec:	e000ed04 	.word	0xe000ed04

08001ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	e00c      	b.n	8002016 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <prvInitialiseTaskLists+0x60>)
 8002008:	4413      	add	r3, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fb9a 	bl	8000744 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3301      	adds	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b06      	cmp	r3, #6
 800201a:	d9ef      	bls.n	8001ffc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800201c:	480d      	ldr	r0, [pc, #52]	; (8002054 <prvInitialiseTaskLists+0x64>)
 800201e:	f7fe fb91 	bl	8000744 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002022:	480d      	ldr	r0, [pc, #52]	; (8002058 <prvInitialiseTaskLists+0x68>)
 8002024:	f7fe fb8e 	bl	8000744 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002028:	480c      	ldr	r0, [pc, #48]	; (800205c <prvInitialiseTaskLists+0x6c>)
 800202a:	f7fe fb8b 	bl	8000744 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800202e:	480c      	ldr	r0, [pc, #48]	; (8002060 <prvInitialiseTaskLists+0x70>)
 8002030:	f7fe fb88 	bl	8000744 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002034:	480b      	ldr	r0, [pc, #44]	; (8002064 <prvInitialiseTaskLists+0x74>)
 8002036:	f7fe fb85 	bl	8000744 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <prvInitialiseTaskLists+0x78>)
 800203c:	4a05      	ldr	r2, [pc, #20]	; (8002054 <prvInitialiseTaskLists+0x64>)
 800203e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <prvInitialiseTaskLists+0x7c>)
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <prvInitialiseTaskLists+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	24000100 	.word	0x24000100
 8002054:	2400018c 	.word	0x2400018c
 8002058:	240001a0 	.word	0x240001a0
 800205c:	240001bc 	.word	0x240001bc
 8002060:	240001d0 	.word	0x240001d0
 8002064:	240001e8 	.word	0x240001e8
 8002068:	240001b4 	.word	0x240001b4
 800206c:	240001b8 	.word	0x240001b8

08002070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002076:	e019      	b.n	80020ac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002078:	f001 f8fa 	bl	8003270 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <prvCheckTasksWaitingTermination+0x50>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3304      	adds	r3, #4
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fbe5 	bl	8000858 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <prvCheckTasksWaitingTermination+0x54>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3b01      	subs	r3, #1
 8002094:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <prvCheckTasksWaitingTermination+0x54>)
 8002096:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <prvCheckTasksWaitingTermination+0x58>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3b01      	subs	r3, #1
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <prvCheckTasksWaitingTermination+0x58>)
 80020a0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80020a2:	f001 f919 	bl	80032d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f810 	bl	80020cc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <prvCheckTasksWaitingTermination+0x58>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e1      	bne.n	8002078 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	240001d0 	.word	0x240001d0
 80020c4:	240001fc 	.word	0x240001fc
 80020c8:	240001e4 	.word	0x240001e4

080020cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 fae3 	bl	80036a4 <vPortFree>
                vPortFree( pxTCB );
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f001 fae0 	bl	80036a4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <prvResetNextTaskUnblockTime+0x30>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d104      	bne.n	8002104 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <prvResetNextTaskUnblockTime+0x34>)
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002102:	e005      	b.n	8002110 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <prvResetNextTaskUnblockTime+0x30>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <prvResetNextTaskUnblockTime+0x34>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	240001b4 	.word	0x240001b4
 8002120:	2400021c 	.word	0x2400021c

08002124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <xTaskGetSchedulerState+0x34>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002132:	2301      	movs	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	e008      	b.n	800214a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <xTaskGetSchedulerState+0x38>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002140:	2302      	movs	r3, #2
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	e001      	b.n	800214a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800214a:	687b      	ldr	r3, [r7, #4]
    }
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	24000208 	.word	0x24000208
 800215c:	24000224 	.word	0x24000224

08002160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d06c      	beq.n	8002250 <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <xTaskPriorityDisinherit+0xfc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d00c      	beq.n	800219a <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002184:	b672      	cpsid	i
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	b662      	cpsie	i
 8002194:	60fb      	str	r3, [r7, #12]
    }
 8002196:	bf00      	nop
 8002198:	e7fe      	b.n	8002198 <xTaskPriorityDisinherit+0x38>
            configASSERT( pxTCB->uxMutexesHeld );
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10c      	bne.n	80021bc <xTaskPriorityDisinherit+0x5c>
        __asm volatile
 80021a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a6:	b672      	cpsid	i
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	b662      	cpsie	i
 80021b6:	60bb      	str	r3, [r7, #8]
    }
 80021b8:	bf00      	nop
 80021ba:	e7fe      	b.n	80021ba <xTaskPriorityDisinherit+0x5a>
            ( pxTCB->uxMutexesHeld )--;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d03e      	beq.n	8002250 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d13a      	bne.n	8002250 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	3304      	adds	r3, #4
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fb3a 	bl	8000858 <uxListRemove>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <xTaskPriorityDisinherit+0xa0>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	2201      	movs	r2, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43da      	mvns	r2, r3
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <xTaskPriorityDisinherit+0x100>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4013      	ands	r3, r2
 80021fc:	4a18      	ldr	r2, [pc, #96]	; (8002260 <xTaskPriorityDisinherit+0x100>)
 80021fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4619      	mov	r1, r3
 8002204:	204a      	movs	r0, #74	; 0x4a
 8002206:	f002 fd49 	bl	8004c9c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	f1c3 0207 	rsb	r2, r3, #7
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	2201      	movs	r2, #1
 8002224:	409a      	lsls	r2, r3
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <xTaskPriorityDisinherit+0x100>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <xTaskPriorityDisinherit+0x100>)
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4a09      	ldr	r2, [pc, #36]	; (8002264 <xTaskPriorityDisinherit+0x104>)
 800223e:	441a      	add	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f7fe faa9 	bl	800079e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800224c:	2301      	movs	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002250:	697b      	ldr	r3, [r7, #20]
    }
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	240000fc 	.word	0x240000fc
 8002260:	24000204 	.word	0x24000204
 8002264:	24000100 	.word	0x24000100

08002268 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00c      	beq.n	8002296 <xTaskGenericNotifyWait+0x2e>
        __asm volatile
 800227c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002280:	b672      	cpsid	i
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	b662      	cpsie	i
 8002290:	613b      	str	r3, [r7, #16]
    }
 8002292:	bf00      	nop
 8002294:	e7fe      	b.n	8002294 <xTaskGenericNotifyWait+0x2c>

        taskENTER_CRITICAL();
 8002296:	f000 ffeb 	bl	8003270 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <xTaskGenericNotifyWait+0x118>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4413      	add	r3, r2
 80022a2:	3358      	adds	r3, #88	; 0x58
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d024      	beq.n	80022f6 <xTaskGenericNotifyWait+0x8e>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80022ac:	4b34      	ldr	r3, [pc, #208]	; (8002380 <xTaskGenericNotifyWait+0x118>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3314      	adds	r3, #20
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	43db      	mvns	r3, r3
 80022be:	4019      	ands	r1, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3314      	adds	r3, #20
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80022ca:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <xTaskGenericNotifyWait+0x118>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	3358      	adds	r3, #88	; 0x58
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <xTaskGenericNotifyWait+0x8e>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80022de:	2101      	movs	r1, #1
 80022e0:	6a38      	ldr	r0, [r7, #32]
 80022e2:	f000 fa77 	bl	80027d4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80022e6:	4b27      	ldr	r3, [pc, #156]	; (8002384 <xTaskGenericNotifyWait+0x11c>)
 80022e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80022f6:	f000 ffef 	bl	80032d8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80022fa:	f000 ffb9 	bl	8003270 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	2040      	movs	r0, #64	; 0x40
 800230c:	f002 fdd2 	bl	8004eb4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <xTaskGenericNotifyWait+0xc0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <xTaskGenericNotifyWait+0x118>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3314      	adds	r3, #20
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <xTaskGenericNotifyWait+0x118>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	3358      	adds	r3, #88	; 0x58
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d002      	beq.n	8002340 <xTaskGenericNotifyWait+0xd8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e010      	b.n	8002362 <xTaskGenericNotifyWait+0xfa>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <xTaskGenericNotifyWait+0x118>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3314      	adds	r3, #20
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	43db      	mvns	r3, r3
 8002352:	4019      	ands	r1, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3314      	adds	r3, #20
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 800235e:	2301      	movs	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <xTaskGenericNotifyWait+0x118>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	3358      	adds	r3, #88	; 0x58
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002370:	f000 ffb2 	bl	80032d8 <vPortExitCritical>

        return xReturn;
 8002374:	697b      	ldr	r3, [r7, #20]
    }
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	240000fc 	.word	0x240000fc
 8002384:	e000ed04 	.word	0xe000ed04

08002388 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	; 0x38
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002396:	2301      	movs	r3, #1
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <xTaskGenericNotify+0x32>
        __asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	b672      	cpsid	i
 80023a6:	f383 8811 	msr	BASEPRI, r3
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	b662      	cpsie	i
 80023b4:	623b      	str	r3, [r7, #32]
    }
 80023b6:	bf00      	nop
 80023b8:	e7fe      	b.n	80023b8 <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10c      	bne.n	80023da <xTaskGenericNotify+0x52>
        __asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	b672      	cpsid	i
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	b662      	cpsie	i
 80023d4:	61fb      	str	r3, [r7, #28]
    }
 80023d6:	bf00      	nop
 80023d8:	e7fe      	b.n	80023d8 <xTaskGenericNotify+0x50>
        pxTCB = xTaskToNotify;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80023de:	f000 ff47 	bl	8003270 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80023e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <xTaskGenericNotify+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80023e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3314      	adds	r3, #20
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80023f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4413      	add	r3, r2
 80023fe:	3358      	adds	r3, #88	; 0x58
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4413      	add	r3, r2
 800240c:	3358      	adds	r3, #88	; 0x58
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d841      	bhi.n	800249c <xTaskGenericNotify+0x114>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <xTaskGenericNotify+0x98>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	080024bf 	.word	0x080024bf
 8002424:	08002435 	.word	0x08002435
 8002428:	08002453 	.word	0x08002453
 800242c:	0800246f 	.word	0x0800246f
 8002430:	0800247f 	.word	0x0800247f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3314      	adds	r3, #20
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	431a      	orrs	r2, r3
 8002444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3314      	adds	r3, #20
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	605a      	str	r2, [r3, #4]
                    break;
 8002450:	e038      	b.n	80024c4 <xTaskGenericNotify+0x13c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3314      	adds	r3, #20
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3314      	adds	r3, #20
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	605a      	str	r2, [r3, #4]
                    break;
 800246c:	e02a      	b.n	80024c4 <xTaskGenericNotify+0x13c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800246e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	3314      	adds	r3, #20
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	605a      	str	r2, [r3, #4]
                    break;
 800247c:	e022      	b.n	80024c4 <xTaskGenericNotify+0x13c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800247e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002482:	2b02      	cmp	r3, #2
 8002484:	d007      	beq.n	8002496 <xTaskGenericNotify+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	3314      	adds	r3, #20
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002494:	e016      	b.n	80024c4 <xTaskGenericNotify+0x13c>
                        xReturn = pdFAIL;
 8002496:	2300      	movs	r3, #0
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800249a:	e013      	b.n	80024c4 <xTaskGenericNotify+0x13c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800249c:	4b35      	ldr	r3, [pc, #212]	; (8002574 <xTaskGenericNotify+0x1ec>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <xTaskGenericNotify+0x13a>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	b672      	cpsid	i
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	b662      	cpsie	i
 80024b8:	61bb      	str	r3, [r7, #24]
    }
 80024ba:	bf00      	nop
 80024bc:	e7fe      	b.n	80024bc <xTaskGenericNotify+0x134>
                    break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <xTaskGenericNotify+0x13c>

                    break;
 80024c2:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 faba 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 80024cc:	4601      	mov	r1, r0
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	203e      	movs	r0, #62	; 0x3e
 80024da:	f002 fceb 	bl	8004eb4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80024de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d13f      	bne.n	8002566 <xTaskGenericNotify+0x1de>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	3304      	adds	r3, #4
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f9b4 	bl	8000858 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fa02 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2201      	movs	r2, #1
 80024fe:	409a      	lsls	r2, r3
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <xTaskGenericNotify+0x1f0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4313      	orrs	r3, r2
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <xTaskGenericNotify+0x1f0>)
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <xTaskGenericNotify+0x1f4>)
 8002518:	441a      	add	r2, r3
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	3304      	adds	r3, #4
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7fe f93c 	bl	800079e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <xTaskGenericNotify+0x1c0>
        __asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	b672      	cpsid	i
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	b662      	cpsie	i
 8002542:	617b      	str	r3, [r7, #20]
    }
 8002544:	bf00      	nop
 8002546:	e7fe      	b.n	8002546 <xTaskGenericNotify+0x1be>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <xTaskGenericNotify+0x1f8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	429a      	cmp	r2, r3
 8002554:	d907      	bls.n	8002566 <xTaskGenericNotify+0x1de>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <xTaskGenericNotify+0x1fc>)
 8002558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002566:	f000 feb7 	bl	80032d8 <vPortExitCritical>

        return xReturn;
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800256c:	4618      	mov	r0, r3
 800256e:	3730      	adds	r7, #48	; 0x30
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	24000200 	.word	0x24000200
 8002578:	24000204 	.word	0x24000204
 800257c:	24000100 	.word	0x24000100
 8002580:	240000fc 	.word	0x240000fc
 8002584:	e000ed04 	.word	0xe000ed04

08002588 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002588:	b580      	push	{r7, lr}
 800258a:	b092      	sub	sp, #72	; 0x48
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002596:	2301      	movs	r3, #1
 8002598:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10c      	bne.n	80025ba <xTaskGenericNotifyFromISR+0x32>
        __asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	b672      	cpsid	i
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	b662      	cpsie	i
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xTaskGenericNotifyFromISR+0x30>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00c      	beq.n	80025da <xTaskGenericNotifyFromISR+0x52>
        __asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c4:	b672      	cpsid	i
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	b662      	cpsie	i
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025d6:	bf00      	nop
 80025d8:	e7fe      	b.n	80025d8 <xTaskGenericNotifyFromISR+0x50>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025da:	f000 ff39 	bl	8003450 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80025e2:	f3ef 8211 	mrs	r2, BASEPRI
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	b672      	cpsid	i
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	b662      	cpsie	i
 80025fa:	627a      	str	r2, [r7, #36]	; 0x24
 80025fc:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8002602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <xTaskGenericNotifyFromISR+0x90>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3314      	adds	r3, #20
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002616:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4413      	add	r3, r2
 800261e:	3358      	adds	r3, #88	; 0x58
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4413      	add	r3, r2
 800262c:	3358      	adds	r3, #88	; 0x58
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d841      	bhi.n	80026bc <xTaskGenericNotifyFromISR+0x134>
 8002638:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <xTaskGenericNotifyFromISR+0xb8>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	080026df 	.word	0x080026df
 8002644:	08002655 	.word	0x08002655
 8002648:	08002673 	.word	0x08002673
 800264c:	0800268f 	.word	0x0800268f
 8002650:	0800269f 	.word	0x0800269f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3314      	adds	r3, #20
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	431a      	orrs	r2, r3
 8002664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3314      	adds	r3, #20
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	605a      	str	r2, [r3, #4]
                    break;
 8002670:	e038      	b.n	80026e4 <xTaskGenericNotifyFromISR+0x15c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	3314      	adds	r3, #20
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3314      	adds	r3, #20
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	605a      	str	r2, [r3, #4]
                    break;
 800268c:	e02a      	b.n	80026e4 <xTaskGenericNotifyFromISR+0x15c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800268e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	3314      	adds	r3, #20
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	605a      	str	r2, [r3, #4]
                    break;
 800269c:	e022      	b.n	80026e4 <xTaskGenericNotifyFromISR+0x15c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800269e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d007      	beq.n	80026b6 <xTaskGenericNotifyFromISR+0x12e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80026a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	3314      	adds	r3, #20
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80026b4:	e016      	b.n	80026e4 <xTaskGenericNotifyFromISR+0x15c>
                        xReturn = pdFAIL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80026ba:	e013      	b.n	80026e4 <xTaskGenericNotifyFromISR+0x15c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <xTaskGenericNotifyFromISR+0x230>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00e      	beq.n	80026e2 <xTaskGenericNotifyFromISR+0x15a>
        __asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	b672      	cpsid	i
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	b662      	cpsie	i
 80026d8:	61fb      	str	r3, [r7, #28]
    }
 80026da:	bf00      	nop
 80026dc:	e7fe      	b.n	80026dc <xTaskGenericNotifyFromISR+0x154>
                    break;
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <xTaskGenericNotifyFromISR+0x15c>
                    break;
 80026e2:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 f9aa 	bl	8005a40 <SEGGER_SYSVIEW_ShrinkId>
 80026ec:	78f9      	ldrb	r1, [r7, #3]
 80026ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026f2:	9201      	str	r2, [sp, #4]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	460b      	mov	r3, r1
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4601      	mov	r1, r0
 80026fc:	203f      	movs	r0, #63	; 0x3f
 80026fe:	f002 fc6b 	bl	8004fd8 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002702:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002706:	2b01      	cmp	r3, #1
 8002708:	d14b      	bne.n	80027a2 <xTaskGenericNotifyFromISR+0x21a>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <xTaskGenericNotifyFromISR+0x1a4>
        __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	b672      	cpsid	i
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	b662      	cpsie	i
 8002726:	61bb      	str	r3, [r7, #24]
    }
 8002728:	bf00      	nop
 800272a:	e7fe      	b.n	800272a <xTaskGenericNotifyFromISR+0x1a2>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800272c:	4b23      	ldr	r3, [pc, #140]	; (80027bc <xTaskGenericNotifyFromISR+0x234>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d120      	bne.n	8002776 <xTaskGenericNotifyFromISR+0x1ee>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	3304      	adds	r3, #4
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe f88d 	bl	8000858 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	4618      	mov	r0, r3
 8002742:	f003 f8db 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	2201      	movs	r2, #1
 800274c:	409a      	lsls	r2, r3
 800274e:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <xTaskGenericNotifyFromISR+0x238>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <xTaskGenericNotifyFromISR+0x238>)
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <xTaskGenericNotifyFromISR+0x23c>)
 8002766:	441a      	add	r2, r3
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	3304      	adds	r3, #4
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f7fe f815 	bl	800079e <vListInsertEnd>
 8002774:	e005      	b.n	8002782 <xTaskGenericNotifyFromISR+0x1fa>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	3318      	adds	r3, #24
 800277a:	4619      	mov	r1, r3
 800277c:	4812      	ldr	r0, [pc, #72]	; (80027c8 <xTaskGenericNotifyFromISR+0x240>)
 800277e:	f7fe f80e 	bl	800079e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <xTaskGenericNotifyFromISR+0x244>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	429a      	cmp	r2, r3
 800278e:	d908      	bls.n	80027a2 <xTaskGenericNotifyFromISR+0x21a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <xTaskGenericNotifyFromISR+0x214>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <xTaskGenericNotifyFromISR+0x248>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	617b      	str	r3, [r7, #20]
        __asm volatile
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f383 8811 	msr	BASEPRI, r3
    }
 80027ac:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80027ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80027b0:	4618      	mov	r0, r3
 80027b2:	3740      	adds	r7, #64	; 0x40
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	24000200 	.word	0x24000200
 80027bc:	24000224 	.word	0x24000224
 80027c0:	24000204 	.word	0x24000204
 80027c4:	24000100 	.word	0x24000100
 80027c8:	240001bc 	.word	0x240001bc
 80027cc:	240000fc 	.word	0x240000fc
 80027d0:	24000210 	.word	0x24000210

080027d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80027de:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027e4:	4b31      	ldr	r3, [pc, #196]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3304      	adds	r3, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe f834 	bl	8000858 <uxListRemove>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10b      	bne.n	800280e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	2201      	movs	r2, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4013      	ands	r3, r2
 800280a:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800280c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d110      	bne.n	8002838 <prvAddCurrentTaskToDelayedList+0x64>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	211b      	movs	r1, #27
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f8ac 	bl	8005980 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3304      	adds	r3, #4
 800282e:	4619      	mov	r1, r3
 8002830:	4820      	ldr	r0, [pc, #128]	; (80028b4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002832:	f7fd ffb4 	bl	800079e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002836:	e032      	b.n	800289e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d20f      	bcs.n	8002870 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2104      	movs	r1, #4
 8002856:	4618      	mov	r0, r3
 8002858:	f003 f892 	bl	8005980 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3304      	adds	r3, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f7fd ffbc 	bl	80007e6 <vListInsert>
}
 800286e:	e016      	b.n	800289e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2104      	movs	r1, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f003 f882 	bl	8005980 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3304      	adds	r3, #4
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f7fd ffac 	bl	80007e6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	429a      	cmp	r2, r3
 8002896:	d202      	bcs.n	800289e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002898:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	6013      	str	r3, [r2, #0]
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	24000200 	.word	0x24000200
 80028ac:	240000fc 	.word	0x240000fc
 80028b0:	24000204 	.word	0x24000204
 80028b4:	240001e8 	.word	0x240001e8
 80028b8:	240001b8 	.word	0x240001b8
 80028bc:	240001b4 	.word	0x240001b4
 80028c0:	2400021c 	.word	0x2400021c

080028c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80028ce:	f000 fb3f 	bl	8002f50 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <xTimerCreateTimerTask+0x58>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <xTimerCreateTimerTask+0x5c>)
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	2302      	movs	r3, #2
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e8:	490e      	ldr	r1, [pc, #56]	; (8002924 <xTimerCreateTimerTask+0x60>)
 80028ea:	480f      	ldr	r0, [pc, #60]	; (8002928 <xTimerCreateTimerTask+0x64>)
 80028ec:	f7fe fe56 	bl	800159c <xTaskCreate>
 80028f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10c      	bne.n	8002912 <xTimerCreateTimerTask+0x4e>
        __asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	b672      	cpsid	i
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	b662      	cpsie	i
 800290c:	603b      	str	r3, [r7, #0]
    }
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xTimerCreateTimerTask+0x4c>
        return xReturn;
 8002912:	687b      	ldr	r3, [r7, #4]
    }
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	24000258 	.word	0x24000258
 8002920:	2400025c 	.word	0x2400025c
 8002924:	080109d4 	.word	0x080109d4
 8002928:	08002b25 	.word	0x08002b25

0800292c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800293a:	202c      	movs	r0, #44	; 0x2c
 800293c:	f000 fdcc 	bl	80034d8 <pvPortMalloc>
 8002940:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f805 	bl	800296e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8002964:	697b      	ldr	r3, [r7, #20]
        }
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <prvInitialiseNewTimer+0x2e>
        __asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	b672      	cpsid	i
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	b662      	cpsie	i
 8002996:	617b      	str	r3, [r7, #20]
    }
 8002998:	bf00      	nop
 800299a:	e7fe      	b.n	800299a <prvInitialiseNewTimer+0x2c>

        if( pxNewTimer != NULL )
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01e      	beq.n	80029e0 <prvInitialiseNewTimer+0x72>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80029a2:	f000 fad5 	bl	8002f50 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	6a3a      	ldr	r2, [r7, #32]
 80029bc:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	3304      	adds	r3, #4
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fede 	bl	8000784 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <prvInitialiseNewTimer+0x72>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10c      	bne.n	8002a1a <xTimerGenericCommand+0x32>
        __asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	b672      	cpsid	i
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	b662      	cpsie	i
 8002a14:	623b      	str	r3, [r7, #32]
    }
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xTimerGenericCommand+0x30>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <xTimerGenericCommand+0x9c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d02a      	beq.n	8002a78 <xTimerGenericCommand+0x90>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	dc18      	bgt.n	8002a66 <xTimerGenericCommand+0x7e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002a34:	f7ff fb76 	bl	8002124 <xTaskGetSchedulerState>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d109      	bne.n	8002a52 <xTimerGenericCommand+0x6a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <xTimerGenericCommand+0x9c>)
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	f107 0114 	add.w	r1, r7, #20
 8002a46:	2300      	movs	r3, #0
 8002a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4a:	f7fe f827 	bl	8000a9c <xQueueGenericSend>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8002a50:	e012      	b.n	8002a78 <xTimerGenericCommand+0x90>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <xTimerGenericCommand+0x9c>)
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	f107 0114 	add.w	r1, r7, #20
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f7fe f81d 	bl	8000a9c <xQueueGenericSend>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24
 8002a64:	e008      	b.n	8002a78 <xTimerGenericCommand+0x90>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <xTimerGenericCommand+0x9c>)
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	f107 0114 	add.w	r1, r7, #20
 8002a6e:	2300      	movs	r3, #0
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	f7fe f941 	bl	8000cf8 <xQueueGenericSendFromISR>
 8002a76:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	24000258 	.word	0x24000258

08002a88 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <prvProcessExpiredTimer+0x98>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fed9 	bl	8000858 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d024      	beq.n	8002afe <prvProcessExpiredTimer+0x76>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	18d1      	adds	r1, r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	6978      	ldr	r0, [r7, #20]
 8002ac2:	f000 f8d3 	bl	8002c6c <prvInsertTimerInActiveList>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d021      	beq.n	8002b10 <prvProcessExpiredTimer+0x88>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002acc:	2300      	movs	r3, #0
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff86 	bl	80029e8 <xTimerGenericCommand>
 8002adc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d115      	bne.n	8002b10 <prvProcessExpiredTimer+0x88>
        __asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	b672      	cpsid	i
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	b662      	cpsie	i
 8002af8:	60fb      	str	r3, [r7, #12]
    }
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <prvProcessExpiredTimer+0x74>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	6978      	ldr	r0, [r7, #20]
 8002b16:	4798      	blx	r3
    }
 8002b18:	bf00      	nop
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	24000250 	.word	0x24000250

08002b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b2c:	f107 0308 	add.w	r3, r7, #8
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 f857 	bl	8002be4 <prvGetNextExpireTime>
 8002b36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f803 	bl	8002b48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002b42:	f000 f8d5 	bl	8002cf0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b46:	e7f1      	b.n	8002b2c <prvTimerTask+0x8>

08002b48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002b52:	f7fe feef 	bl	8001934 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f866 	bl	8002c2c <prvSampleTimeNow>
 8002b60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d130      	bne.n	8002bca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <prvProcessTimerOrBlockTask+0x3c>
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d806      	bhi.n	8002b84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002b76:	f7fe feeb 	bl	8001950 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b7a:	68f9      	ldr	r1, [r7, #12]
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff83 	bl	8002a88 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002b82:	e024      	b.n	8002bce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <prvProcessTimerOrBlockTask+0x90>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <prvProcessTimerOrBlockTask+0x50>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <prvProcessTimerOrBlockTask+0x52>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <prvProcessTimerOrBlockTask+0x94>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fe fcc3 	bl	8001534 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002bae:	f7fe fecf 	bl	8001950 <xTaskResumeAll>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <prvProcessTimerOrBlockTask+0x98>)
 8002bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	f3bf 8f6f 	isb	sy
    }
 8002bc8:	e001      	b.n	8002bce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002bca:	f7fe fec1 	bl	8001950 <xTaskResumeAll>
    }
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	24000254 	.word	0x24000254
 8002bdc:	24000258 	.word	0x24000258
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <prvGetNextExpireTime+0x44>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <prvGetNextExpireTime+0x16>
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	e000      	b.n	8002bfc <prvGetNextExpireTime+0x18>
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <prvGetNextExpireTime+0x44>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e001      	b.n	8002c18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002c18:	68fb      	ldr	r3, [r7, #12]
    }
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	24000250 	.word	0x24000250

08002c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002c34:	f7fe ff2e 	bl	8001a94 <xTaskGetTickCount>
 8002c38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <prvSampleTimeNow+0x3c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d205      	bcs.n	8002c50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002c44:	f000 f91e 	bl	8002e84 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e002      	b.n	8002c56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <prvSampleTimeNow+0x3c>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    }
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	24000260 	.word	0x24000260

08002c6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d812      	bhi.n	8002cb8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d302      	bcc.n	8002ca6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e01b      	b.n	8002cde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <prvInsertTimerInActiveList+0x7c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7fd fd98 	bl	80007e6 <vListInsert>
 8002cb6:	e012      	b.n	8002cde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d206      	bcs.n	8002cce <prvInsertTimerInActiveList+0x62>
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e007      	b.n	8002cde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <prvInsertTimerInActiveList+0x80>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f7fd fd84 	bl	80007e6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002cde:	697b      	ldr	r3, [r7, #20]
    }
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	24000254 	.word	0x24000254
 8002cec:	24000250 	.word	0x24000250

08002cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cf6:	e0b2      	b.n	8002e5e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f2c0 80ae 	blt.w	8002e5c <prvProcessReceivedCommands+0x16c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fda1 	bl	8000858 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff87 	bl	8002c2c <prvSampleTimeNow>
 8002d1e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	f200 809b 	bhi.w	8002e5e <prvProcessReceivedCommands+0x16e>
 8002d28:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <prvProcessReceivedCommands+0x40>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d59 	.word	0x08002d59
 8002d34:	08002d59 	.word	0x08002d59
 8002d38:	08002d59 	.word	0x08002d59
 8002d3c:	08002dd1 	.word	0x08002dd1
 8002d40:	08002de5 	.word	0x08002de5
 8002d44:	08002e33 	.word	0x08002e33
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d59 	.word	0x08002d59
 8002d50:	08002dd1 	.word	0x08002dd1
 8002d54:	08002de5 	.word	0x08002de5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	18d1      	adds	r1, r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d78:	f7ff ff78 	bl	8002c6c <prvInsertTimerInActiveList>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d06d      	beq.n	8002e5e <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d88:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d062      	beq.n	8002e5e <prvProcessReceivedCommands+0x16e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	441a      	add	r2, r3
 8002da0:	2300      	movs	r3, #0
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2300      	movs	r3, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002daa:	f7ff fe1d 	bl	80029e8 <xTimerGenericCommand>
 8002dae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d153      	bne.n	8002e5e <prvProcessReceivedCommands+0x16e>
        __asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	b672      	cpsid	i
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	b662      	cpsie	i
 8002dca:	61bb      	str	r3, [r7, #24]
    }
 8002dcc:	bf00      	nop
 8002dce:	e7fe      	b.n	8002dce <prvProcessReceivedCommands+0xde>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002de2:	e03c      	b.n	8002e5e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10c      	bne.n	8002e1e <prvProcessReceivedCommands+0x12e>
        __asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	b672      	cpsid	i
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	b662      	cpsie	i
 8002e18:	617b      	str	r3, [r7, #20]
    }
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	18d1      	adds	r1, r2, r3
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	6a3a      	ldr	r2, [r7, #32]
 8002e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e2c:	f7ff ff1e 	bl	8002c6c <prvInsertTimerInActiveList>
                        break;
 8002e30:	e015      	b.n	8002e5e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <prvProcessReceivedCommands+0x158>
                                {
                                    vPortFree( pxTimer );
 8002e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e42:	f000 fc2f 	bl	80036a4 <vPortFree>
 8002e46:	e00a      	b.n	8002e5e <prvProcessReceivedCommands+0x16e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002e5a:	e000      	b.n	8002e5e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002e5c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <prvProcessReceivedCommands+0x190>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f107 0108 	add.w	r1, r7, #8
 8002e66:	2200      	movs	r2, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe f80d 	bl	8000e88 <xQueueReceive>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af41 	bne.w	8002cf8 <prvProcessReceivedCommands+0x8>
        }
    }
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	3728      	adds	r7, #40	; 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	24000258 	.word	0x24000258

08002e84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e8a:	e04a      	b.n	8002f22 <prvSwitchTimerLists+0x9e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <prvSwitchTimerLists+0xc4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <prvSwitchTimerLists+0xc4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fcd7 	bl	8000858 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d030      	beq.n	8002f22 <prvSwitchTimerLists+0x9e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d90e      	bls.n	8002ef0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ede:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <prvSwitchTimerLists+0xc4>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fd fc7c 	bl	80007e6 <vListInsert>
 8002eee:	e018      	b.n	8002f22 <prvSwitchTimerLists+0x9e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	2100      	movs	r1, #0
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fd74 	bl	80029e8 <xTimerGenericCommand>
 8002f00:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10c      	bne.n	8002f22 <prvSwitchTimerLists+0x9e>
        __asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	b672      	cpsid	i
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	b662      	cpsie	i
 8002f1c:	603b      	str	r3, [r7, #0]
    }
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <prvSwitchTimerLists+0x9c>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <prvSwitchTimerLists+0xc4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1af      	bne.n	8002e8c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <prvSwitchTimerLists+0xc4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <prvSwitchTimerLists+0xc8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <prvSwitchTimerLists+0xc4>)
 8002f38:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <prvSwitchTimerLists+0xc8>)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	6013      	str	r3, [r2, #0]
    }
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	24000250 	.word	0x24000250
 8002f4c:	24000254 	.word	0x24000254

08002f50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002f54:	f000 f98c 	bl	8003270 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <prvCheckForValidListAndQueue+0x54>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11d      	bne.n	8002f9c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002f60:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <prvCheckForValidListAndQueue+0x58>)
 8002f62:	f7fd fbef 	bl	8000744 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002f66:	4811      	ldr	r0, [pc, #68]	; (8002fac <prvCheckForValidListAndQueue+0x5c>)
 8002f68:	f7fd fbec 	bl	8000744 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <prvCheckForValidListAndQueue+0x60>)
 8002f6e:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <prvCheckForValidListAndQueue+0x58>)
 8002f70:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <prvCheckForValidListAndQueue+0x64>)
 8002f74:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <prvCheckForValidListAndQueue+0x5c>)
 8002f76:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002f78:	2200      	movs	r2, #0
 8002f7a:	210c      	movs	r1, #12
 8002f7c:	200a      	movs	r0, #10
 8002f7e:	f7fd fcff 	bl	8000980 <xQueueGenericCreate>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <prvCheckForValidListAndQueue+0x54>)
 8002f86:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <prvCheckForValidListAndQueue+0x54>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <prvCheckForValidListAndQueue+0x54>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <prvCheckForValidListAndQueue+0x68>)
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fa9a 	bl	80014d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002f9c:	f000 f99c 	bl	80032d8 <vPortExitCritical>
    }
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	24000258 	.word	0x24000258
 8002fa8:	24000228 	.word	0x24000228
 8002fac:	2400023c 	.word	0x2400023c
 8002fb0:	24000250 	.word	0x24000250
 8002fb4:	24000254 	.word	0x24000254
 8002fb8:	080109dc 	.word	0x080109dc

08002fbc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <xTimerIsTimerActive+0x2c>
        __asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd2:	b672      	cpsid	i
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	b662      	cpsie	i
 8002fe2:	60fb      	str	r3, [r7, #12]
    }
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <xTimerIsTimerActive+0x2a>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8002fe8:	f000 f942 	bl	8003270 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <xTimerIsTimerActive+0x44>
            {
                xReturn = pdFALSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e001      	b.n	8003004 <xTimerIsTimerActive+0x48>
            }
            else
            {
                xReturn = pdTRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8003004:	f000 f968 	bl	80032d8 <vPortExitCritical>

        return xReturn;
 8003008:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10c      	bne.n	800303e <pvTimerGetTimerID+0x2c>
        __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	b672      	cpsid	i
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	b662      	cpsie	i
 8003038:	60fb      	str	r3, [r7, #12]
    }
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <pvTimerGetTimerID+0x2a>

        taskENTER_CRITICAL();
 800303e:	f000 f917 	bl	8003270 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8003048:	f000 f946 	bl	80032d8 <vPortExitCritical>

        return pvReturn;
 800304c:	693b      	ldr	r3, [r7, #16]
    }
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3b04      	subs	r3, #4
 8003068:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003070:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3b04      	subs	r3, #4
 8003076:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f023 0201 	bic.w	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3b04      	subs	r3, #4
 8003086:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003088:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <pxPortInitialiseStack+0x64>)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3b14      	subs	r3, #20
 8003092:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b04      	subs	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f06f 0202 	mvn.w	r2, #2
 80030a6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3b20      	subs	r3, #32
 80030ac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	080030c1 	.word	0x080030c1

080030c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <prvTaskExitError+0x5c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d00c      	beq.n	80030ee <prvTaskExitError+0x2e>
        __asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	b672      	cpsid	i
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	b662      	cpsie	i
 80030e8:	60fb      	str	r3, [r7, #12]
    }
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <prvTaskExitError+0x2c>
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	b672      	cpsid	i
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	b662      	cpsie	i
 8003102:	60bb      	str	r3, [r7, #8]
    }
 8003104:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003106:	bf00      	nop
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0fc      	beq.n	8003108 <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	24000004 	.word	0x24000004

08003120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <pxCurrentTCBConst2>)
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	6808      	ldr	r0, [r1, #0]
 8003126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312a:	f380 8809 	msr	PSP, r0
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f04f 0000 	mov.w	r0, #0
 8003136:	f380 8811 	msr	BASEPRI, r0
 800313a:	4770      	bx	lr
 800313c:	f3af 8000 	nop.w

08003140 <pxCurrentTCBConst2>:
 8003140:	240000fc 	.word	0x240000fc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop

08003148 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003148:	4808      	ldr	r0, [pc, #32]	; (800316c <prvPortStartFirstTask+0x24>)
 800314a:	6800      	ldr	r0, [r0, #0]
 800314c:	6800      	ldr	r0, [r0, #0]
 800314e:	f380 8808 	msr	MSP, r0
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f380 8814 	msr	CONTROL, r0
 800315a:	b662      	cpsie	i
 800315c:	b661      	cpsie	f
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	df00      	svc	0
 8003168:	bf00      	nop
 800316a:	0000      	.short	0x0000
 800316c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop

08003174 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <xPortStartScheduler+0xe4>)
 800317c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b2f      	ldr	r3, [pc, #188]	; (800325c <xPortStartScheduler+0xe8>)
 80031a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <xPortStartScheduler+0xec>)
 80031a4:	2207      	movs	r2, #7
 80031a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031a8:	e009      	b.n	80031be <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <xPortStartScheduler+0xec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <xPortStartScheduler+0xec>)
 80031b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d0ef      	beq.n	80031aa <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031ca:	4b25      	ldr	r3, [pc, #148]	; (8003260 <xPortStartScheduler+0xec>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d00c      	beq.n	80031f0 <xPortStartScheduler+0x7c>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	b672      	cpsid	i
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	b662      	cpsie	i
 80031ea:	60bb      	str	r3, [r7, #8]
    }
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <xPortStartScheduler+0xec>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <xPortStartScheduler+0xec>)
 80031f8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <xPortStartScheduler+0xec>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <xPortStartScheduler+0xec>)
 8003204:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <xPortStartScheduler+0xf0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a14      	ldr	r2, [pc, #80]	; (8003264 <xPortStartScheduler+0xf0>)
 8003214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003218:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <xPortStartScheduler+0xf0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <xPortStartScheduler+0xf0>)
 8003220:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003224:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003226:	f000 f8e3 	bl	80033f0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <xPortStartScheduler+0xf4>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003230:	f000 f902 	bl	8003438 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <xPortStartScheduler+0xf8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0c      	ldr	r2, [pc, #48]	; (800326c <xPortStartScheduler+0xf8>)
 800323a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800323e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003240:	f7ff ff82 	bl	8003148 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003244:	f7fe fd06 	bl	8001c54 <vTaskSwitchContext>
    prvTaskExitError();
 8003248:	f7ff ff3a 	bl	80030c0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	e000e400 	.word	0xe000e400
 800325c:	24000264 	.word	0x24000264
 8003260:	24000268 	.word	0x24000268
 8003264:	e000ed20 	.word	0xe000ed20
 8003268:	24000004 	.word	0x24000004
 800326c:	e000ef34 	.word	0xe000ef34

08003270 <vPortEnterCritical>:




void vPortEnterCritical( void )
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
        __asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	b672      	cpsid	i
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	b662      	cpsie	i
 800328a:	607b      	str	r3, [r7, #4]
    }
 800328c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <vPortEnterCritical+0x60>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3301      	adds	r3, #1
 8003294:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <vPortEnterCritical+0x60>)
 8003296:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <vPortEnterCritical+0x60>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d111      	bne.n	80032c4 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <vPortEnterCritical+0x64>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <vPortEnterCritical+0x54>
        __asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	b672      	cpsid	i
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	b662      	cpsie	i
 80032be:	603b      	str	r3, [r7, #0]
    }
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <vPortEnterCritical+0x52>
    }
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	24000004 	.word	0x24000004
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <vPortExitCritical+0x54>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <vPortExitCritical+0x28>
        __asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	b672      	cpsid	i
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	b662      	cpsie	i
 80032fa:	607b      	str	r3, [r7, #4]
    }
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <vPortExitCritical+0x54>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3b01      	subs	r3, #1
 8003306:	4a09      	ldr	r2, [pc, #36]	; (800332c <vPortExitCritical+0x54>)
 8003308:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <vPortExitCritical+0x54>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <vPortExitCritical+0x46>
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f383 8811 	msr	BASEPRI, r3
    }
 800331c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	24000004 	.word	0x24000004

08003330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003330:	f3ef 8009 	mrs	r0, PSP
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <pxCurrentTCBConst>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	f01e 0f10 	tst.w	lr, #16
 8003340:	bf08      	it	eq
 8003342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334a:	6010      	str	r0, [r2, #0]
 800334c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003354:	b672      	cpsid	i
 8003356:	f380 8811 	msr	BASEPRI, r0
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	b662      	cpsie	i
 8003364:	f7fe fc76 	bl	8001c54 <vTaskSwitchContext>
 8003368:	f04f 0000 	mov.w	r0, #0
 800336c:	f380 8811 	msr	BASEPRI, r0
 8003370:	bc09      	pop	{r0, r3}
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	6808      	ldr	r0, [r1, #0]
 8003376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337a:	f01e 0f10 	tst.w	lr, #16
 800337e:	bf08      	it	eq
 8003380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003384:	f380 8809 	msr	PSP, r0
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <pxCurrentTCBConst>:
 8003390:	240000fc 	.word	0x240000fc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop

08003398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
        __asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	b672      	cpsid	i
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	b662      	cpsie	i
 80033b2:	607b      	str	r3, [r7, #4]
    }
 80033b4:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80033b6:	f002 f987 	bl	80056c8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80033ba:	f7fe fb8d 	bl	8001ad8 <xTaskIncrementTick>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d006      	beq.n	80033d2 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80033c4:	f002 f9de 	bl	8005784 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <SysTick_Handler+0x54>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e001      	b.n	80033d6 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 80033d2:	f002 f9bb 	bl	800574c <SEGGER_SYSVIEW_RecordExitISR>
 80033d6:	2300      	movs	r3, #0
 80033d8:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f383 8811 	msr	BASEPRI, r3
    }
 80033e0:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	e000ed04 	.word	0xe000ed04

080033f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <vPortSetupTimerInterrupt+0x34>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <vPortSetupTimerInterrupt+0x38>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <vPortSetupTimerInterrupt+0x3c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <vPortSetupTimerInterrupt+0x40>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	4a09      	ldr	r2, [pc, #36]	; (8003434 <vPortSetupTimerInterrupt+0x44>)
 800340e:	3b01      	subs	r3, #1
 8003410:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <vPortSetupTimerInterrupt+0x34>)
 8003414:	2207      	movs	r2, #7
 8003416:	601a      	str	r2, [r3, #0]
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	e000e010 	.word	0xe000e010
 8003428:	e000e018 	.word	0xe000e018
 800342c:	2400002c 	.word	0x2400002c
 8003430:	10624dd3 	.word	0x10624dd3
 8003434:	e000e014 	.word	0xe000e014

08003438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003438:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003448 <vPortEnableVFP+0x10>
 800343c:	6801      	ldr	r1, [r0, #0]
 800343e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003442:	6001      	str	r1, [r0, #0]
 8003444:	4770      	bx	lr
 8003446:	0000      	.short	0x0000
 8003448:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop

08003450 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003456:	f3ef 8305 	mrs	r3, IPSR
 800345a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	d916      	bls.n	8003490 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003462:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <vPortValidateInterruptPriority+0x78>)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <vPortValidateInterruptPriority+0x7c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	7afa      	ldrb	r2, [r7, #11]
 8003472:	429a      	cmp	r2, r3
 8003474:	d20c      	bcs.n	8003490 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	b672      	cpsid	i
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	b662      	cpsie	i
 800348a:	607b      	str	r3, [r7, #4]
    }
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <vPortValidateInterruptPriority+0x80>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <vPortValidateInterruptPriority+0x84>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d90c      	bls.n	80034ba <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	b672      	cpsid	i
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	b662      	cpsie	i
 80034b4:	603b      	str	r3, [r7, #0]
    }
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <vPortValidateInterruptPriority+0x68>
    }
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000e3f0 	.word	0xe000e3f0
 80034cc:	24000264 	.word	0x24000264
 80034d0:	e000ed0c 	.word	0xe000ed0c
 80034d4:	24000268 	.word	0x24000268

080034d8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80034e4:	f7fe fa26 	bl	8001934 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80034e8:	4b68      	ldr	r3, [pc, #416]	; (800368c <pvPortMalloc+0x1b4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034f0:	f000 f93e 	bl	8003770 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034f4:	4b66      	ldr	r3, [pc, #408]	; (8003690 <pvPortMalloc+0x1b8>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 80ab 	bne.w	8003658 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02f      	beq.n	8003568 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003508:	2208      	movs	r2, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d229      	bcs.n	8003568 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8003514:	2208      	movs	r2, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	2b00      	cmp	r3, #0
 8003524:	d023      	beq.n	800356e <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f023 0307 	bic.w	r3, r3, #7
 800352c:	3308      	adds	r3, #8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d216      	bcs.n	8003562 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f023 0307 	bic.w	r3, r3, #7
 800353a:	3308      	adds	r3, #8
 800353c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	2b00      	cmp	r3, #0
 8003546:	d012      	beq.n	800356e <pvPortMalloc+0x96>
        __asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	b672      	cpsid	i
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	b662      	cpsie	i
 800355c:	617b      	str	r3, [r7, #20]
    }
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003566:	e002      	b.n	800356e <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	e000      	b.n	8003570 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800356e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d070      	beq.n	8003658 <pvPortMalloc+0x180>
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <pvPortMalloc+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	d86b      	bhi.n	8003658 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003580:	4b45      	ldr	r3, [pc, #276]	; (8003698 <pvPortMalloc+0x1c0>)
 8003582:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003584:	4b44      	ldr	r3, [pc, #272]	; (8003698 <pvPortMalloc+0x1c0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800358a:	e004      	b.n	8003596 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d903      	bls.n	80035a8 <pvPortMalloc+0xd0>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f1      	bne.n	800358c <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80035a8:	4b38      	ldr	r3, [pc, #224]	; (800368c <pvPortMalloc+0x1b4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d052      	beq.n	8003658 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2208      	movs	r2, #8
 80035b8:	4413      	add	r3, r2
 80035ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad2      	subs	r2, r2, r3
 80035cc:	2308      	movs	r3, #8
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d921      	bls.n	8003618 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00c      	beq.n	8003600 <pvPortMalloc+0x128>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	b672      	cpsid	i
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	b662      	cpsie	i
 80035fa:	613b      	str	r3, [r7, #16]
    }
 80035fc:	bf00      	nop
 80035fe:	e7fe      	b.n	80035fe <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003612:	69b8      	ldr	r0, [r7, #24]
 8003614:	f000 f90e 	bl	8003834 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <pvPortMalloc+0x1bc>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <pvPortMalloc+0x1bc>)
 8003624:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <pvPortMalloc+0x1bc>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b1c      	ldr	r3, [pc, #112]	; (800369c <pvPortMalloc+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d203      	bcs.n	800363a <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003632:	4b18      	ldr	r3, [pc, #96]	; (8003694 <pvPortMalloc+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a19      	ldr	r2, [pc, #100]	; (800369c <pvPortMalloc+0x1c4>)
 8003638:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <pvPortMalloc+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	431a      	orrs	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <pvPortMalloc+0x1c8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <pvPortMalloc+0x1c8>)
 8003656:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003658:	f7fe f97a 	bl	8001950 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00c      	beq.n	8003680 <pvPortMalloc+0x1a8>
        __asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	b672      	cpsid	i
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	b662      	cpsie	i
 800367a:	60fb      	str	r3, [r7, #12]
    }
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <pvPortMalloc+0x1a6>
    return pvReturn;
 8003680:	69fb      	ldr	r3, [r7, #28]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	24006e74 	.word	0x24006e74
 8003690:	24006e88 	.word	0x24006e88
 8003694:	24006e78 	.word	0x24006e78
 8003698:	24006e6c 	.word	0x24006e6c
 800369c:	24006e7c 	.word	0x24006e7c
 80036a0:	24006e80 	.word	0x24006e80

080036a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d051      	beq.n	800375a <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036b6:	2308      	movs	r3, #8
 80036b8:	425b      	negs	r3, r3
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4413      	add	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <vPortFree+0xc0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <vPortFree+0x48>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	b672      	cpsid	i
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	b662      	cpsie	i
 80036e6:	60fb      	str	r3, [r7, #12]
    }
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00c      	beq.n	800370e <vPortFree+0x6a>
        __asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	b672      	cpsid	i
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	b662      	cpsie	i
 8003708:	60bb      	str	r3, [r7, #8]
    }
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4b14      	ldr	r3, [pc, #80]	; (8003764 <vPortFree+0xc0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01e      	beq.n	800375a <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11a      	bne.n	800375a <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <vPortFree+0xc0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	43db      	mvns	r3, r3
 800372e:	401a      	ands	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003734:	f7fe f8fe 	bl	8001934 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <vPortFree+0xc4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4413      	add	r3, r2
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <vPortFree+0xc4>)
 8003744:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003746:	6938      	ldr	r0, [r7, #16]
 8003748:	f000 f874 	bl	8003834 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <vPortFree+0xc8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	4a06      	ldr	r2, [pc, #24]	; (800376c <vPortFree+0xc8>)
 8003754:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003756:	f7fe f8fb 	bl	8001950 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	24006e88 	.word	0x24006e88
 8003768:	24006e78 	.word	0x24006e78
 800376c:	24006e84 	.word	0x24006e84

08003770 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003776:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 800377a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <prvHeapInit+0xac>)
 800377e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3307      	adds	r3, #7
 800378e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0307 	bic.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	4a1f      	ldr	r2, [pc, #124]	; (800381c <prvHeapInit+0xac>)
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037a8:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <prvHeapInit+0xb0>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <prvHeapInit+0xb0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80037bc:	2208      	movs	r2, #8
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <prvHeapInit+0xb4>)
 80037d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <prvHeapInit+0xb4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <prvHeapInit+0xb4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <prvHeapInit+0xb4>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <prvHeapInit+0xb8>)
 80037fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <prvHeapInit+0xbc>)
 8003806:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <prvHeapInit+0xc0>)
 800380a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800380e:	601a      	str	r2, [r3, #0]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	2400026c 	.word	0x2400026c
 8003820:	24006e6c 	.word	0x24006e6c
 8003824:	24006e74 	.word	0x24006e74
 8003828:	24006e7c 	.word	0x24006e7c
 800382c:	24006e78 	.word	0x24006e78
 8003830:	24006e88 	.word	0x24006e88

08003834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800383c:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <prvInsertBlockIntoFreeList+0xac>)
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e002      	b.n	8003848 <prvInsertBlockIntoFreeList+0x14>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	d8f7      	bhi.n	8003842 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	d108      	bne.n	8003876 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	441a      	add	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d118      	bne.n	80038bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <prvInsertBlockIntoFreeList+0xb0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d00d      	beq.n	80038b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	441a      	add	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e008      	b.n	80038c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <prvInsertBlockIntoFreeList+0xb0>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e003      	b.n	80038c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d002      	beq.n	80038d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	24006e6c 	.word	0x24006e6c
 80038e4:	24006e74 	.word	0x24006e74

080038e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80038ec:	4803      	ldr	r0, [pc, #12]	; (80038fc <_cbSendSystemDesc+0x14>)
 80038ee:	f001 fe95 	bl	800561c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80038f2:	4803      	ldr	r0, [pc, #12]	; (8003900 <_cbSendSystemDesc+0x18>)
 80038f4:	f001 fe92 	bl	800561c <SEGGER_SYSVIEW_SendSysDesc>
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	080109e4 	.word	0x080109e4
 8003900:	08010a14 	.word	0x08010a14

08003904 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <SEGGER_SYSVIEW_Conf+0x20>)
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <SEGGER_SYSVIEW_Conf+0x20>)
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <SEGGER_SYSVIEW_Conf+0x24>)
 8003912:	4a06      	ldr	r2, [pc, #24]	; (800392c <SEGGER_SYSVIEW_Conf+0x28>)
 8003914:	f001 f94e 	bl	8004bb4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003918:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 800391c:	f001 f990 	bl	8004c40 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003920:	bf00      	nop
 8003922:	bd80      	pop	{r7, pc}
 8003924:	2400002c 	.word	0x2400002c
 8003928:	080038e9 	.word	0x080038e9
 800392c:	08010ec8 	.word	0x08010ec8

08003930 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003932:	b085      	sub	sp, #20
 8003934:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	e033      	b.n	80039a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800393c:	491e      	ldr	r1, [pc, #120]	; (80039b8 <_cbSendTaskList+0x88>)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	491a      	ldr	r1, [pc, #104]	; (80039b8 <_cbSendTaskList+0x88>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3304      	adds	r3, #4
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	4c16      	ldr	r4, [pc, #88]	; (80039b8 <_cbSendTaskList+0x88>)
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4423      	add	r3, r4
 800396c:	3308      	adds	r3, #8
 800396e:	681c      	ldr	r4, [r3, #0]
 8003970:	4d11      	ldr	r5, [pc, #68]	; (80039b8 <_cbSendTaskList+0x88>)
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	442b      	add	r3, r5
 800397e:	330c      	adds	r3, #12
 8003980:	681d      	ldr	r5, [r3, #0]
 8003982:	4e0d      	ldr	r6, [pc, #52]	; (80039b8 <_cbSendTaskList+0x88>)
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4433      	add	r3, r6
 8003990:	3310      	adds	r3, #16
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	462b      	mov	r3, r5
 8003998:	4622      	mov	r2, r4
 800399a:	f000 f8bd 	bl	8003b18 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3301      	adds	r3, #1
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <_cbSendTaskList+0x8c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d3c6      	bcc.n	800393c <_cbSendTaskList+0xc>
  }
}
 80039ae:	bf00      	nop
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b8:	24006e8c 	.word	0x24006e8c
 80039bc:	24006f2c 	.word	0x24006f2c

080039c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80039c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80039c8:	f7fe f874 	bl	8001ab4 <xTaskGetTickCountFromISR>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2200      	movs	r2, #0
 80039d0:	469a      	mov	sl, r3
 80039d2:	4693      	mov	fp, r2
 80039d4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80039d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	f04f 0a00 	mov.w	sl, #0
 80039e4:	f04f 0b00 	mov.w	fp, #0
 80039e8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80039ec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80039f0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80039f4:	4652      	mov	r2, sl
 80039f6:	465b      	mov	r3, fp
 80039f8:	1a14      	subs	r4, r2, r0
 80039fa:	eb63 0501 	sbc.w	r5, r3, r1
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	00ab      	lsls	r3, r5, #2
 8003a08:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a0c:	00a2      	lsls	r2, r4, #2
 8003a0e:	4614      	mov	r4, r2
 8003a10:	461d      	mov	r5, r3
 8003a12:	eb14 0800 	adds.w	r8, r4, r0
 8003a16:	eb45 0901 	adc.w	r9, r5, r1
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2e:	4690      	mov	r8, r2
 8003a30:	4699      	mov	r9, r3
 8003a32:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003a36:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003a48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a56:	2205      	movs	r2, #5
 8003a58:	492b      	ldr	r1, [pc, #172]	; (8003b08 <SYSVIEW_AddTask+0xc0>)
 8003a5a:	68b8      	ldr	r0, [r7, #8]
 8003a5c:	f00b fe2c 	bl	800f6b8 <memcmp>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d04b      	beq.n	8003afe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <SYSVIEW_AddTask+0xc4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b07      	cmp	r3, #7
 8003a6c:	d903      	bls.n	8003a76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a6e:	4828      	ldr	r0, [pc, #160]	; (8003b10 <SYSVIEW_AddTask+0xc8>)
 8003a70:	f002 f8d2 	bl	8005c18 <SEGGER_SYSVIEW_Warn>
    return;
 8003a74:	e044      	b.n	8003b00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <SYSVIEW_AddTask+0xc4>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4926      	ldr	r1, [pc, #152]	; (8003b14 <SYSVIEW_AddTask+0xcc>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <SYSVIEW_AddTask+0xc4>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4921      	ldr	r1, [pc, #132]	; (8003b14 <SYSVIEW_AddTask+0xcc>)
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <SYSVIEW_AddTask+0xc4>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	491b      	ldr	r1, [pc, #108]	; (8003b14 <SYSVIEW_AddTask+0xcc>)
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <SYSVIEW_AddTask+0xc4>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4916      	ldr	r1, [pc, #88]	; (8003b14 <SYSVIEW_AddTask+0xcc>)
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <SYSVIEW_AddTask+0xc4>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4910      	ldr	r1, [pc, #64]	; (8003b14 <SYSVIEW_AddTask+0xcc>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	3310      	adds	r3, #16
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <SYSVIEW_AddTask+0xc4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <SYSVIEW_AddTask+0xc4>)
 8003aea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f80e 	bl	8003b18 <SYSVIEW_SendTaskInfo>
 8003afc:	e000      	b.n	8003b00 <SYSVIEW_AddTask+0xb8>
    return;
 8003afe:	bf00      	nop

}
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	08010a24 	.word	0x08010a24
 8003b0c:	24006f2c 	.word	0x24006f2c
 8003b10:	08010a2c 	.word	0x08010a2c
 8003b14:	24006e8c 	.word	0x24006e8c

08003b18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003b26:	f107 0314 	add.w	r3, r7, #20
 8003b2a:	2214      	movs	r2, #20
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00b fde0 	bl	800f6f4 <memset>
  TaskInfo.TaskID     = TaskID;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 fc6d 	bl	800542c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b52:	bf00      	nop
 8003b54:	3728      	adds	r7, #40	; 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4907      	ldr	r1, [pc, #28]	; (8003b94 <__NVIC_EnableIRQ+0x38>)
 8003b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000e100 	.word	0xe000e100

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	db0a      	blt.n	8003bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	490c      	ldr	r1, [pc, #48]	; (8003be4 <__NVIC_SetPriority+0x4c>)
 8003bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc0:	e00a      	b.n	8003bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4908      	ldr	r1, [pc, #32]	; (8003be8 <__NVIC_SetPriority+0x50>)
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	0112      	lsls	r2, r2, #4
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	761a      	strb	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000e100 	.word	0xe000e100
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003bf2:	f002 f86d 	bl	8005cd0 <SEGGER_SYSVIEW_IsStarted>
 8003bf6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003bfe:	f001 fa99 	bl	8005134 <SEGGER_SYSVIEW_Start>
  }
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <_cbOnUARTRx+0x3c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d806      	bhi.n	8003c2c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <_cbOnUARTRx+0x3c>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <_cbOnUARTRx+0x3c>)
 8003c28:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003c2a:	e009      	b.n	8003c40 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003c2c:	f7ff ffde 	bl	8003bec <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <_cbOnUARTRx+0x3c>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4618      	mov	r0, r3
 8003c36:	1dfb      	adds	r3, r7, #7
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f000 fbee 	bl	800441c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003c40:	bf00      	nop
}
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	24000008 	.word	0x24000008

08003c4c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <_cbOnUARTTx+0x5c>)
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d80f      	bhi.n	8003c7c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <_cbOnUARTTx+0x5c>)
 8003c5e:	785b      	ldrb	r3, [r3, #1]
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <_cbOnUARTTx+0x60>)
 8003c64:	5c9a      	ldrb	r2, [r3, r2]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <_cbOnUARTTx+0x5c>)
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <_cbOnUARTTx+0x5c>)
 8003c74:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003c7a:	e00f      	b.n	8003c9c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <_cbOnUARTTx+0x5c>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fa1d 	bl	80040c4 <SEGGER_RTT_ReadUpBufferNoLock>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da02      	bge.n	8003c9a <_cbOnUARTTx+0x4e>
    r = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e000      	b.n	8003c9c <_cbOnUARTTx+0x50>
  }
Done:
 8003c9a:	bf00      	nop
  return r;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	24000008 	.word	0x24000008
 8003cac:	08010ed0 	.word	0x08010ed0

08003cb0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003cb8:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <SEGGER_UART_init+0x1c>)
 8003cba:	4905      	ldr	r1, [pc, #20]	; (8003cd0 <SEGGER_UART_init+0x20>)
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f865 	bl	8003d8c <HIF_UART_Init>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	08003c0d 	.word	0x08003c0d
 8003cd0:	08003c4d 	.word	0x08003c4d

08003cd4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <USART2_IRQHandler+0x80>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d011      	beq.n	8003d0e <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8003cea:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <USART2_IRQHandler+0x84>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 030b 	and.w	r3, r3, #11
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <USART2_IRQHandler+0x88>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003d04:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <USART2_IRQHandler+0x88>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	79fa      	ldrb	r2, [r7, #7]
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01a      	beq.n	8003d4e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <USART2_IRQHandler+0x8c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <USART2_IRQHandler+0x8c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	1dfa      	adds	r2, r7, #7
 8003d26:	4610      	mov	r0, r2
 8003d28:	4798      	blx	r3
 8003d2a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <USART2_IRQHandler+0x90>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <USART2_IRQHandler+0x90>)
 8003d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e006      	b.n	8003d4e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <USART2_IRQHandler+0x80>)
 8003d42:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8003d44:	79fa      	ldrb	r2, [r7, #7]
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <USART2_IRQHandler+0x94>)
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e000      	b.n	8003d4e <USART2_IRQHandler+0x7a>
      return;
 8003d4c:	bf00      	nop
    }
  }
}
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	4000441c 	.word	0x4000441c
 8003d58:	40004424 	.word	0x40004424
 8003d5c:	24006f30 	.word	0x24006f30
 8003d60:	24006f34 	.word	0x24006f34
 8003d64:	40004400 	.word	0x40004400
 8003d68:	40004428 	.word	0x40004428

08003d6c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7a:	6013      	str	r3, [r2, #0]
}
 8003d7c:	bf00      	nop
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40004400 	.word	0x40004400

08003d8c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003d98:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <HIF_UART_Init+0xc8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <HIF_UART_Init+0xc8>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8003da4:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <HIF_UART_Init+0xcc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <HIF_UART_Init+0xcc>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <HIF_UART_Init+0xd0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dbc:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003dc4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003dc6:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <HIF_UART_Init+0xd0>)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003dcc:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HIF_UART_Init+0xd4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003de0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003de2:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <HIF_UART_Init+0xd4>)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003de8:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <HIF_UART_Init+0xd8>)
 8003dea:	f248 022d 	movw	r2, #32813	; 0x802d
 8003dee:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <HIF_UART_Init+0xdc>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HIF_UART_Init+0xe0>)
 8003df8:	2280      	movs	r2, #128	; 0x80
 8003dfa:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003e02:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <HIF_UART_Init+0xe4>)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d302      	bcc.n	8003e22 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003e1c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003e20:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	4a11      	ldr	r2, [pc, #68]	; (8003e74 <HIF_UART_Init+0xe8>)
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003e32:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <HIF_UART_Init+0xec>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003e38:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <HIF_UART_Init+0xf0>)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003e3e:	2106      	movs	r1, #6
 8003e40:	2026      	movs	r0, #38	; 0x26
 8003e42:	f7ff fea9 	bl	8003b98 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003e46:	2026      	movs	r0, #38	; 0x26
 8003e48:	f7ff fe88 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	580244e8 	.word	0x580244e8
 8003e58:	580244e0 	.word	0x580244e0
 8003e5c:	58020020 	.word	0x58020020
 8003e60:	58020000 	.word	0x58020000
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40004404 	.word	0x40004404
 8003e6c:	40004408 	.word	0x40004408
 8003e70:	0e4e1c00 	.word	0x0e4e1c00
 8003e74:	4000440c 	.word	0x4000440c
 8003e78:	24006f30 	.word	0x24006f30
 8003e7c:	24006f34 	.word	0x24006f34

08003e80 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e86:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <_DoInit+0xa0>)
 8003e88:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003e8a:	22a8      	movs	r2, #168	; 0xa8
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6838      	ldr	r0, [r7, #0]
 8003e90:	f00b fc30 	bl	800f6f4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2203      	movs	r2, #3
 8003e98:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4a20      	ldr	r2, [pc, #128]	; (8003f24 <_DoInit+0xa4>)
 8003ea4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	; (8003f28 <_DoInit+0xa8>)
 8003eaa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eb2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <_DoInit+0xa4>)
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <_DoInit+0xac>)
 8003ed0:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003eea:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	e00c      	b.n	8003f0e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1c3 030f 	rsb	r3, r3, #15
 8003efa:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <_DoInit+0xb0>)
 8003efc:	5cd1      	ldrb	r1, [r2, r3]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	460a      	mov	r2, r1
 8003f06:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b0f      	cmp	r3, #15
 8003f12:	d9ef      	bls.n	8003ef4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f14:	f3bf 8f5f 	dmb	sy
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	24006f38 	.word	0x24006f38
 8003f24:	08010a7c 	.word	0x08010a7c
 8003f28:	24006fe0 	.word	0x24006fe0
 8003f2c:	240073e0 	.word	0x240073e0
 8003f30:	08010ed4 	.word	0x08010ed4

08003f34 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003f40:	2300      	movs	r3, #0
 8003f42:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d905      	bls.n	8003f64 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	e007      	b.n	8003f74 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	1acb      	subs	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3b01      	subs	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	bf28      	it	cs
 8003f82:	4613      	movcs	r3, r2
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	bf28      	it	cs
 8003f8e:	4613      	movcs	r3, r2
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	6978      	ldr	r0, [r7, #20]
 8003fa2:	f00b fb99 	bl	800f6d8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	4413      	add	r3, r2
 8003fac:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	4413      	add	r3, r2
 8003fb4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	4413      	add	r3, r2
 8003fc4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d101      	bne.n	8003fd4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fd4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1b2      	bne.n	8003f4a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3728      	adds	r7, #40	; 0x28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b088      	sub	sp, #32
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d911      	bls.n	8004036 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	6938      	ldr	r0, [r7, #16]
 8004022:	f00b fb59 	bl	800f6d8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004026:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	441a      	add	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004034:	e01f      	b.n	8004076 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	4413      	add	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	6938      	ldr	r0, [r7, #16]
 800404a:	f00b fb45 	bl	800f6d8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	4413      	add	r3, r2
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4619      	mov	r1, r3
 8004066:	6938      	ldr	r0, [r7, #16]
 8004068:	f00b fb36 	bl	800f6d8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800406c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	60da      	str	r2, [r3, #12]
}
 8004076:	bf00      	nop
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800407e:	b480      	push	{r7}
 8004080:	b087      	sub	sp, #28
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	429a      	cmp	r2, r3
 8004098:	d808      	bhi.n	80040ac <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad2      	subs	r2, r2, r3
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	3b01      	subs	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e004      	b.n	80040b6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80040b6:	697b      	ldr	r3, [r7, #20]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08c      	sub	sp, #48	; 0x30
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80040d0:	4b3e      	ldr	r3, [pc, #248]	; (80041cc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80040de:	f7ff fecf 	bl	8003e80 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4a37      	ldr	r2, [pc, #220]	; (80041cc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80040f0:	4413      	add	r3, r2
 80040f2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004104:	2300      	movs	r3, #0
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d92b      	bls.n	8004168 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4293      	cmp	r3, r2
 8004120:	bf28      	it	cs
 8004122:	4613      	movcs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	4413      	add	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	6939      	ldr	r1, [r7, #16]
 8004134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004136:	f00b facf 	bl	800f6d8 <memcpy>
    NumBytesRead += NumBytesRem;
 800413a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4413      	add	r3, r2
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4413      	add	r3, r2
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004160:	429a      	cmp	r2, r3
 8004162:	d101      	bne.n	8004168 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004164:	2300      	movs	r3, #0
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4293      	cmp	r3, r2
 8004176:	bf28      	it	cs
 8004178:	4613      	movcs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d019      	beq.n	80041b6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	4413      	add	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	6939      	ldr	r1, [r7, #16]
 8004190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004192:	f00b faa1 	bl	800f6d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4413      	add	r3, r2
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4413      	add	r3, r2
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	4413      	add	r3, r2
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3730      	adds	r7, #48	; 0x30
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	24006f38 	.word	0x24006f38

080041d0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08c      	sub	sp, #48	; 0x30
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80041dc:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <SEGGER_RTT_ReadNoLock+0x108>)
 80041de:	623b      	str	r3, [r7, #32]
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <SEGGER_RTT_ReadNoLock+0x1e>
 80041ea:	f7ff fe49 	bl	8003e80 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	3360      	adds	r3, #96	; 0x60
 80041fa:	4a37      	ldr	r2, [pc, #220]	; (80042d8 <SEGGER_RTT_ReadNoLock+0x108>)
 80041fc:	4413      	add	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004210:	2300      	movs	r3, #0
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d92b      	bls.n	8004274 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4293      	cmp	r3, r2
 800422c:	bf28      	it	cs
 800422e:	4613      	movcs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	4413      	add	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	6939      	ldr	r1, [r7, #16]
 8004240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004242:	f00b fa49 	bl	800f6d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4413      	add	r3, r2
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800425e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426c:	429a      	cmp	r2, r3
 800426e:	d101      	bne.n	8004274 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004270:	2300      	movs	r3, #0
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4293      	cmp	r3, r2
 8004282:	bf28      	it	cs
 8004284:	4613      	movcs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	4413      	add	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800429e:	f00b fa1b 	bl	800f6d8 <memcpy>
    NumBytesRead += NumBytesRem;
 80042a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	4413      	add	r3, r2
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80042ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	4413      	add	r3, r2
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042cc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3730      	adds	r7, #48	; 0x30
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	24006f38 	.word	0x24006f38

080042dc <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4613      	mov	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	3360      	adds	r3, #96	; 0x60
 80042f8:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80042fa:	4413      	add	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d029      	beq.n	800435a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004306:	2b02      	cmp	r3, #2
 8004308:	d82e      	bhi.n	8004368 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800430e:	2b01      	cmp	r3, #1
 8004310:	d013      	beq.n	800433a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004312:	e029      	b.n	8004368 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7ff feb2 	bl	800407e <_GetAvailWriteSpace>
 800431a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	d202      	bcs.n	800432a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004328:	e021      	b.n	800436e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f7ff fe5b 	bl	8003fee <_WriteNoCheck>
    break;
 8004338:	e019      	b.n	800436e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff fe9f 	bl	800407e <_GetAvailWriteSpace>
 8004340:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4293      	cmp	r3, r2
 8004348:	bf28      	it	cs
 800434a:	4613      	movcs	r3, r2
 800434c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	6978      	ldr	r0, [r7, #20]
 8004354:	f7ff fe4b 	bl	8003fee <_WriteNoCheck>
    break;
 8004358:	e009      	b.n	800436e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	69b9      	ldr	r1, [r7, #24]
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7ff fde8 	bl	8003f34 <_WriteBlocking>
 8004364:	61f8      	str	r0, [r7, #28]
    break;
 8004366:	e002      	b.n	800436e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
    break;
 800436c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800436e:	69fb      	ldr	r3, [r7, #28]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	24006f38 	.word	0x24006f38

0800437c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <SEGGER_RTT_WriteNoLock+0x9c>)
 800439a:	4413      	add	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d029      	beq.n	80043fa <SEGGER_RTT_WriteNoLock+0x7e>
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d82e      	bhi.n	8004408 <SEGGER_RTT_WriteNoLock+0x8c>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <SEGGER_RTT_WriteNoLock+0x38>
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d013      	beq.n	80043da <SEGGER_RTT_WriteNoLock+0x5e>
 80043b2:	e029      	b.n	8004408 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80043b4:	6978      	ldr	r0, [r7, #20]
 80043b6:	f7ff fe62 	bl	800407e <_GetAvailWriteSpace>
 80043ba:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d202      	bcs.n	80043ca <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80043c8:	e021      	b.n	800440e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	69b9      	ldr	r1, [r7, #24]
 80043d2:	6978      	ldr	r0, [r7, #20]
 80043d4:	f7ff fe0b 	bl	8003fee <_WriteNoCheck>
    break;
 80043d8:	e019      	b.n	800440e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80043da:	6978      	ldr	r0, [r7, #20]
 80043dc:	f7ff fe4f 	bl	800407e <_GetAvailWriteSpace>
 80043e0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4293      	cmp	r3, r2
 80043e8:	bf28      	it	cs
 80043ea:	4613      	movcs	r3, r2
 80043ec:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f7ff fdfb 	bl	8003fee <_WriteNoCheck>
    break;
 80043f8:	e009      	b.n	800440e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	69b9      	ldr	r1, [r7, #24]
 80043fe:	6978      	ldr	r0, [r7, #20]
 8004400:	f7ff fd98 	bl	8003f34 <_WriteBlocking>
 8004404:	61f8      	str	r0, [r7, #28]
    break;
 8004406:	e002      	b.n	800440e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
    break;
 800440c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800440e:	69fb      	ldr	r3, [r7, #28]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	24006f38 	.word	0x24006f38

0800441c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004436:	f7ff fd23 	bl	8003e80 <_DoInit>
  SEGGER_RTT_LOCK();
 800443a:	f3ef 8311 	mrs	r3, BASEPRI
 800443e:	f04f 0120 	mov.w	r1, #32
 8004442:	f381 8811 	msr	BASEPRI, r1
 8004446:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff ff45 	bl	80042dc <SEGGER_RTT_WriteDownBufferNoLock>
 8004452:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800445a:	697b      	ldr	r3, [r7, #20]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	24006f38 	.word	0x24006f38

08004468 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <SEGGER_RTT_Write+0x48>)
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <SEGGER_RTT_Write+0x1e>
 8004482:	f7ff fcfd 	bl	8003e80 <_DoInit>
  SEGGER_RTT_LOCK();
 8004486:	f3ef 8311 	mrs	r3, BASEPRI
 800448a:	f04f 0120 	mov.w	r1, #32
 800448e:	f381 8811 	msr	BASEPRI, r1
 8004492:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff ff6f 	bl	800437c <SEGGER_RTT_WriteNoLock>
 800449e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80044a6:	697b      	ldr	r3, [r7, #20]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	24006f38 	.word	0x24006f38

080044b4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80044c2:	4b3d      	ldr	r3, [pc, #244]	; (80045b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80044d0:	f7ff fcd6 	bl	8003e80 <_DoInit>
  SEGGER_RTT_LOCK();
 80044d4:	f3ef 8311 	mrs	r3, BASEPRI
 80044d8:	f04f 0120 	mov.w	r1, #32
 80044dc:	f381 8811 	msr	BASEPRI, r1
 80044e0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044e2:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80044e4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80044ea:	6939      	ldr	r1, [r7, #16]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	3304      	adds	r3, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3301      	adds	r3, #1
 8004506:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	429a      	cmp	r2, r3
 8004510:	dbeb      	blt.n	80044ea <SEGGER_RTT_AllocUpBuffer+0x36>
 8004512:	e000      	b.n	8004516 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004514:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	429a      	cmp	r2, r3
 800451e:	da3f      	bge.n	80045a0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004520:	6939      	ldr	r1, [r7, #16]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004534:	6939      	ldr	r1, [r7, #16]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	4613      	mov	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	3304      	adds	r3, #4
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800454a:	6939      	ldr	r1, [r7, #16]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	440b      	add	r3, r1
 8004558:	3320      	adds	r3, #32
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800455e:	6939      	ldr	r1, [r7, #16]
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	4613      	mov	r3, r2
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	3328      	adds	r3, #40	; 0x28
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004572:	6939      	ldr	r1, [r7, #16]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	3324      	adds	r3, #36	; 0x24
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004586:	6939      	ldr	r1, [r7, #16]
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	4613      	mov	r3, r2
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	4413      	add	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	440b      	add	r3, r1
 8004594:	332c      	adds	r3, #44	; 0x2c
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800459a:	f3bf 8f5f 	dmb	sy
 800459e:	e002      	b.n	80045a6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80045ac:	69fb      	ldr	r3, [r7, #28]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	24006f38 	.word	0x24006f38

080045bc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80045ca:	4b21      	ldr	r3, [pc, #132]	; (8004650 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80045d8:	f7ff fc52 	bl	8003e80 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045dc:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80045de:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d82c      	bhi.n	8004640 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80045e6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ea:	f04f 0120 	mov.w	r1, #32
 80045ee:	f381 8811 	msr	BASEPRI, r1
 80045f2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	3360      	adds	r3, #96	; 0x60
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004630:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	e002      	b.n	8004646 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004648:	4618      	mov	r0, r3
 800464a:	3728      	adds	r7, #40	; 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	24006f38 	.word	0x24006f38

08004654 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00f      	beq.n	800468a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800466a:	e002      	b.n	8004672 <_EncodeStr+0x1e>
      Len++;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3301      	adds	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f6      	bne.n	800466c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d901      	bls.n	800468a <_EncodeStr+0x36>
      Len = Limit;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2bfe      	cmp	r3, #254	; 0xfe
 800468e:	d806      	bhi.n	800469e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	60fa      	str	r2, [r7, #12]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e011      	b.n	80046c2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	60fa      	str	r2, [r7, #12]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	60fa      	str	r2, [r7, #12]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	0a19      	lsrs	r1, r3, #8
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	60fa      	str	r2, [r7, #12]
 80046be:	b2ca      	uxtb	r2, r1
 80046c0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80046c6:	e00a      	b.n	80046de <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	1c53      	adds	r3, r2, #1
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1c59      	adds	r1, r3, #1
 80046d2:	60f9      	str	r1, [r7, #12]
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	701a      	strb	r2, [r3, #0]
    n++;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	3301      	adds	r3, #1
 80046dc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d3f0      	bcc.n	80046c8 <_EncodeStr+0x74>
  }
  return pPayload;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3307      	adds	r3, #7
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004712:	4b35      	ldr	r3, [pc, #212]	; (80047e8 <_HandleIncomingPacket+0xdc>)
 8004714:	7e1b      	ldrb	r3, [r3, #24]
 8004716:	4618      	mov	r0, r3
 8004718:	1cfb      	adds	r3, r7, #3
 800471a:	2201      	movs	r2, #1
 800471c:	4619      	mov	r1, r3
 800471e:	f7ff fd57 	bl	80041d0 <SEGGER_RTT_ReadNoLock>
 8004722:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d052      	beq.n	80047d0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	2b80      	cmp	r3, #128	; 0x80
 800472e:	d031      	beq.n	8004794 <_HandleIncomingPacket+0x88>
 8004730:	2b80      	cmp	r3, #128	; 0x80
 8004732:	dc40      	bgt.n	80047b6 <_HandleIncomingPacket+0xaa>
 8004734:	2b07      	cmp	r3, #7
 8004736:	dc15      	bgt.n	8004764 <_HandleIncomingPacket+0x58>
 8004738:	2b00      	cmp	r3, #0
 800473a:	dd3c      	ble.n	80047b6 <_HandleIncomingPacket+0xaa>
 800473c:	3b01      	subs	r3, #1
 800473e:	2b06      	cmp	r3, #6
 8004740:	d839      	bhi.n	80047b6 <_HandleIncomingPacket+0xaa>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <_HandleIncomingPacket+0x3c>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800476b 	.word	0x0800476b
 800474c:	08004771 	.word	0x08004771
 8004750:	08004777 	.word	0x08004777
 8004754:	0800477d 	.word	0x0800477d
 8004758:	08004783 	.word	0x08004783
 800475c:	08004789 	.word	0x08004789
 8004760:	0800478f 	.word	0x0800478f
 8004764:	2b7f      	cmp	r3, #127	; 0x7f
 8004766:	d035      	beq.n	80047d4 <_HandleIncomingPacket+0xc8>
 8004768:	e025      	b.n	80047b6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800476a:	f000 fce3 	bl	8005134 <SEGGER_SYSVIEW_Start>
      break;
 800476e:	e036      	b.n	80047de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004770:	f000 fd9c 	bl	80052ac <SEGGER_SYSVIEW_Stop>
      break;
 8004774:	e033      	b.n	80047de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004776:	f000 ff75 	bl	8005664 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800477a:	e030      	b.n	80047de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800477c:	f000 ff3a 	bl	80055f4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004780:	e02d      	b.n	80047de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004782:	f000 fdb9 	bl	80052f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004786:	e02a      	b.n	80047de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004788:	f001 fa08 	bl	8005b9c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800478c:	e027      	b.n	80047de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800478e:	f001 f9e7 	bl	8005b60 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004792:	e024      	b.n	80047de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <_HandleIncomingPacket+0xdc>)
 8004796:	7e1b      	ldrb	r3, [r3, #24]
 8004798:	4618      	mov	r0, r3
 800479a:	1cfb      	adds	r3, r7, #3
 800479c:	2201      	movs	r2, #1
 800479e:	4619      	mov	r1, r3
 80047a0:	f7ff fd16 	bl	80041d0 <SEGGER_RTT_ReadNoLock>
 80047a4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d015      	beq.n	80047d8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 f956 	bl	8005a60 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80047b4:	e010      	b.n	80047d8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da0e      	bge.n	80047dc <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <_HandleIncomingPacket+0xdc>)
 80047c0:	7e1b      	ldrb	r3, [r3, #24]
 80047c2:	4618      	mov	r0, r3
 80047c4:	1cfb      	adds	r3, r7, #3
 80047c6:	2201      	movs	r2, #1
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7ff fd01 	bl	80041d0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80047ce:	e005      	b.n	80047dc <_HandleIncomingPacket+0xd0>
    }
  }
 80047d0:	bf00      	nop
 80047d2:	e004      	b.n	80047de <_HandleIncomingPacket+0xd2>
      break;
 80047d4:	bf00      	nop
 80047d6:	e002      	b.n	80047de <_HandleIncomingPacket+0xd2>
      break;
 80047d8:	bf00      	nop
 80047da:	e000      	b.n	80047de <_HandleIncomingPacket+0xd2>
      break;
 80047dc:	bf00      	nop
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2407eff8 	.word	0x2407eff8

080047ec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08c      	sub	sp, #48	; 0x30
 80047f0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80047f2:	2301      	movs	r3, #1
 80047f4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	3301      	adds	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <_TrySendOverflowPacket+0xe0>)
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
 8004806:	e00b      	b.n	8004820 <_TrySendOverflowPacket+0x34>
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	09db      	lsrs	r3, r3, #7
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	2b7f      	cmp	r3, #127	; 0x7f
 8004824:	d8f0      	bhi.n	8004808 <_TrySendOverflowPacket+0x1c>
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800482c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004836:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <_TrySendOverflowPacket+0xe4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <_TrySendOverflowPacket+0xe0>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	e00b      	b.n	8004868 <_TrySendOverflowPacket+0x7c>
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	b2da      	uxtb	r2, r3
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	1c59      	adds	r1, r3, #1
 8004858:	6279      	str	r1, [r7, #36]	; 0x24
 800485a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	09db      	lsrs	r3, r3, #7
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	2b7f      	cmp	r3, #127	; 0x7f
 800486c:	d8f0      	bhi.n	8004850 <_TrySendOverflowPacket+0x64>
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	627a      	str	r2, [r7, #36]	; 0x24
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800487e:	4b13      	ldr	r3, [pc, #76]	; (80048cc <_TrySendOverflowPacket+0xe0>)
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	4618      	mov	r0, r3
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	461a      	mov	r2, r3
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	4619      	mov	r1, r3
 8004890:	f7fb fd26 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004894:	4603      	mov	r3, r0
 8004896:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004898:	f7ff fa68 	bl	8003d6c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <_TrySendOverflowPacket+0xe0>)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <_TrySendOverflowPacket+0xe0>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <_TrySendOverflowPacket+0xe0>)
 80048b2:	701a      	strb	r2, [r3, #0]
 80048b4:	e004      	b.n	80048c0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <_TrySendOverflowPacket+0xe0>)
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	3301      	adds	r3, #1
 80048bc:	4a03      	ldr	r2, [pc, #12]	; (80048cc <_TrySendOverflowPacket+0xe0>)
 80048be:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80048c0:	693b      	ldr	r3, [r7, #16]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3730      	adds	r7, #48	; 0x30
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	2407eff8 	.word	0x2407eff8
 80048d0:	e0001004 	.word	0xe0001004

080048d4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80048e0:	4b96      	ldr	r3, [pc, #600]	; (8004b3c <_SendPacket+0x268>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d010      	beq.n	800490a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80048e8:	4b94      	ldr	r3, [pc, #592]	; (8004b3c <_SendPacket+0x268>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8130 	beq.w	8004b52 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80048f2:	4b92      	ldr	r3, [pc, #584]	; (8004b3c <_SendPacket+0x268>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d109      	bne.n	800490e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80048fa:	f7ff ff77 	bl	80047ec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80048fe:	4b8f      	ldr	r3, [pc, #572]	; (8004b3c <_SendPacket+0x268>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	f040 8127 	bne.w	8004b56 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004908:	e001      	b.n	800490e <_SendPacket+0x3a>
    goto Send;
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <_SendPacket+0x3c>
Send:
 800490e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b1f      	cmp	r3, #31
 8004914:	d809      	bhi.n	800492a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004916:	4b89      	ldr	r3, [pc, #548]	; (8004b3c <_SendPacket+0x268>)
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	f040 8118 	bne.w	8004b5a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b17      	cmp	r3, #23
 800492e:	d807      	bhi.n	8004940 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3b01      	subs	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e0c4      	b.n	8004aca <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b7f      	cmp	r3, #127	; 0x7f
 800494c:	d912      	bls.n	8004974 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	09da      	lsrs	r2, r3, #7
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b01      	subs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	3a01      	subs	r2, #1
 8004966:	60fa      	str	r2, [r7, #12]
 8004968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e006      	b.n	8004982 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b01      	subs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b7e      	cmp	r3, #126	; 0x7e
 8004986:	d807      	bhi.n	8004998 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b01      	subs	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e098      	b.n	8004aca <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499e:	d212      	bcs.n	80049c6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	09da      	lsrs	r2, r3, #7
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	3a01      	subs	r2, #1
 80049b8:	60fa      	str	r2, [r7, #12]
 80049ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e081      	b.n	8004aca <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049cc:	d21d      	bcs.n	8004a0a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0b9a      	lsrs	r2, r3, #14
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	09db      	lsrs	r3, r3, #7
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	3a01      	subs	r2, #1
 80049e8:	60fa      	str	r2, [r7, #12]
 80049ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	3a01      	subs	r2, #1
 80049fc:	60fa      	str	r2, [r7, #12]
 80049fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	e05f      	b.n	8004aca <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a10:	d228      	bcs.n	8004a64 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0d5a      	lsrs	r2, r3, #21
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0b9b      	lsrs	r3, r3, #14
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	60fa      	str	r2, [r7, #12]
 8004a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	09db      	lsrs	r3, r3, #7
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	3a01      	subs	r2, #1
 8004a42:	60fa      	str	r2, [r7, #12]
 8004a44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	3a01      	subs	r2, #1
 8004a56:	60fa      	str	r2, [r7, #12]
 8004a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e032      	b.n	8004aca <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	0f1a      	lsrs	r2, r3, #28
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0d5b      	lsrs	r3, r3, #21
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	60fa      	str	r2, [r7, #12]
 8004a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0b9b      	lsrs	r3, r3, #14
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	3a01      	subs	r2, #1
 8004a94:	60fa      	str	r2, [r7, #12]
 8004a96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	09db      	lsrs	r3, r3, #7
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	60fa      	str	r2, [r7, #12]
 8004aac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	3a01      	subs	r2, #1
 8004abe:	60fa      	str	r2, [r7, #12]
 8004ac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <_SendPacket+0x26c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <_SendPacket+0x268>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	623b      	str	r3, [r7, #32]
 8004ae2:	e00b      	b.n	8004afc <_SendPacket+0x228>
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	6279      	str	r1, [r7, #36]	; 0x24
 8004aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	09db      	lsrs	r3, r3, #7
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	2b7f      	cmp	r3, #127	; 0x7f
 8004b00:	d8f0      	bhi.n	8004ae4 <_SendPacket+0x210>
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	627a      	str	r2, [r7, #36]	; 0x24
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <_SendPacket+0x268>)
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	4618      	mov	r0, r3
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68f9      	ldr	r1, [r7, #12]
 8004b22:	f7fb fbdd 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b26:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004b28:	f7ff f920 	bl	8003d6c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b32:	4a02      	ldr	r2, [pc, #8]	; (8004b3c <_SendPacket+0x268>)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	60d3      	str	r3, [r2, #12]
 8004b38:	e010      	b.n	8004b5c <_SendPacket+0x288>
 8004b3a:	bf00      	nop
 8004b3c:	2407eff8 	.word	0x2407eff8
 8004b40:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <_SendPacket+0x2d8>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	4b17      	ldr	r3, [pc, #92]	; (8004bac <_SendPacket+0x2d8>)
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e004      	b.n	8004b5c <_SendPacket+0x288>
    goto SendDone;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <_SendPacket+0x288>
      goto SendDone;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <_SendPacket+0x288>
      goto SendDone;
 8004b5a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b5c:	4b13      	ldr	r3, [pc, #76]	; (8004bac <_SendPacket+0x2d8>)
 8004b5e:	7e1b      	ldrb	r3, [r3, #24]
 8004b60:	4619      	mov	r1, r3
 8004b62:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <_SendPacket+0x2dc>)
 8004b64:	460b      	mov	r3, r1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	440b      	add	r3, r1
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	336c      	adds	r3, #108	; 0x6c
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <_SendPacket+0x2d8>)
 8004b74:	7e1b      	ldrb	r3, [r3, #24]
 8004b76:	4618      	mov	r0, r3
 8004b78:	490d      	ldr	r1, [pc, #52]	; (8004bb0 <_SendPacket+0x2dc>)
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4403      	add	r3, r0
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	440b      	add	r3, r1
 8004b84:	3370      	adds	r3, #112	; 0x70
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d00b      	beq.n	8004ba4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004b8c:	4b07      	ldr	r3, [pc, #28]	; (8004bac <_SendPacket+0x2d8>)
 8004b8e:	789b      	ldrb	r3, [r3, #2]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d107      	bne.n	8004ba4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <_SendPacket+0x2d8>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004b9a:	f7ff fdb7 	bl	800470c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004b9e:	4b03      	ldr	r3, [pc, #12]	; (8004bac <_SendPacket+0x2d8>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004ba4:	bf00      	nop
 8004ba6:	3728      	adds	r7, #40	; 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	2407eff8 	.word	0x2407eff8
 8004bb0:	24006f38 	.word	0x24006f38

08004bb4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <SEGGER_SYSVIEW_Init+0x74>)
 8004bc6:	4919      	ldr	r1, [pc, #100]	; (8004c2c <SEGGER_SYSVIEW_Init+0x78>)
 8004bc8:	4819      	ldr	r0, [pc, #100]	; (8004c30 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bca:	f7ff fc73 	bl	80044b4 <SEGGER_RTT_AllocUpBuffer>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004bd4:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004bd8:	785a      	ldrb	r2, [r3, #1]
 8004bda:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004bdc:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004be0:	7e1b      	ldrb	r3, [r3, #24]
 8004be2:	4618      	mov	r0, r3
 8004be4:	2300      	movs	r3, #0
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	2308      	movs	r3, #8
 8004bea:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <SEGGER_SYSVIEW_Init+0x84>)
 8004bec:	4910      	ldr	r1, [pc, #64]	; (8004c30 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bee:	f7ff fce5 	bl	80045bc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bf8:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <SEGGER_SYSVIEW_Init+0x88>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004bfe:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c00:	4a0c      	ldr	r2, [pc, #48]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c06:	4a0b      	ldr	r2, [pc, #44]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c0c:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c12:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <SEGGER_SYSVIEW_Init+0x80>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	00077c00 	.word	0x00077c00
 8004c2c:	240073f0 	.word	0x240073f0
 8004c30:	08010a88 	.word	0x08010a88
 8004c34:	2407eff8 	.word	0x2407eff8
 8004c38:	2407eff0 	.word	0x2407eff0
 8004c3c:	e0001004 	.word	0xe0001004

08004c40 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c48:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6113      	str	r3, [r2, #16]
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2407eff8 	.word	0x2407eff8

08004c60 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c68:	f3ef 8311 	mrs	r3, BASEPRI
 8004c6c:	f04f 0120 	mov.w	r1, #32
 8004c70:	f381 8811 	msr	BASEPRI, r1
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	4808      	ldr	r0, [pc, #32]	; (8004c98 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c78:	f7ff fd3c 	bl	80046f4 <_PreparePacket>
 8004c7c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68b8      	ldr	r0, [r7, #8]
 8004c84:	f7ff fe26 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f383 8811 	msr	BASEPRI, r3
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	2407f028 	.word	0x2407f028

08004c9c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8004caa:	f04f 0120 	mov.w	r1, #32
 8004cae:	f381 8811 	msr	BASEPRI, r1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	4816      	ldr	r0, [pc, #88]	; (8004d10 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004cb6:	f7ff fd1d 	bl	80046f4 <_PreparePacket>
 8004cba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e00b      	b.n	8004ce2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	1c59      	adds	r1, r3, #1
 8004cd2:	61f9      	str	r1, [r7, #28]
 8004cd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	09db      	lsrs	r3, r3, #7
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce6:	d8f0      	bhi.n	8004cca <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	61fa      	str	r2, [r7, #28]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	6938      	ldr	r0, [r7, #16]
 8004cfe:	f7ff fde9 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f383 8811 	msr	BASEPRI, r3
}
 8004d08:	bf00      	nop
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	2407f028 	.word	0x2407f028

08004d14 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08c      	sub	sp, #48	; 0x30
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d20:	f3ef 8311 	mrs	r3, BASEPRI
 8004d24:	f04f 0120 	mov.w	r1, #32
 8004d28:	f381 8811 	msr	BASEPRI, r1
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	4825      	ldr	r0, [pc, #148]	; (8004dc4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d30:	f7ff fce0 	bl	80046f4 <_PreparePacket>
 8004d34:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d42:	e00b      	b.n	8004d5c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	09db      	lsrs	r3, r3, #7
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d60:	d8f0      	bhi.n	8004d44 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	e00b      	b.n	8004d94 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	6279      	str	r1, [r7, #36]	; 0x24
 8004d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	09db      	lsrs	r3, r3, #7
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2b7f      	cmp	r3, #127	; 0x7f
 8004d98:	d8f0      	bhi.n	8004d7c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	6979      	ldr	r1, [r7, #20]
 8004dae:	69b8      	ldr	r0, [r7, #24]
 8004db0:	f7ff fd90 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f383 8811 	msr	BASEPRI, r3
}
 8004dba:	bf00      	nop
 8004dbc:	3730      	adds	r7, #48	; 0x30
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2407f028 	.word	0x2407f028

08004dc8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08e      	sub	sp, #56	; 0x38
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dda:	f04f 0120 	mov.w	r1, #32
 8004dde:	f381 8811 	msr	BASEPRI, r1
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	4832      	ldr	r0, [pc, #200]	; (8004eb0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004de6:	f7ff fc85 	bl	80046f4 <_PreparePacket>
 8004dea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
 8004df8:	e00b      	b.n	8004e12 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	1c59      	adds	r1, r3, #1
 8004e02:	6379      	str	r1, [r7, #52]	; 0x34
 8004e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	09db      	lsrs	r3, r3, #7
 8004e10:	633b      	str	r3, [r7, #48]	; 0x30
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	2b7f      	cmp	r3, #127	; 0x7f
 8004e16:	d8f0      	bhi.n	8004dfa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	637a      	str	r2, [r7, #52]	; 0x34
 8004e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e30:	e00b      	b.n	8004e4a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	1c59      	adds	r1, r3, #1
 8004e3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	09db      	lsrs	r3, r3, #7
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4e:	d8f0      	bhi.n	8004e32 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	623b      	str	r3, [r7, #32]
 8004e68:	e00b      	b.n	8004e82 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1c59      	adds	r1, r3, #1
 8004e72:	6279      	str	r1, [r7, #36]	; 0x24
 8004e74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	09db      	lsrs	r3, r3, #7
 8004e80:	623b      	str	r3, [r7, #32]
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	2b7f      	cmp	r3, #127	; 0x7f
 8004e86:	d8f0      	bhi.n	8004e6a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	627a      	str	r2, [r7, #36]	; 0x24
 8004e8e:	6a3a      	ldr	r2, [r7, #32]
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	69b8      	ldr	r0, [r7, #24]
 8004e9e:	f7ff fd19 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f383 8811 	msr	BASEPRI, r3
}
 8004ea8:	bf00      	nop
 8004eaa:	3738      	adds	r7, #56	; 0x38
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	2407f028 	.word	0x2407f028

08004eb4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b090      	sub	sp, #64	; 0x40
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec6:	f04f 0120 	mov.w	r1, #32
 8004eca:	f381 8811 	msr	BASEPRI, r1
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	4840      	ldr	r0, [pc, #256]	; (8004fd4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004ed2:	f7ff fc0f 	bl	80046f4 <_PreparePacket>
 8004ed6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee4:	e00b      	b.n	8004efe <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	1c59      	adds	r1, r3, #1
 8004eee:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	09db      	lsrs	r3, r3, #7
 8004efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b7f      	cmp	r3, #127	; 0x7f
 8004f02:	d8f0      	bhi.n	8004ee6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1c:	e00b      	b.n	8004f36 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	6379      	str	r1, [r7, #52]	; 0x34
 8004f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	09db      	lsrs	r3, r3, #7
 8004f34:	633b      	str	r3, [r7, #48]	; 0x30
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3a:	d8f0      	bhi.n	8004f1e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	637a      	str	r2, [r7, #52]	; 0x34
 8004f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f54:	e00b      	b.n	8004f6e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	1c59      	adds	r1, r3, #1
 8004f5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	09db      	lsrs	r3, r3, #7
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	2b7f      	cmp	r3, #127	; 0x7f
 8004f72:	d8f0      	bhi.n	8004f56 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
 8004f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	e00b      	b.n	8004fa6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	1c59      	adds	r1, r3, #1
 8004f96:	6279      	str	r1, [r7, #36]	; 0x24
 8004f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	09db      	lsrs	r3, r3, #7
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8004faa:	d8f0      	bhi.n	8004f8e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	627a      	str	r2, [r7, #36]	; 0x24
 8004fb2:	6a3a      	ldr	r2, [r7, #32]
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	69b8      	ldr	r0, [r7, #24]
 8004fc2:	f7ff fc87 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f383 8811 	msr	BASEPRI, r3
}
 8004fcc:	bf00      	nop
 8004fce:	3740      	adds	r7, #64	; 0x40
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	2407f028 	.word	0x2407f028

08004fd8 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b092      	sub	sp, #72	; 0x48
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fea:	f04f 0120 	mov.w	r1, #32
 8004fee:	f381 8811 	msr	BASEPRI, r1
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	484e      	ldr	r0, [pc, #312]	; (8005130 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004ff6:	f7ff fb7d 	bl	80046f4 <_PreparePacket>
 8004ffa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	647b      	str	r3, [r7, #68]	; 0x44
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	643b      	str	r3, [r7, #64]	; 0x40
 8005008:	e00b      	b.n	8005022 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800500a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500c:	b2da      	uxtb	r2, r3
 800500e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005010:	1c59      	adds	r1, r3, #1
 8005012:	6479      	str	r1, [r7, #68]	; 0x44
 8005014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501e:	09db      	lsrs	r3, r3, #7
 8005020:	643b      	str	r3, [r7, #64]	; 0x40
 8005022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005024:	2b7f      	cmp	r3, #127	; 0x7f
 8005026:	d8f0      	bhi.n	800500a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	647a      	str	r2, [r7, #68]	; 0x44
 800502e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005036:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005040:	e00b      	b.n	800505a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	b2da      	uxtb	r2, r3
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	1c59      	adds	r1, r3, #1
 800504a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800504c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	09db      	lsrs	r3, r3, #7
 8005058:	63bb      	str	r3, [r7, #56]	; 0x38
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	2b7f      	cmp	r3, #127	; 0x7f
 800505e:	d8f0      	bhi.n	8005042 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8005060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	633b      	str	r3, [r7, #48]	; 0x30
 8005078:	e00b      	b.n	8005092 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	b2da      	uxtb	r2, r3
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	1c59      	adds	r1, r3, #1
 8005082:	6379      	str	r1, [r7, #52]	; 0x34
 8005084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	09db      	lsrs	r3, r3, #7
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	2b7f      	cmp	r3, #127	; 0x7f
 8005096:	d8f0      	bhi.n	800507a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	637a      	str	r2, [r7, #52]	; 0x34
 800509e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b0:	e00b      	b.n	80050ca <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	1c59      	adds	r1, r3, #1
 80050ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	09db      	lsrs	r3, r3, #7
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	2b7f      	cmp	r3, #127	; 0x7f
 80050ce:	d8f0      	bhi.n	80050b2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
 80050e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	e00b      	b.n	8005102 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	1c59      	adds	r1, r3, #1
 80050f2:	6279      	str	r1, [r7, #36]	; 0x24
 80050f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	09db      	lsrs	r3, r3, #7
 8005100:	623b      	str	r3, [r7, #32]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	2b7f      	cmp	r3, #127	; 0x7f
 8005106:	d8f0      	bhi.n	80050ea <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	627a      	str	r2, [r7, #36]	; 0x24
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	69b8      	ldr	r0, [r7, #24]
 800511e:	f7ff fbd9 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f383 8811 	msr	BASEPRI, r3
}
 8005128:	bf00      	nop
 800512a:	3748      	adds	r7, #72	; 0x48
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	2407f028 	.word	0x2407f028

08005134 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b08c      	sub	sp, #48	; 0x30
 8005138:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800513a:	4b59      	ldr	r3, [pc, #356]	; (80052a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005140:	f3ef 8311 	mrs	r3, BASEPRI
 8005144:	f04f 0120 	mov.w	r1, #32
 8005148:	f381 8811 	msr	BASEPRI, r1
 800514c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800514e:	4b54      	ldr	r3, [pc, #336]	; (80052a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	220a      	movs	r2, #10
 8005154:	4953      	ldr	r1, [pc, #332]	; (80052a4 <SEGGER_SYSVIEW_Start+0x170>)
 8005156:	4618      	mov	r0, r3
 8005158:	f7fb f8c2 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005162:	f7fe fe03 	bl	8003d6c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005166:	200a      	movs	r0, #10
 8005168:	f7ff fd7a 	bl	8004c60 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800516c:	f3ef 8311 	mrs	r3, BASEPRI
 8005170:	f04f 0120 	mov.w	r1, #32
 8005174:	f381 8811 	msr	BASEPRI, r1
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	484b      	ldr	r0, [pc, #300]	; (80052a8 <SEGGER_SYSVIEW_Start+0x174>)
 800517c:	f7ff faba 	bl	80046f4 <_PreparePacket>
 8005180:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800518a:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005190:	e00b      	b.n	80051aa <SEGGER_SYSVIEW_Start+0x76>
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	b2da      	uxtb	r2, r3
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	1c59      	adds	r1, r3, #1
 800519a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800519c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	09db      	lsrs	r3, r3, #7
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	2b7f      	cmp	r3, #127	; 0x7f
 80051ae:	d8f0      	bhi.n	8005192 <SEGGER_SYSVIEW_Start+0x5e>
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
 80051c4:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <SEGGER_SYSVIEW_Start+0x16c>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	623b      	str	r3, [r7, #32]
 80051ca:	e00b      	b.n	80051e4 <SEGGER_SYSVIEW_Start+0xb0>
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	6279      	str	r1, [r7, #36]	; 0x24
 80051d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	09db      	lsrs	r3, r3, #7
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	2b7f      	cmp	r3, #127	; 0x7f
 80051e8:	d8f0      	bhi.n	80051cc <SEGGER_SYSVIEW_Start+0x98>
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	627a      	str	r2, [r7, #36]	; 0x24
 80051f0:	6a3a      	ldr	r2, [r7, #32]
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	e00b      	b.n	800521e <SEGGER_SYSVIEW_Start+0xea>
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	1c59      	adds	r1, r3, #1
 800520e:	61f9      	str	r1, [r7, #28]
 8005210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	09db      	lsrs	r3, r3, #7
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b7f      	cmp	r3, #127	; 0x7f
 8005222:	d8f0      	bhi.n	8005206 <SEGGER_SYSVIEW_Start+0xd2>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e00b      	b.n	8005256 <SEGGER_SYSVIEW_Start+0x122>
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	1c59      	adds	r1, r3, #1
 8005246:	6179      	str	r1, [r7, #20]
 8005248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	09db      	lsrs	r3, r3, #7
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b7f      	cmp	r3, #127	; 0x7f
 800525a:	d8f0      	bhi.n	800523e <SEGGER_SYSVIEW_Start+0x10a>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	617a      	str	r2, [r7, #20]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800526c:	2218      	movs	r2, #24
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff fb2f 	bl	80048d4 <_SendPacket>
      RECORD_END();
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800528a:	f000 f9eb 	bl	8005664 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800528e:	f000 f9b1 	bl	80055f4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005292:	f000 fc83 	bl	8005b9c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005296:	bf00      	nop
 8005298:	3730      	adds	r7, #48	; 0x30
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	2407eff8 	.word	0x2407eff8
 80052a4:	08010ee8 	.word	0x08010ee8
 80052a8:	2407f028 	.word	0x2407f028

080052ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052b2:	f3ef 8311 	mrs	r3, BASEPRI
 80052b6:	f04f 0120 	mov.w	r1, #32
 80052ba:	f381 8811 	msr	BASEPRI, r1
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	480b      	ldr	r0, [pc, #44]	; (80052f0 <SEGGER_SYSVIEW_Stop+0x44>)
 80052c2:	f7ff fa17 	bl	80046f4 <_PreparePacket>
 80052c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80052d0:	220b      	movs	r2, #11
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	6838      	ldr	r0, [r7, #0]
 80052d6:	f7ff fafd 	bl	80048d4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80052da:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f383 8811 	msr	BASEPRI, r3
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	2407f028 	.word	0x2407f028
 80052f4:	2407eff8 	.word	0x2407eff8

080052f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08c      	sub	sp, #48	; 0x30
 80052fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80052fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005302:	f04f 0120 	mov.w	r1, #32
 8005306:	f381 8811 	msr	BASEPRI, r1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	4845      	ldr	r0, [pc, #276]	; (8005424 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800530e:	f7ff f9f1 	bl	80046f4 <_PreparePacket>
 8005312:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800531c:	4b42      	ldr	r3, [pc, #264]	; (8005428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
 8005322:	e00b      	b.n	800533c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	b2da      	uxtb	r2, r3
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800532e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	09db      	lsrs	r3, r3, #7
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	2b7f      	cmp	r3, #127	; 0x7f
 8005340:	d8f0      	bhi.n	8005324 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
 8005356:	4b34      	ldr	r3, [pc, #208]	; (8005428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	623b      	str	r3, [r7, #32]
 800535c:	e00b      	b.n	8005376 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1c59      	adds	r1, r3, #1
 8005366:	6279      	str	r1, [r7, #36]	; 0x24
 8005368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	09db      	lsrs	r3, r3, #7
 8005374:	623b      	str	r3, [r7, #32]
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	2b7f      	cmp	r3, #127	; 0x7f
 800537a:	d8f0      	bhi.n	800535e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	627a      	str	r2, [r7, #36]	; 0x24
 8005382:	6a3a      	ldr	r2, [r7, #32]
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	e00b      	b.n	80053b0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	61f9      	str	r1, [r7, #28]
 80053a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	09db      	lsrs	r3, r3, #7
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b7f      	cmp	r3, #127	; 0x7f
 80053b4:	d8f0      	bhi.n	8005398 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	61fa      	str	r2, [r7, #28]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e00b      	b.n	80053e8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	6179      	str	r1, [r7, #20]
 80053da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	09db      	lsrs	r3, r3, #7
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b7f      	cmp	r3, #127	; 0x7f
 80053ec:	d8f0      	bhi.n	80053d0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	617a      	str	r2, [r7, #20]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80053fe:	2218      	movs	r2, #24
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	68b8      	ldr	r0, [r7, #8]
 8005404:	f7ff fa66 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005416:	4b04      	ldr	r3, [pc, #16]	; (8005428 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	4798      	blx	r3
  }
}
 800541c:	bf00      	nop
 800541e:	3730      	adds	r7, #48	; 0x30
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	2407f028 	.word	0x2407f028
 8005428:	2407eff8 	.word	0x2407eff8

0800542c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b092      	sub	sp, #72	; 0x48
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005434:	f3ef 8311 	mrs	r3, BASEPRI
 8005438:	f04f 0120 	mov.w	r1, #32
 800543c:	f381 8811 	msr	BASEPRI, r1
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	486a      	ldr	r0, [pc, #424]	; (80055ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005444:	f7ff f956 	bl	80046f4 <_PreparePacket>
 8005448:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	647b      	str	r3, [r7, #68]	; 0x44
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b66      	ldr	r3, [pc, #408]	; (80055f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	643b      	str	r3, [r7, #64]	; 0x40
 800545e:	e00b      	b.n	8005478 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005462:	b2da      	uxtb	r2, r3
 8005464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005466:	1c59      	adds	r1, r3, #1
 8005468:	6479      	str	r1, [r7, #68]	; 0x44
 800546a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005474:	09db      	lsrs	r3, r3, #7
 8005476:	643b      	str	r3, [r7, #64]	; 0x40
 8005478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547a:	2b7f      	cmp	r3, #127	; 0x7f
 800547c:	d8f0      	bhi.n	8005460 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800547e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	647a      	str	r2, [r7, #68]	; 0x44
 8005484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	63bb      	str	r3, [r7, #56]	; 0x38
 8005498:	e00b      	b.n	80054b2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	b2da      	uxtb	r2, r3
 800549e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a0:	1c59      	adds	r1, r3, #1
 80054a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	09db      	lsrs	r3, r3, #7
 80054b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	2b7f      	cmp	r3, #127	; 0x7f
 80054b6:	d8f0      	bhi.n	800549a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80054b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	4619      	mov	r1, r3
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff f8bf 	bl	8004654 <_EncodeStr>
 80054d6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80054d8:	2209      	movs	r2, #9
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	6938      	ldr	r0, [r7, #16]
 80054de:	f7ff f9f9 	bl	80048d4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b40      	ldr	r3, [pc, #256]	; (80055f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	633b      	str	r3, [r7, #48]	; 0x30
 80054f6:	e00b      	b.n	8005510 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	6379      	str	r1, [r7, #52]	; 0x34
 8005502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	09db      	lsrs	r3, r3, #7
 800550e:	633b      	str	r3, [r7, #48]	; 0x30
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	2b7f      	cmp	r3, #127	; 0x7f
 8005514:	d8f0      	bhi.n	80054f8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	637a      	str	r2, [r7, #52]	; 0x34
 800551c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005530:	e00b      	b.n	800554a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	b2da      	uxtb	r2, r3
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	1c59      	adds	r1, r3, #1
 800553a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800553c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	09db      	lsrs	r3, r3, #7
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	2b7f      	cmp	r3, #127	; 0x7f
 800554e:	d8f0      	bhi.n	8005532 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	e00b      	b.n	8005584 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	6279      	str	r1, [r7, #36]	; 0x24
 8005576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	09db      	lsrs	r3, r3, #7
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	2b7f      	cmp	r3, #127	; 0x7f
 8005588:	d8f0      	bhi.n	800556c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	627a      	str	r2, [r7, #36]	; 0x24
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	e00b      	b.n	80055bc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	61f9      	str	r1, [r7, #28]
 80055ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b7f      	cmp	r3, #127	; 0x7f
 80055c0:	d8f0      	bhi.n	80055a4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80055d2:	2215      	movs	r2, #21
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	6938      	ldr	r0, [r7, #16]
 80055d8:	f7ff f97c 	bl	80048d4 <_SendPacket>
  RECORD_END();
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f383 8811 	msr	BASEPRI, r3
}
 80055e2:	bf00      	nop
 80055e4:	3748      	adds	r7, #72	; 0x48
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	2407f028 	.word	0x2407f028
 80055f0:	2407eff8 	.word	0x2407eff8

080055f4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80055f8:	4b07      	ldr	r3, [pc, #28]	; (8005618 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800560a:	4b03      	ldr	r3, [pc, #12]	; (8005618 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4798      	blx	r3
  }
}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2407eff8 	.word	0x2407eff8

0800561c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005624:	f3ef 8311 	mrs	r3, BASEPRI
 8005628:	f04f 0120 	mov.w	r1, #32
 800562c:	f381 8811 	msr	BASEPRI, r1
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	480b      	ldr	r0, [pc, #44]	; (8005660 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005634:	f7ff f85e 	bl	80046f4 <_PreparePacket>
 8005638:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800563a:	2280      	movs	r2, #128	; 0x80
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	6938      	ldr	r0, [r7, #16]
 8005640:	f7ff f808 	bl	8004654 <_EncodeStr>
 8005644:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005646:	220e      	movs	r2, #14
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	6938      	ldr	r0, [r7, #16]
 800564c:	f7ff f942 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f383 8811 	msr	BASEPRI, r3
}
 8005656:	bf00      	nop
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2407f028 	.word	0x2407f028

08005664 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800566a:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01a      	beq.n	80056a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d015      	beq.n	80056a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800567c:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4798      	blx	r3
 8005684:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005688:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800568a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	000a      	movs	r2, r1
 8005698:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800569a:	4613      	mov	r3, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4621      	mov	r1, r4
 80056a0:	200d      	movs	r0, #13
 80056a2:	f7ff fb37 	bl	8004d14 <SEGGER_SYSVIEW_RecordU32x2>
 80056a6:	e006      	b.n	80056b6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4619      	mov	r1, r3
 80056ae:	200c      	movs	r0, #12
 80056b0:	f7ff faf4 	bl	8004c9c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd90      	pop	{r4, r7, pc}
 80056be:	bf00      	nop
 80056c0:	2407eff8 	.word	0x2407eff8
 80056c4:	e0001004 	.word	0xe0001004

080056c8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056ce:	f3ef 8311 	mrs	r3, BASEPRI
 80056d2:	f04f 0120 	mov.w	r1, #32
 80056d6:	f381 8811 	msr	BASEPRI, r1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	4819      	ldr	r0, [pc, #100]	; (8005744 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80056de:	f7ff f809 	bl	80046f4 <_PreparePacket>
 80056e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80056e8:	4b17      	ldr	r3, [pc, #92]	; (8005748 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	e00b      	b.n	8005714 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1c59      	adds	r1, r3, #1
 8005704:	6179      	str	r1, [r7, #20]
 8005706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	09db      	lsrs	r3, r3, #7
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b7f      	cmp	r3, #127	; 0x7f
 8005718:	d8f0      	bhi.n	80056fc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	617a      	str	r2, [r7, #20]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800572a:	2202      	movs	r2, #2
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	68b8      	ldr	r0, [r7, #8]
 8005730:	f7ff f8d0 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f383 8811 	msr	BASEPRI, r3
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	2407f028 	.word	0x2407f028
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005752:	f3ef 8311 	mrs	r3, BASEPRI
 8005756:	f04f 0120 	mov.w	r1, #32
 800575a:	f381 8811 	msr	BASEPRI, r1
 800575e:	607b      	str	r3, [r7, #4]
 8005760:	4807      	ldr	r0, [pc, #28]	; (8005780 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005762:	f7fe ffc7 	bl	80046f4 <_PreparePacket>
 8005766:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005768:	2203      	movs	r2, #3
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6838      	ldr	r0, [r7, #0]
 800576e:	f7ff f8b1 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f383 8811 	msr	BASEPRI, r3
}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	2407f028 	.word	0x2407f028

08005784 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800578a:	f3ef 8311 	mrs	r3, BASEPRI
 800578e:	f04f 0120 	mov.w	r1, #32
 8005792:	f381 8811 	msr	BASEPRI, r1
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	4807      	ldr	r0, [pc, #28]	; (80057b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800579a:	f7fe ffab 	bl	80046f4 <_PreparePacket>
 800579e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80057a0:	2212      	movs	r2, #18
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f7ff f895 	bl	80048d4 <_SendPacket>
  RECORD_END();
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f383 8811 	msr	BASEPRI, r3
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	2407f028 	.word	0x2407f028

080057bc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057c2:	f3ef 8311 	mrs	r3, BASEPRI
 80057c6:	f04f 0120 	mov.w	r1, #32
 80057ca:	f381 8811 	msr	BASEPRI, r1
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	4807      	ldr	r0, [pc, #28]	; (80057f0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80057d2:	f7fe ff8f 	bl	80046f4 <_PreparePacket>
 80057d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80057d8:	2211      	movs	r2, #17
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6838      	ldr	r0, [r7, #0]
 80057de:	f7ff f879 	bl	80048d4 <_SendPacket>
  RECORD_END();
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f383 8811 	msr	BASEPRI, r3
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	2407f028 	.word	0x2407f028

080057f4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005800:	f04f 0120 	mov.w	r1, #32
 8005804:	f381 8811 	msr	BASEPRI, r1
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	4819      	ldr	r0, [pc, #100]	; (8005870 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800580c:	f7fe ff72 	bl	80046f4 <_PreparePacket>
 8005810:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005816:	4b17      	ldr	r3, [pc, #92]	; (8005874 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e00b      	b.n	8005842 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	1c59      	adds	r1, r3, #1
 8005832:	61f9      	str	r1, [r7, #28]
 8005834:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	09db      	lsrs	r3, r3, #7
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b7f      	cmp	r3, #127	; 0x7f
 8005846:	d8f0      	bhi.n	800582a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	61fa      	str	r2, [r7, #28]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005858:	2208      	movs	r2, #8
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	6938      	ldr	r0, [r7, #16]
 800585e:	f7ff f839 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f383 8811 	msr	BASEPRI, r3
}
 8005868:	bf00      	nop
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	2407f028 	.word	0x2407f028
 8005874:	2407eff8 	.word	0x2407eff8

08005878 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005880:	f3ef 8311 	mrs	r3, BASEPRI
 8005884:	f04f 0120 	mov.w	r1, #32
 8005888:	f381 8811 	msr	BASEPRI, r1
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	4819      	ldr	r0, [pc, #100]	; (80058f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005890:	f7fe ff30 	bl	80046f4 <_PreparePacket>
 8005894:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800589a:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	e00b      	b.n	80058c6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	1c59      	adds	r1, r3, #1
 80058b6:	61f9      	str	r1, [r7, #28]
 80058b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	09db      	lsrs	r3, r3, #7
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ca:	d8f0      	bhi.n	80058ae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	61fa      	str	r2, [r7, #28]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80058dc:	2204      	movs	r2, #4
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	6938      	ldr	r0, [r7, #16]
 80058e2:	f7fe fff7 	bl	80048d4 <_SendPacket>
  RECORD_END();
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f383 8811 	msr	BASEPRI, r3
}
 80058ec:	bf00      	nop
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	2407f028 	.word	0x2407f028
 80058f8:	2407eff8 	.word	0x2407eff8

080058fc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005904:	f3ef 8311 	mrs	r3, BASEPRI
 8005908:	f04f 0120 	mov.w	r1, #32
 800590c:	f381 8811 	msr	BASEPRI, r1
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	4819      	ldr	r0, [pc, #100]	; (8005978 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005914:	f7fe feee 	bl	80046f4 <_PreparePacket>
 8005918:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800591e:	4b17      	ldr	r3, [pc, #92]	; (800597c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	e00b      	b.n	800594a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	1c59      	adds	r1, r3, #1
 800593a:	61f9      	str	r1, [r7, #28]
 800593c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	09db      	lsrs	r3, r3, #7
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b7f      	cmp	r3, #127	; 0x7f
 800594e:	d8f0      	bhi.n	8005932 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	61fa      	str	r2, [r7, #28]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005960:	2206      	movs	r2, #6
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	6938      	ldr	r0, [r7, #16]
 8005966:	f7fe ffb5 	bl	80048d4 <_SendPacket>
  RECORD_END();
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f383 8811 	msr	BASEPRI, r3
}
 8005970:	bf00      	nop
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	2407f028 	.word	0x2407f028
 800597c:	2407eff8 	.word	0x2407eff8

08005980 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800598a:	f3ef 8311 	mrs	r3, BASEPRI
 800598e:	f04f 0120 	mov.w	r1, #32
 8005992:	f381 8811 	msr	BASEPRI, r1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	4827      	ldr	r0, [pc, #156]	; (8005a38 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800599a:	f7fe feab 	bl	80046f4 <_PreparePacket>
 800599e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059a4:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	e00b      	b.n	80059d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	6279      	str	r1, [r7, #36]	; 0x24
 80059c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	09db      	lsrs	r3, r3, #7
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2b7f      	cmp	r3, #127	; 0x7f
 80059d4:	d8f0      	bhi.n	80059b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	627a      	str	r2, [r7, #36]	; 0x24
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	e00b      	b.n	8005a08 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	61f9      	str	r1, [r7, #28]
 80059fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	09db      	lsrs	r3, r3, #7
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0c:	d8f0      	bhi.n	80059f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	61fa      	str	r2, [r7, #28]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005a1e:	2207      	movs	r2, #7
 8005a20:	68f9      	ldr	r1, [r7, #12]
 8005a22:	6938      	ldr	r0, [r7, #16]
 8005a24:	f7fe ff56 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
}
 8005a2e:	bf00      	nop
 8005a30:	3728      	adds	r7, #40	; 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	2407f028 	.word	0x2407f028
 8005a3c:	2407eff8 	.word	0x2407eff8

08005a40 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005a48:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	1ad3      	subs	r3, r2, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	2407eff8 	.word	0x2407eff8

08005a60 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	; 0x30
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005a6a:	4b3b      	ldr	r3, [pc, #236]	; (8005b58 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d06d      	beq.n	8005b4e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005a72:	4b39      	ldr	r3, [pc, #228]	; (8005b58 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7c:	e008      	b.n	8005a90 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d3f2      	bcc.n	8005a7e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005a98:	e000      	b.n	8005a9c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005a9a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d055      	beq.n	8005b4e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa6:	f04f 0120 	mov.w	r1, #32
 8005aaa:	f381 8811 	msr	BASEPRI, r1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	482a      	ldr	r0, [pc, #168]	; (8005b5c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005ab2:	f7fe fe1f 	bl	80046f4 <_PreparePacket>
 8005ab6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	623b      	str	r3, [r7, #32]
 8005ac4:	e00b      	b.n	8005ade <SEGGER_SYSVIEW_SendModule+0x7e>
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	1c59      	adds	r1, r3, #1
 8005ace:	6279      	str	r1, [r7, #36]	; 0x24
 8005ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	09db      	lsrs	r3, r3, #7
 8005adc:	623b      	str	r3, [r7, #32]
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae2:	d8f0      	bhi.n	8005ac6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8005aea:	6a3a      	ldr	r2, [r7, #32]
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e00b      	b.n	8005b18 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	61f9      	str	r1, [r7, #28]
 8005b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	09db      	lsrs	r3, r3, #7
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1c:	d8f0      	bhi.n	8005b00 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	61fa      	str	r2, [r7, #28]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	4619      	mov	r1, r3
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7fe fd8c 	bl	8004654 <_EncodeStr>
 8005b3c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005b3e:	2216      	movs	r2, #22
 8005b40:	68f9      	ldr	r1, [r7, #12]
 8005b42:	6938      	ldr	r0, [r7, #16]
 8005b44:	f7fe fec6 	bl	80048d4 <_SendPacket>
      RECORD_END();
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005b4e:	bf00      	nop
 8005b50:	3730      	adds	r7, #48	; 0x30
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	2407f020 	.word	0x2407f020
 8005b5c:	2407f028 	.word	0x2407f028

08005b60 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005b66:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00f      	beq.n	8005b8e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f2      	bne.n	8005b74 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	2407f020 	.word	0x2407f020

08005b9c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba6:	f04f 0120 	mov.w	r1, #32
 8005baa:	f381 8811 	msr	BASEPRI, r1
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	4817      	ldr	r0, [pc, #92]	; (8005c10 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005bb2:	f7fe fd9f 	bl	80046f4 <_PreparePacket>
 8005bb6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	e00b      	b.n	8005be0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	6179      	str	r1, [r7, #20]
 8005bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	09db      	lsrs	r3, r3, #7
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b7f      	cmp	r3, #127	; 0x7f
 8005be4:	d8f0      	bhi.n	8005bc8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	617a      	str	r2, [r7, #20]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005bf6:	221b      	movs	r2, #27
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	68b8      	ldr	r0, [r7, #8]
 8005bfc:	f7fe fe6a 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f383 8811 	msr	BASEPRI, r3
}
 8005c06:	bf00      	nop
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	2407f028 	.word	0x2407f028
 8005c14:	2407f024 	.word	0x2407f024

08005c18 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c20:	f3ef 8311 	mrs	r3, BASEPRI
 8005c24:	f04f 0120 	mov.w	r1, #32
 8005c28:	f381 8811 	msr	BASEPRI, r1
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	4827      	ldr	r0, [pc, #156]	; (8005ccc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005c30:	f7fe fd60 	bl	80046f4 <_PreparePacket>
 8005c34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	6938      	ldr	r0, [r7, #16]
 8005c3c:	f7fe fd0a 	bl	8004654 <_EncodeStr>
 8005c40:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
 8005c46:	2301      	movs	r3, #1
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	e00b      	b.n	8005c64 <SEGGER_SYSVIEW_Warn+0x4c>
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	1c59      	adds	r1, r3, #1
 8005c54:	6279      	str	r1, [r7, #36]	; 0x24
 8005c56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	09db      	lsrs	r3, r3, #7
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b7f      	cmp	r3, #127	; 0x7f
 8005c68:	d8f0      	bhi.n	8005c4c <SEGGER_SYSVIEW_Warn+0x34>
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	627a      	str	r2, [r7, #36]	; 0x24
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	e00b      	b.n	8005c9c <SEGGER_SYSVIEW_Warn+0x84>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	61f9      	str	r1, [r7, #28]
 8005c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <SEGGER_SYSVIEW_Warn+0x6c>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	61fa      	str	r2, [r7, #28]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005cb2:	221a      	movs	r2, #26
 8005cb4:	68f9      	ldr	r1, [r7, #12]
 8005cb6:	6938      	ldr	r0, [r7, #16]
 8005cb8:	f7fe fe0c 	bl	80048d4 <_SendPacket>
  RECORD_END();
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f383 8811 	msr	BASEPRI, r3
}
 8005cc2:	bf00      	nop
 8005cc4:	3728      	adds	r7, #40	; 0x28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	2407f028 	.word	0x2407f028

08005cd0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005cd4:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005cd6:	7e1b      	ldrb	r3, [r3, #24]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005cdc:	460b      	mov	r3, r1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	440b      	add	r3, r1
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	336c      	adds	r3, #108	; 0x6c
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005cec:	7e1b      	ldrb	r3, [r3, #24]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	490d      	ldr	r1, [pc, #52]	; (8005d28 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4403      	add	r3, r0
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3370      	adds	r3, #112	; 0x70
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d00b      	beq.n	8005d1c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005d04:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d06:	789b      	ldrb	r3, [r3, #2]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d107      	bne.n	8005d1c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005d0c:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005d12:	f7fe fcfb 	bl	800470c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005d16:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005d1c:	4b01      	ldr	r3, [pc, #4]	; (8005d24 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	2407eff8 	.word	0x2407eff8
 8005d28:	24006f38 	.word	0x24006f38

08005d2c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f7fe fb92 	bl	8004468 <SEGGER_RTT_Write>
  return len;
 8005d44:	683b      	ldr	r3, [r7, #0]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <led_effect_stop>:

#include "main.h"

void led_effect_stop(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af02      	add	r7, sp, #8
	for(int i=0; i<4; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	e00e      	b.n	8005d7a <led_effect_stop+0x2a>
		xTimerStop(LED_Timer_Handle[i], portMAX_DELAY);
 8005d5c:	4a0b      	ldr	r2, [pc, #44]	; (8005d8c <led_effect_stop+0x3c>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2103      	movs	r1, #3
 8005d70:	f7fc fe3a 	bl	80029e8 <xTimerGenericCommand>
	for(int i=0; i<4; i++)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3301      	adds	r3, #1
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	dded      	ble.n	8005d5c <led_effect_stop+0xc>
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2407f5d8 	.word	0x2407f5d8

08005d90 <led_effect>:


void led_effect(int n)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8005d98:	f7ff ffda 	bl	8005d50 <led_effect_stop>
	xTimerStart(LED_Timer_Handle[n-1], portMAX_DELAY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <led_effect+0x34>)
 8005da2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005da6:	f7fb fe75 	bl	8001a94 <xTaskGetTickCount>
 8005daa:	4602      	mov	r2, r0
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	2300      	movs	r3, #0
 8005db4:	2101      	movs	r1, #1
 8005db6:	4620      	mov	r0, r4
 8005db8:	f7fc fe16 	bl	80029e8 <xTimerGenericCommand>
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd90      	pop	{r4, r7, pc}
 8005dc4:	2407f5d8 	.word	0x2407f5d8

08005dc8 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8005dcc:	2201      	movs	r2, #1
 8005dce:	2107      	movs	r1, #7
 8005dd0:	4802      	ldr	r0, [pc, #8]	; (8005ddc <turn_off_all_leds+0x14>)
 8005dd2:	f003 fc81 	bl	80096d8 <HAL_GPIO_WritePin>
}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	58020800 	.word	0x58020800

08005de0 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8005de4:	2200      	movs	r2, #0
 8005de6:	2107      	movs	r1, #7
 8005de8:	4802      	ldr	r0, [pc, #8]	; (8005df4 <turn_on_all_leds+0x14>)
 8005dea:	f003 fc75 	bl	80096d8 <HAL_GPIO_WritePin>
}
 8005dee:	bf00      	nop
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	58020800 	.word	0x58020800

08005df8 <turn_off_red_led>:

void turn_off_red_led(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1| GPIO_PIN_2, GPIO_PIN_SET);
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	2107      	movs	r1, #7
 8005e00:	4802      	ldr	r0, [pc, #8]	; (8005e0c <turn_off_red_led+0x14>)
 8005e02:	f003 fc69 	bl	80096d8 <HAL_GPIO_WritePin>
}
 8005e06:	bf00      	nop
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	58020800 	.word	0x58020800

08005e10 <turn_on_red_led>:

void turn_on_red_led(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1| GPIO_PIN_2, GPIO_PIN_SET);
 8005e14:	2201      	movs	r2, #1
 8005e16:	2106      	movs	r1, #6
 8005e18:	4804      	ldr	r0, [pc, #16]	; (8005e2c <turn_on_red_led+0x1c>)
 8005e1a:	f003 fc5d 	bl	80096d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2101      	movs	r1, #1
 8005e22:	4802      	ldr	r0, [pc, #8]	; (8005e2c <turn_on_red_led+0x1c>)
 8005e24:	f003 fc58 	bl	80096d8 <HAL_GPIO_WritePin>
}
 8005e28:	bf00      	nop
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	58020800 	.word	0x58020800

08005e30 <turn_off_green_led>:

void turn_off_green_led(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1| GPIO_PIN_2, GPIO_PIN_SET);
 8005e34:	2201      	movs	r2, #1
 8005e36:	2107      	movs	r1, #7
 8005e38:	4802      	ldr	r0, [pc, #8]	; (8005e44 <turn_off_green_led+0x14>)
 8005e3a:	f003 fc4d 	bl	80096d8 <HAL_GPIO_WritePin>
}
 8005e3e:	bf00      	nop
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	58020800 	.word	0x58020800

08005e48 <turn_on_green_led>:

void turn_on_green_led(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_2, GPIO_PIN_SET);
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	2105      	movs	r1, #5
 8005e50:	4804      	ldr	r0, [pc, #16]	; (8005e64 <turn_on_green_led+0x1c>)
 8005e52:	f003 fc41 	bl	80096d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8005e56:	2200      	movs	r2, #0
 8005e58:	2102      	movs	r1, #2
 8005e5a:	4802      	ldr	r0, [pc, #8]	; (8005e64 <turn_on_green_led+0x1c>)
 8005e5c:	f003 fc3c 	bl	80096d8 <HAL_GPIO_WritePin>
}
 8005e60:	bf00      	nop
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	58020800 	.word	0x58020800

08005e68 <turn_off_blue_led>:

void turn_off_blue_led(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1| GPIO_PIN_2, GPIO_PIN_SET);
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	2107      	movs	r1, #7
 8005e70:	4802      	ldr	r0, [pc, #8]	; (8005e7c <turn_off_blue_led+0x14>)
 8005e72:	f003 fc31 	bl	80096d8 <HAL_GPIO_WritePin>
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	58020800 	.word	0x58020800

08005e80 <turn_on_blue_led>:

void turn_on_blue_led(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);
 8005e84:	2201      	movs	r2, #1
 8005e86:	2103      	movs	r1, #3
 8005e88:	4804      	ldr	r0, [pc, #16]	; (8005e9c <turn_on_blue_led+0x1c>)
 8005e8a:	f003 fc25 	bl	80096d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2104      	movs	r1, #4
 8005e92:	4802      	ldr	r0, [pc, #8]	; (8005e9c <turn_on_blue_led+0x1c>)
 8005e94:	f003 fc20 	bl	80096d8 <HAL_GPIO_WritePin>
}
 8005e98:	bf00      	nop
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	58020800 	.word	0x58020800

08005ea0 <LED_effect1>:
//  for(int i = 0 ; i < 4 ; i++)
//	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
//}

void LED_effect1(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
	static int Flag = 1;
	(Flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8005ea4:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <LED_effect1+0x28>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f083 0301 	eor.w	r3, r3, #1
 8005eac:	4a06      	ldr	r2, [pc, #24]	; (8005ec8 <LED_effect1+0x28>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <LED_effect1+0x28>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <LED_effect1+0x1e>
 8005eb8:	f7ff ff86 	bl	8005dc8 <turn_off_all_leds>
}
 8005ebc:	e001      	b.n	8005ec2 <LED_effect1+0x22>
	(Flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8005ebe:	f7ff ff8f 	bl	8005de0 <turn_on_all_leds>
}
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	24000010 	.word	0x24000010

08005ecc <LED_effect2>:

void LED_effect2(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
	static int Flag = 1;
	(Flag ^= 1) ? turn_off_red_led() : turn_on_red_led();
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <LED_effect2+0x28>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	4a06      	ldr	r2, [pc, #24]	; (8005ef4 <LED_effect2+0x28>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <LED_effect2+0x28>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <LED_effect2+0x1e>
 8005ee4:	f7ff ff88 	bl	8005df8 <turn_off_red_led>
}
 8005ee8:	e001      	b.n	8005eee <LED_effect2+0x22>
	(Flag ^= 1) ? turn_off_red_led() : turn_on_red_led();
 8005eea:	f7ff ff91 	bl	8005e10 <turn_on_red_led>
}
 8005eee:	bf00      	nop
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	24000014 	.word	0x24000014

08005ef8 <LED_effect3>:

void LED_effect3(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
	static int Flag = 1;
	(Flag ^= 1) ? turn_off_green_led() : turn_on_green_led();
 8005efc:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <LED_effect3+0x28>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f083 0301 	eor.w	r3, r3, #1
 8005f04:	4a06      	ldr	r2, [pc, #24]	; (8005f20 <LED_effect3+0x28>)
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <LED_effect3+0x28>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <LED_effect3+0x1e>
 8005f10:	f7ff ff8e 	bl	8005e30 <turn_off_green_led>
}
 8005f14:	e001      	b.n	8005f1a <LED_effect3+0x22>
	(Flag ^= 1) ? turn_off_green_led() : turn_on_green_led();
 8005f16:	f7ff ff97 	bl	8005e48 <turn_on_green_led>
}
 8005f1a:	bf00      	nop
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	24000018 	.word	0x24000018

08005f24 <LED_effect4>:

void LED_effect4(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
	static int Flag = 1;
	(Flag ^= 1) ? turn_off_blue_led() : turn_on_blue_led();
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <LED_effect4+0x28>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f083 0301 	eor.w	r3, r3, #1
 8005f30:	4a06      	ldr	r2, [pc, #24]	; (8005f4c <LED_effect4+0x28>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <LED_effect4+0x28>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <LED_effect4+0x1e>
 8005f3c:	f7ff ff94 	bl	8005e68 <turn_off_blue_led>
}
 8005f40:	e001      	b.n	8005f46 <LED_effect4+0x22>
	(Flag ^= 1) ? turn_off_blue_led() : turn_on_blue_led();
 8005f42:	f7ff ff9d 	bl	8005e80 <turn_on_blue_led>
}
 8005f46:	bf00      	nop
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	2400001c 	.word	0x2400001c

08005f50 <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	; 0x28
 8005f54:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8005f56:	f107 0318 	add.w	r3, r7, #24
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f009 fbc8 	bl	800f6f4 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8005f64:	1d3b      	adds	r3, r7, #4
 8005f66:	2214      	movs	r2, #20
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f009 fbc2 	bl	800f6f4 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8005f70:	1d3b      	adds	r3, r7, #4
 8005f72:	2200      	movs	r2, #0
 8005f74:	4619      	mov	r1, r3
 8005f76:	4815      	ldr	r0, [pc, #84]	; (8005fcc <show_time_date_itm+0x7c>)
 8005f78:	f006 f908 	bl	800c18c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8005f7c:	f107 0318 	add.w	r3, r7, #24
 8005f80:	2200      	movs	r2, #0
 8005f82:	4619      	mov	r1, r3
 8005f84:	4811      	ldr	r0, [pc, #68]	; (8005fcc <show_time_date_itm+0x7c>)
 8005f86:	f006 f9e5 	bl	800c354 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <show_time_date_itm+0x44>
 8005f90:	4b0f      	ldr	r3, [pc, #60]	; (8005fd0 <show_time_date_itm+0x80>)
 8005f92:	e000      	b.n	8005f96 <show_time_date_itm+0x46>
 8005f94:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <show_time_date_itm+0x84>)
 8005f96:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8005f98:	793b      	ldrb	r3, [r7, #4]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	797b      	ldrb	r3, [r7, #5]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	79bb      	ldrb	r3, [r7, #6]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	4603      	mov	r3, r0
 8005faa:	480b      	ldr	r0, [pc, #44]	; (8005fd8 <show_time_date_itm+0x88>)
 8005fac:	f009 fbaa 	bl	800f704 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8005fb0:	7e7b      	ldrb	r3, [r7, #25]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	7ebb      	ldrb	r3, [r7, #26]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	7efb      	ldrb	r3, [r7, #27]
 8005fba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005fbe:	4807      	ldr	r0, [pc, #28]	; (8005fdc <show_time_date_itm+0x8c>)
 8005fc0:	f009 fba0 	bl	800f704 <iprintf>

 }
 8005fc4:	bf00      	nop
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	2407f200 	.word	0x2407f200
 8005fd0:	08010a90 	.word	0x08010a90
 8005fd4:	08010a94 	.word	0x08010a94
 8005fd8:	08010a98 	.word	0x08010a98
 8005fdc:	08010aac 	.word	0x08010aac

08005fe0 <show_time_date>:

void show_time_date(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08c      	sub	sp, #48	; 0x30
 8005fe4:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8005fe6:	f107 0318 	add.w	r3, r7, #24
 8005fea:	2204      	movs	r2, #4
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f009 fb80 	bl	800f6f4 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	2214      	movs	r2, #20
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f009 fb7a 	bl	800f6f4 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8006000:	1d3b      	adds	r3, r7, #4
 8006002:	2200      	movs	r2, #0
 8006004:	4619      	mov	r1, r3
 8006006:	4821      	ldr	r0, [pc, #132]	; (800608c <show_time_date+0xac>)
 8006008:	f006 f8c0 	bl	800c18c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800600c:	f107 0318 	add.w	r3, r7, #24
 8006010:	2200      	movs	r2, #0
 8006012:	4619      	mov	r1, r3
 8006014:	481d      	ldr	r0, [pc, #116]	; (800608c <show_time_date+0xac>)
 8006016:	f006 f99d 	bl	800c354 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <show_time_date+0x44>
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <show_time_date+0xb0>)
 8006022:	e000      	b.n	8006026 <show_time_date+0x46>
 8006024:	4b1b      	ldr	r3, [pc, #108]	; (8006094 <show_time_date+0xb4>)
 8006026:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8006028:	793b      	ldrb	r3, [r7, #4]
 800602a:	4618      	mov	r0, r3
 800602c:	797b      	ldrb	r3, [r7, #5]
 800602e:	461a      	mov	r2, r3
 8006030:	79bb      	ldrb	r3, [r7, #6]
 8006032:	4619      	mov	r1, r3
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	9302      	str	r3, [sp, #8]
 8006038:	9101      	str	r1, [sp, #4]
 800603a:	9200      	str	r2, [sp, #0]
 800603c:	4603      	mov	r3, r0
 800603e:	4a16      	ldr	r2, [pc, #88]	; (8006098 <show_time_date+0xb8>)
 8006040:	4916      	ldr	r1, [pc, #88]	; (800609c <show_time_date+0xbc>)
 8006042:	4817      	ldr	r0, [pc, #92]	; (80060a0 <show_time_date+0xc0>)
 8006044:	f009 fb76 	bl	800f734 <siprintf>
	xQueueSend(q_Print,&time,portMAX_DELAY);
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <show_time_date+0xc4>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	2300      	movs	r3, #0
 800604e:	f04f 32ff 	mov.w	r2, #4294967295
 8006052:	4915      	ldr	r1, [pc, #84]	; (80060a8 <show_time_date+0xc8>)
 8006054:	f7fa fd22 	bl	8000a9c <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8006058:	7e7b      	ldrb	r3, [r7, #25]
 800605a:	461a      	mov	r2, r3
 800605c:	7ebb      	ldrb	r3, [r7, #26]
 800605e:	4619      	mov	r1, r3
 8006060:	7efb      	ldrb	r3, [r7, #27]
 8006062:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	460b      	mov	r3, r1
 800606a:	4910      	ldr	r1, [pc, #64]	; (80060ac <show_time_date+0xcc>)
 800606c:	4810      	ldr	r0, [pc, #64]	; (80060b0 <show_time_date+0xd0>)
 800606e:	f009 fb61 	bl	800f734 <siprintf>
	xQueueSend(q_Print,&date,portMAX_DELAY);
 8006072:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <show_time_date+0xc4>)
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	f04f 32ff 	mov.w	r2, #4294967295
 800607c:	490d      	ldr	r1, [pc, #52]	; (80060b4 <show_time_date+0xd4>)
 800607e:	f7fa fd0d 	bl	8000a9c <xQueueGenericSend>
}
 8006082:	bf00      	nop
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	2407f200 	.word	0x2407f200
 8006090:	08010a90 	.word	0x08010a90
 8006094:	08010a94 	.word	0x08010a94
 8006098:	08010abc 	.word	0x08010abc
 800609c:	08010ad0 	.word	0x08010ad0
 80060a0:	2407f10c 	.word	0x2407f10c
 80060a4:	2407f5bc 	.word	0x2407f5bc
 80060a8:	24000020 	.word	0x24000020
 80060ac:	08010aac 	.word	0x08010aac
 80060b0:	2407f134 	.word	0x2407f134
 80060b4:	24000024 	.word	0x24000024

080060b8 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 80060d2:	2200      	movs	r2, #0
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4803      	ldr	r0, [pc, #12]	; (80060e4 <rtc_configure_time+0x2c>)
 80060d8:	f005 ffba 	bl	800c050 <HAL_RTC_SetTime>
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	2407f200 	.word	0x2407f200

080060e8 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 80060f0:	2200      	movs	r2, #0
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4803      	ldr	r0, [pc, #12]	; (8006104 <rtc_configure_date+0x1c>)
 80060f6:	f006 f8a5 	bl	800c244 <HAL_RTC_SetDate>
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2407f200 	.word	0x2407f200

08006108 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
	if(time){
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00d      	beq.n	8006134 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b0c      	cmp	r3, #12
 800611e:	d807      	bhi.n	8006130 <validate_rtc_information+0x28>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b3b      	cmp	r3, #59	; 0x3b
 8006126:	d803      	bhi.n	8006130 <validate_rtc_information+0x28>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	789b      	ldrb	r3, [r3, #2]
 800612c:	2b3b      	cmp	r3, #59	; 0x3b
 800612e:	d901      	bls.n	8006134 <validate_rtc_information+0x2c>
			return 1;
 8006130:	2301      	movs	r3, #1
 8006132:	e015      	b.n	8006160 <validate_rtc_information+0x58>
	}

	if(date){
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d011      	beq.n	800615e <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	789b      	ldrb	r3, [r3, #2]
 800613e:	2b1f      	cmp	r3, #31
 8006140:	d80b      	bhi.n	800615a <validate_rtc_information+0x52>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b07      	cmp	r3, #7
 8006148:	d807      	bhi.n	800615a <validate_rtc_information+0x52>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	78db      	ldrb	r3, [r3, #3]
 800614e:	2b63      	cmp	r3, #99	; 0x63
 8006150:	d803      	bhi.n	800615a <validate_rtc_information+0x52>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b0c      	cmp	r3, #12
 8006158:	d901      	bls.n	800615e <validate_rtc_information+0x56>
			return 1;
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <validate_rtc_information+0x58>
	}

	return 0;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <Menu_Task>:

const char *msg_inv = "////Invalid option////\n";
const char *RTCTask = "Inside RTC task\n";

void Menu_Task(void *param)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
 8006172:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 8006174:	4b31      	ldr	r3, [pc, #196]	; (800623c <Menu_Task+0xd0>)
 8006176:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_Print,&msg_menu,portMAX_DELAY);
 8006178:	4b31      	ldr	r3, [pc, #196]	; (8006240 <Menu_Task+0xd4>)
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	2300      	movs	r3, #0
 8006182:	f04f 32ff 	mov.w	r2, #4294967295
 8006186:	f7fa fc89 	bl	8000a9c <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	f04f 32ff 	mov.w	r2, #4294967295
 8006192:	9200      	str	r2, [sp, #0]
 8006194:	2200      	movs	r2, #0
 8006196:	2100      	movs	r1, #0
 8006198:	2000      	movs	r0, #0
 800619a:	f7fc f865 	bl	8002268 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	617b      	str	r3, [r7, #20]

		if(cmd->lenght == 1)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d133      	bne.n	8006212 <Menu_Task+0xa6>
		{
			option = cmd->payload[0] - 48;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	3b30      	subs	r3, #48	; 0x30
 80061b0:	613b      	str	r3, [r7, #16]
			switch(option)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d035      	beq.n	8006224 <Menu_Task+0xb8>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	dc20      	bgt.n	8006200 <Menu_Task+0x94>
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <Menu_Task+0x60>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d00d      	beq.n	80061e6 <Menu_Task+0x7a>
 80061ca:	e019      	b.n	8006200 <Menu_Task+0x94>
			{
				case 0:
					current_state = sLEDEffect;
 80061cc:	4b1d      	ldr	r3, [pc, #116]	; (8006244 <Menu_Task+0xd8>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	701a      	strb	r2, [r3, #0]
					xTaskNotify(LED_Task_Handle,0,eNoAction);
 80061d2:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <Menu_Task+0xdc>)
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	2200      	movs	r2, #0
 80061de:	2100      	movs	r1, #0
 80061e0:	f7fc f8d2 	bl	8002388 <xTaskGenericNotify>
					break;
 80061e4:	e01f      	b.n	8006226 <Menu_Task+0xba>
				case 1:
					current_state = sRTCMenu;
 80061e6:	4b17      	ldr	r3, [pc, #92]	; (8006244 <Menu_Task+0xd8>)
 80061e8:	2202      	movs	r2, #2
 80061ea:	701a      	strb	r2, [r3, #0]
					xTaskNotify(RTC_Task_Handle,0,eNoAction);
 80061ec:	4b17      	ldr	r3, [pc, #92]	; (800624c <Menu_Task+0xe0>)
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	2200      	movs	r2, #0
 80061f8:	2100      	movs	r1, #0
 80061fa:	f7fc f8c5 	bl	8002388 <xTaskGenericNotify>
					break;
 80061fe:	e012      	b.n	8006226 <Menu_Task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <Menu_Task+0xd4>)
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	f04f 32ff 	mov.w	r2, #4294967295
 800620a:	4911      	ldr	r1, [pc, #68]	; (8006250 <Menu_Task+0xe4>)
 800620c:	f7fa fc46 	bl	8000a9c <xQueueGenericSend>
					continue;
 8006210:	e012      	b.n	8006238 <Menu_Task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <Menu_Task+0xd4>)
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	f04f 32ff 	mov.w	r2, #4294967295
 800621c:	490c      	ldr	r1, [pc, #48]	; (8006250 <Menu_Task+0xe4>)
 800621e:	f7fa fc3d 	bl	8000a9c <xQueueGenericSend>
			continue;
 8006222:	e009      	b.n	8006238 <Menu_Task+0xcc>
					break;
 8006224:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8006226:	f04f 33ff 	mov.w	r3, #4294967295
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	2000      	movs	r0, #0
 8006234:	f7fc f818 	bl	8002268 <xTaskGenericNotifyWait>
		xQueueSend(q_Print,&msg_menu,portMAX_DELAY);
 8006238:	e79e      	b.n	8006178 <Menu_Task+0xc>
 800623a:	bf00      	nop
 800623c:	08010b14 	.word	0x08010b14
 8006240:	2407f5bc 	.word	0x2407f5bc
 8006244:	2407f5c0 	.word	0x2407f5c0
 8006248:	2407f5cc 	.word	0x2407f5cc
 800624c:	2407f5d0 	.word	0x2407f5d0
 8006250:	24000028 	.word	0x24000028

08006254 <LED_Task>:

	}//while super loop
}

void LED_Task(void *param)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 800625c:	4b3e      	ldr	r3, [pc, #248]	; (8006358 <LED_Task+0x104>)
 800625e:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	2300      	movs	r3, #0
 8006268:	2200      	movs	r2, #0
 800626a:	2100      	movs	r1, #0
 800626c:	2000      	movs	r0, #0
 800626e:	f7fb fffb 	bl	8002268 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_Print,&msg_led,portMAX_DELAY);
 8006272:	4b3a      	ldr	r3, [pc, #232]	; (800635c <LED_Task+0x108>)
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	f107 010c 	add.w	r1, r7, #12
 800627a:	2300      	movs	r3, #0
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	f7fa fc0c 	bl	8000a9c <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8006284:	f107 0310 	add.w	r3, r7, #16
 8006288:	f04f 32ff 	mov.w	r2, #4294967295
 800628c:	9200      	str	r2, [sp, #0]
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	2000      	movs	r0, #0
 8006294:	f7fb ffe8 	bl	8002268 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	617b      	str	r3, [r7, #20]

		if(cmd->lenght <= 4)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d843      	bhi.n	800632c <LED_Task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	492e      	ldr	r1, [pc, #184]	; (8006360 <LED_Task+0x10c>)
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa f863 	bl	8000374 <strcmp>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <LED_Task+0x66>
				led_effect_stop();
 80062b4:	f7ff fd4c 	bl	8005d50 <led_effect_stop>
 80062b8:	e040      	b.n	800633c <LED_Task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	4929      	ldr	r1, [pc, #164]	; (8006364 <LED_Task+0x110>)
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fa f858 	bl	8000374 <strcmp>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <LED_Task+0x7e>
				led_effect(1);
 80062ca:	2001      	movs	r0, #1
 80062cc:	f7ff fd60 	bl	8005d90 <led_effect>
 80062d0:	e034      	b.n	800633c <LED_Task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4924      	ldr	r1, [pc, #144]	; (8006368 <LED_Task+0x114>)
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fa f84c 	bl	8000374 <strcmp>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <LED_Task+0x96>
				led_effect(2);
 80062e2:	2002      	movs	r0, #2
 80062e4:	f7ff fd54 	bl	8005d90 <led_effect>
 80062e8:	e028      	b.n	800633c <LED_Task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	491f      	ldr	r1, [pc, #124]	; (800636c <LED_Task+0x118>)
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fa f840 	bl	8000374 <strcmp>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <LED_Task+0xae>
				led_effect(3);
 80062fa:	2003      	movs	r0, #3
 80062fc:	f7ff fd48 	bl	8005d90 <led_effect>
 8006300:	e01c      	b.n	800633c <LED_Task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	491a      	ldr	r1, [pc, #104]	; (8006370 <LED_Task+0x11c>)
 8006306:	4618      	mov	r0, r3
 8006308:	f7fa f834 	bl	8000374 <strcmp>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <LED_Task+0xc6>
				led_effect(4);
 8006312:	2004      	movs	r0, #4
 8006314:	f7ff fd3c 	bl	8005d90 <led_effect>
 8006318:	e010      	b.n	800633c <LED_Task+0xe8>
			else
				xQueueSend(q_Print,&msg_inv,portMAX_DELAY); /*print invalid message */
 800631a:	4b10      	ldr	r3, [pc, #64]	; (800635c <LED_Task+0x108>)
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	2300      	movs	r3, #0
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	4913      	ldr	r1, [pc, #76]	; (8006374 <LED_Task+0x120>)
 8006326:	f7fa fbb9 	bl	8000a9c <xQueueGenericSend>
 800632a:	e007      	b.n	800633c <LED_Task+0xe8>
		}else
			xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <LED_Task+0x108>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	2300      	movs	r3, #0
 8006332:	f04f 32ff 	mov.w	r2, #4294967295
 8006336:	490f      	ldr	r1, [pc, #60]	; (8006374 <LED_Task+0x120>)
 8006338:	f7fa fbb0 	bl	8000a9c <xQueueGenericSend>

		/* update state variable */
		current_state = sMainMenu;
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <LED_Task+0x124>)
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(Menu_Task_Handle,0,eNoAction);
 8006342:	4b0e      	ldr	r3, [pc, #56]	; (800637c <LED_Task+0x128>)
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	2300      	movs	r3, #0
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	2300      	movs	r3, #0
 800634c:	2200      	movs	r2, #0
 800634e:	2100      	movs	r1, #0
 8006350:	f7fc f81a 	bl	8002388 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8006354:	e784      	b.n	8006260 <LED_Task+0xc>
 8006356:	bf00      	nop
 8006358:	08010bbc 	.word	0x08010bbc
 800635c:	2407f5bc 	.word	0x2407f5bc
 8006360:	08010c34 	.word	0x08010c34
 8006364:	08010c3c 	.word	0x08010c3c
 8006368:	08010c40 	.word	0x08010c40
 800636c:	08010c44 	.word	0x08010c44
 8006370:	08010c48 	.word	0x08010c48
 8006374:	24000028 	.word	0x24000028
 8006378:	2407f5c0 	.word	0x2407f5c0
 800637c:	2407f5c8 	.word	0x2407f5c8

08006380 <getnumber>:
}


// User inout is in ASCII so this function converts ASCII to a number
uint8_t getnumber(uint8_t *p , int lenght)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]

	int value ;

	if(lenght > 1)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b01      	cmp	r3, #1
 800638e:	dd0f      	ble.n	80063b0 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	461a      	mov	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3301      	adds	r3, #1
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	3b30      	subs	r3, #48	; 0x30
 80063aa:	4413      	add	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e003      	b.n	80063b8 <getnumber+0x38>
	else
		value = p[0] - 48;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3b30      	subs	r3, #48	; 0x30
 80063b6:	60fb      	str	r3, [r7, #12]

	return value;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	b2db      	uxtb	r3, r3

}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <RTC_Task>:

void RTC_Task(void *param)
{
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b09b      	sub	sp, #108	; 0x6c
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	6078      	str	r0, [r7, #4]

	command_t *cmd;
	const char* msg_rtc1 = "========================\n"
 80063d0:	4bb2      	ldr	r3, [pc, #712]	; (800669c <RTC_Task+0x2d4>)
 80063d2:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 80063d4:	4bb2      	ldr	r3, [pc, #712]	; (80066a0 <RTC_Task+0x2d8>)
 80063d6:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 80063d8:	4bb2      	ldr	r3, [pc, #712]	; (80066a4 <RTC_Task+0x2dc>)
 80063da:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 80063dc:	4bb2      	ldr	r3, [pc, #712]	; (80066a8 <RTC_Task+0x2e0>)
 80063de:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80063e0:	4bb2      	ldr	r3, [pc, #712]	; (80066ac <RTC_Task+0x2e4>)
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80063e4:	4bb2      	ldr	r3, [pc, #712]	; (80066b0 <RTC_Task+0x2e8>)
 80063e6:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 80063e8:	4bb2      	ldr	r3, [pc, #712]	; (80066b4 <RTC_Task+0x2ec>)
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80063ec:	4bb2      	ldr	r3, [pc, #712]	; (80066b8 <RTC_Task+0x2f0>)
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 80063f0:	4bb2      	ldr	r3, [pc, #712]	; (80066bc <RTC_Task+0x2f4>)
 80063f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 80063f4:	4bb2      	ldr	r3, [pc, #712]	; (80066c0 <RTC_Task+0x2f8>)
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 80063f8:	4bb2      	ldr	r3, [pc, #712]	; (80066c4 <RTC_Task+0x2fc>)
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	2200      	movs	r2, #0
 8006406:	2100      	movs	r1, #0
 8006408:	2000      	movs	r0, #0
 800640a:	f7fb ff2d 	bl	8002268 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_Print,&msg_rtc1,portMAX_DELAY);
 800640e:	4bae      	ldr	r3, [pc, #696]	; (80066c8 <RTC_Task+0x300>)
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006416:	2300      	movs	r3, #0
 8006418:	f04f 32ff 	mov.w	r2, #4294967295
 800641c:	f7fa fb3e 	bl	8000a9c <xQueueGenericSend>
		show_time_date();
 8006420:	f7ff fdde 	bl	8005fe0 <show_time_date>
		xQueueSend(q_Print,&msg_rtc2,portMAX_DELAY);
 8006424:	4ba8      	ldr	r3, [pc, #672]	; (80066c8 <RTC_Task+0x300>)
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800642c:	2300      	movs	r3, #0
 800642e:	f04f 32ff 	mov.w	r2, #4294967295
 8006432:	f7fa fb33 	bl	8000a9c <xQueueGenericSend>


		while(current_state != sMainMenu){
 8006436:	bf00      	nop
 8006438:	e1e1      	b.n	80067fe <RTC_Task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800643a:	f107 0320 	add.w	r3, r7, #32
 800643e:	f04f 32ff 	mov.w	r2, #4294967295
 8006442:	9200      	str	r2, [sp, #0]
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	2000      	movs	r0, #0
 800644a:	f7fb ff0d 	bl	8002268 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(current_state)
 8006452:	4b9e      	ldr	r3, [pc, #632]	; (80066cc <RTC_Task+0x304>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	3b02      	subs	r3, #2
 8006458:	2b03      	cmp	r3, #3
 800645a:	f200 81d0 	bhi.w	80067fe <RTC_Task+0x436>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <RTC_Task+0x9c>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006475 	.word	0x08006475
 8006468:	08006527 	.word	0x08006527
 800646c:	08006615 	.word	0x08006615
 8006470:	0800677b 	.word	0x0800677b
			{
				case sRTCMenu:{
					/*process RTC menu commands */
					if(cmd->lenght == 1)
 8006474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d148      	bne.n	800650e <RTC_Task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 800647c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	3b30      	subs	r3, #48	; 0x30
 8006482:	653b      	str	r3, [r7, #80]	; 0x50
 8006484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006486:	2b03      	cmp	r3, #3
 8006488:	d835      	bhi.n	80064f6 <RTC_Task+0x12e>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <RTC_Task+0xc8>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064bb 	.word	0x080064bb
 8006498:	080064d5 	.word	0x080064d5
 800649c:	080064ef 	.word	0x080064ef
						switch(menu_code)
						{
						case 0:
							current_state = sRTCTimeConfig;
 80064a0:	4b8a      	ldr	r3, [pc, #552]	; (80066cc <RTC_Task+0x304>)
 80064a2:	2203      	movs	r2, #3
 80064a4:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_Print,&msg_rtc_hh,portMAX_DELAY);
 80064a6:	4b88      	ldr	r3, [pc, #544]	; (80066c8 <RTC_Task+0x300>)
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80064ae:	2300      	movs	r3, #0
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295
 80064b4:	f7fa faf2 	bl	8000a9c <xQueueGenericSend>
							break;
 80064b8:	e034      	b.n	8006524 <RTC_Task+0x15c>
						case 1:
							current_state = sRTCDateConfig;
 80064ba:	4b84      	ldr	r3, [pc, #528]	; (80066cc <RTC_Task+0x304>)
 80064bc:	2204      	movs	r2, #4
 80064be:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_Print,&msg_rtc_dd,portMAX_DELAY);
 80064c0:	4b81      	ldr	r3, [pc, #516]	; (80066c8 <RTC_Task+0x300>)
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80064c8:	2300      	movs	r3, #0
 80064ca:	f04f 32ff 	mov.w	r2, #4294967295
 80064ce:	f7fa fae5 	bl	8000a9c <xQueueGenericSend>
							break;
 80064d2:	e027      	b.n	8006524 <RTC_Task+0x15c>
						case 2 :
							current_state = sRTCReport;
 80064d4:	4b7d      	ldr	r3, [pc, #500]	; (80066cc <RTC_Task+0x304>)
 80064d6:	2205      	movs	r2, #5
 80064d8:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_Print,&msg_rtc_report,portMAX_DELAY);
 80064da:	4b7b      	ldr	r3, [pc, #492]	; (80066c8 <RTC_Task+0x300>)
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80064e2:	2300      	movs	r3, #0
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	f7fa fad8 	bl	8000a9c <xQueueGenericSend>
							break;
 80064ec:	e01a      	b.n	8006524 <RTC_Task+0x15c>
						case 3 :
							current_state = sMainMenu;
 80064ee:	4b77      	ldr	r3, [pc, #476]	; (80066cc <RTC_Task+0x304>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
							break;
 80064f4:	e016      	b.n	8006524 <RTC_Task+0x15c>
						default:
							current_state = sMainMenu;
 80064f6:	4b75      	ldr	r3, [pc, #468]	; (80066cc <RTC_Task+0x304>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 80064fc:	4b72      	ldr	r3, [pc, #456]	; (80066c8 <RTC_Task+0x300>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	2300      	movs	r3, #0
 8006502:	f04f 32ff 	mov.w	r2, #4294967295
 8006506:	4972      	ldr	r1, [pc, #456]	; (80066d0 <RTC_Task+0x308>)
 8006508:	f7fa fac8 	bl	8000a9c <xQueueGenericSend>
 800650c:	e177      	b.n	80067fe <RTC_Task+0x436>
						}

					}else{
						current_state = sMainMenu;
 800650e:	4b6f      	ldr	r3, [pc, #444]	; (80066cc <RTC_Task+0x304>)
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 8006514:	4b6c      	ldr	r3, [pc, #432]	; (80066c8 <RTC_Task+0x300>)
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	2300      	movs	r3, #0
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	496c      	ldr	r1, [pc, #432]	; (80066d0 <RTC_Task+0x308>)
 8006520:	f7fa fabc 	bl	8000a9c <xQueueGenericSend>
					}
					break;}
 8006524:	e16b      	b.n	80067fe <RTC_Task+0x436>

				case sRTCTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 8006526:	4b6b      	ldr	r3, [pc, #428]	; (80066d4 <RTC_Task+0x30c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d03b      	beq.n	80065a6 <RTC_Task+0x1de>
 800652e:	2b02      	cmp	r3, #2
 8006530:	f300 8165 	bgt.w	80067fe <RTC_Task+0x436>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <RTC_Task+0x176>
 8006538:	2b01      	cmp	r3, #1
 800653a:	d01a      	beq.n	8006572 <RTC_Task+0x1aa>
 800653c:	e15f      	b.n	80067fe <RTC_Task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->lenght);
 800653e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7ff ff1a 	bl	8006380 <getnumber>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 8006552:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006556:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 8006558:	4b5e      	ldr	r3, [pc, #376]	; (80066d4 <RTC_Task+0x30c>)
 800655a:	2201      	movs	r2, #1
 800655c:	601a      	str	r2, [r3, #0]
								xQueueSend(q_Print,&msg_rtc_mm,portMAX_DELAY);
 800655e:	4b5a      	ldr	r3, [pc, #360]	; (80066c8 <RTC_Task+0x300>)
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006566:	2300      	movs	r3, #0
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	f7fa fa96 	bl	8000a9c <xQueueGenericSend>
								break;}
 8006570:	e04f      	b.n	8006612 <RTC_Task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->lenght);
 8006572:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4619      	mov	r1, r3
 800657a:	4610      	mov	r0, r2
 800657c:	f7ff ff00 	bl	8006380 <getnumber>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 8006586:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800658a:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 800658c:	4b51      	ldr	r3, [pc, #324]	; (80066d4 <RTC_Task+0x30c>)
 800658e:	2202      	movs	r2, #2
 8006590:	601a      	str	r2, [r3, #0]
								xQueueSend(q_Print,&msg_rtc_ss,portMAX_DELAY);
 8006592:	4b4d      	ldr	r3, [pc, #308]	; (80066c8 <RTC_Task+0x300>)
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800659a:	2300      	movs	r3, #0
 800659c:	f04f 32ff 	mov.w	r2, #4294967295
 80065a0:	f7fa fa7c 	bl	8000a9c <xQueueGenericSend>
								break;}
 80065a4:	e035      	b.n	8006612 <RTC_Task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->lenght);
 80065a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7ff fee6 	bl	8006380 <getnumber>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 80065ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065be:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 80065c0:	f107 030c 	add.w	r3, r7, #12
 80065c4:	2100      	movs	r1, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fd9e 	bl	8006108 <validate_rtc_information>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d110      	bne.n	80065f4 <RTC_Task+0x22c>
								{
									rtc_configure_time(&time);
 80065d2:	f107 030c 	add.w	r3, r7, #12
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fd6e 	bl	80060b8 <rtc_configure_time>
									xQueueSend(q_Print,&msg_conf,portMAX_DELAY);
 80065dc:	4b3a      	ldr	r3, [pc, #232]	; (80066c8 <RTC_Task+0x300>)
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80065e4:	2300      	movs	r3, #0
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	f7fa fa57 	bl	8000a9c <xQueueGenericSend>
									show_time_date();
 80065ee:	f7ff fcf7 	bl	8005fe0 <show_time_date>
 80065f2:	e007      	b.n	8006604 <RTC_Task+0x23c>
								}else
									xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 80065f4:	4b34      	ldr	r3, [pc, #208]	; (80066c8 <RTC_Task+0x300>)
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	f04f 32ff 	mov.w	r2, #4294967295
 80065fe:	4934      	ldr	r1, [pc, #208]	; (80066d0 <RTC_Task+0x308>)
 8006600:	f7fa fa4c 	bl	8000a9c <xQueueGenericSend>

								current_state = sMainMenu;
 8006604:	4b31      	ldr	r3, [pc, #196]	; (80066cc <RTC_Task+0x304>)
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 800660a:	4b32      	ldr	r3, [pc, #200]	; (80066d4 <RTC_Task+0x30c>)
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
								break;}
 8006610:	bf00      	nop
						}

					break;}
 8006612:	e0f4      	b.n	80067fe <RTC_Task+0x436>
				case sRTCDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8006614:	4b2f      	ldr	r3, [pc, #188]	; (80066d4 <RTC_Task+0x30c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b03      	cmp	r3, #3
 800661a:	f200 80f0 	bhi.w	80067fe <RTC_Task+0x436>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <RTC_Task+0x25c>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006635 	.word	0x08006635
 8006628:	08006669 	.word	0x08006669
 800662c:	0800670d 	.word	0x0800670d
 8006630:	080066d9 	.word	0x080066d9
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->lenght);
 8006634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7ff fe9f 	bl	8006380 <getnumber>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8006648:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800664c:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 800664e:	4b21      	ldr	r3, [pc, #132]	; (80066d4 <RTC_Task+0x30c>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]
								xQueueSend(q_Print,&msg_rtc_mo,portMAX_DELAY);
 8006654:	4b1c      	ldr	r3, [pc, #112]	; (80066c8 <RTC_Task+0x300>)
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800665c:	2300      	movs	r3, #0
 800665e:	f04f 32ff 	mov.w	r2, #4294967295
 8006662:	f7fa fa1b 	bl	8000a9c <xQueueGenericSend>
								break;}
 8006666:	e087      	b.n	8006778 <RTC_Task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->lenght);
 8006668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800666a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7ff fe85 	bl	8006380 <getnumber>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 800667c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8006680:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8006682:	4b14      	ldr	r3, [pc, #80]	; (80066d4 <RTC_Task+0x30c>)
 8006684:	2203      	movs	r2, #3
 8006686:	601a      	str	r2, [r3, #0]
								xQueueSend(q_Print,&msg_rtc_dow,portMAX_DELAY);
 8006688:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <RTC_Task+0x300>)
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006690:	2300      	movs	r3, #0
 8006692:	f04f 32ff 	mov.w	r2, #4294967295
 8006696:	f7fa fa01 	bl	8000a9c <xQueueGenericSend>
								break;}
 800669a:	e06d      	b.n	8006778 <RTC_Task+0x3b0>
 800669c:	08010c4c 	.word	0x08010c4c
 80066a0:	08010c98 	.word	0x08010c98
 80066a4:	08010d3c 	.word	0x08010d3c
 80066a8:	08010d50 	.word	0x08010d50
 80066ac:	08010d68 	.word	0x08010d68
 80066b0:	08010d80 	.word	0x08010d80
 80066b4:	08010d94 	.word	0x08010d94
 80066b8:	08010da8 	.word	0x08010da8
 80066bc:	08010dc0 	.word	0x08010dc0
 80066c0:	08010dd4 	.word	0x08010dd4
 80066c4:	08010df0 	.word	0x08010df0
 80066c8:	2407f5bc 	.word	0x2407f5bc
 80066cc:	2407f5c0 	.word	0x2407f5c0
 80066d0:	24000028 	.word	0x24000028
 80066d4:	2407f15c 	.word	0x2407f15c
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->lenght);
 80066d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7ff fe4d 	bl	8006380 <getnumber>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 80066ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80066f0:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 80066f2:	4b4a      	ldr	r3, [pc, #296]	; (800681c <RTC_Task+0x454>)
 80066f4:	2202      	movs	r2, #2
 80066f6:	601a      	str	r2, [r3, #0]
								xQueueSend(q_Print,&msg_rtc_yr,portMAX_DELAY);
 80066f8:	4b49      	ldr	r3, [pc, #292]	; (8006820 <RTC_Task+0x458>)
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006700:	2300      	movs	r3, #0
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	f7fa f9c9 	bl	8000a9c <xQueueGenericSend>
								break;}
 800670a:	e035      	b.n	8006778 <RTC_Task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->lenght);
 800670c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800670e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	4619      	mov	r1, r3
 8006714:	4610      	mov	r0, r2
 8006716:	f7ff fe33 	bl	8006380 <getnumber>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8006720:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8006724:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8006726:	f107 0308 	add.w	r3, r7, #8
 800672a:	4619      	mov	r1, r3
 800672c:	2000      	movs	r0, #0
 800672e:	f7ff fceb 	bl	8006108 <validate_rtc_information>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d110      	bne.n	800675a <RTC_Task+0x392>
								{
									rtc_configure_date(&date);
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fcd3 	bl	80060e8 <rtc_configure_date>
									xQueueSend(q_Print,&msg_conf,portMAX_DELAY);
 8006742:	4b37      	ldr	r3, [pc, #220]	; (8006820 <RTC_Task+0x458>)
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800674a:	2300      	movs	r3, #0
 800674c:	f04f 32ff 	mov.w	r2, #4294967295
 8006750:	f7fa f9a4 	bl	8000a9c <xQueueGenericSend>
									show_time_date();
 8006754:	f7ff fc44 	bl	8005fe0 <show_time_date>
 8006758:	e007      	b.n	800676a <RTC_Task+0x3a2>
								}else
									xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 800675a:	4b31      	ldr	r3, [pc, #196]	; (8006820 <RTC_Task+0x458>)
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	2300      	movs	r3, #0
 8006760:	f04f 32ff 	mov.w	r2, #4294967295
 8006764:	492f      	ldr	r1, [pc, #188]	; (8006824 <RTC_Task+0x45c>)
 8006766:	f7fa f999 	bl	8000a9c <xQueueGenericSend>

								current_state = sMainMenu;
 800676a:	4b2f      	ldr	r3, [pc, #188]	; (8006828 <RTC_Task+0x460>)
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8006770:	4b2a      	ldr	r3, [pc, #168]	; (800681c <RTC_Task+0x454>)
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
								break;}
 8006776:	bf00      	nop
						}


					break;}
 8006778:	e041      	b.n	80067fe <RTC_Task+0x436>

				case sRTCReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->lenght == 1)
 800677a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d131      	bne.n	80067e6 <RTC_Task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8006782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b79      	cmp	r3, #121	; 0x79
 8006788:	d115      	bne.n	80067b6 <RTC_Task+0x3ee>
							if(xTimerIsTimerActive(RTC_timer) == pdFALSE)
 800678a:	4b28      	ldr	r3, [pc, #160]	; (800682c <RTC_Task+0x464>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f7fc fc14 	bl	8002fbc <xTimerIsTimerActive>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d12d      	bne.n	80067f6 <RTC_Task+0x42e>
								xTimerStart(RTC_timer,portMAX_DELAY);
 800679a:	4b24      	ldr	r3, [pc, #144]	; (800682c <RTC_Task+0x464>)
 800679c:	681c      	ldr	r4, [r3, #0]
 800679e:	f7fb f979 	bl	8001a94 <xTaskGetTickCount>
 80067a2:	4602      	mov	r2, r0
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	2300      	movs	r3, #0
 80067ac:	2101      	movs	r1, #1
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7fc f91a 	bl	80029e8 <xTimerGenericCommand>
 80067b4:	e01f      	b.n	80067f6 <RTC_Task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 80067b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b6e      	cmp	r3, #110	; 0x6e
 80067bc:	d10a      	bne.n	80067d4 <RTC_Task+0x40c>
							xTimerStop(RTC_timer,portMAX_DELAY);
 80067be:	4b1b      	ldr	r3, [pc, #108]	; (800682c <RTC_Task+0x464>)
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	2300      	movs	r3, #0
 80067ca:	2200      	movs	r2, #0
 80067cc:	2103      	movs	r1, #3
 80067ce:	f7fc f90b 	bl	80029e8 <xTimerGenericCommand>
 80067d2:	e010      	b.n	80067f6 <RTC_Task+0x42e>
						}else{
							xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 80067d4:	4b12      	ldr	r3, [pc, #72]	; (8006820 <RTC_Task+0x458>)
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	2300      	movs	r3, #0
 80067da:	f04f 32ff 	mov.w	r2, #4294967295
 80067de:	4911      	ldr	r1, [pc, #68]	; (8006824 <RTC_Task+0x45c>)
 80067e0:	f7fa f95c 	bl	8000a9c <xQueueGenericSend>
 80067e4:	e007      	b.n	80067f6 <RTC_Task+0x42e>
						}

					}else
					    xQueueSend(q_Print,&msg_inv,portMAX_DELAY);
 80067e6:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <RTC_Task+0x458>)
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	2300      	movs	r3, #0
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295
 80067f0:	490c      	ldr	r1, [pc, #48]	; (8006824 <RTC_Task+0x45c>)
 80067f2:	f7fa f953 	bl	8000a9c <xQueueGenericSend>

					current_state = sMainMenu;
 80067f6:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <RTC_Task+0x460>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
					break;}
 80067fc:	bf00      	nop
		while(current_state != sMainMenu){
 80067fe:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <RTC_Task+0x460>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f47f ae19 	bne.w	800643a <RTC_Task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(Menu_Task_Handle,0,eNoAction);
 8006808:	4b09      	ldr	r3, [pc, #36]	; (8006830 <RTC_Task+0x468>)
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	2300      	movs	r3, #0
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	2300      	movs	r3, #0
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	f7fb fdb7 	bl	8002388 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800681a:	e5ef      	b.n	80063fc <RTC_Task+0x34>
 800681c:	2407f15c 	.word	0x2407f15c
 8006820:	2407f5bc 	.word	0x2407f5bc
 8006824:	24000028 	.word	0x24000028
 8006828:	2407f5c0 	.word	0x2407f5c0
 800682c:	2407f5e8 	.word	0x2407f5e8
 8006830:	2407f5c8 	.word	0x2407f5c8

08006834 <CommandHanding_Task>:

		}//while super loop end
}

void CommandHanding_Task(void *param)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	; 0x28
 8006838:	af02      	add	r7, sp, #8
 800683a:	6078      	str	r0, [r7, #4]
	command_t	Command;

	while(1)
	{
		// Wait indefinitely and capture return value if it receives notification from call back
		Retunred_Val = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	2200      	movs	r2, #0
 8006846:	2100      	movs	r1, #0
 8006848:	2000      	movs	r0, #0
 800684a:	f7fb fd0d 	bl	8002268 <xTaskGenericNotifyWait>
 800684e:	61f8      	str	r0, [r7, #28]
		if(Retunred_Val == pdTRUE)
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d1f2      	bne.n	800683c <CommandHanding_Task+0x8>
		{
			// Process user input stored in the input queue
			process_Command(&Command);
 8006856:	f107 030c 	add.w	r3, r7, #12
 800685a:	4618      	mov	r0, r3
 800685c:	f000 f802 	bl	8006864 <process_Command>
		Retunred_Val = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8006860:	e7ec      	b.n	800683c <CommandHanding_Task+0x8>
	...

08006864 <process_Command>:
		}
	}
}

void process_Command(command_t	*cmd)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af02      	add	r7, sp, #8
 800686a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f835 	bl	80068dc <extract_command>

	switch(current_state)
 8006872:	4b16      	ldr	r3, [pc, #88]	; (80068cc <process_Command+0x68>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b05      	cmp	r3, #5
 8006878:	dc24      	bgt.n	80068c4 <process_Command+0x60>
 800687a:	2b02      	cmp	r3, #2
 800687c:	da18      	bge.n	80068b0 <process_Command+0x4c>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <process_Command+0x24>
 8006882:	2b01      	cmp	r3, #1
 8006884:	d00a      	beq.n	800689c <process_Command+0x38>
		case	sRTCDateConfig:
		case	sRTCReport:
			xTaskNotify(RTC_Task_Handle, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}
 8006886:	e01d      	b.n	80068c4 <process_Command+0x60>
			xTaskNotify(Menu_Task_Handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8006888:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <process_Command+0x6c>)
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	2300      	movs	r3, #0
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2303      	movs	r3, #3
 8006894:	2100      	movs	r1, #0
 8006896:	f7fb fd77 	bl	8002388 <xTaskGenericNotify>
			break;
 800689a:	e013      	b.n	80068c4 <process_Command+0x60>
			xTaskNotify(LED_Task_Handle, (uint32_t)cmd, eSetValueWithOverwrite);
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <process_Command+0x70>)
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	2300      	movs	r3, #0
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	2303      	movs	r3, #3
 80068a8:	2100      	movs	r1, #0
 80068aa:	f7fb fd6d 	bl	8002388 <xTaskGenericNotify>
			break;
 80068ae:	e009      	b.n	80068c4 <process_Command+0x60>
			xTaskNotify(RTC_Task_Handle, (uint32_t)cmd, eSetValueWithOverwrite);
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <process_Command+0x74>)
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	2300      	movs	r3, #0
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	2303      	movs	r3, #3
 80068bc:	2100      	movs	r1, #0
 80068be:	f7fb fd63 	bl	8002388 <xTaskGenericNotify>
			break;
 80068c2:	bf00      	nop
}
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	2407f5c0 	.word	0x2407f5c0
 80068d0:	2407f5c8 	.word	0x2407f5c8
 80068d4:	2407f5cc 	.word	0x2407f5cc
 80068d8:	2407f5d0 	.word	0x2407f5d0

080068dc <extract_command>:


int extract_command(command_t *cmd)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_Data);
 80068e4:	4b19      	ldr	r3, [pc, #100]	; (800694c <extract_command+0x70>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fa fc98 	bl	800121e <uxQueueMessagesWaiting>
 80068ee:	4603      	mov	r3, r0
 80068f0:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <extract_command+0x22>
 80068f8:	f04f 33ff 	mov.w	r3, #4294967295
 80068fc:	e022      	b.n	8006944 <extract_command+0x68>
	uint8_t i=0;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_Data, &item, 0);
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <extract_command+0x70>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f107 010f 	add.w	r1, r7, #15
 800690a:	2200      	movs	r2, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f7fa fabb 	bl	8000e88 <xQueueReceive>
 8006912:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)	cmd->payload[i++] = item;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d106      	bne.n	8006928 <extract_command+0x4c>
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	75fa      	strb	r2, [r7, #23]
 8006920:	461a      	mov	r2, r3
 8006922:	7bf9      	ldrb	r1, [r7, #15]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b0a      	cmp	r3, #10
 800692c:	d1e9      	bne.n	8006902 <extract_command+0x26>
	cmd->payload[i-1] = '\0';
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	3b01      	subs	r3, #1
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	2100      	movs	r1, #0
 8006936:	54d1      	strb	r1, [r2, r3]
	cmd->lenght = i-1;	/* Saving lenghtgth of the command excluding null char*/
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	3b01      	subs	r3, #1
 800693c:	461a      	mov	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60da      	str	r2, [r3, #12]

	return 0;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2407f5b8 	.word	0x2407f5b8

08006950 <Print_Task>:

void Print_Task(void *param)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1){
		xQueueReceive(q_Print, &msg, portMAX_DELAY);
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <Print_Task+0x38>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f107 010c 	add.w	r1, r7, #12
 8006960:	f04f 32ff 	mov.w	r2, #4294967295
 8006964:	4618      	mov	r0, r3
 8006966:	f7fa fa8f 	bl	8000e88 <xQueueReceive>
		HAL_UART_Transmit(&huart3,(uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 800696a:	68fc      	ldr	r4, [r7, #12]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4618      	mov	r0, r3
 8006970:	f7f9 fd0a 	bl	8000388 <strlen>
 8006974:	4603      	mov	r3, r0
 8006976:	b29a      	uxth	r2, r3
 8006978:	f04f 33ff 	mov.w	r3, #4294967295
 800697c:	4621      	mov	r1, r4
 800697e:	4803      	ldr	r0, [pc, #12]	; (800698c <Print_Task+0x3c>)
 8006980:	f006 f932 	bl	800cbe8 <HAL_UART_Transmit>
		xQueueReceive(q_Print, &msg, portMAX_DELAY);
 8006984:	e7e8      	b.n	8006958 <Print_Task+0x8>
 8006986:	bf00      	nop
 8006988:	2407f5bc 	.word	0x2407f5bc
 800698c:	2407f224 	.word	0x2407f224

08006990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08c      	sub	sp, #48	; 0x30
 8006994:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006996:	f000 ffa7 	bl	80078e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800699a:	f000 f94b 	bl	8006c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800699e:	f000 faf3 	bl	8006f88 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80069a2:	f000 f9f7 	bl	8006d94 <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 80069a6:	f000 facd 	bl	8006f44 <MX_USB_OTG_FS_HCD_Init>
  MX_RTC_Init();
 80069aa:	f000 fa57 	bl	8006e5c <MX_RTC_Init>
  MX_USART3_UART_Init();
 80069ae:	f000 fa7d 	bl	8006eac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start LED
    int Start_Counter = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
    while(Start_Counter < 5)
 80069b6:	e010      	b.n	80069da <main+0x4a>
    {
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 80069b8:	2104      	movs	r1, #4
 80069ba:	4882      	ldr	r0, [pc, #520]	; (8006bc4 <main+0x234>)
 80069bc:	f002 fea5 	bl	800970a <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 80069c0:	20c8      	movs	r0, #200	; 0xc8
 80069c2:	f000 ffed 	bl	80079a0 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 80069c6:	2104      	movs	r1, #4
 80069c8:	487e      	ldr	r0, [pc, #504]	; (8006bc4 <main+0x234>)
 80069ca:	f002 fe9e 	bl	800970a <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 80069ce:	20c8      	movs	r0, #200	; 0xc8
 80069d0:	f000 ffe6 	bl	80079a0 <HAL_Delay>
  	  Start_Counter++;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	3301      	adds	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
    while(Start_Counter < 5)
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	2b04      	cmp	r3, #4
 80069de:	ddeb      	ble.n	80069b8 <main+0x28>

    //user_data = "Start of program\r\n";
    	//HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

    	// Enable CCYCCNT Counter for SEGGER SYSTEM VIEW
    	DWT->CTRL |= (1 << 0);
 80069e0:	4b79      	ldr	r3, [pc, #484]	; (8006bc8 <main+0x238>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a78      	ldr	r2, [pc, #480]	; (8006bc8 <main+0x238>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	6013      	str	r3, [r2, #0]

    	// Used for SEGGER UART
    	SEGGER_UART_init(500000);
 80069ec:	4877      	ldr	r0, [pc, #476]	; (8006bcc <main+0x23c>)
 80069ee:	f7fd f95f 	bl	8003cb0 <SEGGER_UART_init>

    	//Starting SEGGER SYSVIEW
		SEGGER_SYSVIEW_Conf();
 80069f2:	f7fc ff87 	bl	8003904 <SEGGER_SYSVIEW_Conf>
    	  //SEGGER_SYSVIEW_Start();
		  
		TaskStatus = xTaskCreate(Menu_Task, "Menu-Task", 250, "Menu-Task", 2, &Menu_Task_Handle);
 80069f6:	4b76      	ldr	r3, [pc, #472]	; (8006bd0 <main+0x240>)
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	2302      	movs	r3, #2
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	4b75      	ldr	r3, [pc, #468]	; (8006bd4 <main+0x244>)
 8006a00:	22fa      	movs	r2, #250	; 0xfa
 8006a02:	4974      	ldr	r1, [pc, #464]	; (8006bd4 <main+0x244>)
 8006a04:	4874      	ldr	r0, [pc, #464]	; (8006bd8 <main+0x248>)
 8006a06:	f7fa fdc9 	bl	800159c <xTaskCreate>
 8006a0a:	61f8      	str	r0, [r7, #28]
		configASSERT(TaskStatus == pdPASS);
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d00c      	beq.n	8006a2c <main+0x9c>
        __asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	b672      	cpsid	i
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	b662      	cpsie	i
 8006a26:	61bb      	str	r3, [r7, #24]
    }
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <main+0x9a>

		TaskStatus = xTaskCreate(LED_Task, "LED-Task", 250, "LED-Task", 2, &LED_Task_Handle);
 8006a2c:	4b6b      	ldr	r3, [pc, #428]	; (8006bdc <main+0x24c>)
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	2302      	movs	r3, #2
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	4b6a      	ldr	r3, [pc, #424]	; (8006be0 <main+0x250>)
 8006a36:	22fa      	movs	r2, #250	; 0xfa
 8006a38:	4969      	ldr	r1, [pc, #420]	; (8006be0 <main+0x250>)
 8006a3a:	486a      	ldr	r0, [pc, #424]	; (8006be4 <main+0x254>)
 8006a3c:	f7fa fdae 	bl	800159c <xTaskCreate>
 8006a40:	61f8      	str	r0, [r7, #28]
		configASSERT(TaskStatus == pdPASS);
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d00c      	beq.n	8006a62 <main+0xd2>
        __asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	b672      	cpsid	i
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	b662      	cpsie	i
 8006a5c:	617b      	str	r3, [r7, #20]
    }
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <main+0xd0>

		TaskStatus = xTaskCreate(RTC_Task, "RTC_Task", 250, "RTC_Task", 2, &RTC_Task_Handle);
 8006a62:	4b61      	ldr	r3, [pc, #388]	; (8006be8 <main+0x258>)
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	2302      	movs	r3, #2
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4b60      	ldr	r3, [pc, #384]	; (8006bec <main+0x25c>)
 8006a6c:	22fa      	movs	r2, #250	; 0xfa
 8006a6e:	495f      	ldr	r1, [pc, #380]	; (8006bec <main+0x25c>)
 8006a70:	485f      	ldr	r0, [pc, #380]	; (8006bf0 <main+0x260>)
 8006a72:	f7fa fd93 	bl	800159c <xTaskCreate>
 8006a76:	61f8      	str	r0, [r7, #28]
		configASSERT(TaskStatus == pdPASS);
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d00c      	beq.n	8006a98 <main+0x108>
        __asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	b672      	cpsid	i
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	b662      	cpsie	i
 8006a92:	613b      	str	r3, [r7, #16]
    }
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <main+0x106>

		TaskStatus = xTaskCreate(Print_Task, "Print-Task", 250, "Print-Task", 2, &Print_Task_Handle);
 8006a98:	4b56      	ldr	r3, [pc, #344]	; (8006bf4 <main+0x264>)
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	4b55      	ldr	r3, [pc, #340]	; (8006bf8 <main+0x268>)
 8006aa2:	22fa      	movs	r2, #250	; 0xfa
 8006aa4:	4954      	ldr	r1, [pc, #336]	; (8006bf8 <main+0x268>)
 8006aa6:	4855      	ldr	r0, [pc, #340]	; (8006bfc <main+0x26c>)
 8006aa8:	f7fa fd78 	bl	800159c <xTaskCreate>
 8006aac:	61f8      	str	r0, [r7, #28]
		configASSERT(TaskStatus == pdPASS);
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d00c      	beq.n	8006ace <main+0x13e>
        __asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	b672      	cpsid	i
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	b662      	cpsie	i
 8006ac8:	60fb      	str	r3, [r7, #12]
    }
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <main+0x13c>

		TaskStatus = xTaskCreate(CommandHanding_Task, "CommandHanding-Task", 250, "CommandHanding-Task", 2, &CommandHanding_Task_Handle);
 8006ace:	4b4c      	ldr	r3, [pc, #304]	; (8006c00 <main+0x270>)
 8006ad0:	9301      	str	r3, [sp, #4]
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4b4b      	ldr	r3, [pc, #300]	; (8006c04 <main+0x274>)
 8006ad8:	22fa      	movs	r2, #250	; 0xfa
 8006ada:	494a      	ldr	r1, [pc, #296]	; (8006c04 <main+0x274>)
 8006adc:	484a      	ldr	r0, [pc, #296]	; (8006c08 <main+0x278>)
 8006ade:	f7fa fd5d 	bl	800159c <xTaskCreate>
 8006ae2:	61f8      	str	r0, [r7, #28]
		configASSERT(TaskStatus == pdPASS);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d00c      	beq.n	8006b04 <main+0x174>
        __asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	b672      	cpsid	i
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	b662      	cpsie	i
 8006afe:	60bb      	str	r3, [r7, #8]
    }
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <main+0x172>

		q_Data = xQueueCreate(10, sizeof(char));
 8006b04:	2200      	movs	r2, #0
 8006b06:	2101      	movs	r1, #1
 8006b08:	200a      	movs	r0, #10
 8006b0a:	f7f9 ff39 	bl	8000980 <xQueueGenericCreate>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4a3e      	ldr	r2, [pc, #248]	; (8006c0c <main+0x27c>)
 8006b12:	6013      	str	r3, [r2, #0]
		// Bellow line will make code to hang if queue is full
		configASSERT(q_Data != NULL);
 8006b14:	4b3d      	ldr	r3, [pc, #244]	; (8006c0c <main+0x27c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10c      	bne.n	8006b36 <main+0x1a6>
        __asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	b672      	cpsid	i
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	b662      	cpsie	i
 8006b30:	607b      	str	r3, [r7, #4]
    }
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <main+0x1a4>

		q_Print = xQueueCreate(10, sizeof(size_t));
 8006b36:	2200      	movs	r2, #0
 8006b38:	2104      	movs	r1, #4
 8006b3a:	200a      	movs	r0, #10
 8006b3c:	f7f9 ff20 	bl	8000980 <xQueueGenericCreate>
 8006b40:	4603      	mov	r3, r0
 8006b42:	4a33      	ldr	r2, [pc, #204]	; (8006c10 <main+0x280>)
 8006b44:	6013      	str	r3, [r2, #0]
		configASSERT(q_Print != NULL);
 8006b46:	4b32      	ldr	r3, [pc, #200]	; (8006c10 <main+0x280>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10c      	bne.n	8006b68 <main+0x1d8>
        __asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	603b      	str	r3, [r7, #0]
    }
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <main+0x1d6>

		// Create SW timers for LED effects
		for(int i=0; i<4; i++)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	e013      	b.n	8006b96 <main+0x206>
			LED_Timer_Handle[i] = xTimerCreate("LED timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), LED_Effect_Callback);
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	3301      	adds	r3, #1
 8006b72:	461a      	mov	r2, r3
 8006b74:	4b27      	ldr	r3, [pc, #156]	; (8006c14 <main+0x284>)
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006b80:	4825      	ldr	r0, [pc, #148]	; (8006c18 <main+0x288>)
 8006b82:	f7fb fed3 	bl	800292c <xTimerCreate>
 8006b86:	4602      	mov	r2, r0
 8006b88:	4924      	ldr	r1, [pc, #144]	; (8006c1c <main+0x28c>)
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i<4; i++)
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	3301      	adds	r3, #1
 8006b94:	623b      	str	r3, [r7, #32]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	dde8      	ble.n	8006b6e <main+0x1de>

		RTC_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,RTC_Report_Callback);
 8006b9c:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <main+0x290>)
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ba8:	481e      	ldr	r0, [pc, #120]	; (8006c24 <main+0x294>)
 8006baa:	f7fb febf 	bl	800292c <xTimerCreate>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <main+0x298>)
 8006bb2:	6013      	str	r3, [r2, #0]

		// Enabling UART reception
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&User_Input, 1);
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	491d      	ldr	r1, [pc, #116]	; (8006c2c <main+0x29c>)
 8006bb8:	481d      	ldr	r0, [pc, #116]	; (8006c30 <main+0x2a0>)
 8006bba:	f006 f8ab 	bl	800cd14 <HAL_UART_Receive_IT>

		vTaskStartScheduler();
 8006bbe:	f7fa fe53 	bl	8001868 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006bc2:	e7fe      	b.n	8006bc2 <main+0x232>
 8006bc4:	58020800 	.word	0x58020800
 8006bc8:	e0001000 	.word	0xe0001000
 8006bcc:	0007a120 	.word	0x0007a120
 8006bd0:	2407f5c8 	.word	0x2407f5c8
 8006bd4:	08010e18 	.word	0x08010e18
 8006bd8:	0800616d 	.word	0x0800616d
 8006bdc:	2407f5cc 	.word	0x2407f5cc
 8006be0:	08010e24 	.word	0x08010e24
 8006be4:	08006255 	.word	0x08006255
 8006be8:	2407f5d0 	.word	0x2407f5d0
 8006bec:	08010e30 	.word	0x08010e30
 8006bf0:	080063c9 	.word	0x080063c9
 8006bf4:	2407f5d4 	.word	0x2407f5d4
 8006bf8:	08010e3c 	.word	0x08010e3c
 8006bfc:	08006951 	.word	0x08006951
 8006c00:	2407f5c4 	.word	0x2407f5c4
 8006c04:	08010e48 	.word	0x08010e48
 8006c08:	08006835 	.word	0x08006835
 8006c0c:	2407f5b8 	.word	0x2407f5b8
 8006c10:	2407f5bc 	.word	0x2407f5bc
 8006c14:	080070f5 	.word	0x080070f5
 8006c18:	08010e5c 	.word	0x08010e5c
 8006c1c:	2407f5d8 	.word	0x2407f5d8
 8006c20:	08007145 	.word	0x08007145
 8006c24:	08010e68 	.word	0x08010e68
 8006c28:	2407f5e8 	.word	0x2407f5e8
 8006c2c:	2407f5ec 	.word	0x2407f5ec
 8006c30:	2407f224 	.word	0x2407f224

08006c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b09e      	sub	sp, #120	; 0x78
 8006c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c3e:	224c      	movs	r2, #76	; 0x4c
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f008 fd56 	bl	800f6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c48:	f107 030c 	add.w	r3, r7, #12
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	2100      	movs	r1, #0
 8006c50:	4618      	mov	r0, r3
 8006c52:	f008 fd4f 	bl	800f6f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006c56:	2002      	movs	r0, #2
 8006c58:	f002 fdd4 	bl	8009804 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	4b49      	ldr	r3, [pc, #292]	; (8006d88 <SystemClock_Config+0x154>)
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	4a48      	ldr	r2, [pc, #288]	; (8006d88 <SystemClock_Config+0x154>)
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c6c:	4b46      	ldr	r3, [pc, #280]	; (8006d88 <SystemClock_Config+0x154>)
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	4b45      	ldr	r3, [pc, #276]	; (8006d8c <SystemClock_Config+0x158>)
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	4a44      	ldr	r2, [pc, #272]	; (8006d8c <SystemClock_Config+0x158>)
 8006c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c80:	6193      	str	r3, [r2, #24]
 8006c82:	4b42      	ldr	r3, [pc, #264]	; (8006d8c <SystemClock_Config+0x158>)
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006c8e:	bf00      	nop
 8006c90:	4b3e      	ldr	r3, [pc, #248]	; (8006d8c <SystemClock_Config+0x158>)
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9c:	d1f8      	bne.n	8006c90 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c9e:	4b3c      	ldr	r3, [pc, #240]	; (8006d90 <SystemClock_Config+0x15c>)
 8006ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ca4:	4a3a      	ldr	r2, [pc, #232]	; (8006d90 <SystemClock_Config+0x15c>)
 8006ca6:	f043 0302 	orr.w	r3, r3, #2
 8006caa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006cae:	4b38      	ldr	r3, [pc, #224]	; (8006d90 <SystemClock_Config+0x15c>)
 8006cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	4b32      	ldr	r3, [pc, #200]	; (8006d8c <SystemClock_Config+0x158>)
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	4a31      	ldr	r2, [pc, #196]	; (8006d8c <SystemClock_Config+0x158>)
 8006cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cca:	6193      	str	r3, [r2, #24]
 8006ccc:	4b2f      	ldr	r3, [pc, #188]	; (8006d8c <SystemClock_Config+0x158>)
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cd4:	603b      	str	r3, [r7, #0]
 8006cd6:	4b2c      	ldr	r3, [pc, #176]	; (8006d88 <SystemClock_Config+0x154>)
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	4a2b      	ldr	r2, [pc, #172]	; (8006d88 <SystemClock_Config+0x154>)
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ce2:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <SystemClock_Config+0x154>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006cee:	bf00      	nop
 8006cf0:	4b26      	ldr	r3, [pc, #152]	; (8006d8c <SystemClock_Config+0x158>)
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfc:	d1f8      	bne.n	8006cf0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006cfe:	2309      	movs	r3, #9
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d10:	2302      	movs	r3, #2
 8006d12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006d14:	2301      	movs	r3, #1
 8006d16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8006d18:	2378      	movs	r3, #120	; 0x78
 8006d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8006d20:	230f      	movs	r3, #15
 8006d22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006d24:	2302      	movs	r3, #2
 8006d26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006d28:	230c      	movs	r3, #12
 8006d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f002 fdad 	bl	8009898 <HAL_RCC_OscConfig>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8006d44:	f000 fa1a 	bl	800717c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d48:	233f      	movs	r3, #63	; 0x3f
 8006d4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006d54:	2308      	movs	r3, #8
 8006d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006d58:	2340      	movs	r3, #64	; 0x40
 8006d5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006d66:	2340      	movs	r3, #64	; 0x40
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006d6a:	f107 030c 	add.w	r3, r7, #12
 8006d6e:	2104      	movs	r1, #4
 8006d70:	4618      	mov	r0, r3
 8006d72:	f003 f9bf 	bl	800a0f4 <HAL_RCC_ClockConfig>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8006d7c:	f000 f9fe 	bl	800717c <Error_Handler>
  }
}
 8006d80:	bf00      	nop
 8006d82:	3778      	adds	r7, #120	; 0x78
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	58000400 	.word	0x58000400
 8006d8c:	58024800 	.word	0x58024800
 8006d90:	58024400 	.word	0x58024400

08006d94 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8006d98:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006d9a:	4a2f      	ldr	r2, [pc, #188]	; (8006e58 <MX_FDCAN2_Init+0xc4>)
 8006d9c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8006d9e:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8006da4:	4b2b      	ldr	r3, [pc, #172]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8006daa:	4b2a      	ldr	r3, [pc, #168]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8006db0:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8006db6:	4b27      	ldr	r3, [pc, #156]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006dbe:	2210      	movs	r2, #16
 8006dc0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8006dc2:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8006dc8:	4b22      	ldr	r3, [pc, #136]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006dca:	2202      	movs	r2, #2
 8006dcc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8006dce:	4b21      	ldr	r3, [pc, #132]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8006dd4:	4b1f      	ldr	r3, [pc, #124]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8006dda:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8006de0:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8006de6:	4b1b      	ldr	r3, [pc, #108]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8006dec:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8006df2:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8006df8:	4b16      	ldr	r3, [pc, #88]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8006dfe:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8006e04:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e06:	2204      	movs	r2, #4
 8006e08:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8006e10:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e12:	2204      	movs	r2, #4
 8006e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8006e16:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e1e:	2204      	movs	r2, #4
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8006e34:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8006e40:	4804      	ldr	r0, [pc, #16]	; (8006e54 <MX_FDCAN2_Init+0xc0>)
 8006e42:	f001 fc21 	bl	8008688 <HAL_FDCAN_Init>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8006e4c:	f000 f996 	bl	800717c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8006e50:	bf00      	nop
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	2407f160 	.word	0x2407f160
 8006e58:	4000a400 	.word	0x4000a400

08006e5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006e60:	4b10      	ldr	r3, [pc, #64]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e62:	4a11      	ldr	r2, [pc, #68]	; (8006ea8 <MX_RTC_Init+0x4c>)
 8006e64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e6e:	227f      	movs	r2, #127	; 0x7f
 8006e70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006e72:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006e84:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006e90:	4804      	ldr	r0, [pc, #16]	; (8006ea4 <MX_RTC_Init+0x48>)
 8006e92:	f005 f865 	bl	800bf60 <HAL_RTC_Init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006e9c:	f000 f96e 	bl	800717c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006ea0:	bf00      	nop
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	2407f200 	.word	0x2407f200
 8006ea8:	58004000 	.word	0x58004000

08006eac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006eb0:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006eb2:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <MX_USART3_UART_Init+0x94>)
 8006eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006eb6:	4b21      	ldr	r3, [pc, #132]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006ebe:	4b1f      	ldr	r3, [pc, #124]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006ec4:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006eca:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006ed0:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ed2:	220c      	movs	r2, #12
 8006ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ed6:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006edc:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ee2:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006ee8:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006ef4:	4811      	ldr	r0, [pc, #68]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006ef6:	f005 fe27 	bl	800cb48 <HAL_UART_Init>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006f00:	f000 f93c 	bl	800717c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f04:	2100      	movs	r1, #0
 8006f06:	480d      	ldr	r0, [pc, #52]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006f08:	f008 f8bb 	bl	800f082 <HAL_UARTEx_SetTxFifoThreshold>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006f12:	f000 f933 	bl	800717c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f16:	2100      	movs	r1, #0
 8006f18:	4808      	ldr	r0, [pc, #32]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006f1a:	f008 f8f0 	bl	800f0fe <HAL_UARTEx_SetRxFifoThreshold>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006f24:	f000 f92a 	bl	800717c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006f28:	4804      	ldr	r0, [pc, #16]	; (8006f3c <MX_USART3_UART_Init+0x90>)
 8006f2a:	f008 f871 	bl	800f010 <HAL_UARTEx_DisableFifoMode>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006f34:	f000 f922 	bl	800717c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006f38:	bf00      	nop
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	2407f224 	.word	0x2407f224
 8006f40:	40004800 	.word	0x40004800

08006f44 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f48:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8006f4a:	4a0e      	ldr	r2, [pc, #56]	; (8006f84 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8006f4c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8006f50:	2210      	movs	r2, #16
 8006f52:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006f54:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8006f62:	2202      	movs	r2, #2
 8006f64:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f66:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006f6c:	4804      	ldr	r0, [pc, #16]	; (8006f80 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8006f6e:	f002 fbe6 	bl	800973e <HAL_HCD_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8006f78:	f000 f900 	bl	800717c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006f7c:	bf00      	nop
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	2407f2b4 	.word	0x2407f2b4
 8006f84:	40080000 	.word	0x40080000

08006f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	; 0x28
 8006f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8e:	f107 0314 	add.w	r3, r7, #20
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	605a      	str	r2, [r3, #4]
 8006f98:	609a      	str	r2, [r3, #8]
 8006f9a:	60da      	str	r2, [r3, #12]
 8006f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f9e:	4b29      	ldr	r3, [pc, #164]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fa4:	4a27      	ldr	r2, [pc, #156]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fae:	4b25      	ldr	r3, [pc, #148]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb8:	613b      	str	r3, [r7, #16]
 8006fba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fbc:	4b21      	ldr	r3, [pc, #132]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fc2:	4a20      	ldr	r2, [pc, #128]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fc4:	f043 0304 	orr.w	r3, r3, #4
 8006fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fda:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe0:	4a18      	ldr	r2, [pc, #96]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fe2:	f043 0302 	orr.w	r3, r3, #2
 8006fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	60bb      	str	r3, [r7, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <MX_GPIO_Init+0xbc>)
 8006ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ffe:	4a11      	ldr	r2, [pc, #68]	; (8007044 <MX_GPIO_Init+0xbc>)
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007008:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <MX_GPIO_Init+0xbc>)
 800700a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8007016:	2201      	movs	r2, #1
 8007018:	2107      	movs	r1, #7
 800701a:	480b      	ldr	r0, [pc, #44]	; (8007048 <MX_GPIO_Init+0xc0>)
 800701c:	f002 fb5c 	bl	80096d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8007020:	2307      	movs	r3, #7
 8007022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007024:	2301      	movs	r3, #1
 8007026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007028:	2300      	movs	r3, #0
 800702a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800702c:	2300      	movs	r3, #0
 800702e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007030:	f107 0314 	add.w	r3, r7, #20
 8007034:	4619      	mov	r1, r3
 8007036:	4804      	ldr	r0, [pc, #16]	; (8007048 <MX_GPIO_Init+0xc0>)
 8007038:	f002 f99e 	bl	8009378 <HAL_GPIO_Init>

}
 800703c:	bf00      	nop
 800703e:	3728      	adds	r7, #40	; 0x28
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	58024400 	.word	0x58024400
 8007048:	58020800 	.word	0x58020800

0800704c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af02      	add	r7, sp, #8
 8007052:	6078      	str	r0, [r7, #4]
	uint8_t Dummy_Data;
	for(uint32_t i=0; i<4000;i++);
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e002      	b.n	8007060 <HAL_UART_RxCpltCallback+0x14>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8007066:	d3f8      	bcc.n	800705a <HAL_UART_RxCpltCallback+0xe>
	if(! xQueueIsQueueFullFromISR(q_Data))
 8007068:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <HAL_UART_RxCpltCallback+0x98>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f7fa fa06 	bl	800147e <xQueueIsQueueFullFromISR>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d107      	bne.n	8007088 <HAL_UART_RxCpltCallback+0x3c>
	{
		// Enqueue data
		xQueueSendFromISR(q_Data, (void*)&User_Input, NULL);
 8007078:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <HAL_UART_RxCpltCallback+0x98>)
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	2300      	movs	r3, #0
 800707e:	2200      	movs	r2, #0
 8007080:	4919      	ldr	r1, [pc, #100]	; (80070e8 <HAL_UART_RxCpltCallback+0x9c>)
 8007082:	f7f9 fe39 	bl	8000cf8 <xQueueGenericSendFromISR>
 8007086:	e013      	b.n	80070b0 <HAL_UART_RxCpltCallback+0x64>
	}
	else
	{
		if(User_Input == '\n')
 8007088:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <HAL_UART_RxCpltCallback+0x9c>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b0a      	cmp	r3, #10
 8007090:	d10e      	bne.n	80070b0 <HAL_UART_RxCpltCallback+0x64>
		{
			// Make sure that last data byte of the queue is '\n'
			xQueueReceiveFromISR(q_Data, (void*)&Dummy_Data, NULL);
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <HAL_UART_RxCpltCallback+0x98>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f107 010b 	add.w	r1, r7, #11
 800709a:	2200      	movs	r2, #0
 800709c:	4618      	mov	r0, r3
 800709e:	f7fa f809 	bl	80010b4 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_Data, (void*)&User_Input, NULL);
 80070a2:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <HAL_UART_RxCpltCallback+0x98>)
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	2300      	movs	r3, #0
 80070a8:	2200      	movs	r2, #0
 80070aa:	490f      	ldr	r1, [pc, #60]	; (80070e8 <HAL_UART_RxCpltCallback+0x9c>)
 80070ac:	f7f9 fe24 	bl	8000cf8 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to command handling task if User_Input == '\n'
	if(User_Input == '\n')
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <HAL_UART_RxCpltCallback+0x9c>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b0a      	cmp	r3, #10
 80070b8:	d10a      	bne.n	80070d0 <HAL_UART_RxCpltCallback+0x84>
	{
		// Send notification to command handling task
		xTaskNotifyFromISR(CommandHanding_Task_Handle, 0, eNoAction, NULL);
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <HAL_UART_RxCpltCallback+0xa0>)
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	2300      	movs	r3, #0
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	2300      	movs	r3, #0
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	2300      	movs	r3, #0
 80070c8:	2200      	movs	r2, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	f7fb fa5c 	bl	8002588 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in IT mode
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&User_Input, 1);
 80070d0:	2201      	movs	r2, #1
 80070d2:	4905      	ldr	r1, [pc, #20]	; (80070e8 <HAL_UART_RxCpltCallback+0x9c>)
 80070d4:	4806      	ldr	r0, [pc, #24]	; (80070f0 <HAL_UART_RxCpltCallback+0xa4>)
 80070d6:	f005 fe1d 	bl	800cd14 <HAL_UART_Receive_IT>
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	2407f5b8 	.word	0x2407f5b8
 80070e8:	2407f5ec 	.word	0x2407f5ec
 80070ec:	2407f5c4 	.word	0x2407f5c4
 80070f0:	2407f224 	.word	0x2407f224

080070f4 <LED_Effect_Callback>:


void LED_Effect_Callback(TimerHandle_t	xTimer)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	int Timer_id;
	Timer_id = (uint32_t) pvTimerGetTimerID(xTimer);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fb ff88 	bl	8003012 <pvTimerGetTimerID>
 8007102:	4603      	mov	r3, r0
 8007104:	60fb      	str	r3, [r7, #12]

	switch(Timer_id)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3b01      	subs	r3, #1
 800710a:	2b03      	cmp	r3, #3
 800710c:	d816      	bhi.n	800713c <LED_Effect_Callback+0x48>
 800710e:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <LED_Effect_Callback+0x20>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007125 	.word	0x08007125
 8007118:	0800712b 	.word	0x0800712b
 800711c:	08007131 	.word	0x08007131
 8007120:	08007137 	.word	0x08007137
	{
	case 1:
		LED_effect1();
 8007124:	f7fe febc 	bl	8005ea0 <LED_effect1>
		break;
 8007128:	e008      	b.n	800713c <LED_Effect_Callback+0x48>
	case 2:
		LED_effect2();
 800712a:	f7fe fecf 	bl	8005ecc <LED_effect2>
		break;
 800712e:	e005      	b.n	800713c <LED_Effect_Callback+0x48>
	case 3:
		LED_effect3();
 8007130:	f7fe fee2 	bl	8005ef8 <LED_effect3>
		break;
 8007134:	e002      	b.n	800713c <LED_Effect_Callback+0x48>
	case 4:
		LED_effect4();
 8007136:	f7fe fef5 	bl	8005f24 <LED_effect4>
	}
}
 800713a:	e7ff      	b.n	800713c <LED_Effect_Callback+0x48>
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <RTC_Report_Callback>:

void RTC_Report_Callback(TimerHandle_t	xTimer)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	show_time_date_itm();
 800714c:	f7fe ff00 	bl	8005f50 <show_time_date_itm>
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a04      	ldr	r2, [pc, #16]	; (8007178 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d101      	bne.n	800716e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800716a:	f000 fbf9 	bl	8007960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40001000 	.word	0x40001000

0800717c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007180:	b672      	cpsid	i
}
 8007182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8007184:	2101      	movs	r1, #1
 8007186:	4807      	ldr	r0, [pc, #28]	; (80071a4 <Error_Handler+0x28>)
 8007188:	f002 fabf 	bl	800970a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800718c:	2064      	movs	r0, #100	; 0x64
 800718e:	f000 fc07 	bl	80079a0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8007192:	2101      	movs	r1, #1
 8007194:	4803      	ldr	r0, [pc, #12]	; (80071a4 <Error_Handler+0x28>)
 8007196:	f002 fab8 	bl	800970a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800719a:	2064      	movs	r0, #100	; 0x64
 800719c:	f000 fc00 	bl	80079a0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 80071a0:	e7f0      	b.n	8007184 <Error_Handler+0x8>
 80071a2:	bf00      	nop
 80071a4:	58020800 	.word	0x58020800

080071a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <HAL_MspInit+0x30>)
 80071b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071b4:	4a08      	ldr	r2, [pc, #32]	; (80071d8 <HAL_MspInit+0x30>)
 80071b6:	f043 0302 	orr.w	r3, r3, #2
 80071ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80071be:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <HAL_MspInit+0x30>)
 80071c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	607b      	str	r3, [r7, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	58024400 	.word	0x58024400

080071dc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b0b8      	sub	sp, #224	; 0xe0
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	605a      	str	r2, [r3, #4]
 80071ee:	609a      	str	r2, [r3, #8]
 80071f0:	60da      	str	r2, [r3, #12]
 80071f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071f4:	f107 0310 	add.w	r3, r7, #16
 80071f8:	22bc      	movs	r2, #188	; 0xbc
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f008 fa79 	bl	800f6f4 <memset>
  if(hfdcan->Instance==FDCAN2)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a2d      	ldr	r2, [pc, #180]	; (80072bc <HAL_FDCAN_MspInit+0xe0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d153      	bne.n	80072b4 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800720c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007210:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8007212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007216:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007218:	f107 0310 	add.w	r3, r7, #16
 800721c:	4618      	mov	r0, r3
 800721e:	f003 fb37 	bl	800a890 <HAL_RCCEx_PeriphCLKConfig>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8007228:	f7ff ffa8 	bl	800717c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800722c:	4b24      	ldr	r3, [pc, #144]	; (80072c0 <HAL_FDCAN_MspInit+0xe4>)
 800722e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007232:	4a23      	ldr	r2, [pc, #140]	; (80072c0 <HAL_FDCAN_MspInit+0xe4>)
 8007234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007238:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800723c:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <HAL_FDCAN_MspInit+0xe4>)
 800723e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800724a:	4b1d      	ldr	r3, [pc, #116]	; (80072c0 <HAL_FDCAN_MspInit+0xe4>)
 800724c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007250:	4a1b      	ldr	r2, [pc, #108]	; (80072c0 <HAL_FDCAN_MspInit+0xe4>)
 8007252:	f043 0302 	orr.w	r3, r3, #2
 8007256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800725a:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <HAL_FDCAN_MspInit+0xe4>)
 800725c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	60bb      	str	r3, [r7, #8]
 8007266:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007268:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800726c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007270:	2302      	movs	r3, #2
 8007272:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007276:	2300      	movs	r3, #0
 8007278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800727c:	2300      	movs	r3, #0
 800727e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8007282:	2309      	movs	r3, #9
 8007284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007288:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800728c:	4619      	mov	r1, r3
 800728e:	480d      	ldr	r0, [pc, #52]	; (80072c4 <HAL_FDCAN_MspInit+0xe8>)
 8007290:	f002 f872 	bl	8009378 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8007294:	2200      	movs	r2, #0
 8007296:	2100      	movs	r1, #0
 8007298:	2014      	movs	r0, #20
 800729a:	f000 fc69 	bl	8007b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800729e:	2014      	movs	r0, #20
 80072a0:	f000 fc80 	bl	8007ba4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 80072a4:	2200      	movs	r2, #0
 80072a6:	2100      	movs	r1, #0
 80072a8:	2016      	movs	r0, #22
 80072aa:	f000 fc61 	bl	8007b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80072ae:	2016      	movs	r0, #22
 80072b0:	f000 fc78 	bl	8007ba4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80072b4:	bf00      	nop
 80072b6:	37e0      	adds	r7, #224	; 0xe0
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	4000a400 	.word	0x4000a400
 80072c0:	58024400 	.word	0x58024400
 80072c4:	58020400 	.word	0x58020400

080072c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b0b2      	sub	sp, #200	; 0xc8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80072d0:	f107 030c 	add.w	r3, r7, #12
 80072d4:	22bc      	movs	r2, #188	; 0xbc
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f008 fa0b 	bl	800f6f4 <memset>
  if(hrtc->Instance==RTC)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a0f      	ldr	r2, [pc, #60]	; (8007320 <HAL_RTC_MspInit+0x58>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d116      	bne.n	8007316 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80072e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80072ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80072f6:	f107 030c 	add.w	r3, r7, #12
 80072fa:	4618      	mov	r0, r3
 80072fc:	f003 fac8 	bl	800a890 <HAL_RCCEx_PeriphCLKConfig>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007306:	f7ff ff39 	bl	800717c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <HAL_RTC_MspInit+0x5c>)
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	4a05      	ldr	r2, [pc, #20]	; (8007324 <HAL_RTC_MspInit+0x5c>)
 8007310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007314:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007316:	bf00      	nop
 8007318:	37c8      	adds	r7, #200	; 0xc8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	58004000 	.word	0x58004000
 8007324:	58024400 	.word	0x58024400

08007328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b0b8      	sub	sp, #224	; 0xe0
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007330:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	609a      	str	r2, [r3, #8]
 800733c:	60da      	str	r2, [r3, #12]
 800733e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007340:	f107 0310 	add.w	r3, r7, #16
 8007344:	22bc      	movs	r2, #188	; 0xbc
 8007346:	2100      	movs	r1, #0
 8007348:	4618      	mov	r0, r3
 800734a:	f008 f9d3 	bl	800f6f4 <memset>
  if(huart->Instance==USART3)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a29      	ldr	r2, [pc, #164]	; (80073f8 <HAL_UART_MspInit+0xd0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d14a      	bne.n	80073ee <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007358:	2302      	movs	r3, #2
 800735a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007362:	f107 0310 	add.w	r3, r7, #16
 8007366:	4618      	mov	r0, r3
 8007368:	f003 fa92 	bl	800a890 <HAL_RCCEx_PeriphCLKConfig>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007372:	f7ff ff03 	bl	800717c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007376:	4b21      	ldr	r3, [pc, #132]	; (80073fc <HAL_UART_MspInit+0xd4>)
 8007378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800737c:	4a1f      	ldr	r2, [pc, #124]	; (80073fc <HAL_UART_MspInit+0xd4>)
 800737e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007382:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007386:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <HAL_UART_MspInit+0xd4>)
 8007388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800738c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007394:	4b19      	ldr	r3, [pc, #100]	; (80073fc <HAL_UART_MspInit+0xd4>)
 8007396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800739a:	4a18      	ldr	r2, [pc, #96]	; (80073fc <HAL_UART_MspInit+0xd4>)
 800739c:	f043 0302 	orr.w	r3, r3, #2
 80073a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073a4:	4b15      	ldr	r3, [pc, #84]	; (80073fc <HAL_UART_MspInit+0xd4>)
 80073a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	60bb      	str	r3, [r7, #8]
 80073b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80073b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ba:	2302      	movs	r3, #2
 80073bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073c6:	2300      	movs	r3, #0
 80073c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80073cc:	2307      	movs	r3, #7
 80073ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80073d6:	4619      	mov	r1, r3
 80073d8:	4809      	ldr	r0, [pc, #36]	; (8007400 <HAL_UART_MspInit+0xd8>)
 80073da:	f001 ffcd 	bl	8009378 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 80073de:	2200      	movs	r2, #0
 80073e0:	2106      	movs	r1, #6
 80073e2:	2027      	movs	r0, #39	; 0x27
 80073e4:	f000 fbc4 	bl	8007b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80073e8:	2027      	movs	r0, #39	; 0x27
 80073ea:	f000 fbdb 	bl	8007ba4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80073ee:	bf00      	nop
 80073f0:	37e0      	adds	r7, #224	; 0xe0
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	40004800 	.word	0x40004800
 80073fc:	58024400 	.word	0x58024400
 8007400:	58020400 	.word	0x58020400

08007404 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b0b8      	sub	sp, #224	; 0xe0
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800740c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	605a      	str	r2, [r3, #4]
 8007416:	609a      	str	r2, [r3, #8]
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800741c:	f107 0310 	add.w	r3, r7, #16
 8007420:	22bc      	movs	r2, #188	; 0xbc
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f008 f965 	bl	800f6f4 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a27      	ldr	r2, [pc, #156]	; (80074cc <HAL_HCD_MspInit+0xc8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d146      	bne.n	80074c2 <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007434:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007438:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800743a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800743e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007442:	f107 0310 	add.w	r3, r7, #16
 8007446:	4618      	mov	r0, r3
 8007448:	f003 fa22 	bl	800a890 <HAL_RCCEx_PeriphCLKConfig>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8007452:	f7ff fe93 	bl	800717c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8007456:	f002 fa0f 	bl	8009878 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800745a:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <HAL_HCD_MspInit+0xcc>)
 800745c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007460:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <HAL_HCD_MspInit+0xcc>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800746a:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <HAL_HCD_MspInit+0xcc>)
 800746c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007478:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800747c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007480:	2302      	movs	r3, #2
 8007482:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007486:	2300      	movs	r3, #0
 8007488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800748c:	2300      	movs	r3, #0
 800748e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007492:	230a      	movs	r3, #10
 8007494:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007498:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800749c:	4619      	mov	r1, r3
 800749e:	480d      	ldr	r0, [pc, #52]	; (80074d4 <HAL_HCD_MspInit+0xd0>)
 80074a0:	f001 ff6a 	bl	8009378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <HAL_HCD_MspInit+0xcc>)
 80074a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074aa:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <HAL_HCD_MspInit+0xcc>)
 80074ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <HAL_HCD_MspInit+0xcc>)
 80074b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80074c2:	bf00      	nop
 80074c4:	37e0      	adds	r7, #224	; 0xe0
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40080000 	.word	0x40080000
 80074d0:	58024400 	.word	0x58024400
 80074d4:	58020000 	.word	0x58020000

080074d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b090      	sub	sp, #64	; 0x40
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b0f      	cmp	r3, #15
 80074e4:	d827      	bhi.n	8007536 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80074e6:	2200      	movs	r2, #0
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	2036      	movs	r0, #54	; 0x36
 80074ec:	f000 fb40 	bl	8007b70 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80074f0:	2036      	movs	r0, #54	; 0x36
 80074f2:	f000 fb57 	bl	8007ba4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80074f6:	4a29      	ldr	r2, [pc, #164]	; (800759c <HAL_InitTick+0xc4>)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80074fc:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <HAL_InitTick+0xc8>)
 80074fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007502:	4a27      	ldr	r2, [pc, #156]	; (80075a0 <HAL_InitTick+0xc8>)
 8007504:	f043 0310 	orr.w	r3, r3, #16
 8007508:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800750c:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <HAL_InitTick+0xc8>)
 800750e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800751a:	f107 0210 	add.w	r2, r7, #16
 800751e:	f107 0314 	add.w	r3, r7, #20
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f003 f971 	bl	800a80c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_InitTick+0x6a>
 8007534:	e001      	b.n	800753a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e02b      	b.n	8007592 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800753a:	f003 f93b 	bl	800a7b4 <HAL_RCC_GetPCLK1Freq>
 800753e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007540:	e004      	b.n	800754c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007542:	f003 f937 	bl	800a7b4 <HAL_RCC_GetPCLK1Freq>
 8007546:	4603      	mov	r3, r0
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <HAL_InitTick+0xcc>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	0c9b      	lsrs	r3, r3, #18
 8007556:	3b01      	subs	r3, #1
 8007558:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800755a:	4b13      	ldr	r3, [pc, #76]	; (80075a8 <HAL_InitTick+0xd0>)
 800755c:	4a13      	ldr	r2, [pc, #76]	; (80075ac <HAL_InitTick+0xd4>)
 800755e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8007560:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <HAL_InitTick+0xd0>)
 8007562:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007566:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007568:	4a0f      	ldr	r2, [pc, #60]	; (80075a8 <HAL_InitTick+0xd0>)
 800756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800756e:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <HAL_InitTick+0xd0>)
 8007570:	2200      	movs	r2, #0
 8007572:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007574:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <HAL_InitTick+0xd0>)
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800757a:	480b      	ldr	r0, [pc, #44]	; (80075a8 <HAL_InitTick+0xd0>)
 800757c:	f005 f80a 	bl	800c594 <HAL_TIM_Base_Init>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007586:	4808      	ldr	r0, [pc, #32]	; (80075a8 <HAL_InitTick+0xd0>)
 8007588:	f005 f866 	bl	800c658 <HAL_TIM_Base_Start_IT>
 800758c:	4603      	mov	r3, r0
 800758e:	e000      	b.n	8007592 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
}
 8007592:	4618      	mov	r0, r3
 8007594:	3740      	adds	r7, #64	; 0x40
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	24000034 	.word	0x24000034
 80075a0:	58024400 	.word	0x58024400
 80075a4:	431bde83 	.word	0x431bde83
 80075a8:	2407f5f0 	.word	0x2407f5f0
 80075ac:	40001000 	.word	0x40001000

080075b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80075b4:	2102      	movs	r1, #2
 80075b6:	4807      	ldr	r0, [pc, #28]	; (80075d4 <NMI_Handler+0x24>)
 80075b8:	f002 f8a7 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80075bc:	2064      	movs	r0, #100	; 0x64
 80075be:	f000 f9ef 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80075c2:	2102      	movs	r1, #2
 80075c4:	4803      	ldr	r0, [pc, #12]	; (80075d4 <NMI_Handler+0x24>)
 80075c6:	f002 f8a0 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80075ca:	2064      	movs	r0, #100	; 0x64
 80075cc:	f000 f9e8 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80075d0:	e7f0      	b.n	80075b4 <NMI_Handler+0x4>
 80075d2:	bf00      	nop
 80075d4:	58020800 	.word	0x58020800

080075d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80075dc:	2102      	movs	r1, #2
 80075de:	4807      	ldr	r0, [pc, #28]	; (80075fc <HardFault_Handler+0x24>)
 80075e0:	f002 f893 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80075e4:	2064      	movs	r0, #100	; 0x64
 80075e6:	f000 f9db 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80075ea:	2102      	movs	r1, #2
 80075ec:	4803      	ldr	r0, [pc, #12]	; (80075fc <HardFault_Handler+0x24>)
 80075ee:	f002 f88c 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80075f2:	2064      	movs	r0, #100	; 0x64
 80075f4:	f000 f9d4 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80075f8:	e7f0      	b.n	80075dc <HardFault_Handler+0x4>
 80075fa:	bf00      	nop
 80075fc:	58020800 	.word	0x58020800

08007600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8007604:	2102      	movs	r1, #2
 8007606:	4807      	ldr	r0, [pc, #28]	; (8007624 <MemManage_Handler+0x24>)
 8007608:	f002 f87f 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800760c:	2064      	movs	r0, #100	; 0x64
 800760e:	f000 f9c7 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8007612:	2102      	movs	r1, #2
 8007614:	4803      	ldr	r0, [pc, #12]	; (8007624 <MemManage_Handler+0x24>)
 8007616:	f002 f878 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800761a:	2064      	movs	r0, #100	; 0x64
 800761c:	f000 f9c0 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8007620:	e7f0      	b.n	8007604 <MemManage_Handler+0x4>
 8007622:	bf00      	nop
 8007624:	58020800 	.word	0x58020800

08007628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800762c:	2102      	movs	r1, #2
 800762e:	4807      	ldr	r0, [pc, #28]	; (800764c <BusFault_Handler+0x24>)
 8007630:	f002 f86b 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8007634:	2064      	movs	r0, #100	; 0x64
 8007636:	f000 f9b3 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800763a:	2102      	movs	r1, #2
 800763c:	4803      	ldr	r0, [pc, #12]	; (800764c <BusFault_Handler+0x24>)
 800763e:	f002 f864 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8007642:	2064      	movs	r0, #100	; 0x64
 8007644:	f000 f9ac 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8007648:	e7f0      	b.n	800762c <BusFault_Handler+0x4>
 800764a:	bf00      	nop
 800764c:	58020800 	.word	0x58020800

08007650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8007654:	2102      	movs	r1, #2
 8007656:	4807      	ldr	r0, [pc, #28]	; (8007674 <UsageFault_Handler+0x24>)
 8007658:	f002 f857 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800765c:	2064      	movs	r0, #100	; 0x64
 800765e:	f000 f99f 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8007662:	2102      	movs	r1, #2
 8007664:	4803      	ldr	r0, [pc, #12]	; (8007674 <UsageFault_Handler+0x24>)
 8007666:	f002 f850 	bl	800970a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800766a:	2064      	movs	r0, #100	; 0x64
 800766c:	f000 f998 	bl	80079a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8007670:	e7f0      	b.n	8007654 <UsageFault_Handler+0x4>
 8007672:	bf00      	nop
 8007674:	58020800 	.word	0x58020800

08007678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800767c:	bf00      	nop
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800768c:	4802      	ldr	r0, [pc, #8]	; (8007698 <FDCAN2_IT0_IRQHandler+0x10>)
 800768e:	f001 f9d9 	bl	8008a44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8007692:	bf00      	nop
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	2407f160 	.word	0x2407f160

0800769c <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80076a0:	4802      	ldr	r0, [pc, #8]	; (80076ac <FDCAN2_IT1_IRQHandler+0x10>)
 80076a2:	f001 f9cf 	bl	8008a44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80076a6:	bf00      	nop
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	2407f160 	.word	0x2407f160

080076b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80076b4:	4802      	ldr	r0, [pc, #8]	; (80076c0 <USART3_IRQHandler+0x10>)
 80076b6:	f005 fb83 	bl	800cdc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80076ba:	bf00      	nop
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	2407f224 	.word	0x2407f224

080076c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80076c8:	4802      	ldr	r0, [pc, #8]	; (80076d4 <TIM6_DAC_IRQHandler+0x10>)
 80076ca:	f005 f83d 	bl	800c748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80076ce:	bf00      	nop
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	2407f5f0 	.word	0x2407f5f0

080076d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e00a      	b.n	8007700 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80076ea:	f3af 8000 	nop.w
 80076ee:	4601      	mov	r1, r0
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	60ba      	str	r2, [r7, #8]
 80076f6:	b2ca      	uxtb	r2, r1
 80076f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	3301      	adds	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	dbf0      	blt.n	80076ea <_read+0x12>
	}

return len;
 8007708:	687b      	ldr	r3, [r7, #4]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
	return -1;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800773a:	605a      	str	r2, [r3, #4]
	return 0;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <_isatty>:

int _isatty(int file)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
	return 1;
 8007752:	2301      	movs	r3, #1
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
	return 0;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007780:	4b39      	ldr	r3, [pc, #228]	; (8007868 <SystemInit+0xec>)
 8007782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007786:	4a38      	ldr	r2, [pc, #224]	; (8007868 <SystemInit+0xec>)
 8007788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800778c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007790:	4b36      	ldr	r3, [pc, #216]	; (800786c <SystemInit+0xf0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	2b06      	cmp	r3, #6
 800779a:	d807      	bhi.n	80077ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800779c:	4b33      	ldr	r3, [pc, #204]	; (800786c <SystemInit+0xf0>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f023 030f 	bic.w	r3, r3, #15
 80077a4:	4a31      	ldr	r2, [pc, #196]	; (800786c <SystemInit+0xf0>)
 80077a6:	f043 0307 	orr.w	r3, r3, #7
 80077aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80077ac:	4b30      	ldr	r3, [pc, #192]	; (8007870 <SystemInit+0xf4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a2f      	ldr	r2, [pc, #188]	; (8007870 <SystemInit+0xf4>)
 80077b2:	f043 0301 	orr.w	r3, r3, #1
 80077b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80077b8:	4b2d      	ldr	r3, [pc, #180]	; (8007870 <SystemInit+0xf4>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80077be:	4b2c      	ldr	r3, [pc, #176]	; (8007870 <SystemInit+0xf4>)
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	492b      	ldr	r1, [pc, #172]	; (8007870 <SystemInit+0xf4>)
 80077c4:	4b2b      	ldr	r3, [pc, #172]	; (8007874 <SystemInit+0xf8>)
 80077c6:	4013      	ands	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80077ca:	4b28      	ldr	r3, [pc, #160]	; (800786c <SystemInit+0xf0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0308 	and.w	r3, r3, #8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80077d6:	4b25      	ldr	r3, [pc, #148]	; (800786c <SystemInit+0xf0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f023 030f 	bic.w	r3, r3, #15
 80077de:	4a23      	ldr	r2, [pc, #140]	; (800786c <SystemInit+0xf0>)
 80077e0:	f043 0307 	orr.w	r3, r3, #7
 80077e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80077e6:	4b22      	ldr	r3, [pc, #136]	; (8007870 <SystemInit+0xf4>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80077ec:	4b20      	ldr	r3, [pc, #128]	; (8007870 <SystemInit+0xf4>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80077f2:	4b1f      	ldr	r3, [pc, #124]	; (8007870 <SystemInit+0xf4>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80077f8:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <SystemInit+0xf4>)
 80077fa:	4a1f      	ldr	r2, [pc, #124]	; (8007878 <SystemInit+0xfc>)
 80077fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80077fe:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <SystemInit+0xf4>)
 8007800:	4a1e      	ldr	r2, [pc, #120]	; (800787c <SystemInit+0x100>)
 8007802:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007804:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <SystemInit+0xf4>)
 8007806:	4a1e      	ldr	r2, [pc, #120]	; (8007880 <SystemInit+0x104>)
 8007808:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800780a:	4b19      	ldr	r3, [pc, #100]	; (8007870 <SystemInit+0xf4>)
 800780c:	2200      	movs	r2, #0
 800780e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007810:	4b17      	ldr	r3, [pc, #92]	; (8007870 <SystemInit+0xf4>)
 8007812:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <SystemInit+0x104>)
 8007814:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007816:	4b16      	ldr	r3, [pc, #88]	; (8007870 <SystemInit+0xf4>)
 8007818:	2200      	movs	r2, #0
 800781a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800781c:	4b14      	ldr	r3, [pc, #80]	; (8007870 <SystemInit+0xf4>)
 800781e:	4a18      	ldr	r2, [pc, #96]	; (8007880 <SystemInit+0x104>)
 8007820:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007822:	4b13      	ldr	r3, [pc, #76]	; (8007870 <SystemInit+0xf4>)
 8007824:	2200      	movs	r2, #0
 8007826:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007828:	4b11      	ldr	r3, [pc, #68]	; (8007870 <SystemInit+0xf4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a10      	ldr	r2, [pc, #64]	; (8007870 <SystemInit+0xf4>)
 800782e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007832:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <SystemInit+0xf4>)
 8007836:	2200      	movs	r2, #0
 8007838:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800783a:	4b12      	ldr	r3, [pc, #72]	; (8007884 <SystemInit+0x108>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <SystemInit+0x10c>)
 8007840:	4013      	ands	r3, r2
 8007842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007846:	d202      	bcs.n	800784e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007848:	4b10      	ldr	r3, [pc, #64]	; (800788c <SystemInit+0x110>)
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800784e:	4b10      	ldr	r3, [pc, #64]	; (8007890 <SystemInit+0x114>)
 8007850:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8007854:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007856:	4b04      	ldr	r3, [pc, #16]	; (8007868 <SystemInit+0xec>)
 8007858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800785c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800785e:	bf00      	nop
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	e000ed00 	.word	0xe000ed00
 800786c:	52002000 	.word	0x52002000
 8007870:	58024400 	.word	0x58024400
 8007874:	eaf6ed7f 	.word	0xeaf6ed7f
 8007878:	02020200 	.word	0x02020200
 800787c:	01ff0000 	.word	0x01ff0000
 8007880:	01010280 	.word	0x01010280
 8007884:	5c001000 	.word	0x5c001000
 8007888:	ffff0000 	.word	0xffff0000
 800788c:	51008108 	.word	0x51008108
 8007890:	52004000 	.word	0x52004000

08007894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007898:	f7ff ff70 	bl	800777c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800789c:	480c      	ldr	r0, [pc, #48]	; (80078d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800789e:	490d      	ldr	r1, [pc, #52]	; (80078d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80078a0:	4a0d      	ldr	r2, [pc, #52]	; (80078d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80078a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078a4:	e002      	b.n	80078ac <LoopCopyDataInit>

080078a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078aa:	3304      	adds	r3, #4

080078ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078b0:	d3f9      	bcc.n	80078a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078b2:	4a0a      	ldr	r2, [pc, #40]	; (80078dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80078b4:	4c0a      	ldr	r4, [pc, #40]	; (80078e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80078b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078b8:	e001      	b.n	80078be <LoopFillZerobss>

080078ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078bc:	3204      	adds	r2, #4

080078be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078c0:	d3fb      	bcc.n	80078ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80078c2:	f007 fed5 	bl	800f670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80078c6:	f7ff f863 	bl	8006990 <main>
  bx  lr
 80078ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80078cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80078d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80078d4:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 80078d8:	08010fd4 	.word	0x08010fd4
  ldr r2, =_sbss
 80078dc:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 80078e0:	2407f654 	.word	0x2407f654

080078e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078e4:	e7fe      	b.n	80078e4 <ADC3_IRQHandler>
	...

080078e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078ee:	2003      	movs	r0, #3
 80078f0:	f000 f933 	bl	8007b5a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078f4:	f002 fdb4 	bl	800a460 <HAL_RCC_GetSysClockFreq>
 80078f8:	4602      	mov	r2, r0
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <HAL_Init+0x68>)
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	4913      	ldr	r1, [pc, #76]	; (8007954 <HAL_Init+0x6c>)
 8007906:	5ccb      	ldrb	r3, [r1, r3]
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
 8007910:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <HAL_Init+0x68>)
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	4a0e      	ldr	r2, [pc, #56]	; (8007954 <HAL_Init+0x6c>)
 800791c:	5cd3      	ldrb	r3, [r2, r3]
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
 8007928:	4a0b      	ldr	r2, [pc, #44]	; (8007958 <HAL_Init+0x70>)
 800792a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800792c:	4a0b      	ldr	r2, [pc, #44]	; (800795c <HAL_Init+0x74>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007932:	200f      	movs	r0, #15
 8007934:	f7ff fdd0 	bl	80074d8 <HAL_InitTick>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e002      	b.n	8007948 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007942:	f7ff fc31 	bl	80071a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	58024400 	.word	0x58024400
 8007954:	08010ef4 	.word	0x08010ef4
 8007958:	24000030 	.word	0x24000030
 800795c:	2400002c 	.word	0x2400002c

08007960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <HAL_IncTick+0x20>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <HAL_IncTick+0x24>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4413      	add	r3, r2
 8007970:	4a04      	ldr	r2, [pc, #16]	; (8007984 <HAL_IncTick+0x24>)
 8007972:	6013      	str	r3, [r2, #0]
}
 8007974:	bf00      	nop
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	24000038 	.word	0x24000038
 8007984:	2407f63c 	.word	0x2407f63c

08007988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  return uwTick;
 800798c:	4b03      	ldr	r3, [pc, #12]	; (800799c <HAL_GetTick+0x14>)
 800798e:	681b      	ldr	r3, [r3, #0]
}
 8007990:	4618      	mov	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	2407f63c 	.word	0x2407f63c

080079a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80079a8:	f7ff ffee 	bl	8007988 <HAL_GetTick>
 80079ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d005      	beq.n	80079c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80079ba:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <HAL_Delay+0x44>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80079c6:	bf00      	nop
 80079c8:	f7ff ffde 	bl	8007988 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d8f7      	bhi.n	80079c8 <HAL_Delay+0x28>
  {
  }
}
 80079d8:	bf00      	nop
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	24000038 	.word	0x24000038

080079e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80079ec:	4b03      	ldr	r3, [pc, #12]	; (80079fc <HAL_GetREVID+0x14>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	0c1b      	lsrs	r3, r3, #16
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	5c001000 	.word	0x5c001000

08007a00 <__NVIC_SetPriorityGrouping>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <__NVIC_SetPriorityGrouping+0x40>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <__NVIC_SetPriorityGrouping+0x44>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a2e:	4a04      	ldr	r2, [pc, #16]	; (8007a40 <__NVIC_SetPriorityGrouping+0x40>)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	60d3      	str	r3, [r2, #12]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	e000ed00 	.word	0xe000ed00
 8007a44:	05fa0000 	.word	0x05fa0000

08007a48 <__NVIC_GetPriorityGrouping>:
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a4c:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <__NVIC_GetPriorityGrouping+0x18>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	0a1b      	lsrs	r3, r3, #8
 8007a52:	f003 0307 	and.w	r3, r3, #7
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	e000ed00 	.word	0xe000ed00

08007a64 <__NVIC_EnableIRQ>:
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	db0b      	blt.n	8007a8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	f003 021f 	and.w	r2, r3, #31
 8007a7c:	4907      	ldr	r1, [pc, #28]	; (8007a9c <__NVIC_EnableIRQ+0x38>)
 8007a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	2001      	movs	r0, #1
 8007a86:	fa00 f202 	lsl.w	r2, r0, r2
 8007a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	e000e100 	.word	0xe000e100

08007aa0 <__NVIC_SetPriority>:
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	db0a      	blt.n	8007aca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	490c      	ldr	r1, [pc, #48]	; (8007aec <__NVIC_SetPriority+0x4c>)
 8007aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007abe:	0112      	lsls	r2, r2, #4
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ac8:	e00a      	b.n	8007ae0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	4908      	ldr	r1, [pc, #32]	; (8007af0 <__NVIC_SetPriority+0x50>)
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	f003 030f 	and.w	r3, r3, #15
 8007ad6:	3b04      	subs	r3, #4
 8007ad8:	0112      	lsls	r2, r2, #4
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	440b      	add	r3, r1
 8007ade:	761a      	strb	r2, [r3, #24]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	e000e100 	.word	0xe000e100
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b089      	sub	sp, #36	; 0x24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f1c3 0307 	rsb	r3, r3, #7
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	bf28      	it	cs
 8007b12:	2304      	movcs	r3, #4
 8007b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	2b06      	cmp	r3, #6
 8007b1c:	d902      	bls.n	8007b24 <NVIC_EncodePriority+0x30>
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3b03      	subs	r3, #3
 8007b22:	e000      	b.n	8007b26 <NVIC_EncodePriority+0x32>
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b28:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b32:	43da      	mvns	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	401a      	ands	r2, r3
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	fa01 f303 	lsl.w	r3, r1, r3
 8007b46:	43d9      	mvns	r1, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b4c:	4313      	orrs	r3, r2
         );
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3724      	adds	r7, #36	; 0x24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff ff4c 	bl	8007a00 <__NVIC_SetPriorityGrouping>
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b7e:	f7ff ff63 	bl	8007a48 <__NVIC_GetPriorityGrouping>
 8007b82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	6978      	ldr	r0, [r7, #20]
 8007b8a:	f7ff ffb3 	bl	8007af4 <NVIC_EncodePriority>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff82 	bl	8007aa0 <__NVIC_SetPriority>
}
 8007b9c:	bf00      	nop
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff ff56 	bl	8007a64 <__NVIC_EnableIRQ>
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007bc8:	f7ff fede 	bl	8007988 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e2dc      	b.n	8008192 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d008      	beq.n	8007bf6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2280      	movs	r2, #128	; 0x80
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e2cd      	b.n	8008192 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a76      	ldr	r2, [pc, #472]	; (8007dd4 <HAL_DMA_Abort+0x214>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d04a      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a74      	ldr	r2, [pc, #464]	; (8007dd8 <HAL_DMA_Abort+0x218>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d045      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a73      	ldr	r2, [pc, #460]	; (8007ddc <HAL_DMA_Abort+0x21c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d040      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a71      	ldr	r2, [pc, #452]	; (8007de0 <HAL_DMA_Abort+0x220>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d03b      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a70      	ldr	r2, [pc, #448]	; (8007de4 <HAL_DMA_Abort+0x224>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d036      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a6e      	ldr	r2, [pc, #440]	; (8007de8 <HAL_DMA_Abort+0x228>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d031      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a6d      	ldr	r2, [pc, #436]	; (8007dec <HAL_DMA_Abort+0x22c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d02c      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a6b      	ldr	r2, [pc, #428]	; (8007df0 <HAL_DMA_Abort+0x230>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d027      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a6a      	ldr	r2, [pc, #424]	; (8007df4 <HAL_DMA_Abort+0x234>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d022      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a68      	ldr	r2, [pc, #416]	; (8007df8 <HAL_DMA_Abort+0x238>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d01d      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a67      	ldr	r2, [pc, #412]	; (8007dfc <HAL_DMA_Abort+0x23c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d018      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a65      	ldr	r2, [pc, #404]	; (8007e00 <HAL_DMA_Abort+0x240>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d013      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a64      	ldr	r2, [pc, #400]	; (8007e04 <HAL_DMA_Abort+0x244>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00e      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a62      	ldr	r2, [pc, #392]	; (8007e08 <HAL_DMA_Abort+0x248>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d009      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a61      	ldr	r2, [pc, #388]	; (8007e0c <HAL_DMA_Abort+0x24c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_DMA_Abort+0xd6>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a5f      	ldr	r2, [pc, #380]	; (8007e10 <HAL_DMA_Abort+0x250>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d101      	bne.n	8007c9a <HAL_DMA_Abort+0xda>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <HAL_DMA_Abort+0xdc>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d013      	beq.n	8007cc8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 021e 	bic.w	r2, r2, #30
 8007cae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695a      	ldr	r2, [r3, #20]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cbe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e00a      	b.n	8007cde <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 020e 	bic.w	r2, r2, #14
 8007cd6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a3c      	ldr	r2, [pc, #240]	; (8007dd4 <HAL_DMA_Abort+0x214>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d072      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a3a      	ldr	r2, [pc, #232]	; (8007dd8 <HAL_DMA_Abort+0x218>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d06d      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a39      	ldr	r2, [pc, #228]	; (8007ddc <HAL_DMA_Abort+0x21c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d068      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a37      	ldr	r2, [pc, #220]	; (8007de0 <HAL_DMA_Abort+0x220>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d063      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a36      	ldr	r2, [pc, #216]	; (8007de4 <HAL_DMA_Abort+0x224>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d05e      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a34      	ldr	r2, [pc, #208]	; (8007de8 <HAL_DMA_Abort+0x228>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d059      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a33      	ldr	r2, [pc, #204]	; (8007dec <HAL_DMA_Abort+0x22c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d054      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a31      	ldr	r2, [pc, #196]	; (8007df0 <HAL_DMA_Abort+0x230>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d04f      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a30      	ldr	r2, [pc, #192]	; (8007df4 <HAL_DMA_Abort+0x234>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d04a      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a2e      	ldr	r2, [pc, #184]	; (8007df8 <HAL_DMA_Abort+0x238>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d045      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a2d      	ldr	r2, [pc, #180]	; (8007dfc <HAL_DMA_Abort+0x23c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d040      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a2b      	ldr	r2, [pc, #172]	; (8007e00 <HAL_DMA_Abort+0x240>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d03b      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a2a      	ldr	r2, [pc, #168]	; (8007e04 <HAL_DMA_Abort+0x244>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d036      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a28      	ldr	r2, [pc, #160]	; (8007e08 <HAL_DMA_Abort+0x248>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d031      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a27      	ldr	r2, [pc, #156]	; (8007e0c <HAL_DMA_Abort+0x24c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d02c      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a25      	ldr	r2, [pc, #148]	; (8007e10 <HAL_DMA_Abort+0x250>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d027      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a24      	ldr	r2, [pc, #144]	; (8007e14 <HAL_DMA_Abort+0x254>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d022      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a22      	ldr	r2, [pc, #136]	; (8007e18 <HAL_DMA_Abort+0x258>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01d      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a21      	ldr	r2, [pc, #132]	; (8007e1c <HAL_DMA_Abort+0x25c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d018      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <HAL_DMA_Abort+0x260>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <HAL_DMA_Abort+0x264>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a1c      	ldr	r2, [pc, #112]	; (8007e28 <HAL_DMA_Abort+0x268>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_DMA_Abort+0x26c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_DMA_Abort+0x20e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a19      	ldr	r2, [pc, #100]	; (8007e30 <HAL_DMA_Abort+0x270>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d132      	bne.n	8007e34 <HAL_DMA_Abort+0x274>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e031      	b.n	8007e36 <HAL_DMA_Abort+0x276>
 8007dd2:	bf00      	nop
 8007dd4:	40020010 	.word	0x40020010
 8007dd8:	40020028 	.word	0x40020028
 8007ddc:	40020040 	.word	0x40020040
 8007de0:	40020058 	.word	0x40020058
 8007de4:	40020070 	.word	0x40020070
 8007de8:	40020088 	.word	0x40020088
 8007dec:	400200a0 	.word	0x400200a0
 8007df0:	400200b8 	.word	0x400200b8
 8007df4:	40020410 	.word	0x40020410
 8007df8:	40020428 	.word	0x40020428
 8007dfc:	40020440 	.word	0x40020440
 8007e00:	40020458 	.word	0x40020458
 8007e04:	40020470 	.word	0x40020470
 8007e08:	40020488 	.word	0x40020488
 8007e0c:	400204a0 	.word	0x400204a0
 8007e10:	400204b8 	.word	0x400204b8
 8007e14:	58025408 	.word	0x58025408
 8007e18:	5802541c 	.word	0x5802541c
 8007e1c:	58025430 	.word	0x58025430
 8007e20:	58025444 	.word	0x58025444
 8007e24:	58025458 	.word	0x58025458
 8007e28:	5802546c 	.word	0x5802546c
 8007e2c:	58025480 	.word	0x58025480
 8007e30:	58025494 	.word	0x58025494
 8007e34:	2300      	movs	r3, #0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d007      	beq.n	8007e4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a6d      	ldr	r2, [pc, #436]	; (8008004 <HAL_DMA_Abort+0x444>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d04a      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a6b      	ldr	r2, [pc, #428]	; (8008008 <HAL_DMA_Abort+0x448>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d045      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a6a      	ldr	r2, [pc, #424]	; (800800c <HAL_DMA_Abort+0x44c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d040      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a68      	ldr	r2, [pc, #416]	; (8008010 <HAL_DMA_Abort+0x450>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d03b      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a67      	ldr	r2, [pc, #412]	; (8008014 <HAL_DMA_Abort+0x454>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d036      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a65      	ldr	r2, [pc, #404]	; (8008018 <HAL_DMA_Abort+0x458>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d031      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a64      	ldr	r2, [pc, #400]	; (800801c <HAL_DMA_Abort+0x45c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d02c      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a62      	ldr	r2, [pc, #392]	; (8008020 <HAL_DMA_Abort+0x460>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d027      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a61      	ldr	r2, [pc, #388]	; (8008024 <HAL_DMA_Abort+0x464>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d022      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a5f      	ldr	r2, [pc, #380]	; (8008028 <HAL_DMA_Abort+0x468>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d01d      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a5e      	ldr	r2, [pc, #376]	; (800802c <HAL_DMA_Abort+0x46c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d018      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a5c      	ldr	r2, [pc, #368]	; (8008030 <HAL_DMA_Abort+0x470>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a5b      	ldr	r2, [pc, #364]	; (8008034 <HAL_DMA_Abort+0x474>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00e      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a59      	ldr	r2, [pc, #356]	; (8008038 <HAL_DMA_Abort+0x478>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d009      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a58      	ldr	r2, [pc, #352]	; (800803c <HAL_DMA_Abort+0x47c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d004      	beq.n	8007eea <HAL_DMA_Abort+0x32a>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a56      	ldr	r2, [pc, #344]	; (8008040 <HAL_DMA_Abort+0x480>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d108      	bne.n	8007efc <HAL_DMA_Abort+0x33c>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0201 	bic.w	r2, r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	e007      	b.n	8007f0c <HAL_DMA_Abort+0x34c>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0201 	bic.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007f0c:	e013      	b.n	8007f36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f0e:	f7ff fd3b 	bl	8007988 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	2b05      	cmp	r3, #5
 8007f1a:	d90c      	bls.n	8007f36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2203      	movs	r2, #3
 8007f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e12d      	b.n	8008192 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e5      	bne.n	8007f0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a2f      	ldr	r2, [pc, #188]	; (8008004 <HAL_DMA_Abort+0x444>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d04a      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a2d      	ldr	r2, [pc, #180]	; (8008008 <HAL_DMA_Abort+0x448>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d045      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a2c      	ldr	r2, [pc, #176]	; (800800c <HAL_DMA_Abort+0x44c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d040      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2a      	ldr	r2, [pc, #168]	; (8008010 <HAL_DMA_Abort+0x450>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d03b      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a29      	ldr	r2, [pc, #164]	; (8008014 <HAL_DMA_Abort+0x454>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d036      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a27      	ldr	r2, [pc, #156]	; (8008018 <HAL_DMA_Abort+0x458>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d031      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a26      	ldr	r2, [pc, #152]	; (800801c <HAL_DMA_Abort+0x45c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d02c      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a24      	ldr	r2, [pc, #144]	; (8008020 <HAL_DMA_Abort+0x460>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d027      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a23      	ldr	r2, [pc, #140]	; (8008024 <HAL_DMA_Abort+0x464>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d022      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a21      	ldr	r2, [pc, #132]	; (8008028 <HAL_DMA_Abort+0x468>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01d      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a20      	ldr	r2, [pc, #128]	; (800802c <HAL_DMA_Abort+0x46c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d018      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1e      	ldr	r2, [pc, #120]	; (8008030 <HAL_DMA_Abort+0x470>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d013      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1d      	ldr	r2, [pc, #116]	; (8008034 <HAL_DMA_Abort+0x474>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00e      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1b      	ldr	r2, [pc, #108]	; (8008038 <HAL_DMA_Abort+0x478>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d009      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1a      	ldr	r2, [pc, #104]	; (800803c <HAL_DMA_Abort+0x47c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d004      	beq.n	8007fe2 <HAL_DMA_Abort+0x422>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a18      	ldr	r2, [pc, #96]	; (8008040 <HAL_DMA_Abort+0x480>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d101      	bne.n	8007fe6 <HAL_DMA_Abort+0x426>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <HAL_DMA_Abort+0x428>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d02b      	beq.n	8008044 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	223f      	movs	r2, #63	; 0x3f
 8007ffc:	409a      	lsls	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	609a      	str	r2, [r3, #8]
 8008002:	e02a      	b.n	800805a <HAL_DMA_Abort+0x49a>
 8008004:	40020010 	.word	0x40020010
 8008008:	40020028 	.word	0x40020028
 800800c:	40020040 	.word	0x40020040
 8008010:	40020058 	.word	0x40020058
 8008014:	40020070 	.word	0x40020070
 8008018:	40020088 	.word	0x40020088
 800801c:	400200a0 	.word	0x400200a0
 8008020:	400200b8 	.word	0x400200b8
 8008024:	40020410 	.word	0x40020410
 8008028:	40020428 	.word	0x40020428
 800802c:	40020440 	.word	0x40020440
 8008030:	40020458 	.word	0x40020458
 8008034:	40020470 	.word	0x40020470
 8008038:	40020488 	.word	0x40020488
 800803c:	400204a0 	.word	0x400204a0
 8008040:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008048:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	2201      	movs	r2, #1
 8008054:	409a      	lsls	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a4f      	ldr	r2, [pc, #316]	; (800819c <HAL_DMA_Abort+0x5dc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d072      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a4d      	ldr	r2, [pc, #308]	; (80081a0 <HAL_DMA_Abort+0x5e0>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d06d      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a4c      	ldr	r2, [pc, #304]	; (80081a4 <HAL_DMA_Abort+0x5e4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d068      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a4a      	ldr	r2, [pc, #296]	; (80081a8 <HAL_DMA_Abort+0x5e8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d063      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a49      	ldr	r2, [pc, #292]	; (80081ac <HAL_DMA_Abort+0x5ec>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d05e      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a47      	ldr	r2, [pc, #284]	; (80081b0 <HAL_DMA_Abort+0x5f0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d059      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a46      	ldr	r2, [pc, #280]	; (80081b4 <HAL_DMA_Abort+0x5f4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d054      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a44      	ldr	r2, [pc, #272]	; (80081b8 <HAL_DMA_Abort+0x5f8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d04f      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a43      	ldr	r2, [pc, #268]	; (80081bc <HAL_DMA_Abort+0x5fc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d04a      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a41      	ldr	r2, [pc, #260]	; (80081c0 <HAL_DMA_Abort+0x600>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d045      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a40      	ldr	r2, [pc, #256]	; (80081c4 <HAL_DMA_Abort+0x604>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d040      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a3e      	ldr	r2, [pc, #248]	; (80081c8 <HAL_DMA_Abort+0x608>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d03b      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a3d      	ldr	r2, [pc, #244]	; (80081cc <HAL_DMA_Abort+0x60c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d036      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a3b      	ldr	r2, [pc, #236]	; (80081d0 <HAL_DMA_Abort+0x610>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d031      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a3a      	ldr	r2, [pc, #232]	; (80081d4 <HAL_DMA_Abort+0x614>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d02c      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a38      	ldr	r2, [pc, #224]	; (80081d8 <HAL_DMA_Abort+0x618>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d027      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a37      	ldr	r2, [pc, #220]	; (80081dc <HAL_DMA_Abort+0x61c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d022      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a35      	ldr	r2, [pc, #212]	; (80081e0 <HAL_DMA_Abort+0x620>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d01d      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a34      	ldr	r2, [pc, #208]	; (80081e4 <HAL_DMA_Abort+0x624>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d018      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a32      	ldr	r2, [pc, #200]	; (80081e8 <HAL_DMA_Abort+0x628>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a31      	ldr	r2, [pc, #196]	; (80081ec <HAL_DMA_Abort+0x62c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00e      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a2f      	ldr	r2, [pc, #188]	; (80081f0 <HAL_DMA_Abort+0x630>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d009      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a2e      	ldr	r2, [pc, #184]	; (80081f4 <HAL_DMA_Abort+0x634>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d004      	beq.n	800814a <HAL_DMA_Abort+0x58a>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a2c      	ldr	r2, [pc, #176]	; (80081f8 <HAL_DMA_Abort+0x638>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d101      	bne.n	800814e <HAL_DMA_Abort+0x58e>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <HAL_DMA_Abort+0x590>
 800814e:	2300      	movs	r3, #0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d015      	beq.n	8008180 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800815c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008174:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800817e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	40020010 	.word	0x40020010
 80081a0:	40020028 	.word	0x40020028
 80081a4:	40020040 	.word	0x40020040
 80081a8:	40020058 	.word	0x40020058
 80081ac:	40020070 	.word	0x40020070
 80081b0:	40020088 	.word	0x40020088
 80081b4:	400200a0 	.word	0x400200a0
 80081b8:	400200b8 	.word	0x400200b8
 80081bc:	40020410 	.word	0x40020410
 80081c0:	40020428 	.word	0x40020428
 80081c4:	40020440 	.word	0x40020440
 80081c8:	40020458 	.word	0x40020458
 80081cc:	40020470 	.word	0x40020470
 80081d0:	40020488 	.word	0x40020488
 80081d4:	400204a0 	.word	0x400204a0
 80081d8:	400204b8 	.word	0x400204b8
 80081dc:	58025408 	.word	0x58025408
 80081e0:	5802541c 	.word	0x5802541c
 80081e4:	58025430 	.word	0x58025430
 80081e8:	58025444 	.word	0x58025444
 80081ec:	58025458 	.word	0x58025458
 80081f0:	5802546c 	.word	0x5802546c
 80081f4:	58025480 	.word	0x58025480
 80081f8:	58025494 	.word	0x58025494

080081fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e237      	b.n	800867e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d004      	beq.n	8008224 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2280      	movs	r2, #128	; 0x80
 800821e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e22c      	b.n	800867e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a5c      	ldr	r2, [pc, #368]	; (800839c <HAL_DMA_Abort_IT+0x1a0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d04a      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a5b      	ldr	r2, [pc, #364]	; (80083a0 <HAL_DMA_Abort_IT+0x1a4>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d045      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a59      	ldr	r2, [pc, #356]	; (80083a4 <HAL_DMA_Abort_IT+0x1a8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d040      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a58      	ldr	r2, [pc, #352]	; (80083a8 <HAL_DMA_Abort_IT+0x1ac>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d03b      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a56      	ldr	r2, [pc, #344]	; (80083ac <HAL_DMA_Abort_IT+0x1b0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d036      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a55      	ldr	r2, [pc, #340]	; (80083b0 <HAL_DMA_Abort_IT+0x1b4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d031      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a53      	ldr	r2, [pc, #332]	; (80083b4 <HAL_DMA_Abort_IT+0x1b8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d02c      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a52      	ldr	r2, [pc, #328]	; (80083b8 <HAL_DMA_Abort_IT+0x1bc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d027      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a50      	ldr	r2, [pc, #320]	; (80083bc <HAL_DMA_Abort_IT+0x1c0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d022      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a4f      	ldr	r2, [pc, #316]	; (80083c0 <HAL_DMA_Abort_IT+0x1c4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d01d      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a4d      	ldr	r2, [pc, #308]	; (80083c4 <HAL_DMA_Abort_IT+0x1c8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d018      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a4c      	ldr	r2, [pc, #304]	; (80083c8 <HAL_DMA_Abort_IT+0x1cc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a4a      	ldr	r2, [pc, #296]	; (80083cc <HAL_DMA_Abort_IT+0x1d0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00e      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a49      	ldr	r2, [pc, #292]	; (80083d0 <HAL_DMA_Abort_IT+0x1d4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a47      	ldr	r2, [pc, #284]	; (80083d4 <HAL_DMA_Abort_IT+0x1d8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xc8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a46      	ldr	r2, [pc, #280]	; (80083d8 <HAL_DMA_Abort_IT+0x1dc>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d101      	bne.n	80082c8 <HAL_DMA_Abort_IT+0xcc>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <HAL_DMA_Abort_IT+0xce>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8086 	beq.w	80083dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2204      	movs	r2, #4
 80082d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a2f      	ldr	r2, [pc, #188]	; (800839c <HAL_DMA_Abort_IT+0x1a0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d04a      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a2e      	ldr	r2, [pc, #184]	; (80083a0 <HAL_DMA_Abort_IT+0x1a4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d045      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a2c      	ldr	r2, [pc, #176]	; (80083a4 <HAL_DMA_Abort_IT+0x1a8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d040      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a2b      	ldr	r2, [pc, #172]	; (80083a8 <HAL_DMA_Abort_IT+0x1ac>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d03b      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a29      	ldr	r2, [pc, #164]	; (80083ac <HAL_DMA_Abort_IT+0x1b0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d036      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a28      	ldr	r2, [pc, #160]	; (80083b0 <HAL_DMA_Abort_IT+0x1b4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d031      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a26      	ldr	r2, [pc, #152]	; (80083b4 <HAL_DMA_Abort_IT+0x1b8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d02c      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a25      	ldr	r2, [pc, #148]	; (80083b8 <HAL_DMA_Abort_IT+0x1bc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d027      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a23      	ldr	r2, [pc, #140]	; (80083bc <HAL_DMA_Abort_IT+0x1c0>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d022      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a22      	ldr	r2, [pc, #136]	; (80083c0 <HAL_DMA_Abort_IT+0x1c4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d01d      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a20      	ldr	r2, [pc, #128]	; (80083c4 <HAL_DMA_Abort_IT+0x1c8>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d018      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1f      	ldr	r2, [pc, #124]	; (80083c8 <HAL_DMA_Abort_IT+0x1cc>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d013      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1d      	ldr	r2, [pc, #116]	; (80083cc <HAL_DMA_Abort_IT+0x1d0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00e      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1c      	ldr	r2, [pc, #112]	; (80083d0 <HAL_DMA_Abort_IT+0x1d4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d009      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a1a      	ldr	r2, [pc, #104]	; (80083d4 <HAL_DMA_Abort_IT+0x1d8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <HAL_DMA_Abort_IT+0x17c>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a19      	ldr	r2, [pc, #100]	; (80083d8 <HAL_DMA_Abort_IT+0x1dc>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d108      	bne.n	800838a <HAL_DMA_Abort_IT+0x18e>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	e178      	b.n	800867c <HAL_DMA_Abort_IT+0x480>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	e16f      	b.n	800867c <HAL_DMA_Abort_IT+0x480>
 800839c:	40020010 	.word	0x40020010
 80083a0:	40020028 	.word	0x40020028
 80083a4:	40020040 	.word	0x40020040
 80083a8:	40020058 	.word	0x40020058
 80083ac:	40020070 	.word	0x40020070
 80083b0:	40020088 	.word	0x40020088
 80083b4:	400200a0 	.word	0x400200a0
 80083b8:	400200b8 	.word	0x400200b8
 80083bc:	40020410 	.word	0x40020410
 80083c0:	40020428 	.word	0x40020428
 80083c4:	40020440 	.word	0x40020440
 80083c8:	40020458 	.word	0x40020458
 80083cc:	40020470 	.word	0x40020470
 80083d0:	40020488 	.word	0x40020488
 80083d4:	400204a0 	.word	0x400204a0
 80083d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 020e 	bic.w	r2, r2, #14
 80083ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a6c      	ldr	r2, [pc, #432]	; (80085a4 <HAL_DMA_Abort_IT+0x3a8>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d04a      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a6b      	ldr	r2, [pc, #428]	; (80085a8 <HAL_DMA_Abort_IT+0x3ac>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d045      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a69      	ldr	r2, [pc, #420]	; (80085ac <HAL_DMA_Abort_IT+0x3b0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d040      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a68      	ldr	r2, [pc, #416]	; (80085b0 <HAL_DMA_Abort_IT+0x3b4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d03b      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a66      	ldr	r2, [pc, #408]	; (80085b4 <HAL_DMA_Abort_IT+0x3b8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d036      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a65      	ldr	r2, [pc, #404]	; (80085b8 <HAL_DMA_Abort_IT+0x3bc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d031      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a63      	ldr	r2, [pc, #396]	; (80085bc <HAL_DMA_Abort_IT+0x3c0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d02c      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a62      	ldr	r2, [pc, #392]	; (80085c0 <HAL_DMA_Abort_IT+0x3c4>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d027      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a60      	ldr	r2, [pc, #384]	; (80085c4 <HAL_DMA_Abort_IT+0x3c8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d022      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a5f      	ldr	r2, [pc, #380]	; (80085c8 <HAL_DMA_Abort_IT+0x3cc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d01d      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a5d      	ldr	r2, [pc, #372]	; (80085cc <HAL_DMA_Abort_IT+0x3d0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d018      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a5c      	ldr	r2, [pc, #368]	; (80085d0 <HAL_DMA_Abort_IT+0x3d4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d013      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a5a      	ldr	r2, [pc, #360]	; (80085d4 <HAL_DMA_Abort_IT+0x3d8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00e      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a59      	ldr	r2, [pc, #356]	; (80085d8 <HAL_DMA_Abort_IT+0x3dc>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d009      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a57      	ldr	r2, [pc, #348]	; (80085dc <HAL_DMA_Abort_IT+0x3e0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d004      	beq.n	800848c <HAL_DMA_Abort_IT+0x290>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a56      	ldr	r2, [pc, #344]	; (80085e0 <HAL_DMA_Abort_IT+0x3e4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d108      	bne.n	800849e <HAL_DMA_Abort_IT+0x2a2>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e007      	b.n	80084ae <HAL_DMA_Abort_IT+0x2b2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a3c      	ldr	r2, [pc, #240]	; (80085a4 <HAL_DMA_Abort_IT+0x3a8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d072      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a3a      	ldr	r2, [pc, #232]	; (80085a8 <HAL_DMA_Abort_IT+0x3ac>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d06d      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a39      	ldr	r2, [pc, #228]	; (80085ac <HAL_DMA_Abort_IT+0x3b0>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d068      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a37      	ldr	r2, [pc, #220]	; (80085b0 <HAL_DMA_Abort_IT+0x3b4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d063      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a36      	ldr	r2, [pc, #216]	; (80085b4 <HAL_DMA_Abort_IT+0x3b8>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d05e      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a34      	ldr	r2, [pc, #208]	; (80085b8 <HAL_DMA_Abort_IT+0x3bc>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d059      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a33      	ldr	r2, [pc, #204]	; (80085bc <HAL_DMA_Abort_IT+0x3c0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d054      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a31      	ldr	r2, [pc, #196]	; (80085c0 <HAL_DMA_Abort_IT+0x3c4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d04f      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a30      	ldr	r2, [pc, #192]	; (80085c4 <HAL_DMA_Abort_IT+0x3c8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d04a      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a2e      	ldr	r2, [pc, #184]	; (80085c8 <HAL_DMA_Abort_IT+0x3cc>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d045      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a2d      	ldr	r2, [pc, #180]	; (80085cc <HAL_DMA_Abort_IT+0x3d0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d040      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a2b      	ldr	r2, [pc, #172]	; (80085d0 <HAL_DMA_Abort_IT+0x3d4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d03b      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a2a      	ldr	r2, [pc, #168]	; (80085d4 <HAL_DMA_Abort_IT+0x3d8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d036      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a28      	ldr	r2, [pc, #160]	; (80085d8 <HAL_DMA_Abort_IT+0x3dc>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d031      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a27      	ldr	r2, [pc, #156]	; (80085dc <HAL_DMA_Abort_IT+0x3e0>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d02c      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a25      	ldr	r2, [pc, #148]	; (80085e0 <HAL_DMA_Abort_IT+0x3e4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d027      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a24      	ldr	r2, [pc, #144]	; (80085e4 <HAL_DMA_Abort_IT+0x3e8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d022      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a22      	ldr	r2, [pc, #136]	; (80085e8 <HAL_DMA_Abort_IT+0x3ec>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d01d      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a21      	ldr	r2, [pc, #132]	; (80085ec <HAL_DMA_Abort_IT+0x3f0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d018      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <HAL_DMA_Abort_IT+0x3f4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1e      	ldr	r2, [pc, #120]	; (80085f4 <HAL_DMA_Abort_IT+0x3f8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00e      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1c      	ldr	r2, [pc, #112]	; (80085f8 <HAL_DMA_Abort_IT+0x3fc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d009      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1b      	ldr	r2, [pc, #108]	; (80085fc <HAL_DMA_Abort_IT+0x400>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d004      	beq.n	800859e <HAL_DMA_Abort_IT+0x3a2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a19      	ldr	r2, [pc, #100]	; (8008600 <HAL_DMA_Abort_IT+0x404>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d132      	bne.n	8008604 <HAL_DMA_Abort_IT+0x408>
 800859e:	2301      	movs	r3, #1
 80085a0:	e031      	b.n	8008606 <HAL_DMA_Abort_IT+0x40a>
 80085a2:	bf00      	nop
 80085a4:	40020010 	.word	0x40020010
 80085a8:	40020028 	.word	0x40020028
 80085ac:	40020040 	.word	0x40020040
 80085b0:	40020058 	.word	0x40020058
 80085b4:	40020070 	.word	0x40020070
 80085b8:	40020088 	.word	0x40020088
 80085bc:	400200a0 	.word	0x400200a0
 80085c0:	400200b8 	.word	0x400200b8
 80085c4:	40020410 	.word	0x40020410
 80085c8:	40020428 	.word	0x40020428
 80085cc:	40020440 	.word	0x40020440
 80085d0:	40020458 	.word	0x40020458
 80085d4:	40020470 	.word	0x40020470
 80085d8:	40020488 	.word	0x40020488
 80085dc:	400204a0 	.word	0x400204a0
 80085e0:	400204b8 	.word	0x400204b8
 80085e4:	58025408 	.word	0x58025408
 80085e8:	5802541c 	.word	0x5802541c
 80085ec:	58025430 	.word	0x58025430
 80085f0:	58025444 	.word	0x58025444
 80085f4:	58025458 	.word	0x58025458
 80085f8:	5802546c 	.word	0x5802546c
 80085fc:	58025480 	.word	0x58025480
 8008600:	58025494 	.word	0x58025494
 8008604:	2300      	movs	r3, #0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d028      	beq.n	800865c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008618:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800861e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008624:	f003 031f 	and.w	r3, r3, #31
 8008628:	2201      	movs	r2, #1
 800862a:	409a      	lsls	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008638:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800864c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008650:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800865a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	2b00      	cmp	r3, #0
 8008672:	d003      	beq.n	800867c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop

08008688 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b098      	sub	sp, #96	; 0x60
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008690:	4a84      	ldr	r2, [pc, #528]	; (80088a4 <HAL_FDCAN_Init+0x21c>)
 8008692:	f107 030c 	add.w	r3, r7, #12
 8008696:	4611      	mov	r1, r2
 8008698:	224c      	movs	r2, #76	; 0x4c
 800869a:	4618      	mov	r0, r3
 800869c:	f007 f81c 	bl	800f6d8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e1c6      	b.n	8008a38 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a7e      	ldr	r2, [pc, #504]	; (80088a8 <HAL_FDCAN_Init+0x220>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d106      	bne.n	80086c2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80086bc:	461a      	mov	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fe fd80 	bl	80071dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0210 	bic.w	r2, r2, #16
 80086ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086ec:	f7ff f94c 	bl	8007988 <HAL_GetTick>
 80086f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80086f2:	e014      	b.n	800871e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80086f4:	f7ff f948 	bl	8007988 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b0a      	cmp	r3, #10
 8008700:	d90d      	bls.n	800871e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008708:	f043 0201 	orr.w	r2, r3, #1
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2203      	movs	r2, #3
 8008716:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e18c      	b.n	8008a38 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b08      	cmp	r3, #8
 800872a:	d0e3      	beq.n	80086f4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0201 	orr.w	r2, r2, #1
 800873a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800873c:	f7ff f924 	bl	8007988 <HAL_GetTick>
 8008740:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008742:	e014      	b.n	800876e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008744:	f7ff f920 	bl	8007988 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b0a      	cmp	r3, #10
 8008750:	d90d      	bls.n	800876e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008758:	f043 0201 	orr.w	r2, r3, #1
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2203      	movs	r2, #3
 8008766:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e164      	b.n	8008a38 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0e3      	beq.n	8008744 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	699a      	ldr	r2, [r3, #24]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0202 	orr.w	r2, r2, #2
 800878a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7c1b      	ldrb	r3, [r3, #16]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d108      	bne.n	80087a6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087a2:	619a      	str	r2, [r3, #24]
 80087a4:	e007      	b.n	80087b6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7c5b      	ldrb	r3, [r3, #17]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d108      	bne.n	80087d0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	699a      	ldr	r2, [r3, #24]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087cc:	619a      	str	r2, [r3, #24]
 80087ce:	e007      	b.n	80087e0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087de:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7c9b      	ldrb	r3, [r3, #18]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d108      	bne.n	80087fa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087f6:	619a      	str	r2, [r3, #24]
 80087f8:	e007      	b.n	800880a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008808:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800882e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691a      	ldr	r2, [r3, #16]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0210 	bic.w	r2, r2, #16
 800883e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d108      	bne.n	800885a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0204 	orr.w	r2, r2, #4
 8008856:	619a      	str	r2, [r3, #24]
 8008858:	e030      	b.n	80088bc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d02c      	beq.n	80088bc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d020      	beq.n	80088ac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	699a      	ldr	r2, [r3, #24]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008878:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0210 	orr.w	r2, r2, #16
 8008888:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	2b03      	cmp	r3, #3
 8008890:	d114      	bne.n	80088bc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	699a      	ldr	r2, [r3, #24]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0220 	orr.w	r2, r2, #32
 80088a0:	619a      	str	r2, [r3, #24]
 80088a2:	e00b      	b.n	80088bc <HAL_FDCAN_Init+0x234>
 80088a4:	08010e7c 	.word	0x08010e7c
 80088a8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0220 	orr.w	r2, r2, #32
 80088ba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80088cc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80088d4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	3b01      	subs	r3, #1
 80088de:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80088e4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80088e6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088f0:	d115      	bne.n	800891e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	3b01      	subs	r3, #1
 80088fe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008900:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	3b01      	subs	r3, #1
 8008908:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800890a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	3b01      	subs	r3, #1
 8008914:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800891a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800891c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008944:	4413      	add	r3, r2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d011      	beq.n	800896e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008952:	f023 0107 	bic.w	r1, r3, #7
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	3360      	adds	r3, #96	; 0x60
 800895e:	443b      	add	r3, r7
 8008960:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	2b00      	cmp	r3, #0
 8008974:	d011      	beq.n	800899a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800897e:	f023 0107 	bic.w	r1, r3, #7
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	3360      	adds	r3, #96	; 0x60
 800898a:	443b      	add	r3, r7
 800898c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d012      	beq.n	80089c8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089aa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	3360      	adds	r3, #96	; 0x60
 80089b6:	443b      	add	r3, r7
 80089b8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80089bc:	011a      	lsls	r2, r3, #4
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d012      	beq.n	80089f6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089d8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	3360      	adds	r3, #96	; 0x60
 80089e4:	443b      	add	r3, r7
 80089e6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80089ea:	021a      	lsls	r2, r3, #8
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a11      	ldr	r2, [pc, #68]	; (8008a40 <HAL_FDCAN_Init+0x3b8>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d107      	bne.n	8008a10 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f022 0203 	bic.w	r2, r2, #3
 8008a0e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fb1f 	bl	800906c <FDCAN_CalcultateRamBlockAddresses>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008a34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3760      	adds	r7, #96	; 0x60
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	4000a000 	.word	0x4000a000

08008a44 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b096      	sub	sp, #88	; 0x58
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8008a4c:	4b9a      	ldr	r3, [pc, #616]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	079b      	lsls	r3, r3, #30
 8008a52:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8008a54:	4b98      	ldr	r3, [pc, #608]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	079b      	lsls	r3, r3, #30
 8008a5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a66:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008a6a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a74:	4013      	ands	r3, r2
 8008a76:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aae:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8008ab2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008abc:	4013      	ands	r3, r2
 8008abe:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8008aca:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d010      	beq.n	8008b16 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	0a1b      	lsrs	r3, r3, #8
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b08:	651a      	str	r2, [r3, #80]	; 0x50
 8008b0a:	4b6b      	ldr	r3, [pc, #428]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa5f 	bl	8008fd4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b18:	0a9b      	lsrs	r3, r3, #10
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01d      	beq.n	8008b5e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	0a9b      	lsrs	r3, r3, #10
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d017      	beq.n	8008b5e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008b36:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b42:	4013      	ands	r3, r2
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b4e:	651a      	str	r2, [r3, #80]	; 0x50
 8008b50:	4b59      	ldr	r3, [pc, #356]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008b56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fa12 	bl	8008f82 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8008b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00d      	beq.n	8008b80 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b6a:	4b54      	ldr	r3, [pc, #336]	; (8008cbc <HAL_FDCAN_IRQHandler+0x278>)
 8008b6c:	400b      	ands	r3, r1
 8008b6e:	6513      	str	r3, [r2, #80]	; 0x50
 8008b70:	4a51      	ldr	r2, [pc, #324]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b74:	0f9b      	lsrs	r3, r3, #30
 8008b76:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8008b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f9c0 	bl	8008f00 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00d      	beq.n	8008ba2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b8c:	4b4b      	ldr	r3, [pc, #300]	; (8008cbc <HAL_FDCAN_IRQHandler+0x278>)
 8008b8e:	400b      	ands	r3, r1
 8008b90:	6513      	str	r3, [r2, #80]	; 0x50
 8008b92:	4a49      	ldr	r2, [pc, #292]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b96:	0f9b      	lsrs	r3, r3, #30
 8008b98:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008b9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f9ba 	bl	8008f16 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00d      	beq.n	8008bc4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008bae:	4b43      	ldr	r3, [pc, #268]	; (8008cbc <HAL_FDCAN_IRQHandler+0x278>)
 8008bb0:	400b      	ands	r3, r1
 8008bb2:	6513      	str	r3, [r2, #80]	; 0x50
 8008bb4:	4a40      	ldr	r2, [pc, #256]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb8:	0f9b      	lsrs	r3, r3, #30
 8008bba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008bbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9b4 	bl	8008f2c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00d      	beq.n	8008be6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008bd0:	4b3a      	ldr	r3, [pc, #232]	; (8008cbc <HAL_FDCAN_IRQHandler+0x278>)
 8008bd2:	400b      	ands	r3, r1
 8008bd4:	6513      	str	r3, [r2, #80]	; 0x50
 8008bd6:	4a38      	ldr	r2, [pc, #224]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bda:	0f9b      	lsrs	r3, r3, #30
 8008bdc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008bde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f9ae 	bl	8008f42 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	0adb      	lsrs	r3, r3, #11
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d010      	beq.n	8008c14 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	0adb      	lsrs	r3, r3, #11
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c06:	651a      	str	r2, [r3, #80]	; 0x50
 8008c08:	4b2b      	ldr	r3, [pc, #172]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f9a2 	bl	8008f58 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8008c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c16:	0a5b      	lsrs	r3, r3, #9
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01d      	beq.n	8008c5c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	0a5b      	lsrs	r3, r3, #9
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d017      	beq.n	8008c5c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008c34:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c40:	4013      	ands	r3, r2
 8008c42:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c4c:	651a      	str	r2, [r3, #80]	; 0x50
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008c54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f988 	bl	8008f6c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5e:	0cdb      	lsrs	r3, r3, #19
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d010      	beq.n	8008c8a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	0cdb      	lsrs	r3, r3, #19
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00a      	beq.n	8008c8a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008c7c:	651a      	str	r2, [r3, #80]	; 0x50
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f987 	bl	8008f98 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d016      	beq.n	8008cc4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c98:	0c1b      	lsrs	r3, r3, #16
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d010      	beq.n	8008cc4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008caa:	651a      	str	r2, [r3, #80]	; 0x50
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <HAL_FDCAN_IRQHandler+0x274>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	e004      	b.n	8008cc0 <HAL_FDCAN_IRQHandler+0x27c>
 8008cb6:	bf00      	nop
 8008cb8:	4000a800 	.word	0x4000a800
 8008cbc:	3fcfffff 	.word	0x3fcfffff
 8008cc0:	f000 f974 	bl	8008fac <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc6:	0c9b      	lsrs	r3, r3, #18
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d010      	beq.n	8008cf2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	0c9b      	lsrs	r3, r3, #18
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008ce4:	651a      	str	r2, [r3, #80]	; 0x50
 8008ce6:	4b83      	ldr	r3, [pc, #524]	; (8008ef4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f967 	bl	8008fc0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf4:	0c5b      	lsrs	r3, r3, #17
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d015      	beq.n	8008d2a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	0c5b      	lsrs	r3, r3, #17
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00f      	beq.n	8008d2a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d12:	651a      	str	r2, [r3, #80]	; 0x50
 8008d14:	4b77      	ldr	r3, [pc, #476]	; (8008ef4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00d      	beq.n	8008d4c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d36:	4b70      	ldr	r3, [pc, #448]	; (8008ef8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008d38:	400b      	ands	r3, r1
 8008d3a:	6513      	str	r3, [r2, #80]	; 0x50
 8008d3c:	4a6d      	ldr	r2, [pc, #436]	; (8008ef4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d40:	0f9b      	lsrs	r3, r3, #30
 8008d42:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f958 	bl	8008ffc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d011      	beq.n	8008d76 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d58:	4b67      	ldr	r3, [pc, #412]	; (8008ef8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008d5a:	400b      	ands	r3, r1
 8008d5c:	6513      	str	r3, [r2, #80]	; 0x50
 8008d5e:	4a65      	ldr	r2, [pc, #404]	; (8008ef4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d62:	0f9b      	lsrs	r3, r3, #30
 8008d64:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a60      	ldr	r2, [pc, #384]	; (8008efc <HAL_FDCAN_IRQHandler+0x4b8>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	f040 80ac 	bne.w	8008eda <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f003 0303 	and.w	r3, r3, #3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80a4 	beq.w	8008eda <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da6:	4013      	ands	r3, r2
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008db4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8008de4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	4013      	ands	r3, r2
 8008df0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8008dfc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	4013      	ands	r3, r2
 8008e08:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d007      	beq.n	8008e30 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e26:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8008e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f8f1 	bl	8009012 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e3c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8008e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f8f1 	bl	8009028 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	099b      	lsrs	r3, r3, #6
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d01a      	beq.n	8008e88 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	099b      	lsrs	r3, r3, #6
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d014      	beq.n	8008e88 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e64:	0c1b      	lsrs	r3, r3, #16
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e74:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2240      	movs	r2, #64	; 0x40
 8008e7c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	6939      	ldr	r1, [r7, #16]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f8db 	bl	800903e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d007      	beq.n	8008e9e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e94:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f8dc 	bl	8009056 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00b      	beq.n	8008ebc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	6a3a      	ldr	r2, [r7, #32]
 8008eaa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f87f 	bl	8008fe8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008eea:	bf00      	nop
 8008eec:	3758      	adds	r7, #88	; 0x58
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	4000a800 	.word	0x4000a800
 8008ef8:	3fcfffff 	.word	0x3fcfffff
 8008efc:	4000a000 	.word	0x4000a000

08008f00 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800903e:	b480      	push	{r7}
 8009040:	b085      	sub	sp, #20
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009078:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009082:	4ba7      	ldr	r3, [pc, #668]	; (8009320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009084:	4013      	ands	r3, r2
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	0091      	lsls	r1, r2, #2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6812      	ldr	r2, [r2, #0]
 800908e:	430b      	orrs	r3, r1
 8009090:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800909c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	041a      	lsls	r2, r3, #16
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	4413      	add	r3, r2
 80090b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80090c2:	4b97      	ldr	r3, [pc, #604]	; (8009320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80090c4:	4013      	ands	r3, r2
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	0091      	lsls	r1, r2, #2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6812      	ldr	r2, [r2, #0]
 80090ce:	430b      	orrs	r3, r1
 80090d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090dc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e4:	041a      	lsls	r2, r3, #16
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	4413      	add	r3, r2
 80090fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009104:	4b86      	ldr	r3, [pc, #536]	; (8009320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009106:	4013      	ands	r3, r2
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	0091      	lsls	r1, r2, #2
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6812      	ldr	r2, [r2, #0]
 8009110:	430b      	orrs	r3, r1
 8009112:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800911e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	041a      	lsls	r2, r3, #16
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800913a:	fb02 f303 	mul.w	r3, r2, r3
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4413      	add	r3, r2
 8009142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800914c:	4b74      	ldr	r3, [pc, #464]	; (8009320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800914e:	4013      	ands	r3, r2
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	0091      	lsls	r1, r2, #2
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6812      	ldr	r2, [r2, #0]
 8009158:	430b      	orrs	r3, r1
 800915a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009166:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916e:	041a      	lsls	r2, r3, #16
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	430a      	orrs	r2, r1
 8009176:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009182:	fb02 f303 	mul.w	r3, r2, r3
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	4413      	add	r3, r2
 800918a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009194:	4b62      	ldr	r3, [pc, #392]	; (8009320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009196:	4013      	ands	r3, r2
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	0091      	lsls	r1, r2, #2
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6812      	ldr	r2, [r2, #0]
 80091a0:	430b      	orrs	r3, r1
 80091a2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80091ae:	fb02 f303 	mul.w	r3, r2, r3
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	4413      	add	r3, r2
 80091b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80091c0:	4b57      	ldr	r3, [pc, #348]	; (8009320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	0091      	lsls	r1, r2, #2
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	430b      	orrs	r3, r1
 80091ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091da:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e2:	041a      	lsls	r2, r3, #16
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	4413      	add	r3, r2
 80091f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8009202:	4b47      	ldr	r3, [pc, #284]	; (8009320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009204:	4013      	ands	r3, r2
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	0091      	lsls	r1, r2, #2
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6812      	ldr	r2, [r2, #0]
 800920e:	430b      	orrs	r3, r1
 8009210:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800921c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009224:	041a      	lsls	r2, r3, #16
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009238:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009240:	061a      	lsls	r2, r3, #24
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009250:	4b34      	ldr	r3, [pc, #208]	; (8009324 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009252:	4413      	add	r3, r2
 8009254:	009a      	lsls	r2, r3, #2
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	441a      	add	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	441a      	add	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8009286:	fb01 f303 	mul.w	r3, r1, r3
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	441a      	add	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800929e:	fb01 f303 	mul.w	r3, r1, r3
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	441a      	add	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80092b6:	fb01 f303 	mul.w	r3, r1, r3
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	441a      	add	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	441a      	add	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80092e6:	fb01 f303 	mul.w	r3, r1, r3
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	441a      	add	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	441a      	add	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009316:	4a04      	ldr	r2, [pc, #16]	; (8009328 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d915      	bls.n	8009348 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800931c:	e006      	b.n	800932c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800931e:	bf00      	nop
 8009320:	ffff0003 	.word	0xffff0003
 8009324:	10002b00 	.word	0x10002b00
 8009328:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009332:	f043 0220 	orr.w	r2, r3, #32
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2203      	movs	r2, #3
 8009340:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e010      	b.n	800936a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	e005      	b.n	800935c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3304      	adds	r3, #4
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	429a      	cmp	r2, r3
 8009366:	d3f3      	bcc.n	8009350 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop

08009378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009378:	b480      	push	{r7}
 800937a:	b089      	sub	sp, #36	; 0x24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009382:	2300      	movs	r3, #0
 8009384:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009386:	4b89      	ldr	r3, [pc, #548]	; (80095ac <HAL_GPIO_Init+0x234>)
 8009388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800938a:	e194      	b.n	80096b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	2101      	movs	r1, #1
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	fa01 f303 	lsl.w	r3, r1, r3
 8009398:	4013      	ands	r3, r2
 800939a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 8186 	beq.w	80096b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d005      	beq.n	80093bc <HAL_GPIO_Init+0x44>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d130      	bne.n	800941e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	2203      	movs	r2, #3
 80093c8:	fa02 f303 	lsl.w	r3, r2, r3
 80093cc:	43db      	mvns	r3, r3
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	4013      	ands	r3, r2
 80093d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80093f2:	2201      	movs	r2, #1
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	fa02 f303 	lsl.w	r3, r2, r3
 80093fa:	43db      	mvns	r3, r3
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	4013      	ands	r3, r2
 8009400:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	091b      	lsrs	r3, r3, #4
 8009408:	f003 0201 	and.w	r2, r3, #1
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	fa02 f303 	lsl.w	r3, r2, r3
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	4313      	orrs	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	2b03      	cmp	r3, #3
 8009428:	d017      	beq.n	800945a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	005b      	lsls	r3, r3, #1
 8009434:	2203      	movs	r2, #3
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
 800943a:	43db      	mvns	r3, r3
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	4013      	ands	r3, r2
 8009440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	fa02 f303 	lsl.w	r3, r2, r3
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	4313      	orrs	r3, r2
 8009452:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d123      	bne.n	80094ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	08da      	lsrs	r2, r3, #3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3208      	adds	r2, #8
 800946e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	220f      	movs	r2, #15
 800947e:	fa02 f303 	lsl.w	r3, r2, r3
 8009482:	43db      	mvns	r3, r3
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	4013      	ands	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	691a      	ldr	r2, [r3, #16]
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	fa02 f303 	lsl.w	r3, r2, r3
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	4313      	orrs	r3, r2
 800949e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	08da      	lsrs	r2, r3, #3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3208      	adds	r2, #8
 80094a8:	69b9      	ldr	r1, [r7, #24]
 80094aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	2203      	movs	r2, #3
 80094ba:	fa02 f303 	lsl.w	r3, r2, r3
 80094be:	43db      	mvns	r3, r3
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	4013      	ands	r3, r2
 80094c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f003 0203 	and.w	r2, r3, #3
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	fa02 f303 	lsl.w	r3, r2, r3
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	4313      	orrs	r3, r2
 80094da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 80e0 	beq.w	80096b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094f0:	4b2f      	ldr	r3, [pc, #188]	; (80095b0 <HAL_GPIO_Init+0x238>)
 80094f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80094f6:	4a2e      	ldr	r2, [pc, #184]	; (80095b0 <HAL_GPIO_Init+0x238>)
 80094f8:	f043 0302 	orr.w	r3, r3, #2
 80094fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009500:	4b2b      	ldr	r3, [pc, #172]	; (80095b0 <HAL_GPIO_Init+0x238>)
 8009502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800950e:	4a29      	ldr	r2, [pc, #164]	; (80095b4 <HAL_GPIO_Init+0x23c>)
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	089b      	lsrs	r3, r3, #2
 8009514:	3302      	adds	r3, #2
 8009516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800951a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	220f      	movs	r2, #15
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	43db      	mvns	r3, r3
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	4013      	ands	r3, r2
 8009530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a20      	ldr	r2, [pc, #128]	; (80095b8 <HAL_GPIO_Init+0x240>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d052      	beq.n	80095e0 <HAL_GPIO_Init+0x268>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a1f      	ldr	r2, [pc, #124]	; (80095bc <HAL_GPIO_Init+0x244>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d031      	beq.n	80095a6 <HAL_GPIO_Init+0x22e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a1e      	ldr	r2, [pc, #120]	; (80095c0 <HAL_GPIO_Init+0x248>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d02b      	beq.n	80095a2 <HAL_GPIO_Init+0x22a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a1d      	ldr	r2, [pc, #116]	; (80095c4 <HAL_GPIO_Init+0x24c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d025      	beq.n	800959e <HAL_GPIO_Init+0x226>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a1c      	ldr	r2, [pc, #112]	; (80095c8 <HAL_GPIO_Init+0x250>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d01f      	beq.n	800959a <HAL_GPIO_Init+0x222>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a1b      	ldr	r2, [pc, #108]	; (80095cc <HAL_GPIO_Init+0x254>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d019      	beq.n	8009596 <HAL_GPIO_Init+0x21e>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1a      	ldr	r2, [pc, #104]	; (80095d0 <HAL_GPIO_Init+0x258>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d013      	beq.n	8009592 <HAL_GPIO_Init+0x21a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a19      	ldr	r2, [pc, #100]	; (80095d4 <HAL_GPIO_Init+0x25c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d00d      	beq.n	800958e <HAL_GPIO_Init+0x216>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a18      	ldr	r2, [pc, #96]	; (80095d8 <HAL_GPIO_Init+0x260>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d007      	beq.n	800958a <HAL_GPIO_Init+0x212>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a17      	ldr	r2, [pc, #92]	; (80095dc <HAL_GPIO_Init+0x264>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d101      	bne.n	8009586 <HAL_GPIO_Init+0x20e>
 8009582:	2309      	movs	r3, #9
 8009584:	e02d      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 8009586:	230a      	movs	r3, #10
 8009588:	e02b      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 800958a:	2308      	movs	r3, #8
 800958c:	e029      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 800958e:	2307      	movs	r3, #7
 8009590:	e027      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 8009592:	2306      	movs	r3, #6
 8009594:	e025      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 8009596:	2305      	movs	r3, #5
 8009598:	e023      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 800959a:	2304      	movs	r3, #4
 800959c:	e021      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 800959e:	2303      	movs	r3, #3
 80095a0:	e01f      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e01d      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 80095a6:	2301      	movs	r3, #1
 80095a8:	e01b      	b.n	80095e2 <HAL_GPIO_Init+0x26a>
 80095aa:	bf00      	nop
 80095ac:	58000080 	.word	0x58000080
 80095b0:	58024400 	.word	0x58024400
 80095b4:	58000400 	.word	0x58000400
 80095b8:	58020000 	.word	0x58020000
 80095bc:	58020400 	.word	0x58020400
 80095c0:	58020800 	.word	0x58020800
 80095c4:	58020c00 	.word	0x58020c00
 80095c8:	58021000 	.word	0x58021000
 80095cc:	58021400 	.word	0x58021400
 80095d0:	58021800 	.word	0x58021800
 80095d4:	58021c00 	.word	0x58021c00
 80095d8:	58022000 	.word	0x58022000
 80095dc:	58022400 	.word	0x58022400
 80095e0:	2300      	movs	r3, #0
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	f002 0203 	and.w	r2, r2, #3
 80095e8:	0092      	lsls	r2, r2, #2
 80095ea:	4093      	lsls	r3, r2
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095f2:	4938      	ldr	r1, [pc, #224]	; (80096d4 <HAL_GPIO_Init+0x35c>)
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	089b      	lsrs	r3, r3, #2
 80095f8:	3302      	adds	r3, #2
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	43db      	mvns	r3, r3
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	4013      	ands	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800962e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	43db      	mvns	r3, r3
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	4013      	ands	r3, r2
 800963e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	43db      	mvns	r3, r3
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	4013      	ands	r3, r2
 800966a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	4313      	orrs	r3, r2
 800967e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	43db      	mvns	r3, r3
 8009690:	69ba      	ldr	r2, [r7, #24]
 8009692:	4013      	ands	r3, r2
 8009694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	3301      	adds	r3, #1
 80096b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	fa22 f303 	lsr.w	r3, r2, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f47f ae63 	bne.w	800938c <HAL_GPIO_Init+0x14>
  }
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	3724      	adds	r7, #36	; 0x24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	58000400 	.word	0x58000400

080096d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	807b      	strh	r3, [r7, #2]
 80096e4:	4613      	mov	r3, r2
 80096e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80096e8:	787b      	ldrb	r3, [r7, #1]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096ee:	887a      	ldrh	r2, [r7, #2]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80096f4:	e003      	b.n	80096fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80096f6:	887b      	ldrh	r3, [r7, #2]
 80096f8:	041a      	lsls	r2, r3, #16
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	619a      	str	r2, [r3, #24]
}
 80096fe:	bf00      	nop
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800970a:	b480      	push	{r7}
 800970c:	b085      	sub	sp, #20
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	460b      	mov	r3, r1
 8009714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800971c:	887a      	ldrh	r2, [r7, #2]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4013      	ands	r3, r2
 8009722:	041a      	lsls	r2, r3, #16
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	43d9      	mvns	r1, r3
 8009728:	887b      	ldrh	r3, [r7, #2]
 800972a:	400b      	ands	r3, r1
 800972c:	431a      	orrs	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	619a      	str	r2, [r3, #24]
}
 8009732:	bf00      	nop
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800973e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009740:	b08f      	sub	sp, #60	; 0x3c
 8009742:	af0a      	add	r7, sp, #40	; 0x28
 8009744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e054      	b.n	80097fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7fd fe4a 	bl	8007404 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2203      	movs	r2, #3
 8009774:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4618      	mov	r0, r3
 8009790:	f005 fdb0 	bl	800f2f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	603b      	str	r3, [r7, #0]
 800979a:	687e      	ldr	r6, [r7, #4]
 800979c:	466d      	mov	r5, sp
 800979e:	f106 0410 	add.w	r4, r6, #16
 80097a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80097b2:	1d33      	adds	r3, r6, #4
 80097b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097b6:	6838      	ldr	r0, [r7, #0]
 80097b8:	f005 fd2e 	bl	800f218 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2101      	movs	r1, #1
 80097c2:	4618      	mov	r0, r3
 80097c4:	f005 fda7 	bl	800f316 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	603b      	str	r3, [r7, #0]
 80097ce:	687e      	ldr	r6, [r7, #4]
 80097d0:	466d      	mov	r5, sp
 80097d2:	f106 0410 	add.w	r4, r6, #16
 80097d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80097e6:	1d33      	adds	r3, r6, #4
 80097e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097ea:	6838      	ldr	r0, [r7, #0]
 80097ec:	f005 fe86 	bl	800f4fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009804 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800980c:	4b19      	ldr	r3, [pc, #100]	; (8009874 <HAL_PWREx_ConfigSupply+0x70>)
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b04      	cmp	r3, #4
 8009816:	d00a      	beq.n	800982e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009818:	4b16      	ldr	r3, [pc, #88]	; (8009874 <HAL_PWREx_ConfigSupply+0x70>)
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	429a      	cmp	r2, r3
 8009824:	d001      	beq.n	800982a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e01f      	b.n	800986a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	e01d      	b.n	800986a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <HAL_PWREx_ConfigSupply+0x70>)
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f023 0207 	bic.w	r2, r3, #7
 8009836:	490f      	ldr	r1, [pc, #60]	; (8009874 <HAL_PWREx_ConfigSupply+0x70>)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4313      	orrs	r3, r2
 800983c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800983e:	f7fe f8a3 	bl	8007988 <HAL_GetTick>
 8009842:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009844:	e009      	b.n	800985a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009846:	f7fe f89f 	bl	8007988 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009854:	d901      	bls.n	800985a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e007      	b.n	800986a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800985a:	4b06      	ldr	r3, [pc, #24]	; (8009874 <HAL_PWREx_ConfigSupply+0x70>)
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009866:	d1ee      	bne.n	8009846 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	58024800 	.word	0x58024800

08009878 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	4a04      	ldr	r2, [pc, #16]	; (8009894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009886:	60d3      	str	r3, [r2, #12]
}
 8009888:	bf00      	nop
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	58024800 	.word	0x58024800

08009898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08c      	sub	sp, #48	; 0x30
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d102      	bne.n	80098ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	f000 bc1d 	b.w	800a0e6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 8087 	beq.w	80099c8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098ba:	4b99      	ldr	r3, [pc, #612]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098c4:	4b96      	ldr	r3, [pc, #600]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 80098c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098cc:	2b10      	cmp	r3, #16
 80098ce:	d007      	beq.n	80098e0 <HAL_RCC_OscConfig+0x48>
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	2b18      	cmp	r3, #24
 80098d4:	d110      	bne.n	80098f8 <HAL_RCC_OscConfig+0x60>
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	f003 0303 	and.w	r3, r3, #3
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d10b      	bne.n	80098f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098e0:	4b8f      	ldr	r3, [pc, #572]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d06c      	beq.n	80099c6 <HAL_RCC_OscConfig+0x12e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d168      	bne.n	80099c6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e3f6      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009900:	d106      	bne.n	8009910 <HAL_RCC_OscConfig+0x78>
 8009902:	4b87      	ldr	r3, [pc, #540]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a86      	ldr	r2, [pc, #536]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800990c:	6013      	str	r3, [r2, #0]
 800990e:	e02e      	b.n	800996e <HAL_RCC_OscConfig+0xd6>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10c      	bne.n	8009932 <HAL_RCC_OscConfig+0x9a>
 8009918:	4b81      	ldr	r3, [pc, #516]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a80      	ldr	r2, [pc, #512]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 800991e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	4b7e      	ldr	r3, [pc, #504]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a7d      	ldr	r2, [pc, #500]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 800992a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	e01d      	b.n	800996e <HAL_RCC_OscConfig+0xd6>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800993a:	d10c      	bne.n	8009956 <HAL_RCC_OscConfig+0xbe>
 800993c:	4b78      	ldr	r3, [pc, #480]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a77      	ldr	r2, [pc, #476]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	4b75      	ldr	r3, [pc, #468]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a74      	ldr	r2, [pc, #464]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 800994e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	e00b      	b.n	800996e <HAL_RCC_OscConfig+0xd6>
 8009956:	4b72      	ldr	r3, [pc, #456]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a71      	ldr	r2, [pc, #452]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 800995c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	4b6f      	ldr	r3, [pc, #444]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a6e      	ldr	r2, [pc, #440]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800996c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d013      	beq.n	800999e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009976:	f7fe f807 	bl	8007988 <HAL_GetTick>
 800997a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800997c:	e008      	b.n	8009990 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800997e:	f7fe f803 	bl	8007988 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b64      	cmp	r3, #100	; 0x64
 800998a:	d901      	bls.n	8009990 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e3aa      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009990:	4b63      	ldr	r3, [pc, #396]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0f0      	beq.n	800997e <HAL_RCC_OscConfig+0xe6>
 800999c:	e014      	b.n	80099c8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999e:	f7fd fff3 	bl	8007988 <HAL_GetTick>
 80099a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099a4:	e008      	b.n	80099b8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099a6:	f7fd ffef 	bl	8007988 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b64      	cmp	r3, #100	; 0x64
 80099b2:	d901      	bls.n	80099b8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e396      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099b8:	4b59      	ldr	r3, [pc, #356]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f0      	bne.n	80099a6 <HAL_RCC_OscConfig+0x10e>
 80099c4:	e000      	b.n	80099c8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 80cb 	beq.w	8009b6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099d6:	4b52      	ldr	r3, [pc, #328]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099e0:	4b4f      	ldr	r3, [pc, #316]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 80099e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d007      	beq.n	80099fc <HAL_RCC_OscConfig+0x164>
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	2b18      	cmp	r3, #24
 80099f0:	d156      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x208>
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d151      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099fc:	4b48      	ldr	r3, [pc, #288]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <HAL_RCC_OscConfig+0x17c>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e368      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a14:	4b42      	ldr	r3, [pc, #264]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f023 0219 	bic.w	r2, r3, #25
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	493f      	ldr	r1, [pc, #252]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a26:	f7fd ffaf 	bl	8007988 <HAL_GetTick>
 8009a2a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a2c:	e008      	b.n	8009a40 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a2e:	f7fd ffab 	bl	8007988 <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d901      	bls.n	8009a40 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e352      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a40:	4b37      	ldr	r3, [pc, #220]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0f0      	beq.n	8009a2e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a4c:	f7fd ffcc 	bl	80079e8 <HAL_GetREVID>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d817      	bhi.n	8009a8a <HAL_RCC_OscConfig+0x1f2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	2b40      	cmp	r3, #64	; 0x40
 8009a60:	d108      	bne.n	8009a74 <HAL_RCC_OscConfig+0x1dc>
 8009a62:	4b2f      	ldr	r3, [pc, #188]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a6a:	4a2d      	ldr	r2, [pc, #180]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a70:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a72:	e07b      	b.n	8009b6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a74:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	031b      	lsls	r3, r3, #12
 8009a82:	4927      	ldr	r1, [pc, #156]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a88:	e070      	b.n	8009b6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a8a:	4b25      	ldr	r3, [pc, #148]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	061b      	lsls	r3, r3, #24
 8009a98:	4921      	ldr	r1, [pc, #132]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a9e:	e065      	b.n	8009b6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d048      	beq.n	8009b3a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009aa8:	4b1d      	ldr	r3, [pc, #116]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f023 0219 	bic.w	r2, r3, #25
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	491a      	ldr	r1, [pc, #104]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aba:	f7fd ff65 	bl	8007988 <HAL_GetTick>
 8009abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ac0:	e008      	b.n	8009ad4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ac2:	f7fd ff61 	bl	8007988 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d901      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e308      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ad4:	4b12      	ldr	r3, [pc, #72]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0f0      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ae0:	f7fd ff82 	bl	80079e8 <HAL_GetREVID>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f241 0203 	movw	r2, #4099	; 0x1003
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d81a      	bhi.n	8009b24 <HAL_RCC_OscConfig+0x28c>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b40      	cmp	r3, #64	; 0x40
 8009af4:	d108      	bne.n	8009b08 <HAL_RCC_OscConfig+0x270>
 8009af6:	4b0a      	ldr	r3, [pc, #40]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009afe:	4a08      	ldr	r2, [pc, #32]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b04:	6053      	str	r3, [r2, #4]
 8009b06:	e031      	b.n	8009b6c <HAL_RCC_OscConfig+0x2d4>
 8009b08:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	031b      	lsls	r3, r3, #12
 8009b16:	4902      	ldr	r1, [pc, #8]	; (8009b20 <HAL_RCC_OscConfig+0x288>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	604b      	str	r3, [r1, #4]
 8009b1c:	e026      	b.n	8009b6c <HAL_RCC_OscConfig+0x2d4>
 8009b1e:	bf00      	nop
 8009b20:	58024400 	.word	0x58024400
 8009b24:	4b9a      	ldr	r3, [pc, #616]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	061b      	lsls	r3, r3, #24
 8009b32:	4997      	ldr	r1, [pc, #604]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	604b      	str	r3, [r1, #4]
 8009b38:	e018      	b.n	8009b6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b3a:	4b95      	ldr	r3, [pc, #596]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a94      	ldr	r2, [pc, #592]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b46:	f7fd ff1f 	bl	8007988 <HAL_GetTick>
 8009b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b4c:	e008      	b.n	8009b60 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b4e:	f7fd ff1b 	bl	8007988 <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e2c2      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b60:	4b8b      	ldr	r3, [pc, #556]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1f0      	bne.n	8009b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0310 	and.w	r3, r3, #16
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 80a9 	beq.w	8009ccc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b7a:	4b85      	ldr	r3, [pc, #532]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b84:	4b82      	ldr	r3, [pc, #520]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d007      	beq.n	8009ba0 <HAL_RCC_OscConfig+0x308>
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b18      	cmp	r3, #24
 8009b94:	d13a      	bne.n	8009c0c <HAL_RCC_OscConfig+0x374>
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d135      	bne.n	8009c0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ba0:	4b7b      	ldr	r3, [pc, #492]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d005      	beq.n	8009bb8 <HAL_RCC_OscConfig+0x320>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	2b80      	cmp	r3, #128	; 0x80
 8009bb2:	d001      	beq.n	8009bb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e296      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bb8:	f7fd ff16 	bl	80079e8 <HAL_GetREVID>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d817      	bhi.n	8009bf6 <HAL_RCC_OscConfig+0x35e>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d108      	bne.n	8009be0 <HAL_RCC_OscConfig+0x348>
 8009bce:	4b70      	ldr	r3, [pc, #448]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009bd6:	4a6e      	ldr	r2, [pc, #440]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bdc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bde:	e075      	b.n	8009ccc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009be0:	4b6b      	ldr	r3, [pc, #428]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	069b      	lsls	r3, r3, #26
 8009bee:	4968      	ldr	r1, [pc, #416]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bf4:	e06a      	b.n	8009ccc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bf6:	4b66      	ldr	r3, [pc, #408]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	061b      	lsls	r3, r3, #24
 8009c04:	4962      	ldr	r1, [pc, #392]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c0a:	e05f      	b.n	8009ccc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d042      	beq.n	8009c9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009c14:	4b5e      	ldr	r3, [pc, #376]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a5d      	ldr	r2, [pc, #372]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c20:	f7fd feb2 	bl	8007988 <HAL_GetTick>
 8009c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c26:	e008      	b.n	8009c3a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009c28:	f7fd feae 	bl	8007988 <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e255      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c3a:	4b55      	ldr	r3, [pc, #340]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0f0      	beq.n	8009c28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c46:	f7fd fecf 	bl	80079e8 <HAL_GetREVID>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d817      	bhi.n	8009c84 <HAL_RCC_OscConfig+0x3ec>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	2b20      	cmp	r3, #32
 8009c5a:	d108      	bne.n	8009c6e <HAL_RCC_OscConfig+0x3d6>
 8009c5c:	4b4c      	ldr	r3, [pc, #304]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c64:	4a4a      	ldr	r2, [pc, #296]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c6a:	6053      	str	r3, [r2, #4]
 8009c6c:	e02e      	b.n	8009ccc <HAL_RCC_OscConfig+0x434>
 8009c6e:	4b48      	ldr	r3, [pc, #288]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	069b      	lsls	r3, r3, #26
 8009c7c:	4944      	ldr	r1, [pc, #272]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	604b      	str	r3, [r1, #4]
 8009c82:	e023      	b.n	8009ccc <HAL_RCC_OscConfig+0x434>
 8009c84:	4b42      	ldr	r3, [pc, #264]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	061b      	lsls	r3, r3, #24
 8009c92:	493f      	ldr	r1, [pc, #252]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60cb      	str	r3, [r1, #12]
 8009c98:	e018      	b.n	8009ccc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c9a:	4b3d      	ldr	r3, [pc, #244]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a3c      	ldr	r2, [pc, #240]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca6:	f7fd fe6f 	bl	8007988 <HAL_GetTick>
 8009caa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009cac:	e008      	b.n	8009cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009cae:	f7fd fe6b 	bl	8007988 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d901      	bls.n	8009cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e212      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009cc0:	4b33      	ldr	r3, [pc, #204]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f0      	bne.n	8009cae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0308 	and.w	r3, r3, #8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d036      	beq.n	8009d46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d019      	beq.n	8009d14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ce0:	4b2b      	ldr	r3, [pc, #172]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce4:	4a2a      	ldr	r2, [pc, #168]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cec:	f7fd fe4c 	bl	8007988 <HAL_GetTick>
 8009cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cf2:	e008      	b.n	8009d06 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cf4:	f7fd fe48 	bl	8007988 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d901      	bls.n	8009d06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e1ef      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d06:	4b22      	ldr	r3, [pc, #136]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0f0      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x45c>
 8009d12:	e018      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d14:	4b1e      	ldr	r3, [pc, #120]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d18:	4a1d      	ldr	r2, [pc, #116]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009d1a:	f023 0301 	bic.w	r3, r3, #1
 8009d1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d20:	f7fd fe32 	bl	8007988 <HAL_GetTick>
 8009d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d26:	e008      	b.n	8009d3a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d28:	f7fd fe2e 	bl	8007988 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d901      	bls.n	8009d3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e1d5      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d3a:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d3e:	f003 0302 	and.w	r3, r3, #2
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1f0      	bne.n	8009d28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0320 	and.w	r3, r3, #32
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d039      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d01c      	beq.n	8009d94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d5a:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a0c      	ldr	r2, [pc, #48]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d66:	f7fd fe0f 	bl	8007988 <HAL_GetTick>
 8009d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d6c:	e008      	b.n	8009d80 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009d6e:	f7fd fe0b 	bl	8007988 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d901      	bls.n	8009d80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e1b2      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d80:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <HAL_RCC_OscConfig+0x4f8>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0f0      	beq.n	8009d6e <HAL_RCC_OscConfig+0x4d6>
 8009d8c:	e01b      	b.n	8009dc6 <HAL_RCC_OscConfig+0x52e>
 8009d8e:	bf00      	nop
 8009d90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d94:	4b9b      	ldr	r3, [pc, #620]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a9a      	ldr	r2, [pc, #616]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009da0:	f7fd fdf2 	bl	8007988 <HAL_GetTick>
 8009da4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009da6:	e008      	b.n	8009dba <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009da8:	f7fd fdee 	bl	8007988 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e195      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009dba:	4b92      	ldr	r3, [pc, #584]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f0      	bne.n	8009da8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8081 	beq.w	8009ed6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009dd4:	4b8c      	ldr	r3, [pc, #560]	; (800a008 <HAL_RCC_OscConfig+0x770>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a8b      	ldr	r2, [pc, #556]	; (800a008 <HAL_RCC_OscConfig+0x770>)
 8009dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009de0:	f7fd fdd2 	bl	8007988 <HAL_GetTick>
 8009de4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009de6:	e008      	b.n	8009dfa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009de8:	f7fd fdce 	bl	8007988 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	2b64      	cmp	r3, #100	; 0x64
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e175      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dfa:	4b83      	ldr	r3, [pc, #524]	; (800a008 <HAL_RCC_OscConfig+0x770>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0f0      	beq.n	8009de8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d106      	bne.n	8009e1c <HAL_RCC_OscConfig+0x584>
 8009e0e:	4b7d      	ldr	r3, [pc, #500]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e12:	4a7c      	ldr	r2, [pc, #496]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e14:	f043 0301 	orr.w	r3, r3, #1
 8009e18:	6713      	str	r3, [r2, #112]	; 0x70
 8009e1a:	e02d      	b.n	8009e78 <HAL_RCC_OscConfig+0x5e0>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10c      	bne.n	8009e3e <HAL_RCC_OscConfig+0x5a6>
 8009e24:	4b77      	ldr	r3, [pc, #476]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e28:	4a76      	ldr	r2, [pc, #472]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e2a:	f023 0301 	bic.w	r3, r3, #1
 8009e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e30:	4b74      	ldr	r3, [pc, #464]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e34:	4a73      	ldr	r2, [pc, #460]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e36:	f023 0304 	bic.w	r3, r3, #4
 8009e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009e3c:	e01c      	b.n	8009e78 <HAL_RCC_OscConfig+0x5e0>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2b05      	cmp	r3, #5
 8009e44:	d10c      	bne.n	8009e60 <HAL_RCC_OscConfig+0x5c8>
 8009e46:	4b6f      	ldr	r3, [pc, #444]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4a:	4a6e      	ldr	r2, [pc, #440]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e4c:	f043 0304 	orr.w	r3, r3, #4
 8009e50:	6713      	str	r3, [r2, #112]	; 0x70
 8009e52:	4b6c      	ldr	r3, [pc, #432]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e56:	4a6b      	ldr	r2, [pc, #428]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e58:	f043 0301 	orr.w	r3, r3, #1
 8009e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e5e:	e00b      	b.n	8009e78 <HAL_RCC_OscConfig+0x5e0>
 8009e60:	4b68      	ldr	r3, [pc, #416]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e64:	4a67      	ldr	r2, [pc, #412]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e66:	f023 0301 	bic.w	r3, r3, #1
 8009e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009e6c:	4b65      	ldr	r3, [pc, #404]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e70:	4a64      	ldr	r2, [pc, #400]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009e72:	f023 0304 	bic.w	r3, r3, #4
 8009e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d015      	beq.n	8009eac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e80:	f7fd fd82 	bl	8007988 <HAL_GetTick>
 8009e84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e86:	e00a      	b.n	8009e9e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e88:	f7fd fd7e 	bl	8007988 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d901      	bls.n	8009e9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e123      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e9e:	4b59      	ldr	r3, [pc, #356]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0ee      	beq.n	8009e88 <HAL_RCC_OscConfig+0x5f0>
 8009eaa:	e014      	b.n	8009ed6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eac:	f7fd fd6c 	bl	8007988 <HAL_GetTick>
 8009eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009eb2:	e00a      	b.n	8009eca <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009eb4:	f7fd fd68 	bl	8007988 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d901      	bls.n	8009eca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e10d      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009eca:	4b4e      	ldr	r3, [pc, #312]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ece:	f003 0302 	and.w	r3, r3, #2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1ee      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 8102 	beq.w	800a0e4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ee0:	4b48      	ldr	r3, [pc, #288]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ee8:	2b18      	cmp	r3, #24
 8009eea:	f000 80bd 	beq.w	800a068 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	f040 809e 	bne.w	800a034 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ef8:	4b42      	ldr	r3, [pc, #264]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a41      	ldr	r2, [pc, #260]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f04:	f7fd fd40 	bl	8007988 <HAL_GetTick>
 8009f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f0a:	e008      	b.n	8009f1e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f0c:	f7fd fd3c 	bl	8007988 <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e0e3      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f1e:	4b39      	ldr	r3, [pc, #228]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1f0      	bne.n	8009f0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f2a:	4b36      	ldr	r3, [pc, #216]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f2e:	4b37      	ldr	r3, [pc, #220]	; (800a00c <HAL_RCC_OscConfig+0x774>)
 8009f30:	4013      	ands	r3, r2
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f3a:	0112      	lsls	r2, r2, #4
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	4931      	ldr	r1, [pc, #196]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f40:	4313      	orrs	r3, r2
 8009f42:	628b      	str	r3, [r1, #40]	; 0x28
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f52:	3b01      	subs	r3, #1
 8009f54:	025b      	lsls	r3, r3, #9
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	041b      	lsls	r3, r3, #16
 8009f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f66:	431a      	orrs	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	061b      	lsls	r3, r3, #24
 8009f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f74:	4923      	ldr	r1, [pc, #140]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009f7a:	4b22      	ldr	r3, [pc, #136]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7e:	4a21      	ldr	r2, [pc, #132]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f86:	4b1f      	ldr	r3, [pc, #124]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f8a:	4b21      	ldr	r3, [pc, #132]	; (800a010 <HAL_RCC_OscConfig+0x778>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f92:	00d2      	lsls	r2, r2, #3
 8009f94:	491b      	ldr	r1, [pc, #108]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f9a:	4b1a      	ldr	r3, [pc, #104]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	f023 020c 	bic.w	r2, r3, #12
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa6:	4917      	ldr	r1, [pc, #92]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009fac:	4b15      	ldr	r3, [pc, #84]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	f023 0202 	bic.w	r2, r3, #2
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb8:	4912      	ldr	r1, [pc, #72]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009fbe:	4b11      	ldr	r3, [pc, #68]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	4a10      	ldr	r2, [pc, #64]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fca:	4b0e      	ldr	r3, [pc, #56]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	4a0d      	ldr	r2, [pc, #52]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	4a0a      	ldr	r2, [pc, #40]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009fe2:	4b08      	ldr	r3, [pc, #32]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	4a07      	ldr	r2, [pc, #28]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009fe8:	f043 0301 	orr.w	r3, r3, #1
 8009fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a04      	ldr	r2, [pc, #16]	; (800a004 <HAL_RCC_OscConfig+0x76c>)
 8009ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffa:	f7fd fcc5 	bl	8007988 <HAL_GetTick>
 8009ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a000:	e011      	b.n	800a026 <HAL_RCC_OscConfig+0x78e>
 800a002:	bf00      	nop
 800a004:	58024400 	.word	0x58024400
 800a008:	58024800 	.word	0x58024800
 800a00c:	fffffc0c 	.word	0xfffffc0c
 800a010:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a014:	f7fd fcb8 	bl	8007988 <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d901      	bls.n	800a026 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e05f      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a026:	4b32      	ldr	r3, [pc, #200]	; (800a0f0 <HAL_RCC_OscConfig+0x858>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0f0      	beq.n	800a014 <HAL_RCC_OscConfig+0x77c>
 800a032:	e057      	b.n	800a0e4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a034:	4b2e      	ldr	r3, [pc, #184]	; (800a0f0 <HAL_RCC_OscConfig+0x858>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a2d      	ldr	r2, [pc, #180]	; (800a0f0 <HAL_RCC_OscConfig+0x858>)
 800a03a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a03e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a040:	f7fd fca2 	bl	8007988 <HAL_GetTick>
 800a044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a046:	e008      	b.n	800a05a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a048:	f7fd fc9e 	bl	8007988 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	2b02      	cmp	r3, #2
 800a054:	d901      	bls.n	800a05a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e045      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a05a:	4b25      	ldr	r3, [pc, #148]	; (800a0f0 <HAL_RCC_OscConfig+0x858>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1f0      	bne.n	800a048 <HAL_RCC_OscConfig+0x7b0>
 800a066:	e03d      	b.n	800a0e4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a068:	4b21      	ldr	r3, [pc, #132]	; (800a0f0 <HAL_RCC_OscConfig+0x858>)
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a06e:	4b20      	ldr	r3, [pc, #128]	; (800a0f0 <HAL_RCC_OscConfig+0x858>)
 800a070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a072:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d031      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f003 0203 	and.w	r2, r3, #3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a086:	429a      	cmp	r2, r3
 800a088:	d12a      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	091b      	lsrs	r3, r3, #4
 800a08e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a096:	429a      	cmp	r2, r3
 800a098:	d122      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d11a      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	0a5b      	lsrs	r3, r3, #9
 800a0ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d111      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	0c1b      	lsrs	r3, r3, #16
 800a0c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d108      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	0e1b      	lsrs	r3, r3, #24
 800a0d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0da:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d001      	beq.n	800a0e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e000      	b.n	800a0e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3730      	adds	r7, #48	; 0x30
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	58024400 	.word	0x58024400

0800a0f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e19c      	b.n	800a442 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a108:	4b8a      	ldr	r3, [pc, #552]	; (800a334 <HAL_RCC_ClockConfig+0x240>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d910      	bls.n	800a138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a116:	4b87      	ldr	r3, [pc, #540]	; (800a334 <HAL_RCC_ClockConfig+0x240>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f023 020f 	bic.w	r2, r3, #15
 800a11e:	4985      	ldr	r1, [pc, #532]	; (800a334 <HAL_RCC_ClockConfig+0x240>)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	4313      	orrs	r3, r2
 800a124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a126:	4b83      	ldr	r3, [pc, #524]	; (800a334 <HAL_RCC_ClockConfig+0x240>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 030f 	and.w	r3, r3, #15
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d001      	beq.n	800a138 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e184      	b.n	800a442 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b00      	cmp	r3, #0
 800a142:	d010      	beq.n	800a166 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	691a      	ldr	r2, [r3, #16]
 800a148:	4b7b      	ldr	r3, [pc, #492]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a150:	429a      	cmp	r2, r3
 800a152:	d908      	bls.n	800a166 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a154:	4b78      	ldr	r3, [pc, #480]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	4975      	ldr	r1, [pc, #468]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a162:	4313      	orrs	r3, r2
 800a164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0308 	and.w	r3, r3, #8
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d010      	beq.n	800a194 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	695a      	ldr	r2, [r3, #20]
 800a176:	4b70      	ldr	r3, [pc, #448]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a17e:	429a      	cmp	r2, r3
 800a180:	d908      	bls.n	800a194 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a182:	4b6d      	ldr	r3, [pc, #436]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	496a      	ldr	r1, [pc, #424]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a190:	4313      	orrs	r3, r2
 800a192:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0310 	and.w	r3, r3, #16
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d010      	beq.n	800a1c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	699a      	ldr	r2, [r3, #24]
 800a1a4:	4b64      	ldr	r3, [pc, #400]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a1a6:	69db      	ldr	r3, [r3, #28]
 800a1a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d908      	bls.n	800a1c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1b0:	4b61      	ldr	r3, [pc, #388]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	495e      	ldr	r1, [pc, #376]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0320 	and.w	r3, r3, #32
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d010      	beq.n	800a1f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	69da      	ldr	r2, [r3, #28]
 800a1d2:	4b59      	ldr	r3, [pc, #356]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d908      	bls.n	800a1f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a1de:	4b56      	ldr	r3, [pc, #344]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	4953      	ldr	r1, [pc, #332]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d010      	beq.n	800a21e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	4b4d      	ldr	r3, [pc, #308]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	f003 030f 	and.w	r3, r3, #15
 800a208:	429a      	cmp	r2, r3
 800a20a:	d908      	bls.n	800a21e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a20c:	4b4a      	ldr	r3, [pc, #296]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	f023 020f 	bic.w	r2, r3, #15
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	4947      	ldr	r1, [pc, #284]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d055      	beq.n	800a2d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a22a:	4b43      	ldr	r3, [pc, #268]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	4940      	ldr	r1, [pc, #256]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d107      	bne.n	800a254 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a244:	4b3c      	ldr	r3, [pc, #240]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d121      	bne.n	800a294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e0f6      	b.n	800a442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d107      	bne.n	800a26c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a25c:	4b36      	ldr	r3, [pc, #216]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d115      	bne.n	800a294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e0ea      	b.n	800a442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d107      	bne.n	800a284 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a274:	4b30      	ldr	r3, [pc, #192]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d109      	bne.n	800a294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e0de      	b.n	800a442 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a284:	4b2c      	ldr	r3, [pc, #176]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d101      	bne.n	800a294 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e0d6      	b.n	800a442 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a294:	4b28      	ldr	r3, [pc, #160]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	f023 0207 	bic.w	r2, r3, #7
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	4925      	ldr	r1, [pc, #148]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2a6:	f7fd fb6f 	bl	8007988 <HAL_GetTick>
 800a2aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2ac:	e00a      	b.n	800a2c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2ae:	f7fd fb6b 	bl	8007988 <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d901      	bls.n	800a2c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e0be      	b.n	800a442 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2c4:	4b1c      	ldr	r3, [pc, #112]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d1eb      	bne.n	800a2ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d010      	beq.n	800a304 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68da      	ldr	r2, [r3, #12]
 800a2e6:	4b14      	ldr	r3, [pc, #80]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	f003 030f 	and.w	r3, r3, #15
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d208      	bcs.n	800a304 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2f2:	4b11      	ldr	r3, [pc, #68]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	f023 020f 	bic.w	r2, r3, #15
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	490e      	ldr	r1, [pc, #56]	; (800a338 <HAL_RCC_ClockConfig+0x244>)
 800a300:	4313      	orrs	r3, r2
 800a302:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a304:	4b0b      	ldr	r3, [pc, #44]	; (800a334 <HAL_RCC_ClockConfig+0x240>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 030f 	and.w	r3, r3, #15
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d214      	bcs.n	800a33c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a312:	4b08      	ldr	r3, [pc, #32]	; (800a334 <HAL_RCC_ClockConfig+0x240>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f023 020f 	bic.w	r2, r3, #15
 800a31a:	4906      	ldr	r1, [pc, #24]	; (800a334 <HAL_RCC_ClockConfig+0x240>)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	4313      	orrs	r3, r2
 800a320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a322:	4b04      	ldr	r3, [pc, #16]	; (800a334 <HAL_RCC_ClockConfig+0x240>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 030f 	and.w	r3, r3, #15
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d005      	beq.n	800a33c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e086      	b.n	800a442 <HAL_RCC_ClockConfig+0x34e>
 800a334:	52002000 	.word	0x52002000
 800a338:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	d010      	beq.n	800a36a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691a      	ldr	r2, [r3, #16]
 800a34c:	4b3f      	ldr	r3, [pc, #252]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a354:	429a      	cmp	r2, r3
 800a356:	d208      	bcs.n	800a36a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a358:	4b3c      	ldr	r3, [pc, #240]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	4939      	ldr	r1, [pc, #228]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a366:	4313      	orrs	r3, r2
 800a368:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0308 	and.w	r3, r3, #8
 800a372:	2b00      	cmp	r3, #0
 800a374:	d010      	beq.n	800a398 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695a      	ldr	r2, [r3, #20]
 800a37a:	4b34      	ldr	r3, [pc, #208]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a382:	429a      	cmp	r2, r3
 800a384:	d208      	bcs.n	800a398 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a386:	4b31      	ldr	r3, [pc, #196]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	492e      	ldr	r1, [pc, #184]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a394:	4313      	orrs	r3, r2
 800a396:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d010      	beq.n	800a3c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	699a      	ldr	r2, [r3, #24]
 800a3a8:	4b28      	ldr	r3, [pc, #160]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d208      	bcs.n	800a3c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3b4:	4b25      	ldr	r3, [pc, #148]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	4922      	ldr	r1, [pc, #136]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0320 	and.w	r3, r3, #32
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d010      	beq.n	800a3f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69da      	ldr	r2, [r3, #28]
 800a3d6:	4b1d      	ldr	r3, [pc, #116]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d208      	bcs.n	800a3f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a3e2:	4b1a      	ldr	r3, [pc, #104]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	4917      	ldr	r1, [pc, #92]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a3f4:	f000 f834 	bl	800a460 <HAL_RCC_GetSysClockFreq>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	4b14      	ldr	r3, [pc, #80]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	0a1b      	lsrs	r3, r3, #8
 800a400:	f003 030f 	and.w	r3, r3, #15
 800a404:	4912      	ldr	r1, [pc, #72]	; (800a450 <HAL_RCC_ClockConfig+0x35c>)
 800a406:	5ccb      	ldrb	r3, [r1, r3]
 800a408:	f003 031f 	and.w	r3, r3, #31
 800a40c:	fa22 f303 	lsr.w	r3, r2, r3
 800a410:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a412:	4b0e      	ldr	r3, [pc, #56]	; (800a44c <HAL_RCC_ClockConfig+0x358>)
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	f003 030f 	and.w	r3, r3, #15
 800a41a:	4a0d      	ldr	r2, [pc, #52]	; (800a450 <HAL_RCC_ClockConfig+0x35c>)
 800a41c:	5cd3      	ldrb	r3, [r2, r3]
 800a41e:	f003 031f 	and.w	r3, r3, #31
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	fa22 f303 	lsr.w	r3, r2, r3
 800a428:	4a0a      	ldr	r2, [pc, #40]	; (800a454 <HAL_RCC_ClockConfig+0x360>)
 800a42a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a42c:	4a0a      	ldr	r2, [pc, #40]	; (800a458 <HAL_RCC_ClockConfig+0x364>)
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <HAL_RCC_ClockConfig+0x368>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	f7fd f84e 	bl	80074d8 <HAL_InitTick>
 800a43c:	4603      	mov	r3, r0
 800a43e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a440:	7bfb      	ldrb	r3, [r7, #15]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	58024400 	.word	0x58024400
 800a450:	08010ef4 	.word	0x08010ef4
 800a454:	24000030 	.word	0x24000030
 800a458:	2400002c 	.word	0x2400002c
 800a45c:	24000034 	.word	0x24000034

0800a460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a460:	b480      	push	{r7}
 800a462:	b089      	sub	sp, #36	; 0x24
 800a464:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a466:	4bb3      	ldr	r3, [pc, #716]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a46e:	2b18      	cmp	r3, #24
 800a470:	f200 8155 	bhi.w	800a71e <HAL_RCC_GetSysClockFreq+0x2be>
 800a474:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47a:	bf00      	nop
 800a47c:	0800a4e1 	.word	0x0800a4e1
 800a480:	0800a71f 	.word	0x0800a71f
 800a484:	0800a71f 	.word	0x0800a71f
 800a488:	0800a71f 	.word	0x0800a71f
 800a48c:	0800a71f 	.word	0x0800a71f
 800a490:	0800a71f 	.word	0x0800a71f
 800a494:	0800a71f 	.word	0x0800a71f
 800a498:	0800a71f 	.word	0x0800a71f
 800a49c:	0800a507 	.word	0x0800a507
 800a4a0:	0800a71f 	.word	0x0800a71f
 800a4a4:	0800a71f 	.word	0x0800a71f
 800a4a8:	0800a71f 	.word	0x0800a71f
 800a4ac:	0800a71f 	.word	0x0800a71f
 800a4b0:	0800a71f 	.word	0x0800a71f
 800a4b4:	0800a71f 	.word	0x0800a71f
 800a4b8:	0800a71f 	.word	0x0800a71f
 800a4bc:	0800a50d 	.word	0x0800a50d
 800a4c0:	0800a71f 	.word	0x0800a71f
 800a4c4:	0800a71f 	.word	0x0800a71f
 800a4c8:	0800a71f 	.word	0x0800a71f
 800a4cc:	0800a71f 	.word	0x0800a71f
 800a4d0:	0800a71f 	.word	0x0800a71f
 800a4d4:	0800a71f 	.word	0x0800a71f
 800a4d8:	0800a71f 	.word	0x0800a71f
 800a4dc:	0800a513 	.word	0x0800a513
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4e0:	4b94      	ldr	r3, [pc, #592]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0320 	and.w	r3, r3, #32
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d009      	beq.n	800a500 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4ec:	4b91      	ldr	r3, [pc, #580]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	08db      	lsrs	r3, r3, #3
 800a4f2:	f003 0303 	and.w	r3, r3, #3
 800a4f6:	4a90      	ldr	r2, [pc, #576]	; (800a738 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a4fe:	e111      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a500:	4b8d      	ldr	r3, [pc, #564]	; (800a738 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a502:	61bb      	str	r3, [r7, #24]
    break;
 800a504:	e10e      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a506:	4b8d      	ldr	r3, [pc, #564]	; (800a73c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a508:	61bb      	str	r3, [r7, #24]
    break;
 800a50a:	e10b      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a50c:	4b8c      	ldr	r3, [pc, #560]	; (800a740 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a50e:	61bb      	str	r3, [r7, #24]
    break;
 800a510:	e108      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a512:	4b88      	ldr	r3, [pc, #544]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	f003 0303 	and.w	r3, r3, #3
 800a51a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a51c:	4b85      	ldr	r3, [pc, #532]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a520:	091b      	lsrs	r3, r3, #4
 800a522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a526:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a528:	4b82      	ldr	r3, [pc, #520]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a532:	4b80      	ldr	r3, [pc, #512]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a536:	08db      	lsrs	r3, r3, #3
 800a538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	fb02 f303 	mul.w	r3, r2, r3
 800a542:	ee07 3a90 	vmov	s15, r3
 800a546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 80e1 	beq.w	800a718 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b02      	cmp	r3, #2
 800a55a:	f000 8083 	beq.w	800a664 <HAL_RCC_GetSysClockFreq+0x204>
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b02      	cmp	r3, #2
 800a562:	f200 80a1 	bhi.w	800a6a8 <HAL_RCC_GetSysClockFreq+0x248>
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <HAL_RCC_GetSysClockFreq+0x114>
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d056      	beq.n	800a620 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a572:	e099      	b.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a574:	4b6f      	ldr	r3, [pc, #444]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0320 	and.w	r3, r3, #32
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d02d      	beq.n	800a5dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a580:	4b6c      	ldr	r3, [pc, #432]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	08db      	lsrs	r3, r3, #3
 800a586:	f003 0303 	and.w	r3, r3, #3
 800a58a:	4a6b      	ldr	r2, [pc, #428]	; (800a738 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a58c:	fa22 f303 	lsr.w	r3, r2, r3
 800a590:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	ee07 3a90 	vmov	s15, r3
 800a598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	ee07 3a90 	vmov	s15, r3
 800a5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5aa:	4b62      	ldr	r3, [pc, #392]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5be:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a744 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a5da:	e087      	b.n	800a6ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a748 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ee:	4b51      	ldr	r3, [pc, #324]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a602:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a744 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a61e:	e065      	b.n	800a6ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a74c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a632:	4b40      	ldr	r3, [pc, #256]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a642:	ed97 6a02 	vldr	s12, [r7, #8]
 800a646:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a744 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a662:	e043      	b.n	800a6ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a750 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a676:	4b2f      	ldr	r3, [pc, #188]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a686:	ed97 6a02 	vldr	s12, [r7, #8]
 800a68a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a744 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6a6:	e021      	b.n	800a6ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a74c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ba:	4b1e      	ldr	r3, [pc, #120]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a744 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a6ec:	4b11      	ldr	r3, [pc, #68]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f0:	0a5b      	lsrs	r3, r3, #9
 800a6f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	ee07 3a90 	vmov	s15, r3
 800a700:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a704:	edd7 6a07 	vldr	s13, [r7, #28]
 800a708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a70c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a710:	ee17 3a90 	vmov	r3, s15
 800a714:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a716:	e005      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	61bb      	str	r3, [r7, #24]
    break;
 800a71c:	e002      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a71e:	4b07      	ldr	r3, [pc, #28]	; (800a73c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a720:	61bb      	str	r3, [r7, #24]
    break;
 800a722:	bf00      	nop
  }

  return sysclockfreq;
 800a724:	69bb      	ldr	r3, [r7, #24]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3724      	adds	r7, #36	; 0x24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	58024400 	.word	0x58024400
 800a738:	03d09000 	.word	0x03d09000
 800a73c:	003d0900 	.word	0x003d0900
 800a740:	007a1200 	.word	0x007a1200
 800a744:	46000000 	.word	0x46000000
 800a748:	4c742400 	.word	0x4c742400
 800a74c:	4a742400 	.word	0x4a742400
 800a750:	4af42400 	.word	0x4af42400

0800a754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a75a:	f7ff fe81 	bl	800a460 <HAL_RCC_GetSysClockFreq>
 800a75e:	4602      	mov	r2, r0
 800a760:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	0a1b      	lsrs	r3, r3, #8
 800a766:	f003 030f 	and.w	r3, r3, #15
 800a76a:	490f      	ldr	r1, [pc, #60]	; (800a7a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a76c:	5ccb      	ldrb	r3, [r1, r3]
 800a76e:	f003 031f 	and.w	r3, r3, #31
 800a772:	fa22 f303 	lsr.w	r3, r2, r3
 800a776:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a778:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	f003 030f 	and.w	r3, r3, #15
 800a780:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a782:	5cd3      	ldrb	r3, [r2, r3]
 800a784:	f003 031f 	and.w	r3, r3, #31
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	fa22 f303 	lsr.w	r3, r2, r3
 800a78e:	4a07      	ldr	r2, [pc, #28]	; (800a7ac <HAL_RCC_GetHCLKFreq+0x58>)
 800a790:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a792:	4a07      	ldr	r2, [pc, #28]	; (800a7b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <HAL_RCC_GetHCLKFreq+0x58>)
 800a79a:	681b      	ldr	r3, [r3, #0]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	58024400 	.word	0x58024400
 800a7a8:	08010ef4 	.word	0x08010ef4
 800a7ac:	24000030 	.word	0x24000030
 800a7b0:	2400002c 	.word	0x2400002c

0800a7b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a7b8:	f7ff ffcc 	bl	800a754 <HAL_RCC_GetHCLKFreq>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	091b      	lsrs	r3, r3, #4
 800a7c4:	f003 0307 	and.w	r3, r3, #7
 800a7c8:	4904      	ldr	r1, [pc, #16]	; (800a7dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7ca:	5ccb      	ldrb	r3, [r1, r3]
 800a7cc:	f003 031f 	and.w	r3, r3, #31
 800a7d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	58024400 	.word	0x58024400
 800a7dc:	08010ef4 	.word	0x08010ef4

0800a7e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a7e4:	f7ff ffb6 	bl	800a754 <HAL_RCC_GetHCLKFreq>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	4b06      	ldr	r3, [pc, #24]	; (800a804 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	0a1b      	lsrs	r3, r3, #8
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	4904      	ldr	r1, [pc, #16]	; (800a808 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7f6:	5ccb      	ldrb	r3, [r1, r3]
 800a7f8:	f003 031f 	and.w	r3, r3, #31
 800a7fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a800:	4618      	mov	r0, r3
 800a802:	bd80      	pop	{r7, pc}
 800a804:	58024400 	.word	0x58024400
 800a808:	08010ef4 	.word	0x08010ef4

0800a80c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	223f      	movs	r2, #63	; 0x3f
 800a81a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a81c:	4b1a      	ldr	r3, [pc, #104]	; (800a888 <HAL_RCC_GetClockConfig+0x7c>)
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	f003 0207 	and.w	r2, r3, #7
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a828:	4b17      	ldr	r3, [pc, #92]	; (800a888 <HAL_RCC_GetClockConfig+0x7c>)
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a834:	4b14      	ldr	r3, [pc, #80]	; (800a888 <HAL_RCC_GetClockConfig+0x7c>)
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	f003 020f 	and.w	r2, r3, #15
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a840:	4b11      	ldr	r3, [pc, #68]	; (800a888 <HAL_RCC_GetClockConfig+0x7c>)
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a84c:	4b0e      	ldr	r3, [pc, #56]	; (800a888 <HAL_RCC_GetClockConfig+0x7c>)
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a858:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <HAL_RCC_GetClockConfig+0x7c>)
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a864:	4b08      	ldr	r3, [pc, #32]	; (800a888 <HAL_RCC_GetClockConfig+0x7c>)
 800a866:	6a1b      	ldr	r3, [r3, #32]
 800a868:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a870:	4b06      	ldr	r3, [pc, #24]	; (800a88c <HAL_RCC_GetClockConfig+0x80>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 020f 	and.w	r2, r3, #15
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	601a      	str	r2, [r3, #0]
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	58024400 	.word	0x58024400
 800a88c:	52002000 	.word	0x52002000

0800a890 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a898:	2300      	movs	r3, #0
 800a89a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a89c:	2300      	movs	r3, #0
 800a89e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d03f      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a8b4:	d02a      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a8b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a8ba:	d824      	bhi.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a8bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8c0:	d018      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a8c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8c6:	d81e      	bhi.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a8cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8d0:	d007      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a8d2:	e018      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8d4:	4ba3      	ldr	r3, [pc, #652]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	4aa2      	ldr	r2, [pc, #648]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a8e0:	e015      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 f9d5 	bl	800bc98 <RCCEx_PLL2_Config>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a8f2:	e00c      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3324      	adds	r3, #36	; 0x24
 800a8f8:	2102      	movs	r1, #2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 fa7e 	bl	800bdfc <RCCEx_PLL3_Config>
 800a900:	4603      	mov	r3, r0
 800a902:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a904:	e003      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	75fb      	strb	r3, [r7, #23]
      break;
 800a90a:	e000      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a90c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d109      	bne.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a914:	4b93      	ldr	r3, [pc, #588]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a920:	4990      	ldr	r1, [pc, #576]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a922:	4313      	orrs	r3, r2
 800a924:	650b      	str	r3, [r1, #80]	; 0x50
 800a926:	e001      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a934:	2b00      	cmp	r3, #0
 800a936:	d03d      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d826      	bhi.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a940:	a201      	add	r2, pc, #4	; (adr r2, 800a948 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a946:	bf00      	nop
 800a948:	0800a95d 	.word	0x0800a95d
 800a94c:	0800a96b 	.word	0x0800a96b
 800a950:	0800a97d 	.word	0x0800a97d
 800a954:	0800a995 	.word	0x0800a995
 800a958:	0800a995 	.word	0x0800a995
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a95c:	4b81      	ldr	r3, [pc, #516]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	4a80      	ldr	r2, [pc, #512]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a968:	e015      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	3304      	adds	r3, #4
 800a96e:	2100      	movs	r1, #0
 800a970:	4618      	mov	r0, r3
 800a972:	f001 f991 	bl	800bc98 <RCCEx_PLL2_Config>
 800a976:	4603      	mov	r3, r0
 800a978:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a97a:	e00c      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3324      	adds	r3, #36	; 0x24
 800a980:	2100      	movs	r1, #0
 800a982:	4618      	mov	r0, r3
 800a984:	f001 fa3a 	bl	800bdfc <RCCEx_PLL3_Config>
 800a988:	4603      	mov	r3, r0
 800a98a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a98c:	e003      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	75fb      	strb	r3, [r7, #23]
      break;
 800a992:	e000      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a994:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a996:	7dfb      	ldrb	r3, [r7, #23]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d109      	bne.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a99c:	4b71      	ldr	r3, [pc, #452]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a0:	f023 0207 	bic.w	r2, r3, #7
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a8:	496e      	ldr	r1, [pc, #440]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	650b      	str	r3, [r1, #80]	; 0x50
 800a9ae:	e001      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d042      	beq.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9c8:	d02b      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ce:	d825      	bhi.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a9d0:	2bc0      	cmp	r3, #192	; 0xc0
 800a9d2:	d028      	beq.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a9d4:	2bc0      	cmp	r3, #192	; 0xc0
 800a9d6:	d821      	bhi.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a9d8:	2b80      	cmp	r3, #128	; 0x80
 800a9da:	d016      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a9dc:	2b80      	cmp	r3, #128	; 0x80
 800a9de:	d81d      	bhi.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a9e4:	2b40      	cmp	r3, #64	; 0x40
 800a9e6:	d007      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a9e8:	e018      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ea:	4b5e      	ldr	r3, [pc, #376]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	4a5d      	ldr	r2, [pc, #372]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a9f6:	e017      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f001 f94a 	bl	800bc98 <RCCEx_PLL2_Config>
 800aa04:	4603      	mov	r3, r0
 800aa06:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aa08:	e00e      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3324      	adds	r3, #36	; 0x24
 800aa0e:	2100      	movs	r1, #0
 800aa10:	4618      	mov	r0, r3
 800aa12:	f001 f9f3 	bl	800bdfc <RCCEx_PLL3_Config>
 800aa16:	4603      	mov	r3, r0
 800aa18:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800aa1a:	e005      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa20:	e002      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800aa22:	bf00      	nop
 800aa24:	e000      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800aa26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d109      	bne.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aa2e:	4b4d      	ldr	r3, [pc, #308]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa32:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3a:	494a      	ldr	r1, [pc, #296]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	650b      	str	r3, [r1, #80]	; 0x50
 800aa40:	e001      	b.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
 800aa44:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d049      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa5c:	d030      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800aa5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa62:	d82a      	bhi.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa68:	d02c      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800aa6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa6e:	d824      	bhi.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa74:	d018      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800aa76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa7a:	d81e      	bhi.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800aa80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa84:	d007      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aa86:	e018      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa88:	4b36      	ldr	r3, [pc, #216]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8c:	4a35      	ldr	r2, [pc, #212]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aa8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa94:	e017      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3304      	adds	r3, #4
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f001 f8fb 	bl	800bc98 <RCCEx_PLL2_Config>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aaa6:	e00e      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3324      	adds	r3, #36	; 0x24
 800aaac:	2100      	movs	r1, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 f9a4 	bl	800bdfc <RCCEx_PLL3_Config>
 800aab4:	4603      	mov	r3, r0
 800aab6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aab8:	e005      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	75fb      	strb	r3, [r7, #23]
      break;
 800aabe:	e002      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aac0:	bf00      	nop
 800aac2:	e000      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10a      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aacc:	4b25      	ldr	r3, [pc, #148]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aada:	4922      	ldr	r1, [pc, #136]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	658b      	str	r3, [r1, #88]	; 0x58
 800aae0:	e001      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d04b      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aaf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aafc:	d030      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800aafe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab02:	d82a      	bhi.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ab04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab08:	d02e      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800ab0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab0e:	d824      	bhi.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ab10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab14:	d018      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ab16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab1a:	d81e      	bhi.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ab20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab24:	d007      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ab26:	e018      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab28:	4b0e      	ldr	r3, [pc, #56]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	4a0d      	ldr	r2, [pc, #52]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ab2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab34:	e019      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 f8ab 	bl	800bc98 <RCCEx_PLL2_Config>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ab46:	e010      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3324      	adds	r3, #36	; 0x24
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 f954 	bl	800bdfc <RCCEx_PLL3_Config>
 800ab54:	4603      	mov	r3, r0
 800ab56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab58:	e007      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5e:	e004      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800ab60:	bf00      	nop
 800ab62:	e002      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ab64:	58024400 	.word	0x58024400
      break;
 800ab68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab70:	4b99      	ldr	r3, [pc, #612]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab7e:	4996      	ldr	r1, [pc, #600]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab80:	4313      	orrs	r3, r2
 800ab82:	658b      	str	r3, [r1, #88]	; 0x58
 800ab84:	e001      	b.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d032      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab9a:	2b30      	cmp	r3, #48	; 0x30
 800ab9c:	d01c      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800ab9e:	2b30      	cmp	r3, #48	; 0x30
 800aba0:	d817      	bhi.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d00c      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	d813      	bhi.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d016      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800abae:	2b10      	cmp	r3, #16
 800abb0:	d10f      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb2:	4b89      	ldr	r3, [pc, #548]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800abb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb6:	4a88      	ldr	r2, [pc, #544]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800abb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800abbe:	e00e      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3304      	adds	r3, #4
 800abc4:	2102      	movs	r1, #2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f001 f866 	bl	800bc98 <RCCEx_PLL2_Config>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800abd0:	e005      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	75fb      	strb	r3, [r7, #23]
      break;
 800abd6:	e002      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800abd8:	bf00      	nop
 800abda:	e000      	b.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800abdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800abe4:	4b7c      	ldr	r3, [pc, #496]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800abe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abe8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abf0:	4979      	ldr	r1, [pc, #484]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800abf6:	e001      	b.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d047      	beq.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac10:	d030      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ac12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac16:	d82a      	bhi.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ac18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac1c:	d02c      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800ac1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac22:	d824      	bhi.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ac24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac28:	d018      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800ac2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac2e:	d81e      	bhi.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800ac34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac38:	d007      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800ac3a:	e018      	b.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac3c:	4b66      	ldr	r3, [pc, #408]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac40:	4a65      	ldr	r2, [pc, #404]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac48:	e017      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	2100      	movs	r1, #0
 800ac50:	4618      	mov	r0, r3
 800ac52:	f001 f821 	bl	800bc98 <RCCEx_PLL2_Config>
 800ac56:	4603      	mov	r3, r0
 800ac58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac5a:	e00e      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	3324      	adds	r3, #36	; 0x24
 800ac60:	2100      	movs	r1, #0
 800ac62:	4618      	mov	r0, r3
 800ac64:	f001 f8ca 	bl	800bdfc <RCCEx_PLL3_Config>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac6c:	e005      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	75fb      	strb	r3, [r7, #23]
      break;
 800ac72:	e002      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ac74:	bf00      	nop
 800ac76:	e000      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ac78:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d109      	bne.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac80:	4b55      	ldr	r3, [pc, #340]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac8c:	4952      	ldr	r1, [pc, #328]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	650b      	str	r3, [r1, #80]	; 0x50
 800ac92:	e001      	b.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d049      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acac:	d02e      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800acae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acb2:	d828      	bhi.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800acb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acb8:	d02a      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800acba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acbe:	d822      	bhi.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800acc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acc4:	d026      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800acc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acca:	d81c      	bhi.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800accc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd0:	d010      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800acd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd6:	d816      	bhi.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01d      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800acdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace0:	d111      	bne.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3304      	adds	r3, #4
 800ace6:	2101      	movs	r1, #1
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 ffd5 	bl	800bc98 <RCCEx_PLL2_Config>
 800acee:	4603      	mov	r3, r0
 800acf0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800acf2:	e012      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3324      	adds	r3, #36	; 0x24
 800acf8:	2101      	movs	r1, #1
 800acfa:	4618      	mov	r0, r3
 800acfc:	f001 f87e 	bl	800bdfc <RCCEx_PLL3_Config>
 800ad00:	4603      	mov	r3, r0
 800ad02:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ad04:	e009      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	75fb      	strb	r3, [r7, #23]
      break;
 800ad0a:	e006      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ad0c:	bf00      	nop
 800ad0e:	e004      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ad10:	bf00      	nop
 800ad12:	e002      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ad14:	bf00      	nop
 800ad16:	e000      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ad18:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d109      	bne.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad20:	4b2d      	ldr	r3, [pc, #180]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad2c:	492a      	ldr	r1, [pc, #168]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	650b      	str	r3, [r1, #80]	; 0x50
 800ad32:	e001      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d04d      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad4e:	d02e      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800ad50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad54:	d828      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ad56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad5a:	d02a      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800ad5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad60:	d822      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ad62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad66:	d026      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800ad68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad6c:	d81c      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ad6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad72:	d010      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ad74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad78:	d816      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d01d      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ad7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad82:	d111      	bne.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3304      	adds	r3, #4
 800ad88:	2101      	movs	r1, #1
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 ff84 	bl	800bc98 <RCCEx_PLL2_Config>
 800ad90:	4603      	mov	r3, r0
 800ad92:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ad94:	e012      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3324      	adds	r3, #36	; 0x24
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f001 f82d 	bl	800bdfc <RCCEx_PLL3_Config>
 800ada2:	4603      	mov	r3, r0
 800ada4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ada6:	e009      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	75fb      	strb	r3, [r7, #23]
      break;
 800adac:	e006      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800adae:	bf00      	nop
 800adb0:	e004      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800adb2:	bf00      	nop
 800adb4:	e002      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800adb6:	bf00      	nop
 800adb8:	e000      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800adba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10c      	bne.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800adc2:	4b05      	ldr	r3, [pc, #20]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800adc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800add0:	4901      	ldr	r1, [pc, #4]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800add2:	4313      	orrs	r3, r2
 800add4:	658b      	str	r3, [r1, #88]	; 0x58
 800add6:	e003      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800add8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800addc:	7dfb      	ldrb	r3, [r7, #23]
 800adde:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d02f      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf4:	d00e      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800adf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adfa:	d814      	bhi.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d015      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800ae00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae04:	d10f      	bne.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae06:	4baf      	ldr	r3, [pc, #700]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	4aae      	ldr	r2, [pc, #696]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ae12:	e00c      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	3304      	adds	r3, #4
 800ae18:	2101      	movs	r1, #1
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 ff3c 	bl	800bc98 <RCCEx_PLL2_Config>
 800ae20:	4603      	mov	r3, r0
 800ae22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ae24:	e003      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	75fb      	strb	r3, [r7, #23]
      break;
 800ae2a:	e000      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800ae2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d109      	bne.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae34:	4ba3      	ldr	r3, [pc, #652]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae40:	49a0      	ldr	r1, [pc, #640]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	650b      	str	r3, [r1, #80]	; 0x50
 800ae46:	e001      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d032      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5c:	2b03      	cmp	r3, #3
 800ae5e:	d81b      	bhi.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ae60:	a201      	add	r2, pc, #4	; (adr r2, 800ae68 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae66:	bf00      	nop
 800ae68:	0800ae9f 	.word	0x0800ae9f
 800ae6c:	0800ae79 	.word	0x0800ae79
 800ae70:	0800ae87 	.word	0x0800ae87
 800ae74:	0800ae9f 	.word	0x0800ae9f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae78:	4b92      	ldr	r3, [pc, #584]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	4a91      	ldr	r2, [pc, #580]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ae84:	e00c      	b.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	2102      	movs	r1, #2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 ff03 	bl	800bc98 <RCCEx_PLL2_Config>
 800ae92:	4603      	mov	r3, r0
 800ae94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ae96:	e003      	b.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae9c:	e000      	b.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ae9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d109      	bne.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aea6:	4b87      	ldr	r3, [pc, #540]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeaa:	f023 0203 	bic.w	r2, r3, #3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb2:	4984      	ldr	r1, [pc, #528]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aeb8:	e001      	b.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 8086 	beq.w	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aecc:	4b7e      	ldr	r3, [pc, #504]	; (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a7d      	ldr	r2, [pc, #500]	; (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800aed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aed8:	f7fc fd56 	bl	8007988 <HAL_GetTick>
 800aedc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aede:	e009      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aee0:	f7fc fd52 	bl	8007988 <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	2b64      	cmp	r3, #100	; 0x64
 800aeec:	d902      	bls.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	75fb      	strb	r3, [r7, #23]
        break;
 800aef2:	e005      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aef4:	4b74      	ldr	r3, [pc, #464]	; (800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0ef      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d166      	bne.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af06:	4b6f      	ldr	r3, [pc, #444]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af10:	4053      	eors	r3, r2
 800af12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af16:	2b00      	cmp	r3, #0
 800af18:	d013      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af1a:	4b6a      	ldr	r3, [pc, #424]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af24:	4b67      	ldr	r3, [pc, #412]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af28:	4a66      	ldr	r2, [pc, #408]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af30:	4b64      	ldr	r3, [pc, #400]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af34:	4a63      	ldr	r2, [pc, #396]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af3c:	4a61      	ldr	r2, [pc, #388]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af4c:	d115      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af4e:	f7fc fd1b 	bl	8007988 <HAL_GetTick>
 800af52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af54:	e00b      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af56:	f7fc fd17 	bl	8007988 <HAL_GetTick>
 800af5a:	4602      	mov	r2, r0
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	f241 3288 	movw	r2, #5000	; 0x1388
 800af64:	4293      	cmp	r3, r2
 800af66:	d902      	bls.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	75fb      	strb	r3, [r7, #23]
            break;
 800af6c:	e005      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af6e:	4b55      	ldr	r3, [pc, #340]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0ed      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d126      	bne.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af8e:	d10d      	bne.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800af90:	4b4c      	ldr	r3, [pc, #304]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af9e:	0919      	lsrs	r1, r3, #4
 800afa0:	4b4a      	ldr	r3, [pc, #296]	; (800b0cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800afa2:	400b      	ands	r3, r1
 800afa4:	4947      	ldr	r1, [pc, #284]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	610b      	str	r3, [r1, #16]
 800afaa:	e005      	b.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800afac:	4b45      	ldr	r3, [pc, #276]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	4a44      	ldr	r2, [pc, #272]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afb6:	6113      	str	r3, [r2, #16]
 800afb8:	4b42      	ldr	r3, [pc, #264]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afc6:	493f      	ldr	r1, [pc, #252]	; (800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800afc8:	4313      	orrs	r3, r2
 800afca:	670b      	str	r3, [r1, #112]	; 0x70
 800afcc:	e004      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	75bb      	strb	r3, [r7, #22]
 800afd2:	e001      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd4:	7dfb      	ldrb	r3, [r7, #23]
 800afd6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 8085 	beq.w	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afea:	2b28      	cmp	r3, #40	; 0x28
 800afec:	d866      	bhi.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800afee:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b0d1 	.word	0x0800b0d1
 800aff8:	0800b0bd 	.word	0x0800b0bd
 800affc:	0800b0bd 	.word	0x0800b0bd
 800b000:	0800b0bd 	.word	0x0800b0bd
 800b004:	0800b0bd 	.word	0x0800b0bd
 800b008:	0800b0bd 	.word	0x0800b0bd
 800b00c:	0800b0bd 	.word	0x0800b0bd
 800b010:	0800b0bd 	.word	0x0800b0bd
 800b014:	0800b099 	.word	0x0800b099
 800b018:	0800b0bd 	.word	0x0800b0bd
 800b01c:	0800b0bd 	.word	0x0800b0bd
 800b020:	0800b0bd 	.word	0x0800b0bd
 800b024:	0800b0bd 	.word	0x0800b0bd
 800b028:	0800b0bd 	.word	0x0800b0bd
 800b02c:	0800b0bd 	.word	0x0800b0bd
 800b030:	0800b0bd 	.word	0x0800b0bd
 800b034:	0800b0ab 	.word	0x0800b0ab
 800b038:	0800b0bd 	.word	0x0800b0bd
 800b03c:	0800b0bd 	.word	0x0800b0bd
 800b040:	0800b0bd 	.word	0x0800b0bd
 800b044:	0800b0bd 	.word	0x0800b0bd
 800b048:	0800b0bd 	.word	0x0800b0bd
 800b04c:	0800b0bd 	.word	0x0800b0bd
 800b050:	0800b0bd 	.word	0x0800b0bd
 800b054:	0800b0d1 	.word	0x0800b0d1
 800b058:	0800b0bd 	.word	0x0800b0bd
 800b05c:	0800b0bd 	.word	0x0800b0bd
 800b060:	0800b0bd 	.word	0x0800b0bd
 800b064:	0800b0bd 	.word	0x0800b0bd
 800b068:	0800b0bd 	.word	0x0800b0bd
 800b06c:	0800b0bd 	.word	0x0800b0bd
 800b070:	0800b0bd 	.word	0x0800b0bd
 800b074:	0800b0d1 	.word	0x0800b0d1
 800b078:	0800b0bd 	.word	0x0800b0bd
 800b07c:	0800b0bd 	.word	0x0800b0bd
 800b080:	0800b0bd 	.word	0x0800b0bd
 800b084:	0800b0bd 	.word	0x0800b0bd
 800b088:	0800b0bd 	.word	0x0800b0bd
 800b08c:	0800b0bd 	.word	0x0800b0bd
 800b090:	0800b0bd 	.word	0x0800b0bd
 800b094:	0800b0d1 	.word	0x0800b0d1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3304      	adds	r3, #4
 800b09c:	2101      	movs	r1, #1
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 fdfa 	bl	800bc98 <RCCEx_PLL2_Config>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b0a8:	e013      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3324      	adds	r3, #36	; 0x24
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fea3 	bl	800bdfc <RCCEx_PLL3_Config>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b0ba:	e00a      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c0:	e007      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b0c2:	bf00      	nop
 800b0c4:	58024400 	.word	0x58024400
 800b0c8:	58024800 	.word	0x58024800
 800b0cc:	00ffffcf 	.word	0x00ffffcf
      break;
 800b0d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d109      	bne.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b0d8:	4b96      	ldr	r3, [pc, #600]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0dc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0e4:	4993      	ldr	r1, [pc, #588]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	654b      	str	r3, [r1, #84]	; 0x54
 800b0ea:	e001      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
 800b0ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 0302 	and.w	r3, r3, #2
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d038      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b100:	2b05      	cmp	r3, #5
 800b102:	d821      	bhi.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b104:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800b106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800b14f 	.word	0x0800b14f
 800b110:	0800b125 	.word	0x0800b125
 800b114:	0800b137 	.word	0x0800b137
 800b118:	0800b14f 	.word	0x0800b14f
 800b11c:	0800b14f 	.word	0x0800b14f
 800b120:	0800b14f 	.word	0x0800b14f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3304      	adds	r3, #4
 800b128:	2101      	movs	r1, #1
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 fdb4 	bl	800bc98 <RCCEx_PLL2_Config>
 800b130:	4603      	mov	r3, r0
 800b132:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b134:	e00c      	b.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3324      	adds	r3, #36	; 0x24
 800b13a:	2101      	movs	r1, #1
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 fe5d 	bl	800bdfc <RCCEx_PLL3_Config>
 800b142:	4603      	mov	r3, r0
 800b144:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b146:	e003      	b.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	75fb      	strb	r3, [r7, #23]
      break;
 800b14c:	e000      	b.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800b14e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d109      	bne.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b156:	4b77      	ldr	r3, [pc, #476]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15a:	f023 0207 	bic.w	r2, r3, #7
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b162:	4974      	ldr	r1, [pc, #464]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b164:	4313      	orrs	r3, r2
 800b166:	654b      	str	r3, [r1, #84]	; 0x54
 800b168:	e001      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0304 	and.w	r3, r3, #4
 800b176:	2b00      	cmp	r3, #0
 800b178:	d03a      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b180:	2b05      	cmp	r3, #5
 800b182:	d821      	bhi.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b184:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1cf 	.word	0x0800b1cf
 800b190:	0800b1a5 	.word	0x0800b1a5
 800b194:	0800b1b7 	.word	0x0800b1b7
 800b198:	0800b1cf 	.word	0x0800b1cf
 800b19c:	0800b1cf 	.word	0x0800b1cf
 800b1a0:	0800b1cf 	.word	0x0800b1cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fd74 	bl	800bc98 <RCCEx_PLL2_Config>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b1b4:	e00c      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3324      	adds	r3, #36	; 0x24
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fe1d 	bl	800bdfc <RCCEx_PLL3_Config>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b1c6:	e003      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b1cc:	e000      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b1ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1d0:	7dfb      	ldrb	r3, [r7, #23]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1d6:	4b57      	ldr	r3, [pc, #348]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1da:	f023 0207 	bic.w	r2, r3, #7
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1e4:	4953      	ldr	r1, [pc, #332]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	658b      	str	r3, [r1, #88]	; 0x58
 800b1ea:	e001      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ec:	7dfb      	ldrb	r3, [r7, #23]
 800b1ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0320 	and.w	r3, r3, #32
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d04b      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b206:	d02e      	beq.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b20c:	d828      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b20e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b212:	d02a      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b218:	d822      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b21a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b21e:	d026      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b220:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b224:	d81c      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b22a:	d010      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b22c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b230:	d816      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d01d      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b23a:	d111      	bne.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3304      	adds	r3, #4
 800b240:	2100      	movs	r1, #0
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fd28 	bl	800bc98 <RCCEx_PLL2_Config>
 800b248:	4603      	mov	r3, r0
 800b24a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b24c:	e012      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3324      	adds	r3, #36	; 0x24
 800b252:	2102      	movs	r1, #2
 800b254:	4618      	mov	r0, r3
 800b256:	f000 fdd1 	bl	800bdfc <RCCEx_PLL3_Config>
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b25e:	e009      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	75fb      	strb	r3, [r7, #23]
      break;
 800b264:	e006      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b266:	bf00      	nop
 800b268:	e004      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b26a:	bf00      	nop
 800b26c:	e002      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b26e:	bf00      	nop
 800b270:	e000      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b272:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10a      	bne.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b27a:	4b2e      	ldr	r3, [pc, #184]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b288:	492a      	ldr	r1, [pc, #168]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	654b      	str	r3, [r1, #84]	; 0x54
 800b28e:	e001      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b290:	7dfb      	ldrb	r3, [r7, #23]
 800b292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d04d      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b2aa:	d02e      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b2ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b2b0:	d828      	bhi.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b6:	d02a      	beq.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2bc:	d822      	bhi.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b2be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2c2:	d026      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b2c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2c8:	d81c      	bhi.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b2ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ce:	d010      	beq.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b2d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2d4:	d816      	bhi.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d01d      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b2da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2de:	d111      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 fcd6 	bl	800bc98 <RCCEx_PLL2_Config>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b2f0:	e012      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3324      	adds	r3, #36	; 0x24
 800b2f6:	2102      	movs	r1, #2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 fd7f 	bl	800bdfc <RCCEx_PLL3_Config>
 800b2fe:	4603      	mov	r3, r0
 800b300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b302:	e009      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	75fb      	strb	r3, [r7, #23]
      break;
 800b308:	e006      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b30a:	bf00      	nop
 800b30c:	e004      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b30e:	bf00      	nop
 800b310:	e002      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b312:	bf00      	nop
 800b314:	e000      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b316:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10c      	bne.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b31e:	4b05      	ldr	r3, [pc, #20]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b322:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b32c:	4901      	ldr	r1, [pc, #4]	; (800b334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	658b      	str	r3, [r1, #88]	; 0x58
 800b332:	e003      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b344:	2b00      	cmp	r3, #0
 800b346:	d04b      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b34e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b352:	d02e      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b354:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b358:	d828      	bhi.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b35a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b35e:	d02a      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b364:	d822      	bhi.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b366:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b36a:	d026      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b36c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b370:	d81c      	bhi.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b376:	d010      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b37c:	d816      	bhi.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d01d      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b386:	d111      	bne.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3304      	adds	r3, #4
 800b38c:	2100      	movs	r1, #0
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fc82 	bl	800bc98 <RCCEx_PLL2_Config>
 800b394:	4603      	mov	r3, r0
 800b396:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b398:	e012      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3324      	adds	r3, #36	; 0x24
 800b39e:	2102      	movs	r1, #2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fd2b 	bl	800bdfc <RCCEx_PLL3_Config>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b3aa:	e009      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b0:	e006      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b3b2:	bf00      	nop
 800b3b4:	e004      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b3b6:	bf00      	nop
 800b3b8:	e002      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b3ba:	bf00      	nop
 800b3bc:	e000      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b3be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10a      	bne.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b3c6:	4b9d      	ldr	r3, [pc, #628]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3d4:	4999      	ldr	r1, [pc, #612]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	658b      	str	r3, [r1, #88]	; 0x58
 800b3da:	e001      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0308 	and.w	r3, r3, #8
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d01a      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3f6:	d10a      	bne.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3324      	adds	r3, #36	; 0x24
 800b3fc:	2102      	movs	r1, #2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 fcfc 	bl	800bdfc <RCCEx_PLL3_Config>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b40e:	4b8b      	ldr	r3, [pc, #556]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b412:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b41c:	4987      	ldr	r1, [pc, #540]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 0310 	and.w	r3, r3, #16
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d01a      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b438:	d10a      	bne.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3324      	adds	r3, #36	; 0x24
 800b43e:	2102      	movs	r1, #2
 800b440:	4618      	mov	r0, r3
 800b442:	f000 fcdb 	bl	800bdfc <RCCEx_PLL3_Config>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b450:	4b7a      	ldr	r3, [pc, #488]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b45e:	4977      	ldr	r1, [pc, #476]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b460:	4313      	orrs	r3, r2
 800b462:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d034      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b47a:	d01d      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b47c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b480:	d817      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b48a:	d009      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b48c:	e011      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3304      	adds	r3, #4
 800b492:	2100      	movs	r1, #0
 800b494:	4618      	mov	r0, r3
 800b496:	f000 fbff 	bl	800bc98 <RCCEx_PLL2_Config>
 800b49a:	4603      	mov	r3, r0
 800b49c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b49e:	e00c      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3324      	adds	r3, #36	; 0x24
 800b4a4:	2102      	movs	r1, #2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 fca8 	bl	800bdfc <RCCEx_PLL3_Config>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b4b0:	e003      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b4b6:	e000      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b4b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10a      	bne.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b4c0:	4b5e      	ldr	r3, [pc, #376]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b4ce:	495b      	ldr	r1, [pc, #364]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	658b      	str	r3, [r1, #88]	; 0x58
 800b4d4:	e001      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d033      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4f0:	d01c      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b4f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4f6:	d816      	bhi.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b4f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4fc:	d003      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b4fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b502:	d007      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b504:	e00f      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b506:	4b4d      	ldr	r3, [pc, #308]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50a:	4a4c      	ldr	r2, [pc, #304]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b512:	e00c      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3324      	adds	r3, #36	; 0x24
 800b518:	2101      	movs	r1, #1
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 fc6e 	bl	800bdfc <RCCEx_PLL3_Config>
 800b520:	4603      	mov	r3, r0
 800b522:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b524:	e003      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	75fb      	strb	r3, [r7, #23]
      break;
 800b52a:	e000      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b52c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b534:	4b41      	ldr	r3, [pc, #260]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b542:	493e      	ldr	r1, [pc, #248]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b544:	4313      	orrs	r3, r2
 800b546:	654b      	str	r3, [r1, #84]	; 0x54
 800b548:	e001      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d029      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b566:	d007      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b568:	e00f      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b56a:	4b34      	ldr	r3, [pc, #208]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56e:	4a33      	ldr	r2, [pc, #204]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b576:	e00b      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3304      	adds	r3, #4
 800b57c:	2102      	movs	r1, #2
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 fb8a 	bl	800bc98 <RCCEx_PLL2_Config>
 800b584:	4603      	mov	r3, r0
 800b586:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b588:	e002      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]
      break;
 800b58e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d109      	bne.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b596:	4b29      	ldr	r3, [pc, #164]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b59a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a2:	4926      	ldr	r1, [pc, #152]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b5a8:	e001      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3324      	adds	r3, #36	; 0x24
 800b5be:	2102      	movs	r1, #2
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 fc1b 	bl	800bdfc <RCCEx_PLL3_Config>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d033      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5e4:	d017      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b5e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ea:	d811      	bhi.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b5ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f0:	d013      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b5f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f6:	d80b      	bhi.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d010      	beq.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b5fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b600:	d106      	bne.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b602:	4b0e      	ldr	r3, [pc, #56]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b606:	4a0d      	ldr	r2, [pc, #52]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b60c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b60e:	e007      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	75fb      	strb	r3, [r7, #23]
      break;
 800b614:	e004      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b616:	bf00      	nop
 800b618:	e002      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b61a:	bf00      	nop
 800b61c:	e000      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b61e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10c      	bne.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b626:	4b05      	ldr	r3, [pc, #20]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b632:	4902      	ldr	r1, [pc, #8]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b634:	4313      	orrs	r3, r2
 800b636:	654b      	str	r3, [r1, #84]	; 0x54
 800b638:	e004      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b63a:	bf00      	nop
 800b63c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b640:	7dfb      	ldrb	r3, [r7, #23]
 800b642:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d008      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b650:	4b31      	ldr	r3, [pc, #196]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b654:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65c:	492e      	ldr	r1, [pc, #184]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d009      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b66e:	4b2a      	ldr	r3, [pc, #168]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b67c:	4926      	ldr	r1, [pc, #152]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b67e:	4313      	orrs	r3, r2
 800b680:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d008      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b68e:	4b22      	ldr	r3, [pc, #136]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b692:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b69a:	491f      	ldr	r1, [pc, #124]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b69c:	4313      	orrs	r3, r2
 800b69e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00d      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b6ac:	4b1a      	ldr	r3, [pc, #104]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	4a19      	ldr	r2, [pc, #100]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b6b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b6b6:	6113      	str	r3, [r2, #16]
 800b6b8:	4b17      	ldr	r3, [pc, #92]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b6ba:	691a      	ldr	r2, [r3, #16]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b6c2:	4915      	ldr	r1, [pc, #84]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	da08      	bge.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b6d0:	4b11      	ldr	r3, [pc, #68]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6dc:	490e      	ldr	r1, [pc, #56]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d009      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b6ee:	4b0a      	ldr	r3, [pc, #40]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6fc:	4906      	ldr	r1, [pc, #24]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b6fe:	4313      	orrs	r3, r2
 800b700:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b702:	7dbb      	ldrb	r3, [r7, #22]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	e000      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	58024400 	.word	0x58024400

0800b71c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b720:	f7ff f818 	bl	800a754 <HAL_RCC_GetHCLKFreq>
 800b724:	4602      	mov	r2, r0
 800b726:	4b06      	ldr	r3, [pc, #24]	; (800b740 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	091b      	lsrs	r3, r3, #4
 800b72c:	f003 0307 	and.w	r3, r3, #7
 800b730:	4904      	ldr	r1, [pc, #16]	; (800b744 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b732:	5ccb      	ldrb	r3, [r1, r3]
 800b734:	f003 031f 	and.w	r3, r3, #31
 800b738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	58024400 	.word	0x58024400
 800b744:	08010ef4 	.word	0x08010ef4

0800b748 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b748:	b480      	push	{r7}
 800b74a:	b089      	sub	sp, #36	; 0x24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b750:	4ba1      	ldr	r3, [pc, #644]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b754:	f003 0303 	and.w	r3, r3, #3
 800b758:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b75a:	4b9f      	ldr	r3, [pc, #636]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b75e:	0b1b      	lsrs	r3, r3, #12
 800b760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b764:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b766:	4b9c      	ldr	r3, [pc, #624]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76a:	091b      	lsrs	r3, r3, #4
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b772:	4b99      	ldr	r3, [pc, #612]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b776:	08db      	lsrs	r3, r3, #3
 800b778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	fb02 f303 	mul.w	r3, r2, r3
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 8111 	beq.w	800b9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	f000 8083 	beq.w	800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	f200 80a1 	bhi.w	800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d056      	beq.n	800b860 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b7b2:	e099      	b.n	800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7b4:	4b88      	ldr	r3, [pc, #544]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0320 	and.w	r3, r3, #32
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d02d      	beq.n	800b81c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b7c0:	4b85      	ldr	r3, [pc, #532]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	08db      	lsrs	r3, r3, #3
 800b7c6:	f003 0303 	and.w	r3, r3, #3
 800b7ca:	4a84      	ldr	r2, [pc, #528]	; (800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	ee07 3a90 	vmov	s15, r3
 800b7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ea:	4b7b      	ldr	r3, [pc, #492]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b816:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b81a:	e087      	b.n	800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	ee07 3a90 	vmov	s15, r3
 800b822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b82e:	4b6a      	ldr	r3, [pc, #424]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b836:	ee07 3a90 	vmov	s15, r3
 800b83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b83e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b842:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b84e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b85e:	e065      	b.n	800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b872:	4b59      	ldr	r3, [pc, #356]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b882:	ed97 6a03 	vldr	s12, [r7, #12]
 800b886:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b89e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8a2:	e043      	b.n	800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	ee07 3a90 	vmov	s15, r3
 800b8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b9ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8b6:	4b48      	ldr	r3, [pc, #288]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8be:	ee07 3a90 	vmov	s15, r3
 800b8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8e6:	e021      	b.n	800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	ee07 3a90 	vmov	s15, r3
 800b8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8fa:	4b37      	ldr	r3, [pc, #220]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b902:	ee07 3a90 	vmov	s15, r3
 800b906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b90e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b91a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b92a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b92c:	4b2a      	ldr	r3, [pc, #168]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b930:	0a5b      	lsrs	r3, r3, #9
 800b932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b936:	ee07 3a90 	vmov	s15, r3
 800b93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b942:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b946:	edd7 6a07 	vldr	s13, [r7, #28]
 800b94a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b94e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b952:	ee17 2a90 	vmov	r2, s15
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b95a:	4b1f      	ldr	r3, [pc, #124]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95e:	0c1b      	lsrs	r3, r3, #16
 800b960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b964:	ee07 3a90 	vmov	s15, r3
 800b968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b970:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b974:	edd7 6a07 	vldr	s13, [r7, #28]
 800b978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b97c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b980:	ee17 2a90 	vmov	r2, s15
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b988:	4b13      	ldr	r3, [pc, #76]	; (800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98c:	0e1b      	lsrs	r3, r3, #24
 800b98e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b992:	ee07 3a90 	vmov	s15, r3
 800b996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b99e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ae:	ee17 2a90 	vmov	r2, s15
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b9b6:	e008      	b.n	800b9ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	609a      	str	r2, [r3, #8]
}
 800b9ca:	bf00      	nop
 800b9cc:	3724      	adds	r7, #36	; 0x24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	58024400 	.word	0x58024400
 800b9dc:	03d09000 	.word	0x03d09000
 800b9e0:	46000000 	.word	0x46000000
 800b9e4:	4c742400 	.word	0x4c742400
 800b9e8:	4a742400 	.word	0x4a742400
 800b9ec:	4af42400 	.word	0x4af42400

0800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b089      	sub	sp, #36	; 0x24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9f8:	4ba1      	ldr	r3, [pc, #644]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fc:	f003 0303 	and.w	r3, r3, #3
 800ba00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ba02:	4b9f      	ldr	r3, [pc, #636]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba06:	0d1b      	lsrs	r3, r3, #20
 800ba08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ba0e:	4b9c      	ldr	r3, [pc, #624]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba12:	0a1b      	lsrs	r3, r3, #8
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ba1a:	4b99      	ldr	r3, [pc, #612]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba1e:	08db      	lsrs	r3, r3, #3
 800ba20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	fb02 f303 	mul.w	r3, r2, r3
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 8111 	beq.w	800bc60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	f000 8083 	beq.w	800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	f200 80a1 	bhi.w	800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d056      	beq.n	800bb08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ba5a:	e099      	b.n	800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba5c:	4b88      	ldr	r3, [pc, #544]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0320 	and.w	r3, r3, #32
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d02d      	beq.n	800bac4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba68:	4b85      	ldr	r3, [pc, #532]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	08db      	lsrs	r3, r3, #3
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	4a84      	ldr	r2, [pc, #528]	; (800bc84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba74:	fa22 f303 	lsr.w	r3, r2, r3
 800ba78:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	ee07 3a90 	vmov	s15, r3
 800ba80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba92:	4b7b      	ldr	r3, [pc, #492]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9a:	ee07 3a90 	vmov	s15, r3
 800ba9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800baa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800babe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bac2:	e087      	b.n	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	ee07 3a90 	vmov	s15, r3
 800baca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bace:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad6:	4b6a      	ldr	r3, [pc, #424]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb06:	e065      	b.n	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	ee07 3a90 	vmov	s15, r3
 800bb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb1a:	4b59      	ldr	r3, [pc, #356]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb4a:	e043      	b.n	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	ee07 3a90 	vmov	s15, r3
 800bb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5e:	4b48      	ldr	r3, [pc, #288]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb66:	ee07 3a90 	vmov	s15, r3
 800bb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb72:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb8e:	e021      	b.n	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba2:	4b37      	ldr	r3, [pc, #220]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbaa:	ee07 3a90 	vmov	s15, r3
 800bbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bbd4:	4b2a      	ldr	r3, [pc, #168]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd8:	0a5b      	lsrs	r3, r3, #9
 800bbda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbde:	ee07 3a90 	vmov	s15, r3
 800bbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbee:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbfa:	ee17 2a90 	vmov	r2, s15
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bc02:	4b1f      	ldr	r3, [pc, #124]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	0c1b      	lsrs	r3, r3, #16
 800bc08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc0c:	ee07 3a90 	vmov	s15, r3
 800bc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc28:	ee17 2a90 	vmov	r2, s15
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bc30:	4b13      	ldr	r3, [pc, #76]	; (800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc34:	0e1b      	lsrs	r3, r3, #24
 800bc36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc3a:	ee07 3a90 	vmov	s15, r3
 800bc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc56:	ee17 2a90 	vmov	r2, s15
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc5e:	e008      	b.n	800bc72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	609a      	str	r2, [r3, #8]
}
 800bc72:	bf00      	nop
 800bc74:	3724      	adds	r7, #36	; 0x24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	58024400 	.word	0x58024400
 800bc84:	03d09000 	.word	0x03d09000
 800bc88:	46000000 	.word	0x46000000
 800bc8c:	4c742400 	.word	0x4c742400
 800bc90:	4a742400 	.word	0x4a742400
 800bc94:	4af42400 	.word	0x4af42400

0800bc98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bca6:	4b53      	ldr	r3, [pc, #332]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcaa:	f003 0303 	and.w	r3, r3, #3
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d101      	bne.n	800bcb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e099      	b.n	800bdea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bcb6:	4b4f      	ldr	r3, [pc, #316]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a4e      	ldr	r2, [pc, #312]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bcbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcc2:	f7fb fe61 	bl	8007988 <HAL_GetTick>
 800bcc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bcc8:	e008      	b.n	800bcdc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bcca:	f7fb fe5d 	bl	8007988 <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d901      	bls.n	800bcdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e086      	b.n	800bdea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bcdc:	4b45      	ldr	r3, [pc, #276]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1f0      	bne.n	800bcca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bce8:	4b42      	ldr	r3, [pc, #264]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	031b      	lsls	r3, r3, #12
 800bcf6:	493f      	ldr	r1, [pc, #252]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	628b      	str	r3, [r1, #40]	; 0x28
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	025b      	lsls	r3, r3, #9
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	431a      	orrs	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	3b01      	subs	r3, #1
 800bd18:	041b      	lsls	r3, r3, #16
 800bd1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	061b      	lsls	r3, r3, #24
 800bd28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd2c:	4931      	ldr	r1, [pc, #196]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd32:	4b30      	ldr	r3, [pc, #192]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	492d      	ldr	r1, [pc, #180]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd44:	4b2b      	ldr	r3, [pc, #172]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	f023 0220 	bic.w	r2, r3, #32
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	699b      	ldr	r3, [r3, #24]
 800bd50:	4928      	ldr	r1, [pc, #160]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd56:	4b27      	ldr	r3, [pc, #156]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5a:	4a26      	ldr	r2, [pc, #152]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd5c:	f023 0310 	bic.w	r3, r3, #16
 800bd60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd62:	4b24      	ldr	r3, [pc, #144]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd66:	4b24      	ldr	r3, [pc, #144]	; (800bdf8 <RCCEx_PLL2_Config+0x160>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	69d2      	ldr	r2, [r2, #28]
 800bd6e:	00d2      	lsls	r2, r2, #3
 800bd70:	4920      	ldr	r1, [pc, #128]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bd76:	4b1f      	ldr	r3, [pc, #124]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7a:	4a1e      	ldr	r2, [pc, #120]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd7c:	f043 0310 	orr.w	r3, r3, #16
 800bd80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d106      	bne.n	800bd96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bd88:	4b1a      	ldr	r3, [pc, #104]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	4a19      	ldr	r2, [pc, #100]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd94:	e00f      	b.n	800bdb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d106      	bne.n	800bdaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bd9c:	4b15      	ldr	r3, [pc, #84]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda0:	4a14      	ldr	r2, [pc, #80]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bda2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bda6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bda8:	e005      	b.n	800bdb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bdaa:	4b12      	ldr	r3, [pc, #72]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	4a11      	ldr	r2, [pc, #68]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bdb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a0e      	ldr	r2, [pc, #56]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bdbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bdc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdc2:	f7fb fde1 	bl	8007988 <HAL_GetTick>
 800bdc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bdc8:	e008      	b.n	800bddc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bdca:	f7fb fddd 	bl	8007988 <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d901      	bls.n	800bddc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdd8:	2303      	movs	r3, #3
 800bdda:	e006      	b.n	800bdea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bddc:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <RCCEx_PLL2_Config+0x15c>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0f0      	beq.n	800bdca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	58024400 	.word	0x58024400
 800bdf8:	ffff0007 	.word	0xffff0007

0800bdfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be0a:	4b53      	ldr	r3, [pc, #332]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800be0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0e:	f003 0303 	and.w	r3, r3, #3
 800be12:	2b03      	cmp	r3, #3
 800be14:	d101      	bne.n	800be1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e099      	b.n	800bf4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800be1a:	4b4f      	ldr	r3, [pc, #316]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a4e      	ldr	r2, [pc, #312]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800be20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be26:	f7fb fdaf 	bl	8007988 <HAL_GetTick>
 800be2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be2c:	e008      	b.n	800be40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800be2e:	f7fb fdab 	bl	8007988 <HAL_GetTick>
 800be32:	4602      	mov	r2, r0
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	2b02      	cmp	r3, #2
 800be3a:	d901      	bls.n	800be40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e086      	b.n	800bf4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be40:	4b45      	ldr	r3, [pc, #276]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1f0      	bne.n	800be2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be4c:	4b42      	ldr	r3, [pc, #264]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800be4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	051b      	lsls	r3, r3, #20
 800be5a:	493f      	ldr	r1, [pc, #252]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800be5c:	4313      	orrs	r3, r2
 800be5e:	628b      	str	r3, [r1, #40]	; 0x28
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	3b01      	subs	r3, #1
 800be66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	3b01      	subs	r3, #1
 800be70:	025b      	lsls	r3, r3, #9
 800be72:	b29b      	uxth	r3, r3
 800be74:	431a      	orrs	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	041b      	lsls	r3, r3, #16
 800be7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be82:	431a      	orrs	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	3b01      	subs	r3, #1
 800be8a:	061b      	lsls	r3, r3, #24
 800be8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be90:	4931      	ldr	r1, [pc, #196]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800be92:	4313      	orrs	r3, r2
 800be94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800be96:	4b30      	ldr	r3, [pc, #192]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800be98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	492d      	ldr	r1, [pc, #180]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bea4:	4313      	orrs	r3, r2
 800bea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bea8:	4b2b      	ldr	r3, [pc, #172]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	4928      	ldr	r1, [pc, #160]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800beb6:	4313      	orrs	r3, r2
 800beb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800beba:	4b27      	ldr	r3, [pc, #156]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebe:	4a26      	ldr	r2, [pc, #152]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bec6:	4b24      	ldr	r3, [pc, #144]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beca:	4b24      	ldr	r3, [pc, #144]	; (800bf5c <RCCEx_PLL3_Config+0x160>)
 800becc:	4013      	ands	r3, r2
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	69d2      	ldr	r2, [r2, #28]
 800bed2:	00d2      	lsls	r2, r2, #3
 800bed4:	4920      	ldr	r1, [pc, #128]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800beda:	4b1f      	ldr	r3, [pc, #124]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bede:	4a1e      	ldr	r2, [pc, #120]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d106      	bne.n	800befa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800beec:	4b1a      	ldr	r3, [pc, #104]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800beee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef0:	4a19      	ldr	r2, [pc, #100]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bef8:	e00f      	b.n	800bf1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d106      	bne.n	800bf0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bf00:	4b15      	ldr	r3, [pc, #84]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	4a14      	ldr	r2, [pc, #80]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bf06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf0c:	e005      	b.n	800bf1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bf0e:	4b12      	ldr	r3, [pc, #72]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf12:	4a11      	ldr	r2, [pc, #68]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bf14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bf1a:	4b0f      	ldr	r3, [pc, #60]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a0e      	ldr	r2, [pc, #56]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bf20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf26:	f7fb fd2f 	bl	8007988 <HAL_GetTick>
 800bf2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf2c:	e008      	b.n	800bf40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bf2e:	f7fb fd2b 	bl	8007988 <HAL_GetTick>
 800bf32:	4602      	mov	r2, r0
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d901      	bls.n	800bf40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e006      	b.n	800bf4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf40:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <RCCEx_PLL3_Config+0x15c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0f0      	beq.n	800bf2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	58024400 	.word	0x58024400
 800bf5c:	ffff0007 	.word	0xffff0007

0800bf60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d067      	beq.n	800c042 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7fb f99e 	bl	80072c8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	22ca      	movs	r2, #202	; 0xca
 800bf9a:	625a      	str	r2, [r3, #36]	; 0x24
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2253      	movs	r2, #83	; 0x53
 800bfa2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa49 	bl	800c43c <RTC_EnterInitMode>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d13b      	bne.n	800c02c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6899      	ldr	r1, [r3, #8]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	4b23      	ldr	r3, [pc, #140]	; (800c04c <HAL_RTC_Init+0xec>)
 800bfc0:	400b      	ands	r3, r1
 800bfc2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6899      	ldr	r1, [r3, #8]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	431a      	orrs	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	0419      	lsls	r1, r3, #16
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68da      	ldr	r2, [r3, #12]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	430a      	orrs	r2, r1
 800bff2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa55 	bl	800c4a4 <RTC_ExitInitMode>
 800bffa:	4603      	mov	r3, r0
 800bffc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d113      	bne.n	800c02c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f022 0203 	bic.w	r2, r2, #3
 800c012:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	69da      	ldr	r2, [r3, #28]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	431a      	orrs	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	22ff      	movs	r2, #255	; 0xff
 800c032:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c034:	7bfb      	ldrb	r3, [r7, #15]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d103      	bne.n	800c042 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c042:	7bfb      	ldrb	r3, [r7, #15]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	ff8fffbf 	.word	0xff8fffbf

0800c050 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c062:	2b01      	cmp	r3, #1
 800c064:	d101      	bne.n	800c06a <HAL_RTC_SetTime+0x1a>
 800c066:	2302      	movs	r3, #2
 800c068:	e089      	b.n	800c17e <HAL_RTC_SetTime+0x12e>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2202      	movs	r2, #2
 800c076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	22ca      	movs	r2, #202	; 0xca
 800c080:	625a      	str	r2, [r3, #36]	; 0x24
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2253      	movs	r2, #83	; 0x53
 800c088:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f000 f9d6 	bl	800c43c <RTC_EnterInitMode>
 800c090:	4603      	mov	r3, r0
 800c092:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c094:	7cfb      	ldrb	r3, [r7, #19]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d161      	bne.n	800c15e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d126      	bne.n	800c0ee <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d102      	bne.n	800c0b4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f000 fa31 	bl	800c520 <RTC_ByteToBcd2>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	785b      	ldrb	r3, [r3, #1]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fa2a 	bl	800c520 <RTC_ByteToBcd2>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0d0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	789b      	ldrb	r3, [r3, #2]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 fa22 	bl	800c520 <RTC_ByteToBcd2>
 800c0dc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c0de:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	78db      	ldrb	r3, [r3, #3]
 800c0e6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	617b      	str	r3, [r7, #20]
 800c0ec:	e018      	b.n	800c120 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d102      	bne.n	800c102 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2200      	movs	r2, #0
 800c100:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	785b      	ldrb	r3, [r3, #1]
 800c10c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c10e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c114:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	78db      	ldrb	r3, [r3, #3]
 800c11a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c11c:	4313      	orrs	r3, r2
 800c11e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	6979      	ldr	r1, [r7, #20]
 800c126:	4b18      	ldr	r3, [pc, #96]	; (800c188 <HAL_RTC_SetTime+0x138>)
 800c128:	400b      	ands	r3, r1
 800c12a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	689a      	ldr	r2, [r3, #8]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c13a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6899      	ldr	r1, [r3, #8]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	68da      	ldr	r2, [r3, #12]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	431a      	orrs	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	430a      	orrs	r2, r1
 800c152:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 f9a5 	bl	800c4a4 <RTC_ExitInitMode>
 800c15a:	4603      	mov	r3, r0
 800c15c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	22ff      	movs	r2, #255	; 0xff
 800c164:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c166:	7cfb      	ldrb	r3, [r7, #19]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d103      	bne.n	800c174 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c17c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	bd90      	pop	{r4, r7, pc}
 800c186:	bf00      	nop
 800c188:	007f7f7f 	.word	0x007f7f7f

0800c18c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	4b22      	ldr	r3, [pc, #136]	; (800c240 <HAL_RTC_GetTime+0xb4>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	0c1b      	lsrs	r3, r3, #16
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	0a1b      	lsrs	r3, r3, #8
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	0d9b      	lsrs	r3, r3, #22
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d11a      	bne.n	800c236 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	4618      	mov	r0, r3
 800c206:	f000 f9ab 	bl	800c560 <RTC_Bcd2ToByte>
 800c20a:	4603      	mov	r3, r0
 800c20c:	461a      	mov	r2, r3
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	4618      	mov	r0, r3
 800c218:	f000 f9a2 	bl	800c560 <RTC_Bcd2ToByte>
 800c21c:	4603      	mov	r3, r0
 800c21e:	461a      	mov	r2, r3
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	789b      	ldrb	r3, [r3, #2]
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 f999 	bl	800c560 <RTC_Bcd2ToByte>
 800c22e:	4603      	mov	r3, r0
 800c230:	461a      	mov	r2, r3
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	007f7f7f 	.word	0x007f7f7f

0800c244 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c244:	b590      	push	{r4, r7, lr}
 800c246:	b087      	sub	sp, #28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d101      	bne.n	800c25e <HAL_RTC_SetDate+0x1a>
 800c25a:	2302      	movs	r3, #2
 800c25c:	e073      	b.n	800c346 <HAL_RTC_SetDate+0x102>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2202      	movs	r2, #2
 800c26a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10e      	bne.n	800c292 <HAL_RTC_SetDate+0x4e>
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	785b      	ldrb	r3, [r3, #1]
 800c278:	f003 0310 	and.w	r3, r3, #16
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d008      	beq.n	800c292 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	785b      	ldrb	r3, [r3, #1]
 800c284:	f023 0310 	bic.w	r3, r3, #16
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	330a      	adds	r3, #10
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d11c      	bne.n	800c2d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	78db      	ldrb	r3, [r3, #3]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 f93f 	bl	800c520 <RTC_ByteToBcd2>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	785b      	ldrb	r3, [r3, #1]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f938 	bl	800c520 <RTC_ByteToBcd2>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2b4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	789b      	ldrb	r3, [r3, #2]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 f930 	bl	800c520 <RTC_ByteToBcd2>
 800c2c0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2c2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e00e      	b.n	800c2f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	78db      	ldrb	r3, [r3, #3]
 800c2d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	785b      	ldrb	r3, [r3, #1]
 800c2dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c2e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	22ca      	movs	r2, #202	; 0xca
 800c2f6:	625a      	str	r2, [r3, #36]	; 0x24
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2253      	movs	r2, #83	; 0x53
 800c2fe:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 f89b 	bl	800c43c <RTC_EnterInitMode>
 800c306:	4603      	mov	r3, r0
 800c308:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c30a:	7cfb      	ldrb	r3, [r7, #19]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10a      	bne.n	800c326 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	6979      	ldr	r1, [r7, #20]
 800c316:	4b0e      	ldr	r3, [pc, #56]	; (800c350 <HAL_RTC_SetDate+0x10c>)
 800c318:	400b      	ands	r3, r1
 800c31a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f000 f8c1 	bl	800c4a4 <RTC_ExitInitMode>
 800c322:	4603      	mov	r3, r0
 800c324:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	22ff      	movs	r2, #255	; 0xff
 800c32c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c32e:	7cfb      	ldrb	r3, [r7, #19]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c344:	7cfb      	ldrb	r3, [r7, #19]


}
 800c346:	4618      	mov	r0, r3
 800c348:	371c      	adds	r7, #28
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd90      	pop	{r4, r7, pc}
 800c34e:	bf00      	nop
 800c350:	00ffff3f 	.word	0x00ffff3f

0800c354 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	4b21      	ldr	r3, [pc, #132]	; (800c3ec <HAL_RTC_GetDate+0x98>)
 800c368:	4013      	ands	r3, r2
 800c36a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	0c1b      	lsrs	r3, r3, #16
 800c370:	b2da      	uxtb	r2, r3
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	0a1b      	lsrs	r3, r3, #8
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	f003 031f 	and.w	r3, r3, #31
 800c380:	b2da      	uxtb	r2, r3
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	0b5b      	lsrs	r3, r3, #13
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	f003 0307 	and.w	r3, r3, #7
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d11a      	bne.n	800c3e0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	78db      	ldrb	r3, [r3, #3]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 f8d6 	bl	800c560 <RTC_Bcd2ToByte>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	785b      	ldrb	r3, [r3, #1]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 f8cd 	bl	800c560 <RTC_Bcd2ToByte>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	789b      	ldrb	r3, [r3, #2]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 f8c4 	bl	800c560 <RTC_Bcd2ToByte>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	461a      	mov	r2, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	00ffff3f 	.word	0x00ffff3f

0800c3f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	68da      	ldr	r2, [r3, #12]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c406:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800c408:	f7fb fabe 	bl	8007988 <HAL_GetTick>
 800c40c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c40e:	e009      	b.n	800c424 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c410:	f7fb faba 	bl	8007988 <HAL_GetTick>
 800c414:	4602      	mov	r2, r0
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c41e:	d901      	bls.n	800c424 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800c420:	2303      	movs	r3, #3
 800c422:	e007      	b.n	800c434 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	f003 0320 	and.w	r3, r3, #32
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0ee      	beq.n	800c410 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c452:	2b00      	cmp	r3, #0
 800c454:	d120      	bne.n	800c498 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f04f 32ff 	mov.w	r2, #4294967295
 800c45e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c460:	f7fb fa92 	bl	8007988 <HAL_GetTick>
 800c464:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c466:	e00d      	b.n	800c484 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c468:	f7fb fa8e 	bl	8007988 <HAL_GetTick>
 800c46c:	4602      	mov	r2, r0
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c476:	d905      	bls.n	800c484 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c478:	2303      	movs	r3, #3
 800c47a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2203      	movs	r2, #3
 800c480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <RTC_EnterInitMode+0x5c>
 800c492:	7bfb      	ldrb	r3, [r7, #15]
 800c494:	2b03      	cmp	r3, #3
 800c496:	d1e7      	bne.n	800c468 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c4b0:	4b1a      	ldr	r3, [pc, #104]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	4a19      	ldr	r2, [pc, #100]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4ba:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c4bc:	4b17      	ldr	r3, [pc, #92]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	f003 0320 	and.w	r3, r3, #32
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10c      	bne.n	800c4e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff ff91 	bl	800c3f0 <HAL_RTC_WaitForSynchro>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01e      	beq.n	800c512 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	73fb      	strb	r3, [r7, #15]
 800c4e0:	e017      	b.n	800c512 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c4e2:	4b0e      	ldr	r3, [pc, #56]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	4a0d      	ldr	r2, [pc, #52]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4e8:	f023 0320 	bic.w	r3, r3, #32
 800c4ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7ff ff7e 	bl	800c3f0 <HAL_RTC_WaitForSynchro>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2203      	movs	r2, #3
 800c4fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c502:	2303      	movs	r3, #3
 800c504:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c506:	4b05      	ldr	r3, [pc, #20]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	4a04      	ldr	r2, [pc, #16]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c50c:	f043 0320 	orr.w	r3, r3, #32
 800c510:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c512:	7bfb      	ldrb	r3, [r7, #15]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	58004000 	.word	0x58004000

0800c520 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c52a:	2300      	movs	r3, #0
 800c52c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c52e:	79fb      	ldrb	r3, [r7, #7]
 800c530:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c532:	e005      	b.n	800c540 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c53a:	7afb      	ldrb	r3, [r7, #11]
 800c53c:	3b0a      	subs	r3, #10
 800c53e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	2b09      	cmp	r3, #9
 800c544:	d8f6      	bhi.n	800c534 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	011b      	lsls	r3, r3, #4
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	4313      	orrs	r3, r2
 800c552:	b2db      	uxtb	r3, r3
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	091b      	lsrs	r3, r3, #4
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	461a      	mov	r2, r3
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	4413      	add	r3, r2
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c57a:	79fb      	ldrb	r3, [r7, #7]
 800c57c:	f003 030f 	and.w	r3, r3, #15
 800c580:	b2da      	uxtb	r2, r3
 800c582:	7bfb      	ldrb	r3, [r7, #15]
 800c584:	4413      	add	r3, r2
 800c586:	b2db      	uxtb	r3, r3
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e049      	b.n	800c63a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d106      	bne.n	800c5c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f841 	bl	800c642 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	f000 fa00 	bl	800c9d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c64a:	bf00      	nop
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
	...

0800c658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d001      	beq.n	800c670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	e054      	b.n	800c71a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	68da      	ldr	r2, [r3, #12]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f042 0201 	orr.w	r2, r2, #1
 800c686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a26      	ldr	r2, [pc, #152]	; (800c728 <HAL_TIM_Base_Start_IT+0xd0>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d022      	beq.n	800c6d8 <HAL_TIM_Base_Start_IT+0x80>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c69a:	d01d      	beq.n	800c6d8 <HAL_TIM_Base_Start_IT+0x80>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a22      	ldr	r2, [pc, #136]	; (800c72c <HAL_TIM_Base_Start_IT+0xd4>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d018      	beq.n	800c6d8 <HAL_TIM_Base_Start_IT+0x80>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a21      	ldr	r2, [pc, #132]	; (800c730 <HAL_TIM_Base_Start_IT+0xd8>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d013      	beq.n	800c6d8 <HAL_TIM_Base_Start_IT+0x80>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a1f      	ldr	r2, [pc, #124]	; (800c734 <HAL_TIM_Base_Start_IT+0xdc>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d00e      	beq.n	800c6d8 <HAL_TIM_Base_Start_IT+0x80>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4a1e      	ldr	r2, [pc, #120]	; (800c738 <HAL_TIM_Base_Start_IT+0xe0>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d009      	beq.n	800c6d8 <HAL_TIM_Base_Start_IT+0x80>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a1c      	ldr	r2, [pc, #112]	; (800c73c <HAL_TIM_Base_Start_IT+0xe4>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d004      	beq.n	800c6d8 <HAL_TIM_Base_Start_IT+0x80>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a1b      	ldr	r2, [pc, #108]	; (800c740 <HAL_TIM_Base_Start_IT+0xe8>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d115      	bne.n	800c704 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689a      	ldr	r2, [r3, #8]
 800c6de:	4b19      	ldr	r3, [pc, #100]	; (800c744 <HAL_TIM_Base_Start_IT+0xec>)
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b06      	cmp	r3, #6
 800c6e8:	d015      	beq.n	800c716 <HAL_TIM_Base_Start_IT+0xbe>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6f0:	d011      	beq.n	800c716 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f042 0201 	orr.w	r2, r2, #1
 800c700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c702:	e008      	b.n	800c716 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f042 0201 	orr.w	r2, r2, #1
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	e000      	b.n	800c718 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c716:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	40010000 	.word	0x40010000
 800c72c:	40000400 	.word	0x40000400
 800c730:	40000800 	.word	0x40000800
 800c734:	40000c00 	.word	0x40000c00
 800c738:	40010400 	.word	0x40010400
 800c73c:	40001800 	.word	0x40001800
 800c740:	40014000 	.word	0x40014000
 800c744:	00010007 	.word	0x00010007

0800c748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	f003 0302 	and.w	r3, r3, #2
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d122      	bne.n	800c7a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f003 0302 	and.w	r3, r3, #2
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d11b      	bne.n	800c7a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f06f 0202 	mvn.w	r2, #2
 800c774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	f003 0303 	and.w	r3, r3, #3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d003      	beq.n	800c792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f905 	bl	800c99a <HAL_TIM_IC_CaptureCallback>
 800c790:	e005      	b.n	800c79e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f8f7 	bl	800c986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f908 	bl	800c9ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	f003 0304 	and.w	r3, r3, #4
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	d122      	bne.n	800c7f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b04      	cmp	r3, #4
 800c7be:	d11b      	bne.n	800c7f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f06f 0204 	mvn.w	r2, #4
 800c7c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d003      	beq.n	800c7e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f8db 	bl	800c99a <HAL_TIM_IC_CaptureCallback>
 800c7e4:	e005      	b.n	800c7f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f8cd 	bl	800c986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f8de 	bl	800c9ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	f003 0308 	and.w	r3, r3, #8
 800c802:	2b08      	cmp	r3, #8
 800c804:	d122      	bne.n	800c84c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	f003 0308 	and.w	r3, r3, #8
 800c810:	2b08      	cmp	r3, #8
 800c812:	d11b      	bne.n	800c84c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f06f 0208 	mvn.w	r2, #8
 800c81c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2204      	movs	r2, #4
 800c822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	f003 0303 	and.w	r3, r3, #3
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d003      	beq.n	800c83a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f8b1 	bl	800c99a <HAL_TIM_IC_CaptureCallback>
 800c838:	e005      	b.n	800c846 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f8a3 	bl	800c986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 f8b4 	bl	800c9ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	f003 0310 	and.w	r3, r3, #16
 800c856:	2b10      	cmp	r3, #16
 800c858:	d122      	bne.n	800c8a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	f003 0310 	and.w	r3, r3, #16
 800c864:	2b10      	cmp	r3, #16
 800c866:	d11b      	bne.n	800c8a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f06f 0210 	mvn.w	r2, #16
 800c870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2208      	movs	r2, #8
 800c876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f887 	bl	800c99a <HAL_TIM_IC_CaptureCallback>
 800c88c:	e005      	b.n	800c89a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f879 	bl	800c986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f88a 	bl	800c9ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	f003 0301 	and.w	r3, r3, #1
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d10e      	bne.n	800c8cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d107      	bne.n	800c8cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f06f 0201 	mvn.w	r2, #1
 800c8c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7fa fc46 	bl	8007158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d6:	2b80      	cmp	r3, #128	; 0x80
 800c8d8:	d10e      	bne.n	800c8f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8e4:	2b80      	cmp	r3, #128	; 0x80
 800c8e6:	d107      	bne.n	800c8f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c8f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f914 	bl	800cb20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c906:	d10e      	bne.n	800c926 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c912:	2b80      	cmp	r3, #128	; 0x80
 800c914:	d107      	bne.n	800c926 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c91e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f907 	bl	800cb34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c930:	2b40      	cmp	r3, #64	; 0x40
 800c932:	d10e      	bne.n	800c952 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c93e:	2b40      	cmp	r3, #64	; 0x40
 800c940:	d107      	bne.n	800c952 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c94a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f838 	bl	800c9c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	f003 0320 	and.w	r3, r3, #32
 800c95c:	2b20      	cmp	r3, #32
 800c95e:	d10e      	bne.n	800c97e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	f003 0320 	and.w	r3, r3, #32
 800c96a:	2b20      	cmp	r3, #32
 800c96c:	d107      	bne.n	800c97e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f06f 0220 	mvn.w	r2, #32
 800c976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f8c7 	bl	800cb0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c97e:	bf00      	nop
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c986:	b480      	push	{r7}
 800c988:	b083      	sub	sp, #12
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c98e:	bf00      	nop
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c99a:	b480      	push	{r7}
 800c99c:	b083      	sub	sp, #12
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c9a2:	bf00      	nop
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b083      	sub	sp, #12
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c9b6:	bf00      	nop
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c9ca:	bf00      	nop
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
	...

0800c9d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a40      	ldr	r2, [pc, #256]	; (800caec <TIM_Base_SetConfig+0x114>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d013      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f6:	d00f      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a3d      	ldr	r2, [pc, #244]	; (800caf0 <TIM_Base_SetConfig+0x118>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d00b      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a3c      	ldr	r2, [pc, #240]	; (800caf4 <TIM_Base_SetConfig+0x11c>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d007      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a3b      	ldr	r2, [pc, #236]	; (800caf8 <TIM_Base_SetConfig+0x120>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d003      	beq.n	800ca18 <TIM_Base_SetConfig+0x40>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a3a      	ldr	r2, [pc, #232]	; (800cafc <TIM_Base_SetConfig+0x124>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d108      	bne.n	800ca2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a2f      	ldr	r2, [pc, #188]	; (800caec <TIM_Base_SetConfig+0x114>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d01f      	beq.n	800ca72 <TIM_Base_SetConfig+0x9a>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca38:	d01b      	beq.n	800ca72 <TIM_Base_SetConfig+0x9a>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a2c      	ldr	r2, [pc, #176]	; (800caf0 <TIM_Base_SetConfig+0x118>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d017      	beq.n	800ca72 <TIM_Base_SetConfig+0x9a>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a2b      	ldr	r2, [pc, #172]	; (800caf4 <TIM_Base_SetConfig+0x11c>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d013      	beq.n	800ca72 <TIM_Base_SetConfig+0x9a>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a2a      	ldr	r2, [pc, #168]	; (800caf8 <TIM_Base_SetConfig+0x120>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d00f      	beq.n	800ca72 <TIM_Base_SetConfig+0x9a>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a29      	ldr	r2, [pc, #164]	; (800cafc <TIM_Base_SetConfig+0x124>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d00b      	beq.n	800ca72 <TIM_Base_SetConfig+0x9a>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a28      	ldr	r2, [pc, #160]	; (800cb00 <TIM_Base_SetConfig+0x128>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d007      	beq.n	800ca72 <TIM_Base_SetConfig+0x9a>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a27      	ldr	r2, [pc, #156]	; (800cb04 <TIM_Base_SetConfig+0x12c>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d003      	beq.n	800ca72 <TIM_Base_SetConfig+0x9a>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a26      	ldr	r2, [pc, #152]	; (800cb08 <TIM_Base_SetConfig+0x130>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d108      	bne.n	800ca84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	695b      	ldr	r3, [r3, #20]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	689a      	ldr	r2, [r3, #8]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4a10      	ldr	r2, [pc, #64]	; (800caec <TIM_Base_SetConfig+0x114>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d00f      	beq.n	800cad0 <TIM_Base_SetConfig+0xf8>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a12      	ldr	r2, [pc, #72]	; (800cafc <TIM_Base_SetConfig+0x124>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d00b      	beq.n	800cad0 <TIM_Base_SetConfig+0xf8>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a11      	ldr	r2, [pc, #68]	; (800cb00 <TIM_Base_SetConfig+0x128>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d007      	beq.n	800cad0 <TIM_Base_SetConfig+0xf8>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a10      	ldr	r2, [pc, #64]	; (800cb04 <TIM_Base_SetConfig+0x12c>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d003      	beq.n	800cad0 <TIM_Base_SetConfig+0xf8>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a0f      	ldr	r2, [pc, #60]	; (800cb08 <TIM_Base_SetConfig+0x130>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d103      	bne.n	800cad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	691a      	ldr	r2, [r3, #16]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	615a      	str	r2, [r3, #20]
}
 800cade:	bf00      	nop
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	40010000 	.word	0x40010000
 800caf0:	40000400 	.word	0x40000400
 800caf4:	40000800 	.word	0x40000800
 800caf8:	40000c00 	.word	0x40000c00
 800cafc:	40010400 	.word	0x40010400
 800cb00:	40014000 	.word	0x40014000
 800cb04:	40014400 	.word	0x40014400
 800cb08:	40014800 	.word	0x40014800

0800cb0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e042      	b.n	800cbe0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d106      	bne.n	800cb72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7fa fbdb 	bl	8007328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2224      	movs	r2, #36	; 0x24
 800cb76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f022 0201 	bic.w	r2, r2, #1
 800cb88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fcd6 	bl	800d53c <UART_SetConfig>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d101      	bne.n	800cb9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e022      	b.n	800cbe0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d002      	beq.n	800cba8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f001 fa32 	bl	800e00c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	689a      	ldr	r2, [r3, #8]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f042 0201 	orr.w	r2, r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f001 fab9 	bl	800e150 <UART_CheckIdleState>
 800cbde:	4603      	mov	r3, r0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08a      	sub	sp, #40	; 0x28
 800cbec:	af02      	add	r7, sp, #8
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	603b      	str	r3, [r7, #0]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	f040 8083 	bne.w	800cd0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d002      	beq.n	800cc10 <HAL_UART_Transmit+0x28>
 800cc0a:	88fb      	ldrh	r3, [r7, #6]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	e07b      	b.n	800cd0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d101      	bne.n	800cc22 <HAL_UART_Transmit+0x3a>
 800cc1e:	2302      	movs	r3, #2
 800cc20:	e074      	b.n	800cd0c <HAL_UART_Transmit+0x124>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2201      	movs	r2, #1
 800cc26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2221      	movs	r2, #33	; 0x21
 800cc36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc3a:	f7fa fea5 	bl	8007988 <HAL_GetTick>
 800cc3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	88fa      	ldrh	r2, [r7, #6]
 800cc44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	88fa      	ldrh	r2, [r7, #6]
 800cc4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc58:	d108      	bne.n	800cc6c <HAL_UART_Transmit+0x84>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d104      	bne.n	800cc6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cc62:	2300      	movs	r3, #0
 800cc64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	61bb      	str	r3, [r7, #24]
 800cc6a:	e003      	b.n	800cc74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cc7c:	e02c      	b.n	800ccd8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2200      	movs	r2, #0
 800cc86:	2180      	movs	r1, #128	; 0x80
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f001 faac 	bl	800e1e6 <UART_WaitOnFlagUntilTimeout>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cc94:	2303      	movs	r3, #3
 800cc96:	e039      	b.n	800cd0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d10b      	bne.n	800ccb6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	e007      	b.n	800ccc6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	781a      	ldrb	r2, [r3, #0]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1cc      	bne.n	800cc7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2200      	movs	r2, #0
 800ccec:	2140      	movs	r1, #64	; 0x40
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f001 fa79 	bl	800e1e6 <UART_WaitOnFlagUntilTimeout>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e006      	b.n	800cd0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2220      	movs	r2, #32
 800cd02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	e000      	b.n	800cd0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cd0a:	2302      	movs	r3, #2
  }
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3720      	adds	r7, #32
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08a      	sub	sp, #40	; 0x28
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd28:	2b20      	cmp	r3, #32
 800cd2a:	d142      	bne.n	800cdb2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d002      	beq.n	800cd38 <HAL_UART_Receive_IT+0x24>
 800cd32:	88fb      	ldrh	r3, [r7, #6]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e03b      	b.n	800cdb4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d101      	bne.n	800cd4a <HAL_UART_Receive_IT+0x36>
 800cd46:	2302      	movs	r3, #2
 800cd48:	e034      	b.n	800cdb4 <HAL_UART_Receive_IT+0xa0>
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a17      	ldr	r2, [pc, #92]	; (800cdbc <HAL_UART_Receive_IT+0xa8>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d01f      	beq.n	800cda2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d018      	beq.n	800cda2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	e853 3f00 	ldrex	r3, [r3]
 800cd7c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	623b      	str	r3, [r7, #32]
 800cd90:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd92:	69f9      	ldr	r1, [r7, #28]
 800cd94:	6a3a      	ldr	r2, [r7, #32]
 800cd96:	e841 2300 	strex	r3, r2, [r1]
 800cd9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e6      	bne.n	800cd70 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cda2:	88fb      	ldrh	r3, [r7, #6]
 800cda4:	461a      	mov	r2, r3
 800cda6:	68b9      	ldr	r1, [r7, #8]
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f001 fae5 	bl	800e378 <UART_Start_Receive_IT>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	e000      	b.n	800cdb4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cdb2:	2302      	movs	r3, #2
  }
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3728      	adds	r7, #40	; 0x28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	58000c00 	.word	0x58000c00

0800cdc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b0ba      	sub	sp, #232	; 0xe8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	69db      	ldr	r3, [r3, #28]
 800cdce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cde6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cdea:	f640 030f 	movw	r3, #2063	; 0x80f
 800cdee:	4013      	ands	r3, r2
 800cdf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cdf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d11b      	bne.n	800ce34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce00:	f003 0320 	and.w	r3, r3, #32
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d015      	beq.n	800ce34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce0c:	f003 0320 	and.w	r3, r3, #32
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d105      	bne.n	800ce20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d009      	beq.n	800ce34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 835a 	beq.w	800d4de <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	4798      	blx	r3
      }
      return;
 800ce32:	e354      	b.n	800d4de <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 811f 	beq.w	800d07c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ce3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce42:	4b8b      	ldr	r3, [pc, #556]	; (800d070 <HAL_UART_IRQHandler+0x2b0>)
 800ce44:	4013      	ands	r3, r2
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d106      	bne.n	800ce58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ce4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ce4e:	4b89      	ldr	r3, [pc, #548]	; (800d074 <HAL_UART_IRQHandler+0x2b4>)
 800ce50:	4013      	ands	r3, r2
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 8112 	beq.w	800d07c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d011      	beq.n	800ce88 <HAL_UART_IRQHandler+0xc8>
 800ce64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00b      	beq.n	800ce88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2201      	movs	r2, #1
 800ce76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce7e:	f043 0201 	orr.w	r2, r3, #1
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce8c:	f003 0302 	and.w	r3, r3, #2
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d011      	beq.n	800ceb8 <HAL_UART_IRQHandler+0xf8>
 800ce94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce98:	f003 0301 	and.w	r3, r3, #1
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00b      	beq.n	800ceb8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2202      	movs	r2, #2
 800cea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ceae:	f043 0204 	orr.w	r2, r3, #4
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ceb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cebc:	f003 0304 	and.w	r3, r3, #4
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d011      	beq.n	800cee8 <HAL_UART_IRQHandler+0x128>
 800cec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00b      	beq.n	800cee8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2204      	movs	r2, #4
 800ced6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cede:	f043 0202 	orr.w	r2, r3, #2
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceec:	f003 0308 	and.w	r3, r3, #8
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d017      	beq.n	800cf24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cef8:	f003 0320 	and.w	r3, r3, #32
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d105      	bne.n	800cf0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf04:	4b5a      	ldr	r3, [pc, #360]	; (800d070 <HAL_UART_IRQHandler+0x2b0>)
 800cf06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00b      	beq.n	800cf24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2208      	movs	r2, #8
 800cf12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf1a:	f043 0208 	orr.w	r2, r3, #8
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d012      	beq.n	800cf56 <HAL_UART_IRQHandler+0x196>
 800cf30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00c      	beq.n	800cf56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf4c:	f043 0220 	orr.w	r2, r3, #32
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f000 82c0 	beq.w	800d4e2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d013      	beq.n	800cf96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf72:	f003 0320 	and.w	r3, r3, #32
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d105      	bne.n	800cf86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d007      	beq.n	800cf96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d003      	beq.n	800cf96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfaa:	2b40      	cmp	r3, #64	; 0x40
 800cfac:	d005      	beq.n	800cfba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cfae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d04f      	beq.n	800d05a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f001 fb06 	bl	800e5cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfca:	2b40      	cmp	r3, #64	; 0x40
 800cfcc:	d141      	bne.n	800d052 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cfdc:	e853 3f00 	ldrex	r3, [r3]
 800cfe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cfe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3308      	adds	r3, #8
 800cff6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cffa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d002:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d00a:	e841 2300 	strex	r3, r2, [r1]
 800d00e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1d9      	bne.n	800cfce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d013      	beq.n	800d04a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d026:	4a14      	ldr	r2, [pc, #80]	; (800d078 <HAL_UART_IRQHandler+0x2b8>)
 800d028:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fb f8e4 	bl	80081fc <HAL_DMA_Abort_IT>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d017      	beq.n	800d06a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d044:	4610      	mov	r0, r2
 800d046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d048:	e00f      	b.n	800d06a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fa60 	bl	800d510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d050:	e00b      	b.n	800d06a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fa5c 	bl	800d510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d058:	e007      	b.n	800d06a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fa58 	bl	800d510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d068:	e23b      	b.n	800d4e2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d06a:	bf00      	nop
    return;
 800d06c:	e239      	b.n	800d4e2 <HAL_UART_IRQHandler+0x722>
 800d06e:	bf00      	nop
 800d070:	10000001 	.word	0x10000001
 800d074:	04000120 	.word	0x04000120
 800d078:	0800e699 	.word	0x0800e699

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d080:	2b01      	cmp	r3, #1
 800d082:	f040 81ce 	bne.w	800d422 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d08a:	f003 0310 	and.w	r3, r3, #16
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f000 81c7 	beq.w	800d422 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d098:	f003 0310 	and.w	r3, r3, #16
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f000 81c0 	beq.w	800d422 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2210      	movs	r2, #16
 800d0a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b4:	2b40      	cmp	r3, #64	; 0x40
 800d0b6:	f040 813b 	bne.w	800d330 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a8b      	ldr	r2, [pc, #556]	; (800d2f0 <HAL_UART_IRQHandler+0x530>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d059      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a89      	ldr	r2, [pc, #548]	; (800d2f4 <HAL_UART_IRQHandler+0x534>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d053      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a87      	ldr	r2, [pc, #540]	; (800d2f8 <HAL_UART_IRQHandler+0x538>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d04d      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a85      	ldr	r2, [pc, #532]	; (800d2fc <HAL_UART_IRQHandler+0x53c>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d047      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a83      	ldr	r2, [pc, #524]	; (800d300 <HAL_UART_IRQHandler+0x540>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d041      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a81      	ldr	r2, [pc, #516]	; (800d304 <HAL_UART_IRQHandler+0x544>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d03b      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a7f      	ldr	r2, [pc, #508]	; (800d308 <HAL_UART_IRQHandler+0x548>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d035      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a7d      	ldr	r2, [pc, #500]	; (800d30c <HAL_UART_IRQHandler+0x54c>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d02f      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a7b      	ldr	r2, [pc, #492]	; (800d310 <HAL_UART_IRQHandler+0x550>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d029      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a79      	ldr	r2, [pc, #484]	; (800d314 <HAL_UART_IRQHandler+0x554>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d023      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a77      	ldr	r2, [pc, #476]	; (800d318 <HAL_UART_IRQHandler+0x558>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d01d      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a75      	ldr	r2, [pc, #468]	; (800d31c <HAL_UART_IRQHandler+0x55c>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d017      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a73      	ldr	r2, [pc, #460]	; (800d320 <HAL_UART_IRQHandler+0x560>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d011      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a71      	ldr	r2, [pc, #452]	; (800d324 <HAL_UART_IRQHandler+0x564>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d00b      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a6f      	ldr	r2, [pc, #444]	; (800d328 <HAL_UART_IRQHandler+0x568>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d005      	beq.n	800d17a <HAL_UART_IRQHandler+0x3ba>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a6d      	ldr	r2, [pc, #436]	; (800d32c <HAL_UART_IRQHandler+0x56c>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d105      	bne.n	800d186 <HAL_UART_IRQHandler+0x3c6>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	b29b      	uxth	r3, r3
 800d184:	e004      	b.n	800d190 <HAL_UART_IRQHandler+0x3d0>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	b29b      	uxth	r3, r3
 800d190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f000 81a4 	beq.w	800d4e6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	f080 819c 	bcs.w	800d4e6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1c2:	f000 8086 	beq.w	800d2d2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1d2:	e853 3f00 	ldrex	r3, [r3]
 800d1d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d1da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d1f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d1f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d1fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d200:	e841 2300 	strex	r3, r2, [r1]
 800d204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1da      	bne.n	800d1c6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3308      	adds	r3, #8
 800d216:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d21a:	e853 3f00 	ldrex	r3, [r3]
 800d21e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d222:	f023 0301 	bic.w	r3, r3, #1
 800d226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	3308      	adds	r3, #8
 800d230:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d234:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d238:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d23c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e1      	bne.n	800d210 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3308      	adds	r3, #8
 800d252:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d256:	e853 3f00 	ldrex	r3, [r3]
 800d25a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d25c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d25e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	3308      	adds	r3, #8
 800d26c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d270:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d272:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d274:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d276:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d278:	e841 2300 	strex	r3, r2, [r1]
 800d27c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d27e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e3      	bne.n	800d24c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2220      	movs	r2, #32
 800d288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d29a:	e853 3f00 	ldrex	r3, [r3]
 800d29e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2a2:	f023 0310 	bic.w	r3, r3, #16
 800d2a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2bc:	e841 2300 	strex	r3, r2, [r1]
 800d2c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e4      	bne.n	800d292 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fa fc77 	bl	8007bc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f91c 	bl	800d524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d2ec:	e0fb      	b.n	800d4e6 <HAL_UART_IRQHandler+0x726>
 800d2ee:	bf00      	nop
 800d2f0:	40020010 	.word	0x40020010
 800d2f4:	40020028 	.word	0x40020028
 800d2f8:	40020040 	.word	0x40020040
 800d2fc:	40020058 	.word	0x40020058
 800d300:	40020070 	.word	0x40020070
 800d304:	40020088 	.word	0x40020088
 800d308:	400200a0 	.word	0x400200a0
 800d30c:	400200b8 	.word	0x400200b8
 800d310:	40020410 	.word	0x40020410
 800d314:	40020428 	.word	0x40020428
 800d318:	40020440 	.word	0x40020440
 800d31c:	40020458 	.word	0x40020458
 800d320:	40020470 	.word	0x40020470
 800d324:	40020488 	.word	0x40020488
 800d328:	400204a0 	.word	0x400204a0
 800d32c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f000 80cc 	beq.w	800d4ea <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 80c7 	beq.w	800d4ea <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d364:	e853 3f00 	ldrex	r3, [r3]
 800d368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	461a      	mov	r2, r3
 800d37a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d37e:	647b      	str	r3, [r7, #68]	; 0x44
 800d380:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d386:	e841 2300 	strex	r3, r2, [r1]
 800d38a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d1e4      	bne.n	800d35c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3308      	adds	r3, #8
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39c:	e853 3f00 	ldrex	r3, [r3]
 800d3a0:	623b      	str	r3, [r7, #32]
   return(result);
 800d3a2:	6a3a      	ldr	r2, [r7, #32]
 800d3a4:	4b54      	ldr	r3, [pc, #336]	; (800d4f8 <HAL_UART_IRQHandler+0x738>)
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	3308      	adds	r3, #8
 800d3b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d3b6:	633a      	str	r2, [r7, #48]	; 0x30
 800d3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3be:	e841 2300 	strex	r3, r2, [r1]
 800d3c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1e3      	bne.n	800d392 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	e853 3f00 	ldrex	r3, [r3]
 800d3ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f023 0310 	bic.w	r3, r3, #16
 800d3f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d400:	61fb      	str	r3, [r7, #28]
 800d402:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d404:	69b9      	ldr	r1, [r7, #24]
 800d406:	69fa      	ldr	r2, [r7, #28]
 800d408:	e841 2300 	strex	r3, r2, [r1]
 800d40c:	617b      	str	r3, [r7, #20]
   return(result);
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1e4      	bne.n	800d3de <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d418:	4619      	mov	r1, r3
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 f882 	bl	800d524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d420:	e063      	b.n	800d4ea <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00e      	beq.n	800d44c <HAL_UART_IRQHandler+0x68c>
 800d42e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d436:	2b00      	cmp	r3, #0
 800d438:	d008      	beq.n	800d44c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d442:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f001 fdc5 	bl	800efd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d44a:	e051      	b.n	800d4f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d454:	2b00      	cmp	r3, #0
 800d456:	d014      	beq.n	800d482 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d45c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d460:	2b00      	cmp	r3, #0
 800d462:	d105      	bne.n	800d470 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d008      	beq.n	800d482 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d474:	2b00      	cmp	r3, #0
 800d476:	d03a      	beq.n	800d4ee <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	4798      	blx	r3
    }
    return;
 800d480:	e035      	b.n	800d4ee <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d009      	beq.n	800d4a2 <HAL_UART_IRQHandler+0x6e2>
 800d48e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f001 f912 	bl	800e6c4 <UART_EndTransmit_IT>
    return;
 800d4a0:	e026      	b.n	800d4f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d009      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x702>
 800d4ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f001 fd9e 	bl	800effc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4c0:	e016      	b.n	800d4f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d010      	beq.n	800d4f0 <HAL_UART_IRQHandler+0x730>
 800d4ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	da0c      	bge.n	800d4f0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f001 fd86 	bl	800efe8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4dc:	e008      	b.n	800d4f0 <HAL_UART_IRQHandler+0x730>
      return;
 800d4de:	bf00      	nop
 800d4e0:	e006      	b.n	800d4f0 <HAL_UART_IRQHandler+0x730>
    return;
 800d4e2:	bf00      	nop
 800d4e4:	e004      	b.n	800d4f0 <HAL_UART_IRQHandler+0x730>
      return;
 800d4e6:	bf00      	nop
 800d4e8:	e002      	b.n	800d4f0 <HAL_UART_IRQHandler+0x730>
      return;
 800d4ea:	bf00      	nop
 800d4ec:	e000      	b.n	800d4f0 <HAL_UART_IRQHandler+0x730>
    return;
 800d4ee:	bf00      	nop
  }
}
 800d4f0:	37e8      	adds	r7, #232	; 0xe8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	effffffe 	.word	0xeffffffe

0800d4fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d504:	bf00      	nop
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d540:	b092      	sub	sp, #72	; 0x48
 800d542:	af00      	add	r7, sp, #0
 800d544:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d546:	2300      	movs	r3, #0
 800d548:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	689a      	ldr	r2, [r3, #8]
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	431a      	orrs	r2, r3
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	431a      	orrs	r2, r3
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	69db      	ldr	r3, [r3, #28]
 800d560:	4313      	orrs	r3, r2
 800d562:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	4bbe      	ldr	r3, [pc, #760]	; (800d864 <UART_SetConfig+0x328>)
 800d56c:	4013      	ands	r3, r2
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	6812      	ldr	r2, [r2, #0]
 800d572:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d574:	430b      	orrs	r3, r1
 800d576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	68da      	ldr	r2, [r3, #12]
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	430a      	orrs	r2, r1
 800d58c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4ab3      	ldr	r2, [pc, #716]	; (800d868 <UART_SetConfig+0x32c>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d004      	beq.n	800d5a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	689a      	ldr	r2, [r3, #8]
 800d5ae:	4baf      	ldr	r3, [pc, #700]	; (800d86c <UART_SetConfig+0x330>)
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	6812      	ldr	r2, [r2, #0]
 800d5b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5b8:	430b      	orrs	r3, r1
 800d5ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c2:	f023 010f 	bic.w	r1, r3, #15
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4aa6      	ldr	r2, [pc, #664]	; (800d870 <UART_SetConfig+0x334>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d177      	bne.n	800d6cc <UART_SetConfig+0x190>
 800d5dc:	4ba5      	ldr	r3, [pc, #660]	; (800d874 <UART_SetConfig+0x338>)
 800d5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5e4:	2b28      	cmp	r3, #40	; 0x28
 800d5e6:	d86d      	bhi.n	800d6c4 <UART_SetConfig+0x188>
 800d5e8:	a201      	add	r2, pc, #4	; (adr r2, 800d5f0 <UART_SetConfig+0xb4>)
 800d5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ee:	bf00      	nop
 800d5f0:	0800d695 	.word	0x0800d695
 800d5f4:	0800d6c5 	.word	0x0800d6c5
 800d5f8:	0800d6c5 	.word	0x0800d6c5
 800d5fc:	0800d6c5 	.word	0x0800d6c5
 800d600:	0800d6c5 	.word	0x0800d6c5
 800d604:	0800d6c5 	.word	0x0800d6c5
 800d608:	0800d6c5 	.word	0x0800d6c5
 800d60c:	0800d6c5 	.word	0x0800d6c5
 800d610:	0800d69d 	.word	0x0800d69d
 800d614:	0800d6c5 	.word	0x0800d6c5
 800d618:	0800d6c5 	.word	0x0800d6c5
 800d61c:	0800d6c5 	.word	0x0800d6c5
 800d620:	0800d6c5 	.word	0x0800d6c5
 800d624:	0800d6c5 	.word	0x0800d6c5
 800d628:	0800d6c5 	.word	0x0800d6c5
 800d62c:	0800d6c5 	.word	0x0800d6c5
 800d630:	0800d6a5 	.word	0x0800d6a5
 800d634:	0800d6c5 	.word	0x0800d6c5
 800d638:	0800d6c5 	.word	0x0800d6c5
 800d63c:	0800d6c5 	.word	0x0800d6c5
 800d640:	0800d6c5 	.word	0x0800d6c5
 800d644:	0800d6c5 	.word	0x0800d6c5
 800d648:	0800d6c5 	.word	0x0800d6c5
 800d64c:	0800d6c5 	.word	0x0800d6c5
 800d650:	0800d6ad 	.word	0x0800d6ad
 800d654:	0800d6c5 	.word	0x0800d6c5
 800d658:	0800d6c5 	.word	0x0800d6c5
 800d65c:	0800d6c5 	.word	0x0800d6c5
 800d660:	0800d6c5 	.word	0x0800d6c5
 800d664:	0800d6c5 	.word	0x0800d6c5
 800d668:	0800d6c5 	.word	0x0800d6c5
 800d66c:	0800d6c5 	.word	0x0800d6c5
 800d670:	0800d6b5 	.word	0x0800d6b5
 800d674:	0800d6c5 	.word	0x0800d6c5
 800d678:	0800d6c5 	.word	0x0800d6c5
 800d67c:	0800d6c5 	.word	0x0800d6c5
 800d680:	0800d6c5 	.word	0x0800d6c5
 800d684:	0800d6c5 	.word	0x0800d6c5
 800d688:	0800d6c5 	.word	0x0800d6c5
 800d68c:	0800d6c5 	.word	0x0800d6c5
 800d690:	0800d6bd 	.word	0x0800d6bd
 800d694:	2301      	movs	r3, #1
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69a:	e222      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d69c:	2304      	movs	r3, #4
 800d69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a2:	e21e      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d6a4:	2308      	movs	r3, #8
 800d6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6aa:	e21a      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d6ac:	2310      	movs	r3, #16
 800d6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b2:	e216      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d6b4:	2320      	movs	r3, #32
 800d6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ba:	e212      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d6bc:	2340      	movs	r3, #64	; 0x40
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c2:	e20e      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d6c4:	2380      	movs	r3, #128	; 0x80
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ca:	e20a      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a69      	ldr	r2, [pc, #420]	; (800d878 <UART_SetConfig+0x33c>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d130      	bne.n	800d738 <UART_SetConfig+0x1fc>
 800d6d6:	4b67      	ldr	r3, [pc, #412]	; (800d874 <UART_SetConfig+0x338>)
 800d6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6da:	f003 0307 	and.w	r3, r3, #7
 800d6de:	2b05      	cmp	r3, #5
 800d6e0:	d826      	bhi.n	800d730 <UART_SetConfig+0x1f4>
 800d6e2:	a201      	add	r2, pc, #4	; (adr r2, 800d6e8 <UART_SetConfig+0x1ac>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d701 	.word	0x0800d701
 800d6ec:	0800d709 	.word	0x0800d709
 800d6f0:	0800d711 	.word	0x0800d711
 800d6f4:	0800d719 	.word	0x0800d719
 800d6f8:	0800d721 	.word	0x0800d721
 800d6fc:	0800d729 	.word	0x0800d729
 800d700:	2300      	movs	r3, #0
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d706:	e1ec      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d708:	2304      	movs	r3, #4
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70e:	e1e8      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d710:	2308      	movs	r3, #8
 800d712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d716:	e1e4      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d718:	2310      	movs	r3, #16
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71e:	e1e0      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d720:	2320      	movs	r3, #32
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e1dc      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d728:	2340      	movs	r3, #64	; 0x40
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e1d8      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d730:	2380      	movs	r3, #128	; 0x80
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e1d4      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a4f      	ldr	r2, [pc, #316]	; (800d87c <UART_SetConfig+0x340>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d130      	bne.n	800d7a4 <UART_SetConfig+0x268>
 800d742:	4b4c      	ldr	r3, [pc, #304]	; (800d874 <UART_SetConfig+0x338>)
 800d744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d746:	f003 0307 	and.w	r3, r3, #7
 800d74a:	2b05      	cmp	r3, #5
 800d74c:	d826      	bhi.n	800d79c <UART_SetConfig+0x260>
 800d74e:	a201      	add	r2, pc, #4	; (adr r2, 800d754 <UART_SetConfig+0x218>)
 800d750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d754:	0800d76d 	.word	0x0800d76d
 800d758:	0800d775 	.word	0x0800d775
 800d75c:	0800d77d 	.word	0x0800d77d
 800d760:	0800d785 	.word	0x0800d785
 800d764:	0800d78d 	.word	0x0800d78d
 800d768:	0800d795 	.word	0x0800d795
 800d76c:	2300      	movs	r3, #0
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d772:	e1b6      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d774:	2304      	movs	r3, #4
 800d776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77a:	e1b2      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d77c:	2308      	movs	r3, #8
 800d77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d782:	e1ae      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d784:	2310      	movs	r3, #16
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78a:	e1aa      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d78c:	2320      	movs	r3, #32
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e1a6      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d794:	2340      	movs	r3, #64	; 0x40
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e1a2      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d79c:	2380      	movs	r3, #128	; 0x80
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e19e      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a35      	ldr	r2, [pc, #212]	; (800d880 <UART_SetConfig+0x344>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d130      	bne.n	800d810 <UART_SetConfig+0x2d4>
 800d7ae:	4b31      	ldr	r3, [pc, #196]	; (800d874 <UART_SetConfig+0x338>)
 800d7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7b2:	f003 0307 	and.w	r3, r3, #7
 800d7b6:	2b05      	cmp	r3, #5
 800d7b8:	d826      	bhi.n	800d808 <UART_SetConfig+0x2cc>
 800d7ba:	a201      	add	r2, pc, #4	; (adr r2, 800d7c0 <UART_SetConfig+0x284>)
 800d7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c0:	0800d7d9 	.word	0x0800d7d9
 800d7c4:	0800d7e1 	.word	0x0800d7e1
 800d7c8:	0800d7e9 	.word	0x0800d7e9
 800d7cc:	0800d7f1 	.word	0x0800d7f1
 800d7d0:	0800d7f9 	.word	0x0800d7f9
 800d7d4:	0800d801 	.word	0x0800d801
 800d7d8:	2300      	movs	r3, #0
 800d7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7de:	e180      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d7e0:	2304      	movs	r3, #4
 800d7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e6:	e17c      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d7e8:	2308      	movs	r3, #8
 800d7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ee:	e178      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d7f0:	2310      	movs	r3, #16
 800d7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f6:	e174      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d7f8:	2320      	movs	r3, #32
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fe:	e170      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d800:	2340      	movs	r3, #64	; 0x40
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e16c      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d808:	2380      	movs	r3, #128	; 0x80
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80e:	e168      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a1b      	ldr	r2, [pc, #108]	; (800d884 <UART_SetConfig+0x348>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d142      	bne.n	800d8a0 <UART_SetConfig+0x364>
 800d81a:	4b16      	ldr	r3, [pc, #88]	; (800d874 <UART_SetConfig+0x338>)
 800d81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d81e:	f003 0307 	and.w	r3, r3, #7
 800d822:	2b05      	cmp	r3, #5
 800d824:	d838      	bhi.n	800d898 <UART_SetConfig+0x35c>
 800d826:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <UART_SetConfig+0x2f0>)
 800d828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82c:	0800d845 	.word	0x0800d845
 800d830:	0800d84d 	.word	0x0800d84d
 800d834:	0800d855 	.word	0x0800d855
 800d838:	0800d85d 	.word	0x0800d85d
 800d83c:	0800d889 	.word	0x0800d889
 800d840:	0800d891 	.word	0x0800d891
 800d844:	2300      	movs	r3, #0
 800d846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84a:	e14a      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d84c:	2304      	movs	r3, #4
 800d84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d852:	e146      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d854:	2308      	movs	r3, #8
 800d856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d85a:	e142      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d85c:	2310      	movs	r3, #16
 800d85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d862:	e13e      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d864:	cfff69f3 	.word	0xcfff69f3
 800d868:	58000c00 	.word	0x58000c00
 800d86c:	11fff4ff 	.word	0x11fff4ff
 800d870:	40011000 	.word	0x40011000
 800d874:	58024400 	.word	0x58024400
 800d878:	40004400 	.word	0x40004400
 800d87c:	40004800 	.word	0x40004800
 800d880:	40004c00 	.word	0x40004c00
 800d884:	40005000 	.word	0x40005000
 800d888:	2320      	movs	r3, #32
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88e:	e128      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d890:	2340      	movs	r3, #64	; 0x40
 800d892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d896:	e124      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d898:	2380      	movs	r3, #128	; 0x80
 800d89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89e:	e120      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4acb      	ldr	r2, [pc, #812]	; (800dbd4 <UART_SetConfig+0x698>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d176      	bne.n	800d998 <UART_SetConfig+0x45c>
 800d8aa:	4bcb      	ldr	r3, [pc, #812]	; (800dbd8 <UART_SetConfig+0x69c>)
 800d8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8b2:	2b28      	cmp	r3, #40	; 0x28
 800d8b4:	d86c      	bhi.n	800d990 <UART_SetConfig+0x454>
 800d8b6:	a201      	add	r2, pc, #4	; (adr r2, 800d8bc <UART_SetConfig+0x380>)
 800d8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8bc:	0800d961 	.word	0x0800d961
 800d8c0:	0800d991 	.word	0x0800d991
 800d8c4:	0800d991 	.word	0x0800d991
 800d8c8:	0800d991 	.word	0x0800d991
 800d8cc:	0800d991 	.word	0x0800d991
 800d8d0:	0800d991 	.word	0x0800d991
 800d8d4:	0800d991 	.word	0x0800d991
 800d8d8:	0800d991 	.word	0x0800d991
 800d8dc:	0800d969 	.word	0x0800d969
 800d8e0:	0800d991 	.word	0x0800d991
 800d8e4:	0800d991 	.word	0x0800d991
 800d8e8:	0800d991 	.word	0x0800d991
 800d8ec:	0800d991 	.word	0x0800d991
 800d8f0:	0800d991 	.word	0x0800d991
 800d8f4:	0800d991 	.word	0x0800d991
 800d8f8:	0800d991 	.word	0x0800d991
 800d8fc:	0800d971 	.word	0x0800d971
 800d900:	0800d991 	.word	0x0800d991
 800d904:	0800d991 	.word	0x0800d991
 800d908:	0800d991 	.word	0x0800d991
 800d90c:	0800d991 	.word	0x0800d991
 800d910:	0800d991 	.word	0x0800d991
 800d914:	0800d991 	.word	0x0800d991
 800d918:	0800d991 	.word	0x0800d991
 800d91c:	0800d979 	.word	0x0800d979
 800d920:	0800d991 	.word	0x0800d991
 800d924:	0800d991 	.word	0x0800d991
 800d928:	0800d991 	.word	0x0800d991
 800d92c:	0800d991 	.word	0x0800d991
 800d930:	0800d991 	.word	0x0800d991
 800d934:	0800d991 	.word	0x0800d991
 800d938:	0800d991 	.word	0x0800d991
 800d93c:	0800d981 	.word	0x0800d981
 800d940:	0800d991 	.word	0x0800d991
 800d944:	0800d991 	.word	0x0800d991
 800d948:	0800d991 	.word	0x0800d991
 800d94c:	0800d991 	.word	0x0800d991
 800d950:	0800d991 	.word	0x0800d991
 800d954:	0800d991 	.word	0x0800d991
 800d958:	0800d991 	.word	0x0800d991
 800d95c:	0800d989 	.word	0x0800d989
 800d960:	2301      	movs	r3, #1
 800d962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d966:	e0bc      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d968:	2304      	movs	r3, #4
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96e:	e0b8      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d970:	2308      	movs	r3, #8
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d976:	e0b4      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d978:	2310      	movs	r3, #16
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97e:	e0b0      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d980:	2320      	movs	r3, #32
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d986:	e0ac      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d988:	2340      	movs	r3, #64	; 0x40
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98e:	e0a8      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d990:	2380      	movs	r3, #128	; 0x80
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d996:	e0a4      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a8f      	ldr	r2, [pc, #572]	; (800dbdc <UART_SetConfig+0x6a0>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d130      	bne.n	800da04 <UART_SetConfig+0x4c8>
 800d9a2:	4b8d      	ldr	r3, [pc, #564]	; (800dbd8 <UART_SetConfig+0x69c>)
 800d9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9a6:	f003 0307 	and.w	r3, r3, #7
 800d9aa:	2b05      	cmp	r3, #5
 800d9ac:	d826      	bhi.n	800d9fc <UART_SetConfig+0x4c0>
 800d9ae:	a201      	add	r2, pc, #4	; (adr r2, 800d9b4 <UART_SetConfig+0x478>)
 800d9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b4:	0800d9cd 	.word	0x0800d9cd
 800d9b8:	0800d9d5 	.word	0x0800d9d5
 800d9bc:	0800d9dd 	.word	0x0800d9dd
 800d9c0:	0800d9e5 	.word	0x0800d9e5
 800d9c4:	0800d9ed 	.word	0x0800d9ed
 800d9c8:	0800d9f5 	.word	0x0800d9f5
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9d2:	e086      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d9d4:	2304      	movs	r3, #4
 800d9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9da:	e082      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d9dc:	2308      	movs	r3, #8
 800d9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e2:	e07e      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d9e4:	2310      	movs	r3, #16
 800d9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ea:	e07a      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d9ec:	2320      	movs	r3, #32
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f2:	e076      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d9f4:	2340      	movs	r3, #64	; 0x40
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	e072      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800d9fc:	2380      	movs	r3, #128	; 0x80
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da02:	e06e      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a75      	ldr	r2, [pc, #468]	; (800dbe0 <UART_SetConfig+0x6a4>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d130      	bne.n	800da70 <UART_SetConfig+0x534>
 800da0e:	4b72      	ldr	r3, [pc, #456]	; (800dbd8 <UART_SetConfig+0x69c>)
 800da10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da12:	f003 0307 	and.w	r3, r3, #7
 800da16:	2b05      	cmp	r3, #5
 800da18:	d826      	bhi.n	800da68 <UART_SetConfig+0x52c>
 800da1a:	a201      	add	r2, pc, #4	; (adr r2, 800da20 <UART_SetConfig+0x4e4>)
 800da1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da20:	0800da39 	.word	0x0800da39
 800da24:	0800da41 	.word	0x0800da41
 800da28:	0800da49 	.word	0x0800da49
 800da2c:	0800da51 	.word	0x0800da51
 800da30:	0800da59 	.word	0x0800da59
 800da34:	0800da61 	.word	0x0800da61
 800da38:	2300      	movs	r3, #0
 800da3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3e:	e050      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800da40:	2304      	movs	r3, #4
 800da42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da46:	e04c      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800da48:	2308      	movs	r3, #8
 800da4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4e:	e048      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800da50:	2310      	movs	r3, #16
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da56:	e044      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800da58:	2320      	movs	r3, #32
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e040      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800da60:	2340      	movs	r3, #64	; 0x40
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da66:	e03c      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800da68:	2380      	movs	r3, #128	; 0x80
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6e:	e038      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a5b      	ldr	r2, [pc, #364]	; (800dbe4 <UART_SetConfig+0x6a8>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d130      	bne.n	800dadc <UART_SetConfig+0x5a0>
 800da7a:	4b57      	ldr	r3, [pc, #348]	; (800dbd8 <UART_SetConfig+0x69c>)
 800da7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da7e:	f003 0307 	and.w	r3, r3, #7
 800da82:	2b05      	cmp	r3, #5
 800da84:	d826      	bhi.n	800dad4 <UART_SetConfig+0x598>
 800da86:	a201      	add	r2, pc, #4	; (adr r2, 800da8c <UART_SetConfig+0x550>)
 800da88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da8c:	0800daa5 	.word	0x0800daa5
 800da90:	0800daad 	.word	0x0800daad
 800da94:	0800dab5 	.word	0x0800dab5
 800da98:	0800dabd 	.word	0x0800dabd
 800da9c:	0800dac5 	.word	0x0800dac5
 800daa0:	0800dacd 	.word	0x0800dacd
 800daa4:	2302      	movs	r3, #2
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daaa:	e01a      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800daac:	2304      	movs	r3, #4
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab2:	e016      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800dab4:	2308      	movs	r3, #8
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daba:	e012      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800dabc:	2310      	movs	r3, #16
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac2:	e00e      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800dac4:	2320      	movs	r3, #32
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e00a      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800dacc:	2340      	movs	r3, #64	; 0x40
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad2:	e006      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800dad4:	2380      	movs	r3, #128	; 0x80
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dada:	e002      	b.n	800dae2 <UART_SetConfig+0x5a6>
 800dadc:	2380      	movs	r3, #128	; 0x80
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a3f      	ldr	r2, [pc, #252]	; (800dbe4 <UART_SetConfig+0x6a8>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	f040 80f8 	bne.w	800dcde <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800daee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800daf2:	2b20      	cmp	r3, #32
 800daf4:	dc46      	bgt.n	800db84 <UART_SetConfig+0x648>
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	f2c0 8082 	blt.w	800dc00 <UART_SetConfig+0x6c4>
 800dafc:	3b02      	subs	r3, #2
 800dafe:	2b1e      	cmp	r3, #30
 800db00:	d87e      	bhi.n	800dc00 <UART_SetConfig+0x6c4>
 800db02:	a201      	add	r2, pc, #4	; (adr r2, 800db08 <UART_SetConfig+0x5cc>)
 800db04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db08:	0800db8b 	.word	0x0800db8b
 800db0c:	0800dc01 	.word	0x0800dc01
 800db10:	0800db93 	.word	0x0800db93
 800db14:	0800dc01 	.word	0x0800dc01
 800db18:	0800dc01 	.word	0x0800dc01
 800db1c:	0800dc01 	.word	0x0800dc01
 800db20:	0800dba3 	.word	0x0800dba3
 800db24:	0800dc01 	.word	0x0800dc01
 800db28:	0800dc01 	.word	0x0800dc01
 800db2c:	0800dc01 	.word	0x0800dc01
 800db30:	0800dc01 	.word	0x0800dc01
 800db34:	0800dc01 	.word	0x0800dc01
 800db38:	0800dc01 	.word	0x0800dc01
 800db3c:	0800dc01 	.word	0x0800dc01
 800db40:	0800dbb3 	.word	0x0800dbb3
 800db44:	0800dc01 	.word	0x0800dc01
 800db48:	0800dc01 	.word	0x0800dc01
 800db4c:	0800dc01 	.word	0x0800dc01
 800db50:	0800dc01 	.word	0x0800dc01
 800db54:	0800dc01 	.word	0x0800dc01
 800db58:	0800dc01 	.word	0x0800dc01
 800db5c:	0800dc01 	.word	0x0800dc01
 800db60:	0800dc01 	.word	0x0800dc01
 800db64:	0800dc01 	.word	0x0800dc01
 800db68:	0800dc01 	.word	0x0800dc01
 800db6c:	0800dc01 	.word	0x0800dc01
 800db70:	0800dc01 	.word	0x0800dc01
 800db74:	0800dc01 	.word	0x0800dc01
 800db78:	0800dc01 	.word	0x0800dc01
 800db7c:	0800dc01 	.word	0x0800dc01
 800db80:	0800dbf3 	.word	0x0800dbf3
 800db84:	2b40      	cmp	r3, #64	; 0x40
 800db86:	d037      	beq.n	800dbf8 <UART_SetConfig+0x6bc>
 800db88:	e03a      	b.n	800dc00 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db8a:	f7fd fdc7 	bl	800b71c <HAL_RCCEx_GetD3PCLK1Freq>
 800db8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db90:	e03c      	b.n	800dc0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db96:	4618      	mov	r0, r3
 800db98:	f7fd fdd6 	bl	800b748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dba0:	e034      	b.n	800dc0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dba2:	f107 0318 	add.w	r3, r7, #24
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fd ff22 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbb0:	e02c      	b.n	800dc0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbb2:	4b09      	ldr	r3, [pc, #36]	; (800dbd8 <UART_SetConfig+0x69c>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 0320 	and.w	r3, r3, #32
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d016      	beq.n	800dbec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbbe:	4b06      	ldr	r3, [pc, #24]	; (800dbd8 <UART_SetConfig+0x69c>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	08db      	lsrs	r3, r3, #3
 800dbc4:	f003 0303 	and.w	r3, r3, #3
 800dbc8:	4a07      	ldr	r2, [pc, #28]	; (800dbe8 <UART_SetConfig+0x6ac>)
 800dbca:	fa22 f303 	lsr.w	r3, r2, r3
 800dbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbd0:	e01c      	b.n	800dc0c <UART_SetConfig+0x6d0>
 800dbd2:	bf00      	nop
 800dbd4:	40011400 	.word	0x40011400
 800dbd8:	58024400 	.word	0x58024400
 800dbdc:	40007800 	.word	0x40007800
 800dbe0:	40007c00 	.word	0x40007c00
 800dbe4:	58000c00 	.word	0x58000c00
 800dbe8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dbec:	4b9d      	ldr	r3, [pc, #628]	; (800de64 <UART_SetConfig+0x928>)
 800dbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbf0:	e00c      	b.n	800dc0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dbf2:	4b9d      	ldr	r3, [pc, #628]	; (800de68 <UART_SetConfig+0x92c>)
 800dbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbf6:	e009      	b.n	800dc0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbfe:	e005      	b.n	800dc0c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dc00:	2300      	movs	r3, #0
 800dc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc04:	2301      	movs	r3, #1
 800dc06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 81de 	beq.w	800dfd0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc18:	4a94      	ldr	r2, [pc, #592]	; (800de6c <UART_SetConfig+0x930>)
 800dc1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc22:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc26:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	685a      	ldr	r2, [r3, #4]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	4413      	add	r3, r2
 800dc32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d305      	bcc.n	800dc44 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d903      	bls.n	800dc4c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dc44:	2301      	movs	r3, #1
 800dc46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc4a:	e1c1      	b.n	800dfd0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4e:	2200      	movs	r2, #0
 800dc50:	60bb      	str	r3, [r7, #8]
 800dc52:	60fa      	str	r2, [r7, #12]
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc58:	4a84      	ldr	r2, [pc, #528]	; (800de6c <UART_SetConfig+0x930>)
 800dc5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	2200      	movs	r2, #0
 800dc62:	603b      	str	r3, [r7, #0]
 800dc64:	607a      	str	r2, [r7, #4]
 800dc66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc6e:	f7f2 fbe7 	bl	8000440 <__aeabi_uldivmod>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	4610      	mov	r0, r2
 800dc78:	4619      	mov	r1, r3
 800dc7a:	f04f 0200 	mov.w	r2, #0
 800dc7e:	f04f 0300 	mov.w	r3, #0
 800dc82:	020b      	lsls	r3, r1, #8
 800dc84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc88:	0202      	lsls	r2, r0, #8
 800dc8a:	6979      	ldr	r1, [r7, #20]
 800dc8c:	6849      	ldr	r1, [r1, #4]
 800dc8e:	0849      	lsrs	r1, r1, #1
 800dc90:	2000      	movs	r0, #0
 800dc92:	460c      	mov	r4, r1
 800dc94:	4605      	mov	r5, r0
 800dc96:	eb12 0804 	adds.w	r8, r2, r4
 800dc9a:	eb43 0905 	adc.w	r9, r3, r5
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	2200      	movs	r2, #0
 800dca4:	469a      	mov	sl, r3
 800dca6:	4693      	mov	fp, r2
 800dca8:	4652      	mov	r2, sl
 800dcaa:	465b      	mov	r3, fp
 800dcac:	4640      	mov	r0, r8
 800dcae:	4649      	mov	r1, r9
 800dcb0:	f7f2 fbc6 	bl	8000440 <__aeabi_uldivmod>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4613      	mov	r3, r2
 800dcba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dcc2:	d308      	bcc.n	800dcd6 <UART_SetConfig+0x79a>
 800dcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcca:	d204      	bcs.n	800dcd6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcd2:	60da      	str	r2, [r3, #12]
 800dcd4:	e17c      	b.n	800dfd0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dcdc:	e178      	b.n	800dfd0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	69db      	ldr	r3, [r3, #28]
 800dce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dce6:	f040 80c5 	bne.w	800de74 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dcea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dcee:	2b20      	cmp	r3, #32
 800dcf0:	dc48      	bgt.n	800dd84 <UART_SetConfig+0x848>
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	db7b      	blt.n	800ddee <UART_SetConfig+0x8b2>
 800dcf6:	2b20      	cmp	r3, #32
 800dcf8:	d879      	bhi.n	800ddee <UART_SetConfig+0x8b2>
 800dcfa:	a201      	add	r2, pc, #4	; (adr r2, 800dd00 <UART_SetConfig+0x7c4>)
 800dcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd00:	0800dd8b 	.word	0x0800dd8b
 800dd04:	0800dd93 	.word	0x0800dd93
 800dd08:	0800ddef 	.word	0x0800ddef
 800dd0c:	0800ddef 	.word	0x0800ddef
 800dd10:	0800dd9b 	.word	0x0800dd9b
 800dd14:	0800ddef 	.word	0x0800ddef
 800dd18:	0800ddef 	.word	0x0800ddef
 800dd1c:	0800ddef 	.word	0x0800ddef
 800dd20:	0800ddab 	.word	0x0800ddab
 800dd24:	0800ddef 	.word	0x0800ddef
 800dd28:	0800ddef 	.word	0x0800ddef
 800dd2c:	0800ddef 	.word	0x0800ddef
 800dd30:	0800ddef 	.word	0x0800ddef
 800dd34:	0800ddef 	.word	0x0800ddef
 800dd38:	0800ddef 	.word	0x0800ddef
 800dd3c:	0800ddef 	.word	0x0800ddef
 800dd40:	0800ddbb 	.word	0x0800ddbb
 800dd44:	0800ddef 	.word	0x0800ddef
 800dd48:	0800ddef 	.word	0x0800ddef
 800dd4c:	0800ddef 	.word	0x0800ddef
 800dd50:	0800ddef 	.word	0x0800ddef
 800dd54:	0800ddef 	.word	0x0800ddef
 800dd58:	0800ddef 	.word	0x0800ddef
 800dd5c:	0800ddef 	.word	0x0800ddef
 800dd60:	0800ddef 	.word	0x0800ddef
 800dd64:	0800ddef 	.word	0x0800ddef
 800dd68:	0800ddef 	.word	0x0800ddef
 800dd6c:	0800ddef 	.word	0x0800ddef
 800dd70:	0800ddef 	.word	0x0800ddef
 800dd74:	0800ddef 	.word	0x0800ddef
 800dd78:	0800ddef 	.word	0x0800ddef
 800dd7c:	0800ddef 	.word	0x0800ddef
 800dd80:	0800dde1 	.word	0x0800dde1
 800dd84:	2b40      	cmp	r3, #64	; 0x40
 800dd86:	d02e      	beq.n	800dde6 <UART_SetConfig+0x8aa>
 800dd88:	e031      	b.n	800ddee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd8a:	f7fc fd13 	bl	800a7b4 <HAL_RCC_GetPCLK1Freq>
 800dd8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd90:	e033      	b.n	800ddfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd92:	f7fc fd25 	bl	800a7e0 <HAL_RCC_GetPCLK2Freq>
 800dd96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd98:	e02f      	b.n	800ddfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fd fcd2 	bl	800b748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dda8:	e027      	b.n	800ddfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddaa:	f107 0318 	add.w	r3, r7, #24
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fd fe1e 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddb8:	e01f      	b.n	800ddfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddba:	4b2d      	ldr	r3, [pc, #180]	; (800de70 <UART_SetConfig+0x934>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f003 0320 	and.w	r3, r3, #32
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d009      	beq.n	800ddda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddc6:	4b2a      	ldr	r3, [pc, #168]	; (800de70 <UART_SetConfig+0x934>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	08db      	lsrs	r3, r3, #3
 800ddcc:	f003 0303 	and.w	r3, r3, #3
 800ddd0:	4a24      	ldr	r2, [pc, #144]	; (800de64 <UART_SetConfig+0x928>)
 800ddd2:	fa22 f303 	lsr.w	r3, r2, r3
 800ddd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddd8:	e00f      	b.n	800ddfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ddda:	4b22      	ldr	r3, [pc, #136]	; (800de64 <UART_SetConfig+0x928>)
 800dddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddde:	e00c      	b.n	800ddfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dde0:	4b21      	ldr	r3, [pc, #132]	; (800de68 <UART_SetConfig+0x92c>)
 800dde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dde4:	e009      	b.n	800ddfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddec:	e005      	b.n	800ddfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ddf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f000 80e7 	beq.w	800dfd0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de06:	4a19      	ldr	r2, [pc, #100]	; (800de6c <UART_SetConfig+0x930>)
 800de08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de0c:	461a      	mov	r2, r3
 800de0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de10:	fbb3 f3f2 	udiv	r3, r3, r2
 800de14:	005a      	lsls	r2, r3, #1
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	085b      	lsrs	r3, r3, #1
 800de1c:	441a      	add	r2, r3
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	fbb2 f3f3 	udiv	r3, r2, r3
 800de26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	2b0f      	cmp	r3, #15
 800de2c:	d916      	bls.n	800de5c <UART_SetConfig+0x920>
 800de2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de34:	d212      	bcs.n	800de5c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de38:	b29b      	uxth	r3, r3
 800de3a:	f023 030f 	bic.w	r3, r3, #15
 800de3e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de42:	085b      	lsrs	r3, r3, #1
 800de44:	b29b      	uxth	r3, r3
 800de46:	f003 0307 	and.w	r3, r3, #7
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de4e:	4313      	orrs	r3, r2
 800de50:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800de58:	60da      	str	r2, [r3, #12]
 800de5a:	e0b9      	b.n	800dfd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de5c:	2301      	movs	r3, #1
 800de5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de62:	e0b5      	b.n	800dfd0 <UART_SetConfig+0xa94>
 800de64:	03d09000 	.word	0x03d09000
 800de68:	003d0900 	.word	0x003d0900
 800de6c:	08010f04 	.word	0x08010f04
 800de70:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800de74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de78:	2b20      	cmp	r3, #32
 800de7a:	dc49      	bgt.n	800df10 <UART_SetConfig+0x9d4>
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	db7c      	blt.n	800df7a <UART_SetConfig+0xa3e>
 800de80:	2b20      	cmp	r3, #32
 800de82:	d87a      	bhi.n	800df7a <UART_SetConfig+0xa3e>
 800de84:	a201      	add	r2, pc, #4	; (adr r2, 800de8c <UART_SetConfig+0x950>)
 800de86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de8a:	bf00      	nop
 800de8c:	0800df17 	.word	0x0800df17
 800de90:	0800df1f 	.word	0x0800df1f
 800de94:	0800df7b 	.word	0x0800df7b
 800de98:	0800df7b 	.word	0x0800df7b
 800de9c:	0800df27 	.word	0x0800df27
 800dea0:	0800df7b 	.word	0x0800df7b
 800dea4:	0800df7b 	.word	0x0800df7b
 800dea8:	0800df7b 	.word	0x0800df7b
 800deac:	0800df37 	.word	0x0800df37
 800deb0:	0800df7b 	.word	0x0800df7b
 800deb4:	0800df7b 	.word	0x0800df7b
 800deb8:	0800df7b 	.word	0x0800df7b
 800debc:	0800df7b 	.word	0x0800df7b
 800dec0:	0800df7b 	.word	0x0800df7b
 800dec4:	0800df7b 	.word	0x0800df7b
 800dec8:	0800df7b 	.word	0x0800df7b
 800decc:	0800df47 	.word	0x0800df47
 800ded0:	0800df7b 	.word	0x0800df7b
 800ded4:	0800df7b 	.word	0x0800df7b
 800ded8:	0800df7b 	.word	0x0800df7b
 800dedc:	0800df7b 	.word	0x0800df7b
 800dee0:	0800df7b 	.word	0x0800df7b
 800dee4:	0800df7b 	.word	0x0800df7b
 800dee8:	0800df7b 	.word	0x0800df7b
 800deec:	0800df7b 	.word	0x0800df7b
 800def0:	0800df7b 	.word	0x0800df7b
 800def4:	0800df7b 	.word	0x0800df7b
 800def8:	0800df7b 	.word	0x0800df7b
 800defc:	0800df7b 	.word	0x0800df7b
 800df00:	0800df7b 	.word	0x0800df7b
 800df04:	0800df7b 	.word	0x0800df7b
 800df08:	0800df7b 	.word	0x0800df7b
 800df0c:	0800df6d 	.word	0x0800df6d
 800df10:	2b40      	cmp	r3, #64	; 0x40
 800df12:	d02e      	beq.n	800df72 <UART_SetConfig+0xa36>
 800df14:	e031      	b.n	800df7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df16:	f7fc fc4d 	bl	800a7b4 <HAL_RCC_GetPCLK1Freq>
 800df1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df1c:	e033      	b.n	800df86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df1e:	f7fc fc5f 	bl	800a7e0 <HAL_RCC_GetPCLK2Freq>
 800df22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df24:	e02f      	b.n	800df86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fd fc0c 	bl	800b748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df34:	e027      	b.n	800df86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df36:	f107 0318 	add.w	r3, r7, #24
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fd fd58 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df44:	e01f      	b.n	800df86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df46:	4b2d      	ldr	r3, [pc, #180]	; (800dffc <UART_SetConfig+0xac0>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f003 0320 	and.w	r3, r3, #32
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df52:	4b2a      	ldr	r3, [pc, #168]	; (800dffc <UART_SetConfig+0xac0>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	08db      	lsrs	r3, r3, #3
 800df58:	f003 0303 	and.w	r3, r3, #3
 800df5c:	4a28      	ldr	r2, [pc, #160]	; (800e000 <UART_SetConfig+0xac4>)
 800df5e:	fa22 f303 	lsr.w	r3, r2, r3
 800df62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df64:	e00f      	b.n	800df86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800df66:	4b26      	ldr	r3, [pc, #152]	; (800e000 <UART_SetConfig+0xac4>)
 800df68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df6a:	e00c      	b.n	800df86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df6c:	4b25      	ldr	r3, [pc, #148]	; (800e004 <UART_SetConfig+0xac8>)
 800df6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df70:	e009      	b.n	800df86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df78:	e005      	b.n	800df86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800df7a:	2300      	movs	r3, #0
 800df7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df84:	bf00      	nop
    }

    if (pclk != 0U)
 800df86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d021      	beq.n	800dfd0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df90:	4a1d      	ldr	r2, [pc, #116]	; (800e008 <UART_SetConfig+0xacc>)
 800df92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df96:	461a      	mov	r2, r3
 800df98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	085b      	lsrs	r3, r3, #1
 800dfa4:	441a      	add	r2, r3
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	2b0f      	cmp	r3, #15
 800dfb4:	d909      	bls.n	800dfca <UART_SetConfig+0xa8e>
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfbc:	d205      	bcs.n	800dfca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	60da      	str	r2, [r3, #12]
 800dfc8:	e002      	b.n	800dfd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dfec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3748      	adds	r7, #72	; 0x48
 800dff4:	46bd      	mov	sp, r7
 800dff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dffa:	bf00      	nop
 800dffc:	58024400 	.word	0x58024400
 800e000:	03d09000 	.word	0x03d09000
 800e004:	003d0900 	.word	0x003d0900
 800e008:	08010f04 	.word	0x08010f04

0800e00c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00a      	beq.n	800e036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	430a      	orrs	r2, r1
 800e034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e03a:	f003 0302 	and.w	r3, r3, #2
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d00a      	beq.n	800e058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	430a      	orrs	r2, r1
 800e056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e05c:	f003 0304 	and.w	r3, r3, #4
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00a      	beq.n	800e07a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	430a      	orrs	r2, r1
 800e078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07e:	f003 0308 	and.w	r3, r3, #8
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00a      	beq.n	800e09c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	430a      	orrs	r2, r1
 800e09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a0:	f003 0310 	and.w	r3, r3, #16
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00a      	beq.n	800e0be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	430a      	orrs	r2, r1
 800e0bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c2:	f003 0320 	and.w	r3, r3, #32
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00a      	beq.n	800e0e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	430a      	orrs	r2, r1
 800e0de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d01a      	beq.n	800e122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	430a      	orrs	r2, r1
 800e100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e10a:	d10a      	bne.n	800e122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	430a      	orrs	r2, r1
 800e120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00a      	beq.n	800e144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	430a      	orrs	r2, r1
 800e142:	605a      	str	r2, [r3, #4]
  }
}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af02      	add	r7, sp, #8
 800e156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e160:	f7f9 fc12 	bl	8007988 <HAL_GetTick>
 800e164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f003 0308 	and.w	r3, r3, #8
 800e170:	2b08      	cmp	r3, #8
 800e172:	d10e      	bne.n	800e192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 f82f 	bl	800e1e6 <UART_WaitOnFlagUntilTimeout>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e18e:	2303      	movs	r3, #3
 800e190:	e025      	b.n	800e1de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f003 0304 	and.w	r3, r3, #4
 800e19c:	2b04      	cmp	r3, #4
 800e19e:	d10e      	bne.n	800e1be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f819 	bl	800e1e6 <UART_WaitOnFlagUntilTimeout>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	e00f      	b.n	800e1de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2220      	movs	r2, #32
 800e1c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2220      	movs	r2, #32
 800e1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e1dc:	2300      	movs	r3, #0
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b09c      	sub	sp, #112	; 0x70
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	60f8      	str	r0, [r7, #12]
 800e1ee:	60b9      	str	r1, [r7, #8]
 800e1f0:	603b      	str	r3, [r7, #0]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1f6:	e0a9      	b.n	800e34c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fe:	f000 80a5 	beq.w	800e34c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e202:	f7f9 fbc1 	bl	8007988 <HAL_GetTick>
 800e206:	4602      	mov	r2, r0
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e20e:	429a      	cmp	r2, r3
 800e210:	d302      	bcc.n	800e218 <UART_WaitOnFlagUntilTimeout+0x32>
 800e212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e214:	2b00      	cmp	r3, #0
 800e216:	d140      	bne.n	800e29a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e220:	e853 3f00 	ldrex	r3, [r3]
 800e224:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e22c:	667b      	str	r3, [r7, #100]	; 0x64
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	461a      	mov	r2, r3
 800e234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e236:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e238:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e23c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e23e:	e841 2300 	strex	r3, r2, [r1]
 800e242:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e6      	bne.n	800e218 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	3308      	adds	r3, #8
 800e250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e254:	e853 3f00 	ldrex	r3, [r3]
 800e258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25c:	f023 0301 	bic.w	r3, r3, #1
 800e260:	663b      	str	r3, [r7, #96]	; 0x60
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	3308      	adds	r3, #8
 800e268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e26a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e26c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e272:	e841 2300 	strex	r3, r2, [r1]
 800e276:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1e5      	bne.n	800e24a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2220      	movs	r2, #32
 800e282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2220      	movs	r2, #32
 800e28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e296:	2303      	movs	r3, #3
 800e298:	e069      	b.n	800e36e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f003 0304 	and.w	r3, r3, #4
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d051      	beq.n	800e34c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	69db      	ldr	r3, [r3, #28]
 800e2ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2b6:	d149      	bne.n	800e34c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ca:	e853 3f00 	ldrex	r3, [r3]
 800e2ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e2d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e2e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2e8:	e841 2300 	strex	r3, r2, [r1]
 800e2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1e6      	bne.n	800e2c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	e853 3f00 	ldrex	r3, [r3]
 800e302:	613b      	str	r3, [r7, #16]
   return(result);
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	f023 0301 	bic.w	r3, r3, #1
 800e30a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3308      	adds	r3, #8
 800e312:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e314:	623a      	str	r2, [r7, #32]
 800e316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e318:	69f9      	ldr	r1, [r7, #28]
 800e31a:	6a3a      	ldr	r2, [r7, #32]
 800e31c:	e841 2300 	strex	r3, r2, [r1]
 800e320:	61bb      	str	r3, [r7, #24]
   return(result);
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1e5      	bne.n	800e2f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2220      	movs	r2, #32
 800e32c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2220      	movs	r2, #32
 800e334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2220      	movs	r2, #32
 800e33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2200      	movs	r2, #0
 800e344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e348:	2303      	movs	r3, #3
 800e34a:	e010      	b.n	800e36e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	69da      	ldr	r2, [r3, #28]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	4013      	ands	r3, r2
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	429a      	cmp	r2, r3
 800e35a:	bf0c      	ite	eq
 800e35c:	2301      	moveq	r3, #1
 800e35e:	2300      	movne	r3, #0
 800e360:	b2db      	uxtb	r3, r3
 800e362:	461a      	mov	r2, r3
 800e364:	79fb      	ldrb	r3, [r7, #7]
 800e366:	429a      	cmp	r2, r3
 800e368:	f43f af46 	beq.w	800e1f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3770      	adds	r7, #112	; 0x70
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
	...

0800e378 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e378:	b480      	push	{r7}
 800e37a:	b0a3      	sub	sp, #140	; 0x8c
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	88fa      	ldrh	r2, [r7, #6]
 800e390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	88fa      	ldrh	r2, [r7, #6]
 800e398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3aa:	d10e      	bne.n	800e3ca <UART_Start_Receive_IT+0x52>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	691b      	ldr	r3, [r3, #16]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d105      	bne.n	800e3c0 <UART_Start_Receive_IT+0x48>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e3ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3be:	e02d      	b.n	800e41c <UART_Start_Receive_IT+0xa4>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	22ff      	movs	r2, #255	; 0xff
 800e3c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3c8:	e028      	b.n	800e41c <UART_Start_Receive_IT+0xa4>
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d10d      	bne.n	800e3ee <UART_Start_Receive_IT+0x76>
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d104      	bne.n	800e3e4 <UART_Start_Receive_IT+0x6c>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	22ff      	movs	r2, #255	; 0xff
 800e3de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3e2:	e01b      	b.n	800e41c <UART_Start_Receive_IT+0xa4>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	227f      	movs	r2, #127	; 0x7f
 800e3e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3ec:	e016      	b.n	800e41c <UART_Start_Receive_IT+0xa4>
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3f6:	d10d      	bne.n	800e414 <UART_Start_Receive_IT+0x9c>
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	691b      	ldr	r3, [r3, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d104      	bne.n	800e40a <UART_Start_Receive_IT+0x92>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	227f      	movs	r2, #127	; 0x7f
 800e404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e408:	e008      	b.n	800e41c <UART_Start_Receive_IT+0xa4>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	223f      	movs	r2, #63	; 0x3f
 800e40e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e412:	e003      	b.n	800e41c <UART_Start_Receive_IT+0xa4>
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2200      	movs	r2, #0
 800e418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2222      	movs	r2, #34	; 0x22
 800e428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	3308      	adds	r3, #8
 800e432:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e436:	e853 3f00 	ldrex	r3, [r3]
 800e43a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e43c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e43e:	f043 0301 	orr.w	r3, r3, #1
 800e442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	3308      	adds	r3, #8
 800e44c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e450:	673a      	str	r2, [r7, #112]	; 0x70
 800e452:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e454:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e456:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e458:	e841 2300 	strex	r3, r2, [r1]
 800e45c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e45e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1e3      	bne.n	800e42c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e46c:	d153      	bne.n	800e516 <UART_Start_Receive_IT+0x19e>
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e474:	88fa      	ldrh	r2, [r7, #6]
 800e476:	429a      	cmp	r2, r3
 800e478:	d34d      	bcc.n	800e516 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e482:	d107      	bne.n	800e494 <UART_Start_Receive_IT+0x11c>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	691b      	ldr	r3, [r3, #16]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d103      	bne.n	800e494 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	4a4b      	ldr	r2, [pc, #300]	; (800e5bc <UART_Start_Receive_IT+0x244>)
 800e490:	671a      	str	r2, [r3, #112]	; 0x70
 800e492:	e002      	b.n	800e49a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	4a4a      	ldr	r2, [pc, #296]	; (800e5c0 <UART_Start_Receive_IT+0x248>)
 800e498:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d01a      	beq.n	800e4e0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b2:	e853 3f00 	ldrex	r3, [r3]
 800e4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e4b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4ce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4d4:	e841 2300 	strex	r3, r2, [r1]
 800e4d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1e4      	bne.n	800e4aa <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	3308      	adds	r3, #8
 800e4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ea:	e853 3f00 	ldrex	r3, [r3]
 800e4ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	3308      	adds	r3, #8
 800e4fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e500:	64ba      	str	r2, [r7, #72]	; 0x48
 800e502:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e504:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e508:	e841 2300 	strex	r3, r2, [r1]
 800e50c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e50e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1e5      	bne.n	800e4e0 <UART_Start_Receive_IT+0x168>
 800e514:	e04a      	b.n	800e5ac <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e51e:	d107      	bne.n	800e530 <UART_Start_Receive_IT+0x1b8>
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d103      	bne.n	800e530 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	4a26      	ldr	r2, [pc, #152]	; (800e5c4 <UART_Start_Receive_IT+0x24c>)
 800e52c:	671a      	str	r2, [r3, #112]	; 0x70
 800e52e:	e002      	b.n	800e536 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	4a25      	ldr	r2, [pc, #148]	; (800e5c8 <UART_Start_Receive_IT+0x250>)
 800e534:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	691b      	ldr	r3, [r3, #16]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d019      	beq.n	800e57a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54e:	e853 3f00 	ldrex	r3, [r3]
 800e552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e556:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e55a:	677b      	str	r3, [r7, #116]	; 0x74
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	461a      	mov	r2, r3
 800e562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e564:	637b      	str	r3, [r7, #52]	; 0x34
 800e566:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e56a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e56c:	e841 2300 	strex	r3, r2, [r1]
 800e570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1e6      	bne.n	800e546 <UART_Start_Receive_IT+0x1ce>
 800e578:	e018      	b.n	800e5ac <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	e853 3f00 	ldrex	r3, [r3]
 800e586:	613b      	str	r3, [r7, #16]
   return(result);
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	f043 0320 	orr.w	r3, r3, #32
 800e58e:	67bb      	str	r3, [r7, #120]	; 0x78
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	461a      	mov	r2, r3
 800e596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e598:	623b      	str	r3, [r7, #32]
 800e59a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59c:	69f9      	ldr	r1, [r7, #28]
 800e59e:	6a3a      	ldr	r2, [r7, #32]
 800e5a0:	e841 2300 	strex	r3, r2, [r1]
 800e5a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1e6      	bne.n	800e57a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	378c      	adds	r7, #140	; 0x8c
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop
 800e5bc:	0800ecd5 	.word	0x0800ecd5
 800e5c0:	0800e9dd 	.word	0x0800e9dd
 800e5c4:	0800e87b 	.word	0x0800e87b
 800e5c8:	0800e71b 	.word	0x0800e71b

0800e5cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b095      	sub	sp, #84	; 0x54
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5dc:	e853 3f00 	ldrex	r3, [r3]
 800e5e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5f2:	643b      	str	r3, [r7, #64]	; 0x40
 800e5f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5fa:	e841 2300 	strex	r3, r2, [r1]
 800e5fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1e6      	bne.n	800e5d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3308      	adds	r3, #8
 800e60c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60e:	6a3b      	ldr	r3, [r7, #32]
 800e610:	e853 3f00 	ldrex	r3, [r3]
 800e614:	61fb      	str	r3, [r7, #28]
   return(result);
 800e616:	69fa      	ldr	r2, [r7, #28]
 800e618:	4b1e      	ldr	r3, [pc, #120]	; (800e694 <UART_EndRxTransfer+0xc8>)
 800e61a:	4013      	ands	r3, r2
 800e61c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3308      	adds	r3, #8
 800e624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e626:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e62c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e62e:	e841 2300 	strex	r3, r2, [r1]
 800e632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1e5      	bne.n	800e606 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d118      	bne.n	800e674 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	e853 3f00 	ldrex	r3, [r3]
 800e64e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	f023 0310 	bic.w	r3, r3, #16
 800e656:	647b      	str	r3, [r7, #68]	; 0x44
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	461a      	mov	r2, r3
 800e65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e660:	61bb      	str	r3, [r7, #24]
 800e662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e664:	6979      	ldr	r1, [r7, #20]
 800e666:	69ba      	ldr	r2, [r7, #24]
 800e668:	e841 2300 	strex	r3, r2, [r1]
 800e66c:	613b      	str	r3, [r7, #16]
   return(result);
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d1e6      	bne.n	800e642 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2220      	movs	r2, #32
 800e678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2200      	movs	r2, #0
 800e680:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e688:	bf00      	nop
 800e68a:	3754      	adds	r7, #84	; 0x54
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	effffffe 	.word	0xeffffffe

0800e698 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f7fe ff2a 	bl	800d510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6bc:	bf00      	nop
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b088      	sub	sp, #32
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	e853 3f00 	ldrex	r3, [r3]
 800e6d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6e0:	61fb      	str	r3, [r7, #28]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	61bb      	str	r3, [r7, #24]
 800e6ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ee:	6979      	ldr	r1, [r7, #20]
 800e6f0:	69ba      	ldr	r2, [r7, #24]
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	613b      	str	r3, [r7, #16]
   return(result);
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1e6      	bne.n	800e6cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2220      	movs	r2, #32
 800e702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7fe fef5 	bl	800d4fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e712:	bf00      	nop
 800e714:	3720      	adds	r7, #32
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b096      	sub	sp, #88	; 0x58
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e728:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e732:	2b22      	cmp	r3, #34	; 0x22
 800e734:	f040 8095 	bne.w	800e862 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e742:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e746:	b2d9      	uxtb	r1, r3
 800e748:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e752:	400a      	ands	r2, r1
 800e754:	b2d2      	uxtb	r2, r2
 800e756:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e768:	b29b      	uxth	r3, r3
 800e76a:	3b01      	subs	r3, #1
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d178      	bne.n	800e872 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e788:	e853 3f00 	ldrex	r3, [r3]
 800e78c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e794:	653b      	str	r3, [r7, #80]	; 0x50
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e79e:	647b      	str	r3, [r7, #68]	; 0x44
 800e7a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7a6:	e841 2300 	strex	r3, r2, [r1]
 800e7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1e6      	bne.n	800e780 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3308      	adds	r3, #8
 800e7b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	e853 3f00 	ldrex	r3, [r3]
 800e7c0:	623b      	str	r3, [r7, #32]
   return(result);
 800e7c2:	6a3b      	ldr	r3, [r7, #32]
 800e7c4:	f023 0301 	bic.w	r3, r3, #1
 800e7c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	3308      	adds	r3, #8
 800e7d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e7d2:	633a      	str	r2, [r7, #48]	; 0x30
 800e7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7da:	e841 2300 	strex	r3, r2, [r1]
 800e7de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1e5      	bne.n	800e7b2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2220      	movs	r2, #32
 800e7ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d12e      	bne.n	800e85a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	e853 3f00 	ldrex	r3, [r3]
 800e80e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f023 0310 	bic.w	r3, r3, #16
 800e816:	64bb      	str	r3, [r7, #72]	; 0x48
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	461a      	mov	r2, r3
 800e81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e820:	61fb      	str	r3, [r7, #28]
 800e822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e824:	69b9      	ldr	r1, [r7, #24]
 800e826:	69fa      	ldr	r2, [r7, #28]
 800e828:	e841 2300 	strex	r3, r2, [r1]
 800e82c:	617b      	str	r3, [r7, #20]
   return(result);
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1e6      	bne.n	800e802 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	69db      	ldr	r3, [r3, #28]
 800e83a:	f003 0310 	and.w	r3, r3, #16
 800e83e:	2b10      	cmp	r3, #16
 800e840:	d103      	bne.n	800e84a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2210      	movs	r2, #16
 800e848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7fe fe66 	bl	800d524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e858:	e00b      	b.n	800e872 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7f8 fbf6 	bl	800704c <HAL_UART_RxCpltCallback>
}
 800e860:	e007      	b.n	800e872 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	699a      	ldr	r2, [r3, #24]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f042 0208 	orr.w	r2, r2, #8
 800e870:	619a      	str	r2, [r3, #24]
}
 800e872:	bf00      	nop
 800e874:	3758      	adds	r7, #88	; 0x58
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b096      	sub	sp, #88	; 0x58
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e888:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e892:	2b22      	cmp	r3, #34	; 0x22
 800e894:	f040 8095 	bne.w	800e9c2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8a6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e8a8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e8ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8bc:	1c9a      	adds	r2, r3, #2
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d178      	bne.n	800e9d2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e8f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8fe:	643b      	str	r3, [r7, #64]	; 0x40
 800e900:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e6      	bne.n	800e8e0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3308      	adds	r3, #8
 800e918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91a:	6a3b      	ldr	r3, [r7, #32]
 800e91c:	e853 3f00 	ldrex	r3, [r3]
 800e920:	61fb      	str	r3, [r7, #28]
   return(result);
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	f023 0301 	bic.w	r3, r3, #1
 800e928:	64bb      	str	r3, [r7, #72]	; 0x48
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	3308      	adds	r3, #8
 800e930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e932:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e934:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e93a:	e841 2300 	strex	r3, r2, [r1]
 800e93e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1e5      	bne.n	800e912 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2220      	movs	r2, #32
 800e94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d12e      	bne.n	800e9ba <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	e853 3f00 	ldrex	r3, [r3]
 800e96e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	f023 0310 	bic.w	r3, r3, #16
 800e976:	647b      	str	r3, [r7, #68]	; 0x44
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	461a      	mov	r2, r3
 800e97e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e980:	61bb      	str	r3, [r7, #24]
 800e982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e984:	6979      	ldr	r1, [r7, #20]
 800e986:	69ba      	ldr	r2, [r7, #24]
 800e988:	e841 2300 	strex	r3, r2, [r1]
 800e98c:	613b      	str	r3, [r7, #16]
   return(result);
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1e6      	bne.n	800e962 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	f003 0310 	and.w	r3, r3, #16
 800e99e:	2b10      	cmp	r3, #16
 800e9a0:	d103      	bne.n	800e9aa <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2210      	movs	r2, #16
 800e9a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7fe fdb6 	bl	800d524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9b8:	e00b      	b.n	800e9d2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7f8 fb46 	bl	800704c <HAL_UART_RxCpltCallback>
}
 800e9c0:	e007      	b.n	800e9d2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	699a      	ldr	r2, [r3, #24]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f042 0208 	orr.w	r2, r2, #8
 800e9d0:	619a      	str	r2, [r3, #24]
}
 800e9d2:	bf00      	nop
 800e9d4:	3758      	adds	r7, #88	; 0x58
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
	...

0800e9dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b0a6      	sub	sp, #152	; 0x98
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e9ea:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	69db      	ldr	r3, [r3, #28]
 800e9f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea12:	2b22      	cmp	r3, #34	; 0x22
 800ea14:	f040 814d 	bne.w	800ecb2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ea1e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea22:	e0f4      	b.n	800ec0e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ea2e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ea32:	b2d9      	uxtb	r1, r3
 800ea34:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea3e:	400a      	ands	r2, r1
 800ea40:	b2d2      	uxtb	r2, r2
 800ea42:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	3b01      	subs	r3, #1
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	69db      	ldr	r3, [r3, #28]
 800ea66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ea6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea6e:	f003 0307 	and.w	r3, r3, #7
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d053      	beq.n	800eb1e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d011      	beq.n	800eaa6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ea82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ea86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00b      	beq.n	800eaa6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2201      	movs	r2, #1
 800ea94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea9c:	f043 0201 	orr.w	r2, r3, #1
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eaa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eaaa:	f003 0302 	and.w	r3, r3, #2
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d011      	beq.n	800ead6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800eab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eab6:	f003 0301 	and.w	r3, r3, #1
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00b      	beq.n	800ead6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2202      	movs	r2, #2
 800eac4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eacc:	f043 0204 	orr.w	r2, r3, #4
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ead6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eada:	f003 0304 	and.w	r3, r3, #4
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d011      	beq.n	800eb06 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800eae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eae6:	f003 0301 	and.w	r3, r3, #1
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00b      	beq.n	800eb06 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2204      	movs	r2, #4
 800eaf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eafc:	f043 0202 	orr.w	r2, r3, #2
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d006      	beq.n	800eb1e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7fe fcfd 	bl	800d510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d171      	bne.n	800ec0e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb32:	e853 3f00 	ldrex	r3, [r3]
 800eb36:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800eb38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eb4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb4e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb50:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eb52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eb54:	e841 2300 	strex	r3, r2, [r1]
 800eb58:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800eb5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1e4      	bne.n	800eb2a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3308      	adds	r3, #8
 800eb66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb6a:	e853 3f00 	ldrex	r3, [r3]
 800eb6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800eb70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb72:	4b56      	ldr	r3, [pc, #344]	; (800eccc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800eb74:	4013      	ands	r3, r2
 800eb76:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	3308      	adds	r3, #8
 800eb7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eb80:	657a      	str	r2, [r7, #84]	; 0x54
 800eb82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb88:	e841 2300 	strex	r3, r2, [r1]
 800eb8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1e5      	bne.n	800eb60 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2220      	movs	r2, #32
 800eb98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d12e      	bne.n	800ec08 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb8:	e853 3f00 	ldrex	r3, [r3]
 800ebbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	f023 0310 	bic.w	r3, r3, #16
 800ebc4:	67bb      	str	r3, [r7, #120]	; 0x78
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebce:	643b      	str	r3, [r7, #64]	; 0x40
 800ebd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebd6:	e841 2300 	strex	r3, r2, [r1]
 800ebda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1e6      	bne.n	800ebb0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	f003 0310 	and.w	r3, r3, #16
 800ebec:	2b10      	cmp	r3, #16
 800ebee:	d103      	bne.n	800ebf8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2210      	movs	r2, #16
 800ebf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7fe fc8f 	bl	800d524 <HAL_UARTEx_RxEventCallback>
 800ec06:	e002      	b.n	800ec0e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f7f8 fa1f 	bl	800704c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d006      	beq.n	800ec24 <UART_RxISR_8BIT_FIFOEN+0x248>
 800ec16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ec1a:	f003 0320 	and.w	r3, r3, #32
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f47f af00 	bne.w	800ea24 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ec2e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d045      	beq.n	800ecc2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ec3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d23e      	bcs.n	800ecc2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	3308      	adds	r3, #8
 800ec4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec4c:	6a3b      	ldr	r3, [r7, #32]
 800ec4e:	e853 3f00 	ldrex	r3, [r3]
 800ec52:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ec5a:	673b      	str	r3, [r7, #112]	; 0x70
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3308      	adds	r3, #8
 800ec62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec64:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec6c:	e841 2300 	strex	r3, r2, [r1]
 800ec70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1e5      	bne.n	800ec44 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a15      	ldr	r2, [pc, #84]	; (800ecd0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800ec7c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	e853 3f00 	ldrex	r3, [r3]
 800ec8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	f043 0320 	orr.w	r3, r3, #32
 800ec92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec9c:	61bb      	str	r3, [r7, #24]
 800ec9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca0:	6979      	ldr	r1, [r7, #20]
 800eca2:	69ba      	ldr	r2, [r7, #24]
 800eca4:	e841 2300 	strex	r3, r2, [r1]
 800eca8:	613b      	str	r3, [r7, #16]
   return(result);
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1e6      	bne.n	800ec7e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecb0:	e007      	b.n	800ecc2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	699a      	ldr	r2, [r3, #24]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f042 0208 	orr.w	r2, r2, #8
 800ecc0:	619a      	str	r2, [r3, #24]
}
 800ecc2:	bf00      	nop
 800ecc4:	3798      	adds	r7, #152	; 0x98
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	effffffe 	.word	0xeffffffe
 800ecd0:	0800e71b 	.word	0x0800e71b

0800ecd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b0a8      	sub	sp, #160	; 0xa0
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ece2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	69db      	ldr	r3, [r3, #28]
 800ecec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed0a:	2b22      	cmp	r3, #34	; 0x22
 800ed0c:	f040 8151 	bne.w	800efb2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ed16:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ed1a:	e0f8      	b.n	800ef0e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed22:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ed2e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ed32:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ed36:	4013      	ands	r3, r2
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ed3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed44:	1c9a      	adds	r2, r3, #2
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	3b01      	subs	r3, #1
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	69db      	ldr	r3, [r3, #28]
 800ed62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ed66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ed6a:	f003 0307 	and.w	r3, r3, #7
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d053      	beq.n	800ee1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ed76:	f003 0301 	and.w	r3, r3, #1
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d011      	beq.n	800eda2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ed7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ed82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00b      	beq.n	800eda2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed98:	f043 0201 	orr.w	r2, r3, #1
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eda2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eda6:	f003 0302 	and.w	r3, r3, #2
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d011      	beq.n	800edd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800edae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800edb2:	f003 0301 	and.w	r3, r3, #1
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00b      	beq.n	800edd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2202      	movs	r2, #2
 800edc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edc8:	f043 0204 	orr.w	r2, r3, #4
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800edd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800edd6:	f003 0304 	and.w	r3, r3, #4
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d011      	beq.n	800ee02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800edde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ede2:	f003 0301 	and.w	r3, r3, #1
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00b      	beq.n	800ee02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2204      	movs	r2, #4
 800edf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edf8:	f043 0202 	orr.w	r2, r3, #2
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d006      	beq.n	800ee1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7fe fb7f 	bl	800d510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d173      	bne.n	800ef0e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee2e:	e853 3f00 	ldrex	r3, [r3]
 800ee32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ee34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	461a      	mov	r2, r3
 800ee44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee48:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee4a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ee4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ee50:	e841 2300 	strex	r3, r2, [r1]
 800ee54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ee56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1e4      	bne.n	800ee26 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3308      	adds	r3, #8
 800ee62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee66:	e853 3f00 	ldrex	r3, [r3]
 800ee6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ee6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee6e:	4b57      	ldr	r3, [pc, #348]	; (800efcc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800ee70:	4013      	ands	r3, r2
 800ee72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	3308      	adds	r3, #8
 800ee7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ee80:	65ba      	str	r2, [r7, #88]	; 0x58
 800ee82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ee86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee88:	e841 2300 	strex	r3, r2, [r1]
 800ee8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ee8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d1e3      	bne.n	800ee5c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2220      	movs	r2, #32
 800ee98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d12e      	bne.n	800ef08 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb8:	e853 3f00 	ldrex	r3, [r3]
 800eebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec0:	f023 0310 	bic.w	r3, r3, #16
 800eec4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	461a      	mov	r2, r3
 800eecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eece:	647b      	str	r3, [r7, #68]	; 0x44
 800eed0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eed6:	e841 2300 	strex	r3, r2, [r1]
 800eeda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1e6      	bne.n	800eeb0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	69db      	ldr	r3, [r3, #28]
 800eee8:	f003 0310 	and.w	r3, r3, #16
 800eeec:	2b10      	cmp	r3, #16
 800eeee:	d103      	bne.n	800eef8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2210      	movs	r2, #16
 800eef6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eefe:	4619      	mov	r1, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7fe fb0f 	bl	800d524 <HAL_UARTEx_RxEventCallback>
 800ef06:	e002      	b.n	800ef0e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f7f8 f89f 	bl	800704c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d006      	beq.n	800ef24 <UART_RxISR_16BIT_FIFOEN+0x250>
 800ef16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef1a:	f003 0320 	and.w	r3, r3, #32
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f47f aefc 	bne.w	800ed1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef2a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ef2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d045      	beq.n	800efc2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef3c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d23e      	bcs.n	800efc2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	3308      	adds	r3, #8
 800ef4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4e:	e853 3f00 	ldrex	r3, [r3]
 800ef52:	623b      	str	r3, [r7, #32]
   return(result);
 800ef54:	6a3b      	ldr	r3, [r7, #32]
 800ef56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ef5a:	677b      	str	r3, [r7, #116]	; 0x74
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3308      	adds	r3, #8
 800ef62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ef64:	633a      	str	r2, [r7, #48]	; 0x30
 800ef66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef6c:	e841 2300 	strex	r3, r2, [r1]
 800ef70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1e5      	bne.n	800ef44 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a15      	ldr	r2, [pc, #84]	; (800efd0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ef7c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	e853 3f00 	ldrex	r3, [r3]
 800ef8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f043 0320 	orr.w	r3, r3, #32
 800ef92:	673b      	str	r3, [r7, #112]	; 0x70
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	461a      	mov	r2, r3
 800ef9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef9c:	61fb      	str	r3, [r7, #28]
 800ef9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa0:	69b9      	ldr	r1, [r7, #24]
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	e841 2300 	strex	r3, r2, [r1]
 800efa8:	617b      	str	r3, [r7, #20]
   return(result);
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1e6      	bne.n	800ef7e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efb0:	e007      	b.n	800efc2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	699a      	ldr	r2, [r3, #24]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f042 0208 	orr.w	r2, r2, #8
 800efc0:	619a      	str	r2, [r3, #24]
}
 800efc2:	bf00      	nop
 800efc4:	37a0      	adds	r7, #160	; 0xa0
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	effffffe 	.word	0xeffffffe
 800efd0:	0800e87b 	.word	0x0800e87b

0800efd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800efdc:	bf00      	nop
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eff0:	bf00      	nop
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f004:	bf00      	nop
 800f006:	370c      	adds	r7, #12
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d101      	bne.n	800f026 <HAL_UARTEx_DisableFifoMode+0x16>
 800f022:	2302      	movs	r3, #2
 800f024:	e027      	b.n	800f076 <HAL_UARTEx_DisableFifoMode+0x66>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2201      	movs	r2, #1
 800f02a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2224      	movs	r2, #36	; 0x24
 800f032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f022 0201 	bic.w	r2, r2, #1
 800f04c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f054:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2200      	movs	r2, #0
 800f05a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2220      	movs	r2, #32
 800f068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3714      	adds	r7, #20
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr

0800f082 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f082:	b580      	push	{r7, lr}
 800f084:	b084      	sub	sp, #16
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
 800f08a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f092:	2b01      	cmp	r3, #1
 800f094:	d101      	bne.n	800f09a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f096:	2302      	movs	r3, #2
 800f098:	e02d      	b.n	800f0f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2201      	movs	r2, #1
 800f09e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2224      	movs	r2, #36	; 0x24
 800f0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f022 0201 	bic.w	r2, r2, #1
 800f0c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	430a      	orrs	r2, r1
 800f0d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f850 	bl	800f17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2220      	movs	r2, #32
 800f0e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b084      	sub	sp, #16
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d101      	bne.n	800f116 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f112:	2302      	movs	r3, #2
 800f114:	e02d      	b.n	800f172 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2201      	movs	r2, #1
 800f11a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2224      	movs	r2, #36	; 0x24
 800f122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f022 0201 	bic.w	r2, r2, #1
 800f13c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	683a      	ldr	r2, [r7, #0]
 800f14e:	430a      	orrs	r2, r1
 800f150:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f812 	bl	800f17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2220      	movs	r2, #32
 800f164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
	...

0800f17c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d108      	bne.n	800f19e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2201      	movs	r2, #1
 800f190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2201      	movs	r2, #1
 800f198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f19c:	e031      	b.n	800f202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f19e:	2310      	movs	r3, #16
 800f1a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f1a2:	2310      	movs	r3, #16
 800f1a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	0e5b      	lsrs	r3, r3, #25
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	f003 0307 	and.w	r3, r3, #7
 800f1b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	0f5b      	lsrs	r3, r3, #29
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	f003 0307 	and.w	r3, r3, #7
 800f1c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
 800f1c8:	7b3a      	ldrb	r2, [r7, #12]
 800f1ca:	4911      	ldr	r1, [pc, #68]	; (800f210 <UARTEx_SetNbDataToProcess+0x94>)
 800f1cc:	5c8a      	ldrb	r2, [r1, r2]
 800f1ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f1d2:	7b3a      	ldrb	r2, [r7, #12]
 800f1d4:	490f      	ldr	r1, [pc, #60]	; (800f214 <UARTEx_SetNbDataToProcess+0x98>)
 800f1d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1e4:	7bfb      	ldrb	r3, [r7, #15]
 800f1e6:	7b7a      	ldrb	r2, [r7, #13]
 800f1e8:	4909      	ldr	r1, [pc, #36]	; (800f210 <UARTEx_SetNbDataToProcess+0x94>)
 800f1ea:	5c8a      	ldrb	r2, [r1, r2]
 800f1ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f1f0:	7b7a      	ldrb	r2, [r7, #13]
 800f1f2:	4908      	ldr	r1, [pc, #32]	; (800f214 <UARTEx_SetNbDataToProcess+0x98>)
 800f1f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f202:	bf00      	nop
 800f204:	3714      	adds	r7, #20
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	08010f1c 	.word	0x08010f1c
 800f214:	08010f24 	.word	0x08010f24

0800f218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f218:	b084      	sub	sp, #16
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b084      	sub	sp, #16
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	f107 001c 	add.w	r0, r7, #28
 800f226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d120      	bne.n	800f272 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	68da      	ldr	r2, [r3, #12]
 800f240:	4b2a      	ldr	r3, [pc, #168]	; (800f2ec <USB_CoreInit+0xd4>)
 800f242:	4013      	ands	r3, r2
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f256:	2b01      	cmp	r3, #1
 800f258:	d105      	bne.n	800f266 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 f914 	bl	800f494 <USB_CoreReset>
 800f26c:	4603      	mov	r3, r0
 800f26e:	73fb      	strb	r3, [r7, #15]
 800f270:	e01a      	b.n	800f2a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 f908 	bl	800f494 <USB_CoreReset>
 800f284:	4603      	mov	r3, r0
 800f286:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	639a      	str	r2, [r3, #56]	; 0x38
 800f29a:	e005      	b.n	800f2a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d116      	bne.n	800f2dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f2bc:	4b0c      	ldr	r3, [pc, #48]	; (800f2f0 <USB_CoreInit+0xd8>)
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f043 0206 	orr.w	r2, r3, #6
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	f043 0220 	orr.w	r2, r3, #32
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f2e8:	b004      	add	sp, #16
 800f2ea:	4770      	bx	lr
 800f2ec:	ffbdffbf 	.word	0xffbdffbf
 800f2f0:	03ee0000 	.word	0x03ee0000

0800f2f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	689b      	ldr	r3, [r3, #8]
 800f300:	f023 0201 	bic.w	r2, r3, #1
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	370c      	adds	r7, #12
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b084      	sub	sp, #16
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
 800f31e:	460b      	mov	r3, r1
 800f320:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f322:	2300      	movs	r3, #0
 800f324:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f332:	78fb      	ldrb	r3, [r7, #3]
 800f334:	2b01      	cmp	r3, #1
 800f336:	d115      	bne.n	800f364 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f344:	2001      	movs	r0, #1
 800f346:	f7f8 fb2b 	bl	80079a0 <HAL_Delay>
      ms++;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	3301      	adds	r3, #1
 800f34e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 f891 	bl	800f478 <USB_GetMode>
 800f356:	4603      	mov	r3, r0
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d01e      	beq.n	800f39a <USB_SetCurrentMode+0x84>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2b31      	cmp	r3, #49	; 0x31
 800f360:	d9f0      	bls.n	800f344 <USB_SetCurrentMode+0x2e>
 800f362:	e01a      	b.n	800f39a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f364:	78fb      	ldrb	r3, [r7, #3]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d115      	bne.n	800f396 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f376:	2001      	movs	r0, #1
 800f378:	f7f8 fb12 	bl	80079a0 <HAL_Delay>
      ms++;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3301      	adds	r3, #1
 800f380:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f878 	bl	800f478 <USB_GetMode>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d005      	beq.n	800f39a <USB_SetCurrentMode+0x84>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2b31      	cmp	r3, #49	; 0x31
 800f392:	d9f0      	bls.n	800f376 <USB_SetCurrentMode+0x60>
 800f394:	e001      	b.n	800f39a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f396:	2301      	movs	r3, #1
 800f398:	e005      	b.n	800f3a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2b32      	cmp	r3, #50	; 0x32
 800f39e:	d101      	bne.n	800f3a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e000      	b.n	800f3a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f3a4:	2300      	movs	r3, #0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3710      	adds	r7, #16
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
	...

0800f3b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b085      	sub	sp, #20
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	4a13      	ldr	r2, [pc, #76]	; (800f414 <USB_FlushTxFifo+0x64>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d901      	bls.n	800f3d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f3cc:	2303      	movs	r3, #3
 800f3ce:	e01b      	b.n	800f408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	daf2      	bge.n	800f3be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	019b      	lsls	r3, r3, #6
 800f3e0:	f043 0220 	orr.w	r2, r3, #32
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	4a08      	ldr	r2, [pc, #32]	; (800f414 <USB_FlushTxFifo+0x64>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d901      	bls.n	800f3fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f3f6:	2303      	movs	r3, #3
 800f3f8:	e006      	b.n	800f408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	f003 0320 	and.w	r3, r3, #32
 800f402:	2b20      	cmp	r3, #32
 800f404:	d0f0      	beq.n	800f3e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3714      	adds	r7, #20
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	00030d40 	.word	0x00030d40

0800f418 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f420:	2300      	movs	r3, #0
 800f422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	3301      	adds	r3, #1
 800f428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	4a11      	ldr	r2, [pc, #68]	; (800f474 <USB_FlushRxFifo+0x5c>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d901      	bls.n	800f436 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f432:	2303      	movs	r3, #3
 800f434:	e018      	b.n	800f468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	daf2      	bge.n	800f424 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f43e:	2300      	movs	r3, #0
 800f440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2210      	movs	r2, #16
 800f446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	3301      	adds	r3, #1
 800f44c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	4a08      	ldr	r2, [pc, #32]	; (800f474 <USB_FlushRxFifo+0x5c>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d901      	bls.n	800f45a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f456:	2303      	movs	r3, #3
 800f458:	e006      	b.n	800f468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	f003 0310 	and.w	r3, r3, #16
 800f462:	2b10      	cmp	r3, #16
 800f464:	d0f0      	beq.n	800f448 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f466:	2300      	movs	r3, #0
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3714      	adds	r7, #20
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr
 800f474:	00030d40 	.word	0x00030d40

0800f478 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	695b      	ldr	r3, [r3, #20]
 800f484:	f003 0301 	and.w	r3, r3, #1
}
 800f488:	4618      	mov	r0, r3
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f494:	b480      	push	{r7}
 800f496:	b085      	sub	sp, #20
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f49c:	2300      	movs	r3, #0
 800f49e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	4a13      	ldr	r2, [pc, #76]	; (800f4f8 <USB_CoreReset+0x64>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d901      	bls.n	800f4b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f4ae:	2303      	movs	r3, #3
 800f4b0:	e01b      	b.n	800f4ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	daf2      	bge.n	800f4a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	691b      	ldr	r3, [r3, #16]
 800f4c2:	f043 0201 	orr.w	r2, r3, #1
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	4a09      	ldr	r2, [pc, #36]	; (800f4f8 <USB_CoreReset+0x64>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d901      	bls.n	800f4dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f4d8:	2303      	movs	r3, #3
 800f4da:	e006      	b.n	800f4ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	f003 0301 	and.w	r3, r3, #1
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d0f0      	beq.n	800f4ca <USB_CoreReset+0x36>

  return HAL_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	00030d40 	.word	0x00030d40

0800f4fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f4fc:	b084      	sub	sp, #16
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b086      	sub	sp, #24
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f50a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f50e:	2300      	movs	r3, #0
 800f510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f51c:	461a      	mov	r2, r3
 800f51e:	2300      	movs	r3, #0
 800f520:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f526:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f532:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f53e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f542:	2b00      	cmp	r3, #0
 800f544:	d018      	beq.n	800f578 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800f546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d10a      	bne.n	800f562 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f55a:	f043 0304 	orr.w	r3, r3, #4
 800f55e:	6013      	str	r3, [r2, #0]
 800f560:	e014      	b.n	800f58c <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f570:	f023 0304 	bic.w	r3, r3, #4
 800f574:	6013      	str	r3, [r2, #0]
 800f576:	e009      	b.n	800f58c <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f586:	f023 0304 	bic.w	r3, r3, #4
 800f58a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f58c:	2110      	movs	r1, #16
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7ff ff0e 	bl	800f3b0 <USB_FlushTxFifo>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 800f59a:	2301      	movs	r3, #1
 800f59c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7ff ff3a 	bl	800f418 <USB_FlushRxFifo>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d001      	beq.n	800f5ae <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	613b      	str	r3, [r7, #16]
 800f5b2:	e015      	b.n	800f5e0 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	015a      	lsls	r2, r3, #5
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	015a      	lsls	r2, r3, #5
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	613b      	str	r3, [r7, #16]
 800f5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e2:	693a      	ldr	r2, [r7, #16]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d3e5      	bcc.n	800f5b4 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d00b      	beq.n	800f61a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f608:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a13      	ldr	r2, [pc, #76]	; (800f65c <USB_HostInit+0x160>)
 800f60e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4a13      	ldr	r2, [pc, #76]	; (800f660 <USB_HostInit+0x164>)
 800f614:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800f618:	e009      	b.n	800f62e <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2280      	movs	r2, #128	; 0x80
 800f61e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4a10      	ldr	r2, [pc, #64]	; (800f664 <USB_HostInit+0x168>)
 800f624:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4a0f      	ldr	r2, [pc, #60]	; (800f668 <USB_HostInit+0x16c>)
 800f62a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	2b00      	cmp	r3, #0
 800f632:	d105      	bne.n	800f640 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	699b      	ldr	r3, [r3, #24]
 800f638:	f043 0210 	orr.w	r2, r3, #16
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	699a      	ldr	r2, [r3, #24]
 800f644:	4b09      	ldr	r3, [pc, #36]	; (800f66c <USB_HostInit+0x170>)
 800f646:	4313      	orrs	r3, r2
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800f64c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3718      	adds	r7, #24
 800f652:	46bd      	mov	sp, r7
 800f654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f658:	b004      	add	sp, #16
 800f65a:	4770      	bx	lr
 800f65c:	01000200 	.word	0x01000200
 800f660:	00e00300 	.word	0x00e00300
 800f664:	00600080 	.word	0x00600080
 800f668:	004000e0 	.word	0x004000e0
 800f66c:	a3200008 	.word	0xa3200008

0800f670 <__libc_init_array>:
 800f670:	b570      	push	{r4, r5, r6, lr}
 800f672:	4d0d      	ldr	r5, [pc, #52]	; (800f6a8 <__libc_init_array+0x38>)
 800f674:	4c0d      	ldr	r4, [pc, #52]	; (800f6ac <__libc_init_array+0x3c>)
 800f676:	1b64      	subs	r4, r4, r5
 800f678:	10a4      	asrs	r4, r4, #2
 800f67a:	2600      	movs	r6, #0
 800f67c:	42a6      	cmp	r6, r4
 800f67e:	d109      	bne.n	800f694 <__libc_init_array+0x24>
 800f680:	4d0b      	ldr	r5, [pc, #44]	; (800f6b0 <__libc_init_array+0x40>)
 800f682:	4c0c      	ldr	r4, [pc, #48]	; (800f6b4 <__libc_init_array+0x44>)
 800f684:	f001 f996 	bl	80109b4 <_init>
 800f688:	1b64      	subs	r4, r4, r5
 800f68a:	10a4      	asrs	r4, r4, #2
 800f68c:	2600      	movs	r6, #0
 800f68e:	42a6      	cmp	r6, r4
 800f690:	d105      	bne.n	800f69e <__libc_init_array+0x2e>
 800f692:	bd70      	pop	{r4, r5, r6, pc}
 800f694:	f855 3b04 	ldr.w	r3, [r5], #4
 800f698:	4798      	blx	r3
 800f69a:	3601      	adds	r6, #1
 800f69c:	e7ee      	b.n	800f67c <__libc_init_array+0xc>
 800f69e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6a2:	4798      	blx	r3
 800f6a4:	3601      	adds	r6, #1
 800f6a6:	e7f2      	b.n	800f68e <__libc_init_array+0x1e>
 800f6a8:	08010fcc 	.word	0x08010fcc
 800f6ac:	08010fcc 	.word	0x08010fcc
 800f6b0:	08010fcc 	.word	0x08010fcc
 800f6b4:	08010fd0 	.word	0x08010fd0

0800f6b8 <memcmp>:
 800f6b8:	b510      	push	{r4, lr}
 800f6ba:	3901      	subs	r1, #1
 800f6bc:	4402      	add	r2, r0
 800f6be:	4290      	cmp	r0, r2
 800f6c0:	d101      	bne.n	800f6c6 <memcmp+0xe>
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	e005      	b.n	800f6d2 <memcmp+0x1a>
 800f6c6:	7803      	ldrb	r3, [r0, #0]
 800f6c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	d001      	beq.n	800f6d4 <memcmp+0x1c>
 800f6d0:	1b18      	subs	r0, r3, r4
 800f6d2:	bd10      	pop	{r4, pc}
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	e7f2      	b.n	800f6be <memcmp+0x6>

0800f6d8 <memcpy>:
 800f6d8:	440a      	add	r2, r1
 800f6da:	4291      	cmp	r1, r2
 800f6dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6e0:	d100      	bne.n	800f6e4 <memcpy+0xc>
 800f6e2:	4770      	bx	lr
 800f6e4:	b510      	push	{r4, lr}
 800f6e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6ee:	4291      	cmp	r1, r2
 800f6f0:	d1f9      	bne.n	800f6e6 <memcpy+0xe>
 800f6f2:	bd10      	pop	{r4, pc}

0800f6f4 <memset>:
 800f6f4:	4402      	add	r2, r0
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d100      	bne.n	800f6fe <memset+0xa>
 800f6fc:	4770      	bx	lr
 800f6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800f702:	e7f9      	b.n	800f6f8 <memset+0x4>

0800f704 <iprintf>:
 800f704:	b40f      	push	{r0, r1, r2, r3}
 800f706:	4b0a      	ldr	r3, [pc, #40]	; (800f730 <iprintf+0x2c>)
 800f708:	b513      	push	{r0, r1, r4, lr}
 800f70a:	681c      	ldr	r4, [r3, #0]
 800f70c:	b124      	cbz	r4, 800f718 <iprintf+0x14>
 800f70e:	69a3      	ldr	r3, [r4, #24]
 800f710:	b913      	cbnz	r3, 800f718 <iprintf+0x14>
 800f712:	4620      	mov	r0, r4
 800f714:	f000 f886 	bl	800f824 <__sinit>
 800f718:	ab05      	add	r3, sp, #20
 800f71a:	9a04      	ldr	r2, [sp, #16]
 800f71c:	68a1      	ldr	r1, [r4, #8]
 800f71e:	9301      	str	r3, [sp, #4]
 800f720:	4620      	mov	r0, r4
 800f722:	f000 fb39 	bl	800fd98 <_vfiprintf_r>
 800f726:	b002      	add	sp, #8
 800f728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f72c:	b004      	add	sp, #16
 800f72e:	4770      	bx	lr
 800f730:	2400003c 	.word	0x2400003c

0800f734 <siprintf>:
 800f734:	b40e      	push	{r1, r2, r3}
 800f736:	b500      	push	{lr}
 800f738:	b09c      	sub	sp, #112	; 0x70
 800f73a:	ab1d      	add	r3, sp, #116	; 0x74
 800f73c:	9002      	str	r0, [sp, #8]
 800f73e:	9006      	str	r0, [sp, #24]
 800f740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f744:	4809      	ldr	r0, [pc, #36]	; (800f76c <siprintf+0x38>)
 800f746:	9107      	str	r1, [sp, #28]
 800f748:	9104      	str	r1, [sp, #16]
 800f74a:	4909      	ldr	r1, [pc, #36]	; (800f770 <siprintf+0x3c>)
 800f74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f750:	9105      	str	r1, [sp, #20]
 800f752:	6800      	ldr	r0, [r0, #0]
 800f754:	9301      	str	r3, [sp, #4]
 800f756:	a902      	add	r1, sp, #8
 800f758:	f000 f9f4 	bl	800fb44 <_svfiprintf_r>
 800f75c:	9b02      	ldr	r3, [sp, #8]
 800f75e:	2200      	movs	r2, #0
 800f760:	701a      	strb	r2, [r3, #0]
 800f762:	b01c      	add	sp, #112	; 0x70
 800f764:	f85d eb04 	ldr.w	lr, [sp], #4
 800f768:	b003      	add	sp, #12
 800f76a:	4770      	bx	lr
 800f76c:	2400003c 	.word	0x2400003c
 800f770:	ffff0208 	.word	0xffff0208

0800f774 <std>:
 800f774:	2300      	movs	r3, #0
 800f776:	b510      	push	{r4, lr}
 800f778:	4604      	mov	r4, r0
 800f77a:	e9c0 3300 	strd	r3, r3, [r0]
 800f77e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f782:	6083      	str	r3, [r0, #8]
 800f784:	8181      	strh	r1, [r0, #12]
 800f786:	6643      	str	r3, [r0, #100]	; 0x64
 800f788:	81c2      	strh	r2, [r0, #14]
 800f78a:	6183      	str	r3, [r0, #24]
 800f78c:	4619      	mov	r1, r3
 800f78e:	2208      	movs	r2, #8
 800f790:	305c      	adds	r0, #92	; 0x5c
 800f792:	f7ff ffaf 	bl	800f6f4 <memset>
 800f796:	4b05      	ldr	r3, [pc, #20]	; (800f7ac <std+0x38>)
 800f798:	6263      	str	r3, [r4, #36]	; 0x24
 800f79a:	4b05      	ldr	r3, [pc, #20]	; (800f7b0 <std+0x3c>)
 800f79c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f79e:	4b05      	ldr	r3, [pc, #20]	; (800f7b4 <std+0x40>)
 800f7a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f7a2:	4b05      	ldr	r3, [pc, #20]	; (800f7b8 <std+0x44>)
 800f7a4:	6224      	str	r4, [r4, #32]
 800f7a6:	6323      	str	r3, [r4, #48]	; 0x30
 800f7a8:	bd10      	pop	{r4, pc}
 800f7aa:	bf00      	nop
 800f7ac:	08010341 	.word	0x08010341
 800f7b0:	08010363 	.word	0x08010363
 800f7b4:	0801039b 	.word	0x0801039b
 800f7b8:	080103bf 	.word	0x080103bf

0800f7bc <_cleanup_r>:
 800f7bc:	4901      	ldr	r1, [pc, #4]	; (800f7c4 <_cleanup_r+0x8>)
 800f7be:	f000 b8af 	b.w	800f920 <_fwalk_reent>
 800f7c2:	bf00      	nop
 800f7c4:	08010675 	.word	0x08010675

0800f7c8 <__sfmoreglue>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	2268      	movs	r2, #104	; 0x68
 800f7cc:	1e4d      	subs	r5, r1, #1
 800f7ce:	4355      	muls	r5, r2
 800f7d0:	460e      	mov	r6, r1
 800f7d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f7d6:	f000 f8e5 	bl	800f9a4 <_malloc_r>
 800f7da:	4604      	mov	r4, r0
 800f7dc:	b140      	cbz	r0, 800f7f0 <__sfmoreglue+0x28>
 800f7de:	2100      	movs	r1, #0
 800f7e0:	e9c0 1600 	strd	r1, r6, [r0]
 800f7e4:	300c      	adds	r0, #12
 800f7e6:	60a0      	str	r0, [r4, #8]
 800f7e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f7ec:	f7ff ff82 	bl	800f6f4 <memset>
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}

0800f7f4 <__sfp_lock_acquire>:
 800f7f4:	4801      	ldr	r0, [pc, #4]	; (800f7fc <__sfp_lock_acquire+0x8>)
 800f7f6:	f000 b8b3 	b.w	800f960 <__retarget_lock_acquire_recursive>
 800f7fa:	bf00      	nop
 800f7fc:	2407f641 	.word	0x2407f641

0800f800 <__sfp_lock_release>:
 800f800:	4801      	ldr	r0, [pc, #4]	; (800f808 <__sfp_lock_release+0x8>)
 800f802:	f000 b8ae 	b.w	800f962 <__retarget_lock_release_recursive>
 800f806:	bf00      	nop
 800f808:	2407f641 	.word	0x2407f641

0800f80c <__sinit_lock_acquire>:
 800f80c:	4801      	ldr	r0, [pc, #4]	; (800f814 <__sinit_lock_acquire+0x8>)
 800f80e:	f000 b8a7 	b.w	800f960 <__retarget_lock_acquire_recursive>
 800f812:	bf00      	nop
 800f814:	2407f642 	.word	0x2407f642

0800f818 <__sinit_lock_release>:
 800f818:	4801      	ldr	r0, [pc, #4]	; (800f820 <__sinit_lock_release+0x8>)
 800f81a:	f000 b8a2 	b.w	800f962 <__retarget_lock_release_recursive>
 800f81e:	bf00      	nop
 800f820:	2407f642 	.word	0x2407f642

0800f824 <__sinit>:
 800f824:	b510      	push	{r4, lr}
 800f826:	4604      	mov	r4, r0
 800f828:	f7ff fff0 	bl	800f80c <__sinit_lock_acquire>
 800f82c:	69a3      	ldr	r3, [r4, #24]
 800f82e:	b11b      	cbz	r3, 800f838 <__sinit+0x14>
 800f830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f834:	f7ff bff0 	b.w	800f818 <__sinit_lock_release>
 800f838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f83c:	6523      	str	r3, [r4, #80]	; 0x50
 800f83e:	4b13      	ldr	r3, [pc, #76]	; (800f88c <__sinit+0x68>)
 800f840:	4a13      	ldr	r2, [pc, #76]	; (800f890 <__sinit+0x6c>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	62a2      	str	r2, [r4, #40]	; 0x28
 800f846:	42a3      	cmp	r3, r4
 800f848:	bf04      	itt	eq
 800f84a:	2301      	moveq	r3, #1
 800f84c:	61a3      	streq	r3, [r4, #24]
 800f84e:	4620      	mov	r0, r4
 800f850:	f000 f820 	bl	800f894 <__sfp>
 800f854:	6060      	str	r0, [r4, #4]
 800f856:	4620      	mov	r0, r4
 800f858:	f000 f81c 	bl	800f894 <__sfp>
 800f85c:	60a0      	str	r0, [r4, #8]
 800f85e:	4620      	mov	r0, r4
 800f860:	f000 f818 	bl	800f894 <__sfp>
 800f864:	2200      	movs	r2, #0
 800f866:	60e0      	str	r0, [r4, #12]
 800f868:	2104      	movs	r1, #4
 800f86a:	6860      	ldr	r0, [r4, #4]
 800f86c:	f7ff ff82 	bl	800f774 <std>
 800f870:	68a0      	ldr	r0, [r4, #8]
 800f872:	2201      	movs	r2, #1
 800f874:	2109      	movs	r1, #9
 800f876:	f7ff ff7d 	bl	800f774 <std>
 800f87a:	68e0      	ldr	r0, [r4, #12]
 800f87c:	2202      	movs	r2, #2
 800f87e:	2112      	movs	r1, #18
 800f880:	f7ff ff78 	bl	800f774 <std>
 800f884:	2301      	movs	r3, #1
 800f886:	61a3      	str	r3, [r4, #24]
 800f888:	e7d2      	b.n	800f830 <__sinit+0xc>
 800f88a:	bf00      	nop
 800f88c:	08010f2c 	.word	0x08010f2c
 800f890:	0800f7bd 	.word	0x0800f7bd

0800f894 <__sfp>:
 800f894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f896:	4607      	mov	r7, r0
 800f898:	f7ff ffac 	bl	800f7f4 <__sfp_lock_acquire>
 800f89c:	4b1e      	ldr	r3, [pc, #120]	; (800f918 <__sfp+0x84>)
 800f89e:	681e      	ldr	r6, [r3, #0]
 800f8a0:	69b3      	ldr	r3, [r6, #24]
 800f8a2:	b913      	cbnz	r3, 800f8aa <__sfp+0x16>
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	f7ff ffbd 	bl	800f824 <__sinit>
 800f8aa:	3648      	adds	r6, #72	; 0x48
 800f8ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	d503      	bpl.n	800f8bc <__sfp+0x28>
 800f8b4:	6833      	ldr	r3, [r6, #0]
 800f8b6:	b30b      	cbz	r3, 800f8fc <__sfp+0x68>
 800f8b8:	6836      	ldr	r6, [r6, #0]
 800f8ba:	e7f7      	b.n	800f8ac <__sfp+0x18>
 800f8bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f8c0:	b9d5      	cbnz	r5, 800f8f8 <__sfp+0x64>
 800f8c2:	4b16      	ldr	r3, [pc, #88]	; (800f91c <__sfp+0x88>)
 800f8c4:	60e3      	str	r3, [r4, #12]
 800f8c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f8ca:	6665      	str	r5, [r4, #100]	; 0x64
 800f8cc:	f000 f847 	bl	800f95e <__retarget_lock_init_recursive>
 800f8d0:	f7ff ff96 	bl	800f800 <__sfp_lock_release>
 800f8d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f8d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f8dc:	6025      	str	r5, [r4, #0]
 800f8de:	61a5      	str	r5, [r4, #24]
 800f8e0:	2208      	movs	r2, #8
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f8e8:	f7ff ff04 	bl	800f6f4 <memset>
 800f8ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f8f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8f8:	3468      	adds	r4, #104	; 0x68
 800f8fa:	e7d9      	b.n	800f8b0 <__sfp+0x1c>
 800f8fc:	2104      	movs	r1, #4
 800f8fe:	4638      	mov	r0, r7
 800f900:	f7ff ff62 	bl	800f7c8 <__sfmoreglue>
 800f904:	4604      	mov	r4, r0
 800f906:	6030      	str	r0, [r6, #0]
 800f908:	2800      	cmp	r0, #0
 800f90a:	d1d5      	bne.n	800f8b8 <__sfp+0x24>
 800f90c:	f7ff ff78 	bl	800f800 <__sfp_lock_release>
 800f910:	230c      	movs	r3, #12
 800f912:	603b      	str	r3, [r7, #0]
 800f914:	e7ee      	b.n	800f8f4 <__sfp+0x60>
 800f916:	bf00      	nop
 800f918:	08010f2c 	.word	0x08010f2c
 800f91c:	ffff0001 	.word	0xffff0001

0800f920 <_fwalk_reent>:
 800f920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f924:	4606      	mov	r6, r0
 800f926:	4688      	mov	r8, r1
 800f928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f92c:	2700      	movs	r7, #0
 800f92e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f932:	f1b9 0901 	subs.w	r9, r9, #1
 800f936:	d505      	bpl.n	800f944 <_fwalk_reent+0x24>
 800f938:	6824      	ldr	r4, [r4, #0]
 800f93a:	2c00      	cmp	r4, #0
 800f93c:	d1f7      	bne.n	800f92e <_fwalk_reent+0xe>
 800f93e:	4638      	mov	r0, r7
 800f940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f944:	89ab      	ldrh	r3, [r5, #12]
 800f946:	2b01      	cmp	r3, #1
 800f948:	d907      	bls.n	800f95a <_fwalk_reent+0x3a>
 800f94a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f94e:	3301      	adds	r3, #1
 800f950:	d003      	beq.n	800f95a <_fwalk_reent+0x3a>
 800f952:	4629      	mov	r1, r5
 800f954:	4630      	mov	r0, r6
 800f956:	47c0      	blx	r8
 800f958:	4307      	orrs	r7, r0
 800f95a:	3568      	adds	r5, #104	; 0x68
 800f95c:	e7e9      	b.n	800f932 <_fwalk_reent+0x12>

0800f95e <__retarget_lock_init_recursive>:
 800f95e:	4770      	bx	lr

0800f960 <__retarget_lock_acquire_recursive>:
 800f960:	4770      	bx	lr

0800f962 <__retarget_lock_release_recursive>:
 800f962:	4770      	bx	lr

0800f964 <sbrk_aligned>:
 800f964:	b570      	push	{r4, r5, r6, lr}
 800f966:	4e0e      	ldr	r6, [pc, #56]	; (800f9a0 <sbrk_aligned+0x3c>)
 800f968:	460c      	mov	r4, r1
 800f96a:	6831      	ldr	r1, [r6, #0]
 800f96c:	4605      	mov	r5, r0
 800f96e:	b911      	cbnz	r1, 800f976 <sbrk_aligned+0x12>
 800f970:	f000 fcd6 	bl	8010320 <_sbrk_r>
 800f974:	6030      	str	r0, [r6, #0]
 800f976:	4621      	mov	r1, r4
 800f978:	4628      	mov	r0, r5
 800f97a:	f000 fcd1 	bl	8010320 <_sbrk_r>
 800f97e:	1c43      	adds	r3, r0, #1
 800f980:	d00a      	beq.n	800f998 <sbrk_aligned+0x34>
 800f982:	1cc4      	adds	r4, r0, #3
 800f984:	f024 0403 	bic.w	r4, r4, #3
 800f988:	42a0      	cmp	r0, r4
 800f98a:	d007      	beq.n	800f99c <sbrk_aligned+0x38>
 800f98c:	1a21      	subs	r1, r4, r0
 800f98e:	4628      	mov	r0, r5
 800f990:	f000 fcc6 	bl	8010320 <_sbrk_r>
 800f994:	3001      	adds	r0, #1
 800f996:	d101      	bne.n	800f99c <sbrk_aligned+0x38>
 800f998:	f04f 34ff 	mov.w	r4, #4294967295
 800f99c:	4620      	mov	r0, r4
 800f99e:	bd70      	pop	{r4, r5, r6, pc}
 800f9a0:	2407f648 	.word	0x2407f648

0800f9a4 <_malloc_r>:
 800f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a8:	1ccd      	adds	r5, r1, #3
 800f9aa:	f025 0503 	bic.w	r5, r5, #3
 800f9ae:	3508      	adds	r5, #8
 800f9b0:	2d0c      	cmp	r5, #12
 800f9b2:	bf38      	it	cc
 800f9b4:	250c      	movcc	r5, #12
 800f9b6:	2d00      	cmp	r5, #0
 800f9b8:	4607      	mov	r7, r0
 800f9ba:	db01      	blt.n	800f9c0 <_malloc_r+0x1c>
 800f9bc:	42a9      	cmp	r1, r5
 800f9be:	d905      	bls.n	800f9cc <_malloc_r+0x28>
 800f9c0:	230c      	movs	r3, #12
 800f9c2:	603b      	str	r3, [r7, #0]
 800f9c4:	2600      	movs	r6, #0
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9cc:	4e2e      	ldr	r6, [pc, #184]	; (800fa88 <_malloc_r+0xe4>)
 800f9ce:	f000 ff1f 	bl	8010810 <__malloc_lock>
 800f9d2:	6833      	ldr	r3, [r6, #0]
 800f9d4:	461c      	mov	r4, r3
 800f9d6:	bb34      	cbnz	r4, 800fa26 <_malloc_r+0x82>
 800f9d8:	4629      	mov	r1, r5
 800f9da:	4638      	mov	r0, r7
 800f9dc:	f7ff ffc2 	bl	800f964 <sbrk_aligned>
 800f9e0:	1c43      	adds	r3, r0, #1
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	d14d      	bne.n	800fa82 <_malloc_r+0xde>
 800f9e6:	6834      	ldr	r4, [r6, #0]
 800f9e8:	4626      	mov	r6, r4
 800f9ea:	2e00      	cmp	r6, #0
 800f9ec:	d140      	bne.n	800fa70 <_malloc_r+0xcc>
 800f9ee:	6823      	ldr	r3, [r4, #0]
 800f9f0:	4631      	mov	r1, r6
 800f9f2:	4638      	mov	r0, r7
 800f9f4:	eb04 0803 	add.w	r8, r4, r3
 800f9f8:	f000 fc92 	bl	8010320 <_sbrk_r>
 800f9fc:	4580      	cmp	r8, r0
 800f9fe:	d13a      	bne.n	800fa76 <_malloc_r+0xd2>
 800fa00:	6821      	ldr	r1, [r4, #0]
 800fa02:	3503      	adds	r5, #3
 800fa04:	1a6d      	subs	r5, r5, r1
 800fa06:	f025 0503 	bic.w	r5, r5, #3
 800fa0a:	3508      	adds	r5, #8
 800fa0c:	2d0c      	cmp	r5, #12
 800fa0e:	bf38      	it	cc
 800fa10:	250c      	movcc	r5, #12
 800fa12:	4629      	mov	r1, r5
 800fa14:	4638      	mov	r0, r7
 800fa16:	f7ff ffa5 	bl	800f964 <sbrk_aligned>
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	d02b      	beq.n	800fa76 <_malloc_r+0xd2>
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	442b      	add	r3, r5
 800fa22:	6023      	str	r3, [r4, #0]
 800fa24:	e00e      	b.n	800fa44 <_malloc_r+0xa0>
 800fa26:	6822      	ldr	r2, [r4, #0]
 800fa28:	1b52      	subs	r2, r2, r5
 800fa2a:	d41e      	bmi.n	800fa6a <_malloc_r+0xc6>
 800fa2c:	2a0b      	cmp	r2, #11
 800fa2e:	d916      	bls.n	800fa5e <_malloc_r+0xba>
 800fa30:	1961      	adds	r1, r4, r5
 800fa32:	42a3      	cmp	r3, r4
 800fa34:	6025      	str	r5, [r4, #0]
 800fa36:	bf18      	it	ne
 800fa38:	6059      	strne	r1, [r3, #4]
 800fa3a:	6863      	ldr	r3, [r4, #4]
 800fa3c:	bf08      	it	eq
 800fa3e:	6031      	streq	r1, [r6, #0]
 800fa40:	5162      	str	r2, [r4, r5]
 800fa42:	604b      	str	r3, [r1, #4]
 800fa44:	4638      	mov	r0, r7
 800fa46:	f104 060b 	add.w	r6, r4, #11
 800fa4a:	f000 fee7 	bl	801081c <__malloc_unlock>
 800fa4e:	f026 0607 	bic.w	r6, r6, #7
 800fa52:	1d23      	adds	r3, r4, #4
 800fa54:	1af2      	subs	r2, r6, r3
 800fa56:	d0b6      	beq.n	800f9c6 <_malloc_r+0x22>
 800fa58:	1b9b      	subs	r3, r3, r6
 800fa5a:	50a3      	str	r3, [r4, r2]
 800fa5c:	e7b3      	b.n	800f9c6 <_malloc_r+0x22>
 800fa5e:	6862      	ldr	r2, [r4, #4]
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	bf0c      	ite	eq
 800fa64:	6032      	streq	r2, [r6, #0]
 800fa66:	605a      	strne	r2, [r3, #4]
 800fa68:	e7ec      	b.n	800fa44 <_malloc_r+0xa0>
 800fa6a:	4623      	mov	r3, r4
 800fa6c:	6864      	ldr	r4, [r4, #4]
 800fa6e:	e7b2      	b.n	800f9d6 <_malloc_r+0x32>
 800fa70:	4634      	mov	r4, r6
 800fa72:	6876      	ldr	r6, [r6, #4]
 800fa74:	e7b9      	b.n	800f9ea <_malloc_r+0x46>
 800fa76:	230c      	movs	r3, #12
 800fa78:	603b      	str	r3, [r7, #0]
 800fa7a:	4638      	mov	r0, r7
 800fa7c:	f000 fece 	bl	801081c <__malloc_unlock>
 800fa80:	e7a1      	b.n	800f9c6 <_malloc_r+0x22>
 800fa82:	6025      	str	r5, [r4, #0]
 800fa84:	e7de      	b.n	800fa44 <_malloc_r+0xa0>
 800fa86:	bf00      	nop
 800fa88:	2407f644 	.word	0x2407f644

0800fa8c <__ssputs_r>:
 800fa8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa90:	688e      	ldr	r6, [r1, #8]
 800fa92:	429e      	cmp	r6, r3
 800fa94:	4682      	mov	sl, r0
 800fa96:	460c      	mov	r4, r1
 800fa98:	4690      	mov	r8, r2
 800fa9a:	461f      	mov	r7, r3
 800fa9c:	d838      	bhi.n	800fb10 <__ssputs_r+0x84>
 800fa9e:	898a      	ldrh	r2, [r1, #12]
 800faa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800faa4:	d032      	beq.n	800fb0c <__ssputs_r+0x80>
 800faa6:	6825      	ldr	r5, [r4, #0]
 800faa8:	6909      	ldr	r1, [r1, #16]
 800faaa:	eba5 0901 	sub.w	r9, r5, r1
 800faae:	6965      	ldr	r5, [r4, #20]
 800fab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fab8:	3301      	adds	r3, #1
 800faba:	444b      	add	r3, r9
 800fabc:	106d      	asrs	r5, r5, #1
 800fabe:	429d      	cmp	r5, r3
 800fac0:	bf38      	it	cc
 800fac2:	461d      	movcc	r5, r3
 800fac4:	0553      	lsls	r3, r2, #21
 800fac6:	d531      	bpl.n	800fb2c <__ssputs_r+0xa0>
 800fac8:	4629      	mov	r1, r5
 800faca:	f7ff ff6b 	bl	800f9a4 <_malloc_r>
 800face:	4606      	mov	r6, r0
 800fad0:	b950      	cbnz	r0, 800fae8 <__ssputs_r+0x5c>
 800fad2:	230c      	movs	r3, #12
 800fad4:	f8ca 3000 	str.w	r3, [sl]
 800fad8:	89a3      	ldrh	r3, [r4, #12]
 800fada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fade:	81a3      	strh	r3, [r4, #12]
 800fae0:	f04f 30ff 	mov.w	r0, #4294967295
 800fae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fae8:	6921      	ldr	r1, [r4, #16]
 800faea:	464a      	mov	r2, r9
 800faec:	f7ff fdf4 	bl	800f6d8 <memcpy>
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800faf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fafa:	81a3      	strh	r3, [r4, #12]
 800fafc:	6126      	str	r6, [r4, #16]
 800fafe:	6165      	str	r5, [r4, #20]
 800fb00:	444e      	add	r6, r9
 800fb02:	eba5 0509 	sub.w	r5, r5, r9
 800fb06:	6026      	str	r6, [r4, #0]
 800fb08:	60a5      	str	r5, [r4, #8]
 800fb0a:	463e      	mov	r6, r7
 800fb0c:	42be      	cmp	r6, r7
 800fb0e:	d900      	bls.n	800fb12 <__ssputs_r+0x86>
 800fb10:	463e      	mov	r6, r7
 800fb12:	6820      	ldr	r0, [r4, #0]
 800fb14:	4632      	mov	r2, r6
 800fb16:	4641      	mov	r1, r8
 800fb18:	f000 fe60 	bl	80107dc <memmove>
 800fb1c:	68a3      	ldr	r3, [r4, #8]
 800fb1e:	1b9b      	subs	r3, r3, r6
 800fb20:	60a3      	str	r3, [r4, #8]
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	4433      	add	r3, r6
 800fb26:	6023      	str	r3, [r4, #0]
 800fb28:	2000      	movs	r0, #0
 800fb2a:	e7db      	b.n	800fae4 <__ssputs_r+0x58>
 800fb2c:	462a      	mov	r2, r5
 800fb2e:	f000 fec7 	bl	80108c0 <_realloc_r>
 800fb32:	4606      	mov	r6, r0
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d1e1      	bne.n	800fafc <__ssputs_r+0x70>
 800fb38:	6921      	ldr	r1, [r4, #16]
 800fb3a:	4650      	mov	r0, sl
 800fb3c:	f000 fe74 	bl	8010828 <_free_r>
 800fb40:	e7c7      	b.n	800fad2 <__ssputs_r+0x46>
	...

0800fb44 <_svfiprintf_r>:
 800fb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb48:	4698      	mov	r8, r3
 800fb4a:	898b      	ldrh	r3, [r1, #12]
 800fb4c:	061b      	lsls	r3, r3, #24
 800fb4e:	b09d      	sub	sp, #116	; 0x74
 800fb50:	4607      	mov	r7, r0
 800fb52:	460d      	mov	r5, r1
 800fb54:	4614      	mov	r4, r2
 800fb56:	d50e      	bpl.n	800fb76 <_svfiprintf_r+0x32>
 800fb58:	690b      	ldr	r3, [r1, #16]
 800fb5a:	b963      	cbnz	r3, 800fb76 <_svfiprintf_r+0x32>
 800fb5c:	2140      	movs	r1, #64	; 0x40
 800fb5e:	f7ff ff21 	bl	800f9a4 <_malloc_r>
 800fb62:	6028      	str	r0, [r5, #0]
 800fb64:	6128      	str	r0, [r5, #16]
 800fb66:	b920      	cbnz	r0, 800fb72 <_svfiprintf_r+0x2e>
 800fb68:	230c      	movs	r3, #12
 800fb6a:	603b      	str	r3, [r7, #0]
 800fb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb70:	e0d1      	b.n	800fd16 <_svfiprintf_r+0x1d2>
 800fb72:	2340      	movs	r3, #64	; 0x40
 800fb74:	616b      	str	r3, [r5, #20]
 800fb76:	2300      	movs	r3, #0
 800fb78:	9309      	str	r3, [sp, #36]	; 0x24
 800fb7a:	2320      	movs	r3, #32
 800fb7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb80:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb84:	2330      	movs	r3, #48	; 0x30
 800fb86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fd30 <_svfiprintf_r+0x1ec>
 800fb8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb8e:	f04f 0901 	mov.w	r9, #1
 800fb92:	4623      	mov	r3, r4
 800fb94:	469a      	mov	sl, r3
 800fb96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb9a:	b10a      	cbz	r2, 800fba0 <_svfiprintf_r+0x5c>
 800fb9c:	2a25      	cmp	r2, #37	; 0x25
 800fb9e:	d1f9      	bne.n	800fb94 <_svfiprintf_r+0x50>
 800fba0:	ebba 0b04 	subs.w	fp, sl, r4
 800fba4:	d00b      	beq.n	800fbbe <_svfiprintf_r+0x7a>
 800fba6:	465b      	mov	r3, fp
 800fba8:	4622      	mov	r2, r4
 800fbaa:	4629      	mov	r1, r5
 800fbac:	4638      	mov	r0, r7
 800fbae:	f7ff ff6d 	bl	800fa8c <__ssputs_r>
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	f000 80aa 	beq.w	800fd0c <_svfiprintf_r+0x1c8>
 800fbb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbba:	445a      	add	r2, fp
 800fbbc:	9209      	str	r2, [sp, #36]	; 0x24
 800fbbe:	f89a 3000 	ldrb.w	r3, [sl]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f000 80a2 	beq.w	800fd0c <_svfiprintf_r+0x1c8>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	f04f 32ff 	mov.w	r2, #4294967295
 800fbce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbd2:	f10a 0a01 	add.w	sl, sl, #1
 800fbd6:	9304      	str	r3, [sp, #16]
 800fbd8:	9307      	str	r3, [sp, #28]
 800fbda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbde:	931a      	str	r3, [sp, #104]	; 0x68
 800fbe0:	4654      	mov	r4, sl
 800fbe2:	2205      	movs	r2, #5
 800fbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbe8:	4851      	ldr	r0, [pc, #324]	; (800fd30 <_svfiprintf_r+0x1ec>)
 800fbea:	f7f0 fbd9 	bl	80003a0 <memchr>
 800fbee:	9a04      	ldr	r2, [sp, #16]
 800fbf0:	b9d8      	cbnz	r0, 800fc2a <_svfiprintf_r+0xe6>
 800fbf2:	06d0      	lsls	r0, r2, #27
 800fbf4:	bf44      	itt	mi
 800fbf6:	2320      	movmi	r3, #32
 800fbf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbfc:	0711      	lsls	r1, r2, #28
 800fbfe:	bf44      	itt	mi
 800fc00:	232b      	movmi	r3, #43	; 0x2b
 800fc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc06:	f89a 3000 	ldrb.w	r3, [sl]
 800fc0a:	2b2a      	cmp	r3, #42	; 0x2a
 800fc0c:	d015      	beq.n	800fc3a <_svfiprintf_r+0xf6>
 800fc0e:	9a07      	ldr	r2, [sp, #28]
 800fc10:	4654      	mov	r4, sl
 800fc12:	2000      	movs	r0, #0
 800fc14:	f04f 0c0a 	mov.w	ip, #10
 800fc18:	4621      	mov	r1, r4
 800fc1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc1e:	3b30      	subs	r3, #48	; 0x30
 800fc20:	2b09      	cmp	r3, #9
 800fc22:	d94e      	bls.n	800fcc2 <_svfiprintf_r+0x17e>
 800fc24:	b1b0      	cbz	r0, 800fc54 <_svfiprintf_r+0x110>
 800fc26:	9207      	str	r2, [sp, #28]
 800fc28:	e014      	b.n	800fc54 <_svfiprintf_r+0x110>
 800fc2a:	eba0 0308 	sub.w	r3, r0, r8
 800fc2e:	fa09 f303 	lsl.w	r3, r9, r3
 800fc32:	4313      	orrs	r3, r2
 800fc34:	9304      	str	r3, [sp, #16]
 800fc36:	46a2      	mov	sl, r4
 800fc38:	e7d2      	b.n	800fbe0 <_svfiprintf_r+0x9c>
 800fc3a:	9b03      	ldr	r3, [sp, #12]
 800fc3c:	1d19      	adds	r1, r3, #4
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	9103      	str	r1, [sp, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	bfbb      	ittet	lt
 800fc46:	425b      	neglt	r3, r3
 800fc48:	f042 0202 	orrlt.w	r2, r2, #2
 800fc4c:	9307      	strge	r3, [sp, #28]
 800fc4e:	9307      	strlt	r3, [sp, #28]
 800fc50:	bfb8      	it	lt
 800fc52:	9204      	strlt	r2, [sp, #16]
 800fc54:	7823      	ldrb	r3, [r4, #0]
 800fc56:	2b2e      	cmp	r3, #46	; 0x2e
 800fc58:	d10c      	bne.n	800fc74 <_svfiprintf_r+0x130>
 800fc5a:	7863      	ldrb	r3, [r4, #1]
 800fc5c:	2b2a      	cmp	r3, #42	; 0x2a
 800fc5e:	d135      	bne.n	800fccc <_svfiprintf_r+0x188>
 800fc60:	9b03      	ldr	r3, [sp, #12]
 800fc62:	1d1a      	adds	r2, r3, #4
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	9203      	str	r2, [sp, #12]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	bfb8      	it	lt
 800fc6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc70:	3402      	adds	r4, #2
 800fc72:	9305      	str	r3, [sp, #20]
 800fc74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd40 <_svfiprintf_r+0x1fc>
 800fc78:	7821      	ldrb	r1, [r4, #0]
 800fc7a:	2203      	movs	r2, #3
 800fc7c:	4650      	mov	r0, sl
 800fc7e:	f7f0 fb8f 	bl	80003a0 <memchr>
 800fc82:	b140      	cbz	r0, 800fc96 <_svfiprintf_r+0x152>
 800fc84:	2340      	movs	r3, #64	; 0x40
 800fc86:	eba0 000a 	sub.w	r0, r0, sl
 800fc8a:	fa03 f000 	lsl.w	r0, r3, r0
 800fc8e:	9b04      	ldr	r3, [sp, #16]
 800fc90:	4303      	orrs	r3, r0
 800fc92:	3401      	adds	r4, #1
 800fc94:	9304      	str	r3, [sp, #16]
 800fc96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc9a:	4826      	ldr	r0, [pc, #152]	; (800fd34 <_svfiprintf_r+0x1f0>)
 800fc9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fca0:	2206      	movs	r2, #6
 800fca2:	f7f0 fb7d 	bl	80003a0 <memchr>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d038      	beq.n	800fd1c <_svfiprintf_r+0x1d8>
 800fcaa:	4b23      	ldr	r3, [pc, #140]	; (800fd38 <_svfiprintf_r+0x1f4>)
 800fcac:	bb1b      	cbnz	r3, 800fcf6 <_svfiprintf_r+0x1b2>
 800fcae:	9b03      	ldr	r3, [sp, #12]
 800fcb0:	3307      	adds	r3, #7
 800fcb2:	f023 0307 	bic.w	r3, r3, #7
 800fcb6:	3308      	adds	r3, #8
 800fcb8:	9303      	str	r3, [sp, #12]
 800fcba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcbc:	4433      	add	r3, r6
 800fcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800fcc0:	e767      	b.n	800fb92 <_svfiprintf_r+0x4e>
 800fcc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcc6:	460c      	mov	r4, r1
 800fcc8:	2001      	movs	r0, #1
 800fcca:	e7a5      	b.n	800fc18 <_svfiprintf_r+0xd4>
 800fccc:	2300      	movs	r3, #0
 800fcce:	3401      	adds	r4, #1
 800fcd0:	9305      	str	r3, [sp, #20]
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	f04f 0c0a 	mov.w	ip, #10
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcde:	3a30      	subs	r2, #48	; 0x30
 800fce0:	2a09      	cmp	r2, #9
 800fce2:	d903      	bls.n	800fcec <_svfiprintf_r+0x1a8>
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d0c5      	beq.n	800fc74 <_svfiprintf_r+0x130>
 800fce8:	9105      	str	r1, [sp, #20]
 800fcea:	e7c3      	b.n	800fc74 <_svfiprintf_r+0x130>
 800fcec:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	e7f0      	b.n	800fcd8 <_svfiprintf_r+0x194>
 800fcf6:	ab03      	add	r3, sp, #12
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	462a      	mov	r2, r5
 800fcfc:	4b0f      	ldr	r3, [pc, #60]	; (800fd3c <_svfiprintf_r+0x1f8>)
 800fcfe:	a904      	add	r1, sp, #16
 800fd00:	4638      	mov	r0, r7
 800fd02:	f3af 8000 	nop.w
 800fd06:	1c42      	adds	r2, r0, #1
 800fd08:	4606      	mov	r6, r0
 800fd0a:	d1d6      	bne.n	800fcba <_svfiprintf_r+0x176>
 800fd0c:	89ab      	ldrh	r3, [r5, #12]
 800fd0e:	065b      	lsls	r3, r3, #25
 800fd10:	f53f af2c 	bmi.w	800fb6c <_svfiprintf_r+0x28>
 800fd14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd16:	b01d      	add	sp, #116	; 0x74
 800fd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1c:	ab03      	add	r3, sp, #12
 800fd1e:	9300      	str	r3, [sp, #0]
 800fd20:	462a      	mov	r2, r5
 800fd22:	4b06      	ldr	r3, [pc, #24]	; (800fd3c <_svfiprintf_r+0x1f8>)
 800fd24:	a904      	add	r1, sp, #16
 800fd26:	4638      	mov	r0, r7
 800fd28:	f000 f9d4 	bl	80100d4 <_printf_i>
 800fd2c:	e7eb      	b.n	800fd06 <_svfiprintf_r+0x1c2>
 800fd2e:	bf00      	nop
 800fd30:	08010f90 	.word	0x08010f90
 800fd34:	08010f9a 	.word	0x08010f9a
 800fd38:	00000000 	.word	0x00000000
 800fd3c:	0800fa8d 	.word	0x0800fa8d
 800fd40:	08010f96 	.word	0x08010f96

0800fd44 <__sfputc_r>:
 800fd44:	6893      	ldr	r3, [r2, #8]
 800fd46:	3b01      	subs	r3, #1
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	b410      	push	{r4}
 800fd4c:	6093      	str	r3, [r2, #8]
 800fd4e:	da08      	bge.n	800fd62 <__sfputc_r+0x1e>
 800fd50:	6994      	ldr	r4, [r2, #24]
 800fd52:	42a3      	cmp	r3, r4
 800fd54:	db01      	blt.n	800fd5a <__sfputc_r+0x16>
 800fd56:	290a      	cmp	r1, #10
 800fd58:	d103      	bne.n	800fd62 <__sfputc_r+0x1e>
 800fd5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd5e:	f000 bb33 	b.w	80103c8 <__swbuf_r>
 800fd62:	6813      	ldr	r3, [r2, #0]
 800fd64:	1c58      	adds	r0, r3, #1
 800fd66:	6010      	str	r0, [r2, #0]
 800fd68:	7019      	strb	r1, [r3, #0]
 800fd6a:	4608      	mov	r0, r1
 800fd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <__sfputs_r>:
 800fd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd74:	4606      	mov	r6, r0
 800fd76:	460f      	mov	r7, r1
 800fd78:	4614      	mov	r4, r2
 800fd7a:	18d5      	adds	r5, r2, r3
 800fd7c:	42ac      	cmp	r4, r5
 800fd7e:	d101      	bne.n	800fd84 <__sfputs_r+0x12>
 800fd80:	2000      	movs	r0, #0
 800fd82:	e007      	b.n	800fd94 <__sfputs_r+0x22>
 800fd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd88:	463a      	mov	r2, r7
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	f7ff ffda 	bl	800fd44 <__sfputc_r>
 800fd90:	1c43      	adds	r3, r0, #1
 800fd92:	d1f3      	bne.n	800fd7c <__sfputs_r+0xa>
 800fd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd98 <_vfiprintf_r>:
 800fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	460d      	mov	r5, r1
 800fd9e:	b09d      	sub	sp, #116	; 0x74
 800fda0:	4614      	mov	r4, r2
 800fda2:	4698      	mov	r8, r3
 800fda4:	4606      	mov	r6, r0
 800fda6:	b118      	cbz	r0, 800fdb0 <_vfiprintf_r+0x18>
 800fda8:	6983      	ldr	r3, [r0, #24]
 800fdaa:	b90b      	cbnz	r3, 800fdb0 <_vfiprintf_r+0x18>
 800fdac:	f7ff fd3a 	bl	800f824 <__sinit>
 800fdb0:	4b89      	ldr	r3, [pc, #548]	; (800ffd8 <_vfiprintf_r+0x240>)
 800fdb2:	429d      	cmp	r5, r3
 800fdb4:	d11b      	bne.n	800fdee <_vfiprintf_r+0x56>
 800fdb6:	6875      	ldr	r5, [r6, #4]
 800fdb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdba:	07d9      	lsls	r1, r3, #31
 800fdbc:	d405      	bmi.n	800fdca <_vfiprintf_r+0x32>
 800fdbe:	89ab      	ldrh	r3, [r5, #12]
 800fdc0:	059a      	lsls	r2, r3, #22
 800fdc2:	d402      	bmi.n	800fdca <_vfiprintf_r+0x32>
 800fdc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdc6:	f7ff fdcb 	bl	800f960 <__retarget_lock_acquire_recursive>
 800fdca:	89ab      	ldrh	r3, [r5, #12]
 800fdcc:	071b      	lsls	r3, r3, #28
 800fdce:	d501      	bpl.n	800fdd4 <_vfiprintf_r+0x3c>
 800fdd0:	692b      	ldr	r3, [r5, #16]
 800fdd2:	b9eb      	cbnz	r3, 800fe10 <_vfiprintf_r+0x78>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f000 fb48 	bl	801046c <__swsetup_r>
 800fddc:	b1c0      	cbz	r0, 800fe10 <_vfiprintf_r+0x78>
 800fdde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fde0:	07dc      	lsls	r4, r3, #31
 800fde2:	d50e      	bpl.n	800fe02 <_vfiprintf_r+0x6a>
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295
 800fde8:	b01d      	add	sp, #116	; 0x74
 800fdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdee:	4b7b      	ldr	r3, [pc, #492]	; (800ffdc <_vfiprintf_r+0x244>)
 800fdf0:	429d      	cmp	r5, r3
 800fdf2:	d101      	bne.n	800fdf8 <_vfiprintf_r+0x60>
 800fdf4:	68b5      	ldr	r5, [r6, #8]
 800fdf6:	e7df      	b.n	800fdb8 <_vfiprintf_r+0x20>
 800fdf8:	4b79      	ldr	r3, [pc, #484]	; (800ffe0 <_vfiprintf_r+0x248>)
 800fdfa:	429d      	cmp	r5, r3
 800fdfc:	bf08      	it	eq
 800fdfe:	68f5      	ldreq	r5, [r6, #12]
 800fe00:	e7da      	b.n	800fdb8 <_vfiprintf_r+0x20>
 800fe02:	89ab      	ldrh	r3, [r5, #12]
 800fe04:	0598      	lsls	r0, r3, #22
 800fe06:	d4ed      	bmi.n	800fde4 <_vfiprintf_r+0x4c>
 800fe08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe0a:	f7ff fdaa 	bl	800f962 <__retarget_lock_release_recursive>
 800fe0e:	e7e9      	b.n	800fde4 <_vfiprintf_r+0x4c>
 800fe10:	2300      	movs	r3, #0
 800fe12:	9309      	str	r3, [sp, #36]	; 0x24
 800fe14:	2320      	movs	r3, #32
 800fe16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe1e:	2330      	movs	r3, #48	; 0x30
 800fe20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ffe4 <_vfiprintf_r+0x24c>
 800fe24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe28:	f04f 0901 	mov.w	r9, #1
 800fe2c:	4623      	mov	r3, r4
 800fe2e:	469a      	mov	sl, r3
 800fe30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe34:	b10a      	cbz	r2, 800fe3a <_vfiprintf_r+0xa2>
 800fe36:	2a25      	cmp	r2, #37	; 0x25
 800fe38:	d1f9      	bne.n	800fe2e <_vfiprintf_r+0x96>
 800fe3a:	ebba 0b04 	subs.w	fp, sl, r4
 800fe3e:	d00b      	beq.n	800fe58 <_vfiprintf_r+0xc0>
 800fe40:	465b      	mov	r3, fp
 800fe42:	4622      	mov	r2, r4
 800fe44:	4629      	mov	r1, r5
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7ff ff93 	bl	800fd72 <__sfputs_r>
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	f000 80aa 	beq.w	800ffa6 <_vfiprintf_r+0x20e>
 800fe52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe54:	445a      	add	r2, fp
 800fe56:	9209      	str	r2, [sp, #36]	; 0x24
 800fe58:	f89a 3000 	ldrb.w	r3, [sl]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f000 80a2 	beq.w	800ffa6 <_vfiprintf_r+0x20e>
 800fe62:	2300      	movs	r3, #0
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295
 800fe68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe6c:	f10a 0a01 	add.w	sl, sl, #1
 800fe70:	9304      	str	r3, [sp, #16]
 800fe72:	9307      	str	r3, [sp, #28]
 800fe74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe78:	931a      	str	r3, [sp, #104]	; 0x68
 800fe7a:	4654      	mov	r4, sl
 800fe7c:	2205      	movs	r2, #5
 800fe7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe82:	4858      	ldr	r0, [pc, #352]	; (800ffe4 <_vfiprintf_r+0x24c>)
 800fe84:	f7f0 fa8c 	bl	80003a0 <memchr>
 800fe88:	9a04      	ldr	r2, [sp, #16]
 800fe8a:	b9d8      	cbnz	r0, 800fec4 <_vfiprintf_r+0x12c>
 800fe8c:	06d1      	lsls	r1, r2, #27
 800fe8e:	bf44      	itt	mi
 800fe90:	2320      	movmi	r3, #32
 800fe92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe96:	0713      	lsls	r3, r2, #28
 800fe98:	bf44      	itt	mi
 800fe9a:	232b      	movmi	r3, #43	; 0x2b
 800fe9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fea0:	f89a 3000 	ldrb.w	r3, [sl]
 800fea4:	2b2a      	cmp	r3, #42	; 0x2a
 800fea6:	d015      	beq.n	800fed4 <_vfiprintf_r+0x13c>
 800fea8:	9a07      	ldr	r2, [sp, #28]
 800feaa:	4654      	mov	r4, sl
 800feac:	2000      	movs	r0, #0
 800feae:	f04f 0c0a 	mov.w	ip, #10
 800feb2:	4621      	mov	r1, r4
 800feb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feb8:	3b30      	subs	r3, #48	; 0x30
 800feba:	2b09      	cmp	r3, #9
 800febc:	d94e      	bls.n	800ff5c <_vfiprintf_r+0x1c4>
 800febe:	b1b0      	cbz	r0, 800feee <_vfiprintf_r+0x156>
 800fec0:	9207      	str	r2, [sp, #28]
 800fec2:	e014      	b.n	800feee <_vfiprintf_r+0x156>
 800fec4:	eba0 0308 	sub.w	r3, r0, r8
 800fec8:	fa09 f303 	lsl.w	r3, r9, r3
 800fecc:	4313      	orrs	r3, r2
 800fece:	9304      	str	r3, [sp, #16]
 800fed0:	46a2      	mov	sl, r4
 800fed2:	e7d2      	b.n	800fe7a <_vfiprintf_r+0xe2>
 800fed4:	9b03      	ldr	r3, [sp, #12]
 800fed6:	1d19      	adds	r1, r3, #4
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	9103      	str	r1, [sp, #12]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	bfbb      	ittet	lt
 800fee0:	425b      	neglt	r3, r3
 800fee2:	f042 0202 	orrlt.w	r2, r2, #2
 800fee6:	9307      	strge	r3, [sp, #28]
 800fee8:	9307      	strlt	r3, [sp, #28]
 800feea:	bfb8      	it	lt
 800feec:	9204      	strlt	r2, [sp, #16]
 800feee:	7823      	ldrb	r3, [r4, #0]
 800fef0:	2b2e      	cmp	r3, #46	; 0x2e
 800fef2:	d10c      	bne.n	800ff0e <_vfiprintf_r+0x176>
 800fef4:	7863      	ldrb	r3, [r4, #1]
 800fef6:	2b2a      	cmp	r3, #42	; 0x2a
 800fef8:	d135      	bne.n	800ff66 <_vfiprintf_r+0x1ce>
 800fefa:	9b03      	ldr	r3, [sp, #12]
 800fefc:	1d1a      	adds	r2, r3, #4
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	9203      	str	r2, [sp, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bfb8      	it	lt
 800ff06:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff0a:	3402      	adds	r4, #2
 800ff0c:	9305      	str	r3, [sp, #20]
 800ff0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fff4 <_vfiprintf_r+0x25c>
 800ff12:	7821      	ldrb	r1, [r4, #0]
 800ff14:	2203      	movs	r2, #3
 800ff16:	4650      	mov	r0, sl
 800ff18:	f7f0 fa42 	bl	80003a0 <memchr>
 800ff1c:	b140      	cbz	r0, 800ff30 <_vfiprintf_r+0x198>
 800ff1e:	2340      	movs	r3, #64	; 0x40
 800ff20:	eba0 000a 	sub.w	r0, r0, sl
 800ff24:	fa03 f000 	lsl.w	r0, r3, r0
 800ff28:	9b04      	ldr	r3, [sp, #16]
 800ff2a:	4303      	orrs	r3, r0
 800ff2c:	3401      	adds	r4, #1
 800ff2e:	9304      	str	r3, [sp, #16]
 800ff30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff34:	482c      	ldr	r0, [pc, #176]	; (800ffe8 <_vfiprintf_r+0x250>)
 800ff36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff3a:	2206      	movs	r2, #6
 800ff3c:	f7f0 fa30 	bl	80003a0 <memchr>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d03f      	beq.n	800ffc4 <_vfiprintf_r+0x22c>
 800ff44:	4b29      	ldr	r3, [pc, #164]	; (800ffec <_vfiprintf_r+0x254>)
 800ff46:	bb1b      	cbnz	r3, 800ff90 <_vfiprintf_r+0x1f8>
 800ff48:	9b03      	ldr	r3, [sp, #12]
 800ff4a:	3307      	adds	r3, #7
 800ff4c:	f023 0307 	bic.w	r3, r3, #7
 800ff50:	3308      	adds	r3, #8
 800ff52:	9303      	str	r3, [sp, #12]
 800ff54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff56:	443b      	add	r3, r7
 800ff58:	9309      	str	r3, [sp, #36]	; 0x24
 800ff5a:	e767      	b.n	800fe2c <_vfiprintf_r+0x94>
 800ff5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff60:	460c      	mov	r4, r1
 800ff62:	2001      	movs	r0, #1
 800ff64:	e7a5      	b.n	800feb2 <_vfiprintf_r+0x11a>
 800ff66:	2300      	movs	r3, #0
 800ff68:	3401      	adds	r4, #1
 800ff6a:	9305      	str	r3, [sp, #20]
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	f04f 0c0a 	mov.w	ip, #10
 800ff72:	4620      	mov	r0, r4
 800ff74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff78:	3a30      	subs	r2, #48	; 0x30
 800ff7a:	2a09      	cmp	r2, #9
 800ff7c:	d903      	bls.n	800ff86 <_vfiprintf_r+0x1ee>
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d0c5      	beq.n	800ff0e <_vfiprintf_r+0x176>
 800ff82:	9105      	str	r1, [sp, #20]
 800ff84:	e7c3      	b.n	800ff0e <_vfiprintf_r+0x176>
 800ff86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e7f0      	b.n	800ff72 <_vfiprintf_r+0x1da>
 800ff90:	ab03      	add	r3, sp, #12
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	462a      	mov	r2, r5
 800ff96:	4b16      	ldr	r3, [pc, #88]	; (800fff0 <_vfiprintf_r+0x258>)
 800ff98:	a904      	add	r1, sp, #16
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	f3af 8000 	nop.w
 800ffa0:	4607      	mov	r7, r0
 800ffa2:	1c78      	adds	r0, r7, #1
 800ffa4:	d1d6      	bne.n	800ff54 <_vfiprintf_r+0x1bc>
 800ffa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffa8:	07d9      	lsls	r1, r3, #31
 800ffaa:	d405      	bmi.n	800ffb8 <_vfiprintf_r+0x220>
 800ffac:	89ab      	ldrh	r3, [r5, #12]
 800ffae:	059a      	lsls	r2, r3, #22
 800ffb0:	d402      	bmi.n	800ffb8 <_vfiprintf_r+0x220>
 800ffb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffb4:	f7ff fcd5 	bl	800f962 <__retarget_lock_release_recursive>
 800ffb8:	89ab      	ldrh	r3, [r5, #12]
 800ffba:	065b      	lsls	r3, r3, #25
 800ffbc:	f53f af12 	bmi.w	800fde4 <_vfiprintf_r+0x4c>
 800ffc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffc2:	e711      	b.n	800fde8 <_vfiprintf_r+0x50>
 800ffc4:	ab03      	add	r3, sp, #12
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	462a      	mov	r2, r5
 800ffca:	4b09      	ldr	r3, [pc, #36]	; (800fff0 <_vfiprintf_r+0x258>)
 800ffcc:	a904      	add	r1, sp, #16
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f000 f880 	bl	80100d4 <_printf_i>
 800ffd4:	e7e4      	b.n	800ffa0 <_vfiprintf_r+0x208>
 800ffd6:	bf00      	nop
 800ffd8:	08010f50 	.word	0x08010f50
 800ffdc:	08010f70 	.word	0x08010f70
 800ffe0:	08010f30 	.word	0x08010f30
 800ffe4:	08010f90 	.word	0x08010f90
 800ffe8:	08010f9a 	.word	0x08010f9a
 800ffec:	00000000 	.word	0x00000000
 800fff0:	0800fd73 	.word	0x0800fd73
 800fff4:	08010f96 	.word	0x08010f96

0800fff8 <_printf_common>:
 800fff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fffc:	4616      	mov	r6, r2
 800fffe:	4699      	mov	r9, r3
 8010000:	688a      	ldr	r2, [r1, #8]
 8010002:	690b      	ldr	r3, [r1, #16]
 8010004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010008:	4293      	cmp	r3, r2
 801000a:	bfb8      	it	lt
 801000c:	4613      	movlt	r3, r2
 801000e:	6033      	str	r3, [r6, #0]
 8010010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010014:	4607      	mov	r7, r0
 8010016:	460c      	mov	r4, r1
 8010018:	b10a      	cbz	r2, 801001e <_printf_common+0x26>
 801001a:	3301      	adds	r3, #1
 801001c:	6033      	str	r3, [r6, #0]
 801001e:	6823      	ldr	r3, [r4, #0]
 8010020:	0699      	lsls	r1, r3, #26
 8010022:	bf42      	ittt	mi
 8010024:	6833      	ldrmi	r3, [r6, #0]
 8010026:	3302      	addmi	r3, #2
 8010028:	6033      	strmi	r3, [r6, #0]
 801002a:	6825      	ldr	r5, [r4, #0]
 801002c:	f015 0506 	ands.w	r5, r5, #6
 8010030:	d106      	bne.n	8010040 <_printf_common+0x48>
 8010032:	f104 0a19 	add.w	sl, r4, #25
 8010036:	68e3      	ldr	r3, [r4, #12]
 8010038:	6832      	ldr	r2, [r6, #0]
 801003a:	1a9b      	subs	r3, r3, r2
 801003c:	42ab      	cmp	r3, r5
 801003e:	dc26      	bgt.n	801008e <_printf_common+0x96>
 8010040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010044:	1e13      	subs	r3, r2, #0
 8010046:	6822      	ldr	r2, [r4, #0]
 8010048:	bf18      	it	ne
 801004a:	2301      	movne	r3, #1
 801004c:	0692      	lsls	r2, r2, #26
 801004e:	d42b      	bmi.n	80100a8 <_printf_common+0xb0>
 8010050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010054:	4649      	mov	r1, r9
 8010056:	4638      	mov	r0, r7
 8010058:	47c0      	blx	r8
 801005a:	3001      	adds	r0, #1
 801005c:	d01e      	beq.n	801009c <_printf_common+0xa4>
 801005e:	6823      	ldr	r3, [r4, #0]
 8010060:	68e5      	ldr	r5, [r4, #12]
 8010062:	6832      	ldr	r2, [r6, #0]
 8010064:	f003 0306 	and.w	r3, r3, #6
 8010068:	2b04      	cmp	r3, #4
 801006a:	bf08      	it	eq
 801006c:	1aad      	subeq	r5, r5, r2
 801006e:	68a3      	ldr	r3, [r4, #8]
 8010070:	6922      	ldr	r2, [r4, #16]
 8010072:	bf0c      	ite	eq
 8010074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010078:	2500      	movne	r5, #0
 801007a:	4293      	cmp	r3, r2
 801007c:	bfc4      	itt	gt
 801007e:	1a9b      	subgt	r3, r3, r2
 8010080:	18ed      	addgt	r5, r5, r3
 8010082:	2600      	movs	r6, #0
 8010084:	341a      	adds	r4, #26
 8010086:	42b5      	cmp	r5, r6
 8010088:	d11a      	bne.n	80100c0 <_printf_common+0xc8>
 801008a:	2000      	movs	r0, #0
 801008c:	e008      	b.n	80100a0 <_printf_common+0xa8>
 801008e:	2301      	movs	r3, #1
 8010090:	4652      	mov	r2, sl
 8010092:	4649      	mov	r1, r9
 8010094:	4638      	mov	r0, r7
 8010096:	47c0      	blx	r8
 8010098:	3001      	adds	r0, #1
 801009a:	d103      	bne.n	80100a4 <_printf_common+0xac>
 801009c:	f04f 30ff 	mov.w	r0, #4294967295
 80100a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a4:	3501      	adds	r5, #1
 80100a6:	e7c6      	b.n	8010036 <_printf_common+0x3e>
 80100a8:	18e1      	adds	r1, r4, r3
 80100aa:	1c5a      	adds	r2, r3, #1
 80100ac:	2030      	movs	r0, #48	; 0x30
 80100ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80100b2:	4422      	add	r2, r4
 80100b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80100b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80100bc:	3302      	adds	r3, #2
 80100be:	e7c7      	b.n	8010050 <_printf_common+0x58>
 80100c0:	2301      	movs	r3, #1
 80100c2:	4622      	mov	r2, r4
 80100c4:	4649      	mov	r1, r9
 80100c6:	4638      	mov	r0, r7
 80100c8:	47c0      	blx	r8
 80100ca:	3001      	adds	r0, #1
 80100cc:	d0e6      	beq.n	801009c <_printf_common+0xa4>
 80100ce:	3601      	adds	r6, #1
 80100d0:	e7d9      	b.n	8010086 <_printf_common+0x8e>
	...

080100d4 <_printf_i>:
 80100d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100d8:	7e0f      	ldrb	r7, [r1, #24]
 80100da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80100dc:	2f78      	cmp	r7, #120	; 0x78
 80100de:	4691      	mov	r9, r2
 80100e0:	4680      	mov	r8, r0
 80100e2:	460c      	mov	r4, r1
 80100e4:	469a      	mov	sl, r3
 80100e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80100ea:	d807      	bhi.n	80100fc <_printf_i+0x28>
 80100ec:	2f62      	cmp	r7, #98	; 0x62
 80100ee:	d80a      	bhi.n	8010106 <_printf_i+0x32>
 80100f0:	2f00      	cmp	r7, #0
 80100f2:	f000 80d8 	beq.w	80102a6 <_printf_i+0x1d2>
 80100f6:	2f58      	cmp	r7, #88	; 0x58
 80100f8:	f000 80a3 	beq.w	8010242 <_printf_i+0x16e>
 80100fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010104:	e03a      	b.n	801017c <_printf_i+0xa8>
 8010106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801010a:	2b15      	cmp	r3, #21
 801010c:	d8f6      	bhi.n	80100fc <_printf_i+0x28>
 801010e:	a101      	add	r1, pc, #4	; (adr r1, 8010114 <_printf_i+0x40>)
 8010110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010114:	0801016d 	.word	0x0801016d
 8010118:	08010181 	.word	0x08010181
 801011c:	080100fd 	.word	0x080100fd
 8010120:	080100fd 	.word	0x080100fd
 8010124:	080100fd 	.word	0x080100fd
 8010128:	080100fd 	.word	0x080100fd
 801012c:	08010181 	.word	0x08010181
 8010130:	080100fd 	.word	0x080100fd
 8010134:	080100fd 	.word	0x080100fd
 8010138:	080100fd 	.word	0x080100fd
 801013c:	080100fd 	.word	0x080100fd
 8010140:	0801028d 	.word	0x0801028d
 8010144:	080101b1 	.word	0x080101b1
 8010148:	0801026f 	.word	0x0801026f
 801014c:	080100fd 	.word	0x080100fd
 8010150:	080100fd 	.word	0x080100fd
 8010154:	080102af 	.word	0x080102af
 8010158:	080100fd 	.word	0x080100fd
 801015c:	080101b1 	.word	0x080101b1
 8010160:	080100fd 	.word	0x080100fd
 8010164:	080100fd 	.word	0x080100fd
 8010168:	08010277 	.word	0x08010277
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	1d1a      	adds	r2, r3, #4
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	602a      	str	r2, [r5, #0]
 8010174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801017c:	2301      	movs	r3, #1
 801017e:	e0a3      	b.n	80102c8 <_printf_i+0x1f4>
 8010180:	6820      	ldr	r0, [r4, #0]
 8010182:	6829      	ldr	r1, [r5, #0]
 8010184:	0606      	lsls	r6, r0, #24
 8010186:	f101 0304 	add.w	r3, r1, #4
 801018a:	d50a      	bpl.n	80101a2 <_printf_i+0xce>
 801018c:	680e      	ldr	r6, [r1, #0]
 801018e:	602b      	str	r3, [r5, #0]
 8010190:	2e00      	cmp	r6, #0
 8010192:	da03      	bge.n	801019c <_printf_i+0xc8>
 8010194:	232d      	movs	r3, #45	; 0x2d
 8010196:	4276      	negs	r6, r6
 8010198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801019c:	485e      	ldr	r0, [pc, #376]	; (8010318 <_printf_i+0x244>)
 801019e:	230a      	movs	r3, #10
 80101a0:	e019      	b.n	80101d6 <_printf_i+0x102>
 80101a2:	680e      	ldr	r6, [r1, #0]
 80101a4:	602b      	str	r3, [r5, #0]
 80101a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80101aa:	bf18      	it	ne
 80101ac:	b236      	sxthne	r6, r6
 80101ae:	e7ef      	b.n	8010190 <_printf_i+0xbc>
 80101b0:	682b      	ldr	r3, [r5, #0]
 80101b2:	6820      	ldr	r0, [r4, #0]
 80101b4:	1d19      	adds	r1, r3, #4
 80101b6:	6029      	str	r1, [r5, #0]
 80101b8:	0601      	lsls	r1, r0, #24
 80101ba:	d501      	bpl.n	80101c0 <_printf_i+0xec>
 80101bc:	681e      	ldr	r6, [r3, #0]
 80101be:	e002      	b.n	80101c6 <_printf_i+0xf2>
 80101c0:	0646      	lsls	r6, r0, #25
 80101c2:	d5fb      	bpl.n	80101bc <_printf_i+0xe8>
 80101c4:	881e      	ldrh	r6, [r3, #0]
 80101c6:	4854      	ldr	r0, [pc, #336]	; (8010318 <_printf_i+0x244>)
 80101c8:	2f6f      	cmp	r7, #111	; 0x6f
 80101ca:	bf0c      	ite	eq
 80101cc:	2308      	moveq	r3, #8
 80101ce:	230a      	movne	r3, #10
 80101d0:	2100      	movs	r1, #0
 80101d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80101d6:	6865      	ldr	r5, [r4, #4]
 80101d8:	60a5      	str	r5, [r4, #8]
 80101da:	2d00      	cmp	r5, #0
 80101dc:	bfa2      	ittt	ge
 80101de:	6821      	ldrge	r1, [r4, #0]
 80101e0:	f021 0104 	bicge.w	r1, r1, #4
 80101e4:	6021      	strge	r1, [r4, #0]
 80101e6:	b90e      	cbnz	r6, 80101ec <_printf_i+0x118>
 80101e8:	2d00      	cmp	r5, #0
 80101ea:	d04d      	beq.n	8010288 <_printf_i+0x1b4>
 80101ec:	4615      	mov	r5, r2
 80101ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80101f2:	fb03 6711 	mls	r7, r3, r1, r6
 80101f6:	5dc7      	ldrb	r7, [r0, r7]
 80101f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80101fc:	4637      	mov	r7, r6
 80101fe:	42bb      	cmp	r3, r7
 8010200:	460e      	mov	r6, r1
 8010202:	d9f4      	bls.n	80101ee <_printf_i+0x11a>
 8010204:	2b08      	cmp	r3, #8
 8010206:	d10b      	bne.n	8010220 <_printf_i+0x14c>
 8010208:	6823      	ldr	r3, [r4, #0]
 801020a:	07de      	lsls	r6, r3, #31
 801020c:	d508      	bpl.n	8010220 <_printf_i+0x14c>
 801020e:	6923      	ldr	r3, [r4, #16]
 8010210:	6861      	ldr	r1, [r4, #4]
 8010212:	4299      	cmp	r1, r3
 8010214:	bfde      	ittt	le
 8010216:	2330      	movle	r3, #48	; 0x30
 8010218:	f805 3c01 	strble.w	r3, [r5, #-1]
 801021c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010220:	1b52      	subs	r2, r2, r5
 8010222:	6122      	str	r2, [r4, #16]
 8010224:	f8cd a000 	str.w	sl, [sp]
 8010228:	464b      	mov	r3, r9
 801022a:	aa03      	add	r2, sp, #12
 801022c:	4621      	mov	r1, r4
 801022e:	4640      	mov	r0, r8
 8010230:	f7ff fee2 	bl	800fff8 <_printf_common>
 8010234:	3001      	adds	r0, #1
 8010236:	d14c      	bne.n	80102d2 <_printf_i+0x1fe>
 8010238:	f04f 30ff 	mov.w	r0, #4294967295
 801023c:	b004      	add	sp, #16
 801023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010242:	4835      	ldr	r0, [pc, #212]	; (8010318 <_printf_i+0x244>)
 8010244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010248:	6829      	ldr	r1, [r5, #0]
 801024a:	6823      	ldr	r3, [r4, #0]
 801024c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010250:	6029      	str	r1, [r5, #0]
 8010252:	061d      	lsls	r5, r3, #24
 8010254:	d514      	bpl.n	8010280 <_printf_i+0x1ac>
 8010256:	07df      	lsls	r7, r3, #31
 8010258:	bf44      	itt	mi
 801025a:	f043 0320 	orrmi.w	r3, r3, #32
 801025e:	6023      	strmi	r3, [r4, #0]
 8010260:	b91e      	cbnz	r6, 801026a <_printf_i+0x196>
 8010262:	6823      	ldr	r3, [r4, #0]
 8010264:	f023 0320 	bic.w	r3, r3, #32
 8010268:	6023      	str	r3, [r4, #0]
 801026a:	2310      	movs	r3, #16
 801026c:	e7b0      	b.n	80101d0 <_printf_i+0xfc>
 801026e:	6823      	ldr	r3, [r4, #0]
 8010270:	f043 0320 	orr.w	r3, r3, #32
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	2378      	movs	r3, #120	; 0x78
 8010278:	4828      	ldr	r0, [pc, #160]	; (801031c <_printf_i+0x248>)
 801027a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801027e:	e7e3      	b.n	8010248 <_printf_i+0x174>
 8010280:	0659      	lsls	r1, r3, #25
 8010282:	bf48      	it	mi
 8010284:	b2b6      	uxthmi	r6, r6
 8010286:	e7e6      	b.n	8010256 <_printf_i+0x182>
 8010288:	4615      	mov	r5, r2
 801028a:	e7bb      	b.n	8010204 <_printf_i+0x130>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	6826      	ldr	r6, [r4, #0]
 8010290:	6961      	ldr	r1, [r4, #20]
 8010292:	1d18      	adds	r0, r3, #4
 8010294:	6028      	str	r0, [r5, #0]
 8010296:	0635      	lsls	r5, r6, #24
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	d501      	bpl.n	80102a0 <_printf_i+0x1cc>
 801029c:	6019      	str	r1, [r3, #0]
 801029e:	e002      	b.n	80102a6 <_printf_i+0x1d2>
 80102a0:	0670      	lsls	r0, r6, #25
 80102a2:	d5fb      	bpl.n	801029c <_printf_i+0x1c8>
 80102a4:	8019      	strh	r1, [r3, #0]
 80102a6:	2300      	movs	r3, #0
 80102a8:	6123      	str	r3, [r4, #16]
 80102aa:	4615      	mov	r5, r2
 80102ac:	e7ba      	b.n	8010224 <_printf_i+0x150>
 80102ae:	682b      	ldr	r3, [r5, #0]
 80102b0:	1d1a      	adds	r2, r3, #4
 80102b2:	602a      	str	r2, [r5, #0]
 80102b4:	681d      	ldr	r5, [r3, #0]
 80102b6:	6862      	ldr	r2, [r4, #4]
 80102b8:	2100      	movs	r1, #0
 80102ba:	4628      	mov	r0, r5
 80102bc:	f7f0 f870 	bl	80003a0 <memchr>
 80102c0:	b108      	cbz	r0, 80102c6 <_printf_i+0x1f2>
 80102c2:	1b40      	subs	r0, r0, r5
 80102c4:	6060      	str	r0, [r4, #4]
 80102c6:	6863      	ldr	r3, [r4, #4]
 80102c8:	6123      	str	r3, [r4, #16]
 80102ca:	2300      	movs	r3, #0
 80102cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102d0:	e7a8      	b.n	8010224 <_printf_i+0x150>
 80102d2:	6923      	ldr	r3, [r4, #16]
 80102d4:	462a      	mov	r2, r5
 80102d6:	4649      	mov	r1, r9
 80102d8:	4640      	mov	r0, r8
 80102da:	47d0      	blx	sl
 80102dc:	3001      	adds	r0, #1
 80102de:	d0ab      	beq.n	8010238 <_printf_i+0x164>
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	079b      	lsls	r3, r3, #30
 80102e4:	d413      	bmi.n	801030e <_printf_i+0x23a>
 80102e6:	68e0      	ldr	r0, [r4, #12]
 80102e8:	9b03      	ldr	r3, [sp, #12]
 80102ea:	4298      	cmp	r0, r3
 80102ec:	bfb8      	it	lt
 80102ee:	4618      	movlt	r0, r3
 80102f0:	e7a4      	b.n	801023c <_printf_i+0x168>
 80102f2:	2301      	movs	r3, #1
 80102f4:	4632      	mov	r2, r6
 80102f6:	4649      	mov	r1, r9
 80102f8:	4640      	mov	r0, r8
 80102fa:	47d0      	blx	sl
 80102fc:	3001      	adds	r0, #1
 80102fe:	d09b      	beq.n	8010238 <_printf_i+0x164>
 8010300:	3501      	adds	r5, #1
 8010302:	68e3      	ldr	r3, [r4, #12]
 8010304:	9903      	ldr	r1, [sp, #12]
 8010306:	1a5b      	subs	r3, r3, r1
 8010308:	42ab      	cmp	r3, r5
 801030a:	dcf2      	bgt.n	80102f2 <_printf_i+0x21e>
 801030c:	e7eb      	b.n	80102e6 <_printf_i+0x212>
 801030e:	2500      	movs	r5, #0
 8010310:	f104 0619 	add.w	r6, r4, #25
 8010314:	e7f5      	b.n	8010302 <_printf_i+0x22e>
 8010316:	bf00      	nop
 8010318:	08010fa1 	.word	0x08010fa1
 801031c:	08010fb2 	.word	0x08010fb2

08010320 <_sbrk_r>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	4d06      	ldr	r5, [pc, #24]	; (801033c <_sbrk_r+0x1c>)
 8010324:	2300      	movs	r3, #0
 8010326:	4604      	mov	r4, r0
 8010328:	4608      	mov	r0, r1
 801032a:	602b      	str	r3, [r5, #0]
 801032c:	f000 fb34 	bl	8010998 <_sbrk>
 8010330:	1c43      	adds	r3, r0, #1
 8010332:	d102      	bne.n	801033a <_sbrk_r+0x1a>
 8010334:	682b      	ldr	r3, [r5, #0]
 8010336:	b103      	cbz	r3, 801033a <_sbrk_r+0x1a>
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	bd38      	pop	{r3, r4, r5, pc}
 801033c:	2407f64c 	.word	0x2407f64c

08010340 <__sread>:
 8010340:	b510      	push	{r4, lr}
 8010342:	460c      	mov	r4, r1
 8010344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010348:	f000 faea 	bl	8010920 <_read_r>
 801034c:	2800      	cmp	r0, #0
 801034e:	bfab      	itete	ge
 8010350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010352:	89a3      	ldrhlt	r3, [r4, #12]
 8010354:	181b      	addge	r3, r3, r0
 8010356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801035a:	bfac      	ite	ge
 801035c:	6563      	strge	r3, [r4, #84]	; 0x54
 801035e:	81a3      	strhlt	r3, [r4, #12]
 8010360:	bd10      	pop	{r4, pc}

08010362 <__swrite>:
 8010362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010366:	461f      	mov	r7, r3
 8010368:	898b      	ldrh	r3, [r1, #12]
 801036a:	05db      	lsls	r3, r3, #23
 801036c:	4605      	mov	r5, r0
 801036e:	460c      	mov	r4, r1
 8010370:	4616      	mov	r6, r2
 8010372:	d505      	bpl.n	8010380 <__swrite+0x1e>
 8010374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010378:	2302      	movs	r3, #2
 801037a:	2200      	movs	r2, #0
 801037c:	f000 f9b6 	bl	80106ec <_lseek_r>
 8010380:	89a3      	ldrh	r3, [r4, #12]
 8010382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801038a:	81a3      	strh	r3, [r4, #12]
 801038c:	4632      	mov	r2, r6
 801038e:	463b      	mov	r3, r7
 8010390:	4628      	mov	r0, r5
 8010392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010396:	f7f5 bcc9 	b.w	8005d2c <_write_r>

0801039a <__sseek>:
 801039a:	b510      	push	{r4, lr}
 801039c:	460c      	mov	r4, r1
 801039e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103a2:	f000 f9a3 	bl	80106ec <_lseek_r>
 80103a6:	1c43      	adds	r3, r0, #1
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	bf15      	itete	ne
 80103ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80103ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103b6:	81a3      	strheq	r3, [r4, #12]
 80103b8:	bf18      	it	ne
 80103ba:	81a3      	strhne	r3, [r4, #12]
 80103bc:	bd10      	pop	{r4, pc}

080103be <__sclose>:
 80103be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103c2:	f000 b8c1 	b.w	8010548 <_close_r>
	...

080103c8 <__swbuf_r>:
 80103c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ca:	460e      	mov	r6, r1
 80103cc:	4614      	mov	r4, r2
 80103ce:	4605      	mov	r5, r0
 80103d0:	b118      	cbz	r0, 80103da <__swbuf_r+0x12>
 80103d2:	6983      	ldr	r3, [r0, #24]
 80103d4:	b90b      	cbnz	r3, 80103da <__swbuf_r+0x12>
 80103d6:	f7ff fa25 	bl	800f824 <__sinit>
 80103da:	4b21      	ldr	r3, [pc, #132]	; (8010460 <__swbuf_r+0x98>)
 80103dc:	429c      	cmp	r4, r3
 80103de:	d12b      	bne.n	8010438 <__swbuf_r+0x70>
 80103e0:	686c      	ldr	r4, [r5, #4]
 80103e2:	69a3      	ldr	r3, [r4, #24]
 80103e4:	60a3      	str	r3, [r4, #8]
 80103e6:	89a3      	ldrh	r3, [r4, #12]
 80103e8:	071a      	lsls	r2, r3, #28
 80103ea:	d52f      	bpl.n	801044c <__swbuf_r+0x84>
 80103ec:	6923      	ldr	r3, [r4, #16]
 80103ee:	b36b      	cbz	r3, 801044c <__swbuf_r+0x84>
 80103f0:	6923      	ldr	r3, [r4, #16]
 80103f2:	6820      	ldr	r0, [r4, #0]
 80103f4:	1ac0      	subs	r0, r0, r3
 80103f6:	6963      	ldr	r3, [r4, #20]
 80103f8:	b2f6      	uxtb	r6, r6
 80103fa:	4283      	cmp	r3, r0
 80103fc:	4637      	mov	r7, r6
 80103fe:	dc04      	bgt.n	801040a <__swbuf_r+0x42>
 8010400:	4621      	mov	r1, r4
 8010402:	4628      	mov	r0, r5
 8010404:	f000 f936 	bl	8010674 <_fflush_r>
 8010408:	bb30      	cbnz	r0, 8010458 <__swbuf_r+0x90>
 801040a:	68a3      	ldr	r3, [r4, #8]
 801040c:	3b01      	subs	r3, #1
 801040e:	60a3      	str	r3, [r4, #8]
 8010410:	6823      	ldr	r3, [r4, #0]
 8010412:	1c5a      	adds	r2, r3, #1
 8010414:	6022      	str	r2, [r4, #0]
 8010416:	701e      	strb	r6, [r3, #0]
 8010418:	6963      	ldr	r3, [r4, #20]
 801041a:	3001      	adds	r0, #1
 801041c:	4283      	cmp	r3, r0
 801041e:	d004      	beq.n	801042a <__swbuf_r+0x62>
 8010420:	89a3      	ldrh	r3, [r4, #12]
 8010422:	07db      	lsls	r3, r3, #31
 8010424:	d506      	bpl.n	8010434 <__swbuf_r+0x6c>
 8010426:	2e0a      	cmp	r6, #10
 8010428:	d104      	bne.n	8010434 <__swbuf_r+0x6c>
 801042a:	4621      	mov	r1, r4
 801042c:	4628      	mov	r0, r5
 801042e:	f000 f921 	bl	8010674 <_fflush_r>
 8010432:	b988      	cbnz	r0, 8010458 <__swbuf_r+0x90>
 8010434:	4638      	mov	r0, r7
 8010436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010438:	4b0a      	ldr	r3, [pc, #40]	; (8010464 <__swbuf_r+0x9c>)
 801043a:	429c      	cmp	r4, r3
 801043c:	d101      	bne.n	8010442 <__swbuf_r+0x7a>
 801043e:	68ac      	ldr	r4, [r5, #8]
 8010440:	e7cf      	b.n	80103e2 <__swbuf_r+0x1a>
 8010442:	4b09      	ldr	r3, [pc, #36]	; (8010468 <__swbuf_r+0xa0>)
 8010444:	429c      	cmp	r4, r3
 8010446:	bf08      	it	eq
 8010448:	68ec      	ldreq	r4, [r5, #12]
 801044a:	e7ca      	b.n	80103e2 <__swbuf_r+0x1a>
 801044c:	4621      	mov	r1, r4
 801044e:	4628      	mov	r0, r5
 8010450:	f000 f80c 	bl	801046c <__swsetup_r>
 8010454:	2800      	cmp	r0, #0
 8010456:	d0cb      	beq.n	80103f0 <__swbuf_r+0x28>
 8010458:	f04f 37ff 	mov.w	r7, #4294967295
 801045c:	e7ea      	b.n	8010434 <__swbuf_r+0x6c>
 801045e:	bf00      	nop
 8010460:	08010f50 	.word	0x08010f50
 8010464:	08010f70 	.word	0x08010f70
 8010468:	08010f30 	.word	0x08010f30

0801046c <__swsetup_r>:
 801046c:	4b32      	ldr	r3, [pc, #200]	; (8010538 <__swsetup_r+0xcc>)
 801046e:	b570      	push	{r4, r5, r6, lr}
 8010470:	681d      	ldr	r5, [r3, #0]
 8010472:	4606      	mov	r6, r0
 8010474:	460c      	mov	r4, r1
 8010476:	b125      	cbz	r5, 8010482 <__swsetup_r+0x16>
 8010478:	69ab      	ldr	r3, [r5, #24]
 801047a:	b913      	cbnz	r3, 8010482 <__swsetup_r+0x16>
 801047c:	4628      	mov	r0, r5
 801047e:	f7ff f9d1 	bl	800f824 <__sinit>
 8010482:	4b2e      	ldr	r3, [pc, #184]	; (801053c <__swsetup_r+0xd0>)
 8010484:	429c      	cmp	r4, r3
 8010486:	d10f      	bne.n	80104a8 <__swsetup_r+0x3c>
 8010488:	686c      	ldr	r4, [r5, #4]
 801048a:	89a3      	ldrh	r3, [r4, #12]
 801048c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010490:	0719      	lsls	r1, r3, #28
 8010492:	d42c      	bmi.n	80104ee <__swsetup_r+0x82>
 8010494:	06dd      	lsls	r5, r3, #27
 8010496:	d411      	bmi.n	80104bc <__swsetup_r+0x50>
 8010498:	2309      	movs	r3, #9
 801049a:	6033      	str	r3, [r6, #0]
 801049c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104a0:	81a3      	strh	r3, [r4, #12]
 80104a2:	f04f 30ff 	mov.w	r0, #4294967295
 80104a6:	e03e      	b.n	8010526 <__swsetup_r+0xba>
 80104a8:	4b25      	ldr	r3, [pc, #148]	; (8010540 <__swsetup_r+0xd4>)
 80104aa:	429c      	cmp	r4, r3
 80104ac:	d101      	bne.n	80104b2 <__swsetup_r+0x46>
 80104ae:	68ac      	ldr	r4, [r5, #8]
 80104b0:	e7eb      	b.n	801048a <__swsetup_r+0x1e>
 80104b2:	4b24      	ldr	r3, [pc, #144]	; (8010544 <__swsetup_r+0xd8>)
 80104b4:	429c      	cmp	r4, r3
 80104b6:	bf08      	it	eq
 80104b8:	68ec      	ldreq	r4, [r5, #12]
 80104ba:	e7e6      	b.n	801048a <__swsetup_r+0x1e>
 80104bc:	0758      	lsls	r0, r3, #29
 80104be:	d512      	bpl.n	80104e6 <__swsetup_r+0x7a>
 80104c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104c2:	b141      	cbz	r1, 80104d6 <__swsetup_r+0x6a>
 80104c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104c8:	4299      	cmp	r1, r3
 80104ca:	d002      	beq.n	80104d2 <__swsetup_r+0x66>
 80104cc:	4630      	mov	r0, r6
 80104ce:	f000 f9ab 	bl	8010828 <_free_r>
 80104d2:	2300      	movs	r3, #0
 80104d4:	6363      	str	r3, [r4, #52]	; 0x34
 80104d6:	89a3      	ldrh	r3, [r4, #12]
 80104d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104dc:	81a3      	strh	r3, [r4, #12]
 80104de:	2300      	movs	r3, #0
 80104e0:	6063      	str	r3, [r4, #4]
 80104e2:	6923      	ldr	r3, [r4, #16]
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	89a3      	ldrh	r3, [r4, #12]
 80104e8:	f043 0308 	orr.w	r3, r3, #8
 80104ec:	81a3      	strh	r3, [r4, #12]
 80104ee:	6923      	ldr	r3, [r4, #16]
 80104f0:	b94b      	cbnz	r3, 8010506 <__swsetup_r+0x9a>
 80104f2:	89a3      	ldrh	r3, [r4, #12]
 80104f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80104f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104fc:	d003      	beq.n	8010506 <__swsetup_r+0x9a>
 80104fe:	4621      	mov	r1, r4
 8010500:	4630      	mov	r0, r6
 8010502:	f000 f92b 	bl	801075c <__smakebuf_r>
 8010506:	89a0      	ldrh	r0, [r4, #12]
 8010508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801050c:	f010 0301 	ands.w	r3, r0, #1
 8010510:	d00a      	beq.n	8010528 <__swsetup_r+0xbc>
 8010512:	2300      	movs	r3, #0
 8010514:	60a3      	str	r3, [r4, #8]
 8010516:	6963      	ldr	r3, [r4, #20]
 8010518:	425b      	negs	r3, r3
 801051a:	61a3      	str	r3, [r4, #24]
 801051c:	6923      	ldr	r3, [r4, #16]
 801051e:	b943      	cbnz	r3, 8010532 <__swsetup_r+0xc6>
 8010520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010524:	d1ba      	bne.n	801049c <__swsetup_r+0x30>
 8010526:	bd70      	pop	{r4, r5, r6, pc}
 8010528:	0781      	lsls	r1, r0, #30
 801052a:	bf58      	it	pl
 801052c:	6963      	ldrpl	r3, [r4, #20]
 801052e:	60a3      	str	r3, [r4, #8]
 8010530:	e7f4      	b.n	801051c <__swsetup_r+0xb0>
 8010532:	2000      	movs	r0, #0
 8010534:	e7f7      	b.n	8010526 <__swsetup_r+0xba>
 8010536:	bf00      	nop
 8010538:	2400003c 	.word	0x2400003c
 801053c:	08010f50 	.word	0x08010f50
 8010540:	08010f70 	.word	0x08010f70
 8010544:	08010f30 	.word	0x08010f30

08010548 <_close_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	4d06      	ldr	r5, [pc, #24]	; (8010564 <_close_r+0x1c>)
 801054c:	2300      	movs	r3, #0
 801054e:	4604      	mov	r4, r0
 8010550:	4608      	mov	r0, r1
 8010552:	602b      	str	r3, [r5, #0]
 8010554:	f7f7 f8dd 	bl	8007712 <_close>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_close_r+0x1a>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_close_r+0x1a>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	2407f64c 	.word	0x2407f64c

08010568 <__sflush_r>:
 8010568:	898a      	ldrh	r2, [r1, #12]
 801056a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801056e:	4605      	mov	r5, r0
 8010570:	0710      	lsls	r0, r2, #28
 8010572:	460c      	mov	r4, r1
 8010574:	d458      	bmi.n	8010628 <__sflush_r+0xc0>
 8010576:	684b      	ldr	r3, [r1, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	dc05      	bgt.n	8010588 <__sflush_r+0x20>
 801057c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801057e:	2b00      	cmp	r3, #0
 8010580:	dc02      	bgt.n	8010588 <__sflush_r+0x20>
 8010582:	2000      	movs	r0, #0
 8010584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801058a:	2e00      	cmp	r6, #0
 801058c:	d0f9      	beq.n	8010582 <__sflush_r+0x1a>
 801058e:	2300      	movs	r3, #0
 8010590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010594:	682f      	ldr	r7, [r5, #0]
 8010596:	602b      	str	r3, [r5, #0]
 8010598:	d032      	beq.n	8010600 <__sflush_r+0x98>
 801059a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801059c:	89a3      	ldrh	r3, [r4, #12]
 801059e:	075a      	lsls	r2, r3, #29
 80105a0:	d505      	bpl.n	80105ae <__sflush_r+0x46>
 80105a2:	6863      	ldr	r3, [r4, #4]
 80105a4:	1ac0      	subs	r0, r0, r3
 80105a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105a8:	b10b      	cbz	r3, 80105ae <__sflush_r+0x46>
 80105aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105ac:	1ac0      	subs	r0, r0, r3
 80105ae:	2300      	movs	r3, #0
 80105b0:	4602      	mov	r2, r0
 80105b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105b4:	6a21      	ldr	r1, [r4, #32]
 80105b6:	4628      	mov	r0, r5
 80105b8:	47b0      	blx	r6
 80105ba:	1c43      	adds	r3, r0, #1
 80105bc:	89a3      	ldrh	r3, [r4, #12]
 80105be:	d106      	bne.n	80105ce <__sflush_r+0x66>
 80105c0:	6829      	ldr	r1, [r5, #0]
 80105c2:	291d      	cmp	r1, #29
 80105c4:	d82c      	bhi.n	8010620 <__sflush_r+0xb8>
 80105c6:	4a2a      	ldr	r2, [pc, #168]	; (8010670 <__sflush_r+0x108>)
 80105c8:	40ca      	lsrs	r2, r1
 80105ca:	07d6      	lsls	r6, r2, #31
 80105cc:	d528      	bpl.n	8010620 <__sflush_r+0xb8>
 80105ce:	2200      	movs	r2, #0
 80105d0:	6062      	str	r2, [r4, #4]
 80105d2:	04d9      	lsls	r1, r3, #19
 80105d4:	6922      	ldr	r2, [r4, #16]
 80105d6:	6022      	str	r2, [r4, #0]
 80105d8:	d504      	bpl.n	80105e4 <__sflush_r+0x7c>
 80105da:	1c42      	adds	r2, r0, #1
 80105dc:	d101      	bne.n	80105e2 <__sflush_r+0x7a>
 80105de:	682b      	ldr	r3, [r5, #0]
 80105e0:	b903      	cbnz	r3, 80105e4 <__sflush_r+0x7c>
 80105e2:	6560      	str	r0, [r4, #84]	; 0x54
 80105e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105e6:	602f      	str	r7, [r5, #0]
 80105e8:	2900      	cmp	r1, #0
 80105ea:	d0ca      	beq.n	8010582 <__sflush_r+0x1a>
 80105ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105f0:	4299      	cmp	r1, r3
 80105f2:	d002      	beq.n	80105fa <__sflush_r+0x92>
 80105f4:	4628      	mov	r0, r5
 80105f6:	f000 f917 	bl	8010828 <_free_r>
 80105fa:	2000      	movs	r0, #0
 80105fc:	6360      	str	r0, [r4, #52]	; 0x34
 80105fe:	e7c1      	b.n	8010584 <__sflush_r+0x1c>
 8010600:	6a21      	ldr	r1, [r4, #32]
 8010602:	2301      	movs	r3, #1
 8010604:	4628      	mov	r0, r5
 8010606:	47b0      	blx	r6
 8010608:	1c41      	adds	r1, r0, #1
 801060a:	d1c7      	bne.n	801059c <__sflush_r+0x34>
 801060c:	682b      	ldr	r3, [r5, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d0c4      	beq.n	801059c <__sflush_r+0x34>
 8010612:	2b1d      	cmp	r3, #29
 8010614:	d001      	beq.n	801061a <__sflush_r+0xb2>
 8010616:	2b16      	cmp	r3, #22
 8010618:	d101      	bne.n	801061e <__sflush_r+0xb6>
 801061a:	602f      	str	r7, [r5, #0]
 801061c:	e7b1      	b.n	8010582 <__sflush_r+0x1a>
 801061e:	89a3      	ldrh	r3, [r4, #12]
 8010620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010624:	81a3      	strh	r3, [r4, #12]
 8010626:	e7ad      	b.n	8010584 <__sflush_r+0x1c>
 8010628:	690f      	ldr	r7, [r1, #16]
 801062a:	2f00      	cmp	r7, #0
 801062c:	d0a9      	beq.n	8010582 <__sflush_r+0x1a>
 801062e:	0793      	lsls	r3, r2, #30
 8010630:	680e      	ldr	r6, [r1, #0]
 8010632:	bf08      	it	eq
 8010634:	694b      	ldreq	r3, [r1, #20]
 8010636:	600f      	str	r7, [r1, #0]
 8010638:	bf18      	it	ne
 801063a:	2300      	movne	r3, #0
 801063c:	eba6 0807 	sub.w	r8, r6, r7
 8010640:	608b      	str	r3, [r1, #8]
 8010642:	f1b8 0f00 	cmp.w	r8, #0
 8010646:	dd9c      	ble.n	8010582 <__sflush_r+0x1a>
 8010648:	6a21      	ldr	r1, [r4, #32]
 801064a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801064c:	4643      	mov	r3, r8
 801064e:	463a      	mov	r2, r7
 8010650:	4628      	mov	r0, r5
 8010652:	47b0      	blx	r6
 8010654:	2800      	cmp	r0, #0
 8010656:	dc06      	bgt.n	8010666 <__sflush_r+0xfe>
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	f04f 30ff 	mov.w	r0, #4294967295
 8010664:	e78e      	b.n	8010584 <__sflush_r+0x1c>
 8010666:	4407      	add	r7, r0
 8010668:	eba8 0800 	sub.w	r8, r8, r0
 801066c:	e7e9      	b.n	8010642 <__sflush_r+0xda>
 801066e:	bf00      	nop
 8010670:	20400001 	.word	0x20400001

08010674 <_fflush_r>:
 8010674:	b538      	push	{r3, r4, r5, lr}
 8010676:	690b      	ldr	r3, [r1, #16]
 8010678:	4605      	mov	r5, r0
 801067a:	460c      	mov	r4, r1
 801067c:	b913      	cbnz	r3, 8010684 <_fflush_r+0x10>
 801067e:	2500      	movs	r5, #0
 8010680:	4628      	mov	r0, r5
 8010682:	bd38      	pop	{r3, r4, r5, pc}
 8010684:	b118      	cbz	r0, 801068e <_fflush_r+0x1a>
 8010686:	6983      	ldr	r3, [r0, #24]
 8010688:	b90b      	cbnz	r3, 801068e <_fflush_r+0x1a>
 801068a:	f7ff f8cb 	bl	800f824 <__sinit>
 801068e:	4b14      	ldr	r3, [pc, #80]	; (80106e0 <_fflush_r+0x6c>)
 8010690:	429c      	cmp	r4, r3
 8010692:	d11b      	bne.n	80106cc <_fflush_r+0x58>
 8010694:	686c      	ldr	r4, [r5, #4]
 8010696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d0ef      	beq.n	801067e <_fflush_r+0xa>
 801069e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80106a0:	07d0      	lsls	r0, r2, #31
 80106a2:	d404      	bmi.n	80106ae <_fflush_r+0x3a>
 80106a4:	0599      	lsls	r1, r3, #22
 80106a6:	d402      	bmi.n	80106ae <_fflush_r+0x3a>
 80106a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106aa:	f7ff f959 	bl	800f960 <__retarget_lock_acquire_recursive>
 80106ae:	4628      	mov	r0, r5
 80106b0:	4621      	mov	r1, r4
 80106b2:	f7ff ff59 	bl	8010568 <__sflush_r>
 80106b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106b8:	07da      	lsls	r2, r3, #31
 80106ba:	4605      	mov	r5, r0
 80106bc:	d4e0      	bmi.n	8010680 <_fflush_r+0xc>
 80106be:	89a3      	ldrh	r3, [r4, #12]
 80106c0:	059b      	lsls	r3, r3, #22
 80106c2:	d4dd      	bmi.n	8010680 <_fflush_r+0xc>
 80106c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106c6:	f7ff f94c 	bl	800f962 <__retarget_lock_release_recursive>
 80106ca:	e7d9      	b.n	8010680 <_fflush_r+0xc>
 80106cc:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <_fflush_r+0x70>)
 80106ce:	429c      	cmp	r4, r3
 80106d0:	d101      	bne.n	80106d6 <_fflush_r+0x62>
 80106d2:	68ac      	ldr	r4, [r5, #8]
 80106d4:	e7df      	b.n	8010696 <_fflush_r+0x22>
 80106d6:	4b04      	ldr	r3, [pc, #16]	; (80106e8 <_fflush_r+0x74>)
 80106d8:	429c      	cmp	r4, r3
 80106da:	bf08      	it	eq
 80106dc:	68ec      	ldreq	r4, [r5, #12]
 80106de:	e7da      	b.n	8010696 <_fflush_r+0x22>
 80106e0:	08010f50 	.word	0x08010f50
 80106e4:	08010f70 	.word	0x08010f70
 80106e8:	08010f30 	.word	0x08010f30

080106ec <_lseek_r>:
 80106ec:	b538      	push	{r3, r4, r5, lr}
 80106ee:	4d07      	ldr	r5, [pc, #28]	; (801070c <_lseek_r+0x20>)
 80106f0:	4604      	mov	r4, r0
 80106f2:	4608      	mov	r0, r1
 80106f4:	4611      	mov	r1, r2
 80106f6:	2200      	movs	r2, #0
 80106f8:	602a      	str	r2, [r5, #0]
 80106fa:	461a      	mov	r2, r3
 80106fc:	f7f7 f830 	bl	8007760 <_lseek>
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	d102      	bne.n	801070a <_lseek_r+0x1e>
 8010704:	682b      	ldr	r3, [r5, #0]
 8010706:	b103      	cbz	r3, 801070a <_lseek_r+0x1e>
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	2407f64c 	.word	0x2407f64c

08010710 <__swhatbuf_r>:
 8010710:	b570      	push	{r4, r5, r6, lr}
 8010712:	460e      	mov	r6, r1
 8010714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010718:	2900      	cmp	r1, #0
 801071a:	b096      	sub	sp, #88	; 0x58
 801071c:	4614      	mov	r4, r2
 801071e:	461d      	mov	r5, r3
 8010720:	da08      	bge.n	8010734 <__swhatbuf_r+0x24>
 8010722:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010726:	2200      	movs	r2, #0
 8010728:	602a      	str	r2, [r5, #0]
 801072a:	061a      	lsls	r2, r3, #24
 801072c:	d410      	bmi.n	8010750 <__swhatbuf_r+0x40>
 801072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010732:	e00e      	b.n	8010752 <__swhatbuf_r+0x42>
 8010734:	466a      	mov	r2, sp
 8010736:	f000 f905 	bl	8010944 <_fstat_r>
 801073a:	2800      	cmp	r0, #0
 801073c:	dbf1      	blt.n	8010722 <__swhatbuf_r+0x12>
 801073e:	9a01      	ldr	r2, [sp, #4]
 8010740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010748:	425a      	negs	r2, r3
 801074a:	415a      	adcs	r2, r3
 801074c:	602a      	str	r2, [r5, #0]
 801074e:	e7ee      	b.n	801072e <__swhatbuf_r+0x1e>
 8010750:	2340      	movs	r3, #64	; 0x40
 8010752:	2000      	movs	r0, #0
 8010754:	6023      	str	r3, [r4, #0]
 8010756:	b016      	add	sp, #88	; 0x58
 8010758:	bd70      	pop	{r4, r5, r6, pc}
	...

0801075c <__smakebuf_r>:
 801075c:	898b      	ldrh	r3, [r1, #12]
 801075e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010760:	079d      	lsls	r5, r3, #30
 8010762:	4606      	mov	r6, r0
 8010764:	460c      	mov	r4, r1
 8010766:	d507      	bpl.n	8010778 <__smakebuf_r+0x1c>
 8010768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801076c:	6023      	str	r3, [r4, #0]
 801076e:	6123      	str	r3, [r4, #16]
 8010770:	2301      	movs	r3, #1
 8010772:	6163      	str	r3, [r4, #20]
 8010774:	b002      	add	sp, #8
 8010776:	bd70      	pop	{r4, r5, r6, pc}
 8010778:	ab01      	add	r3, sp, #4
 801077a:	466a      	mov	r2, sp
 801077c:	f7ff ffc8 	bl	8010710 <__swhatbuf_r>
 8010780:	9900      	ldr	r1, [sp, #0]
 8010782:	4605      	mov	r5, r0
 8010784:	4630      	mov	r0, r6
 8010786:	f7ff f90d 	bl	800f9a4 <_malloc_r>
 801078a:	b948      	cbnz	r0, 80107a0 <__smakebuf_r+0x44>
 801078c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010790:	059a      	lsls	r2, r3, #22
 8010792:	d4ef      	bmi.n	8010774 <__smakebuf_r+0x18>
 8010794:	f023 0303 	bic.w	r3, r3, #3
 8010798:	f043 0302 	orr.w	r3, r3, #2
 801079c:	81a3      	strh	r3, [r4, #12]
 801079e:	e7e3      	b.n	8010768 <__smakebuf_r+0xc>
 80107a0:	4b0d      	ldr	r3, [pc, #52]	; (80107d8 <__smakebuf_r+0x7c>)
 80107a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80107a4:	89a3      	ldrh	r3, [r4, #12]
 80107a6:	6020      	str	r0, [r4, #0]
 80107a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107ac:	81a3      	strh	r3, [r4, #12]
 80107ae:	9b00      	ldr	r3, [sp, #0]
 80107b0:	6163      	str	r3, [r4, #20]
 80107b2:	9b01      	ldr	r3, [sp, #4]
 80107b4:	6120      	str	r0, [r4, #16]
 80107b6:	b15b      	cbz	r3, 80107d0 <__smakebuf_r+0x74>
 80107b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107bc:	4630      	mov	r0, r6
 80107be:	f000 f8d3 	bl	8010968 <_isatty_r>
 80107c2:	b128      	cbz	r0, 80107d0 <__smakebuf_r+0x74>
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	f023 0303 	bic.w	r3, r3, #3
 80107ca:	f043 0301 	orr.w	r3, r3, #1
 80107ce:	81a3      	strh	r3, [r4, #12]
 80107d0:	89a0      	ldrh	r0, [r4, #12]
 80107d2:	4305      	orrs	r5, r0
 80107d4:	81a5      	strh	r5, [r4, #12]
 80107d6:	e7cd      	b.n	8010774 <__smakebuf_r+0x18>
 80107d8:	0800f7bd 	.word	0x0800f7bd

080107dc <memmove>:
 80107dc:	4288      	cmp	r0, r1
 80107de:	b510      	push	{r4, lr}
 80107e0:	eb01 0402 	add.w	r4, r1, r2
 80107e4:	d902      	bls.n	80107ec <memmove+0x10>
 80107e6:	4284      	cmp	r4, r0
 80107e8:	4623      	mov	r3, r4
 80107ea:	d807      	bhi.n	80107fc <memmove+0x20>
 80107ec:	1e43      	subs	r3, r0, #1
 80107ee:	42a1      	cmp	r1, r4
 80107f0:	d008      	beq.n	8010804 <memmove+0x28>
 80107f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107fa:	e7f8      	b.n	80107ee <memmove+0x12>
 80107fc:	4402      	add	r2, r0
 80107fe:	4601      	mov	r1, r0
 8010800:	428a      	cmp	r2, r1
 8010802:	d100      	bne.n	8010806 <memmove+0x2a>
 8010804:	bd10      	pop	{r4, pc}
 8010806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801080a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801080e:	e7f7      	b.n	8010800 <memmove+0x24>

08010810 <__malloc_lock>:
 8010810:	4801      	ldr	r0, [pc, #4]	; (8010818 <__malloc_lock+0x8>)
 8010812:	f7ff b8a5 	b.w	800f960 <__retarget_lock_acquire_recursive>
 8010816:	bf00      	nop
 8010818:	2407f640 	.word	0x2407f640

0801081c <__malloc_unlock>:
 801081c:	4801      	ldr	r0, [pc, #4]	; (8010824 <__malloc_unlock+0x8>)
 801081e:	f7ff b8a0 	b.w	800f962 <__retarget_lock_release_recursive>
 8010822:	bf00      	nop
 8010824:	2407f640 	.word	0x2407f640

08010828 <_free_r>:
 8010828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801082a:	2900      	cmp	r1, #0
 801082c:	d044      	beq.n	80108b8 <_free_r+0x90>
 801082e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010832:	9001      	str	r0, [sp, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	f1a1 0404 	sub.w	r4, r1, #4
 801083a:	bfb8      	it	lt
 801083c:	18e4      	addlt	r4, r4, r3
 801083e:	f7ff ffe7 	bl	8010810 <__malloc_lock>
 8010842:	4a1e      	ldr	r2, [pc, #120]	; (80108bc <_free_r+0x94>)
 8010844:	9801      	ldr	r0, [sp, #4]
 8010846:	6813      	ldr	r3, [r2, #0]
 8010848:	b933      	cbnz	r3, 8010858 <_free_r+0x30>
 801084a:	6063      	str	r3, [r4, #4]
 801084c:	6014      	str	r4, [r2, #0]
 801084e:	b003      	add	sp, #12
 8010850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010854:	f7ff bfe2 	b.w	801081c <__malloc_unlock>
 8010858:	42a3      	cmp	r3, r4
 801085a:	d908      	bls.n	801086e <_free_r+0x46>
 801085c:	6825      	ldr	r5, [r4, #0]
 801085e:	1961      	adds	r1, r4, r5
 8010860:	428b      	cmp	r3, r1
 8010862:	bf01      	itttt	eq
 8010864:	6819      	ldreq	r1, [r3, #0]
 8010866:	685b      	ldreq	r3, [r3, #4]
 8010868:	1949      	addeq	r1, r1, r5
 801086a:	6021      	streq	r1, [r4, #0]
 801086c:	e7ed      	b.n	801084a <_free_r+0x22>
 801086e:	461a      	mov	r2, r3
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	b10b      	cbz	r3, 8010878 <_free_r+0x50>
 8010874:	42a3      	cmp	r3, r4
 8010876:	d9fa      	bls.n	801086e <_free_r+0x46>
 8010878:	6811      	ldr	r1, [r2, #0]
 801087a:	1855      	adds	r5, r2, r1
 801087c:	42a5      	cmp	r5, r4
 801087e:	d10b      	bne.n	8010898 <_free_r+0x70>
 8010880:	6824      	ldr	r4, [r4, #0]
 8010882:	4421      	add	r1, r4
 8010884:	1854      	adds	r4, r2, r1
 8010886:	42a3      	cmp	r3, r4
 8010888:	6011      	str	r1, [r2, #0]
 801088a:	d1e0      	bne.n	801084e <_free_r+0x26>
 801088c:	681c      	ldr	r4, [r3, #0]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	6053      	str	r3, [r2, #4]
 8010892:	4421      	add	r1, r4
 8010894:	6011      	str	r1, [r2, #0]
 8010896:	e7da      	b.n	801084e <_free_r+0x26>
 8010898:	d902      	bls.n	80108a0 <_free_r+0x78>
 801089a:	230c      	movs	r3, #12
 801089c:	6003      	str	r3, [r0, #0]
 801089e:	e7d6      	b.n	801084e <_free_r+0x26>
 80108a0:	6825      	ldr	r5, [r4, #0]
 80108a2:	1961      	adds	r1, r4, r5
 80108a4:	428b      	cmp	r3, r1
 80108a6:	bf04      	itt	eq
 80108a8:	6819      	ldreq	r1, [r3, #0]
 80108aa:	685b      	ldreq	r3, [r3, #4]
 80108ac:	6063      	str	r3, [r4, #4]
 80108ae:	bf04      	itt	eq
 80108b0:	1949      	addeq	r1, r1, r5
 80108b2:	6021      	streq	r1, [r4, #0]
 80108b4:	6054      	str	r4, [r2, #4]
 80108b6:	e7ca      	b.n	801084e <_free_r+0x26>
 80108b8:	b003      	add	sp, #12
 80108ba:	bd30      	pop	{r4, r5, pc}
 80108bc:	2407f644 	.word	0x2407f644

080108c0 <_realloc_r>:
 80108c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c4:	4680      	mov	r8, r0
 80108c6:	4614      	mov	r4, r2
 80108c8:	460e      	mov	r6, r1
 80108ca:	b921      	cbnz	r1, 80108d6 <_realloc_r+0x16>
 80108cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108d0:	4611      	mov	r1, r2
 80108d2:	f7ff b867 	b.w	800f9a4 <_malloc_r>
 80108d6:	b92a      	cbnz	r2, 80108e4 <_realloc_r+0x24>
 80108d8:	f7ff ffa6 	bl	8010828 <_free_r>
 80108dc:	4625      	mov	r5, r4
 80108de:	4628      	mov	r0, r5
 80108e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108e4:	f000 f850 	bl	8010988 <_malloc_usable_size_r>
 80108e8:	4284      	cmp	r4, r0
 80108ea:	4607      	mov	r7, r0
 80108ec:	d802      	bhi.n	80108f4 <_realloc_r+0x34>
 80108ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80108f2:	d812      	bhi.n	801091a <_realloc_r+0x5a>
 80108f4:	4621      	mov	r1, r4
 80108f6:	4640      	mov	r0, r8
 80108f8:	f7ff f854 	bl	800f9a4 <_malloc_r>
 80108fc:	4605      	mov	r5, r0
 80108fe:	2800      	cmp	r0, #0
 8010900:	d0ed      	beq.n	80108de <_realloc_r+0x1e>
 8010902:	42bc      	cmp	r4, r7
 8010904:	4622      	mov	r2, r4
 8010906:	4631      	mov	r1, r6
 8010908:	bf28      	it	cs
 801090a:	463a      	movcs	r2, r7
 801090c:	f7fe fee4 	bl	800f6d8 <memcpy>
 8010910:	4631      	mov	r1, r6
 8010912:	4640      	mov	r0, r8
 8010914:	f7ff ff88 	bl	8010828 <_free_r>
 8010918:	e7e1      	b.n	80108de <_realloc_r+0x1e>
 801091a:	4635      	mov	r5, r6
 801091c:	e7df      	b.n	80108de <_realloc_r+0x1e>
	...

08010920 <_read_r>:
 8010920:	b538      	push	{r3, r4, r5, lr}
 8010922:	4d07      	ldr	r5, [pc, #28]	; (8010940 <_read_r+0x20>)
 8010924:	4604      	mov	r4, r0
 8010926:	4608      	mov	r0, r1
 8010928:	4611      	mov	r1, r2
 801092a:	2200      	movs	r2, #0
 801092c:	602a      	str	r2, [r5, #0]
 801092e:	461a      	mov	r2, r3
 8010930:	f7f6 fed2 	bl	80076d8 <_read>
 8010934:	1c43      	adds	r3, r0, #1
 8010936:	d102      	bne.n	801093e <_read_r+0x1e>
 8010938:	682b      	ldr	r3, [r5, #0]
 801093a:	b103      	cbz	r3, 801093e <_read_r+0x1e>
 801093c:	6023      	str	r3, [r4, #0]
 801093e:	bd38      	pop	{r3, r4, r5, pc}
 8010940:	2407f64c 	.word	0x2407f64c

08010944 <_fstat_r>:
 8010944:	b538      	push	{r3, r4, r5, lr}
 8010946:	4d07      	ldr	r5, [pc, #28]	; (8010964 <_fstat_r+0x20>)
 8010948:	2300      	movs	r3, #0
 801094a:	4604      	mov	r4, r0
 801094c:	4608      	mov	r0, r1
 801094e:	4611      	mov	r1, r2
 8010950:	602b      	str	r3, [r5, #0]
 8010952:	f7f6 feea 	bl	800772a <_fstat>
 8010956:	1c43      	adds	r3, r0, #1
 8010958:	d102      	bne.n	8010960 <_fstat_r+0x1c>
 801095a:	682b      	ldr	r3, [r5, #0]
 801095c:	b103      	cbz	r3, 8010960 <_fstat_r+0x1c>
 801095e:	6023      	str	r3, [r4, #0]
 8010960:	bd38      	pop	{r3, r4, r5, pc}
 8010962:	bf00      	nop
 8010964:	2407f64c 	.word	0x2407f64c

08010968 <_isatty_r>:
 8010968:	b538      	push	{r3, r4, r5, lr}
 801096a:	4d06      	ldr	r5, [pc, #24]	; (8010984 <_isatty_r+0x1c>)
 801096c:	2300      	movs	r3, #0
 801096e:	4604      	mov	r4, r0
 8010970:	4608      	mov	r0, r1
 8010972:	602b      	str	r3, [r5, #0]
 8010974:	f7f6 fee9 	bl	800774a <_isatty>
 8010978:	1c43      	adds	r3, r0, #1
 801097a:	d102      	bne.n	8010982 <_isatty_r+0x1a>
 801097c:	682b      	ldr	r3, [r5, #0]
 801097e:	b103      	cbz	r3, 8010982 <_isatty_r+0x1a>
 8010980:	6023      	str	r3, [r4, #0]
 8010982:	bd38      	pop	{r3, r4, r5, pc}
 8010984:	2407f64c 	.word	0x2407f64c

08010988 <_malloc_usable_size_r>:
 8010988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801098c:	1f18      	subs	r0, r3, #4
 801098e:	2b00      	cmp	r3, #0
 8010990:	bfbc      	itt	lt
 8010992:	580b      	ldrlt	r3, [r1, r0]
 8010994:	18c0      	addlt	r0, r0, r3
 8010996:	4770      	bx	lr

08010998 <_sbrk>:
 8010998:	4a04      	ldr	r2, [pc, #16]	; (80109ac <_sbrk+0x14>)
 801099a:	6811      	ldr	r1, [r2, #0]
 801099c:	4603      	mov	r3, r0
 801099e:	b909      	cbnz	r1, 80109a4 <_sbrk+0xc>
 80109a0:	4903      	ldr	r1, [pc, #12]	; (80109b0 <_sbrk+0x18>)
 80109a2:	6011      	str	r1, [r2, #0]
 80109a4:	6810      	ldr	r0, [r2, #0]
 80109a6:	4403      	add	r3, r0
 80109a8:	6013      	str	r3, [r2, #0]
 80109aa:	4770      	bx	lr
 80109ac:	2407f650 	.word	0x2407f650
 80109b0:	2407f658 	.word	0x2407f658

080109b4 <_init>:
 80109b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109b6:	bf00      	nop
 80109b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ba:	bc08      	pop	{r3}
 80109bc:	469e      	mov	lr, r3
 80109be:	4770      	bx	lr

080109c0 <_fini>:
 80109c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c2:	bf00      	nop
 80109c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109c6:	bc08      	pop	{r3}
 80109c8:	469e      	mov	lr, r3
 80109ca:	4770      	bx	lr
