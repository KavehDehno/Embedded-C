
FreeRTOS_Templete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  24000000  08007030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00078750  24000018  08007048  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24078768  08007048  00028768  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020435  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000036c3  00000000  00000000  0004047b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a00  00000000  00000000  00043b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001858  00000000  00000000  00045540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000384a0  00000000  00000000  00046d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d5e0  00000000  00000000  0007f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175910  00000000  00000000  0009c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00212128  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006fb8  00000000  00000000  00212178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000018 	.word	0x24000018
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006f34 	.word	0x08006f34

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400001c 	.word	0x2400001c
 80002dc:	08006f34 	.word	0x08006f34

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	240001a0 	.word	0x240001a0

08000374 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	689a      	ldr	r2, [r3, #8]
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	601a      	str	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	6892      	ldr	r2, [r2, #8]
 80003d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	6852      	ldr	r2, [r2, #4]
 80003dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d103      	bne.n	80003f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689a      	ldr	r2, [r3, #8]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	1e5a      	subs	r2, r3, #1
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	681b      	ldr	r3, [r3, #0]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000416:	f000 f9ab 	bl	8000770 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <xTaskGetTickCountFromISR+0x20>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000424:	683b      	ldr	r3, [r7, #0]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	240000cc 	.word	0x240000cc

08000434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800043e:	4b42      	ldr	r3, [pc, #264]	; (8000548 <xTaskIncrementTick+0x114>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d175      	bne.n	8000532 <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000446:	4b41      	ldr	r3, [pc, #260]	; (800054c <xTaskIncrementTick+0x118>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800044e:	4a3f      	ldr	r2, [pc, #252]	; (800054c <xTaskIncrementTick+0x118>)
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d122      	bne.n	80004a0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800045a:	4b3d      	ldr	r3, [pc, #244]	; (8000550 <xTaskIncrementTick+0x11c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00c      	beq.n	800047e <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000468:	b672      	cpsid	i
 800046a:	f383 8811 	msr	BASEPRI, r3
 800046e:	f3bf 8f6f 	isb	sy
 8000472:	f3bf 8f4f 	dsb	sy
 8000476:	b662      	cpsie	i
 8000478:	603b      	str	r3, [r7, #0]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800047a:	bf00      	nop
 800047c:	e7fe      	b.n	800047c <xTaskIncrementTick+0x48>
 800047e:	4b34      	ldr	r3, [pc, #208]	; (8000550 <xTaskIncrementTick+0x11c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4b33      	ldr	r3, [pc, #204]	; (8000554 <xTaskIncrementTick+0x120>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a31      	ldr	r2, [pc, #196]	; (8000550 <xTaskIncrementTick+0x11c>)
 800048a:	6013      	str	r3, [r2, #0]
 800048c:	4a31      	ldr	r2, [pc, #196]	; (8000554 <xTaskIncrementTick+0x120>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <xTaskIncrementTick+0x124>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3301      	adds	r3, #1
 8000498:	4a2f      	ldr	r2, [pc, #188]	; (8000558 <xTaskIncrementTick+0x124>)
 800049a:	6013      	str	r3, [r2, #0]
 800049c:	f000 f8d2 	bl	8000644 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80004a0:	4b2e      	ldr	r3, [pc, #184]	; (800055c <xTaskIncrementTick+0x128>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	693a      	ldr	r2, [r7, #16]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d348      	bcc.n	800053c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004aa:	4b29      	ldr	r3, [pc, #164]	; (8000550 <xTaskIncrementTick+0x11c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d104      	bne.n	80004be <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004b4:	4b29      	ldr	r3, [pc, #164]	; (800055c <xTaskIncrementTick+0x128>)
 80004b6:	f04f 32ff 	mov.w	r2, #4294967295
 80004ba:	601a      	str	r2, [r3, #0]
                    break;
 80004bc:	e03e      	b.n	800053c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80004be:	4b24      	ldr	r3, [pc, #144]	; (8000550 <xTaskIncrementTick+0x11c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d203      	bcs.n	80004de <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80004d6:	4a21      	ldr	r2, [pc, #132]	; (800055c <xTaskIncrementTick+0x128>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80004dc:	e02e      	b.n	800053c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	3304      	adds	r3, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff ff6a 	bl	80003bc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d004      	beq.n	80004fa <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	3318      	adds	r3, #24
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff61 	bl	80003bc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 fead 	bl	800225c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	2201      	movs	r2, #1
 8000508:	409a      	lsls	r2, r3
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <xTaskIncrementTick+0x12c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4313      	orrs	r3, r2
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <xTaskIncrementTick+0x12c>)
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000518:	4613      	mov	r3, r2
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	4413      	add	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <xTaskIncrementTick+0x130>)
 8000522:	441a      	add	r2, r3
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	3304      	adds	r3, #4
 8000528:	4619      	mov	r1, r3
 800052a:	4610      	mov	r0, r2
 800052c:	f7ff ff22 	bl	8000374 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000530:	e7bb      	b.n	80004aa <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <xTaskIncrementTick+0x134>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <xTaskIncrementTick+0x134>)
 800053a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800053c:	697b      	ldr	r3, [r7, #20]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	240000e8 	.word	0x240000e8
 800054c:	240000cc 	.word	0x240000cc
 8000550:	240000c4 	.word	0x240000c4
 8000554:	240000c8 	.word	0x240000c8
 8000558:	240000dc 	.word	0x240000dc
 800055c:	240000e0 	.word	0x240000e0
 8000560:	240000d0 	.word	0x240000d0
 8000564:	24000038 	.word	0x24000038
 8000568:	240000d4 	.word	0x240000d4

0800056c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000572:	4b2e      	ldr	r3, [pc, #184]	; (800062c <vTaskSwitchContext+0xc0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d003      	beq.n	8000582 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <vTaskSwitchContext+0xc4>)
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000580:	e04f      	b.n	8000622 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <vTaskSwitchContext+0xc4>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <vTaskSwitchContext+0xc8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	fab3 f383 	clz	r3, r3
 8000594:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000596:	7afb      	ldrb	r3, [r7, #11]
 8000598:	f1c3 031f 	rsb	r3, r3, #31
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <vTaskSwitchContext+0xcc>)
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	4613      	mov	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d10c      	bne.n	80005cc <vTaskSwitchContext+0x60>
        __asm volatile
 80005b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b6:	b672      	cpsid	i
 80005b8:	f383 8811 	msr	BASEPRI, r3
 80005bc:	f3bf 8f6f 	isb	sy
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	b662      	cpsie	i
 80005c6:	607b      	str	r3, [r7, #4]
    }
 80005c8:	bf00      	nop
 80005ca:	e7fe      	b.n	80005ca <vTaskSwitchContext+0x5e>
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	4613      	mov	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <vTaskSwitchContext+0xcc>)
 80005d8:	4413      	add	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	685a      	ldr	r2, [r3, #4]
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	3308      	adds	r3, #8
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d104      	bne.n	80005fc <vTaskSwitchContext+0x90>
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <vTaskSwitchContext+0xd0>)
 8000604:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <vTaskSwitchContext+0xd0>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <vTaskSwitchContext+0xd4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	d102      	bne.n	8000618 <vTaskSwitchContext+0xac>
 8000612:	f001 fdc5 	bl	80021a0 <SEGGER_SYSVIEW_OnIdle>
}
 8000616:	e004      	b.n	8000622 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <vTaskSwitchContext+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fddb 	bl	80021d8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	240000e8 	.word	0x240000e8
 8000630:	240000d8 	.word	0x240000d8
 8000634:	240000d0 	.word	0x240000d0
 8000638:	24000038 	.word	0x24000038
 800063c:	24000034 	.word	0x24000034
 8000640:	240000e4 	.word	0x240000e4

08000644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <prvResetNextTaskUnblockTime+0x30>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d104      	bne.n	800065c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <prvResetNextTaskUnblockTime+0x34>)
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800065a:	e005      	b.n	8000668 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <prvResetNextTaskUnblockTime+0x30>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <prvResetNextTaskUnblockTime+0x34>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	240000c4 	.word	0x240000c4
 8000678:	240000e0 	.word	0x240000e0
 800067c:	00000000 	.word	0x00000000

08000680 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <pxCurrentTCBConst2>)
 8000682:	6819      	ldr	r1, [r3, #0]
 8000684:	6808      	ldr	r0, [r1, #0]
 8000686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800068a:	f380 8809 	msr	PSP, r0
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f04f 0000 	mov.w	r0, #0
 8000696:	f380 8811 	msr	BASEPRI, r0
 800069a:	4770      	bx	lr
 800069c:	f3af 8000 	nop.w

080006a0 <pxCurrentTCBConst2>:
 80006a0:	24000034 	.word	0x24000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
	...

080006b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80006b0:	f3ef 8009 	mrs	r0, PSP
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <pxCurrentTCBConst>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	f01e 0f10 	tst.w	lr, #16
 80006c0:	bf08      	it	eq
 80006c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80006c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ca:	6010      	str	r0, [r2, #0]
 80006cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80006d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80006d4:	b672      	cpsid	i
 80006d6:	f380 8811 	msr	BASEPRI, r0
 80006da:	f3bf 8f4f 	dsb	sy
 80006de:	f3bf 8f6f 	isb	sy
 80006e2:	b662      	cpsie	i
 80006e4:	f7ff ff42 	bl	800056c <vTaskSwitchContext>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	f380 8811 	msr	BASEPRI, r0
 80006f0:	bc09      	pop	{r0, r3}
 80006f2:	6819      	ldr	r1, [r3, #0]
 80006f4:	6808      	ldr	r0, [r1, #0]
 80006f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006fa:	f01e 0f10 	tst.w	lr, #16
 80006fe:	bf08      	it	eq
 8000700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000704:	f380 8809 	msr	PSP, r0
 8000708:	f3bf 8f6f 	isb	sy
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop

08000710 <pxCurrentTCBConst>:
 8000710:	24000034 	.word	0x24000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop

08000718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
        __asm volatile
 800071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000722:	b672      	cpsid	i
 8000724:	f383 8811 	msr	BASEPRI, r3
 8000728:	f3bf 8f6f 	isb	sy
 800072c:	f3bf 8f4f 	dsb	sy
 8000730:	b662      	cpsie	i
 8000732:	607b      	str	r3, [r7, #4]
    }
 8000734:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8000736:	f001 fcb9 	bl	80020ac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800073a:	f7ff fe7b 	bl	8000434 <xTaskIncrementTick>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d006      	beq.n	8000752 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8000744:	f001 fd10 	bl	8002168 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <SysTick_Handler+0x54>)
 800074a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	e001      	b.n	8000756 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8000752:	f001 fced 	bl	8002130 <SEGGER_SYSVIEW_RecordExitISR>
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000760:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000ed04 	.word	0xe000ed04

08000770 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000776:	f3ef 8305 	mrs	r3, IPSR
 800077a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b0f      	cmp	r3, #15
 8000780:	d916      	bls.n	80007b0 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000782:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <vPortValidateInterruptPriority+0x78>)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <vPortValidateInterruptPriority+0x7c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	7afa      	ldrb	r2, [r7, #11]
 8000792:	429a      	cmp	r2, r3
 8000794:	d20c      	bcs.n	80007b0 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8000796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079a:	b672      	cpsid	i
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	b662      	cpsie	i
 80007aa:	607b      	str	r3, [r7, #4]
    }
 80007ac:	bf00      	nop
 80007ae:	e7fe      	b.n	80007ae <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <vPortValidateInterruptPriority+0x80>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <vPortValidateInterruptPriority+0x84>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d90c      	bls.n	80007da <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 80007c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c4:	b672      	cpsid	i
 80007c6:	f383 8811 	msr	BASEPRI, r3
 80007ca:	f3bf 8f6f 	isb	sy
 80007ce:	f3bf 8f4f 	dsb	sy
 80007d2:	b662      	cpsie	i
 80007d4:	603b      	str	r3, [r7, #0]
    }
 80007d6:	bf00      	nop
 80007d8:	e7fe      	b.n	80007d8 <vPortValidateInterruptPriority+0x68>
    }
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e3f0 	.word	0xe000e3f0
 80007ec:	240000ec 	.word	0x240000ec
 80007f0:	e000ed0c 	.word	0xe000ed0c
 80007f4:	240000f0 	.word	0x240000f0

080007f8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <_cbSendSystemDesc+0x14>)
 80007fe:	f001 fbff 	bl	8002000 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <_cbSendSystemDesc+0x18>)
 8000804:	f001 fbfc 	bl	8002000 <SEGGER_SYSVIEW_SendSysDesc>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08006f4c 	.word	0x08006f4c
 8000810:	08006f7c 	.word	0x08006f7c

08000814 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <SEGGER_SYSVIEW_Conf+0x20>)
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SEGGER_SYSVIEW_Conf+0x20>)
 800081e:	6819      	ldr	r1, [r3, #0]
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SEGGER_SYSVIEW_Conf+0x24>)
 8000822:	4a06      	ldr	r2, [pc, #24]	; (800083c <SEGGER_SYSVIEW_Conf+0x28>)
 8000824:	f001 f86e 	bl	8001904 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8000828:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 800082c:	f001 f8b0 	bl	8001990 <SEGGER_SYSVIEW_SetRAMBase>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	24000008 	.word	0x24000008
 8000838:	080007f9 	.word	0x080007f9
 800083c:	08006fec 	.word	0x08006fec

08000840 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e033      	b.n	80008b4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800084c:	491e      	ldr	r1, [pc, #120]	; (80008c8 <_cbSendTaskList+0x88>)
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	440b      	add	r3, r1
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	491a      	ldr	r1, [pc, #104]	; (80008c8 <_cbSendTaskList+0x88>)
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	440b      	add	r3, r1
 800086a:	3304      	adds	r3, #4
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	4c16      	ldr	r4, [pc, #88]	; (80008c8 <_cbSendTaskList+0x88>)
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4613      	mov	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4423      	add	r3, r4
 800087c:	3308      	adds	r3, #8
 800087e:	681c      	ldr	r4, [r3, #0]
 8000880:	4d11      	ldr	r5, [pc, #68]	; (80008c8 <_cbSendTaskList+0x88>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	442b      	add	r3, r5
 800088e:	330c      	adds	r3, #12
 8000890:	681d      	ldr	r5, [r3, #0]
 8000892:	4e0d      	ldr	r6, [pc, #52]	; (80008c8 <_cbSendTaskList+0x88>)
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4433      	add	r3, r6
 80008a0:	3310      	adds	r3, #16
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	462b      	mov	r3, r5
 80008a8:	4622      	mov	r2, r4
 80008aa:	f000 f854 	bl	8000956 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <_cbSendTaskList+0x8c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d3c6      	bcc.n	800084c <_cbSendTaskList+0xc>
  }
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c8:	240000f4 	.word	0x240000f4
 80008cc:	24000194 	.word	0x24000194

080008d0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80008d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80008d8:	f7ff fd9a 	bl	8000410 <xTaskGetTickCountFromISR>
 80008dc:	4603      	mov	r3, r0
 80008de:	2200      	movs	r2, #0
 80008e0:	469a      	mov	sl, r3
 80008e2:	4693      	mov	fp, r2
 80008e4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80008e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008ec:	4602      	mov	r2, r0
 80008ee:	460b      	mov	r3, r1
 80008f0:	f04f 0a00 	mov.w	sl, #0
 80008f4:	f04f 0b00 	mov.w	fp, #0
 80008f8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80008fc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000900:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000904:	4652      	mov	r2, sl
 8000906:	465b      	mov	r3, fp
 8000908:	1a14      	subs	r4, r2, r0
 800090a:	eb63 0501 	sbc.w	r5, r3, r1
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	f04f 0300 	mov.w	r3, #0
 8000916:	00ab      	lsls	r3, r5, #2
 8000918:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800091c:	00a2      	lsls	r2, r4, #2
 800091e:	4614      	mov	r4, r2
 8000920:	461d      	mov	r5, r3
 8000922:	eb14 0800 	adds.w	r8, r4, r0
 8000926:	eb45 0901 	adc.w	r9, r5, r1
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	f04f 0300 	mov.w	r3, #0
 8000932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800093a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800093e:	4690      	mov	r8, r2
 8000940:	4699      	mov	r9, r3
 8000942:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8000946:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000956 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8000956:	b580      	push	{r7, lr}
 8000958:	b08a      	sub	sp, #40	; 0x28
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2214      	movs	r2, #20
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f006 fad9 	bl	8006f24 <memset>
  TaskInfo.TaskID     = TaskID;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8000982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fa40 	bl	8001e10 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	db0b      	blt.n	80009c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	f003 021f 	and.w	r2, r3, #31
 80009b0:	4907      	ldr	r1, [pc, #28]	; (80009d0 <__NVIC_EnableIRQ+0x38>)
 80009b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b6:	095b      	lsrs	r3, r3, #5
 80009b8:	2001      	movs	r0, #1
 80009ba:	fa00 f202 	lsl.w	r2, r0, r2
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8000a2e:	f001 fd33 	bl	8002498 <SEGGER_SYSVIEW_IsStarted>
 8000a32:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d101      	bne.n	8000a3e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8000a3a:	f001 f86d 	bl	8001b18 <SEGGER_SYSVIEW_Start>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <_cbOnUARTRx+0x3c>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d806      	bhi.n	8000a68 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <_cbOnUARTRx+0x3c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_cbOnUARTRx+0x3c>)
 8000a64:	701a      	strb	r2, [r3, #0]
    goto Done;
 8000a66:	e009      	b.n	8000a7c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8000a68:	f7ff ffde 	bl	8000a28 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <_cbOnUARTRx+0x3c>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	2201      	movs	r2, #1
 8000a76:	4619      	mov	r1, r3
 8000a78:	f000 fb9e 	bl	80011b8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8000a7c:	bf00      	nop
}
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	24000000 	.word	0x24000000

08000a88 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <_cbOnUARTTx+0x5c>)
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d80f      	bhi.n	8000ab8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <_cbOnUARTTx+0x5c>)
 8000a9a:	785b      	ldrb	r3, [r3, #1]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <_cbOnUARTTx+0x60>)
 8000aa0:	5c9a      	ldrb	r2, [r3, r2]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <_cbOnUARTTx+0x5c>)
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <_cbOnUARTTx+0x5c>)
 8000ab0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8000ab6:	e00f      	b.n	8000ad8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <_cbOnUARTTx+0x5c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2201      	movs	r2, #1
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fa1d 	bl	8000f00 <SEGGER_RTT_ReadUpBufferNoLock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	da02      	bge.n	8000ad6 <_cbOnUARTTx+0x4e>
    r = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e000      	b.n	8000ad8 <_cbOnUARTTx+0x50>
  }
Done:
 8000ad6:	bf00      	nop
  return r;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000000 	.word	0x24000000
 8000ae8:	08006ff4 	.word	0x08006ff4

08000aec <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <SEGGER_UART_init+0x1c>)
 8000af6:	4905      	ldr	r1, [pc, #20]	; (8000b0c <SEGGER_UART_init+0x20>)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f865 	bl	8000bc8 <HIF_UART_Init>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08000a49 	.word	0x08000a49
 8000b0c:	08000a89 	.word	0x08000a89

08000b10 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <USART2_IRQHandler+0x80>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0320 	and.w	r3, r3, #32
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d011      	beq.n	8000b4a <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <USART2_IRQHandler+0x84>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f003 030b 	and.w	r3, r3, #11
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d108      	bne.n	8000b4a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <USART2_IRQHandler+0x88>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <USART2_IRQHandler+0x88>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	4610      	mov	r0, r2
 8000b48:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d01a      	beq.n	8000b8a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <USART2_IRQHandler+0x8c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d015      	beq.n	8000b88 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <USART2_IRQHandler+0x8c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	1dfa      	adds	r2, r7, #7
 8000b62:	4610      	mov	r0, r2
 8000b64:	4798      	blx	r3
 8000b66:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d106      	bne.n	8000b7c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <USART2_IRQHandler+0x90>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <USART2_IRQHandler+0x90>)
 8000b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e006      	b.n	8000b8a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <USART2_IRQHandler+0x80>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8000b80:	79fa      	ldrb	r2, [r7, #7]
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <USART2_IRQHandler+0x94>)
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e000      	b.n	8000b8a <USART2_IRQHandler+0x7a>
      return;
 8000b88:	bf00      	nop
    }
  }
}
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	4000441c 	.word	0x4000441c
 8000b94:	40004424 	.word	0x40004424
 8000b98:	24000198 	.word	0x24000198
 8000b9c:	2400019c 	.word	0x2400019c
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40004428 	.word	0x40004428

08000ba8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8000bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8000bd4:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <HIF_UART_Init+0xc8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a2d      	ldr	r2, [pc, #180]	; (8000c90 <HIF_UART_Init+0xc8>)
 8000bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bde:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <HIF_UART_Init+0xcc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <HIF_UART_Init+0xcc>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HIF_UART_Init+0xd0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000bf8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000c00:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8000c02:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <HIF_UART_Init+0xd0>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <HIF_UART_Init+0xd4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c14:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HIF_UART_Init+0xd4>)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HIF_UART_Init+0xd8>)
 8000c26:	f248 022d 	movw	r2, #32813	; 0x802d
 8000c2a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HIF_UART_Init+0xdc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8000c32:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HIF_UART_Init+0xe0>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HIF_UART_Init+0xe4>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	085b      	lsrs	r3, r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c56:	d302      	bcc.n	8000c5e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8000c58:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c5c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	011b      	lsls	r3, r3, #4
 8000c68:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <HIF_UART_Init+0xe8>)
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8000c6e:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <HIF_UART_Init+0xec>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8000c74:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HIF_UART_Init+0xf0>)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8000c7a:	2106      	movs	r1, #6
 8000c7c:	2026      	movs	r0, #38	; 0x26
 8000c7e:	f7ff fea9 	bl	80009d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8000c82:	2026      	movs	r0, #38	; 0x26
 8000c84:	f7ff fe88 	bl	8000998 <__NVIC_EnableIRQ>
}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	580244e8 	.word	0x580244e8
 8000c94:	580244e0 	.word	0x580244e0
 8000c98:	58020020 	.word	0x58020020
 8000c9c:	58020000 	.word	0x58020000
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	40004404 	.word	0x40004404
 8000ca8:	40004408 	.word	0x40004408
 8000cac:	0e4e1c00 	.word	0x0e4e1c00
 8000cb0:	4000440c 	.word	0x4000440c
 8000cb4:	24000198 	.word	0x24000198
 8000cb8:	2400019c 	.word	0x2400019c

08000cbc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <_DoInit+0xa0>)
 8000cc4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000cc6:	22a8      	movs	r2, #168	; 0xa8
 8000cc8:	2100      	movs	r1, #0
 8000cca:	6838      	ldr	r0, [r7, #0]
 8000ccc:	f006 f92a 	bl	8006f24 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2203      	movs	r2, #3
 8000cda:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	4a20      	ldr	r2, [pc, #128]	; (8000d60 <_DoInit+0xa4>)
 8000ce0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <_DoInit+0xa8>)
 8000ce6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <_DoInit+0xa4>)
 8000d06:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <_DoInit+0xac>)
 8000d0c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2210      	movs	r2, #16
 8000d12:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000d26:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	e00c      	b.n	8000d4a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f1c3 030f 	rsb	r3, r3, #15
 8000d36:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <_DoInit+0xb0>)
 8000d38:	5cd1      	ldrb	r1, [r2, r3]
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	460a      	mov	r2, r1
 8000d42:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3301      	adds	r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d9ef      	bls.n	8000d30 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000d50:	f3bf 8f5f 	dmb	sy
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	240001a0 	.word	0x240001a0
 8000d60:	08006f8c 	.word	0x08006f8c
 8000d64:	24000248 	.word	0x24000248
 8000d68:	24000648 	.word	0x24000648
 8000d6c:	08006ff8 	.word	0x08006ff8

08000d70 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d905      	bls.n	8000da0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9e:	e007      	b.n	8000db0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	69b9      	ldr	r1, [r7, #24]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	1acb      	subs	r3, r1, r3
 8000daa:	4413      	add	r3, r2
 8000dac:	3b01      	subs	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	bf28      	it	cs
 8000dbe:	4613      	movcs	r3, r2
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	bf28      	it	cs
 8000dca:	4613      	movcs	r3, r2
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	6978      	ldr	r0, [r7, #20]
 8000dde:	f006 f893 	bl	8006f08 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000de2:	6a3a      	ldr	r2, [r7, #32]
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	4413      	add	r3, r2
 8000de8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	4413      	add	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	4413      	add	r3, r2
 8000e00:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d101      	bne.n	8000e10 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000e10:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1b2      	bne.n	8000d86 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000e20:	6a3b      	ldr	r3, [r7, #32]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b088      	sub	sp, #32
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d911      	bls.n	8000e72 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	4413      	add	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6938      	ldr	r0, [r7, #16]
 8000e5e:	f006 f853 	bl	8006f08 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000e62:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	441a      	add	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000e70:	e01f      	b.n	8000eb2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	6938      	ldr	r0, [r7, #16]
 8000e86:	f006 f83f 	bl	8006f08 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6938      	ldr	r0, [r7, #16]
 8000ea4:	f006 f830 	bl	8006f08 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000ea8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	60da      	str	r2, [r3, #12]
}
 8000eb2:	bf00      	nop
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000eba:	b480      	push	{r7}
 8000ebc:	b087      	sub	sp, #28
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d808      	bhi.n	8000ee8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	1ad2      	subs	r2, r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e004      	b.n	8000ef2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000ef2:	697b      	ldr	r3, [r7, #20]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8000f1a:	f7ff fecf 	bl	8000cbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4a37      	ldr	r2, [pc, #220]	; (8001008 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8000f2c:	4413      	add	r3, r2
 8000f2e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d92b      	bls.n	8000fa4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	bf28      	it	cs
 8000f5e:	4613      	movcs	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f68:	4413      	add	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	6939      	ldr	r1, [r7, #16]
 8000f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f72:	f005 ffc9 	bl	8006f08 <memcpy>
    NumBytesRead += NumBytesRem;
 8000f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d101      	bne.n	8000fa4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	bf28      	it	cs
 8000fb4:	4613      	movcs	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	4413      	add	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	6939      	ldr	r1, [r7, #16]
 8000fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fce:	f005 ff9b 	bl	8006f08 <memcpy>
    NumBytesRead += NumBytesRem;
 8000fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	4413      	add	r3, r2
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	4413      	add	r3, r2
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ffc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001000:	4618      	mov	r0, r3
 8001002:	3730      	adds	r7, #48	; 0x30
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	240001a0 	.word	0x240001a0

0800100c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001018:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <SEGGER_RTT_ReadNoLock+0x108>)
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <SEGGER_RTT_ReadNoLock+0x1e>
 8001026:	f7ff fe49 	bl	8000cbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	3360      	adds	r3, #96	; 0x60
 8001036:	4a37      	ldr	r2, [pc, #220]	; (8001114 <SEGGER_RTT_ReadNoLock+0x108>)
 8001038:	4413      	add	r3, r2
 800103a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	429a      	cmp	r2, r3
 8001056:	d92b      	bls.n	80010b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4293      	cmp	r3, r2
 8001068:	bf28      	it	cs
 800106a:	4613      	movcs	r3, r2
 800106c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001074:	4413      	add	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	6939      	ldr	r1, [r7, #16]
 800107c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800107e:	f005 ff43 	bl	8006f08 <memcpy>
    NumBytesRead += NumBytesRem;
 8001082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	4413      	add	r3, r2
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800108a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	4413      	add	r3, r2
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800109a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	4413      	add	r3, r2
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d101      	bne.n	80010b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4293      	cmp	r3, r2
 80010be:	bf28      	it	cs
 80010c0:	4613      	movcs	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d019      	beq.n	80010fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d0:	4413      	add	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	6939      	ldr	r1, [r7, #16]
 80010d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010da:	f005 ff15 	bl	8006f08 <memcpy>
    NumBytesRead += NumBytesRem;
 80010de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	4413      	add	r3, r2
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80010e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4413      	add	r3, r2
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80010f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	4413      	add	r3, r2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001108:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800110c:	4618      	mov	r0, r3
 800110e:	3730      	adds	r7, #48	; 0x30
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	240001a0 	.word	0x240001a0

08001118 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	3360      	adds	r3, #96	; 0x60
 8001134:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8001136:	4413      	add	r3, r2
 8001138:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d029      	beq.n	8001196 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8001142:	2b02      	cmp	r3, #2
 8001144:	d82e      	bhi.n	80011a4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d013      	beq.n	8001176 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800114e:	e029      	b.n	80011a4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f7ff feb2 	bl	8000eba <_GetAvailWriteSpace>
 8001156:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	d202      	bcs.n	8001166 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001164:	e021      	b.n	80011aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	69b9      	ldr	r1, [r7, #24]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff fe5b 	bl	8000e2a <_WriteNoCheck>
    break;
 8001174:	e019      	b.n	80011aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff fe9f 	bl	8000eba <_GetAvailWriteSpace>
 800117c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4293      	cmp	r3, r2
 8001184:	bf28      	it	cs
 8001186:	4613      	movcs	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	69b9      	ldr	r1, [r7, #24]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff fe4b 	bl	8000e2a <_WriteNoCheck>
    break;
 8001194:	e009      	b.n	80011aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff fde8 	bl	8000d70 <_WriteBlocking>
 80011a0:	61f8      	str	r0, [r7, #28]
    break;
 80011a2:	e002      	b.n	80011aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
    break;
 80011a8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80011aa:	69fb      	ldr	r3, [r7, #28]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	240001a0 	.word	0x240001a0

080011b8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80011d2:	f7ff fd73 	bl	8000cbc <_DoInit>
  SEGGER_RTT_LOCK();
 80011d6:	f3ef 8311 	mrs	r3, BASEPRI
 80011da:	f04f 0120 	mov.w	r1, #32
 80011de:	f381 8811 	msr	BASEPRI, r1
 80011e2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff ff95 	bl	8001118 <SEGGER_RTT_WriteDownBufferNoLock>
 80011ee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80011f6:	697b      	ldr	r3, [r7, #20]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	240001a0 	.word	0x240001a0

08001204 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <SEGGER_RTT_AllocUpBuffer+0x20>
 8001220:	f7ff fd4c 	bl	8000cbc <_DoInit>
  SEGGER_RTT_LOCK();
 8001224:	f3ef 8311 	mrs	r3, BASEPRI
 8001228:	f04f 0120 	mov.w	r1, #32
 800122c:	f381 8811 	msr	BASEPRI, r1
 8001230:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8001234:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	429a      	cmp	r2, r3
 8001260:	dbeb      	blt.n	800123a <SEGGER_RTT_AllocUpBuffer+0x36>
 8001262:	e000      	b.n	8001266 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8001264:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	429a      	cmp	r2, r3
 800126e:	da3f      	bge.n	80012f0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8001270:	6939      	ldr	r1, [r7, #16]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	3304      	adds	r3, #4
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800129a:	6939      	ldr	r1, [r7, #16]
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	440b      	add	r3, r1
 80012a8:	3320      	adds	r3, #32
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80012ae:	6939      	ldr	r1, [r7, #16]
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	440b      	add	r3, r1
 80012bc:	3328      	adds	r3, #40	; 0x28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	3324      	adds	r3, #36	; 0x24
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	332c      	adds	r3, #44	; 0x2c
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80012ea:	f3bf 8f5f 	dmb	sy
 80012ee:	e002      	b.n	80012f6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80012fc:	69fb      	ldr	r3, [r7, #28]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	240001a0 	.word	0x240001a0

0800130c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800131c:	623b      	str	r3, [r7, #32]
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8001328:	f7ff fcc8 	bl	8000cbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800132e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d82c      	bhi.n	8001390 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8001336:	f3ef 8311 	mrs	r3, BASEPRI
 800133a:	f04f 0120 	mov.w	r1, #32
 800133e:	f381 8811 	msr	BASEPRI, r1
 8001342:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	3360      	adds	r3, #96	; 0x60
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	4413      	add	r3, r2
 8001354:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00e      	beq.n	800137a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800137e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001380:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
 800138e:	e002      	b.n	8001396 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001398:	4618      	mov	r0, r3
 800139a:	3728      	adds	r7, #40	; 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	240001a0 	.word	0x240001a0

080013a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00f      	beq.n	80013da <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80013ba:	e002      	b.n	80013c2 <_EncodeStr+0x1e>
      Len++;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	3301      	adds	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f6      	bne.n	80013bc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d901      	bls.n	80013da <_EncodeStr+0x36>
      Len = Limit;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	2bfe      	cmp	r3, #254	; 0xfe
 80013de:	d806      	bhi.n	80013ee <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60fa      	str	r2, [r7, #12]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e011      	b.n	8001412 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	60fa      	str	r2, [r7, #12]
 80013f4:	22ff      	movs	r2, #255	; 0xff
 80013f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60fa      	str	r2, [r7, #12]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	0a19      	lsrs	r1, r3, #8
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60fa      	str	r2, [r7, #12]
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001416:	e00a      	b.n	800142e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	1c53      	adds	r3, r2, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1c59      	adds	r1, r3, #1
 8001422:	60f9      	str	r1, [r7, #12]
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	701a      	strb	r2, [r3, #0]
    n++;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3f0      	bcc.n	8001418 <_EncodeStr+0x74>
  }
  return pPayload;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3307      	adds	r3, #7
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001462:	4b35      	ldr	r3, [pc, #212]	; (8001538 <_HandleIncomingPacket+0xdc>)
 8001464:	7e1b      	ldrb	r3, [r3, #24]
 8001466:	4618      	mov	r0, r3
 8001468:	1cfb      	adds	r3, r7, #3
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fdcd 	bl	800100c <SEGGER_RTT_ReadNoLock>
 8001472:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d052      	beq.n	8001520 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2b80      	cmp	r3, #128	; 0x80
 800147e:	d031      	beq.n	80014e4 <_HandleIncomingPacket+0x88>
 8001480:	2b80      	cmp	r3, #128	; 0x80
 8001482:	dc40      	bgt.n	8001506 <_HandleIncomingPacket+0xaa>
 8001484:	2b07      	cmp	r3, #7
 8001486:	dc15      	bgt.n	80014b4 <_HandleIncomingPacket+0x58>
 8001488:	2b00      	cmp	r3, #0
 800148a:	dd3c      	ble.n	8001506 <_HandleIncomingPacket+0xaa>
 800148c:	3b01      	subs	r3, #1
 800148e:	2b06      	cmp	r3, #6
 8001490:	d839      	bhi.n	8001506 <_HandleIncomingPacket+0xaa>
 8001492:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <_HandleIncomingPacket+0x3c>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	080014bb 	.word	0x080014bb
 800149c:	080014c1 	.word	0x080014c1
 80014a0:	080014c7 	.word	0x080014c7
 80014a4:	080014cd 	.word	0x080014cd
 80014a8:	080014d3 	.word	0x080014d3
 80014ac:	080014d9 	.word	0x080014d9
 80014b0:	080014df 	.word	0x080014df
 80014b4:	2b7f      	cmp	r3, #127	; 0x7f
 80014b6:	d035      	beq.n	8001524 <_HandleIncomingPacket+0xc8>
 80014b8:	e025      	b.n	8001506 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80014ba:	f000 fb2d 	bl	8001b18 <SEGGER_SYSVIEW_Start>
      break;
 80014be:	e036      	b.n	800152e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80014c0:	f000 fbe6 	bl	8001c90 <SEGGER_SYSVIEW_Stop>
      break;
 80014c4:	e033      	b.n	800152e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80014c6:	f000 fdbf 	bl	8002048 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80014ca:	e030      	b.n	800152e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80014cc:	f000 fd84 	bl	8001fd8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80014d0:	e02d      	b.n	800152e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80014d2:	f000 fc03 	bl	8001cdc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80014d6:	e02a      	b.n	800152e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80014d8:	f000 ffa0 	bl	800241c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80014dc:	e027      	b.n	800152e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80014de:	f000 ff7f 	bl	80023e0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80014e2:	e024      	b.n	800152e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <_HandleIncomingPacket+0xdc>)
 80014e6:	7e1b      	ldrb	r3, [r3, #24]
 80014e8:	4618      	mov	r0, r3
 80014ea:	1cfb      	adds	r3, r7, #3
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fd8c 	bl	800100c <SEGGER_RTT_ReadNoLock>
 80014f4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 feee 	bl	80022e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001504:	e010      	b.n	8001528 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	da0e      	bge.n	800152c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <_HandleIncomingPacket+0xdc>)
 8001510:	7e1b      	ldrb	r3, [r3, #24]
 8001512:	4618      	mov	r0, r3
 8001514:	1cfb      	adds	r3, r7, #3
 8001516:	2201      	movs	r2, #1
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fd77 	bl	800100c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800151e:	e005      	b.n	800152c <_HandleIncomingPacket+0xd0>
    }
  }
 8001520:	bf00      	nop
 8001522:	e004      	b.n	800152e <_HandleIncomingPacket+0xd2>
      break;
 8001524:	bf00      	nop
 8001526:	e002      	b.n	800152e <_HandleIncomingPacket+0xd2>
      break;
 8001528:	bf00      	nop
 800152a:	e000      	b.n	800152e <_HandleIncomingPacket+0xd2>
      break;
 800152c:	bf00      	nop
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	24078260 	.word	0x24078260

0800153c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001542:	2301      	movs	r3, #1
 8001544:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <_TrySendOverflowPacket+0xe0>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
 8001556:	e00b      	b.n	8001570 <_TrySendOverflowPacket+0x34>
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	b2da      	uxtb	r2, r3
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	1c59      	adds	r1, r3, #1
 8001560:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	09db      	lsrs	r3, r3, #7
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	2b7f      	cmp	r3, #127	; 0x7f
 8001574:	d8f0      	bhi.n	8001558 <_TrySendOverflowPacket+0x1c>
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800157c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001584:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <_TrySendOverflowPacket+0xe4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <_TrySendOverflowPacket+0xe0>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	623b      	str	r3, [r7, #32]
 800159e:	e00b      	b.n	80015b8 <_TrySendOverflowPacket+0x7c>
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	1c59      	adds	r1, r3, #1
 80015a8:	6279      	str	r1, [r7, #36]	; 0x24
 80015aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	09db      	lsrs	r3, r3, #7
 80015b6:	623b      	str	r3, [r7, #32]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	2b7f      	cmp	r3, #127	; 0x7f
 80015bc:	d8f0      	bhi.n	80015a0 <_TrySendOverflowPacket+0x64>
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	6a3a      	ldr	r2, [r7, #32]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <_TrySendOverflowPacket+0xe0>)
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	4618      	mov	r0, r3
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	f7fe fe7e 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80015e4:	4603      	mov	r3, r0
 80015e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80015e8:	f7ff fade 	bl	8000ba8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <_TrySendOverflowPacket+0xe0>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_TrySendOverflowPacket+0xe0>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <_TrySendOverflowPacket+0xe0>)
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e004      	b.n	8001610 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <_TrySendOverflowPacket+0xe0>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <_TrySendOverflowPacket+0xe0>)
 800160e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001610:	693b      	ldr	r3, [r7, #16]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3730      	adds	r7, #48	; 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	24078260 	.word	0x24078260
 8001620:	e0001004 	.word	0xe0001004

08001624 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001630:	4b96      	ldr	r3, [pc, #600]	; (800188c <_SendPacket+0x268>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d010      	beq.n	800165a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001638:	4b94      	ldr	r3, [pc, #592]	; (800188c <_SendPacket+0x268>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8130 	beq.w	80018a2 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001642:	4b92      	ldr	r3, [pc, #584]	; (800188c <_SendPacket+0x268>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d109      	bne.n	800165e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800164a:	f7ff ff77 	bl	800153c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800164e:	4b8f      	ldr	r3, [pc, #572]	; (800188c <_SendPacket+0x268>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	f040 8127 	bne.w	80018a6 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8001658:	e001      	b.n	800165e <_SendPacket+0x3a>
    goto Send;
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <_SendPacket+0x3c>
Send:
 800165e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b1f      	cmp	r3, #31
 8001664:	d809      	bhi.n	800167a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001666:	4b89      	ldr	r3, [pc, #548]	; (800188c <_SendPacket+0x268>)
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 8118 	bne.w	80018aa <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b17      	cmp	r3, #23
 800167e:	d807      	bhi.n	8001690 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3b01      	subs	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e0c4      	b.n	800181a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b7f      	cmp	r3, #127	; 0x7f
 800169c:	d912      	bls.n	80016c4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	09da      	lsrs	r2, r3, #7
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	3a01      	subs	r2, #1
 80016b6:	60fa      	str	r2, [r7, #12]
 80016b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e006      	b.n	80016d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b7e      	cmp	r3, #126	; 0x7e
 80016d6:	d807      	bhi.n	80016e8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3b01      	subs	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e098      	b.n	800181a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016ee:	d212      	bcs.n	8001716 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	09da      	lsrs	r2, r3, #7
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	3a01      	subs	r2, #1
 8001708:	60fa      	str	r2, [r7, #12]
 800170a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800170e:	b2da      	uxtb	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e081      	b.n	800181a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800171c:	d21d      	bcs.n	800175a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0b9a      	lsrs	r2, r3, #14
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3b01      	subs	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	09db      	lsrs	r3, r3, #7
 8001732:	b2db      	uxtb	r3, r3
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	3a01      	subs	r2, #1
 8001738:	60fa      	str	r2, [r7, #12]
 800173a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800173e:	b2da      	uxtb	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	3a01      	subs	r2, #1
 800174c:	60fa      	str	r2, [r7, #12]
 800174e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001752:	b2da      	uxtb	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e05f      	b.n	800181a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001760:	d228      	bcs.n	80017b4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	0d5a      	lsrs	r2, r3, #21
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3b01      	subs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0b9b      	lsrs	r3, r3, #14
 8001776:	b2db      	uxtb	r3, r3
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	3a01      	subs	r2, #1
 800177c:	60fa      	str	r2, [r7, #12]
 800177e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	09db      	lsrs	r3, r3, #7
 800178c:	b2db      	uxtb	r3, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	3a01      	subs	r2, #1
 8001792:	60fa      	str	r2, [r7, #12]
 8001794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001798:	b2da      	uxtb	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	3a01      	subs	r2, #1
 80017a6:	60fa      	str	r2, [r7, #12]
 80017a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e032      	b.n	800181a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0f1a      	lsrs	r2, r3, #28
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0d5b      	lsrs	r3, r3, #21
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	3a01      	subs	r2, #1
 80017ce:	60fa      	str	r2, [r7, #12]
 80017d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0b9b      	lsrs	r3, r3, #14
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	3a01      	subs	r2, #1
 80017e4:	60fa      	str	r2, [r7, #12]
 80017e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	09db      	lsrs	r3, r3, #7
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	3a01      	subs	r2, #1
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	3a01      	subs	r2, #1
 800180e:	60fa      	str	r2, [r7, #12]
 8001810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001814:	b2da      	uxtb	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <_SendPacket+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <_SendPacket+0x268>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	e00b      	b.n	800184c <_SendPacket+0x228>
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	6279      	str	r1, [r7, #36]	; 0x24
 800183e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	09db      	lsrs	r3, r3, #7
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	2b7f      	cmp	r3, #127	; 0x7f
 8001850:	d8f0      	bhi.n	8001834 <_SendPacket+0x210>
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	627a      	str	r2, [r7, #36]	; 0x24
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <_SendPacket+0x268>)
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	4618      	mov	r0, r3
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	461a      	mov	r2, r3
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	f7fe fd35 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001876:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8001878:	f7ff f996 	bl	8000ba8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001882:	4a02      	ldr	r2, [pc, #8]	; (800188c <_SendPacket+0x268>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	60d3      	str	r3, [r2, #12]
 8001888:	e010      	b.n	80018ac <_SendPacket+0x288>
 800188a:	bf00      	nop
 800188c:	24078260 	.word	0x24078260
 8001890:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <_SendPacket+0x2d8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <_SendPacket+0x2d8>)
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e004      	b.n	80018ac <_SendPacket+0x288>
    goto SendDone;
 80018a2:	bf00      	nop
 80018a4:	e002      	b.n	80018ac <_SendPacket+0x288>
      goto SendDone;
 80018a6:	bf00      	nop
 80018a8:	e000      	b.n	80018ac <_SendPacket+0x288>
      goto SendDone;
 80018aa:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_SendPacket+0x2d8>)
 80018ae:	7e1b      	ldrb	r3, [r3, #24]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <_SendPacket+0x2dc>)
 80018b4:	460b      	mov	r3, r1
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	440b      	add	r3, r1
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	336c      	adds	r3, #108	; 0x6c
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <_SendPacket+0x2d8>)
 80018c4:	7e1b      	ldrb	r3, [r3, #24]
 80018c6:	4618      	mov	r0, r3
 80018c8:	490d      	ldr	r1, [pc, #52]	; (8001900 <_SendPacket+0x2dc>)
 80018ca:	4603      	mov	r3, r0
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4403      	add	r3, r0
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	3370      	adds	r3, #112	; 0x70
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d00b      	beq.n	80018f4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_SendPacket+0x2d8>)
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d107      	bne.n	80018f4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <_SendPacket+0x2d8>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80018ea:	f7ff fdb7 	bl	800145c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80018ee:	4b03      	ldr	r3, [pc, #12]	; (80018fc <_SendPacket+0x2d8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	24078260 	.word	0x24078260
 8001900:	240001a0 	.word	0x240001a0

08001904 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001912:	2300      	movs	r3, #0
 8001914:	4a18      	ldr	r2, [pc, #96]	; (8001978 <SEGGER_SYSVIEW_Init+0x74>)
 8001916:	4919      	ldr	r1, [pc, #100]	; (800197c <SEGGER_SYSVIEW_Init+0x78>)
 8001918:	4819      	ldr	r0, [pc, #100]	; (8001980 <SEGGER_SYSVIEW_Init+0x7c>)
 800191a:	f7ff fc73 	bl	8001204 <SEGGER_RTT_AllocUpBuffer>
 800191e:	4603      	mov	r3, r0
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 8001924:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 8001928:	785a      	ldrb	r2, [r3, #1]
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 800192c:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 8001930:	7e1b      	ldrb	r3, [r3, #24]
 8001932:	4618      	mov	r0, r3
 8001934:	2300      	movs	r3, #0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2308      	movs	r3, #8
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <SEGGER_SYSVIEW_Init+0x84>)
 800193c:	4910      	ldr	r1, [pc, #64]	; (8001980 <SEGGER_SYSVIEW_Init+0x7c>)
 800193e:	f7ff fce5 	bl	800130c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <SEGGER_SYSVIEW_Init+0x88>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 800194e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800195c:	4a09      	ldr	r2, [pc, #36]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <SEGGER_SYSVIEW_Init+0x80>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	00077c00 	.word	0x00077c00
 800197c:	24000658 	.word	0x24000658
 8001980:	08006f98 	.word	0x08006f98
 8001984:	24078260 	.word	0x24078260
 8001988:	24078258 	.word	0x24078258
 800198c:	e0001004 	.word	0xe0001004

08001990 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6113      	str	r3, [r2, #16]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	24078260 	.word	0x24078260

080019b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80019b8:	f3ef 8311 	mrs	r3, BASEPRI
 80019bc:	f04f 0120 	mov.w	r1, #32
 80019c0:	f381 8811 	msr	BASEPRI, r1
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4808      	ldr	r0, [pc, #32]	; (80019e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80019c8:	f7ff fd3c 	bl	8001444 <_PreparePacket>
 80019cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	68b8      	ldr	r0, [r7, #8]
 80019d4:	f7ff fe26 	bl	8001624 <_SendPacket>
  RECORD_END();
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f383 8811 	msr	BASEPRI, r3
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	24078290 	.word	0x24078290

080019ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80019f6:	f3ef 8311 	mrs	r3, BASEPRI
 80019fa:	f04f 0120 	mov.w	r1, #32
 80019fe:	f381 8811 	msr	BASEPRI, r1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	4816      	ldr	r0, [pc, #88]	; (8001a60 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001a06:	f7ff fd1d 	bl	8001444 <_PreparePacket>
 8001a0a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	e00b      	b.n	8001a32 <SEGGER_SYSVIEW_RecordU32+0x46>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	1c59      	adds	r1, r3, #1
 8001a22:	61f9      	str	r1, [r7, #28]
 8001a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	09db      	lsrs	r3, r3, #7
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b7f      	cmp	r3, #127	; 0x7f
 8001a36:	d8f0      	bhi.n	8001a1a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	61fa      	str	r2, [r7, #28]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	6938      	ldr	r0, [r7, #16]
 8001a4e:	f7ff fde9 	bl	8001624 <_SendPacket>
  RECORD_END();
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f383 8811 	msr	BASEPRI, r3
}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24078290 	.word	0x24078290

08001a64 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001a70:	f3ef 8311 	mrs	r3, BASEPRI
 8001a74:	f04f 0120 	mov.w	r1, #32
 8001a78:	f381 8811 	msr	BASEPRI, r1
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	4825      	ldr	r0, [pc, #148]	; (8001b14 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001a80:	f7ff fce0 	bl	8001444 <_PreparePacket>
 8001a84:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a92:	e00b      	b.n	8001aac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa8:	09db      	lsrs	r3, r3, #7
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab0:	d8f0      	bhi.n	8001a94 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	623b      	str	r3, [r7, #32]
 8001aca:	e00b      	b.n	8001ae4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	1c59      	adds	r1, r3, #1
 8001ad4:	6279      	str	r1, [r7, #36]	; 0x24
 8001ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	09db      	lsrs	r3, r3, #7
 8001ae2:	623b      	str	r3, [r7, #32]
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae8:	d8f0      	bhi.n	8001acc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	627a      	str	r2, [r7, #36]	; 0x24
 8001af0:	6a3a      	ldr	r2, [r7, #32]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	6979      	ldr	r1, [r7, #20]
 8001afe:	69b8      	ldr	r0, [r7, #24]
 8001b00:	f7ff fd90 	bl	8001624 <_SendPacket>
  RECORD_END();
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f383 8811 	msr	BASEPRI, r3
}
 8001b0a:	bf00      	nop
 8001b0c:	3730      	adds	r7, #48	; 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	24078290 	.word	0x24078290

08001b18 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001b1e:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001b24:	f3ef 8311 	mrs	r3, BASEPRI
 8001b28:	f04f 0120 	mov.w	r1, #32
 8001b2c:	f381 8811 	msr	BASEPRI, r1
 8001b30:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001b32:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001b34:	785b      	ldrb	r3, [r3, #1]
 8001b36:	220a      	movs	r2, #10
 8001b38:	4953      	ldr	r1, [pc, #332]	; (8001c88 <SEGGER_SYSVIEW_Start+0x170>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fbd0 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8001b46:	f7ff f82f 	bl	8000ba8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001b4a:	200a      	movs	r0, #10
 8001b4c:	f7ff ff30 	bl	80019b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001b50:	f3ef 8311 	mrs	r3, BASEPRI
 8001b54:	f04f 0120 	mov.w	r1, #32
 8001b58:	f381 8811 	msr	BASEPRI, r1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	484b      	ldr	r0, [pc, #300]	; (8001c8c <SEGGER_SYSVIEW_Start+0x174>)
 8001b60:	f7ff fc70 	bl	8001444 <_PreparePacket>
 8001b64:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6e:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b74:	e00b      	b.n	8001b8e <SEGGER_SYSVIEW_Start+0x76>
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	09db      	lsrs	r3, r3, #7
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	2b7f      	cmp	r3, #127	; 0x7f
 8001b92:	d8f0      	bhi.n	8001b76 <SEGGER_SYSVIEW_Start+0x5e>
 8001b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	e00b      	b.n	8001bc8 <SEGGER_SYSVIEW_Start+0xb0>
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	6279      	str	r1, [r7, #36]	; 0x24
 8001bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	09db      	lsrs	r3, r3, #7
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	2b7f      	cmp	r3, #127	; 0x7f
 8001bcc:	d8f0      	bhi.n	8001bb0 <SEGGER_SYSVIEW_Start+0x98>
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	627a      	str	r2, [r7, #36]	; 0x24
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	e00b      	b.n	8001c02 <SEGGER_SYSVIEW_Start+0xea>
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	61f9      	str	r1, [r7, #28]
 8001bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	09db      	lsrs	r3, r3, #7
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b7f      	cmp	r3, #127	; 0x7f
 8001c06:	d8f0      	bhi.n	8001bea <SEGGER_SYSVIEW_Start+0xd2>
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	61fa      	str	r2, [r7, #28]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e00b      	b.n	8001c3a <SEGGER_SYSVIEW_Start+0x122>
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	1c59      	adds	r1, r3, #1
 8001c2a:	6179      	str	r1, [r7, #20]
 8001c2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	09db      	lsrs	r3, r3, #7
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c3e:	d8f0      	bhi.n	8001c22 <SEGGER_SYSVIEW_Start+0x10a>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	617a      	str	r2, [r7, #20]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001c50:	2218      	movs	r2, #24
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fce5 	bl	8001624 <_SendPacket>
      RECORD_END();
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001c6e:	f000 f9eb 	bl	8002048 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001c72:	f000 f9b1 	bl	8001fd8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001c76:	f000 fbd1 	bl	800241c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8001c7a:	bf00      	nop
 8001c7c:	3730      	adds	r7, #48	; 0x30
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	24078260 	.word	0x24078260
 8001c88:	0800700c 	.word	0x0800700c
 8001c8c:	24078290 	.word	0x24078290

08001c90 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001c96:	f3ef 8311 	mrs	r3, BASEPRI
 8001c9a:	f04f 0120 	mov.w	r1, #32
 8001c9e:	f381 8811 	msr	BASEPRI, r1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <SEGGER_SYSVIEW_Stop+0x44>)
 8001ca6:	f7ff fbcd 	bl	8001444 <_PreparePacket>
 8001caa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <SEGGER_SYSVIEW_Stop+0x48>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001cb4:	220b      	movs	r2, #11
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f7ff fcb3 	bl	8001624 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SEGGER_SYSVIEW_Stop+0x48>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f383 8811 	msr	BASEPRI, r3
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	24078290 	.word	0x24078290
 8001cd8:	24078260 	.word	0x24078260

08001cdc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ce6:	f04f 0120 	mov.w	r1, #32
 8001cea:	f381 8811 	msr	BASEPRI, r1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	4845      	ldr	r0, [pc, #276]	; (8001e08 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001cf2:	f7ff fba7 	bl	8001444 <_PreparePacket>
 8001cf6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d06:	e00b      	b.n	8001d20 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0e:	1c59      	adds	r1, r3, #1
 8001d10:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	09db      	lsrs	r3, r3, #7
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	2b7f      	cmp	r3, #127	; 0x7f
 8001d24:	d8f0      	bhi.n	8001d08 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	623b      	str	r3, [r7, #32]
 8001d40:	e00b      	b.n	8001d5a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	1c59      	adds	r1, r3, #1
 8001d4a:	6279      	str	r1, [r7, #36]	; 0x24
 8001d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	09db      	lsrs	r3, r3, #7
 8001d58:	623b      	str	r3, [r7, #32]
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d5e:	d8f0      	bhi.n	8001d42 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	627a      	str	r2, [r7, #36]	; 0x24
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e00b      	b.n	8001d94 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	1c59      	adds	r1, r3, #1
 8001d84:	61f9      	str	r1, [r7, #28]
 8001d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	09db      	lsrs	r3, r3, #7
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b7f      	cmp	r3, #127	; 0x7f
 8001d98:	d8f0      	bhi.n	8001d7c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	61fa      	str	r2, [r7, #28]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e00b      	b.n	8001dcc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	6179      	str	r1, [r7, #20]
 8001dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	09db      	lsrs	r3, r3, #7
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd0:	d8f0      	bhi.n	8001db4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	617a      	str	r2, [r7, #20]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001de2:	2218      	movs	r2, #24
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	f7ff fc1c 	bl	8001624 <_SendPacket>
  RECORD_END();
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	4798      	blx	r3
  }
}
 8001e00:	bf00      	nop
 8001e02:	3730      	adds	r7, #48	; 0x30
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	24078290 	.word	0x24078290
 8001e0c:	24078260 	.word	0x24078260

08001e10 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b092      	sub	sp, #72	; 0x48
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8001e18:	f3ef 8311 	mrs	r3, BASEPRI
 8001e1c:	f04f 0120 	mov.w	r1, #32
 8001e20:	f381 8811 	msr	BASEPRI, r1
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	486a      	ldr	r0, [pc, #424]	; (8001fd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8001e28:	f7ff fb0c 	bl	8001444 <_PreparePacket>
 8001e2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	647b      	str	r3, [r7, #68]	; 0x44
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	643b      	str	r3, [r7, #64]	; 0x40
 8001e42:	e00b      	b.n	8001e5c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	6479      	str	r1, [r7, #68]	; 0x44
 8001e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e58:	09db      	lsrs	r3, r3, #7
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e60:	d8f0      	bhi.n	8001e44 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	647a      	str	r2, [r7, #68]	; 0x44
 8001e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e7c:	e00b      	b.n	8001e96 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e84:	1c59      	adds	r1, r3, #1
 8001e86:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e92:	09db      	lsrs	r3, r3, #7
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e98:	2b7f      	cmp	r3, #127	; 0x7f
 8001e9a:	d8f0      	bhi.n	8001e7e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eaa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff fa75 	bl	80013a4 <_EncodeStr>
 8001eba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001ebc:	2209      	movs	r2, #9
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	6938      	ldr	r0, [r7, #16]
 8001ec2:	f7ff fbaf 	bl	8001624 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eda:	e00b      	b.n	8001ef4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee2:	1c59      	adds	r1, r3, #1
 8001ee4:	6379      	str	r1, [r7, #52]	; 0x34
 8001ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	09db      	lsrs	r3, r3, #7
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ef8:	d8f0      	bhi.n	8001edc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8001efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	637a      	str	r2, [r7, #52]	; 0x34
 8001f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f14:	e00b      	b.n	8001f2e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	1c59      	adds	r1, r3, #1
 8001f1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	09db      	lsrs	r3, r3, #7
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	2b7f      	cmp	r3, #127	; 0x7f
 8001f32:	d8f0      	bhi.n	8001f16 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8001f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	623b      	str	r3, [r7, #32]
 8001f4e:	e00b      	b.n	8001f68 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	6279      	str	r1, [r7, #36]	; 0x24
 8001f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	09db      	lsrs	r3, r3, #7
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f6c:	d8f0      	bhi.n	8001f50 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	627a      	str	r2, [r7, #36]	; 0x24
 8001f74:	6a3a      	ldr	r2, [r7, #32]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	e00b      	b.n	8001fa0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	61f9      	str	r1, [r7, #28]
 8001f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	09db      	lsrs	r3, r3, #7
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa4:	d8f0      	bhi.n	8001f88 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	61fa      	str	r2, [r7, #28]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001fb6:	2215      	movs	r2, #21
 8001fb8:	68f9      	ldr	r1, [r7, #12]
 8001fba:	6938      	ldr	r0, [r7, #16]
 8001fbc:	f7ff fb32 	bl	8001624 <_SendPacket>
  RECORD_END();
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f383 8811 	msr	BASEPRI, r3
}
 8001fc6:	bf00      	nop
 8001fc8:	3748      	adds	r7, #72	; 0x48
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	24078290 	.word	0x24078290
 8001fd4:	24078260 	.word	0x24078260

08001fd8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001fee:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4798      	blx	r3
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	24078260 	.word	0x24078260

08002000 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002008:	f3ef 8311 	mrs	r3, BASEPRI
 800200c:	f04f 0120 	mov.w	r1, #32
 8002010:	f381 8811 	msr	BASEPRI, r1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	480b      	ldr	r0, [pc, #44]	; (8002044 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002018:	f7ff fa14 	bl	8001444 <_PreparePacket>
 800201c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	6938      	ldr	r0, [r7, #16]
 8002024:	f7ff f9be 	bl	80013a4 <_EncodeStr>
 8002028:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800202a:	220e      	movs	r2, #14
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	6938      	ldr	r0, [r7, #16]
 8002030:	f7ff faf8 	bl	8001624 <_SendPacket>
  RECORD_END();
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f383 8811 	msr	BASEPRI, r3
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	24078290 	.word	0x24078290

08002048 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01a      	beq.n	800208c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4798      	blx	r3
 8002068:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800206c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800206e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	000a      	movs	r2, r1
 800207c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800207e:	4613      	mov	r3, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4621      	mov	r1, r4
 8002084:	200d      	movs	r0, #13
 8002086:	f7ff fced 	bl	8001a64 <SEGGER_SYSVIEW_RecordU32x2>
 800208a:	e006      	b.n	800209a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	200c      	movs	r0, #12
 8002094:	f7ff fcaa 	bl	80019ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	24078260 	.word	0x24078260
 80020a8:	e0001004 	.word	0xe0001004

080020ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80020b2:	f3ef 8311 	mrs	r3, BASEPRI
 80020b6:	f04f 0120 	mov.w	r1, #32
 80020ba:	f381 8811 	msr	BASEPRI, r1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4819      	ldr	r0, [pc, #100]	; (8002128 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80020c2:	f7ff f9bf 	bl	8001444 <_PreparePacket>
 80020c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80020cc:	4b17      	ldr	r3, [pc, #92]	; (800212c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	e00b      	b.n	80020f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1c59      	adds	r1, r3, #1
 80020e8:	6179      	str	r1, [r7, #20]
 80020ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	09db      	lsrs	r3, r3, #7
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b7f      	cmp	r3, #127	; 0x7f
 80020fc:	d8f0      	bhi.n	80020e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	617a      	str	r2, [r7, #20]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800210e:	2202      	movs	r2, #2
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	68b8      	ldr	r0, [r7, #8]
 8002114:	f7ff fa86 	bl	8001624 <_SendPacket>
  RECORD_END();
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f383 8811 	msr	BASEPRI, r3
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	24078290 	.word	0x24078290
 800212c:	e000ed04 	.word	0xe000ed04

08002130 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002136:	f3ef 8311 	mrs	r3, BASEPRI
 800213a:	f04f 0120 	mov.w	r1, #32
 800213e:	f381 8811 	msr	BASEPRI, r1
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	4807      	ldr	r0, [pc, #28]	; (8002164 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002146:	f7ff f97d 	bl	8001444 <_PreparePacket>
 800214a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800214c:	2203      	movs	r2, #3
 800214e:	6839      	ldr	r1, [r7, #0]
 8002150:	6838      	ldr	r0, [r7, #0]
 8002152:	f7ff fa67 	bl	8001624 <_SendPacket>
  RECORD_END();
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f383 8811 	msr	BASEPRI, r3
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	24078290 	.word	0x24078290

08002168 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800216e:	f3ef 8311 	mrs	r3, BASEPRI
 8002172:	f04f 0120 	mov.w	r1, #32
 8002176:	f381 8811 	msr	BASEPRI, r1
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	4807      	ldr	r0, [pc, #28]	; (800219c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800217e:	f7ff f961 	bl	8001444 <_PreparePacket>
 8002182:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002184:	2212      	movs	r2, #18
 8002186:	6839      	ldr	r1, [r7, #0]
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f7ff fa4b 	bl	8001624 <_SendPacket>
  RECORD_END();
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f383 8811 	msr	BASEPRI, r3
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	24078290 	.word	0x24078290

080021a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80021a6:	f3ef 8311 	mrs	r3, BASEPRI
 80021aa:	f04f 0120 	mov.w	r1, #32
 80021ae:	f381 8811 	msr	BASEPRI, r1
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	4807      	ldr	r0, [pc, #28]	; (80021d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80021b6:	f7ff f945 	bl	8001444 <_PreparePacket>
 80021ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80021bc:	2211      	movs	r2, #17
 80021be:	6839      	ldr	r1, [r7, #0]
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f7ff fa2f 	bl	8001624 <_SendPacket>
  RECORD_END();
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f383 8811 	msr	BASEPRI, r3
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	24078290 	.word	0x24078290

080021d8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80021e0:	f3ef 8311 	mrs	r3, BASEPRI
 80021e4:	f04f 0120 	mov.w	r1, #32
 80021e8:	f381 8811 	msr	BASEPRI, r1
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	4819      	ldr	r0, [pc, #100]	; (8002254 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80021f0:	f7ff f928 	bl	8001444 <_PreparePacket>
 80021f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e00b      	b.n	8002226 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	1c59      	adds	r1, r3, #1
 8002216:	61f9      	str	r1, [r7, #28]
 8002218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	09db      	lsrs	r3, r3, #7
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b7f      	cmp	r3, #127	; 0x7f
 800222a:	d8f0      	bhi.n	800220e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	61fa      	str	r2, [r7, #28]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800223c:	2204      	movs	r2, #4
 800223e:	68f9      	ldr	r1, [r7, #12]
 8002240:	6938      	ldr	r0, [r7, #16]
 8002242:	f7ff f9ef 	bl	8001624 <_SendPacket>
  RECORD_END();
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f383 8811 	msr	BASEPRI, r3
}
 800224c:	bf00      	nop
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	24078290 	.word	0x24078290
 8002258:	24078260 	.word	0x24078260

0800225c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002264:	f3ef 8311 	mrs	r3, BASEPRI
 8002268:	f04f 0120 	mov.w	r1, #32
 800226c:	f381 8811 	msr	BASEPRI, r1
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	4819      	ldr	r0, [pc, #100]	; (80022d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8002274:	f7ff f8e6 	bl	8001444 <_PreparePacket>
 8002278:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	e00b      	b.n	80022aa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	1c59      	adds	r1, r3, #1
 800229a:	61f9      	str	r1, [r7, #28]
 800229c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	09db      	lsrs	r3, r3, #7
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b7f      	cmp	r3, #127	; 0x7f
 80022ae:	d8f0      	bhi.n	8002292 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	61fa      	str	r2, [r7, #28]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80022c0:	2206      	movs	r2, #6
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	6938      	ldr	r0, [r7, #16]
 80022c6:	f7ff f9ad 	bl	8001624 <_SendPacket>
  RECORD_END();
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f383 8811 	msr	BASEPRI, r3
}
 80022d0:	bf00      	nop
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	24078290 	.word	0x24078290
 80022dc:	24078260 	.word	0x24078260

080022e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	; 0x30
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80022ea:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d06d      	beq.n	80023ce <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fc:	e008      	b.n	8002310 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	3301      	adds	r3, #1
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002314:	429a      	cmp	r2, r3
 8002316:	d3f2      	bcc.n	80022fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8002318:	e000      	b.n	800231c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800231a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d055      	beq.n	80023ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002322:	f3ef 8311 	mrs	r3, BASEPRI
 8002326:	f04f 0120 	mov.w	r1, #32
 800232a:	f381 8811 	msr	BASEPRI, r1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	482a      	ldr	r0, [pc, #168]	; (80023dc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002332:	f7ff f887 	bl	8001444 <_PreparePacket>
 8002336:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	e00b      	b.n	800235e <SEGGER_SYSVIEW_SendModule+0x7e>
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	1c59      	adds	r1, r3, #1
 800234e:	6279      	str	r1, [r7, #36]	; 0x24
 8002350:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	09db      	lsrs	r3, r3, #7
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2b7f      	cmp	r3, #127	; 0x7f
 8002362:	d8f0      	bhi.n	8002346 <SEGGER_SYSVIEW_SendModule+0x66>
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	627a      	str	r2, [r7, #36]	; 0x24
 800236a:	6a3a      	ldr	r2, [r7, #32]
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	e00b      	b.n	8002398 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	61f9      	str	r1, [r7, #28]
 800238a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	09db      	lsrs	r3, r3, #7
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b7f      	cmp	r3, #127	; 0x7f
 800239c:	d8f0      	bhi.n	8002380 <SEGGER_SYSVIEW_SendModule+0xa0>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	61fa      	str	r2, [r7, #28]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	4619      	mov	r1, r3
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f7fe fff4 	bl	80013a4 <_EncodeStr>
 80023bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80023be:	2216      	movs	r2, #22
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	6938      	ldr	r0, [r7, #16]
 80023c4:	f7ff f92e 	bl	8001624 <_SendPacket>
      RECORD_END();
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80023ce:	bf00      	nop
 80023d0:	3730      	adds	r7, #48	; 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	24078288 	.word	0x24078288
 80023dc:	24078290 	.word	0x24078290

080023e0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00f      	beq.n	800240e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f2      	bne.n	80023f4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	24078288 	.word	0x24078288

0800241c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002422:	f3ef 8311 	mrs	r3, BASEPRI
 8002426:	f04f 0120 	mov.w	r1, #32
 800242a:	f381 8811 	msr	BASEPRI, r1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	4817      	ldr	r0, [pc, #92]	; (8002490 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002432:	f7ff f807 	bl	8001444 <_PreparePacket>
 8002436:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e00b      	b.n	8002460 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1c59      	adds	r1, r3, #1
 8002450:	6179      	str	r1, [r7, #20]
 8002452:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	09db      	lsrs	r3, r3, #7
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b7f      	cmp	r3, #127	; 0x7f
 8002464:	d8f0      	bhi.n	8002448 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	617a      	str	r2, [r7, #20]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002476:	221b      	movs	r2, #27
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	68b8      	ldr	r0, [r7, #8]
 800247c:	f7ff f8d2 	bl	8001624 <_SendPacket>
  RECORD_END();
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f383 8811 	msr	BASEPRI, r3
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	24078290 	.word	0x24078290
 8002494:	2407828c 	.word	0x2407828c

08002498 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 800249e:	7e1b      	ldrb	r3, [r3, #24]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80024a4:	460b      	mov	r3, r1
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	440b      	add	r3, r1
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	336c      	adds	r3, #108	; 0x6c
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80024b4:	7e1b      	ldrb	r3, [r3, #24]
 80024b6:	4618      	mov	r0, r3
 80024b8:	490d      	ldr	r1, [pc, #52]	; (80024f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80024ba:	4603      	mov	r3, r0
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4403      	add	r3, r0
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	3370      	adds	r3, #112	; 0x70
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d00b      	beq.n	80024e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80024ce:	789b      	ldrb	r3, [r3, #2]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80024da:	f7fe ffbf 	bl	800145c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80024de:	4b03      	ldr	r3, [pc, #12]	; (80024ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80024e4:	4b01      	ldr	r3, [pc, #4]	; (80024ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	24078260 	.word	0x24078260
 80024f0:	240001a0 	.word	0x240001a0

080024f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024fa:	f000 fcb3 	bl	8002e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024fe:	f000 f82f 	bl	8002560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002502:	f000 f961 	bl	80027c8 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8002506:	f000 f8d9 	bl	80026bc <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 800250a:	f000 f93b 	bl	8002784 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
  // Start LED
    int Start_Counter = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8002512:	e010      	b.n	8002536 <main+0x42>
    {
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8002514:	2104      	movs	r1, #4
 8002516:	480f      	ldr	r0, [pc, #60]	; (8002554 <main+0x60>)
 8002518:	f001 fe51 	bl	80041be <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 800251c:	20c8      	movs	r0, #200	; 0xc8
 800251e:	f000 fcfd 	bl	8002f1c <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8002522:	2104      	movs	r1, #4
 8002524:	480b      	ldr	r0, [pc, #44]	; (8002554 <main+0x60>)
 8002526:	f001 fe4a 	bl	80041be <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 800252a:	20c8      	movs	r0, #200	; 0xc8
 800252c:	f000 fcf6 	bl	8002f1c <HAL_Delay>
  	  Start_Counter++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3301      	adds	r3, #1
 8002534:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b04      	cmp	r3, #4
 800253a:	ddeb      	ble.n	8002514 <main+0x20>

    //user_data = "Start of program\r\n";
    	//HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

    	// Enable CCYCCNT Counter for SEGGER SYSTEM VIEW
    	DWT->CTRL |= (1 << 0);
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <main+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a05      	ldr	r2, [pc, #20]	; (8002558 <main+0x64>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6013      	str	r3, [r2, #0]

    	// Used for SEGGER UART
    	SEGGER_UART_init(500000);
 8002548:	4804      	ldr	r0, [pc, #16]	; (800255c <main+0x68>)
 800254a:	f7fe facf 	bl	8000aec <SEGGER_UART_init>

    	//Starting SEGGER SYSVIEW
    	  SEGGER_SYSVIEW_Conf();
 800254e:	f7fe f961 	bl	8000814 <SEGGER_SYSVIEW_Conf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002552:	e7fe      	b.n	8002552 <main+0x5e>
 8002554:	58020800 	.word	0x58020800
 8002558:	e0001000 	.word	0xe0001000
 800255c:	0007a120 	.word	0x0007a120

08002560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b09e      	sub	sp, #120	; 0x78
 8002564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256a:	224c      	movs	r2, #76	; 0x4c
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f004 fcd8 	bl	8006f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2220      	movs	r2, #32
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fcd1 	bl	8006f24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002582:	2002      	movs	r0, #2
 8002584:	f001 febc 	bl	8004300 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <SystemClock_Config+0x150>)
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	4a47      	ldr	r2, [pc, #284]	; (80026b0 <SystemClock_Config+0x150>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <SystemClock_Config+0x150>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <SystemClock_Config+0x154>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <SystemClock_Config+0x154>)
 80025a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ac:	6193      	str	r3, [r2, #24]
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <SystemClock_Config+0x154>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025ba:	bf00      	nop
 80025bc:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <SystemClock_Config+0x154>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c8:	d1f8      	bne.n	80025bc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <SystemClock_Config+0x158>)
 80025cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025d0:	4a39      	ldr	r2, [pc, #228]	; (80026b8 <SystemClock_Config+0x158>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025da:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <SystemClock_Config+0x158>)
 80025dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025e8:	2300      	movs	r3, #0
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <SystemClock_Config+0x154>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a30      	ldr	r2, [pc, #192]	; (80026b4 <SystemClock_Config+0x154>)
 80025f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <SystemClock_Config+0x154>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <SystemClock_Config+0x150>)
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <SystemClock_Config+0x150>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800260e:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <SystemClock_Config+0x150>)
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800261a:	bf00      	nop
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <SystemClock_Config+0x154>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002628:	d1f8      	bne.n	800261c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800262a:	2301      	movs	r3, #1
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800262e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002634:	2302      	movs	r3, #2
 8002636:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002638:	2302      	movs	r3, #2
 800263a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800263c:	2301      	movs	r3, #1
 800263e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002640:	2378      	movs	r3, #120	; 0x78
 8002642:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002644:	2302      	movs	r3, #2
 8002646:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8002648:	230f      	movs	r3, #15
 800264a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800264c:	2302      	movs	r3, #2
 800264e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002650:	230c      	movs	r3, #12
 8002652:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002654:	2300      	movs	r3, #0
 8002656:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002660:	4618      	mov	r0, r3
 8002662:	f001 fe97 	bl	8004394 <HAL_RCC_OscConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800266c:	f000 f936 	bl	80028dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002670:	233f      	movs	r3, #63	; 0x3f
 8002672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002674:	2303      	movs	r3, #3
 8002676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800267c:	2308      	movs	r3, #8
 800267e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002680:	2340      	movs	r3, #64	; 0x40
 8002682:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002684:	2340      	movs	r3, #64	; 0x40
 8002686:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800268e:	2340      	movs	r3, #64	; 0x40
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	2104      	movs	r1, #4
 8002698:	4618      	mov	r0, r3
 800269a:	f002 faa9 	bl	8004bf0 <HAL_RCC_ClockConfig>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80026a4:	f000 f91a 	bl	80028dc <Error_Handler>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3778      	adds	r7, #120	; 0x78
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	58000400 	.word	0x58000400
 80026b4:	58024800 	.word	0x58024800
 80026b8:	58024400 	.word	0x58024400

080026bc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <MX_FDCAN2_Init+0xc4>)
 80026c4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026e6:	2210      	movs	r2, #16
 80026e8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026f2:	2202      	movs	r2, #2
 80026f4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80026f6:	4b21      	ldr	r3, [pc, #132]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026f8:	2202      	movs	r2, #2
 80026fa:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <MX_FDCAN2_Init+0xc0>)
 80026fe:	2201      	movs	r2, #1
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002704:	2201      	movs	r2, #1
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <MX_FDCAN2_Init+0xc0>)
 800270a:	2201      	movs	r2, #1
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002710:	2201      	movs	r2, #1
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002716:	2200      	movs	r2, #0
 8002718:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <MX_FDCAN2_Init+0xc0>)
 800271c:	2200      	movs	r2, #0
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002722:	2200      	movs	r2, #0
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002728:	2200      	movs	r2, #0
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <MX_FDCAN2_Init+0xc0>)
 800272e:	2204      	movs	r2, #4
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002734:	2200      	movs	r2, #0
 8002736:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <MX_FDCAN2_Init+0xc0>)
 800273a:	2204      	movs	r2, #4
 800273c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002740:	2200      	movs	r2, #0
 8002742:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002746:	2204      	movs	r2, #4
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_FDCAN2_Init+0xc0>)
 800274c:	2200      	movs	r2, #0
 800274e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002752:	2200      	movs	r2, #0
 8002754:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002758:	2200      	movs	r2, #0
 800275a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <MX_FDCAN2_Init+0xc0>)
 800275e:	2200      	movs	r2, #0
 8002760:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_FDCAN2_Init+0xc0>)
 8002764:	2204      	movs	r2, #4
 8002766:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002768:	4804      	ldr	r0, [pc, #16]	; (800277c <MX_FDCAN2_Init+0xc0>)
 800276a:	f000 fce7 	bl	800313c <HAL_FDCAN_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8002774:	f000 f8b2 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	24078374 	.word	0x24078374
 8002780:	4000a400 	.word	0x4000a400

08002784 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800278a:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800278c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002790:	2210      	movs	r2, #16
 8002792:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002796:	2201      	movs	r2, #1
 8002798:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80027a2:	2202      	movs	r2, #2
 80027a4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 80027ae:	f001 fd45 	bl	800423c <HAL_HCD_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 80027b8:	f000 f890 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	24078414 	.word	0x24078414
 80027c4:	40080000 	.word	0x40080000

080027c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
 80027dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027de:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <MX_GPIO_Init+0xe8>)
 80027e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e4:	4a32      	ldr	r2, [pc, #200]	; (80028b0 <MX_GPIO_Init+0xe8>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <MX_GPIO_Init+0xe8>)
 80027f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027fc:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <MX_GPIO_Init+0xe8>)
 80027fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002802:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <MX_GPIO_Init+0xe8>)
 8002804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800280c:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <MX_GPIO_Init+0xe8>)
 800280e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800281a:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <MX_GPIO_Init+0xe8>)
 800281c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002820:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <MX_GPIO_Init+0xe8>)
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <MX_GPIO_Init+0xe8>)
 800282c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_GPIO_Init+0xe8>)
 800283a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283e:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <MX_GPIO_Init+0xe8>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MX_GPIO_Init+0xe8>)
 800284a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	2107      	movs	r1, #7
 800285a:	4816      	ldr	r0, [pc, #88]	; (80028b4 <MX_GPIO_Init+0xec>)
 800285c:	f001 fc96 	bl	800418c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800286a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4619      	mov	r1, r3
 8002876:	480f      	ldr	r0, [pc, #60]	; (80028b4 <MX_GPIO_Init+0xec>)
 8002878:	f001 fad8 	bl	8003e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800287c:	2307      	movs	r3, #7
 800287e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002880:	2301      	movs	r3, #1
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	4808      	ldr	r0, [pc, #32]	; (80028b4 <MX_GPIO_Init+0xec>)
 8002894:	f001 faca 	bl	8003e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2105      	movs	r1, #5
 800289c:	2028      	movs	r0, #40	; 0x28
 800289e:	f000 fc25 	bl	80030ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028a2:	2028      	movs	r0, #40	; 0x28
 80028a4:	f000 fc3c 	bl	8003120 <HAL_NVIC_EnableIRQ>

}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	58024400 	.word	0x58024400
 80028b4:	58020800 	.word	0x58020800

080028b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028ca:	f000 fb07 	bl	8002edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40001000 	.word	0x40001000

080028dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 80028e4:	2101      	movs	r1, #1
 80028e6:	4807      	ldr	r0, [pc, #28]	; (8002904 <Error_Handler+0x28>)
 80028e8:	f001 fc69 	bl	80041be <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80028ec:	2064      	movs	r0, #100	; 0x64
 80028ee:	f000 fb15 	bl	8002f1c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 80028f2:	2101      	movs	r1, #1
 80028f4:	4803      	ldr	r0, [pc, #12]	; (8002904 <Error_Handler+0x28>)
 80028f6:	f001 fc62 	bl	80041be <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80028fa:	2064      	movs	r0, #100	; 0x64
 80028fc:	f000 fb0e 	bl	8002f1c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8002900:	e7f0      	b.n	80028e4 <Error_Handler+0x8>
 8002902:	bf00      	nop
 8002904:	58020800 	.word	0x58020800

08002908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_MspInit+0x30>)
 8002910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002914:	4a08      	ldr	r2, [pc, #32]	; (8002938 <HAL_MspInit+0x30>)
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_MspInit+0x30>)
 8002920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	58024400 	.word	0x58024400

0800293c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b0b8      	sub	sp, #224	; 0xe0
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	22bc      	movs	r2, #188	; 0xbc
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f004 fae1 	bl	8006f24 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a2d      	ldr	r2, [pc, #180]	; (8002a1c <HAL_FDCAN_MspInit+0xe0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d153      	bne.n	8002a14 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800296c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002970:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002972:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002976:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f002 fcef 	bl	8005360 <HAL_RCCEx_PeriphCLKConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002988:	f7ff ffa8 	bl	80028dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800298c:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_FDCAN_MspInit+0xe4>)
 800298e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002992:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <HAL_FDCAN_MspInit+0xe4>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800299c:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_FDCAN_MspInit+0xe4>)
 800299e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_FDCAN_MspInit+0xe4>)
 80029ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b0:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_FDCAN_MspInit+0xe4>)
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_FDCAN_MspInit+0xe4>)
 80029bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80029c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80029e2:	2309      	movs	r3, #9
 80029e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ec:	4619      	mov	r1, r3
 80029ee:	480d      	ldr	r0, [pc, #52]	; (8002a24 <HAL_FDCAN_MspInit+0xe8>)
 80029f0:	f001 fa1c 	bl	8003e2c <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2100      	movs	r1, #0
 80029f8:	2014      	movs	r0, #20
 80029fa:	f000 fb77 	bl	80030ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80029fe:	2014      	movs	r0, #20
 8002a00:	f000 fb8e 	bl	8003120 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2016      	movs	r0, #22
 8002a0a:	f000 fb6f 	bl	80030ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8002a0e:	2016      	movs	r0, #22
 8002a10:	f000 fb86 	bl	8003120 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002a14:	bf00      	nop
 8002a16:	37e0      	adds	r7, #224	; 0xe0
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	4000a400 	.word	0x4000a400
 8002a20:	58024400 	.word	0x58024400
 8002a24:	58020400 	.word	0x58020400

08002a28 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b0b8      	sub	sp, #224	; 0xe0
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	22bc      	movs	r2, #188	; 0xbc
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fa6b 	bl	8006f24 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_HCD_MspInit+0xc8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d146      	bne.n	8002ae6 <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002a58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002a5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 fc78 	bl	8005360 <HAL_RCCEx_PeriphCLKConfig>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8002a76:	f7ff ff31 	bl	80028dc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002a7a:	f001 fc7b 	bl	8004374 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_HCD_MspInit+0xcc>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_HCD_MspInit+0xcc>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_HCD_MspInit+0xcc>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	480d      	ldr	r0, [pc, #52]	; (8002af8 <HAL_HCD_MspInit+0xd0>)
 8002ac4:	f001 f9b2 	bl	8003e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_HCD_MspInit+0xcc>)
 8002aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_HCD_MspInit+0xcc>)
 8002ad0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ad4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_HCD_MspInit+0xcc>)
 8002ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002ae6:	bf00      	nop
 8002ae8:	37e0      	adds	r7, #224	; 0xe0
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40080000 	.word	0x40080000
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58020000 	.word	0x58020000

08002afc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b090      	sub	sp, #64	; 0x40
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	d827      	bhi.n	8002b5a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	2036      	movs	r0, #54	; 0x36
 8002b10:	f000 faec 	bl	80030ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b14:	2036      	movs	r0, #54	; 0x36
 8002b16:	f000 fb03 	bl	8003120 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002b1a:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <HAL_InitTick+0xc4>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_InitTick+0xc8>)
 8002b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b26:	4a27      	ldr	r2, [pc, #156]	; (8002bc4 <HAL_InitTick+0xc8>)
 8002b28:	f043 0310 	orr.w	r3, r3, #16
 8002b2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b30:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_InitTick+0xc8>)
 8002b32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b3e:	f107 0210 	add.w	r2, r7, #16
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 fbc7 	bl	80052dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <HAL_InitTick+0x6a>
 8002b58:	e001      	b.n	8002b5e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e02b      	b.n	8002bb6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b5e:	f002 fba7 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8002b62:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002b64:	e004      	b.n	8002b70 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b66:	f002 fba3 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b72:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <HAL_InitTick+0xcc>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	0c9b      	lsrs	r3, r3, #18
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_InitTick+0xd0>)
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_InitTick+0xd4>)
 8002b82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_InitTick+0xd0>)
 8002b86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_InitTick+0xd0>)
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_InitTick+0xd0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_InitTick+0xd0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b9e:	480b      	ldr	r0, [pc, #44]	; (8002bcc <HAL_InitTick+0xd0>)
 8002ba0:	f003 fc88 	bl	80064b4 <HAL_TIM_Base_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002baa:	4808      	ldr	r0, [pc, #32]	; (8002bcc <HAL_InitTick+0xd0>)
 8002bac:	f003 fce4 	bl	8006578 <HAL_TIM_Base_Start_IT>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	e000      	b.n	8002bb6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3740      	adds	r7, #64	; 0x40
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	24000010 	.word	0x24000010
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	431bde83 	.word	0x431bde83
 8002bcc:	24078718 	.word	0x24078718
 8002bd0:	40001000 	.word	0x40001000

08002bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002bd8:	2102      	movs	r1, #2
 8002bda:	4807      	ldr	r0, [pc, #28]	; (8002bf8 <NMI_Handler+0x24>)
 8002bdc:	f001 faef 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002be0:	2064      	movs	r0, #100	; 0x64
 8002be2:	f000 f99b 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002be6:	2102      	movs	r1, #2
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <NMI_Handler+0x24>)
 8002bea:	f001 fae8 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002bee:	2064      	movs	r0, #100	; 0x64
 8002bf0:	f000 f994 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002bf4:	e7f0      	b.n	8002bd8 <NMI_Handler+0x4>
 8002bf6:	bf00      	nop
 8002bf8:	58020800 	.word	0x58020800

08002bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c00:	2102      	movs	r1, #2
 8002c02:	4807      	ldr	r0, [pc, #28]	; (8002c20 <HardFault_Handler+0x24>)
 8002c04:	f001 fadb 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002c08:	2064      	movs	r0, #100	; 0x64
 8002c0a:	f000 f987 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <HardFault_Handler+0x24>)
 8002c12:	f001 fad4 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002c16:	2064      	movs	r0, #100	; 0x64
 8002c18:	f000 f980 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c1c:	e7f0      	b.n	8002c00 <HardFault_Handler+0x4>
 8002c1e:	bf00      	nop
 8002c20:	58020800 	.word	0x58020800

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4807      	ldr	r0, [pc, #28]	; (8002c48 <MemManage_Handler+0x24>)
 8002c2c:	f001 fac7 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	f000 f973 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c36:	2102      	movs	r1, #2
 8002c38:	4803      	ldr	r0, [pc, #12]	; (8002c48 <MemManage_Handler+0x24>)
 8002c3a:	f001 fac0 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002c3e:	2064      	movs	r0, #100	; 0x64
 8002c40:	f000 f96c 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c44:	e7f0      	b.n	8002c28 <MemManage_Handler+0x4>
 8002c46:	bf00      	nop
 8002c48:	58020800 	.word	0x58020800

08002c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c50:	2102      	movs	r1, #2
 8002c52:	4807      	ldr	r0, [pc, #28]	; (8002c70 <BusFault_Handler+0x24>)
 8002c54:	f001 fab3 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	f000 f95f 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4803      	ldr	r0, [pc, #12]	; (8002c70 <BusFault_Handler+0x24>)
 8002c62:	f001 faac 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002c66:	2064      	movs	r0, #100	; 0x64
 8002c68:	f000 f958 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c6c:	e7f0      	b.n	8002c50 <BusFault_Handler+0x4>
 8002c6e:	bf00      	nop
 8002c70:	58020800 	.word	0x58020800

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c78:	2102      	movs	r1, #2
 8002c7a:	4807      	ldr	r0, [pc, #28]	; (8002c98 <UsageFault_Handler+0x24>)
 8002c7c:	f001 fa9f 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002c80:	2064      	movs	r0, #100	; 0x64
 8002c82:	f000 f94b 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c86:	2102      	movs	r1, #2
 8002c88:	4803      	ldr	r0, [pc, #12]	; (8002c98 <UsageFault_Handler+0x24>)
 8002c8a:	f001 fa98 	bl	80041be <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002c8e:	2064      	movs	r0, #100	; 0x64
 8002c90:	f000 f944 	bl	8002f1c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002c94:	e7f0      	b.n	8002c78 <UsageFault_Handler+0x4>
 8002c96:	bf00      	nop
 8002c98:	58020800 	.word	0x58020800

08002c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <FDCAN2_IT0_IRQHandler+0x10>)
 8002cb2:	f000 fc21 	bl	80034f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	24078374 	.word	0x24078374

08002cc0 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <FDCAN2_IT1_IRQHandler+0x10>)
 8002cc6:	f000 fc17 	bl	80034f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	24078374 	.word	0x24078374

08002cd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002cd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cdc:	f001 fa89 	bl	80041f2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <TIM6_DAC_IRQHandler+0x10>)
 8002cea:	f003 fcbd 	bl	8006668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	24078718 	.word	0x24078718

08002cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cfc:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <SystemInit+0xec>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	4a38      	ldr	r2, [pc, #224]	; (8002de4 <SystemInit+0xec>)
 8002d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <SystemInit+0xf0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d807      	bhi.n	8002d28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d18:	4b33      	ldr	r3, [pc, #204]	; (8002de8 <SystemInit+0xf0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 030f 	bic.w	r3, r3, #15
 8002d20:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <SystemInit+0xf0>)
 8002d22:	f043 0307 	orr.w	r3, r3, #7
 8002d26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d28:	4b30      	ldr	r3, [pc, #192]	; (8002dec <SystemInit+0xf4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2f      	ldr	r2, [pc, #188]	; (8002dec <SystemInit+0xf4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <SystemInit+0xf4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d3a:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <SystemInit+0xf4>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	492b      	ldr	r1, [pc, #172]	; (8002dec <SystemInit+0xf4>)
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <SystemInit+0xf8>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d46:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <SystemInit+0xf0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <SystemInit+0xf0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 030f 	bic.w	r3, r3, #15
 8002d5a:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <SystemInit+0xf0>)
 8002d5c:	f043 0307 	orr.w	r3, r3, #7
 8002d60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <SystemInit+0xf4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <SystemInit+0xf4>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <SystemInit+0xf4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <SystemInit+0xf4>)
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <SystemInit+0xfc>)
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <SystemInit+0xf4>)
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <SystemInit+0x100>)
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <SystemInit+0xf4>)
 8002d82:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <SystemInit+0x104>)
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <SystemInit+0xf4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <SystemInit+0xf4>)
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <SystemInit+0x104>)
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <SystemInit+0xf4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <SystemInit+0xf4>)
 8002d9a:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <SystemInit+0x104>)
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <SystemInit+0xf4>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <SystemInit+0xf4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a10      	ldr	r2, [pc, #64]	; (8002dec <SystemInit+0xf4>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <SystemInit+0xf4>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <SystemInit+0x108>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <SystemInit+0x10c>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc2:	d202      	bcs.n	8002dca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <SystemInit+0x110>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <SystemInit+0x114>)
 8002dcc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <SystemInit+0xec>)
 8002dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dd8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00
 8002de8:	52002000 	.word	0x52002000
 8002dec:	58024400 	.word	0x58024400
 8002df0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002df4:	02020200 	.word	0x02020200
 8002df8:	01ff0000 	.word	0x01ff0000
 8002dfc:	01010280 	.word	0x01010280
 8002e00:	5c001000 	.word	0x5c001000
 8002e04:	ffff0000 	.word	0xffff0000
 8002e08:	51008108 	.word	0x51008108
 8002e0c:	52004000 	.word	0x52004000

08002e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e14:	f7ff ff70 	bl	8002cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e18:	480c      	ldr	r0, [pc, #48]	; (8002e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e1a:	490d      	ldr	r1, [pc, #52]	; (8002e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e20:	e002      	b.n	8002e28 <LoopCopyDataInit>

08002e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e26:	3304      	adds	r3, #4

08002e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e2c:	d3f9      	bcc.n	8002e22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e30:	4c0a      	ldr	r4, [pc, #40]	; (8002e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e34:	e001      	b.n	8002e3a <LoopFillZerobss>

08002e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e38:	3204      	adds	r2, #4

08002e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e3c:	d3fb      	bcc.n	8002e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e3e:	f004 f83f 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e42:	f7ff fb57 	bl	80024f4 <main>
  bx  lr
 8002e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e50:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8002e54:	08007030 	.word	0x08007030
  ldr r2, =_sbss
 8002e58:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8002e5c:	24078768 	.word	0x24078768

08002e60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <ADC3_IRQHandler>
	...

08002e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6a:	2003      	movs	r0, #3
 8002e6c:	f000 f933 	bl	80030d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e70:	f002 f874 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <HAL_Init+0x68>)
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	4913      	ldr	r1, [pc, #76]	; (8002ed0 <HAL_Init+0x6c>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_Init+0x68>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_Init+0x6c>)
 8002e98:	5cd3      	ldrb	r3, [r2, r3]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_Init+0x70>)
 8002ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ea8:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <HAL_Init+0x74>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eae:	200f      	movs	r0, #15
 8002eb0:	f7ff fe24 	bl	8002afc <HAL_InitTick>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e002      	b.n	8002ec4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ebe:	f7ff fd23 	bl	8002908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	08007018 	.word	0x08007018
 8002ed4:	2400000c 	.word	0x2400000c
 8002ed8:	24000008 	.word	0x24000008

08002edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_IncTick+0x20>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_IncTick+0x24>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_IncTick+0x24>)
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	24000014 	.word	0x24000014
 8002f00:	24078764 	.word	0x24078764

08002f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return uwTick;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_GetTick+0x14>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	24078764 	.word	0x24078764

08002f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f24:	f7ff ffee 	bl	8002f04 <HAL_GetTick>
 8002f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d005      	beq.n	8002f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_Delay+0x44>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f42:	bf00      	nop
 8002f44:	f7ff ffde 	bl	8002f04 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d8f7      	bhi.n	8002f44 <HAL_Delay+0x28>
  {
  }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	24000014 	.word	0x24000014

08002f64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <HAL_GetREVID+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	5c001000 	.word	0x5c001000

08002f7c <__NVIC_SetPriorityGrouping>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <__NVIC_SetPriorityGrouping+0x40>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <__NVIC_SetPriorityGrouping+0x40>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00
 8002fc0:	05fa0000 	.word	0x05fa0000

08002fc4 <__NVIC_GetPriorityGrouping>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_EnableIRQ>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db0b      	blt.n	800300a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <__NVIC_EnableIRQ+0x38>)
 8002ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff ff4c 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030fa:	f7ff ff63 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 80030fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	6978      	ldr	r0, [r7, #20]
 8003106:	f7ff ffb3 	bl	8003070 <NVIC_EncodePriority>
 800310a:	4602      	mov	r2, r0
 800310c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff82 	bl	800301c <__NVIC_SetPriority>
}
 8003118:	bf00      	nop
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800312a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff56 	bl	8002fe0 <__NVIC_EnableIRQ>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b098      	sub	sp, #96	; 0x60
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003144:	4a84      	ldr	r2, [pc, #528]	; (8003358 <HAL_FDCAN_Init+0x21c>)
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	4611      	mov	r1, r2
 800314c:	224c      	movs	r2, #76	; 0x4c
 800314e:	4618      	mov	r0, r3
 8003150:	f003 feda 	bl	8006f08 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c6      	b.n	80034ec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7e      	ldr	r2, [pc, #504]	; (800335c <HAL_FDCAN_Init+0x220>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d106      	bne.n	8003176 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff fbd6 	bl	800293c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0210 	bic.w	r2, r2, #16
 800319e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a0:	f7ff feb0 	bl	8002f04 <HAL_GetTick>
 80031a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031a6:	e014      	b.n	80031d2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031a8:	f7ff feac 	bl	8002f04 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b0a      	cmp	r3, #10
 80031b4:	d90d      	bls.n	80031d2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2203      	movs	r2, #3
 80031ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e18c      	b.n	80034ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d0e3      	beq.n	80031a8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f0:	f7ff fe88 	bl	8002f04 <HAL_GetTick>
 80031f4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031f6:	e014      	b.n	8003222 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031f8:	f7ff fe84 	bl	8002f04 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b0a      	cmp	r3, #10
 8003204:	d90d      	bls.n	8003222 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2203      	movs	r2, #3
 800321a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e164      	b.n	80034ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0e3      	beq.n	80031f8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0202 	orr.w	r2, r2, #2
 800323e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7c1b      	ldrb	r3, [r3, #16]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d108      	bne.n	800325a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003256:	619a      	str	r2, [r3, #24]
 8003258:	e007      	b.n	800326a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003268:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7c5b      	ldrb	r3, [r3, #17]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003280:	619a      	str	r2, [r3, #24]
 8003282:	e007      	b.n	8003294 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003292:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7c9b      	ldrb	r3, [r3, #18]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032aa:	619a      	str	r2, [r3, #24]
 80032ac:	e007      	b.n	80032be <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032bc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80032e2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0210 	bic.w	r2, r2, #16
 80032f2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d108      	bne.n	800330e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0204 	orr.w	r2, r2, #4
 800330a:	619a      	str	r2, [r3, #24]
 800330c:	e030      	b.n	8003370 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d02c      	beq.n	8003370 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d020      	beq.n	8003360 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800332c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0210 	orr.w	r2, r2, #16
 800333c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d114      	bne.n	8003370 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0220 	orr.w	r2, r2, #32
 8003354:	619a      	str	r2, [r3, #24]
 8003356:	e00b      	b.n	8003370 <HAL_FDCAN_Init+0x234>
 8003358:	08006fa0 	.word	0x08006fa0
 800335c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0220 	orr.w	r2, r2, #32
 800336e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	3b01      	subs	r3, #1
 8003376:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	3b01      	subs	r3, #1
 800337e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003380:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003388:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	3b01      	subs	r3, #1
 8003392:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003398:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800339a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a4:	d115      	bne.n	80033d2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	3b01      	subs	r3, #1
 80033b2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033b4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	3b01      	subs	r3, #1
 80033bc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80033be:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	3b01      	subs	r3, #1
 80033c8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80033ce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033d0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	4413      	add	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d011      	beq.n	8003422 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003406:	f023 0107 	bic.w	r1, r3, #7
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	3360      	adds	r3, #96	; 0x60
 8003412:	443b      	add	r3, r7
 8003414:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d011      	beq.n	800344e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003432:	f023 0107 	bic.w	r1, r3, #7
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	3360      	adds	r3, #96	; 0x60
 800343e:	443b      	add	r3, r7
 8003440:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003452:	2b00      	cmp	r3, #0
 8003454:	d012      	beq.n	800347c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800345e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3360      	adds	r3, #96	; 0x60
 800346a:	443b      	add	r3, r7
 800346c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003470:	011a      	lsls	r2, r3, #4
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800348c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	3360      	adds	r3, #96	; 0x60
 8003498:	443b      	add	r3, r7
 800349a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <HAL_FDCAN_Init+0x3b8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d107      	bne.n	80034c4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f022 0203 	bic.w	r2, r2, #3
 80034c2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb1f 	bl	8003b20 <FDCAN_CalcultateRamBlockAddresses>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80034e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3760      	adds	r7, #96	; 0x60
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	4000a000 	.word	0x4000a000

080034f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b096      	sub	sp, #88	; 0x58
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003500:	4b9a      	ldr	r3, [pc, #616]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	079b      	lsls	r3, r3, #30
 8003506:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003508:	4b98      	ldr	r3, [pc, #608]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	079b      	lsls	r3, r3, #30
 800350e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003510:	4013      	ands	r3, r2
 8003512:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800351e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003528:	4013      	ands	r3, r2
 800352a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003540:	4013      	ands	r3, r2
 8003542:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800354e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003558:	4013      	ands	r3, r2
 800355a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003566:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003570:	4013      	ands	r3, r2
 8003572:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800357e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003588:	4013      	ands	r3, r2
 800358a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035bc:	651a      	str	r2, [r3, #80]	; 0x50
 80035be:	4b6b      	ldr	r3, [pc, #428]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fa5f 	bl	8003a88 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	0a9b      	lsrs	r3, r3, #10
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01d      	beq.n	8003612 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	0a9b      	lsrs	r3, r3, #10
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f6:	4013      	ands	r3, r2
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003602:	651a      	str	r2, [r3, #80]	; 0x50
 8003604:	4b59      	ldr	r3, [pc, #356]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800360a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fa12 	bl	8003a36 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800361e:	4b54      	ldr	r3, [pc, #336]	; (8003770 <HAL_FDCAN_IRQHandler+0x278>)
 8003620:	400b      	ands	r3, r1
 8003622:	6513      	str	r3, [r2, #80]	; 0x50
 8003624:	4a51      	ldr	r2, [pc, #324]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 8003626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003628:	0f9b      	lsrs	r3, r3, #30
 800362a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800362c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9c0 	bl	80039b4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003640:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_FDCAN_IRQHandler+0x278>)
 8003642:	400b      	ands	r3, r1
 8003644:	6513      	str	r3, [r2, #80]	; 0x50
 8003646:	4a49      	ldr	r2, [pc, #292]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 8003648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364a:	0f9b      	lsrs	r3, r3, #30
 800364c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800364e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f9ba 	bl	80039ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003662:	4b43      	ldr	r3, [pc, #268]	; (8003770 <HAL_FDCAN_IRQHandler+0x278>)
 8003664:	400b      	ands	r3, r1
 8003666:	6513      	str	r3, [r2, #80]	; 0x50
 8003668:	4a40      	ldr	r2, [pc, #256]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 800366a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366c:	0f9b      	lsrs	r3, r3, #30
 800366e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003670:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9b4 	bl	80039e0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <HAL_FDCAN_IRQHandler+0x278>)
 8003686:	400b      	ands	r3, r1
 8003688:	6513      	str	r3, [r2, #80]	; 0x50
 800368a:	4a38      	ldr	r2, [pc, #224]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 800368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368e:	0f9b      	lsrs	r3, r3, #30
 8003690:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003692:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f9ae 	bl	80039f6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800369a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369c:	0adb      	lsrs	r3, r3, #11
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	0adb      	lsrs	r3, r3, #11
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ba:	651a      	str	r2, [r3, #80]	; 0x50
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f9a2 	bl	8003a0c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01d      	beq.n	8003710 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	0a5b      	lsrs	r3, r3, #9
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d017      	beq.n	8003710 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f4:	4013      	ands	r3, r2
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003700:	651a      	str	r2, [r3, #80]	; 0x50
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f988 	bl	8003a20 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003712:	0cdb      	lsrs	r3, r3, #19
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	0cdb      	lsrs	r3, r3, #19
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003730:	651a      	str	r2, [r3, #80]	; 0x50
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 8003734:	2200      	movs	r2, #0
 8003736:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f987 	bl	8003a4c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800375e:	651a      	str	r2, [r3, #80]	; 0x50
 8003760:	4b02      	ldr	r3, [pc, #8]	; (800376c <HAL_FDCAN_IRQHandler+0x274>)
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	e004      	b.n	8003774 <HAL_FDCAN_IRQHandler+0x27c>
 800376a:	bf00      	nop
 800376c:	4000a800 	.word	0x4000a800
 8003770:	3fcfffff 	.word	0x3fcfffff
 8003774:	f000 f974 	bl	8003a60 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	0c9b      	lsrs	r3, r3, #18
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	0c9b      	lsrs	r3, r3, #18
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003798:	651a      	str	r2, [r3, #80]	; 0x50
 800379a:	4b83      	ldr	r3, [pc, #524]	; (80039a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800379c:	2200      	movs	r2, #0
 800379e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f967 	bl	8003a74 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80037a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a8:	0c5b      	lsrs	r3, r3, #17
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d015      	beq.n	80037de <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	0c5b      	lsrs	r3, r3, #17
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00f      	beq.n	80037de <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037c6:	651a      	str	r2, [r3, #80]	; 0x50
 80037c8:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80037de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037ea:	4b70      	ldr	r3, [pc, #448]	; (80039ac <HAL_FDCAN_IRQHandler+0x4b4>)
 80037ec:	400b      	ands	r3, r1
 80037ee:	6513      	str	r3, [r2, #80]	; 0x50
 80037f0:	4a6d      	ldr	r2, [pc, #436]	; (80039a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80037f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f4:	0f9b      	lsrs	r3, r3, #30
 80037f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80037f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f958 	bl	8003ab0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003802:	2b00      	cmp	r3, #0
 8003804:	d011      	beq.n	800382a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800380c:	4b67      	ldr	r3, [pc, #412]	; (80039ac <HAL_FDCAN_IRQHandler+0x4b4>)
 800380e:	400b      	ands	r3, r1
 8003810:	6513      	str	r3, [r2, #80]	; 0x50
 8003812:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003816:	0f9b      	lsrs	r3, r3, #30
 8003818:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a60      	ldr	r2, [pc, #384]	; (80039b0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f040 80ac 	bne.w	800398e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80a4 	beq.w	800398e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385a:	4013      	ands	r3, r2
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003872:	4013      	ands	r3, r2
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	4013      	ands	r3, r2
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003898:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	6a3a      	ldr	r2, [r7, #32]
 80038a2:	4013      	ands	r3, r2
 80038a4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80038b0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80038dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8f1 	bl	8003ac6 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80038f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f8f1 	bl	8003adc <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01a      	beq.n	800393c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	b29b      	uxth	r3, r3
 800391c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003928:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2240      	movs	r2, #64	; 0x40
 8003930:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6939      	ldr	r1, [r7, #16]
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8db 	bl	8003af2 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800394a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8dc 	bl	8003b0a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f87f 	bl	8003a9c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800399e:	bf00      	nop
 80039a0:	3758      	adds	r7, #88	; 0x58
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	4000a800 	.word	0x4000a800
 80039ac:	3fcfffff 	.word	0x3fcfffff
 80039b0:	4000a000 	.word	0x4000a000

080039b4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003b36:	4ba7      	ldr	r3, [pc, #668]	; (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	0091      	lsls	r1, r2, #2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	430b      	orrs	r3, r1
 8003b44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b50:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	041a      	lsls	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b76:	4b97      	ldr	r3, [pc, #604]	; (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	0091      	lsls	r1, r2, #2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	430b      	orrs	r3, r1
 8003b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	041a      	lsls	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4413      	add	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003bb8:	4b86      	ldr	r3, [pc, #536]	; (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	0091      	lsls	r1, r2, #2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bd2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	041a      	lsls	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c00:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	0091      	lsls	r1, r2, #2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c1a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	041a      	lsls	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c48:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	0091      	lsls	r1, r2, #2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	430b      	orrs	r3, r1
 8003c56:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	4413      	add	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003c74:	4b57      	ldr	r3, [pc, #348]	; (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	0091      	lsls	r1, r2, #2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c8e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	041a      	lsls	r2, r3, #16
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	4413      	add	r3, r2
 8003cac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	0091      	lsls	r1, r2, #2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cd0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	041a      	lsls	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cec:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf4:	061a      	lsls	r2, r3, #24
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d04:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003d06:	4413      	add	r3, r2
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d915      	bls.n	8003dfc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003dd0:	e006      	b.n	8003de0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003dd2:	bf00      	nop
 8003dd4:	ffff0003 	.word	0xffff0003
 8003dd8:	10002b00 	.word	0x10002b00
 8003ddc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e010      	b.n	8003e1e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e005      	b.n	8003e10 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3f3      	bcc.n	8003e04 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop

08003e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	; 0x24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e3a:	4b89      	ldr	r3, [pc, #548]	; (8004060 <HAL_GPIO_Init+0x234>)
 8003e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e3e:	e194      	b.n	800416a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8186 	beq.w	8004164 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d005      	beq.n	8003e70 <HAL_GPIO_Init+0x44>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d130      	bne.n	8003ed2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0201 	and.w	r2, r3, #1
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d017      	beq.n	8003f0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d123      	bne.n	8003f62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	08da      	lsrs	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3208      	adds	r2, #8
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0203 	and.w	r2, r3, #3
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80e0 	beq.w	8004164 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_GPIO_Init+0x238>)
 8003fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003faa:	4a2e      	ldr	r2, [pc, #184]	; (8004064 <HAL_GPIO_Init+0x238>)
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_GPIO_Init+0x238>)
 8003fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fc2:	4a29      	ldr	r2, [pc, #164]	; (8004068 <HAL_GPIO_Init+0x23c>)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	3302      	adds	r3, #2
 8003fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	220f      	movs	r2, #15
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a20      	ldr	r2, [pc, #128]	; (800406c <HAL_GPIO_Init+0x240>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d052      	beq.n	8004094 <HAL_GPIO_Init+0x268>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <HAL_GPIO_Init+0x244>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d031      	beq.n	800405a <HAL_GPIO_Init+0x22e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <HAL_GPIO_Init+0x248>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02b      	beq.n	8004056 <HAL_GPIO_Init+0x22a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_GPIO_Init+0x24c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d025      	beq.n	8004052 <HAL_GPIO_Init+0x226>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <HAL_GPIO_Init+0x250>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01f      	beq.n	800404e <HAL_GPIO_Init+0x222>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_GPIO_Init+0x254>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d019      	beq.n	800404a <HAL_GPIO_Init+0x21e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <HAL_GPIO_Init+0x258>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_GPIO_Init+0x21a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <HAL_GPIO_Init+0x25c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00d      	beq.n	8004042 <HAL_GPIO_Init+0x216>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_GPIO_Init+0x260>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <HAL_GPIO_Init+0x212>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a17      	ldr	r2, [pc, #92]	; (8004090 <HAL_GPIO_Init+0x264>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d101      	bne.n	800403a <HAL_GPIO_Init+0x20e>
 8004036:	2309      	movs	r3, #9
 8004038:	e02d      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 800403a:	230a      	movs	r3, #10
 800403c:	e02b      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 800403e:	2308      	movs	r3, #8
 8004040:	e029      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 8004042:	2307      	movs	r3, #7
 8004044:	e027      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 8004046:	2306      	movs	r3, #6
 8004048:	e025      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 800404a:	2305      	movs	r3, #5
 800404c:	e023      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 800404e:	2304      	movs	r3, #4
 8004050:	e021      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 8004052:	2303      	movs	r3, #3
 8004054:	e01f      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 8004056:	2302      	movs	r3, #2
 8004058:	e01d      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 800405a:	2301      	movs	r3, #1
 800405c:	e01b      	b.n	8004096 <HAL_GPIO_Init+0x26a>
 800405e:	bf00      	nop
 8004060:	58000080 	.word	0x58000080
 8004064:	58024400 	.word	0x58024400
 8004068:	58000400 	.word	0x58000400
 800406c:	58020000 	.word	0x58020000
 8004070:	58020400 	.word	0x58020400
 8004074:	58020800 	.word	0x58020800
 8004078:	58020c00 	.word	0x58020c00
 800407c:	58021000 	.word	0x58021000
 8004080:	58021400 	.word	0x58021400
 8004084:	58021800 	.word	0x58021800
 8004088:	58021c00 	.word	0x58021c00
 800408c:	58022000 	.word	0x58022000
 8004090:	58022400 	.word	0x58022400
 8004094:	2300      	movs	r3, #0
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	f002 0203 	and.w	r2, r2, #3
 800409c:	0092      	lsls	r2, r2, #2
 800409e:	4093      	lsls	r3, r2
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a6:	4938      	ldr	r1, [pc, #224]	; (8004188 <HAL_GPIO_Init+0x35c>)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	3302      	adds	r3, #2
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	3301      	adds	r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	f47f ae63 	bne.w	8003e40 <HAL_GPIO_Init+0x14>
  }
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	3724      	adds	r7, #36	; 0x24
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	58000400 	.word	0x58000400

0800418c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
 8004198:	4613      	mov	r3, r2
 800419a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800419c:	787b      	ldrb	r3, [r7, #1]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80041a8:	e003      	b.n	80041b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041aa:	887b      	ldrh	r3, [r7, #2]
 80041ac:	041a      	lsls	r2, r3, #16
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	619a      	str	r2, [r3, #24]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041d0:	887a      	ldrh	r2, [r7, #2]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4013      	ands	r3, r2
 80041d6:	041a      	lsls	r2, r3, #16
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	43d9      	mvns	r1, r3
 80041dc:	887b      	ldrh	r3, [r7, #2]
 80041de:	400b      	ands	r3, r1
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	619a      	str	r2, [r3, #24]
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800420c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f804 	bl	8004226 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	4603      	mov	r3, r0
 800422e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800423c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423e:	b08f      	sub	sp, #60	; 0x3c
 8004240:	af0a      	add	r7, sp, #40	; 0x28
 8004242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e054      	b.n	80042f8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7fe fbdd 	bl	8002a28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2203      	movs	r2, #3
 8004272:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f002 fc59 	bl	8006b44 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	687e      	ldr	r6, [r7, #4]
 800429a:	466d      	mov	r5, sp
 800429c:	f106 0410 	add.w	r4, r6, #16
 80042a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80042b0:	1d33      	adds	r3, r6, #4
 80042b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042b4:	6838      	ldr	r0, [r7, #0]
 80042b6:	f002 fbd7 	bl	8006a68 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f002 fc50 	bl	8006b66 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	687e      	ldr	r6, [r7, #4]
 80042ce:	466d      	mov	r5, sp
 80042d0:	f106 0410 	add.w	r4, r6, #16
 80042d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80042e4:	1d33      	adds	r3, r6, #4
 80042e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e8:	6838      	ldr	r0, [r7, #0]
 80042ea:	f002 fd2f 	bl	8006d4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d00a      	beq.n	800432a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e01f      	b.n	8004366 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e01d      	b.n	8004366 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f023 0207 	bic.w	r2, r3, #7
 8004332:	490f      	ldr	r1, [pc, #60]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4313      	orrs	r3, r2
 8004338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800433a:	f7fe fde3 	bl	8002f04 <HAL_GetTick>
 800433e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004340:	e009      	b.n	8004356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004342:	f7fe fddf 	bl	8002f04 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004350:	d901      	bls.n	8004356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e007      	b.n	8004366 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_PWREx_ConfigSupply+0x70>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004362:	d1ee      	bne.n	8004342 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	58024800 	.word	0x58024800

08004374 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a04      	ldr	r2, [pc, #16]	; (8004390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800437e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004382:	60d3      	str	r3, [r2, #12]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	58024800 	.word	0x58024800

08004394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	; 0x30
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d102      	bne.n	80043a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f000 bc1d 	b.w	8004be2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8087 	beq.w	80044c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b6:	4b99      	ldr	r3, [pc, #612]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043c0:	4b96      	ldr	r3, [pc, #600]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d007      	beq.n	80043dc <HAL_RCC_OscConfig+0x48>
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	2b18      	cmp	r3, #24
 80043d0:	d110      	bne.n	80043f4 <HAL_RCC_OscConfig+0x60>
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d10b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	4b8f      	ldr	r3, [pc, #572]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d06c      	beq.n	80044c2 <HAL_RCC_OscConfig+0x12e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d168      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e3f6      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d106      	bne.n	800440c <HAL_RCC_OscConfig+0x78>
 80043fe:	4b87      	ldr	r3, [pc, #540]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a86      	ldr	r2, [pc, #536]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e02e      	b.n	800446a <HAL_RCC_OscConfig+0xd6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10c      	bne.n	800442e <HAL_RCC_OscConfig+0x9a>
 8004414:	4b81      	ldr	r3, [pc, #516]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a80      	ldr	r2, [pc, #512]	; (800461c <HAL_RCC_OscConfig+0x288>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b7e      	ldr	r3, [pc, #504]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a7d      	ldr	r2, [pc, #500]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	e01d      	b.n	800446a <HAL_RCC_OscConfig+0xd6>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004436:	d10c      	bne.n	8004452 <HAL_RCC_OscConfig+0xbe>
 8004438:	4b78      	ldr	r3, [pc, #480]	; (800461c <HAL_RCC_OscConfig+0x288>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	; (800461c <HAL_RCC_OscConfig+0x288>)
 800443e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b75      	ldr	r3, [pc, #468]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a74      	ldr	r2, [pc, #464]	; (800461c <HAL_RCC_OscConfig+0x288>)
 800444a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e00b      	b.n	800446a <HAL_RCC_OscConfig+0xd6>
 8004452:	4b72      	ldr	r3, [pc, #456]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a71      	ldr	r2, [pc, #452]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b6f      	ldr	r3, [pc, #444]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a6e      	ldr	r2, [pc, #440]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004468:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d013      	beq.n	800449a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fe fd47 	bl	8002f04 <HAL_GetTick>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447a:	f7fe fd43 	bl	8002f04 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e3aa      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800448c:	4b63      	ldr	r3, [pc, #396]	; (800461c <HAL_RCC_OscConfig+0x288>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0xe6>
 8004498:	e014      	b.n	80044c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fe fd33 	bl	8002f04 <HAL_GetTick>
 800449e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a2:	f7fe fd2f 	bl	8002f04 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b64      	cmp	r3, #100	; 0x64
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e396      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x10e>
 80044c0:	e000      	b.n	80044c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80cb 	beq.w	8004668 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d2:	4b52      	ldr	r3, [pc, #328]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044dc:	4b4f      	ldr	r3, [pc, #316]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <HAL_RCC_OscConfig+0x164>
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	2b18      	cmp	r3, #24
 80044ec:	d156      	bne.n	800459c <HAL_RCC_OscConfig+0x208>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d151      	bne.n	800459c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f8:	4b48      	ldr	r3, [pc, #288]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_OscConfig+0x17c>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e368      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004510:	4b42      	ldr	r3, [pc, #264]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 0219 	bic.w	r2, r3, #25
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	493f      	ldr	r1, [pc, #252]	; (800461c <HAL_RCC_OscConfig+0x288>)
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004522:	f7fe fcef 	bl	8002f04 <HAL_GetTick>
 8004526:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452a:	f7fe fceb 	bl	8002f04 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e352      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800453c:	4b37      	ldr	r3, [pc, #220]	; (800461c <HAL_RCC_OscConfig+0x288>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004548:	f7fe fd0c 	bl	8002f64 <HAL_GetREVID>
 800454c:	4603      	mov	r3, r0
 800454e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004552:	4293      	cmp	r3, r2
 8004554:	d817      	bhi.n	8004586 <HAL_RCC_OscConfig+0x1f2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d108      	bne.n	8004570 <HAL_RCC_OscConfig+0x1dc>
 800455e:	4b2f      	ldr	r3, [pc, #188]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004566:	4a2d      	ldr	r2, [pc, #180]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800456e:	e07b      	b.n	8004668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004570:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	4927      	ldr	r1, [pc, #156]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004584:	e070      	b.n	8004668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	061b      	lsls	r3, r3, #24
 8004594:	4921      	ldr	r1, [pc, #132]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800459a:	e065      	b.n	8004668 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d048      	beq.n	8004636 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 0219 	bic.w	r2, r3, #25
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	491a      	ldr	r1, [pc, #104]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fe fca5 	bl	8002f04 <HAL_GetTick>
 80045ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045be:	f7fe fca1 	bl	8002f04 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e308      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d0:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045dc:	f7fe fcc2 	bl	8002f64 <HAL_GetREVID>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d81a      	bhi.n	8004620 <HAL_RCC_OscConfig+0x28c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d108      	bne.n	8004604 <HAL_RCC_OscConfig+0x270>
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_RCC_OscConfig+0x288>)
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	6053      	str	r3, [r2, #4]
 8004602:	e031      	b.n	8004668 <HAL_RCC_OscConfig+0x2d4>
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	031b      	lsls	r3, r3, #12
 8004612:	4902      	ldr	r1, [pc, #8]	; (800461c <HAL_RCC_OscConfig+0x288>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
 8004618:	e026      	b.n	8004668 <HAL_RCC_OscConfig+0x2d4>
 800461a:	bf00      	nop
 800461c:	58024400 	.word	0x58024400
 8004620:	4b9a      	ldr	r3, [pc, #616]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	4997      	ldr	r1, [pc, #604]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
 8004634:	e018      	b.n	8004668 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004636:	4b95      	ldr	r3, [pc, #596]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a94      	ldr	r2, [pc, #592]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fe fc5f 	bl	8002f04 <HAL_GetTick>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464a:	f7fe fc5b 	bl	8002f04 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e2c2      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800465c:	4b8b      	ldr	r3, [pc, #556]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a9 	beq.w	80047c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004676:	4b85      	ldr	r3, [pc, #532]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004680:	4b82      	ldr	r3, [pc, #520]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d007      	beq.n	800469c <HAL_RCC_OscConfig+0x308>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b18      	cmp	r3, #24
 8004690:	d13a      	bne.n	8004708 <HAL_RCC_OscConfig+0x374>
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d135      	bne.n	8004708 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800469c:	4b7b      	ldr	r3, [pc, #492]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_OscConfig+0x320>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	2b80      	cmp	r3, #128	; 0x80
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e296      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046b4:	f7fe fc56 	bl	8002f64 <HAL_GetREVID>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80046be:	4293      	cmp	r3, r2
 80046c0:	d817      	bhi.n	80046f2 <HAL_RCC_OscConfig+0x35e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d108      	bne.n	80046dc <HAL_RCC_OscConfig+0x348>
 80046ca:	4b70      	ldr	r3, [pc, #448]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046d2:	4a6e      	ldr	r2, [pc, #440]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046da:	e075      	b.n	80047c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046dc:	4b6b      	ldr	r3, [pc, #428]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	069b      	lsls	r3, r3, #26
 80046ea:	4968      	ldr	r1, [pc, #416]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046f0:	e06a      	b.n	80047c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046f2:	4b66      	ldr	r3, [pc, #408]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	4962      	ldr	r1, [pc, #392]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004706:	e05f      	b.n	80047c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d042      	beq.n	8004796 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004710:	4b5e      	ldr	r3, [pc, #376]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a5d      	ldr	r2, [pc, #372]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe fbf2 	bl	8002f04 <HAL_GetTick>
 8004720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004724:	f7fe fbee 	bl	8002f04 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e255      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004736:	4b55      	ldr	r3, [pc, #340]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004742:	f7fe fc0f 	bl	8002f64 <HAL_GetREVID>
 8004746:	4603      	mov	r3, r0
 8004748:	f241 0203 	movw	r2, #4099	; 0x1003
 800474c:	4293      	cmp	r3, r2
 800474e:	d817      	bhi.n	8004780 <HAL_RCC_OscConfig+0x3ec>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	2b20      	cmp	r3, #32
 8004756:	d108      	bne.n	800476a <HAL_RCC_OscConfig+0x3d6>
 8004758:	4b4c      	ldr	r3, [pc, #304]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004760:	4a4a      	ldr	r2, [pc, #296]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004766:	6053      	str	r3, [r2, #4]
 8004768:	e02e      	b.n	80047c8 <HAL_RCC_OscConfig+0x434>
 800476a:	4b48      	ldr	r3, [pc, #288]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	069b      	lsls	r3, r3, #26
 8004778:	4944      	ldr	r1, [pc, #272]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
 800477e:	e023      	b.n	80047c8 <HAL_RCC_OscConfig+0x434>
 8004780:	4b42      	ldr	r3, [pc, #264]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	493f      	ldr	r1, [pc, #252]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	60cb      	str	r3, [r1, #12]
 8004794:	e018      	b.n	80047c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004796:	4b3d      	ldr	r3, [pc, #244]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3c      	ldr	r2, [pc, #240]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800479c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fe fbaf 	bl	8002f04 <HAL_GetTick>
 80047a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80047aa:	f7fe fbab 	bl	8002f04 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e212      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047bc:	4b33      	ldr	r3, [pc, #204]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f0      	bne.n	80047aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d036      	beq.n	8004842 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d019      	beq.n	8004810 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 80047de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e0:	4a2a      	ldr	r2, [pc, #168]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fe fb8c 	bl	8002f04 <HAL_GetTick>
 80047ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fe fb88 	bl	8002f04 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e1ef      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x45c>
 800480e:	e018      	b.n	8004842 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fe fb72 	bl	8002f04 <HAL_GetTick>
 8004820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004824:	f7fe fb6e 	bl	8002f04 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e1d5      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d039      	beq.n	80048c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01c      	beq.n	8004890 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a0c      	ldr	r2, [pc, #48]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800485c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004860:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004862:	f7fe fb4f 	bl	8002f04 <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800486a:	f7fe fb4b 	bl	8002f04 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1b2      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_OscConfig+0x4f8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x4d6>
 8004888:	e01b      	b.n	80048c2 <HAL_RCC_OscConfig+0x52e>
 800488a:	bf00      	nop
 800488c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004890:	4b9b      	ldr	r3, [pc, #620]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a9a      	ldr	r2, [pc, #616]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800489a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800489c:	f7fe fb32 	bl	8002f04 <HAL_GetTick>
 80048a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048a4:	f7fe fb2e 	bl	8002f04 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e195      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048b6:	4b92      	ldr	r3, [pc, #584]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8081 	beq.w	80049d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048d0:	4b8c      	ldr	r3, [pc, #560]	; (8004b04 <HAL_RCC_OscConfig+0x770>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a8b      	ldr	r2, [pc, #556]	; (8004b04 <HAL_RCC_OscConfig+0x770>)
 80048d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048dc:	f7fe fb12 	bl	8002f04 <HAL_GetTick>
 80048e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048e4:	f7fe fb0e 	bl	8002f04 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e175      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048f6:	4b83      	ldr	r3, [pc, #524]	; (8004b04 <HAL_RCC_OscConfig+0x770>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d106      	bne.n	8004918 <HAL_RCC_OscConfig+0x584>
 800490a:	4b7d      	ldr	r3, [pc, #500]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a7c      	ldr	r2, [pc, #496]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6713      	str	r3, [r2, #112]	; 0x70
 8004916:	e02d      	b.n	8004974 <HAL_RCC_OscConfig+0x5e0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10c      	bne.n	800493a <HAL_RCC_OscConfig+0x5a6>
 8004920:	4b77      	ldr	r3, [pc, #476]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a76      	ldr	r2, [pc, #472]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	4b74      	ldr	r3, [pc, #464]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	4a73      	ldr	r2, [pc, #460]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004932:	f023 0304 	bic.w	r3, r3, #4
 8004936:	6713      	str	r3, [r2, #112]	; 0x70
 8004938:	e01c      	b.n	8004974 <HAL_RCC_OscConfig+0x5e0>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b05      	cmp	r3, #5
 8004940:	d10c      	bne.n	800495c <HAL_RCC_OscConfig+0x5c8>
 8004942:	4b6f      	ldr	r3, [pc, #444]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	4a6e      	ldr	r2, [pc, #440]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	6713      	str	r3, [r2, #112]	; 0x70
 800494e:	4b6c      	ldr	r3, [pc, #432]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	4a6b      	ldr	r2, [pc, #428]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	6713      	str	r3, [r2, #112]	; 0x70
 800495a:	e00b      	b.n	8004974 <HAL_RCC_OscConfig+0x5e0>
 800495c:	4b68      	ldr	r3, [pc, #416]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a67      	ldr	r2, [pc, #412]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	4b65      	ldr	r3, [pc, #404]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a64      	ldr	r2, [pc, #400]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 800496e:	f023 0304 	bic.w	r3, r3, #4
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fe fac2 	bl	8002f04 <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004982:	e00a      	b.n	800499a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004984:	f7fe fabe 	bl	8002f04 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e123      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800499a:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ee      	beq.n	8004984 <HAL_RCC_OscConfig+0x5f0>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fe faac 	bl	8002f04 <HAL_GetTick>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ae:	e00a      	b.n	80049c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b0:	f7fe faa8 	bl	8002f04 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e10d      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049c6:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1ee      	bne.n	80049b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8102 	beq.w	8004be0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049dc:	4b48      	ldr	r3, [pc, #288]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049e4:	2b18      	cmp	r3, #24
 80049e6:	f000 80bd 	beq.w	8004b64 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	f040 809e 	bne.w	8004b30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f4:	4b42      	ldr	r3, [pc, #264]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a41      	ldr	r2, [pc, #260]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 80049fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fe fa80 	bl	8002f04 <HAL_GetTick>
 8004a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fe fa7c 	bl	8002f04 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0e3      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a1a:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a2a:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <HAL_RCC_OscConfig+0x774>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	4931      	ldr	r1, [pc, #196]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	3b01      	subs	r3, #1
 8004a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	025b      	lsls	r3, r3, #9
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a70:	4923      	ldr	r1, [pc, #140]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a76:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a82:	4b1f      	ldr	r3, [pc, #124]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a86:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <HAL_RCC_OscConfig+0x778>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a8e:	00d2      	lsls	r2, r2, #3
 8004a90:	491b      	ldr	r1, [pc, #108]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	f023 020c 	bic.w	r2, r3, #12
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4917      	ldr	r1, [pc, #92]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f023 0202 	bic.w	r2, r3, #2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	4912      	ldr	r1, [pc, #72]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	4a0d      	ldr	r2, [pc, #52]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4a07      	ldr	r2, [pc, #28]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <HAL_RCC_OscConfig+0x76c>)
 8004af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fe fa05 	bl	8002f04 <HAL_GetTick>
 8004afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004afc:	e011      	b.n	8004b22 <HAL_RCC_OscConfig+0x78e>
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400
 8004b04:	58024800 	.word	0x58024800
 8004b08:	fffffc0c 	.word	0xfffffc0c
 8004b0c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fe f9f8 	bl	8002f04 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e05f      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b22:	4b32      	ldr	r3, [pc, #200]	; (8004bec <HAL_RCC_OscConfig+0x858>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x77c>
 8004b2e:	e057      	b.n	8004be0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b30:	4b2e      	ldr	r3, [pc, #184]	; (8004bec <HAL_RCC_OscConfig+0x858>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <HAL_RCC_OscConfig+0x858>)
 8004b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fe f9e2 	bl	8002f04 <HAL_GetTick>
 8004b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fe f9de 	bl	8002f04 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e045      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b56:	4b25      	ldr	r3, [pc, #148]	; (8004bec <HAL_RCC_OscConfig+0x858>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x7b0>
 8004b62:	e03d      	b.n	8004be0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b64:	4b21      	ldr	r3, [pc, #132]	; (8004bec <HAL_RCC_OscConfig+0x858>)
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCC_OscConfig+0x858>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d031      	beq.n	8004bdc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f003 0203 	and.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d12a      	bne.n	8004bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d122      	bne.n	8004bdc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d11a      	bne.n	8004bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d111      	bne.n	8004bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	0c1b      	lsrs	r3, r3, #16
 8004bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d108      	bne.n	8004bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	0e1b      	lsrs	r3, r3, #24
 8004bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3730      	adds	r7, #48	; 0x30
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400

08004bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e19c      	b.n	8004f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b8a      	ldr	r3, [pc, #552]	; (8004e30 <HAL_RCC_ClockConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d910      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b87      	ldr	r3, [pc, #540]	; (8004e30 <HAL_RCC_ClockConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 020f 	bic.w	r2, r3, #15
 8004c1a:	4985      	ldr	r1, [pc, #532]	; (8004e30 <HAL_RCC_ClockConfig+0x240>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b83      	ldr	r3, [pc, #524]	; (8004e30 <HAL_RCC_ClockConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e184      	b.n	8004f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d010      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	4b7b      	ldr	r3, [pc, #492]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d908      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c50:	4b78      	ldr	r3, [pc, #480]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	4975      	ldr	r1, [pc, #468]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d010      	beq.n	8004c90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	4b70      	ldr	r3, [pc, #448]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d908      	bls.n	8004c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c7e:	4b6d      	ldr	r3, [pc, #436]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	496a      	ldr	r1, [pc, #424]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	4b64      	ldr	r3, [pc, #400]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d908      	bls.n	8004cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cac:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	495e      	ldr	r1, [pc, #376]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d908      	bls.n	8004cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004cda:	4b56      	ldr	r3, [pc, #344]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	4953      	ldr	r1, [pc, #332]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d908      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f023 020f 	bic.w	r2, r3, #15
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4947      	ldr	r1, [pc, #284]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d055      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d26:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4940      	ldr	r1, [pc, #256]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d40:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d121      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0f6      	b.n	8004f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d58:	4b36      	ldr	r3, [pc, #216]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d115      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0ea      	b.n	8004f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0de      	b.n	8004f3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d80:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0d6      	b.n	8004f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d90:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f023 0207 	bic.w	r2, r3, #7
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4925      	ldr	r1, [pc, #148]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da2:	f7fe f8af 	bl	8002f04 <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004daa:	f7fe f8ab 	bl	8002f04 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0be      	b.n	8004f3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc0:	4b1c      	ldr	r3, [pc, #112]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d1eb      	bne.n	8004daa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d010      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d208      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f023 020f 	bic.w	r2, r3, #15
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	490e      	ldr	r1, [pc, #56]	; (8004e34 <HAL_RCC_ClockConfig+0x244>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_RCC_ClockConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d214      	bcs.n	8004e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_RCC_ClockConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 020f 	bic.w	r2, r3, #15
 8004e16:	4906      	ldr	r1, [pc, #24]	; (8004e30 <HAL_RCC_ClockConfig+0x240>)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <HAL_RCC_ClockConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e086      	b.n	8004f3e <HAL_RCC_ClockConfig+0x34e>
 8004e30:	52002000 	.word	0x52002000
 8004e34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d010      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d208      	bcs.n	8004e66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e54:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	4939      	ldr	r1, [pc, #228]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d010      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	4b34      	ldr	r3, [pc, #208]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d208      	bcs.n	8004e94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	492e      	ldr	r1, [pc, #184]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d010      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	4b28      	ldr	r3, [pc, #160]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d208      	bcs.n	8004ec2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eb0:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	4922      	ldr	r1, [pc, #136]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d010      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d208      	bcs.n	8004ef0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	4917      	ldr	r1, [pc, #92]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ef0:	f000 f834 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	4912      	ldr	r1, [pc, #72]	; (8004f4c <HAL_RCC_ClockConfig+0x35c>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_RCC_ClockConfig+0x358>)
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <HAL_RCC_ClockConfig+0x35c>)
 8004f18:	5cd3      	ldrb	r3, [r2, r3]
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
 8004f24:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <HAL_RCC_ClockConfig+0x360>)
 8004f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f28:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <HAL_RCC_ClockConfig+0x364>)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <HAL_RCC_ClockConfig+0x368>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fd fde2 	bl	8002afc <HAL_InitTick>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	08007018 	.word	0x08007018
 8004f50:	2400000c 	.word	0x2400000c
 8004f54:	24000008 	.word	0x24000008
 8004f58:	24000010 	.word	0x24000010

08004f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b089      	sub	sp, #36	; 0x24
 8004f60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f62:	4bb3      	ldr	r3, [pc, #716]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f6a:	2b18      	cmp	r3, #24
 8004f6c:	f200 8155 	bhi.w	800521a <HAL_RCC_GetSysClockFreq+0x2be>
 8004f70:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	08004fdd 	.word	0x08004fdd
 8004f7c:	0800521b 	.word	0x0800521b
 8004f80:	0800521b 	.word	0x0800521b
 8004f84:	0800521b 	.word	0x0800521b
 8004f88:	0800521b 	.word	0x0800521b
 8004f8c:	0800521b 	.word	0x0800521b
 8004f90:	0800521b 	.word	0x0800521b
 8004f94:	0800521b 	.word	0x0800521b
 8004f98:	08005003 	.word	0x08005003
 8004f9c:	0800521b 	.word	0x0800521b
 8004fa0:	0800521b 	.word	0x0800521b
 8004fa4:	0800521b 	.word	0x0800521b
 8004fa8:	0800521b 	.word	0x0800521b
 8004fac:	0800521b 	.word	0x0800521b
 8004fb0:	0800521b 	.word	0x0800521b
 8004fb4:	0800521b 	.word	0x0800521b
 8004fb8:	08005009 	.word	0x08005009
 8004fbc:	0800521b 	.word	0x0800521b
 8004fc0:	0800521b 	.word	0x0800521b
 8004fc4:	0800521b 	.word	0x0800521b
 8004fc8:	0800521b 	.word	0x0800521b
 8004fcc:	0800521b 	.word	0x0800521b
 8004fd0:	0800521b 	.word	0x0800521b
 8004fd4:	0800521b 	.word	0x0800521b
 8004fd8:	0800500f 	.word	0x0800500f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fdc:	4b94      	ldr	r3, [pc, #592]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d009      	beq.n	8004ffc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fe8:	4b91      	ldr	r3, [pc, #580]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	4a90      	ldr	r2, [pc, #576]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004ffa:	e111      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ffc:	4b8d      	ldr	r3, [pc, #564]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ffe:	61bb      	str	r3, [r7, #24]
    break;
 8005000:	e10e      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005002:	4b8d      	ldr	r3, [pc, #564]	; (8005238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005004:	61bb      	str	r3, [r7, #24]
    break;
 8005006:	e10b      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005008:	4b8c      	ldr	r3, [pc, #560]	; (800523c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800500a:	61bb      	str	r3, [r7, #24]
    break;
 800500c:	e108      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800500e:	4b88      	ldr	r3, [pc, #544]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005018:	4b85      	ldr	r3, [pc, #532]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	091b      	lsrs	r3, r3, #4
 800501e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005022:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005024:	4b82      	ldr	r3, [pc, #520]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800502e:	4b80      	ldr	r3, [pc, #512]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	08db      	lsrs	r3, r3, #3
 8005034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80e1 	beq.w	8005214 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b02      	cmp	r3, #2
 8005056:	f000 8083 	beq.w	8005160 <HAL_RCC_GetSysClockFreq+0x204>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b02      	cmp	r3, #2
 800505e:	f200 80a1 	bhi.w	80051a4 <HAL_RCC_GetSysClockFreq+0x248>
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x114>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d056      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0x1c0>
 800506e:	e099      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005070:	4b6f      	ldr	r3, [pc, #444]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d02d      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800507c:	4b6c      	ldr	r3, [pc, #432]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	4a6b      	ldr	r2, [pc, #428]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	ee07 3a90 	vmov	s15, r3
 8005094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b62      	ldr	r3, [pc, #392]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80050d6:	e087      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005244 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b51      	ldr	r3, [pc, #324]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80050fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511a:	e065      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005248 <HAL_RCC_GetSysClockFreq+0x2ec>
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b40      	ldr	r3, [pc, #256]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005142:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800515e:	e043      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800524c <HAL_RCC_GetSysClockFreq+0x2f0>
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a02 	vldr	s12, [r7, #8]
 8005186:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2e4>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051a2:	e021      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005248 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b6:	4b1e      	ldr	r3, [pc, #120]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	0a5b      	lsrs	r3, r3, #9
 80051ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f2:	3301      	adds	r3, #1
 80051f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005200:	edd7 6a07 	vldr	s13, [r7, #28]
 8005204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800520c:	ee17 3a90 	vmov	r3, s15
 8005210:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005212:	e005      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]
    break;
 8005218:	e002      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800521c:	61bb      	str	r3, [r7, #24]
    break;
 800521e:	bf00      	nop
  }

  return sysclockfreq;
 8005220:	69bb      	ldr	r3, [r7, #24]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3724      	adds	r7, #36	; 0x24
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
 8005234:	03d09000 	.word	0x03d09000
 8005238:	003d0900 	.word	0x003d0900
 800523c:	007a1200 	.word	0x007a1200
 8005240:	46000000 	.word	0x46000000
 8005244:	4c742400 	.word	0x4c742400
 8005248:	4a742400 	.word	0x4a742400
 800524c:	4af42400 	.word	0x4af42400

08005250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005256:	f7ff fe81 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 800525a:	4602      	mov	r2, r0
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	490f      	ldr	r1, [pc, #60]	; (80052a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005268:	5ccb      	ldrb	r3, [r1, r3]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800527e:	5cd3      	ldrb	r3, [r2, r3]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800528c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800528e:	4a07      	ldr	r2, [pc, #28]	; (80052ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005296:	681b      	ldr	r3, [r3, #0]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	58024400 	.word	0x58024400
 80052a4:	08007018 	.word	0x08007018
 80052a8:	2400000c 	.word	0x2400000c
 80052ac:	24000008 	.word	0x24000008

080052b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052b4:	f7ff ffcc 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4904      	ldr	r1, [pc, #16]	; (80052d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	58024400 	.word	0x58024400
 80052d8:	08007018 	.word	0x08007018

080052dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	223f      	movs	r2, #63	; 0x3f
 80052ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <HAL_RCC_GetClockConfig+0x7c>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0207 	and.w	r2, r3, #7
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80052f8:	4b17      	ldr	r3, [pc, #92]	; (8005358 <HAL_RCC_GetClockConfig+0x7c>)
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005304:	4b14      	ldr	r3, [pc, #80]	; (8005358 <HAL_RCC_GetClockConfig+0x7c>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f003 020f 	and.w	r2, r3, #15
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCC_GetClockConfig+0x7c>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <HAL_RCC_GetClockConfig+0x7c>)
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_GetClockConfig+0x7c>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005334:	4b08      	ldr	r3, [pc, #32]	; (8005358 <HAL_RCC_GetClockConfig+0x7c>)
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_RCC_GetClockConfig+0x80>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 020f 	and.w	r2, r3, #15
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	58024400 	.word	0x58024400
 800535c:	52002000 	.word	0x52002000

08005360 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005368:	2300      	movs	r3, #0
 800536a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800536c:	2300      	movs	r3, #0
 800536e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d03f      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005380:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005384:	d02a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800538a:	d824      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800538c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005390:	d018      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005396:	d81e      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800539c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a0:	d007      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053a2:	e018      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a4:	4ba3      	ldr	r3, [pc, #652]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	4aa2      	ldr	r2, [pc, #648]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053b0:	e015      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	2102      	movs	r1, #2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 ff17 	bl	80061ec <RCCEx_PLL2_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053c2:	e00c      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3324      	adds	r3, #36	; 0x24
 80053c8:	2102      	movs	r1, #2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 ffc0 	bl	8006350 <RCCEx_PLL3_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	75fb      	strb	r3, [r7, #23]
      break;
 80053da:	e000      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053de:	7dfb      	ldrb	r3, [r7, #23]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053e4:	4b93      	ldr	r3, [pc, #588]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f0:	4990      	ldr	r1, [pc, #576]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	650b      	str	r3, [r1, #80]	; 0x50
 80053f6:	e001      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d03d      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	2b04      	cmp	r3, #4
 800540e:	d826      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	0800542d 	.word	0x0800542d
 800541c:	0800543b 	.word	0x0800543b
 8005420:	0800544d 	.word	0x0800544d
 8005424:	08005465 	.word	0x08005465
 8005428:	08005465 	.word	0x08005465
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800542c:	4b81      	ldr	r3, [pc, #516]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	4a80      	ldr	r2, [pc, #512]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005438:	e015      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3304      	adds	r3, #4
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fed3 	bl	80061ec <RCCEx_PLL2_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800544a:	e00c      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	2100      	movs	r1, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f000 ff7c 	bl	8006350 <RCCEx_PLL3_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800545c:	e003      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	75fb      	strb	r3, [r7, #23]
      break;
 8005462:	e000      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d109      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800546c:	4b71      	ldr	r3, [pc, #452]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800546e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005470:	f023 0207 	bic.w	r2, r3, #7
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	496e      	ldr	r1, [pc, #440]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800547a:	4313      	orrs	r3, r2
 800547c:	650b      	str	r3, [r1, #80]	; 0x50
 800547e:	e001      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800548c:	2b00      	cmp	r3, #0
 800548e:	d042      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005498:	d02b      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	d825      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054a0:	2bc0      	cmp	r3, #192	; 0xc0
 80054a2:	d028      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054a4:	2bc0      	cmp	r3, #192	; 0xc0
 80054a6:	d821      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d016      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80054ac:	2b80      	cmp	r3, #128	; 0x80
 80054ae:	d81d      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d007      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80054b8:	e018      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ba:	4b5e      	ldr	r3, [pc, #376]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	4a5d      	ldr	r2, [pc, #372]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054c6:	e017      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fe8c 	bl	80061ec <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054d8:	e00e      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 ff35 	bl	8006350 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054ea:	e005      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
      break;
 80054f0:	e002      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80054f2:	bf00      	nop
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80054f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054fe:	4b4d      	ldr	r3, [pc, #308]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550a:	494a      	ldr	r1, [pc, #296]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800550c:	4313      	orrs	r3, r2
 800550e:	650b      	str	r3, [r1, #80]	; 0x50
 8005510:	e001      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551e:	2b00      	cmp	r3, #0
 8005520:	d049      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005528:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800552c:	d030      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800552e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005532:	d82a      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005534:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005538:	d02c      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800553a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800553e:	d824      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005544:	d018      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800554a:	d81e      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005554:	d007      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005556:	e018      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005558:	4b36      	ldr	r3, [pc, #216]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a35      	ldr	r2, [pc, #212]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800555e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005564:	e017      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fe3d 	bl	80061ec <RCCEx_PLL2_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005576:	e00e      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3324      	adds	r3, #36	; 0x24
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fee6 	bl	8006350 <RCCEx_PLL3_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005588:	e005      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
      break;
 800558e:	e002      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800559e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055aa:	4922      	ldr	r1, [pc, #136]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	658b      	str	r3, [r1, #88]	; 0x58
 80055b0:	e001      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d04b      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055cc:	d030      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80055ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055d2:	d82a      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055d8:	d02e      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80055da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055de:	d824      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e4:	d018      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80055e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ea:	d81e      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80055f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055f4:	d007      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80055f6:	e018      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	4a0d      	ldr	r2, [pc, #52]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005604:	e019      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fded 	bl	80061ec <RCCEx_PLL2_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005616:	e010      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fe96 	bl	8006350 <RCCEx_PLL3_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005628:	e007      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
      break;
 800562e:	e004      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005630:	bf00      	nop
 8005632:	e002      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005634:	58024400 	.word	0x58024400
      break;
 8005638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005640:	4b99      	ldr	r3, [pc, #612]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800564e:	4996      	ldr	r1, [pc, #600]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005650:	4313      	orrs	r3, r2
 8005652:	658b      	str	r3, [r1, #88]	; 0x58
 8005654:	e001      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d032      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566a:	2b30      	cmp	r3, #48	; 0x30
 800566c:	d01c      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800566e:	2b30      	cmp	r3, #48	; 0x30
 8005670:	d817      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005672:	2b20      	cmp	r3, #32
 8005674:	d00c      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005676:	2b20      	cmp	r3, #32
 8005678:	d813      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800567e:	2b10      	cmp	r3, #16
 8005680:	d10f      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005682:	4b89      	ldr	r3, [pc, #548]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	4a88      	ldr	r2, [pc, #544]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800568c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800568e:	e00e      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fda8 	bl	80061ec <RCCEx_PLL2_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80056a0:	e005      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
      break;
 80056a6:	e002      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80056ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d109      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056b4:	4b7c      	ldr	r3, [pc, #496]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c0:	4979      	ldr	r1, [pc, #484]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056c6:	e001      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d047      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e0:	d030      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80056e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e6:	d82a      	bhi.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ec:	d02c      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80056ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056f2:	d824      	bhi.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f8:	d018      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80056fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fe:	d81e      	bhi.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d007      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800570a:	e018      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570c:	4b66      	ldr	r3, [pc, #408]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a65      	ldr	r2, [pc, #404]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005718:	e017      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3304      	adds	r3, #4
 800571e:	2100      	movs	r1, #0
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fd63 	bl	80061ec <RCCEx_PLL2_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800572a:	e00e      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3324      	adds	r3, #36	; 0x24
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fe0c 	bl	8006350 <RCCEx_PLL3_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800573c:	e005      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
      break;
 8005742:	e002      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005750:	4b55      	ldr	r3, [pc, #340]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005754:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575c:	4952      	ldr	r1, [pc, #328]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800575e:	4313      	orrs	r3, r2
 8005760:	650b      	str	r3, [r1, #80]	; 0x50
 8005762:	e001      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d049      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800577c:	d02e      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800577e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005782:	d828      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005784:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005788:	d02a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800578a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800578e:	d822      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005790:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005794:	d026      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005796:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800579a:	d81c      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800579c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a0:	d010      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80057a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a6:	d816      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01d      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d111      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	2101      	movs	r1, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fd17 	bl	80061ec <RCCEx_PLL2_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057c2:	e012      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3324      	adds	r3, #36	; 0x24
 80057c8:	2101      	movs	r1, #1
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fdc0 	bl	8006350 <RCCEx_PLL3_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057d4:	e009      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	75fb      	strb	r3, [r7, #23]
      break;
 80057da:	e006      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057dc:	bf00      	nop
 80057de:	e004      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057e0:	bf00      	nop
 80057e2:	e002      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057e4:	bf00      	nop
 80057e6:	e000      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057f0:	4b2d      	ldr	r3, [pc, #180]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fc:	492a      	ldr	r1, [pc, #168]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	650b      	str	r3, [r1, #80]	; 0x50
 8005802:	e001      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d04d      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800581a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800581e:	d02e      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005824:	d828      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582a:	d02a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d822      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005832:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005836:	d026      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005838:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800583c:	d81c      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800583e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005842:	d010      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d816      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01d      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800584e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005852:	d111      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	2101      	movs	r1, #1
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fcc6 	bl	80061ec <RCCEx_PLL2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005864:	e012      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3324      	adds	r3, #36	; 0x24
 800586a:	2101      	movs	r1, #1
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fd6f 	bl	8006350 <RCCEx_PLL3_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005876:	e009      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
      break;
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800587e:	bf00      	nop
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800588a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058a0:	4901      	ldr	r1, [pc, #4]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	658b      	str	r3, [r1, #88]	; 0x58
 80058a6:	e003      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80058a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d02f      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c4:	d00e      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80058c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ca:	d814      	bhi.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d015      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80058d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058d4:	d10f      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d6:	4baf      	ldr	r3, [pc, #700]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	4aae      	ldr	r2, [pc, #696]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058e2:	e00c      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	2101      	movs	r1, #1
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fc7e 	bl	80061ec <RCCEx_PLL2_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058f4:	e003      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
      break;
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80058fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005904:	4ba3      	ldr	r3, [pc, #652]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005910:	49a0      	ldr	r1, [pc, #640]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005912:	4313      	orrs	r3, r2
 8005914:	650b      	str	r3, [r1, #80]	; 0x50
 8005916:	e001      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d032      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592c:	2b03      	cmp	r3, #3
 800592e:	d81b      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	0800596f 	.word	0x0800596f
 800593c:	08005949 	.word	0x08005949
 8005940:	08005957 	.word	0x08005957
 8005944:	0800596f 	.word	0x0800596f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005948:	4b92      	ldr	r3, [pc, #584]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a91      	ldr	r2, [pc, #580]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800594e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005954:	e00c      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3304      	adds	r3, #4
 800595a:	2102      	movs	r1, #2
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fc45 	bl	80061ec <RCCEx_PLL2_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005966:	e003      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	e000      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800596e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005976:	4b87      	ldr	r3, [pc, #540]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	f023 0203 	bic.w	r2, r3, #3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	4984      	ldr	r1, [pc, #528]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005984:	4313      	orrs	r3, r2
 8005986:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005988:	e001      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8086 	beq.w	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800599c:	4b7e      	ldr	r3, [pc, #504]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a7d      	ldr	r2, [pc, #500]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80059a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059a8:	f7fd faac 	bl	8002f04 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ae:	e009      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b0:	f7fd faa8 	bl	8002f04 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	; 0x64
 80059bc:	d902      	bls.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	75fb      	strb	r3, [r7, #23]
        break;
 80059c2:	e005      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059c4:	4b74      	ldr	r3, [pc, #464]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ef      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d166      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059d6:	4b6f      	ldr	r3, [pc, #444]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059e0:	4053      	eors	r3, r2
 80059e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d013      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059ea:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059f4:	4b67      	ldr	r3, [pc, #412]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f8:	4a66      	ldr	r2, [pc, #408]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a00:	4b64      	ldr	r3, [pc, #400]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4a63      	ldr	r2, [pc, #396]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a0c:	4a61      	ldr	r2, [pc, #388]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1c:	d115      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fd fa71 	bl	8002f04 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a24:	e00b      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a26:	f7fd fa6d 	bl	8002f04 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d902      	bls.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	75fb      	strb	r3, [r7, #23]
            break;
 8005a3c:	e005      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a3e:	4b55      	ldr	r3, [pc, #340]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ed      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d126      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a5e:	d10d      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005a60:	4b4c      	ldr	r3, [pc, #304]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a6e:	0919      	lsrs	r1, r3, #4
 8005a70:	4b4a      	ldr	r3, [pc, #296]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005a72:	400b      	ands	r3, r1
 8005a74:	4947      	ldr	r1, [pc, #284]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	610b      	str	r3, [r1, #16]
 8005a7a:	e005      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005a7c:	4b45      	ldr	r3, [pc, #276]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	4a44      	ldr	r2, [pc, #272]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a86:	6113      	str	r3, [r2, #16]
 8005a88:	4b42      	ldr	r3, [pc, #264]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a96:	493f      	ldr	r1, [pc, #252]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	670b      	str	r3, [r1, #112]	; 0x70
 8005a9c:	e004      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	75bb      	strb	r3, [r7, #22]
 8005aa2:	e001      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8085 	beq.w	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aba:	2b28      	cmp	r3, #40	; 0x28
 8005abc:	d866      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005ba1 	.word	0x08005ba1
 8005ac8:	08005b8d 	.word	0x08005b8d
 8005acc:	08005b8d 	.word	0x08005b8d
 8005ad0:	08005b8d 	.word	0x08005b8d
 8005ad4:	08005b8d 	.word	0x08005b8d
 8005ad8:	08005b8d 	.word	0x08005b8d
 8005adc:	08005b8d 	.word	0x08005b8d
 8005ae0:	08005b8d 	.word	0x08005b8d
 8005ae4:	08005b69 	.word	0x08005b69
 8005ae8:	08005b8d 	.word	0x08005b8d
 8005aec:	08005b8d 	.word	0x08005b8d
 8005af0:	08005b8d 	.word	0x08005b8d
 8005af4:	08005b8d 	.word	0x08005b8d
 8005af8:	08005b8d 	.word	0x08005b8d
 8005afc:	08005b8d 	.word	0x08005b8d
 8005b00:	08005b8d 	.word	0x08005b8d
 8005b04:	08005b7b 	.word	0x08005b7b
 8005b08:	08005b8d 	.word	0x08005b8d
 8005b0c:	08005b8d 	.word	0x08005b8d
 8005b10:	08005b8d 	.word	0x08005b8d
 8005b14:	08005b8d 	.word	0x08005b8d
 8005b18:	08005b8d 	.word	0x08005b8d
 8005b1c:	08005b8d 	.word	0x08005b8d
 8005b20:	08005b8d 	.word	0x08005b8d
 8005b24:	08005ba1 	.word	0x08005ba1
 8005b28:	08005b8d 	.word	0x08005b8d
 8005b2c:	08005b8d 	.word	0x08005b8d
 8005b30:	08005b8d 	.word	0x08005b8d
 8005b34:	08005b8d 	.word	0x08005b8d
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005b8d 	.word	0x08005b8d
 8005b40:	08005b8d 	.word	0x08005b8d
 8005b44:	08005ba1 	.word	0x08005ba1
 8005b48:	08005b8d 	.word	0x08005b8d
 8005b4c:	08005b8d 	.word	0x08005b8d
 8005b50:	08005b8d 	.word	0x08005b8d
 8005b54:	08005b8d 	.word	0x08005b8d
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	08005ba1 	.word	0x08005ba1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fb3c 	bl	80061ec <RCCEx_PLL2_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b78:	e013      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3324      	adds	r3, #36	; 0x24
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fbe5 	bl	8006350 <RCCEx_PLL3_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b90:	e007      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b92:	bf00      	nop
 8005b94:	58024400 	.word	0x58024400
 8005b98:	58024800 	.word	0x58024800
 8005b9c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ba8:	4b96      	ldr	r3, [pc, #600]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb4:	4993      	ldr	r1, [pc, #588]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	654b      	str	r3, [r1, #84]	; 0x54
 8005bba:	e001      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d038      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	d821      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005bd4:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c1f 	.word	0x08005c1f
 8005be0:	08005bf5 	.word	0x08005bf5
 8005be4:	08005c07 	.word	0x08005c07
 8005be8:	08005c1f 	.word	0x08005c1f
 8005bec:	08005c1f 	.word	0x08005c1f
 8005bf0:	08005c1f 	.word	0x08005c1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 faf6 	bl	80061ec <RCCEx_PLL2_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c04:	e00c      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3324      	adds	r3, #36	; 0x24
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fb9f 	bl	8006350 <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c16:	e003      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1c:	e000      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c26:	4b77      	ldr	r3, [pc, #476]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	f023 0207 	bic.w	r2, r3, #7
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c32:	4974      	ldr	r1, [pc, #464]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	654b      	str	r3, [r1, #84]	; 0x54
 8005c38:	e001      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d03a      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	d821      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c9f 	.word	0x08005c9f
 8005c60:	08005c75 	.word	0x08005c75
 8005c64:	08005c87 	.word	0x08005c87
 8005c68:	08005c9f 	.word	0x08005c9f
 8005c6c:	08005c9f 	.word	0x08005c9f
 8005c70:	08005c9f 	.word	0x08005c9f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	2101      	movs	r1, #1
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fab6 	bl	80061ec <RCCEx_PLL2_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c84:	e00c      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3324      	adds	r3, #36	; 0x24
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fb5f 	bl	8006350 <RCCEx_PLL3_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c96:	e003      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ca6:	4b57      	ldr	r3, [pc, #348]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	f023 0207 	bic.w	r2, r3, #7
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	4953      	ldr	r1, [pc, #332]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	658b      	str	r3, [r1, #88]	; 0x58
 8005cba:	e001      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d04b      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cd6:	d02e      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cdc:	d828      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce2:	d02a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	d822      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cee:	d026      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005cf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cf4:	d81c      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfa:	d010      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d00:	d816      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01d      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d0a:	d111      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fa6a 	bl	80061ec <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d1c:	e012      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3324      	adds	r3, #36	; 0x24
 8005d22:	2102      	movs	r1, #2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fb13 	bl	8006350 <RCCEx_PLL3_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d2e:	e009      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
      break;
 8005d34:	e006      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d36:	bf00      	nop
 8005d38:	e004      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e002      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d3e:	bf00      	nop
 8005d40:	e000      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d4a:	4b2e      	ldr	r3, [pc, #184]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d58:	492a      	ldr	r1, [pc, #168]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	654b      	str	r3, [r1, #84]	; 0x54
 8005d5e:	e001      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d04d      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d7a:	d02e      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005d7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d80:	d828      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d86:	d02a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8c:	d822      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d92:	d026      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d98:	d81c      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d9e:	d010      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da4:	d816      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01d      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dae:	d111      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	2100      	movs	r1, #0
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fa18 	bl	80061ec <RCCEx_PLL2_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005dc0:	e012      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3324      	adds	r3, #36	; 0x24
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fac1 	bl	8006350 <RCCEx_PLL3_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005dd2:	e009      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd8:	e006      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dda:	bf00      	nop
 8005ddc:	e004      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dde:	bf00      	nop
 8005de0:	e002      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005de2:	bf00      	nop
 8005de4:	e000      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dee:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dfc:	4901      	ldr	r1, [pc, #4]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	658b      	str	r3, [r1, #88]	; 0x58
 8005e02:	e003      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d04b      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e22:	d02e      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005e24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e28:	d828      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e2e:	d02a      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e34:	d822      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e3a:	d026      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005e3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e40:	d81c      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e46:	d010      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e4c:	d816      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01d      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e56:	d111      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f9c4 	bl	80061ec <RCCEx_PLL2_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e68:	e012      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3324      	adds	r3, #36	; 0x24
 8005e6e:	2102      	movs	r1, #2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fa6d 	bl	8006350 <RCCEx_PLL3_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e7a:	e009      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e80:	e006      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e82:	bf00      	nop
 8005e84:	e004      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e86:	bf00      	nop
 8005e88:	e002      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e8a:	bf00      	nop
 8005e8c:	e000      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e96:	4b9d      	ldr	r3, [pc, #628]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ea4:	4999      	ldr	r1, [pc, #612]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	658b      	str	r3, [r1, #88]	; 0x58
 8005eaa:	e001      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
 8005eae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec6:	d10a      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3324      	adds	r3, #36	; 0x24
 8005ecc:	2102      	movs	r1, #2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fa3e 	bl	8006350 <RCCEx_PLL3_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ede:	4b8b      	ldr	r3, [pc, #556]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eec:	4987      	ldr	r1, [pc, #540]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01a      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f08:	d10a      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3324      	adds	r3, #36	; 0x24
 8005f0e:	2102      	movs	r1, #2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fa1d 	bl	8006350 <RCCEx_PLL3_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f20:	4b7a      	ldr	r3, [pc, #488]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f2e:	4977      	ldr	r1, [pc, #476]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d034      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f4a:	d01d      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f50:	d817      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	d009      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005f5c:	e011      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3304      	adds	r3, #4
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f941 	bl	80061ec <RCCEx_PLL2_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f6e:	e00c      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3324      	adds	r3, #36	; 0x24
 8005f74:	2102      	movs	r1, #2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 f9ea 	bl	8006350 <RCCEx_PLL3_Config>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f80:	e003      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
      break;
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f90:	4b5e      	ldr	r3, [pc, #376]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f9e:	495b      	ldr	r1, [pc, #364]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	658b      	str	r3, [r1, #88]	; 0x58
 8005fa4:	e001      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d033      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fc0:	d01c      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005fc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fc6:	d816      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fcc:	d003      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005fce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fd2:	d007      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005fd4:	e00f      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd6:	4b4d      	ldr	r3, [pc, #308]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	4a4c      	ldr	r2, [pc, #304]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005fe2:	e00c      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3324      	adds	r3, #36	; 0x24
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 f9b0 	bl	8006350 <RCCEx_PLL3_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ff4:	e003      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006004:	4b41      	ldr	r3, [pc, #260]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006012:	493e      	ldr	r1, [pc, #248]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006014:	4313      	orrs	r3, r2
 8006016:	654b      	str	r3, [r1, #84]	; 0x54
 8006018:	e001      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d029      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006036:	d007      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006038:	e00f      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603a:	4b34      	ldr	r3, [pc, #208]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	4a33      	ldr	r2, [pc, #204]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006046:	e00b      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	2102      	movs	r1, #2
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f8cc 	bl	80061ec <RCCEx_PLL2_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006058:	e002      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
      break;
 800605e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006072:	4926      	ldr	r1, [pc, #152]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006074:	4313      	orrs	r3, r2
 8006076:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006078:	e001      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3324      	adds	r3, #36	; 0x24
 800608e:	2102      	movs	r1, #2
 8006090:	4618      	mov	r0, r3
 8006092:	f000 f95d 	bl	8006350 <RCCEx_PLL3_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d033      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b4:	d017      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80060b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ba:	d811      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c0:	d013      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80060c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c6:	d80b      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d010      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80060cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d0:	d106      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	4a0d      	ldr	r2, [pc, #52]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80060de:	e007      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
      break;
 80060e4:	e004      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10c      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006102:	4902      	ldr	r1, [pc, #8]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006104:	4313      	orrs	r3, r2
 8006106:	654b      	str	r3, [r1, #84]	; 0x54
 8006108:	e004      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800610a:	bf00      	nop
 800610c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006120:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612c:	492e      	ldr	r1, [pc, #184]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800612e:	4313      	orrs	r3, r2
 8006130:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800613e:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800614c:	4926      	ldr	r1, [pc, #152]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800614e:	4313      	orrs	r3, r2
 8006150:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800615e:	4b22      	ldr	r3, [pc, #136]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006162:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616a:	491f      	ldr	r1, [pc, #124]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800616c:	4313      	orrs	r3, r2
 800616e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00d      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800617c:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	4a19      	ldr	r2, [pc, #100]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006182:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006186:	6113      	str	r3, [r2, #16]
 8006188:	4b17      	ldr	r3, [pc, #92]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006192:	4915      	ldr	r1, [pc, #84]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006194:	4313      	orrs	r3, r2
 8006196:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da08      	bge.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ac:	490e      	ldr	r1, [pc, #56]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061cc:	4906      	ldr	r1, [pc, #24]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80061d2:	7dbb      	ldrb	r3, [r7, #22]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400

080061ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061fa:	4b53      	ldr	r3, [pc, #332]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d101      	bne.n	800620a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e099      	b.n	800633e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800620a:	4b4f      	ldr	r3, [pc, #316]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a4e      	ldr	r2, [pc, #312]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006210:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006216:	f7fc fe75 	bl	8002f04 <HAL_GetTick>
 800621a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800621c:	e008      	b.n	8006230 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800621e:	f7fc fe71 	bl	8002f04 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e086      	b.n	800633e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006230:	4b45      	ldr	r3, [pc, #276]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f0      	bne.n	800621e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800623c:	4b42      	ldr	r3, [pc, #264]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	031b      	lsls	r3, r3, #12
 800624a:	493f      	ldr	r1, [pc, #252]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 800624c:	4313      	orrs	r3, r2
 800624e:	628b      	str	r3, [r1, #40]	; 0x28
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	3b01      	subs	r3, #1
 8006256:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	025b      	lsls	r3, r3, #9
 8006262:	b29b      	uxth	r3, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	3b01      	subs	r3, #1
 800626c:	041b      	lsls	r3, r3, #16
 800626e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	3b01      	subs	r3, #1
 800627a:	061b      	lsls	r3, r3, #24
 800627c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006280:	4931      	ldr	r1, [pc, #196]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006282:	4313      	orrs	r3, r2
 8006284:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006286:	4b30      	ldr	r3, [pc, #192]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	492d      	ldr	r1, [pc, #180]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006298:	4b2b      	ldr	r3, [pc, #172]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	f023 0220 	bic.w	r2, r3, #32
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	4928      	ldr	r1, [pc, #160]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062aa:	4b27      	ldr	r3, [pc, #156]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	4a26      	ldr	r2, [pc, #152]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062b0:	f023 0310 	bic.w	r3, r3, #16
 80062b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062b6:	4b24      	ldr	r3, [pc, #144]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <RCCEx_PLL2_Config+0x160>)
 80062bc:	4013      	ands	r3, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	69d2      	ldr	r2, [r2, #28]
 80062c2:	00d2      	lsls	r2, r2, #3
 80062c4:	4920      	ldr	r1, [pc, #128]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062ca:	4b1f      	ldr	r3, [pc, #124]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062d0:	f043 0310 	orr.w	r3, r3, #16
 80062d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062dc:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	4a19      	ldr	r2, [pc, #100]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062e8:	e00f      	b.n	800630a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d106      	bne.n	80062fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062f0:	4b15      	ldr	r3, [pc, #84]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4a14      	ldr	r2, [pc, #80]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 80062f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062fc:	e005      	b.n	800630a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062fe:	4b12      	ldr	r3, [pc, #72]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	4a11      	ldr	r2, [pc, #68]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006308:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800630a:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a0e      	ldr	r2, [pc, #56]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006310:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006316:	f7fc fdf5 	bl	8002f04 <HAL_GetTick>
 800631a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800631c:	e008      	b.n	8006330 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800631e:	f7fc fdf1 	bl	8002f04 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e006      	b.n	800633e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <RCCEx_PLL2_Config+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	58024400 	.word	0x58024400
 800634c:	ffff0007 	.word	0xffff0007

08006350 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800635e:	4b53      	ldr	r3, [pc, #332]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b03      	cmp	r3, #3
 8006368:	d101      	bne.n	800636e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e099      	b.n	80064a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800636e:	4b4f      	ldr	r3, [pc, #316]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a4e      	ldr	r2, [pc, #312]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800637a:	f7fc fdc3 	bl	8002f04 <HAL_GetTick>
 800637e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006380:	e008      	b.n	8006394 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006382:	f7fc fdbf 	bl	8002f04 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e086      	b.n	80064a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006394:	4b45      	ldr	r3, [pc, #276]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063a0:	4b42      	ldr	r3, [pc, #264]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	051b      	lsls	r3, r3, #20
 80063ae:	493f      	ldr	r1, [pc, #252]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	628b      	str	r3, [r1, #40]	; 0x28
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	025b      	lsls	r3, r3, #9
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	3b01      	subs	r3, #1
 80063de:	061b      	lsls	r3, r3, #24
 80063e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063e4:	4931      	ldr	r1, [pc, #196]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063ea:	4b30      	ldr	r3, [pc, #192]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	492d      	ldr	r1, [pc, #180]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063fc:	4b2b      	ldr	r3, [pc, #172]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	4928      	ldr	r1, [pc, #160]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 800640a:	4313      	orrs	r3, r2
 800640c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800640e:	4b27      	ldr	r3, [pc, #156]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	4a26      	ldr	r2, [pc, #152]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800641a:	4b24      	ldr	r3, [pc, #144]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 800641c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641e:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <RCCEx_PLL3_Config+0x160>)
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	69d2      	ldr	r2, [r2, #28]
 8006426:	00d2      	lsls	r2, r2, #3
 8006428:	4920      	ldr	r1, [pc, #128]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800642e:	4b1f      	ldr	r3, [pc, #124]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d106      	bne.n	800644e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006440:	4b1a      	ldr	r3, [pc, #104]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	4a19      	ldr	r2, [pc, #100]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800644a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800644c:	e00f      	b.n	800646e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d106      	bne.n	8006462 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006454:	4b15      	ldr	r3, [pc, #84]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a14      	ldr	r2, [pc, #80]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 800645a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800645e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006460:	e005      	b.n	800646e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4a11      	ldr	r2, [pc, #68]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800646c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647a:	f7fc fd43 	bl	8002f04 <HAL_GetTick>
 800647e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006480:	e008      	b.n	8006494 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006482:	f7fc fd3f 	bl	8002f04 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e006      	b.n	80064a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <RCCEx_PLL3_Config+0x15c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0f0      	beq.n	8006482 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	58024400 	.word	0x58024400
 80064b0:	ffff0007 	.word	0xffff0007

080064b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e049      	b.n	800655a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f841 	bl	8006562 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f000 fa00 	bl	80068f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
	...

08006578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	d001      	beq.n	8006590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e054      	b.n	800663a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a26      	ldr	r2, [pc, #152]	; (8006648 <HAL_TIM_Base_Start_IT+0xd0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d022      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ba:	d01d      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_TIM_Base_Start_IT+0xd4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <HAL_TIM_Base_Start_IT+0xd8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_TIM_Base_Start_IT+0xdc>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_TIM_Base_Start_IT+0xe0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1c      	ldr	r2, [pc, #112]	; (800665c <HAL_TIM_Base_Start_IT+0xe4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x80>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <HAL_TIM_Base_Start_IT+0xe8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d115      	bne.n	8006624 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	4b19      	ldr	r3, [pc, #100]	; (8006664 <HAL_TIM_Base_Start_IT+0xec>)
 8006600:	4013      	ands	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b06      	cmp	r3, #6
 8006608:	d015      	beq.n	8006636 <HAL_TIM_Base_Start_IT+0xbe>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006610:	d011      	beq.n	8006636 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006622:	e008      	b.n	8006636 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e000      	b.n	8006638 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40010000 	.word	0x40010000
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00
 8006658:	40010400 	.word	0x40010400
 800665c:	40001800 	.word	0x40001800
 8006660:	40014000 	.word	0x40014000
 8006664:	00010007 	.word	0x00010007

08006668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d122      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b02      	cmp	r3, #2
 800668a:	d11b      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0202 	mvn.w	r2, #2
 8006694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f905 	bl	80068ba <HAL_TIM_IC_CaptureCallback>
 80066b0:	e005      	b.n	80066be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8f7 	bl	80068a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f908 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d122      	bne.n	8006718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d11b      	bne.n	8006718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0204 	mvn.w	r2, #4
 80066e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8db 	bl	80068ba <HAL_TIM_IC_CaptureCallback>
 8006704:	e005      	b.n	8006712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8cd 	bl	80068a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f8de 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b08      	cmp	r3, #8
 8006724:	d122      	bne.n	800676c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b08      	cmp	r3, #8
 8006732:	d11b      	bne.n	800676c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0208 	mvn.w	r2, #8
 800673c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2204      	movs	r2, #4
 8006742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8b1 	bl	80068ba <HAL_TIM_IC_CaptureCallback>
 8006758:	e005      	b.n	8006766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8a3 	bl	80068a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8b4 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	2b10      	cmp	r3, #16
 8006778:	d122      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b10      	cmp	r3, #16
 8006786:	d11b      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0210 	mvn.w	r2, #16
 8006790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2208      	movs	r2, #8
 8006796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f887 	bl	80068ba <HAL_TIM_IC_CaptureCallback>
 80067ac:	e005      	b.n	80067ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f879 	bl	80068a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f88a 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10e      	bne.n	80067ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0201 	mvn.w	r2, #1
 80067e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fc f866 	bl	80028b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	d10e      	bne.n	8006818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	d107      	bne.n	8006818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f914 	bl	8006a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006826:	d10e      	bne.n	8006846 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d107      	bne.n	8006846 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800683e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f907 	bl	8006a54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d10e      	bne.n	8006872 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d107      	bne.n	8006872 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800686a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f838 	bl	80068e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b20      	cmp	r3, #32
 800687e:	d10e      	bne.n	800689e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b20      	cmp	r3, #32
 800688c:	d107      	bne.n	800689e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f06f 0220 	mvn.w	r2, #32
 8006896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f8c7 	bl	8006a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a40      	ldr	r2, [pc, #256]	; (8006a0c <TIM_Base_SetConfig+0x114>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d013      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d00f      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a3d      	ldr	r2, [pc, #244]	; (8006a10 <TIM_Base_SetConfig+0x118>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00b      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3c      	ldr	r2, [pc, #240]	; (8006a14 <TIM_Base_SetConfig+0x11c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d007      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a3b      	ldr	r2, [pc, #236]	; (8006a18 <TIM_Base_SetConfig+0x120>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_Base_SetConfig+0x40>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a3a      	ldr	r2, [pc, #232]	; (8006a1c <TIM_Base_SetConfig+0x124>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d108      	bne.n	800694a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a2f      	ldr	r2, [pc, #188]	; (8006a0c <TIM_Base_SetConfig+0x114>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d01f      	beq.n	8006992 <TIM_Base_SetConfig+0x9a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d01b      	beq.n	8006992 <TIM_Base_SetConfig+0x9a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2c      	ldr	r2, [pc, #176]	; (8006a10 <TIM_Base_SetConfig+0x118>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d017      	beq.n	8006992 <TIM_Base_SetConfig+0x9a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2b      	ldr	r2, [pc, #172]	; (8006a14 <TIM_Base_SetConfig+0x11c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d013      	beq.n	8006992 <TIM_Base_SetConfig+0x9a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a2a      	ldr	r2, [pc, #168]	; (8006a18 <TIM_Base_SetConfig+0x120>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00f      	beq.n	8006992 <TIM_Base_SetConfig+0x9a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a29      	ldr	r2, [pc, #164]	; (8006a1c <TIM_Base_SetConfig+0x124>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <TIM_Base_SetConfig+0x9a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a28      	ldr	r2, [pc, #160]	; (8006a20 <TIM_Base_SetConfig+0x128>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d007      	beq.n	8006992 <TIM_Base_SetConfig+0x9a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a27      	ldr	r2, [pc, #156]	; (8006a24 <TIM_Base_SetConfig+0x12c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_Base_SetConfig+0x9a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a26      	ldr	r2, [pc, #152]	; (8006a28 <TIM_Base_SetConfig+0x130>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d108      	bne.n	80069a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a10      	ldr	r2, [pc, #64]	; (8006a0c <TIM_Base_SetConfig+0x114>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00f      	beq.n	80069f0 <TIM_Base_SetConfig+0xf8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a12      	ldr	r2, [pc, #72]	; (8006a1c <TIM_Base_SetConfig+0x124>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00b      	beq.n	80069f0 <TIM_Base_SetConfig+0xf8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a11      	ldr	r2, [pc, #68]	; (8006a20 <TIM_Base_SetConfig+0x128>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d007      	beq.n	80069f0 <TIM_Base_SetConfig+0xf8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a10      	ldr	r2, [pc, #64]	; (8006a24 <TIM_Base_SetConfig+0x12c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_Base_SetConfig+0xf8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a0f      	ldr	r2, [pc, #60]	; (8006a28 <TIM_Base_SetConfig+0x130>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d103      	bne.n	80069f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	615a      	str	r2, [r3, #20]
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	40010400 	.word	0x40010400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800

08006a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a68:	b084      	sub	sp, #16
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	f107 001c 	add.w	r0, r7, #28
 8006a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d120      	bne.n	8006ac2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	4b2a      	ldr	r3, [pc, #168]	; (8006b3c <USB_CoreInit+0xd4>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d105      	bne.n	8006ab6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f914 	bl	8006ce4 <USB_CoreReset>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	e01a      	b.n	8006af8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f908 	bl	8006ce4 <USB_CoreReset>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8006aea:	e005      	b.n	8006af8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d116      	bne.n	8006b2c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <USB_CoreInit+0xd8>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f043 0206 	orr.w	r2, r3, #6
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f043 0220 	orr.w	r2, r3, #32
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b38:	b004      	add	sp, #16
 8006b3a:	4770      	bx	lr
 8006b3c:	ffbdffbf 	.word	0xffbdffbf
 8006b40:	03ee0000 	.word	0x03ee0000

08006b44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f023 0201 	bic.w	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d115      	bne.n	8006bb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b94:	2001      	movs	r0, #1
 8006b96:	f7fc f9c1 	bl	8002f1c <HAL_Delay>
      ms++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f891 	bl	8006cc8 <USB_GetMode>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d01e      	beq.n	8006bea <USB_SetCurrentMode+0x84>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b31      	cmp	r3, #49	; 0x31
 8006bb0:	d9f0      	bls.n	8006b94 <USB_SetCurrentMode+0x2e>
 8006bb2:	e01a      	b.n	8006bea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d115      	bne.n	8006be6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f7fc f9a8 	bl	8002f1c <HAL_Delay>
      ms++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f878 	bl	8006cc8 <USB_GetMode>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <USB_SetCurrentMode+0x84>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b31      	cmp	r3, #49	; 0x31
 8006be2:	d9f0      	bls.n	8006bc6 <USB_SetCurrentMode+0x60>
 8006be4:	e001      	b.n	8006bea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e005      	b.n	8006bf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b32      	cmp	r3, #50	; 0x32
 8006bee:	d101      	bne.n	8006bf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3301      	adds	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <USB_FlushTxFifo+0x64>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d901      	bls.n	8006c20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e01b      	b.n	8006c58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	daf2      	bge.n	8006c0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	019b      	lsls	r3, r3, #6
 8006c30:	f043 0220 	orr.w	r2, r3, #32
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a08      	ldr	r2, [pc, #32]	; (8006c64 <USB_FlushTxFifo+0x64>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d901      	bls.n	8006c4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e006      	b.n	8006c58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d0f0      	beq.n	8006c38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	00030d40 	.word	0x00030d40

08006c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4a11      	ldr	r2, [pc, #68]	; (8006cc4 <USB_FlushRxFifo+0x5c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d901      	bls.n	8006c86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e018      	b.n	8006cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	daf2      	bge.n	8006c74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2210      	movs	r2, #16
 8006c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a08      	ldr	r2, [pc, #32]	; (8006cc4 <USB_FlushRxFifo+0x5c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d901      	bls.n	8006caa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e006      	b.n	8006cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d0f0      	beq.n	8006c98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	00030d40 	.word	0x00030d40

08006cc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a13      	ldr	r2, [pc, #76]	; (8006d48 <USB_CoreReset+0x64>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d901      	bls.n	8006d02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e01b      	b.n	8006d3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	daf2      	bge.n	8006cf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f043 0201 	orr.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <USB_CoreReset+0x64>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d901      	bls.n	8006d2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e006      	b.n	8006d3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d0f0      	beq.n	8006d1a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	00030d40 	.word	0x00030d40

08006d4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b086      	sub	sp, #24
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d10a      	bne.n	8006db2 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006daa:	f043 0304 	orr.w	r3, r3, #4
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	e014      	b.n	8006ddc <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dc0:	f023 0304 	bic.w	r3, r3, #4
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	e009      	b.n	8006ddc <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd6:	f023 0304 	bic.w	r3, r3, #4
 8006dda:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ddc:	2110      	movs	r1, #16
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff ff0e 	bl	8006c00 <USB_FlushTxFifo>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ff3a 	bl	8006c68 <USB_FlushRxFifo>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e015      	b.n	8006e30 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e10:	461a      	mov	r2, r3
 8006e12:	f04f 33ff 	mov.w	r3, #4294967295
 8006e16:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e24:	461a      	mov	r2, r3
 8006e26:	2300      	movs	r3, #0
 8006e28:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d3e5      	bcc.n	8006e04 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295
 8006e44:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00b      	beq.n	8006e6a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a13      	ldr	r2, [pc, #76]	; (8006eac <USB_HostInit+0x160>)
 8006e5e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <USB_HostInit+0x164>)
 8006e64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006e68:	e009      	b.n	8006e7e <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2280      	movs	r2, #128	; 0x80
 8006e6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a10      	ldr	r2, [pc, #64]	; (8006eb4 <USB_HostInit+0x168>)
 8006e74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a0f      	ldr	r2, [pc, #60]	; (8006eb8 <USB_HostInit+0x16c>)
 8006e7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f043 0210 	orr.w	r2, r3, #16
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <USB_HostInit+0x170>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ea8:	b004      	add	sp, #16
 8006eaa:	4770      	bx	lr
 8006eac:	01000200 	.word	0x01000200
 8006eb0:	00e00300 	.word	0x00e00300
 8006eb4:	00600080 	.word	0x00600080
 8006eb8:	004000e0 	.word	0x004000e0
 8006ebc:	a3200008 	.word	0xa3200008

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4d0d      	ldr	r5, [pc, #52]	; (8006ef8 <__libc_init_array+0x38>)
 8006ec4:	4c0d      	ldr	r4, [pc, #52]	; (8006efc <__libc_init_array+0x3c>)
 8006ec6:	1b64      	subs	r4, r4, r5
 8006ec8:	10a4      	asrs	r4, r4, #2
 8006eca:	2600      	movs	r6, #0
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	4d0b      	ldr	r5, [pc, #44]	; (8006f00 <__libc_init_array+0x40>)
 8006ed2:	4c0c      	ldr	r4, [pc, #48]	; (8006f04 <__libc_init_array+0x44>)
 8006ed4:	f000 f82e 	bl	8006f34 <_init>
 8006ed8:	1b64      	subs	r4, r4, r5
 8006eda:	10a4      	asrs	r4, r4, #2
 8006edc:	2600      	movs	r6, #0
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee8:	4798      	blx	r3
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef2:	4798      	blx	r3
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08007028 	.word	0x08007028
 8006efc:	08007028 	.word	0x08007028
 8006f00:	08007028 	.word	0x08007028
 8006f04:	0800702c 	.word	0x0800702c

08006f08 <memcpy>:
 8006f08:	440a      	add	r2, r1
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f10:	d100      	bne.n	8006f14 <memcpy+0xc>
 8006f12:	4770      	bx	lr
 8006f14:	b510      	push	{r4, lr}
 8006f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1e:	4291      	cmp	r1, r2
 8006f20:	d1f9      	bne.n	8006f16 <memcpy+0xe>
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <memset>:
 8006f24:	4402      	add	r2, r0
 8006f26:	4603      	mov	r3, r0
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <memset+0xa>
 8006f2c:	4770      	bx	lr
 8006f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f32:	e7f9      	b.n	8006f28 <memset+0x4>

08006f34 <_init>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr

08006f40 <_fini>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr
