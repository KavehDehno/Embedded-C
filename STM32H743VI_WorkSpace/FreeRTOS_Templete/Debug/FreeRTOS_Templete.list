
FreeRTOS_Templete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  08009f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000787e0  24000018  08009f84  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240787f8  08009f84  000287f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027d74  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f44  00000000  00000000  00047dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0004bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c10  00000000  00000000  0004dab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039421  00000000  00000000  0004f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002524c  00000000  00000000  00088ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d7c5  00000000  00000000  000add35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022b4fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000080cc  00000000  00000000  0022b54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000018 	.word	0x24000018
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009e40 	.word	0x08009e40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400001c 	.word	0x2400001c
 80002dc:	08009e40 	.word	0x08009e40

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	240001a0 	.word	0x240001a0

08000374 <__aeabi_uldivmod>:
 8000374:	b953      	cbnz	r3, 800038c <__aeabi_uldivmod+0x18>
 8000376:	b94a      	cbnz	r2, 800038c <__aeabi_uldivmod+0x18>
 8000378:	2900      	cmp	r1, #0
 800037a:	bf08      	it	eq
 800037c:	2800      	cmpeq	r0, #0
 800037e:	bf1c      	itt	ne
 8000380:	f04f 31ff 	movne.w	r1, #4294967295
 8000384:	f04f 30ff 	movne.w	r0, #4294967295
 8000388:	f000 b974 	b.w	8000674 <__aeabi_idiv0>
 800038c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000390:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000394:	f000 f806 	bl	80003a4 <__udivmoddi4>
 8000398:	f8dd e004 	ldr.w	lr, [sp, #4]
 800039c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a0:	b004      	add	sp, #16
 80003a2:	4770      	bx	lr

080003a4 <__udivmoddi4>:
 80003a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a8:	9d08      	ldr	r5, [sp, #32]
 80003aa:	4604      	mov	r4, r0
 80003ac:	468e      	mov	lr, r1
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d14d      	bne.n	800044e <__udivmoddi4+0xaa>
 80003b2:	428a      	cmp	r2, r1
 80003b4:	4694      	mov	ip, r2
 80003b6:	d969      	bls.n	800048c <__udivmoddi4+0xe8>
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	b152      	cbz	r2, 80003d4 <__udivmoddi4+0x30>
 80003be:	fa01 f302 	lsl.w	r3, r1, r2
 80003c2:	f1c2 0120 	rsb	r1, r2, #32
 80003c6:	fa20 f101 	lsr.w	r1, r0, r1
 80003ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ce:	ea41 0e03 	orr.w	lr, r1, r3
 80003d2:	4094      	lsls	r4, r2
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	0c21      	lsrs	r1, r4, #16
 80003da:	fbbe f6f8 	udiv	r6, lr, r8
 80003de:	fa1f f78c 	uxth.w	r7, ip
 80003e2:	fb08 e316 	mls	r3, r8, r6, lr
 80003e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ea:	fb06 f107 	mul.w	r1, r6, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d90a      	bls.n	8000408 <__udivmoddi4+0x64>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80003fa:	f080 811f 	bcs.w	800063c <__udivmoddi4+0x298>
 80003fe:	4299      	cmp	r1, r3
 8000400:	f240 811c 	bls.w	800063c <__udivmoddi4+0x298>
 8000404:	3e02      	subs	r6, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb00 f707 	mul.w	r7, r0, r7
 800041c:	42a7      	cmp	r7, r4
 800041e:	d90a      	bls.n	8000436 <__udivmoddi4+0x92>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295
 8000428:	f080 810a 	bcs.w	8000640 <__udivmoddi4+0x29c>
 800042c:	42a7      	cmp	r7, r4
 800042e:	f240 8107 	bls.w	8000640 <__udivmoddi4+0x29c>
 8000432:	4464      	add	r4, ip
 8000434:	3802      	subs	r0, #2
 8000436:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043a:	1be4      	subs	r4, r4, r7
 800043c:	2600      	movs	r6, #0
 800043e:	b11d      	cbz	r5, 8000448 <__udivmoddi4+0xa4>
 8000440:	40d4      	lsrs	r4, r2
 8000442:	2300      	movs	r3, #0
 8000444:	e9c5 4300 	strd	r4, r3, [r5]
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	428b      	cmp	r3, r1
 8000450:	d909      	bls.n	8000466 <__udivmoddi4+0xc2>
 8000452:	2d00      	cmp	r5, #0
 8000454:	f000 80ef 	beq.w	8000636 <__udivmoddi4+0x292>
 8000458:	2600      	movs	r6, #0
 800045a:	e9c5 0100 	strd	r0, r1, [r5]
 800045e:	4630      	mov	r0, r6
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	fab3 f683 	clz	r6, r3
 800046a:	2e00      	cmp	r6, #0
 800046c:	d14a      	bne.n	8000504 <__udivmoddi4+0x160>
 800046e:	428b      	cmp	r3, r1
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xd4>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 80f9 	bhi.w	800066a <__udivmoddi4+0x2c6>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb61 0303 	sbc.w	r3, r1, r3
 800047e:	2001      	movs	r0, #1
 8000480:	469e      	mov	lr, r3
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e0      	beq.n	8000448 <__udivmoddi4+0xa4>
 8000486:	e9c5 4e00 	strd	r4, lr, [r5]
 800048a:	e7dd      	b.n	8000448 <__udivmoddi4+0xa4>
 800048c:	b902      	cbnz	r2, 8000490 <__udivmoddi4+0xec>
 800048e:	deff      	udf	#255	; 0xff
 8000490:	fab2 f282 	clz	r2, r2
 8000494:	2a00      	cmp	r2, #0
 8000496:	f040 8092 	bne.w	80005be <__udivmoddi4+0x21a>
 800049a:	eba1 010c 	sub.w	r1, r1, ip
 800049e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a2:	fa1f fe8c 	uxth.w	lr, ip
 80004a6:	2601      	movs	r6, #1
 80004a8:	0c20      	lsrs	r0, r4, #16
 80004aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ae:	fb07 1113 	mls	r1, r7, r3, r1
 80004b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b6:	fb0e f003 	mul.w	r0, lr, r3
 80004ba:	4288      	cmp	r0, r1
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x12c>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c6:	d202      	bcs.n	80004ce <__udivmoddi4+0x12a>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f200 80cb 	bhi.w	8000664 <__udivmoddi4+0x2c0>
 80004ce:	4643      	mov	r3, r8
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d8:	fb07 1110 	mls	r1, r7, r0, r1
 80004dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004e0:	fb0e fe00 	mul.w	lr, lr, r0
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x156>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d202      	bcs.n	80004f8 <__udivmoddi4+0x154>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	f200 80bb 	bhi.w	800066e <__udivmoddi4+0x2ca>
 80004f8:	4608      	mov	r0, r1
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x9a>
 8000504:	f1c6 0720 	rsb	r7, r6, #32
 8000508:	40b3      	lsls	r3, r6
 800050a:	fa22 fc07 	lsr.w	ip, r2, r7
 800050e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000512:	fa20 f407 	lsr.w	r4, r0, r7
 8000516:	fa01 f306 	lsl.w	r3, r1, r6
 800051a:	431c      	orrs	r4, r3
 800051c:	40f9      	lsrs	r1, r7
 800051e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000522:	fa00 f306 	lsl.w	r3, r0, r6
 8000526:	fbb1 f8f9 	udiv	r8, r1, r9
 800052a:	0c20      	lsrs	r0, r4, #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fb09 1118 	mls	r1, r9, r8, r1
 8000534:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000538:	fb08 f00e 	mul.w	r0, r8, lr
 800053c:	4288      	cmp	r0, r1
 800053e:	fa02 f206 	lsl.w	r2, r2, r6
 8000542:	d90b      	bls.n	800055c <__udivmoddi4+0x1b8>
 8000544:	eb1c 0101 	adds.w	r1, ip, r1
 8000548:	f108 3aff 	add.w	sl, r8, #4294967295
 800054c:	f080 8088 	bcs.w	8000660 <__udivmoddi4+0x2bc>
 8000550:	4288      	cmp	r0, r1
 8000552:	f240 8085 	bls.w	8000660 <__udivmoddi4+0x2bc>
 8000556:	f1a8 0802 	sub.w	r8, r8, #2
 800055a:	4461      	add	r1, ip
 800055c:	1a09      	subs	r1, r1, r0
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb1 f0f9 	udiv	r0, r1, r9
 8000564:	fb09 1110 	mls	r1, r9, r0, r1
 8000568:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	458e      	cmp	lr, r1
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x1e2>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f100 34ff 	add.w	r4, r0, #4294967295
 800057c:	d26c      	bcs.n	8000658 <__udivmoddi4+0x2b4>
 800057e:	458e      	cmp	lr, r1
 8000580:	d96a      	bls.n	8000658 <__udivmoddi4+0x2b4>
 8000582:	3802      	subs	r0, #2
 8000584:	4461      	add	r1, ip
 8000586:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800058a:	fba0 9402 	umull	r9, r4, r0, r2
 800058e:	eba1 010e 	sub.w	r1, r1, lr
 8000592:	42a1      	cmp	r1, r4
 8000594:	46c8      	mov	r8, r9
 8000596:	46a6      	mov	lr, r4
 8000598:	d356      	bcc.n	8000648 <__udivmoddi4+0x2a4>
 800059a:	d053      	beq.n	8000644 <__udivmoddi4+0x2a0>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x212>
 800059e:	ebb3 0208 	subs.w	r2, r3, r8
 80005a2:	eb61 010e 	sbc.w	r1, r1, lr
 80005a6:	fa01 f707 	lsl.w	r7, r1, r7
 80005aa:	fa22 f306 	lsr.w	r3, r2, r6
 80005ae:	40f1      	lsrs	r1, r6
 80005b0:	431f      	orrs	r7, r3
 80005b2:	e9c5 7100 	strd	r7, r1, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	40d8      	lsrs	r0, r3
 80005c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c8:	fa21 f303 	lsr.w	r3, r1, r3
 80005cc:	4091      	lsls	r1, r2
 80005ce:	4301      	orrs	r1, r0
 80005d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d4:	fa1f fe8c 	uxth.w	lr, ip
 80005d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80005dc:	fb07 3610 	mls	r6, r7, r0, r3
 80005e0:	0c0b      	lsrs	r3, r1, #16
 80005e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005e6:	fb00 f60e 	mul.w	r6, r0, lr
 80005ea:	429e      	cmp	r6, r3
 80005ec:	fa04 f402 	lsl.w	r4, r4, r2
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x260>
 80005f2:	eb1c 0303 	adds.w	r3, ip, r3
 80005f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fa:	d22f      	bcs.n	800065c <__udivmoddi4+0x2b8>
 80005fc:	429e      	cmp	r6, r3
 80005fe:	d92d      	bls.n	800065c <__udivmoddi4+0x2b8>
 8000600:	3802      	subs	r0, #2
 8000602:	4463      	add	r3, ip
 8000604:	1b9b      	subs	r3, r3, r6
 8000606:	b289      	uxth	r1, r1
 8000608:	fbb3 f6f7 	udiv	r6, r3, r7
 800060c:	fb07 3316 	mls	r3, r7, r6, r3
 8000610:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000614:	fb06 f30e 	mul.w	r3, r6, lr
 8000618:	428b      	cmp	r3, r1
 800061a:	d908      	bls.n	800062e <__udivmoddi4+0x28a>
 800061c:	eb1c 0101 	adds.w	r1, ip, r1
 8000620:	f106 38ff 	add.w	r8, r6, #4294967295
 8000624:	d216      	bcs.n	8000654 <__udivmoddi4+0x2b0>
 8000626:	428b      	cmp	r3, r1
 8000628:	d914      	bls.n	8000654 <__udivmoddi4+0x2b0>
 800062a:	3e02      	subs	r6, #2
 800062c:	4461      	add	r1, ip
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000634:	e738      	b.n	80004a8 <__udivmoddi4+0x104>
 8000636:	462e      	mov	r6, r5
 8000638:	4628      	mov	r0, r5
 800063a:	e705      	b.n	8000448 <__udivmoddi4+0xa4>
 800063c:	4606      	mov	r6, r0
 800063e:	e6e3      	b.n	8000408 <__udivmoddi4+0x64>
 8000640:	4618      	mov	r0, r3
 8000642:	e6f8      	b.n	8000436 <__udivmoddi4+0x92>
 8000644:	454b      	cmp	r3, r9
 8000646:	d2a9      	bcs.n	800059c <__udivmoddi4+0x1f8>
 8000648:	ebb9 0802 	subs.w	r8, r9, r2
 800064c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000650:	3801      	subs	r0, #1
 8000652:	e7a3      	b.n	800059c <__udivmoddi4+0x1f8>
 8000654:	4646      	mov	r6, r8
 8000656:	e7ea      	b.n	800062e <__udivmoddi4+0x28a>
 8000658:	4620      	mov	r0, r4
 800065a:	e794      	b.n	8000586 <__udivmoddi4+0x1e2>
 800065c:	4640      	mov	r0, r8
 800065e:	e7d1      	b.n	8000604 <__udivmoddi4+0x260>
 8000660:	46d0      	mov	r8, sl
 8000662:	e77b      	b.n	800055c <__udivmoddi4+0x1b8>
 8000664:	3b02      	subs	r3, #2
 8000666:	4461      	add	r1, ip
 8000668:	e732      	b.n	80004d0 <__udivmoddi4+0x12c>
 800066a:	4630      	mov	r0, r6
 800066c:	e709      	b.n	8000482 <__udivmoddi4+0xde>
 800066e:	4464      	add	r4, ip
 8000670:	3802      	subs	r0, #2
 8000672:	e742      	b.n	80004fa <__udivmoddi4+0x156>

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	6892      	ldr	r2, [r2, #8]
 80006d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	6852      	ldr	r2, [r2, #4]
 80006e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800071a:	f000 f9a9 	bl	8000a70 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <xTaskGetTickCountFromISR+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000728:	683b      	ldr	r3, [r7, #0]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	240000cc 	.word	0x240000cc

08000738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000742:	4b42      	ldr	r3, [pc, #264]	; (800084c <xTaskIncrementTick+0x114>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d175      	bne.n	8000836 <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800074a:	4b41      	ldr	r3, [pc, #260]	; (8000850 <xTaskIncrementTick+0x118>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <xTaskIncrementTick+0x118>)
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d122      	bne.n	80007a4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800075e:	4b3d      	ldr	r3, [pc, #244]	; (8000854 <xTaskIncrementTick+0x11c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00c      	beq.n	8000782 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076c:	b672      	cpsid	i
 800076e:	f383 8811 	msr	BASEPRI, r3
 8000772:	f3bf 8f6f 	isb	sy
 8000776:	f3bf 8f4f 	dsb	sy
 800077a:	b662      	cpsie	i
 800077c:	603b      	str	r3, [r7, #0]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800077e:	bf00      	nop
 8000780:	e7fe      	b.n	8000780 <xTaskIncrementTick+0x48>
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <xTaskIncrementTick+0x11c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4b33      	ldr	r3, [pc, #204]	; (8000858 <xTaskIncrementTick+0x120>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a31      	ldr	r2, [pc, #196]	; (8000854 <xTaskIncrementTick+0x11c>)
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <xTaskIncrementTick+0x120>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <xTaskIncrementTick+0x124>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a2f      	ldr	r2, [pc, #188]	; (800085c <xTaskIncrementTick+0x124>)
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	f000 f8d2 	bl	8000948 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <xTaskIncrementTick+0x128>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d348      	bcc.n	8000840 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <xTaskIncrementTick+0x11c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d104      	bne.n	80007c2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <xTaskIncrementTick+0x128>)
 80007ba:	f04f 32ff 	mov.w	r2, #4294967295
 80007be:	601a      	str	r2, [r3, #0]
                    break;
 80007c0:	e03e      	b.n	8000840 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <xTaskIncrementTick+0x11c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d203      	bcs.n	80007e2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <xTaskIncrementTick+0x128>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80007e0:	e02e      	b.n	8000840 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3304      	adds	r3, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff6a 	bl	80006c0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d004      	beq.n	80007fe <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3318      	adds	r3, #24
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff61 	bl	80006c0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4618      	mov	r0, r3
 8000802:	f001 feab 	bl	800255c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	2201      	movs	r2, #1
 800080c:	409a      	lsls	r2, r3
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <xTaskIncrementTick+0x12c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4313      	orrs	r3, r2
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <xTaskIncrementTick+0x12c>)
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4a10      	ldr	r2, [pc, #64]	; (8000868 <xTaskIncrementTick+0x130>)
 8000826:	441a      	add	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3304      	adds	r3, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4610      	mov	r0, r2
 8000830:	f7ff ff22 	bl	8000678 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000834:	e7bb      	b.n	80007ae <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <xTaskIncrementTick+0x134>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <xTaskIncrementTick+0x134>)
 800083e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000840:	697b      	ldr	r3, [r7, #20]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	240000e8 	.word	0x240000e8
 8000850:	240000cc 	.word	0x240000cc
 8000854:	240000c4 	.word	0x240000c4
 8000858:	240000c8 	.word	0x240000c8
 800085c:	240000dc 	.word	0x240000dc
 8000860:	240000e0 	.word	0x240000e0
 8000864:	240000d0 	.word	0x240000d0
 8000868:	24000038 	.word	0x24000038
 800086c:	240000d4 	.word	0x240000d4

08000870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <vTaskSwitchContext+0xc0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <vTaskSwitchContext+0xc4>)
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000884:	e04f      	b.n	8000926 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <vTaskSwitchContext+0xc4>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <vTaskSwitchContext+0xc8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	fab3 f383 	clz	r3, r3
 8000898:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	f1c3 031f 	rsb	r3, r3, #31
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	4926      	ldr	r1, [pc, #152]	; (800093c <vTaskSwitchContext+0xcc>)
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	440b      	add	r3, r1
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10c      	bne.n	80008d0 <vTaskSwitchContext+0x60>
        __asm volatile
 80008b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ba:	b672      	cpsid	i
 80008bc:	f383 8811 	msr	BASEPRI, r3
 80008c0:	f3bf 8f6f 	isb	sy
 80008c4:	f3bf 8f4f 	dsb	sy
 80008c8:	b662      	cpsie	i
 80008ca:	607b      	str	r3, [r7, #4]
    }
 80008cc:	bf00      	nop
 80008ce:	e7fe      	b.n	80008ce <vTaskSwitchContext+0x5e>
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	4613      	mov	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <vTaskSwitchContext+0xcc>)
 80008dc:	4413      	add	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	3308      	adds	r3, #8
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d104      	bne.n	8000900 <vTaskSwitchContext+0x90>
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <vTaskSwitchContext+0xd0>)
 8000908:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <vTaskSwitchContext+0xd0>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <vTaskSwitchContext+0xd4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	429a      	cmp	r2, r3
 8000914:	d102      	bne.n	800091c <vTaskSwitchContext+0xac>
 8000916:	f001 fdc3 	bl	80024a0 <SEGGER_SYSVIEW_OnIdle>
}
 800091a:	e004      	b.n	8000926 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <vTaskSwitchContext+0xd0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fdd9 	bl	80024d8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	240000e8 	.word	0x240000e8
 8000934:	240000d8 	.word	0x240000d8
 8000938:	240000d0 	.word	0x240000d0
 800093c:	24000038 	.word	0x24000038
 8000940:	24000034 	.word	0x24000034
 8000944:	240000e4 	.word	0x240000e4

08000948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <prvResetNextTaskUnblockTime+0x30>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d104      	bne.n	8000960 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <prvResetNextTaskUnblockTime+0x34>)
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800095e:	e005      	b.n	800096c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <prvResetNextTaskUnblockTime+0x30>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <prvResetNextTaskUnblockTime+0x34>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	240000c4 	.word	0x240000c4
 800097c:	240000e0 	.word	0x240000e0

08000980 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <pxCurrentTCBConst2>)
 8000982:	6819      	ldr	r1, [r3, #0]
 8000984:	6808      	ldr	r0, [r1, #0]
 8000986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800098a:	f380 8809 	msr	PSP, r0
 800098e:	f3bf 8f6f 	isb	sy
 8000992:	f04f 0000 	mov.w	r0, #0
 8000996:	f380 8811 	msr	BASEPRI, r0
 800099a:	4770      	bx	lr
 800099c:	f3af 8000 	nop.w

080009a0 <pxCurrentTCBConst2>:
 80009a0:	24000034 	.word	0x24000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop
	...

080009b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80009b0:	f3ef 8009 	mrs	r0, PSP
 80009b4:	f3bf 8f6f 	isb	sy
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <pxCurrentTCBConst>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f01e 0f10 	tst.w	lr, #16
 80009c0:	bf08      	it	eq
 80009c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80009c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ca:	6010      	str	r0, [r2, #0]
 80009cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80009d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80009d4:	b672      	cpsid	i
 80009d6:	f380 8811 	msr	BASEPRI, r0
 80009da:	f3bf 8f4f 	dsb	sy
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	b662      	cpsie	i
 80009e4:	f7ff ff44 	bl	8000870 <vTaskSwitchContext>
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	f380 8811 	msr	BASEPRI, r0
 80009f0:	bc09      	pop	{r0, r3}
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	6808      	ldr	r0, [r1, #0]
 80009f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fa:	f01e 0f10 	tst.w	lr, #16
 80009fe:	bf08      	it	eq
 8000a00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000a04:	f380 8809 	msr	PSP, r0
 8000a08:	f3bf 8f6f 	isb	sy
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <pxCurrentTCBConst>:
 8000a10:	24000034 	.word	0x24000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop

08000a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
        __asm volatile
 8000a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a22:	b672      	cpsid	i
 8000a24:	f383 8811 	msr	BASEPRI, r3
 8000a28:	f3bf 8f6f 	isb	sy
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	b662      	cpsie	i
 8000a32:	607b      	str	r3, [r7, #4]
    }
 8000a34:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8000a36:	f001 fcb9 	bl	80023ac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000a3a:	f7ff fe7d 	bl	8000738 <xTaskIncrementTick>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8000a44:	f001 fd10 	bl	8002468 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <SysTick_Handler+0x54>)
 8000a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e001      	b.n	8000a56 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8000a52:	f001 fced 	bl	8002430 <SEGGER_SYSVIEW_RecordExitISR>
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000a60:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000ed04 	.word	0xe000ed04

08000a70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000a76:	f3ef 8305 	mrs	r3, IPSR
 8000a7a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d916      	bls.n	8000ab0 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <vPortValidateInterruptPriority+0x78>)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <vPortValidateInterruptPriority+0x7c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	7afa      	ldrb	r2, [r7, #11]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d20c      	bcs.n	8000ab0 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8000a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a9a:	b672      	cpsid	i
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f3bf 8f6f 	isb	sy
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	b662      	cpsie	i
 8000aaa:	607b      	str	r3, [r7, #4]
    }
 8000aac:	bf00      	nop
 8000aae:	e7fe      	b.n	8000aae <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <vPortValidateInterruptPriority+0x80>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <vPortValidateInterruptPriority+0x84>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d90c      	bls.n	8000ada <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8000ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac4:	b672      	cpsid	i
 8000ac6:	f383 8811 	msr	BASEPRI, r3
 8000aca:	f3bf 8f6f 	isb	sy
 8000ace:	f3bf 8f4f 	dsb	sy
 8000ad2:	b662      	cpsie	i
 8000ad4:	603b      	str	r3, [r7, #0]
    }
 8000ad6:	bf00      	nop
 8000ad8:	e7fe      	b.n	8000ad8 <vPortValidateInterruptPriority+0x68>
    }
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e3f0 	.word	0xe000e3f0
 8000aec:	240000ec 	.word	0x240000ec
 8000af0:	e000ed0c 	.word	0xe000ed0c
 8000af4:	240000f0 	.word	0x240000f0

08000af8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <_cbSendSystemDesc+0x14>)
 8000afe:	f001 fbff 	bl	8002300 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <_cbSendSystemDesc+0x18>)
 8000b04:	f001 fbfc 	bl	8002300 <SEGGER_SYSVIEW_SendSysDesc>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08009e58 	.word	0x08009e58
 8000b10:	08009e88 	.word	0x08009e88

08000b14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SEGGER_SYSVIEW_Conf+0x20>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SEGGER_SYSVIEW_Conf+0x20>)
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SEGGER_SYSVIEW_Conf+0x24>)
 8000b22:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <SEGGER_SYSVIEW_Conf+0x28>)
 8000b24:	f001 f86e 	bl	8001c04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8000b28:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 8000b2c:	f001 f8b0 	bl	8001c90 <SEGGER_SYSVIEW_SetRAMBase>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	24000008 	.word	0x24000008
 8000b38:	08000af9 	.word	0x08000af9
 8000b3c:	08009ef8 	.word	0x08009ef8

08000b40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	e033      	b.n	8000bb4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8000b4c:	491e      	ldr	r1, [pc, #120]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	491a      	ldr	r1, [pc, #104]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	440b      	add	r3, r1
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	4c16      	ldr	r4, [pc, #88]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4423      	add	r3, r4
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	681c      	ldr	r4, [r3, #0]
 8000b80:	4d11      	ldr	r5, [pc, #68]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	442b      	add	r3, r5
 8000b8e:	330c      	adds	r3, #12
 8000b90:	681d      	ldr	r5, [r3, #0]
 8000b92:	4e0d      	ldr	r6, [pc, #52]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4433      	add	r3, r6
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	462b      	mov	r3, r5
 8000ba8:	4622      	mov	r2, r4
 8000baa:	f000 f854 	bl	8000c56 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <_cbSendTaskList+0x8c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d3c6      	bcc.n	8000b4c <_cbSendTaskList+0xc>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc8:	240000f4 	.word	0x240000f4
 8000bcc:	24000194 	.word	0x24000194

08000bd0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8000bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8000bd8:	f7ff fd9c 	bl	8000714 <xTaskGetTickCountFromISR>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2200      	movs	r2, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	4693      	mov	fp, r2
 8000be4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8000be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	f04f 0a00 	mov.w	sl, #0
 8000bf4:	f04f 0b00 	mov.w	fp, #0
 8000bf8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000bfc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000c00:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000c04:	4652      	mov	r2, sl
 8000c06:	465b      	mov	r3, fp
 8000c08:	1a14      	subs	r4, r2, r0
 8000c0a:	eb63 0501 	sbc.w	r5, r3, r1
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	00ab      	lsls	r3, r5, #2
 8000c18:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000c1c:	00a2      	lsls	r2, r4, #2
 8000c1e:	4614      	mov	r4, r2
 8000c20:	461d      	mov	r5, r3
 8000c22:	eb14 0800 	adds.w	r8, r4, r0
 8000c26:	eb45 0901 	adc.w	r9, r5, r1
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c3e:	4690      	mov	r8, r2
 8000c40:	4699      	mov	r9, r3
 8000c42:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8000c46:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000c56 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b08a      	sub	sp, #40	; 0x28
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2214      	movs	r2, #20
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f009 f8df 	bl	8009e30 <memset>
  TaskInfo.TaskID     = TaskID;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8000c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fa40 	bl	8002110 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8000d2e:	f001 fd33 	bl	8002798 <SEGGER_SYSVIEW_IsStarted>
 8000d32:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8000d3a:	f001 f86d 	bl	8001e18 <SEGGER_SYSVIEW_Start>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <_cbOnUARTRx+0x3c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d806      	bhi.n	8000d68 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <_cbOnUARTRx+0x3c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_cbOnUARTRx+0x3c>)
 8000d64:	701a      	strb	r2, [r3, #0]
    goto Done;
 8000d66:	e009      	b.n	8000d7c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8000d68:	f7ff ffde 	bl	8000d28 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <_cbOnUARTRx+0x3c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	2201      	movs	r2, #1
 8000d76:	4619      	mov	r1, r3
 8000d78:	f000 fb9e 	bl	80014b8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8000d7c:	bf00      	nop
}
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	24000000 	.word	0x24000000

08000d88 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000d92:	785b      	ldrb	r3, [r3, #1]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d80f      	bhi.n	8000db8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000d9a:	785b      	ldrb	r3, [r3, #1]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <_cbOnUARTTx+0x60>)
 8000da0:	5c9a      	ldrb	r2, [r3, r2]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000db0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8000db6:	e00f      	b.n	8000dd8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fa1d 	bl	8001200 <SEGGER_RTT_ReadUpBufferNoLock>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da02      	bge.n	8000dd6 <_cbOnUARTTx+0x4e>
    r = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e000      	b.n	8000dd8 <_cbOnUARTTx+0x50>
  }
Done:
 8000dd6:	bf00      	nop
  return r;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000000 	.word	0x24000000
 8000de8:	08009f00 	.word	0x08009f00

08000dec <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <SEGGER_UART_init+0x1c>)
 8000df6:	4905      	ldr	r1, [pc, #20]	; (8000e0c <SEGGER_UART_init+0x20>)
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f865 	bl	8000ec8 <HIF_UART_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08000d49 	.word	0x08000d49
 8000e0c:	08000d89 	.word	0x08000d89

08000e10 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <USART2_IRQHandler+0x80>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d011      	beq.n	8000e4a <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <USART2_IRQHandler+0x84>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f003 030b 	and.w	r3, r3, #11
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d108      	bne.n	8000e4a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <USART2_IRQHandler+0x88>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d004      	beq.n	8000e4a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <USART2_IRQHandler+0x88>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	4610      	mov	r0, r2
 8000e48:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d01a      	beq.n	8000e8a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <USART2_IRQHandler+0x8c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d015      	beq.n	8000e88 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <USART2_IRQHandler+0x8c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1dfa      	adds	r2, r7, #7
 8000e62:	4610      	mov	r0, r2
 8000e64:	4798      	blx	r3
 8000e66:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <USART2_IRQHandler+0x90>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <USART2_IRQHandler+0x90>)
 8000e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e006      	b.n	8000e8a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <USART2_IRQHandler+0x80>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <USART2_IRQHandler+0x94>)
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e000      	b.n	8000e8a <USART2_IRQHandler+0x7a>
      return;
 8000e88:	bf00      	nop
    }
  }
}
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	4000441c 	.word	0x4000441c
 8000e94:	40004424 	.word	0x40004424
 8000e98:	24000198 	.word	0x24000198
 8000e9c:	2400019c 	.word	0x2400019c
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	40004428 	.word	0x40004428

08000ea8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HIF_UART_Init+0xc8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <HIF_UART_Init+0xc8>)
 8000eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ede:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <HIF_UART_Init+0xcc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <HIF_UART_Init+0xcc>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <HIF_UART_Init+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ef8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8000f02:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <HIF_UART_Init+0xd0>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HIF_UART_Init+0xd4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f14:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HIF_UART_Init+0xd4>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HIF_UART_Init+0xd8>)
 8000f26:	f248 022d 	movw	r2, #32813	; 0x802d
 8000f2a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HIF_UART_Init+0xdc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HIF_UART_Init+0xe0>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <HIF_UART_Init+0xe4>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	085b      	lsrs	r3, r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f56:	d302      	bcc.n	8000f5e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8000f58:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f5c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <HIF_UART_Init+0xe8>)
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HIF_UART_Init+0xec>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8000f74:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HIF_UART_Init+0xf0>)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8000f7a:	2106      	movs	r1, #6
 8000f7c:	2026      	movs	r0, #38	; 0x26
 8000f7e:	f7ff fea9 	bl	8000cd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8000f82:	2026      	movs	r0, #38	; 0x26
 8000f84:	f7ff fe88 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	580244e8 	.word	0x580244e8
 8000f94:	580244e0 	.word	0x580244e0
 8000f98:	58020020 	.word	0x58020020
 8000f9c:	58020000 	.word	0x58020000
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40004404 	.word	0x40004404
 8000fa8:	40004408 	.word	0x40004408
 8000fac:	0e4e1c00 	.word	0x0e4e1c00
 8000fb0:	4000440c 	.word	0x4000440c
 8000fb4:	24000198 	.word	0x24000198
 8000fb8:	2400019c 	.word	0x2400019c

08000fbc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <_DoInit+0xa0>)
 8000fc4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000fc6:	22a8      	movs	r2, #168	; 0xa8
 8000fc8:	2100      	movs	r1, #0
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f008 ff30 	bl	8009e30 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4a20      	ldr	r2, [pc, #128]	; (8001060 <_DoInit+0xa4>)
 8000fe0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <_DoInit+0xa8>)
 8000fe6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <_DoInit+0xa4>)
 8001006:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <_DoInit+0xac>)
 800100c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2210      	movs	r2, #16
 8001012:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001026:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e00c      	b.n	800104a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f1c3 030f 	rsb	r3, r3, #15
 8001036:	4a0d      	ldr	r2, [pc, #52]	; (800106c <_DoInit+0xb0>)
 8001038:	5cd1      	ldrb	r1, [r2, r3]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	460a      	mov	r2, r1
 8001042:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3301      	adds	r3, #1
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d9ef      	bls.n	8001030 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001050:	f3bf 8f5f 	dmb	sy
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	240001a0 	.word	0x240001a0
 8001060:	08009e98 	.word	0x08009e98
 8001064:	24000248 	.word	0x24000248
 8001068:	24000648 	.word	0x24000648
 800106c:	08009f04 	.word	0x08009f04

08001070 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	d905      	bls.n	80010a0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	3b01      	subs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	e007      	b.n	80010b0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69b9      	ldr	r1, [r7, #24]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	1acb      	subs	r3, r1, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	3b01      	subs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	4293      	cmp	r3, r2
 80010bc:	bf28      	it	cs
 80010be:	4613      	movcs	r3, r2
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80010c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4293      	cmp	r3, r2
 80010c8:	bf28      	it	cs
 80010ca:	4613      	movcs	r3, r2
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80010d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	6978      	ldr	r0, [r7, #20]
 80010de:	f008 fe99 	bl	8009e14 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80010e2:	6a3a      	ldr	r2, [r7, #32]
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	4413      	add	r3, r2
 80010e8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	4413      	add	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	4413      	add	r3, r2
 8001100:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	429a      	cmp	r2, r3
 800110a:	d101      	bne.n	8001110 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001110:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1b2      	bne.n	8001086 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001120:	6a3b      	ldr	r3, [r7, #32]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800112a:	b580      	push	{r7, lr}
 800112c:	b088      	sub	sp, #32
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d911      	bls.n	8001172 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	4413      	add	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	6938      	ldr	r0, [r7, #16]
 800115e:	f008 fe59 	bl	8009e14 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001162:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	441a      	add	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001170:	e01f      	b.n	80011b2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	4413      	add	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	6938      	ldr	r0, [r7, #16]
 8001186:	f008 fe45 	bl	8009e14 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4413      	add	r3, r2
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6938      	ldr	r0, [r7, #16]
 80011a4:	f008 fe36 	bl	8009e14 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80011a8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80011ba:	b480      	push	{r7}
 80011bc:	b087      	sub	sp, #28
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d808      	bhi.n	80011e8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad2      	subs	r2, r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4413      	add	r3, r2
 80011e2:	3b01      	subs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e004      	b.n	80011f2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80011f2:	697b      	ldr	r3, [r7, #20]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800120c:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800121a:	f7ff fecf 	bl	8000fbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4a37      	ldr	r2, [pc, #220]	; (8001308 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800122c:	4413      	add	r3, r2
 800122e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	429a      	cmp	r2, r3
 800124a:	d92b      	bls.n	80012a4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4293      	cmp	r3, r2
 800125c:	bf28      	it	cs
 800125e:	4613      	movcs	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	4413      	add	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	6939      	ldr	r1, [r7, #16]
 8001270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001272:	f008 fdcf 	bl	8009e14 <memcpy>
    NumBytesRead += NumBytesRem;
 8001276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	4413      	add	r3, r2
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800127e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	4413      	add	r3, r2
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800128e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4413      	add	r3, r2
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129c:	429a      	cmp	r2, r3
 800129e:	d101      	bne.n	80012a4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf28      	it	cs
 80012b4:	4613      	movcs	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	4413      	add	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	6939      	ldr	r1, [r7, #16]
 80012cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012ce:	f008 fda1 	bl	8009e14 <memcpy>
    NumBytesRead += NumBytesRem;
 80012d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	4413      	add	r3, r2
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80012da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4413      	add	r3, r2
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80012ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4413      	add	r3, r2
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001300:	4618      	mov	r0, r3
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	240001a0 	.word	0x240001a0

0800130c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <SEGGER_RTT_ReadNoLock+0x108>)
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <SEGGER_RTT_ReadNoLock+0x1e>
 8001326:	f7ff fe49 	bl	8000fbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	3360      	adds	r3, #96	; 0x60
 8001336:	4a37      	ldr	r2, [pc, #220]	; (8001414 <SEGGER_RTT_ReadNoLock+0x108>)
 8001338:	4413      	add	r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	429a      	cmp	r2, r3
 8001356:	d92b      	bls.n	80013b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4293      	cmp	r3, r2
 8001368:	bf28      	it	cs
 800136a:	4613      	movcs	r3, r2
 800136c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	4413      	add	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	6939      	ldr	r1, [r7, #16]
 800137c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800137e:	f008 fd49 	bl	8009e14 <memcpy>
    NumBytesRead += NumBytesRem;
 8001382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	4413      	add	r3, r2
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800138a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	4413      	add	r3, r2
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800139a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	4413      	add	r3, r2
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d101      	bne.n	80013b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf28      	it	cs
 80013c0:	4613      	movcs	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d019      	beq.n	80013fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	4413      	add	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	6939      	ldr	r1, [r7, #16]
 80013d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013da:	f008 fd1b 	bl	8009e14 <memcpy>
    NumBytesRead += NumBytesRem;
 80013de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	4413      	add	r3, r2
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80013f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	4413      	add	r3, r2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001408:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800140c:	4618      	mov	r0, r3
 800140e:	3730      	adds	r7, #48	; 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	240001a0 	.word	0x240001a0

08001418 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	3360      	adds	r3, #96	; 0x60
 8001434:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d029      	beq.n	8001496 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8001442:	2b02      	cmp	r3, #2
 8001444:	d82e      	bhi.n	80014a4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800144a:	2b01      	cmp	r3, #1
 800144c:	d013      	beq.n	8001476 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800144e:	e029      	b.n	80014a4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001450:	6978      	ldr	r0, [r7, #20]
 8001452:	f7ff feb2 	bl	80011ba <_GetAvailWriteSpace>
 8001456:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d202      	bcs.n	8001466 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001464:	e021      	b.n	80014aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	69b9      	ldr	r1, [r7, #24]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff fe5b 	bl	800112a <_WriteNoCheck>
    break;
 8001474:	e019      	b.n	80014aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff fe9f 	bl	80011ba <_GetAvailWriteSpace>
 800147c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4293      	cmp	r3, r2
 8001484:	bf28      	it	cs
 8001486:	4613      	movcs	r3, r2
 8001488:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	69b9      	ldr	r1, [r7, #24]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff fe4b 	bl	800112a <_WriteNoCheck>
    break;
 8001494:	e009      	b.n	80014aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	69b9      	ldr	r1, [r7, #24]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff fde8 	bl	8001070 <_WriteBlocking>
 80014a0:	61f8      	str	r0, [r7, #28]
    break;
 80014a2:	e002      	b.n	80014aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    break;
 80014a8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80014aa:	69fb      	ldr	r3, [r7, #28]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	240001a0 	.word	0x240001a0

080014b8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80014d2:	f7ff fd73 	bl	8000fbc <_DoInit>
  SEGGER_RTT_LOCK();
 80014d6:	f3ef 8311 	mrs	r3, BASEPRI
 80014da:	f04f 0120 	mov.w	r1, #32
 80014de:	f381 8811 	msr	BASEPRI, r1
 80014e2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff ff95 	bl	8001418 <SEGGER_RTT_WriteDownBufferNoLock>
 80014ee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80014f6:	697b      	ldr	r3, [r7, #20]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	240001a0 	.word	0x240001a0

08001504 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <SEGGER_RTT_AllocUpBuffer+0x20>
 8001520:	f7ff fd4c 	bl	8000fbc <_DoInit>
  SEGGER_RTT_LOCK();
 8001524:	f3ef 8311 	mrs	r3, BASEPRI
 8001528:	f04f 0120 	mov.w	r1, #32
 800152c:	f381 8811 	msr	BASEPRI, r1
 8001530:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8001534:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800153a:	6939      	ldr	r1, [r7, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3304      	adds	r3, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbeb      	blt.n	800153a <SEGGER_RTT_AllocUpBuffer+0x36>
 8001562:	e000      	b.n	8001566 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8001564:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	da3f      	bge.n	80015f0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	3304      	adds	r3, #4
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800159a:	6939      	ldr	r1, [r7, #16]
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	3320      	adds	r3, #32
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80015ae:	6939      	ldr	r1, [r7, #16]
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	3328      	adds	r3, #40	; 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80015c2:	6939      	ldr	r1, [r7, #16]
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	3324      	adds	r3, #36	; 0x24
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80015d6:	6939      	ldr	r1, [r7, #16]
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	332c      	adds	r3, #44	; 0x2c
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80015ea:	f3bf 8f5f 	dmb	sy
 80015ee:	e002      	b.n	80015f6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80015fc:	69fb      	ldr	r3, [r7, #28]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	240001a0 	.word	0x240001a0

0800160c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8001628:	f7ff fcc8 	bl	8000fbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800162e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d82c      	bhi.n	8001690 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8001636:	f3ef 8311 	mrs	r3, BASEPRI
 800163a:	f04f 0120 	mov.w	r1, #32
 800163e:	f381 8811 	msr	BASEPRI, r1
 8001642:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	3360      	adds	r3, #96	; 0x60
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00e      	beq.n	800167a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001680:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e002      	b.n	8001696 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001698:	4618      	mov	r0, r3
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	240001a0 	.word	0x240001a0

080016a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00f      	beq.n	80016da <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80016ba:	e002      	b.n	80016c2 <_EncodeStr+0x1e>
      Len++;
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3301      	adds	r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f6      	bne.n	80016bc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d901      	bls.n	80016da <_EncodeStr+0x36>
      Len = Limit;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2bfe      	cmp	r3, #254	; 0xfe
 80016de:	d806      	bhi.n	80016ee <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60fa      	str	r2, [r7, #12]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e011      	b.n	8001712 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	60fa      	str	r2, [r7, #12]
 80016f4:	22ff      	movs	r2, #255	; 0xff
 80016f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60fa      	str	r2, [r7, #12]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	0a19      	lsrs	r1, r3, #8
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60fa      	str	r2, [r7, #12]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001716:	e00a      	b.n	800172e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	1c53      	adds	r3, r2, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1c59      	adds	r1, r3, #1
 8001722:	60f9      	str	r1, [r7, #12]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
    n++;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3f0      	bcc.n	8001718 <_EncodeStr+0x74>
  }
  return pPayload;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3307      	adds	r3, #7
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001762:	4b35      	ldr	r3, [pc, #212]	; (8001838 <_HandleIncomingPacket+0xdc>)
 8001764:	7e1b      	ldrb	r3, [r3, #24]
 8001766:	4618      	mov	r0, r3
 8001768:	1cfb      	adds	r3, r7, #3
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fdcd 	bl	800130c <SEGGER_RTT_ReadNoLock>
 8001772:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d052      	beq.n	8001820 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b80      	cmp	r3, #128	; 0x80
 800177e:	d031      	beq.n	80017e4 <_HandleIncomingPacket+0x88>
 8001780:	2b80      	cmp	r3, #128	; 0x80
 8001782:	dc40      	bgt.n	8001806 <_HandleIncomingPacket+0xaa>
 8001784:	2b07      	cmp	r3, #7
 8001786:	dc15      	bgt.n	80017b4 <_HandleIncomingPacket+0x58>
 8001788:	2b00      	cmp	r3, #0
 800178a:	dd3c      	ble.n	8001806 <_HandleIncomingPacket+0xaa>
 800178c:	3b01      	subs	r3, #1
 800178e:	2b06      	cmp	r3, #6
 8001790:	d839      	bhi.n	8001806 <_HandleIncomingPacket+0xaa>
 8001792:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <_HandleIncomingPacket+0x3c>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017bb 	.word	0x080017bb
 800179c:	080017c1 	.word	0x080017c1
 80017a0:	080017c7 	.word	0x080017c7
 80017a4:	080017cd 	.word	0x080017cd
 80017a8:	080017d3 	.word	0x080017d3
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	080017df 	.word	0x080017df
 80017b4:	2b7f      	cmp	r3, #127	; 0x7f
 80017b6:	d035      	beq.n	8001824 <_HandleIncomingPacket+0xc8>
 80017b8:	e025      	b.n	8001806 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80017ba:	f000 fb2d 	bl	8001e18 <SEGGER_SYSVIEW_Start>
      break;
 80017be:	e036      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80017c0:	f000 fbe6 	bl	8001f90 <SEGGER_SYSVIEW_Stop>
      break;
 80017c4:	e033      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80017c6:	f000 fdbf 	bl	8002348 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80017ca:	e030      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80017cc:	f000 fd84 	bl	80022d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80017d0:	e02d      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80017d2:	f000 fc03 	bl	8001fdc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80017d6:	e02a      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80017d8:	f000 ffa0 	bl	800271c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80017dc:	e027      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80017de:	f000 ff7f 	bl	80026e0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80017e2:	e024      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <_HandleIncomingPacket+0xdc>)
 80017e6:	7e1b      	ldrb	r3, [r3, #24]
 80017e8:	4618      	mov	r0, r3
 80017ea:	1cfb      	adds	r3, r7, #3
 80017ec:	2201      	movs	r2, #1
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff fd8c 	bl	800130c <SEGGER_RTT_ReadNoLock>
 80017f4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d015      	beq.n	8001828 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 feee 	bl	80025e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001804:	e010      	b.n	8001828 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	b25b      	sxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	da0e      	bge.n	800182c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <_HandleIncomingPacket+0xdc>)
 8001810:	7e1b      	ldrb	r3, [r3, #24]
 8001812:	4618      	mov	r0, r3
 8001814:	1cfb      	adds	r3, r7, #3
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff fd77 	bl	800130c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800181e:	e005      	b.n	800182c <_HandleIncomingPacket+0xd0>
    }
  }
 8001820:	bf00      	nop
 8001822:	e004      	b.n	800182e <_HandleIncomingPacket+0xd2>
      break;
 8001824:	bf00      	nop
 8001826:	e002      	b.n	800182e <_HandleIncomingPacket+0xd2>
      break;
 8001828:	bf00      	nop
 800182a:	e000      	b.n	800182e <_HandleIncomingPacket+0xd2>
      break;
 800182c:	bf00      	nop
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	24078260 	.word	0x24078260

0800183c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001842:	2301      	movs	r3, #1
 8001844:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <_TrySendOverflowPacket+0xe0>)
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
 8001856:	e00b      	b.n	8001870 <_TrySendOverflowPacket+0x34>
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	b2da      	uxtb	r2, r3
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	09db      	lsrs	r3, r3, #7
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001872:	2b7f      	cmp	r3, #127	; 0x7f
 8001874:	d8f0      	bhi.n	8001858 <_TrySendOverflowPacket+0x1c>
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800187c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001884:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <_TrySendOverflowPacket+0xe4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <_TrySendOverflowPacket+0xe0>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	623b      	str	r3, [r7, #32]
 800189e:	e00b      	b.n	80018b8 <_TrySendOverflowPacket+0x7c>
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	1c59      	adds	r1, r3, #1
 80018a8:	6279      	str	r1, [r7, #36]	; 0x24
 80018aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	09db      	lsrs	r3, r3, #7
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	2b7f      	cmp	r3, #127	; 0x7f
 80018bc:	d8f0      	bhi.n	80018a0 <_TrySendOverflowPacket+0x64>
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	627a      	str	r2, [r7, #36]	; 0x24
 80018c4:	6a3a      	ldr	r2, [r7, #32]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <_TrySendOverflowPacket+0xe0>)
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	4618      	mov	r0, r3
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	f7fe fcfe 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80018e4:	4603      	mov	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80018e8:	f7ff fade 	bl	8000ea8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <_TrySendOverflowPacket+0xe0>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_TrySendOverflowPacket+0xe0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <_TrySendOverflowPacket+0xe0>)
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e004      	b.n	8001910 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <_TrySendOverflowPacket+0xe0>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	4a03      	ldr	r2, [pc, #12]	; (800191c <_TrySendOverflowPacket+0xe0>)
 800190e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001910:	693b      	ldr	r3, [r7, #16]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3730      	adds	r7, #48	; 0x30
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24078260 	.word	0x24078260
 8001920:	e0001004 	.word	0xe0001004

08001924 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001930:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <_SendPacket+0x268>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d010      	beq.n	800195a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001938:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <_SendPacket+0x268>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8130 	beq.w	8001ba2 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001942:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <_SendPacket+0x268>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d109      	bne.n	800195e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800194a:	f7ff ff77 	bl	800183c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800194e:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <_SendPacket+0x268>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	f040 8127 	bne.w	8001ba6 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8001958:	e001      	b.n	800195e <_SendPacket+0x3a>
    goto Send;
 800195a:	bf00      	nop
 800195c:	e000      	b.n	8001960 <_SendPacket+0x3c>
Send:
 800195e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b1f      	cmp	r3, #31
 8001964:	d809      	bhi.n	800197a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001966:	4b89      	ldr	r3, [pc, #548]	; (8001b8c <_SendPacket+0x268>)
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 8118 	bne.w	8001baa <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b17      	cmp	r3, #23
 800197e:	d807      	bhi.n	8001990 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3b01      	subs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e0c4      	b.n	8001b1a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b7f      	cmp	r3, #127	; 0x7f
 800199c:	d912      	bls.n	80019c4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	09da      	lsrs	r2, r3, #7
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	3a01      	subs	r2, #1
 80019b6:	60fa      	str	r2, [r7, #12]
 80019b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	e006      	b.n	80019d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b7e      	cmp	r3, #126	; 0x7e
 80019d6:	d807      	bhi.n	80019e8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3b01      	subs	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e098      	b.n	8001b1a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ee:	d212      	bcs.n	8001a16 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	09da      	lsrs	r2, r3, #7
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	3a01      	subs	r2, #1
 8001a08:	60fa      	str	r2, [r7, #12]
 8001a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e081      	b.n	8001b1a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a1c:	d21d      	bcs.n	8001a5a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0b9a      	lsrs	r2, r3, #14
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	09db      	lsrs	r3, r3, #7
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	3a01      	subs	r2, #1
 8001a38:	60fa      	str	r2, [r7, #12]
 8001a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	3a01      	subs	r2, #1
 8001a4c:	60fa      	str	r2, [r7, #12]
 8001a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e05f      	b.n	8001b1a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a60:	d228      	bcs.n	8001ab4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0d5a      	lsrs	r2, r3, #21
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0b9b      	lsrs	r3, r3, #14
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	60fa      	str	r2, [r7, #12]
 8001a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	09db      	lsrs	r3, r3, #7
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	3a01      	subs	r2, #1
 8001a92:	60fa      	str	r2, [r7, #12]
 8001a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	60fa      	str	r2, [r7, #12]
 8001aa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e032      	b.n	8001b1a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	0f1a      	lsrs	r2, r3, #28
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0d5b      	lsrs	r3, r3, #21
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	3a01      	subs	r2, #1
 8001ace:	60fa      	str	r2, [r7, #12]
 8001ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0b9b      	lsrs	r3, r3, #14
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	3a01      	subs	r2, #1
 8001ae4:	60fa      	str	r2, [r7, #12]
 8001ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	09db      	lsrs	r3, r3, #7
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	3a01      	subs	r2, #1
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	3a01      	subs	r2, #1
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <_SendPacket+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <_SendPacket+0x268>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	e00b      	b.n	8001b4c <_SendPacket+0x228>
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	1c59      	adds	r1, r3, #1
 8001b3c:	6279      	str	r1, [r7, #36]	; 0x24
 8001b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	09db      	lsrs	r3, r3, #7
 8001b4a:	623b      	str	r3, [r7, #32]
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b50:	d8f0      	bhi.n	8001b34 <_SendPacket+0x210>
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	627a      	str	r2, [r7, #36]	; 0x24
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <_SendPacket+0x268>)
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	4618      	mov	r0, r3
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	f7fe fbb5 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001b76:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8001b78:	f7ff f996 	bl	8000ea8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001b82:	4a02      	ldr	r2, [pc, #8]	; (8001b8c <_SendPacket+0x268>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	60d3      	str	r3, [r2, #12]
 8001b88:	e010      	b.n	8001bac <_SendPacket+0x288>
 8001b8a:	bf00      	nop
 8001b8c:	24078260 	.word	0x24078260
 8001b90:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <_SendPacket+0x2d8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <_SendPacket+0x2d8>)
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e004      	b.n	8001bac <_SendPacket+0x288>
    goto SendDone;
 8001ba2:	bf00      	nop
 8001ba4:	e002      	b.n	8001bac <_SendPacket+0x288>
      goto SendDone;
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <_SendPacket+0x288>
      goto SendDone;
 8001baa:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <_SendPacket+0x2d8>)
 8001bae:	7e1b      	ldrb	r3, [r3, #24]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <_SendPacket+0x2dc>)
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	440b      	add	r3, r1
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	336c      	adds	r3, #108	; 0x6c
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <_SendPacket+0x2d8>)
 8001bc4:	7e1b      	ldrb	r3, [r3, #24]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	490d      	ldr	r1, [pc, #52]	; (8001c00 <_SendPacket+0x2dc>)
 8001bca:	4603      	mov	r3, r0
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4403      	add	r3, r0
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3370      	adds	r3, #112	; 0x70
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d00b      	beq.n	8001bf4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <_SendPacket+0x2d8>)
 8001bde:	789b      	ldrb	r3, [r3, #2]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <_SendPacket+0x2d8>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001bea:	f7ff fdb7 	bl	800175c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001bee:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <_SendPacket+0x2d8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	24078260 	.word	0x24078260
 8001c00:	240001a0 	.word	0x240001a0

08001c04 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001c12:	2300      	movs	r3, #0
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <SEGGER_SYSVIEW_Init+0x74>)
 8001c16:	4919      	ldr	r1, [pc, #100]	; (8001c7c <SEGGER_SYSVIEW_Init+0x78>)
 8001c18:	4819      	ldr	r0, [pc, #100]	; (8001c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8001c1a:	f7ff fc73 	bl	8001504 <SEGGER_RTT_AllocUpBuffer>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c24:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c28:	785a      	ldrb	r2, [r3, #1]
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c2c:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c30:	7e1b      	ldrb	r3, [r3, #24]
 8001c32:	4618      	mov	r0, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2308      	movs	r3, #8
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <SEGGER_SYSVIEW_Init+0x84>)
 8001c3c:	4910      	ldr	r1, [pc, #64]	; (8001c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8001c3e:	f7ff fce5 	bl	800160c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <SEGGER_SYSVIEW_Init+0x88>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c4e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001c56:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001c5c:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	00077c00 	.word	0x00077c00
 8001c7c:	24000658 	.word	0x24000658
 8001c80:	08009ea4 	.word	0x08009ea4
 8001c84:	24078260 	.word	0x24078260
 8001c88:	24078258 	.word	0x24078258
 8001c8c:	e0001004 	.word	0xe0001004

08001c90 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6113      	str	r3, [r2, #16]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	24078260 	.word	0x24078260

08001cb0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8001cbc:	f04f 0120 	mov.w	r1, #32
 8001cc0:	f381 8811 	msr	BASEPRI, r1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001cc8:	f7ff fd3c 	bl	8001744 <_PreparePacket>
 8001ccc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	f7ff fe26 	bl	8001924 <_SendPacket>
  RECORD_END();
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f383 8811 	msr	BASEPRI, r3
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24078290 	.word	0x24078290

08001cec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8001cfa:	f04f 0120 	mov.w	r1, #32
 8001cfe:	f381 8811 	msr	BASEPRI, r1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	4816      	ldr	r0, [pc, #88]	; (8001d60 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001d06:	f7ff fd1d 	bl	8001744 <_PreparePacket>
 8001d0a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e00b      	b.n	8001d32 <SEGGER_SYSVIEW_RecordU32+0x46>
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	61f9      	str	r1, [r7, #28]
 8001d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	09db      	lsrs	r3, r3, #7
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b7f      	cmp	r3, #127	; 0x7f
 8001d36:	d8f0      	bhi.n	8001d1a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	61fa      	str	r2, [r7, #28]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	6938      	ldr	r0, [r7, #16]
 8001d4e:	f7ff fde9 	bl	8001924 <_SendPacket>
  RECORD_END();
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f383 8811 	msr	BASEPRI, r3
}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	24078290 	.word	0x24078290

08001d64 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001d70:	f3ef 8311 	mrs	r3, BASEPRI
 8001d74:	f04f 0120 	mov.w	r1, #32
 8001d78:	f381 8811 	msr	BASEPRI, r1
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	4825      	ldr	r0, [pc, #148]	; (8001e14 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001d80:	f7ff fce0 	bl	8001744 <_PreparePacket>
 8001d84:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d92:	e00b      	b.n	8001dac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	09db      	lsrs	r3, r3, #7
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	2b7f      	cmp	r3, #127	; 0x7f
 8001db0:	d8f0      	bhi.n	8001d94 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	e00b      	b.n	8001de4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	1c59      	adds	r1, r3, #1
 8001dd4:	6279      	str	r1, [r7, #36]	; 0x24
 8001dd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	09db      	lsrs	r3, r3, #7
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2b7f      	cmp	r3, #127	; 0x7f
 8001de8:	d8f0      	bhi.n	8001dcc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	627a      	str	r2, [r7, #36]	; 0x24
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	6979      	ldr	r1, [r7, #20]
 8001dfe:	69b8      	ldr	r0, [r7, #24]
 8001e00:	f7ff fd90 	bl	8001924 <_SendPacket>
  RECORD_END();
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f383 8811 	msr	BASEPRI, r3
}
 8001e0a:	bf00      	nop
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24078290 	.word	0x24078290

08001e18 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	; 0x30
 8001e1c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001e24:	f3ef 8311 	mrs	r3, BASEPRI
 8001e28:	f04f 0120 	mov.w	r1, #32
 8001e2c:	f381 8811 	msr	BASEPRI, r1
 8001e30:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001e32:	4b54      	ldr	r3, [pc, #336]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	220a      	movs	r2, #10
 8001e38:	4953      	ldr	r1, [pc, #332]	; (8001f88 <SEGGER_SYSVIEW_Start+0x170>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fa50 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8001e46:	f7ff f82f 	bl	8000ea8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	f7ff ff30 	bl	8001cb0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001e50:	f3ef 8311 	mrs	r3, BASEPRI
 8001e54:	f04f 0120 	mov.w	r1, #32
 8001e58:	f381 8811 	msr	BASEPRI, r1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	484b      	ldr	r0, [pc, #300]	; (8001f8c <SEGGER_SYSVIEW_Start+0x174>)
 8001e60:	f7ff fc70 	bl	8001744 <_PreparePacket>
 8001e64:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6e:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e74:	e00b      	b.n	8001e8e <SEGGER_SYSVIEW_Start+0x76>
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	1c59      	adds	r1, r3, #1
 8001e7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	09db      	lsrs	r3, r3, #7
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e90:	2b7f      	cmp	r3, #127	; 0x7f
 8001e92:	d8f0      	bhi.n	8001e76 <SEGGER_SYSVIEW_Start+0x5e>
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	e00b      	b.n	8001ec8 <SEGGER_SYSVIEW_Start+0xb0>
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	1c59      	adds	r1, r3, #1
 8001eb8:	6279      	str	r1, [r7, #36]	; 0x24
 8001eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	09db      	lsrs	r3, r3, #7
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	2b7f      	cmp	r3, #127	; 0x7f
 8001ecc:	d8f0      	bhi.n	8001eb0 <SEGGER_SYSVIEW_Start+0x98>
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	e00b      	b.n	8001f02 <SEGGER_SYSVIEW_Start+0xea>
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	1c59      	adds	r1, r3, #1
 8001ef2:	61f9      	str	r1, [r7, #28]
 8001ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	09db      	lsrs	r3, r3, #7
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b7f      	cmp	r3, #127	; 0x7f
 8001f06:	d8f0      	bhi.n	8001eea <SEGGER_SYSVIEW_Start+0xd2>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	61fa      	str	r2, [r7, #28]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	e00b      	b.n	8001f3a <SEGGER_SYSVIEW_Start+0x122>
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	1c59      	adds	r1, r3, #1
 8001f2a:	6179      	str	r1, [r7, #20]
 8001f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	09db      	lsrs	r3, r3, #7
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f3e:	d8f0      	bhi.n	8001f22 <SEGGER_SYSVIEW_Start+0x10a>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	617a      	str	r2, [r7, #20]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001f50:	2218      	movs	r2, #24
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fce5 	bl	8001924 <_SendPacket>
      RECORD_END();
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001f6e:	f000 f9eb 	bl	8002348 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001f72:	f000 f9b1 	bl	80022d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001f76:	f000 fbd1 	bl	800271c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8001f7a:	bf00      	nop
 8001f7c:	3730      	adds	r7, #48	; 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	24078260 	.word	0x24078260
 8001f88:	08009f18 	.word	0x08009f18
 8001f8c:	24078290 	.word	0x24078290

08001f90 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001f96:	f3ef 8311 	mrs	r3, BASEPRI
 8001f9a:	f04f 0120 	mov.w	r1, #32
 8001f9e:	f381 8811 	msr	BASEPRI, r1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <SEGGER_SYSVIEW_Stop+0x44>)
 8001fa6:	f7ff fbcd 	bl	8001744 <_PreparePacket>
 8001faa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <SEGGER_SYSVIEW_Stop+0x48>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001fb4:	220b      	movs	r2, #11
 8001fb6:	6839      	ldr	r1, [r7, #0]
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f7ff fcb3 	bl	8001924 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <SEGGER_SYSVIEW_Stop+0x48>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f383 8811 	msr	BASEPRI, r3
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	24078290 	.word	0x24078290
 8001fd8:	24078260 	.word	0x24078260

08001fdc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8001fe6:	f04f 0120 	mov.w	r1, #32
 8001fea:	f381 8811 	msr	BASEPRI, r1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4845      	ldr	r0, [pc, #276]	; (8002108 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001ff2:	f7ff fba7 	bl	8001744 <_PreparePacket>
 8001ff6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002000:	4b42      	ldr	r3, [pc, #264]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
 8002006:	e00b      	b.n	8002020 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	b2da      	uxtb	r2, r3
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	09db      	lsrs	r3, r3, #7
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	2b7f      	cmp	r3, #127	; 0x7f
 8002024:	d8f0      	bhi.n	8002008 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800202c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	e00b      	b.n	800205a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1c59      	adds	r1, r3, #1
 800204a:	6279      	str	r1, [r7, #36]	; 0x24
 800204c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	09db      	lsrs	r3, r3, #7
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	2b7f      	cmp	r3, #127	; 0x7f
 800205e:	d8f0      	bhi.n	8002042 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	627a      	str	r2, [r7, #36]	; 0x24
 8002066:	6a3a      	ldr	r2, [r7, #32]
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	e00b      	b.n	8002094 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	1c59      	adds	r1, r3, #1
 8002084:	61f9      	str	r1, [r7, #28]
 8002086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	09db      	lsrs	r3, r3, #7
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b7f      	cmp	r3, #127	; 0x7f
 8002098:	d8f0      	bhi.n	800207c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	61fa      	str	r2, [r7, #28]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e00b      	b.n	80020cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1c59      	adds	r1, r3, #1
 80020bc:	6179      	str	r1, [r7, #20]
 80020be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	09db      	lsrs	r3, r3, #7
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b7f      	cmp	r3, #127	; 0x7f
 80020d0:	d8f0      	bhi.n	80020b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	617a      	str	r2, [r7, #20]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80020e2:	2218      	movs	r2, #24
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	68b8      	ldr	r0, [r7, #8]
 80020e8:	f7ff fc1c 	bl	8001924 <_SendPacket>
  RECORD_END();
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	4798      	blx	r3
  }
}
 8002100:	bf00      	nop
 8002102:	3730      	adds	r7, #48	; 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	24078290 	.word	0x24078290
 800210c:	24078260 	.word	0x24078260

08002110 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b092      	sub	sp, #72	; 0x48
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002118:	f3ef 8311 	mrs	r3, BASEPRI
 800211c:	f04f 0120 	mov.w	r1, #32
 8002120:	f381 8811 	msr	BASEPRI, r1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	486a      	ldr	r0, [pc, #424]	; (80022d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002128:	f7ff fb0c 	bl	8001744 <_PreparePacket>
 800212c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	647b      	str	r3, [r7, #68]	; 0x44
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	643b      	str	r3, [r7, #64]	; 0x40
 8002142:	e00b      	b.n	800215c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002146:	b2da      	uxtb	r2, r3
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	1c59      	adds	r1, r3, #1
 800214c:	6479      	str	r1, [r7, #68]	; 0x44
 800214e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002158:	09db      	lsrs	r3, r3, #7
 800215a:	643b      	str	r3, [r7, #64]	; 0x40
 800215c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215e:	2b7f      	cmp	r3, #127	; 0x7f
 8002160:	d8f0      	bhi.n	8002144 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8002162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	647a      	str	r2, [r7, #68]	; 0x44
 8002168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002170:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38
 800217c:	e00b      	b.n	8002196 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	b2da      	uxtb	r2, r3
 8002182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002184:	1c59      	adds	r1, r3, #1
 8002186:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	09db      	lsrs	r3, r3, #7
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	2b7f      	cmp	r3, #127	; 0x7f
 800219a:	d8f0      	bhi.n	800217e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800219c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	4619      	mov	r1, r3
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff fa75 	bl	80016a4 <_EncodeStr>
 80021ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80021bc:	2209      	movs	r2, #9
 80021be:	68f9      	ldr	r1, [r7, #12]
 80021c0:	6938      	ldr	r0, [r7, #16]
 80021c2:	f7ff fbaf 	bl	8001924 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	e00b      	b.n	80021f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	6379      	str	r1, [r7, #52]	; 0x34
 80021e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	09db      	lsrs	r3, r3, #7
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	2b7f      	cmp	r3, #127	; 0x7f
 80021f8:	d8f0      	bhi.n	80021dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80021fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	637a      	str	r2, [r7, #52]	; 0x34
 8002200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
 8002214:	e00b      	b.n	800222e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	b2da      	uxtb	r2, r3
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	1c59      	adds	r1, r3, #1
 800221e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	09db      	lsrs	r3, r3, #7
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	2b7f      	cmp	r3, #127	; 0x7f
 8002232:	d8f0      	bhi.n	8002216 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800223a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	e00b      	b.n	8002268 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	6279      	str	r1, [r7, #36]	; 0x24
 800225a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	09db      	lsrs	r3, r3, #7
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	2b7f      	cmp	r3, #127	; 0x7f
 800226c:	d8f0      	bhi.n	8002250 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	627a      	str	r2, [r7, #36]	; 0x24
 8002274:	6a3a      	ldr	r2, [r7, #32]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e00b      	b.n	80022a0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	61f9      	str	r1, [r7, #28]
 8002292:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	09db      	lsrs	r3, r3, #7
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b7f      	cmp	r3, #127	; 0x7f
 80022a4:	d8f0      	bhi.n	8002288 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	61fa      	str	r2, [r7, #28]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80022b6:	2215      	movs	r2, #21
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	6938      	ldr	r0, [r7, #16]
 80022bc:	f7ff fb32 	bl	8001924 <_SendPacket>
  RECORD_END();
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f383 8811 	msr	BASEPRI, r3
}
 80022c6:	bf00      	nop
 80022c8:	3748      	adds	r7, #72	; 0x48
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	24078290 	.word	0x24078290
 80022d4:	24078260 	.word	0x24078260

080022d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80022ee:	4b03      	ldr	r3, [pc, #12]	; (80022fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4798      	blx	r3
  }
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	24078260 	.word	0x24078260

08002300 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002308:	f3ef 8311 	mrs	r3, BASEPRI
 800230c:	f04f 0120 	mov.w	r1, #32
 8002310:	f381 8811 	msr	BASEPRI, r1
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	480b      	ldr	r0, [pc, #44]	; (8002344 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002318:	f7ff fa14 	bl	8001744 <_PreparePacket>
 800231c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	6938      	ldr	r0, [r7, #16]
 8002324:	f7ff f9be 	bl	80016a4 <_EncodeStr>
 8002328:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800232a:	220e      	movs	r2, #14
 800232c:	68f9      	ldr	r1, [r7, #12]
 800232e:	6938      	ldr	r0, [r7, #16]
 8002330:	f7ff faf8 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f383 8811 	msr	BASEPRI, r3
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	24078290 	.word	0x24078290

08002348 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d015      	beq.n	800238c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4798      	blx	r3
 8002368:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800236c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800236e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	000a      	movs	r2, r1
 800237c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800237e:	4613      	mov	r3, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4621      	mov	r1, r4
 8002384:	200d      	movs	r0, #13
 8002386:	f7ff fced 	bl	8001d64 <SEGGER_SYSVIEW_RecordU32x2>
 800238a:	e006      	b.n	800239a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	200c      	movs	r0, #12
 8002394:	f7ff fcaa 	bl	8001cec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}
 80023a2:	bf00      	nop
 80023a4:	24078260 	.word	0x24078260
 80023a8:	e0001004 	.word	0xe0001004

080023ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80023b2:	f3ef 8311 	mrs	r3, BASEPRI
 80023b6:	f04f 0120 	mov.w	r1, #32
 80023ba:	f381 8811 	msr	BASEPRI, r1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	4819      	ldr	r0, [pc, #100]	; (8002428 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80023c2:	f7ff f9bf 	bl	8001744 <_PreparePacket>
 80023c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	e00b      	b.n	80023f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	1c59      	adds	r1, r3, #1
 80023e8:	6179      	str	r1, [r7, #20]
 80023ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	09db      	lsrs	r3, r3, #7
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b7f      	cmp	r3, #127	; 0x7f
 80023fc:	d8f0      	bhi.n	80023e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	617a      	str	r2, [r7, #20]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800240e:	2202      	movs	r2, #2
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	68b8      	ldr	r0, [r7, #8]
 8002414:	f7ff fa86 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f383 8811 	msr	BASEPRI, r3
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	24078290 	.word	0x24078290
 800242c:	e000ed04 	.word	0xe000ed04

08002430 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002436:	f3ef 8311 	mrs	r3, BASEPRI
 800243a:	f04f 0120 	mov.w	r1, #32
 800243e:	f381 8811 	msr	BASEPRI, r1
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	4807      	ldr	r0, [pc, #28]	; (8002464 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002446:	f7ff f97d 	bl	8001744 <_PreparePacket>
 800244a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800244c:	2203      	movs	r2, #3
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f7ff fa67 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f383 8811 	msr	BASEPRI, r3
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	24078290 	.word	0x24078290

08002468 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800246e:	f3ef 8311 	mrs	r3, BASEPRI
 8002472:	f04f 0120 	mov.w	r1, #32
 8002476:	f381 8811 	msr	BASEPRI, r1
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800247e:	f7ff f961 	bl	8001744 <_PreparePacket>
 8002482:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002484:	2212      	movs	r2, #18
 8002486:	6839      	ldr	r1, [r7, #0]
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f7ff fa4b 	bl	8001924 <_SendPacket>
  RECORD_END();
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f383 8811 	msr	BASEPRI, r3
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	24078290 	.word	0x24078290

080024a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80024a6:	f3ef 8311 	mrs	r3, BASEPRI
 80024aa:	f04f 0120 	mov.w	r1, #32
 80024ae:	f381 8811 	msr	BASEPRI, r1
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	4807      	ldr	r0, [pc, #28]	; (80024d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80024b6:	f7ff f945 	bl	8001744 <_PreparePacket>
 80024ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80024bc:	2211      	movs	r2, #17
 80024be:	6839      	ldr	r1, [r7, #0]
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7ff fa2f 	bl	8001924 <_SendPacket>
  RECORD_END();
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f383 8811 	msr	BASEPRI, r3
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	24078290 	.word	0x24078290

080024d8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80024e0:	f3ef 8311 	mrs	r3, BASEPRI
 80024e4:	f04f 0120 	mov.w	r1, #32
 80024e8:	f381 8811 	msr	BASEPRI, r1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	4819      	ldr	r0, [pc, #100]	; (8002554 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80024f0:	f7ff f928 	bl	8001744 <_PreparePacket>
 80024f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	e00b      	b.n	8002526 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	1c59      	adds	r1, r3, #1
 8002516:	61f9      	str	r1, [r7, #28]
 8002518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	09db      	lsrs	r3, r3, #7
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b7f      	cmp	r3, #127	; 0x7f
 800252a:	d8f0      	bhi.n	800250e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	61fa      	str	r2, [r7, #28]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800253c:	2204      	movs	r2, #4
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	6938      	ldr	r0, [r7, #16]
 8002542:	f7ff f9ef 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f383 8811 	msr	BASEPRI, r3
}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	24078290 	.word	0x24078290
 8002558:	24078260 	.word	0x24078260

0800255c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002564:	f3ef 8311 	mrs	r3, BASEPRI
 8002568:	f04f 0120 	mov.w	r1, #32
 800256c:	f381 8811 	msr	BASEPRI, r1
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	4819      	ldr	r0, [pc, #100]	; (80025d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8002574:	f7ff f8e6 	bl	8001744 <_PreparePacket>
 8002578:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	e00b      	b.n	80025aa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	61f9      	str	r1, [r7, #28]
 800259c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	09db      	lsrs	r3, r3, #7
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b7f      	cmp	r3, #127	; 0x7f
 80025ae:	d8f0      	bhi.n	8002592 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	61fa      	str	r2, [r7, #28]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80025c0:	2206      	movs	r2, #6
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	6938      	ldr	r0, [r7, #16]
 80025c6:	f7ff f9ad 	bl	8001924 <_SendPacket>
  RECORD_END();
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f383 8811 	msr	BASEPRI, r3
}
 80025d0:	bf00      	nop
 80025d2:	3720      	adds	r7, #32
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	24078290 	.word	0x24078290
 80025dc:	24078260 	.word	0x24078260

080025e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	; 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06d      	beq.n	80026ce <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80025f2:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fc:	e008      	b.n	8002610 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	3301      	adds	r3, #1
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002614:	429a      	cmp	r2, r3
 8002616:	d3f2      	bcc.n	80025fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8002618:	e000      	b.n	800261c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800261a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d055      	beq.n	80026ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002622:	f3ef 8311 	mrs	r3, BASEPRI
 8002626:	f04f 0120 	mov.w	r1, #32
 800262a:	f381 8811 	msr	BASEPRI, r1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	482a      	ldr	r0, [pc, #168]	; (80026dc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002632:	f7ff f887 	bl	8001744 <_PreparePacket>
 8002636:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	e00b      	b.n	800265e <SEGGER_SYSVIEW_SendModule+0x7e>
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	6279      	str	r1, [r7, #36]	; 0x24
 8002650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	09db      	lsrs	r3, r3, #7
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2b7f      	cmp	r3, #127	; 0x7f
 8002662:	d8f0      	bhi.n	8002646 <SEGGER_SYSVIEW_SendModule+0x66>
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	627a      	str	r2, [r7, #36]	; 0x24
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e00b      	b.n	8002698 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	1c59      	adds	r1, r3, #1
 8002688:	61f9      	str	r1, [r7, #28]
 800268a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	09db      	lsrs	r3, r3, #7
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b7f      	cmp	r3, #127	; 0x7f
 800269c:	d8f0      	bhi.n	8002680 <SEGGER_SYSVIEW_SendModule+0xa0>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	61fa      	str	r2, [r7, #28]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	4619      	mov	r1, r3
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7fe fff4 	bl	80016a4 <_EncodeStr>
 80026bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80026be:	2216      	movs	r2, #22
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	6938      	ldr	r0, [r7, #16]
 80026c4:	f7ff f92e 	bl	8001924 <_SendPacket>
      RECORD_END();
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80026ce:	bf00      	nop
 80026d0:	3730      	adds	r7, #48	; 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	24078288 	.word	0x24078288
 80026dc:	24078290 	.word	0x24078290

080026e0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00f      	beq.n	800270e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	24078288 	.word	0x24078288

0800271c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002722:	f3ef 8311 	mrs	r3, BASEPRI
 8002726:	f04f 0120 	mov.w	r1, #32
 800272a:	f381 8811 	msr	BASEPRI, r1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	4817      	ldr	r0, [pc, #92]	; (8002790 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002732:	f7ff f807 	bl	8001744 <_PreparePacket>
 8002736:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e00b      	b.n	8002760 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	6179      	str	r1, [r7, #20]
 8002752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	09db      	lsrs	r3, r3, #7
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b7f      	cmp	r3, #127	; 0x7f
 8002764:	d8f0      	bhi.n	8002748 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	617a      	str	r2, [r7, #20]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002776:	221b      	movs	r2, #27
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68b8      	ldr	r0, [r7, #8]
 800277c:	f7ff f8d2 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f383 8811 	msr	BASEPRI, r3
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	24078290 	.word	0x24078290
 8002794:	2407828c 	.word	0x2407828c

08002798 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 800279e:	7e1b      	ldrb	r3, [r3, #24]
 80027a0:	4619      	mov	r1, r3
 80027a2:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80027a4:	460b      	mov	r3, r1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	440b      	add	r3, r1
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	336c      	adds	r3, #108	; 0x6c
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027b4:	7e1b      	ldrb	r3, [r3, #24]
 80027b6:	4618      	mov	r0, r3
 80027b8:	490d      	ldr	r1, [pc, #52]	; (80027f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80027ba:	4603      	mov	r3, r0
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4403      	add	r3, r0
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	3370      	adds	r3, #112	; 0x70
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d00b      	beq.n	80027e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027ce:	789b      	ldrb	r3, [r3, #2]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d107      	bne.n	80027e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80027da:	f7fe ffbf 	bl	800175c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80027de:	4b03      	ldr	r3, [pc, #12]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80027e4:	4b01      	ldr	r3, [pc, #4]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	24078260 	.word	0x24078260
 80027f0:	240001a0 	.word	0x240001a0

080027f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027fa:	f000 fd8d 	bl	8003318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027fe:	f000 f845 	bl	800288c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002802:	f000 f9c3 	bl	8002b8c <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8002806:	f000 f8ef 	bl	80029e8 <MX_FDCAN2_Init>
  MX_USB_OTG_FS_HCD_Init();
 800280a:	f000 f99d 	bl	8002b48 <MX_USB_OTG_FS_HCD_Init>
  MX_USART3_UART_Init();
 800280e:	f000 f94f 	bl	8002ab0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start LED
    int Start_Counter = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8002816:	e010      	b.n	800283a <main+0x46>
    {
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8002818:	2104      	movs	r1, #4
 800281a:	4819      	ldr	r0, [pc, #100]	; (8002880 <main+0x8c>)
 800281c:	f002 fc8d 	bl	800513a <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 8002820:	20c8      	movs	r0, #200	; 0xc8
 8002822:	f000 fdd5 	bl	80033d0 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8002826:	2104      	movs	r1, #4
 8002828:	4815      	ldr	r0, [pc, #84]	; (8002880 <main+0x8c>)
 800282a:	f002 fc86 	bl	800513a <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 800282e:	20c8      	movs	r0, #200	; 0xc8
 8002830:	f000 fdce 	bl	80033d0 <HAL_Delay>
  	  Start_Counter++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3301      	adds	r3, #1
 8002838:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b04      	cmp	r3, #4
 800283e:	ddeb      	ble.n	8002818 <main+0x24>

    //user_data = "Start of program\r\n";
    	//HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

    	// Enable CCYCCNT Counter for SEGGER SYSTEM VIEW
    	DWT->CTRL |= (1 << 0);
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <main+0x90>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <main+0x90>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6013      	str	r3, [r2, #0]

    	// Used for SEGGER UART
    	SEGGER_UART_init(500000);
 800284c:	480e      	ldr	r0, [pc, #56]	; (8002888 <main+0x94>)
 800284e:	f7fe facd 	bl	8000dec <SEGGER_UART_init>

    	//Starting SEGGER SYSVIEW
    	  SEGGER_SYSVIEW_Conf();
 8002852:	f7fe f95f 	bl	8000b14 <SEGGER_SYSVIEW_Conf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002856:	2102      	movs	r1, #2
 8002858:	4809      	ldr	r0, [pc, #36]	; (8002880 <main+0x8c>)
 800285a:	f002 fc6e 	bl	800513a <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 800285e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002862:	f000 fdb5 	bl	80033d0 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002866:	2102      	movs	r1, #2
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <main+0x8c>)
 800286a:	f002 fc66 	bl	800513a <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 800286e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002872:	f000 fdad 	bl	80033d0 <HAL_Delay>
  	  Start_Counter++;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3301      	adds	r3, #1
 800287a:	607b      	str	r3, [r7, #4]
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800287c:	e7eb      	b.n	8002856 <main+0x62>
 800287e:	bf00      	nop
 8002880:	58020800 	.word	0x58020800
 8002884:	e0001000 	.word	0xe0001000
 8002888:	0007a120 	.word	0x0007a120

0800288c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b09e      	sub	sp, #120	; 0x78
 8002890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002896:	224c      	movs	r2, #76	; 0x4c
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f007 fac8 	bl	8009e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	2220      	movs	r2, #32
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f007 fac1 	bl	8009e30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028ae:	2002      	movs	r0, #2
 80028b0:	f002 fce4 	bl	800527c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <SystemClock_Config+0x150>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	4a47      	ldr	r2, [pc, #284]	; (80029dc <SystemClock_Config+0x150>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028c4:	4b45      	ldr	r3, [pc, #276]	; (80029dc <SystemClock_Config+0x150>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <SystemClock_Config+0x154>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	4a43      	ldr	r2, [pc, #268]	; (80029e0 <SystemClock_Config+0x154>)
 80028d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d8:	6193      	str	r3, [r2, #24]
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <SystemClock_Config+0x154>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028e6:	bf00      	nop
 80028e8:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <SystemClock_Config+0x154>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f4:	d1f8      	bne.n	80028e8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <SystemClock_Config+0x158>)
 80028f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028fc:	4a39      	ldr	r2, [pc, #228]	; (80029e4 <SystemClock_Config+0x158>)
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <SystemClock_Config+0x158>)
 8002908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002914:	2300      	movs	r3, #0
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <SystemClock_Config+0x154>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <SystemClock_Config+0x154>)
 800291e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <SystemClock_Config+0x154>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <SystemClock_Config+0x150>)
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <SystemClock_Config+0x150>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	62d3      	str	r3, [r2, #44]	; 0x2c
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <SystemClock_Config+0x150>)
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002946:	bf00      	nop
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <SystemClock_Config+0x154>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002954:	d1f8      	bne.n	8002948 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002956:	2301      	movs	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800295a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002960:	2302      	movs	r3, #2
 8002962:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002964:	2302      	movs	r3, #2
 8002966:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002968:	2301      	movs	r3, #1
 800296a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800296c:	2378      	movs	r3, #120	; 0x78
 800296e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002970:	2302      	movs	r3, #2
 8002972:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8002974:	230f      	movs	r3, #15
 8002976:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002978:	2302      	movs	r3, #2
 800297a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800297c:	230c      	movs	r3, #12
 800297e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002980:	2300      	movs	r3, #0
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fcbf 	bl	8005310 <HAL_RCC_OscConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8002998:	f000 f982 	bl	8002ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299c:	233f      	movs	r3, #63	; 0x3f
 800299e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a0:	2303      	movs	r3, #3
 80029a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80029a8:	2308      	movs	r3, #8
 80029aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80029ac:	2340      	movs	r3, #64	; 0x40
 80029ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80029b0:	2340      	movs	r3, #64	; 0x40
 80029b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80029b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80029ba:	2340      	movs	r3, #64	; 0x40
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	2104      	movs	r1, #4
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 f8d1 	bl	8005b6c <HAL_RCC_ClockConfig>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80029d0:	f000 f966 	bl	8002ca0 <Error_Handler>
  }
}
 80029d4:	bf00      	nop
 80029d6:	3778      	adds	r7, #120	; 0x78
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	58000400 	.word	0x58000400
 80029e0:	58024800 	.word	0x58024800
 80029e4:	58024400 	.word	0x58024400

080029e8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 80029ee:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <MX_FDCAN2_Init+0xc4>)
 80029f0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002a0a:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a12:	2210      	movs	r2, #16
 8002a14:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a1e:	2202      	movs	r2, #2
 8002a20:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a66:	2204      	movs	r2, #4
 8002a68:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a72:	2204      	movs	r2, #4
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a90:	2204      	movs	r2, #4
 8002a92:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002a94:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <MX_FDCAN2_Init+0xc0>)
 8002a96:	f001 fb0f 	bl	80040b8 <HAL_FDCAN_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8002aa0:	f000 f8fe 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	24078374 	.word	0x24078374
 8002aac:	4000a400 	.word	0x4000a400

08002ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002ab6:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <MX_USART3_UART_Init+0x94>)
 8002ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002af8:	4811      	ldr	r0, [pc, #68]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002afa:	f005 fa47 	bl	8007f8c <HAL_UART_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002b04:	f000 f8cc 	bl	8002ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b08:	2100      	movs	r1, #0
 8002b0a:	480d      	ldr	r0, [pc, #52]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002b0c:	f006 fe68 	bl	80097e0 <HAL_UARTEx_SetTxFifoThreshold>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002b16:	f000 f8c3 	bl	8002ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4808      	ldr	r0, [pc, #32]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002b1e:	f006 fe9d 	bl	800985c <HAL_UARTEx_SetRxFifoThreshold>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002b28:	f000 f8ba 	bl	8002ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002b2c:	4804      	ldr	r0, [pc, #16]	; (8002b40 <MX_USART3_UART_Init+0x90>)
 8002b2e:	f006 fe1e 	bl	800976e <HAL_UARTEx_DisableFifoMode>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002b38:	f000 f8b2 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	24078414 	.word	0x24078414
 8002b44:	40004800 	.word	0x40004800

08002b48 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002b50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002b54:	2210      	movs	r2, #16
 8002b56:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002b66:	2202      	movs	r2, #2
 8002b68:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002b72:	f002 fb21 	bl	80051b8 <HAL_HCD_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8002b7c:	f000 f890 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	240784a4 	.word	0x240784a4
 8002b88:	40080000 	.word	0x40080000

08002b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba8:	4a32      	ldr	r2, [pc, #200]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bc0:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc6:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be4:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <MX_GPIO_Init+0xe8>)
 8002c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2107      	movs	r1, #7
 8002c1e:	4816      	ldr	r0, [pc, #88]	; (8002c78 <MX_GPIO_Init+0xec>)
 8002c20:	f002 fa72 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480f      	ldr	r0, [pc, #60]	; (8002c78 <MX_GPIO_Init+0xec>)
 8002c3c:	f002 f8b4 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c40:	2307      	movs	r3, #7
 8002c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c44:	2301      	movs	r3, #1
 8002c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	4619      	mov	r1, r3
 8002c56:	4808      	ldr	r0, [pc, #32]	; (8002c78 <MX_GPIO_Init+0xec>)
 8002c58:	f002 f8a6 	bl	8004da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2105      	movs	r1, #5
 8002c60:	2028      	movs	r0, #40	; 0x28
 8002c62:	f000 fc9d 	bl	80035a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c66:	2028      	movs	r0, #40	; 0x28
 8002c68:	f000 fcb4 	bl	80035d4 <HAL_NVIC_EnableIRQ>

}
 8002c6c:	bf00      	nop
 8002c6e:	3728      	adds	r7, #40	; 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024400 	.word	0x58024400
 8002c78:	58020800 	.word	0x58020800

08002c7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c8e:	f000 fb7f 	bl	8003390 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40001000 	.word	0x40001000

08002ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca4:	b672      	cpsid	i
}
 8002ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4807      	ldr	r0, [pc, #28]	; (8002cc8 <Error_Handler+0x28>)
 8002cac:	f002 fa45 	bl	800513a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002cb0:	2064      	movs	r0, #100	; 0x64
 8002cb2:	f000 fb8d 	bl	80033d0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <Error_Handler+0x28>)
 8002cba:	f002 fa3e 	bl	800513a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002cbe:	2064      	movs	r0, #100	; 0x64
 8002cc0:	f000 fb86 	bl	80033d0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8002cc4:	e7f0      	b.n	8002ca8 <Error_Handler+0x8>
 8002cc6:	bf00      	nop
 8002cc8:	58020800 	.word	0x58020800

08002ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_MspInit+0x30>)
 8002cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_MspInit+0x30>)
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_MspInit+0x30>)
 8002ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	58024400 	.word	0x58024400

08002d00 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0b8      	sub	sp, #224	; 0xe0
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	22bc      	movs	r2, #188	; 0xbc
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f007 f885 	bl	8009e30 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2d      	ldr	r2, [pc, #180]	; (8002de0 <HAL_FDCAN_MspInit+0xe0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d153      	bne.n	8002dd8 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002d36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d3c:	f107 0310 	add.w	r3, r7, #16
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fae1 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002d4c:	f7ff ffa8 	bl	8002ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_FDCAN_MspInit+0xe4>)
 8002d52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d56:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <HAL_FDCAN_MspInit+0xe4>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_FDCAN_MspInit+0xe4>)
 8002d62:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_FDCAN_MspInit+0xe4>)
 8002d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <HAL_FDCAN_MspInit+0xe4>)
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d7e:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_FDCAN_MspInit+0xe4>)
 8002d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002da6:	2309      	movs	r3, #9
 8002da8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002db0:	4619      	mov	r1, r3
 8002db2:	480d      	ldr	r0, [pc, #52]	; (8002de8 <HAL_FDCAN_MspInit+0xe8>)
 8002db4:	f001 fff8 	bl	8004da8 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2014      	movs	r0, #20
 8002dbe:	f000 fbef 	bl	80035a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002dc2:	2014      	movs	r0, #20
 8002dc4:	f000 fc06 	bl	80035d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2100      	movs	r1, #0
 8002dcc:	2016      	movs	r0, #22
 8002dce:	f000 fbe7 	bl	80035a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8002dd2:	2016      	movs	r0, #22
 8002dd4:	f000 fbfe 	bl	80035d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002dd8:	bf00      	nop
 8002dda:	37e0      	adds	r7, #224	; 0xe0
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	4000a400 	.word	0x4000a400
 8002de4:	58024400 	.word	0x58024400
 8002de8:	58020400 	.word	0x58020400

08002dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b0b8      	sub	sp, #224	; 0xe0
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	22bc      	movs	r2, #188	; 0xbc
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f007 f80f 	bl	8009e30 <memset>
  if(huart->Instance==USART3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <HAL_UART_MspInit+0xd0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d14a      	bne.n	8002eb2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 fa6c 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e36:	f7ff ff33 	bl	8002ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_UART_MspInit+0xd4>)
 8002e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e40:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <HAL_UART_MspInit+0xd4>)
 8002e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_UART_MspInit+0xd4>)
 8002e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_UART_MspInit+0xd4>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_UART_MspInit+0xd4>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_UART_MspInit+0xd4>)
 8002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e90:	2307      	movs	r3, #7
 8002e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <HAL_UART_MspInit+0xd8>)
 8002e9e:	f001 ff83 	bl	8004da8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2027      	movs	r0, #39	; 0x27
 8002ea8:	f000 fb7a 	bl	80035a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002eac:	2027      	movs	r0, #39	; 0x27
 8002eae:	f000 fb91 	bl	80035d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002eb2:	bf00      	nop
 8002eb4:	37e0      	adds	r7, #224	; 0xe0
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40004800 	.word	0x40004800
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	58020400 	.word	0x58020400

08002ec8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b0b8      	sub	sp, #224	; 0xe0
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	22bc      	movs	r2, #188	; 0xbc
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f006 ffa1 	bl	8009e30 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <HAL_HCD_MspInit+0xc8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d146      	bne.n	8002f86 <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002efc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002efe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f9fc 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8002f16:	f7ff fec3 	bl	8002ca0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002f1a:	f002 f9e9 	bl	80052f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_HCD_MspInit+0xcc>)
 8002f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f24:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <HAL_HCD_MspInit+0xcc>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_HCD_MspInit+0xcc>)
 8002f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002f56:	230a      	movs	r3, #10
 8002f58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f60:	4619      	mov	r1, r3
 8002f62:	480d      	ldr	r0, [pc, #52]	; (8002f98 <HAL_HCD_MspInit+0xd0>)
 8002f64:	f001 ff20 	bl	8004da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_HCD_MspInit+0xcc>)
 8002f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_HCD_MspInit+0xcc>)
 8002f70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_HCD_MspInit+0xcc>)
 8002f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f86:	bf00      	nop
 8002f88:	37e0      	adds	r7, #224	; 0xe0
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40080000 	.word	0x40080000
 8002f94:	58024400 	.word	0x58024400
 8002f98:	58020000 	.word	0x58020000

08002f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b090      	sub	sp, #64	; 0x40
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b0f      	cmp	r3, #15
 8002fa8:	d827      	bhi.n	8002ffa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002faa:	2200      	movs	r2, #0
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	2036      	movs	r0, #54	; 0x36
 8002fb0:	f000 faf6 	bl	80035a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fb4:	2036      	movs	r0, #54	; 0x36
 8002fb6:	f000 fb0d 	bl	80035d4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002fba:	4a29      	ldr	r2, [pc, #164]	; (8003060 <HAL_InitTick+0xc4>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_InitTick+0xc8>)
 8002fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <HAL_InitTick+0xc8>)
 8002fc8:	f043 0310 	orr.w	r3, r3, #16
 8002fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_InitTick+0xc8>)
 8002fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fde:	f107 0210 	add.w	r2, r7, #16
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 f94b 	bl	8006284 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_InitTick+0x6a>
 8002ff8:	e001      	b.n	8002ffe <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e02b      	b.n	8003056 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ffe:	f003 f915 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 8003002:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003004:	e004      	b.n	8003010 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003006:	f003 f911 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 800300a:	4603      	mov	r3, r0
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003012:	4a15      	ldr	r2, [pc, #84]	; (8003068 <HAL_InitTick+0xcc>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	0c9b      	lsrs	r3, r3, #18
 800301a:	3b01      	subs	r3, #1
 800301c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_InitTick+0xd0>)
 8003020:	4a13      	ldr	r2, [pc, #76]	; (8003070 <HAL_InitTick+0xd4>)
 8003022:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_InitTick+0xd0>)
 8003026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800302a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800302c:	4a0f      	ldr	r2, [pc, #60]	; (800306c <HAL_InitTick+0xd0>)
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <HAL_InitTick+0xd0>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_InitTick+0xd0>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800303e:	480b      	ldr	r0, [pc, #44]	; (800306c <HAL_InitTick+0xd0>)
 8003040:	f004 fcca 	bl	80079d8 <HAL_TIM_Base_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800304a:	4808      	ldr	r0, [pc, #32]	; (800306c <HAL_InitTick+0xd0>)
 800304c:	f004 fd26 	bl	8007a9c <HAL_TIM_Base_Start_IT>
 8003050:	4603      	mov	r3, r0
 8003052:	e000      	b.n	8003056 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
}
 8003056:	4618      	mov	r0, r3
 8003058:	3740      	adds	r7, #64	; 0x40
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	24000010 	.word	0x24000010
 8003064:	58024400 	.word	0x58024400
 8003068:	431bde83 	.word	0x431bde83
 800306c:	240787a8 	.word	0x240787a8
 8003070:	40001000 	.word	0x40001000

08003074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8003078:	2102      	movs	r1, #2
 800307a:	4807      	ldr	r0, [pc, #28]	; (8003098 <NMI_Handler+0x24>)
 800307c:	f002 f85d 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003080:	2064      	movs	r0, #100	; 0x64
 8003082:	f000 f9a5 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8003086:	2102      	movs	r1, #2
 8003088:	4803      	ldr	r0, [pc, #12]	; (8003098 <NMI_Handler+0x24>)
 800308a:	f002 f856 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800308e:	2064      	movs	r0, #100	; 0x64
 8003090:	f000 f99e 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8003094:	e7f0      	b.n	8003078 <NMI_Handler+0x4>
 8003096:	bf00      	nop
 8003098:	58020800 	.word	0x58020800

0800309c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80030a0:	2102      	movs	r1, #2
 80030a2:	4807      	ldr	r0, [pc, #28]	; (80030c0 <HardFault_Handler+0x24>)
 80030a4:	f002 f849 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80030a8:	2064      	movs	r0, #100	; 0x64
 80030aa:	f000 f991 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80030ae:	2102      	movs	r1, #2
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <HardFault_Handler+0x24>)
 80030b2:	f002 f842 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80030b6:	2064      	movs	r0, #100	; 0x64
 80030b8:	f000 f98a 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80030bc:	e7f0      	b.n	80030a0 <HardFault_Handler+0x4>
 80030be:	bf00      	nop
 80030c0:	58020800 	.word	0x58020800

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80030c8:	2102      	movs	r1, #2
 80030ca:	4807      	ldr	r0, [pc, #28]	; (80030e8 <MemManage_Handler+0x24>)
 80030cc:	f002 f835 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80030d0:	2064      	movs	r0, #100	; 0x64
 80030d2:	f000 f97d 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80030d6:	2102      	movs	r1, #2
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <MemManage_Handler+0x24>)
 80030da:	f002 f82e 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80030de:	2064      	movs	r0, #100	; 0x64
 80030e0:	f000 f976 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80030e4:	e7f0      	b.n	80030c8 <MemManage_Handler+0x4>
 80030e6:	bf00      	nop
 80030e8:	58020800 	.word	0x58020800

080030ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80030f0:	2102      	movs	r1, #2
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <BusFault_Handler+0x24>)
 80030f4:	f002 f821 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	f000 f969 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 80030fe:	2102      	movs	r1, #2
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <BusFault_Handler+0x24>)
 8003102:	f002 f81a 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003106:	2064      	movs	r0, #100	; 0x64
 8003108:	f000 f962 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 800310c:	e7f0      	b.n	80030f0 <BusFault_Handler+0x4>
 800310e:	bf00      	nop
 8003110:	58020800 	.word	0x58020800

08003114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8003118:	2102      	movs	r1, #2
 800311a:	4807      	ldr	r0, [pc, #28]	; (8003138 <UsageFault_Handler+0x24>)
 800311c:	f002 f80d 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003120:	2064      	movs	r0, #100	; 0x64
 8003122:	f000 f955 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8003126:	2102      	movs	r1, #2
 8003128:	4803      	ldr	r0, [pc, #12]	; (8003138 <UsageFault_Handler+0x24>)
 800312a:	f002 f806 	bl	800513a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800312e:	2064      	movs	r0, #100	; 0x64
 8003130:	f000 f94e 	bl	80033d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8003134:	e7f0      	b.n	8003118 <UsageFault_Handler+0x4>
 8003136:	bf00      	nop
 8003138:	58020800 	.word	0x58020800

0800313c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <FDCAN2_IT0_IRQHandler+0x10>)
 8003152:	f001 f98f 	bl	8004474 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	24078374 	.word	0x24078374

08003160 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <FDCAN2_IT1_IRQHandler+0x10>)
 8003166:	f001 f985 	bl	8004474 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	24078374 	.word	0x24078374

08003174 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <USART3_IRQHandler+0x10>)
 800317a:	f004 ff57 	bl	800802c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	24078414 	.word	0x24078414

08003188 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800318c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003190:	f001 ffed 	bl	800516e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}

08003198 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <TIM6_DAC_IRQHandler+0x10>)
 800319e:	f004 fcf5 	bl	8007b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	240787a8 	.word	0x240787a8

080031ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <SystemInit+0xec>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	4a38      	ldr	r2, [pc, #224]	; (8003298 <SystemInit+0xec>)
 80031b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031c0:	4b36      	ldr	r3, [pc, #216]	; (800329c <SystemInit+0xf0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d807      	bhi.n	80031dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <SystemInit+0xf0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 030f 	bic.w	r3, r3, #15
 80031d4:	4a31      	ldr	r2, [pc, #196]	; (800329c <SystemInit+0xf0>)
 80031d6:	f043 0307 	orr.w	r3, r3, #7
 80031da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <SystemInit+0xf4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2f      	ldr	r2, [pc, #188]	; (80032a0 <SystemInit+0xf4>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <SystemInit+0xf4>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <SystemInit+0xf4>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	492b      	ldr	r1, [pc, #172]	; (80032a0 <SystemInit+0xf4>)
 80031f4:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <SystemInit+0xf8>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <SystemInit+0xf0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <SystemInit+0xf0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 030f 	bic.w	r3, r3, #15
 800320e:	4a23      	ldr	r2, [pc, #140]	; (800329c <SystemInit+0xf0>)
 8003210:	f043 0307 	orr.w	r3, r3, #7
 8003214:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <SystemInit+0xf4>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <SystemInit+0xf4>)
 800321e:	2200      	movs	r2, #0
 8003220:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <SystemInit+0xf4>)
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <SystemInit+0xf4>)
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <SystemInit+0xfc>)
 800322c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <SystemInit+0xf4>)
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <SystemInit+0x100>)
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <SystemInit+0xf4>)
 8003236:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <SystemInit+0x104>)
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <SystemInit+0xf4>)
 800323c:	2200      	movs	r2, #0
 800323e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <SystemInit+0xf4>)
 8003242:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <SystemInit+0x104>)
 8003244:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <SystemInit+0xf4>)
 8003248:	2200      	movs	r2, #0
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <SystemInit+0xf4>)
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <SystemInit+0x104>)
 8003250:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <SystemInit+0xf4>)
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <SystemInit+0xf4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <SystemInit+0xf4>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <SystemInit+0xf4>)
 8003266:	2200      	movs	r2, #0
 8003268:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <SystemInit+0x108>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <SystemInit+0x10c>)
 8003270:	4013      	ands	r3, r2
 8003272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003276:	d202      	bcs.n	800327e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003278:	4b10      	ldr	r3, [pc, #64]	; (80032bc <SystemInit+0x110>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <SystemInit+0x114>)
 8003280:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003284:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SystemInit+0xec>)
 8003288:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800328c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00
 800329c:	52002000 	.word	0x52002000
 80032a0:	58024400 	.word	0x58024400
 80032a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80032a8:	02020200 	.word	0x02020200
 80032ac:	01ff0000 	.word	0x01ff0000
 80032b0:	01010280 	.word	0x01010280
 80032b4:	5c001000 	.word	0x5c001000
 80032b8:	ffff0000 	.word	0xffff0000
 80032bc:	51008108 	.word	0x51008108
 80032c0:	52004000 	.word	0x52004000

080032c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80032c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c8:	f7ff ff70 	bl	80031ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ce:	490d      	ldr	r1, [pc, #52]	; (8003304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d4:	e002      	b.n	80032dc <LoopCopyDataInit>

080032d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032da:	3304      	adds	r3, #4

080032dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e0:	d3f9      	bcc.n	80032d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032e4:	4c0a      	ldr	r4, [pc, #40]	; (8003310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e8:	e001      	b.n	80032ee <LoopFillZerobss>

080032ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ec:	3204      	adds	r2, #4

080032ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f0:	d3fb      	bcc.n	80032ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032f2:	f006 fd6b 	bl	8009dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032f6:	f7ff fa7d 	bl	80027f4 <main>
  bx  lr
 80032fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003300:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003304:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8003308:	08009f6c 	.word	0x08009f6c
  ldr r2, =_sbss
 800330c:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8003310:	240787f8 	.word	0x240787f8

08003314 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC3_IRQHandler>
	...

08003318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331e:	2003      	movs	r0, #3
 8003320:	f000 f933 	bl	800358a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003324:	f002 fdd8 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_Init+0x68>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	4913      	ldr	r1, [pc, #76]	; (8003384 <HAL_Init+0x6c>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
 8003340:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_Init+0x68>)
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <HAL_Init+0x6c>)
 800334c:	5cd3      	ldrb	r3, [r2, r3]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <HAL_Init+0x70>)
 800335a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800335c:	4a0b      	ldr	r2, [pc, #44]	; (800338c <HAL_Init+0x74>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003362:	200f      	movs	r0, #15
 8003364:	f7ff fe1a 	bl	8002f9c <HAL_InitTick>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e002      	b.n	8003378 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003372:	f7ff fcab 	bl	8002ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	58024400 	.word	0x58024400
 8003384:	08009f24 	.word	0x08009f24
 8003388:	2400000c 	.word	0x2400000c
 800338c:	24000008 	.word	0x24000008

08003390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_IncTick+0x20>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x24>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_IncTick+0x24>)
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	24000014 	.word	0x24000014
 80033b4:	240787f4 	.word	0x240787f4

080033b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return uwTick;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_GetTick+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	240787f4 	.word	0x240787f4

080033d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d8:	f7ff ffee 	bl	80033b8 <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d005      	beq.n	80033f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_Delay+0x44>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033f6:	bf00      	nop
 80033f8:	f7ff ffde 	bl	80033b8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	429a      	cmp	r2, r3
 8003406:	d8f7      	bhi.n	80033f8 <HAL_Delay+0x28>
  {
  }
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	24000014 	.word	0x24000014

08003418 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <HAL_GetREVID+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0c1b      	lsrs	r3, r3, #16
}
 8003422:	4618      	mov	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	5c001000 	.word	0x5c001000

08003430 <__NVIC_SetPriorityGrouping>:
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <__NVIC_SetPriorityGrouping+0x40>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800344c:	4013      	ands	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <__NVIC_SetPriorityGrouping+0x44>)
 800345a:	4313      	orrs	r3, r2
 800345c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <__NVIC_SetPriorityGrouping+0x40>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	60d3      	str	r3, [r2, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00
 8003474:	05fa0000 	.word	0x05fa0000

08003478 <__NVIC_GetPriorityGrouping>:
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <__NVIC_GetPriorityGrouping+0x18>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	f003 0307 	and.w	r3, r3, #7
}
 8003486:	4618      	mov	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <__NVIC_EnableIRQ>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800349e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	db0b      	blt.n	80034be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	4907      	ldr	r1, [pc, #28]	; (80034cc <__NVIC_EnableIRQ+0x38>)
 80034ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2001      	movs	r0, #1
 80034b6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000e100 	.word	0xe000e100

080034d0 <__NVIC_SetPriority>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	db0a      	blt.n	80034fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	490c      	ldr	r1, [pc, #48]	; (800351c <__NVIC_SetPriority+0x4c>)
 80034ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ee:	0112      	lsls	r2, r2, #4
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	440b      	add	r3, r1
 80034f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034f8:	e00a      	b.n	8003510 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	4908      	ldr	r1, [pc, #32]	; (8003520 <__NVIC_SetPriority+0x50>)
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	3b04      	subs	r3, #4
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	440b      	add	r3, r1
 800350e:	761a      	strb	r2, [r3, #24]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000e100 	.word	0xe000e100
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003524:	b480      	push	{r7}
 8003526:	b089      	sub	sp, #36	; 0x24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f1c3 0307 	rsb	r3, r3, #7
 800353e:	2b04      	cmp	r3, #4
 8003540:	bf28      	it	cs
 8003542:	2304      	movcs	r3, #4
 8003544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3304      	adds	r3, #4
 800354a:	2b06      	cmp	r3, #6
 800354c:	d902      	bls.n	8003554 <NVIC_EncodePriority+0x30>
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3b03      	subs	r3, #3
 8003552:	e000      	b.n	8003556 <NVIC_EncodePriority+0x32>
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003558:	f04f 32ff 	mov.w	r2, #4294967295
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	401a      	ands	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800356c:	f04f 31ff 	mov.w	r1, #4294967295
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	43d9      	mvns	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	4313      	orrs	r3, r2
         );
}
 800357e:	4618      	mov	r0, r3
 8003580:	3724      	adds	r7, #36	; 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ff4c 	bl	8003430 <__NVIC_SetPriorityGrouping>
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035ae:	f7ff ff63 	bl	8003478 <__NVIC_GetPriorityGrouping>
 80035b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	6978      	ldr	r0, [r7, #20]
 80035ba:	f7ff ffb3 	bl	8003524 <NVIC_EncodePriority>
 80035be:	4602      	mov	r2, r0
 80035c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff82 	bl	80034d0 <__NVIC_SetPriority>
}
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff56 	bl	8003494 <__NVIC_EnableIRQ>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7ff fede 	bl	80033b8 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e2dc      	b.n	8003bc2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d008      	beq.n	8003626 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e2cd      	b.n	8003bc2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a76      	ldr	r2, [pc, #472]	; (8003804 <HAL_DMA_Abort+0x214>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d04a      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a74      	ldr	r2, [pc, #464]	; (8003808 <HAL_DMA_Abort+0x218>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d045      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a73      	ldr	r2, [pc, #460]	; (800380c <HAL_DMA_Abort+0x21c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d040      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a71      	ldr	r2, [pc, #452]	; (8003810 <HAL_DMA_Abort+0x220>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d03b      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a70      	ldr	r2, [pc, #448]	; (8003814 <HAL_DMA_Abort+0x224>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d036      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6e      	ldr	r2, [pc, #440]	; (8003818 <HAL_DMA_Abort+0x228>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d031      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6d      	ldr	r2, [pc, #436]	; (800381c <HAL_DMA_Abort+0x22c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d02c      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6b      	ldr	r2, [pc, #428]	; (8003820 <HAL_DMA_Abort+0x230>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d027      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6a      	ldr	r2, [pc, #424]	; (8003824 <HAL_DMA_Abort+0x234>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a68      	ldr	r2, [pc, #416]	; (8003828 <HAL_DMA_Abort+0x238>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01d      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a67      	ldr	r2, [pc, #412]	; (800382c <HAL_DMA_Abort+0x23c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a65      	ldr	r2, [pc, #404]	; (8003830 <HAL_DMA_Abort+0x240>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a64      	ldr	r2, [pc, #400]	; (8003834 <HAL_DMA_Abort+0x244>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a62      	ldr	r2, [pc, #392]	; (8003838 <HAL_DMA_Abort+0x248>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a61      	ldr	r2, [pc, #388]	; (800383c <HAL_DMA_Abort+0x24c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_DMA_Abort+0xd6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a5f      	ldr	r2, [pc, #380]	; (8003840 <HAL_DMA_Abort+0x250>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_DMA_Abort+0xda>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_DMA_Abort+0xdc>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 021e 	bic.w	r2, r2, #30
 80036de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e00a      	b.n	800370e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 020e 	bic.w	r2, r2, #14
 8003706:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <HAL_DMA_Abort+0x214>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d072      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3a      	ldr	r2, [pc, #232]	; (8003808 <HAL_DMA_Abort+0x218>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d06d      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_DMA_Abort+0x21c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d068      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a37      	ldr	r2, [pc, #220]	; (8003810 <HAL_DMA_Abort+0x220>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d063      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a36      	ldr	r2, [pc, #216]	; (8003814 <HAL_DMA_Abort+0x224>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d05e      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_DMA_Abort+0x228>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d059      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a33      	ldr	r2, [pc, #204]	; (800381c <HAL_DMA_Abort+0x22c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d054      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a31      	ldr	r2, [pc, #196]	; (8003820 <HAL_DMA_Abort+0x230>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d04f      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a30      	ldr	r2, [pc, #192]	; (8003824 <HAL_DMA_Abort+0x234>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d04a      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <HAL_DMA_Abort+0x238>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d045      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2d      	ldr	r2, [pc, #180]	; (800382c <HAL_DMA_Abort+0x23c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d040      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2b      	ldr	r2, [pc, #172]	; (8003830 <HAL_DMA_Abort+0x240>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d03b      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2a      	ldr	r2, [pc, #168]	; (8003834 <HAL_DMA_Abort+0x244>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d036      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a28      	ldr	r2, [pc, #160]	; (8003838 <HAL_DMA_Abort+0x248>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d031      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_DMA_Abort+0x24c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d02c      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a25      	ldr	r2, [pc, #148]	; (8003840 <HAL_DMA_Abort+0x250>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d027      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a24      	ldr	r2, [pc, #144]	; (8003844 <HAL_DMA_Abort+0x254>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_DMA_Abort+0x258>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_DMA_Abort+0x25c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <HAL_DMA_Abort+0x260>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_DMA_Abort+0x264>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_DMA_Abort+0x268>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	; (800385c <HAL_DMA_Abort+0x26c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_Abort+0x20e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_DMA_Abort+0x270>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d132      	bne.n	8003864 <HAL_DMA_Abort+0x274>
 80037fe:	2301      	movs	r3, #1
 8003800:	e031      	b.n	8003866 <HAL_DMA_Abort+0x276>
 8003802:	bf00      	nop
 8003804:	40020010 	.word	0x40020010
 8003808:	40020028 	.word	0x40020028
 800380c:	40020040 	.word	0x40020040
 8003810:	40020058 	.word	0x40020058
 8003814:	40020070 	.word	0x40020070
 8003818:	40020088 	.word	0x40020088
 800381c:	400200a0 	.word	0x400200a0
 8003820:	400200b8 	.word	0x400200b8
 8003824:	40020410 	.word	0x40020410
 8003828:	40020428 	.word	0x40020428
 800382c:	40020440 	.word	0x40020440
 8003830:	40020458 	.word	0x40020458
 8003834:	40020470 	.word	0x40020470
 8003838:	40020488 	.word	0x40020488
 800383c:	400204a0 	.word	0x400204a0
 8003840:	400204b8 	.word	0x400204b8
 8003844:	58025408 	.word	0x58025408
 8003848:	5802541c 	.word	0x5802541c
 800384c:	58025430 	.word	0x58025430
 8003850:	58025444 	.word	0x58025444
 8003854:	58025458 	.word	0x58025458
 8003858:	5802546c 	.word	0x5802546c
 800385c:	58025480 	.word	0x58025480
 8003860:	58025494 	.word	0x58025494
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003878:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6d      	ldr	r2, [pc, #436]	; (8003a34 <HAL_DMA_Abort+0x444>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d04a      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6b      	ldr	r2, [pc, #428]	; (8003a38 <HAL_DMA_Abort+0x448>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d045      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6a      	ldr	r2, [pc, #424]	; (8003a3c <HAL_DMA_Abort+0x44c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d040      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a68      	ldr	r2, [pc, #416]	; (8003a40 <HAL_DMA_Abort+0x450>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03b      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a67      	ldr	r2, [pc, #412]	; (8003a44 <HAL_DMA_Abort+0x454>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d036      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a65      	ldr	r2, [pc, #404]	; (8003a48 <HAL_DMA_Abort+0x458>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a64      	ldr	r2, [pc, #400]	; (8003a4c <HAL_DMA_Abort+0x45c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d02c      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a62      	ldr	r2, [pc, #392]	; (8003a50 <HAL_DMA_Abort+0x460>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d027      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a61      	ldr	r2, [pc, #388]	; (8003a54 <HAL_DMA_Abort+0x464>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5f      	ldr	r2, [pc, #380]	; (8003a58 <HAL_DMA_Abort+0x468>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <HAL_DMA_Abort+0x46c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5c      	ldr	r2, [pc, #368]	; (8003a60 <HAL_DMA_Abort+0x470>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5b      	ldr	r2, [pc, #364]	; (8003a64 <HAL_DMA_Abort+0x474>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a59      	ldr	r2, [pc, #356]	; (8003a68 <HAL_DMA_Abort+0x478>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <HAL_DMA_Abort+0x47c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_DMA_Abort+0x32a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a56      	ldr	r2, [pc, #344]	; (8003a70 <HAL_DMA_Abort+0x480>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <HAL_DMA_Abort+0x33c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e007      	b.n	800393c <HAL_DMA_Abort+0x34c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800393c:	e013      	b.n	8003966 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800393e:	f7ff fd3b 	bl	80033b8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b05      	cmp	r3, #5
 800394a:	d90c      	bls.n	8003966 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2203      	movs	r2, #3
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e12d      	b.n	8003bc2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e5      	bne.n	800393e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <HAL_DMA_Abort+0x444>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d04a      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <HAL_DMA_Abort+0x448>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d045      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <HAL_DMA_Abort+0x44c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d040      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2a      	ldr	r2, [pc, #168]	; (8003a40 <HAL_DMA_Abort+0x450>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d03b      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <HAL_DMA_Abort+0x454>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d036      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <HAL_DMA_Abort+0x458>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d031      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <HAL_DMA_Abort+0x45c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d02c      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <HAL_DMA_Abort+0x460>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d027      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <HAL_DMA_Abort+0x464>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d022      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <HAL_DMA_Abort+0x468>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01d      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a20      	ldr	r2, [pc, #128]	; (8003a5c <HAL_DMA_Abort+0x46c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d018      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <HAL_DMA_Abort+0x470>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <HAL_DMA_Abort+0x474>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_DMA_Abort+0x478>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <HAL_DMA_Abort+0x47c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_DMA_Abort+0x422>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <HAL_DMA_Abort+0x480>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_DMA_Abort+0x426>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_DMA_Abort+0x428>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02b      	beq.n	8003a74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	223f      	movs	r2, #63	; 0x3f
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	e02a      	b.n	8003a8a <HAL_DMA_Abort+0x49a>
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2201      	movs	r2, #1
 8003a84:	409a      	lsls	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a4f      	ldr	r2, [pc, #316]	; (8003bcc <HAL_DMA_Abort+0x5dc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d072      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a4d      	ldr	r2, [pc, #308]	; (8003bd0 <HAL_DMA_Abort+0x5e0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d06d      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4c      	ldr	r2, [pc, #304]	; (8003bd4 <HAL_DMA_Abort+0x5e4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d068      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a4a      	ldr	r2, [pc, #296]	; (8003bd8 <HAL_DMA_Abort+0x5e8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d063      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a49      	ldr	r2, [pc, #292]	; (8003bdc <HAL_DMA_Abort+0x5ec>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d05e      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a47      	ldr	r2, [pc, #284]	; (8003be0 <HAL_DMA_Abort+0x5f0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d059      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a46      	ldr	r2, [pc, #280]	; (8003be4 <HAL_DMA_Abort+0x5f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d054      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a44      	ldr	r2, [pc, #272]	; (8003be8 <HAL_DMA_Abort+0x5f8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d04f      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a43      	ldr	r2, [pc, #268]	; (8003bec <HAL_DMA_Abort+0x5fc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d04a      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a41      	ldr	r2, [pc, #260]	; (8003bf0 <HAL_DMA_Abort+0x600>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d045      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <HAL_DMA_Abort+0x604>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d040      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a3e      	ldr	r2, [pc, #248]	; (8003bf8 <HAL_DMA_Abort+0x608>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d03b      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3d      	ldr	r2, [pc, #244]	; (8003bfc <HAL_DMA_Abort+0x60c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d036      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <HAL_DMA_Abort+0x610>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d031      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <HAL_DMA_Abort+0x614>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d02c      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a38      	ldr	r2, [pc, #224]	; (8003c08 <HAL_DMA_Abort+0x618>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d027      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a37      	ldr	r2, [pc, #220]	; (8003c0c <HAL_DMA_Abort+0x61c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d022      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a35      	ldr	r2, [pc, #212]	; (8003c10 <HAL_DMA_Abort+0x620>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01d      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a34      	ldr	r2, [pc, #208]	; (8003c14 <HAL_DMA_Abort+0x624>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d018      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a32      	ldr	r2, [pc, #200]	; (8003c18 <HAL_DMA_Abort+0x628>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a31      	ldr	r2, [pc, #196]	; (8003c1c <HAL_DMA_Abort+0x62c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00e      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2f      	ldr	r2, [pc, #188]	; (8003c20 <HAL_DMA_Abort+0x630>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d009      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2e      	ldr	r2, [pc, #184]	; (8003c24 <HAL_DMA_Abort+0x634>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_DMA_Abort+0x58a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <HAL_DMA_Abort+0x638>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_DMA_Abort+0x58e>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_DMA_Abort+0x590>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40020010 	.word	0x40020010
 8003bd0:	40020028 	.word	0x40020028
 8003bd4:	40020040 	.word	0x40020040
 8003bd8:	40020058 	.word	0x40020058
 8003bdc:	40020070 	.word	0x40020070
 8003be0:	40020088 	.word	0x40020088
 8003be4:	400200a0 	.word	0x400200a0
 8003be8:	400200b8 	.word	0x400200b8
 8003bec:	40020410 	.word	0x40020410
 8003bf0:	40020428 	.word	0x40020428
 8003bf4:	40020440 	.word	0x40020440
 8003bf8:	40020458 	.word	0x40020458
 8003bfc:	40020470 	.word	0x40020470
 8003c00:	40020488 	.word	0x40020488
 8003c04:	400204a0 	.word	0x400204a0
 8003c08:	400204b8 	.word	0x400204b8
 8003c0c:	58025408 	.word	0x58025408
 8003c10:	5802541c 	.word	0x5802541c
 8003c14:	58025430 	.word	0x58025430
 8003c18:	58025444 	.word	0x58025444
 8003c1c:	58025458 	.word	0x58025458
 8003c20:	5802546c 	.word	0x5802546c
 8003c24:	58025480 	.word	0x58025480
 8003c28:	58025494 	.word	0x58025494

08003c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e237      	b.n	80040ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d004      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e22c      	b.n	80040ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5c      	ldr	r2, [pc, #368]	; (8003dcc <HAL_DMA_Abort_IT+0x1a0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d04a      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a5b      	ldr	r2, [pc, #364]	; (8003dd0 <HAL_DMA_Abort_IT+0x1a4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d045      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a59      	ldr	r2, [pc, #356]	; (8003dd4 <HAL_DMA_Abort_IT+0x1a8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d040      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_DMA_Abort_IT+0x1ac>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d03b      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a56      	ldr	r2, [pc, #344]	; (8003ddc <HAL_DMA_Abort_IT+0x1b0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d036      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a55      	ldr	r2, [pc, #340]	; (8003de0 <HAL_DMA_Abort_IT+0x1b4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d031      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a53      	ldr	r2, [pc, #332]	; (8003de4 <HAL_DMA_Abort_IT+0x1b8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d02c      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_DMA_Abort_IT+0x1bc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d027      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a50      	ldr	r2, [pc, #320]	; (8003dec <HAL_DMA_Abort_IT+0x1c0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d022      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a4f      	ldr	r2, [pc, #316]	; (8003df0 <HAL_DMA_Abort_IT+0x1c4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4d      	ldr	r2, [pc, #308]	; (8003df4 <HAL_DMA_Abort_IT+0x1c8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4c      	ldr	r2, [pc, #304]	; (8003df8 <HAL_DMA_Abort_IT+0x1cc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <HAL_DMA_Abort_IT+0x1d0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <HAL_DMA_Abort_IT+0x1d4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a47      	ldr	r2, [pc, #284]	; (8003e04 <HAL_DMA_Abort_IT+0x1d8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xc8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a46      	ldr	r2, [pc, #280]	; (8003e08 <HAL_DMA_Abort_IT+0x1dc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d101      	bne.n	8003cf8 <HAL_DMA_Abort_IT+0xcc>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_DMA_Abort_IT+0xce>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8086 	beq.w	8003e0c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2204      	movs	r2, #4
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2f      	ldr	r2, [pc, #188]	; (8003dcc <HAL_DMA_Abort_IT+0x1a0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d04a      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2e      	ldr	r2, [pc, #184]	; (8003dd0 <HAL_DMA_Abort_IT+0x1a4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d045      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2c      	ldr	r2, [pc, #176]	; (8003dd4 <HAL_DMA_Abort_IT+0x1a8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d040      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2b      	ldr	r2, [pc, #172]	; (8003dd8 <HAL_DMA_Abort_IT+0x1ac>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d03b      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a29      	ldr	r2, [pc, #164]	; (8003ddc <HAL_DMA_Abort_IT+0x1b0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d036      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a28      	ldr	r2, [pc, #160]	; (8003de0 <HAL_DMA_Abort_IT+0x1b4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d031      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <HAL_DMA_Abort_IT+0x1b8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02c      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <HAL_DMA_Abort_IT+0x1bc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d027      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <HAL_DMA_Abort_IT+0x1c0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d022      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <HAL_DMA_Abort_IT+0x1c4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d01d      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <HAL_DMA_Abort_IT+0x1c8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d018      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_DMA_Abort_IT+0x1cc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_DMA_Abort_IT+0x1d0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_DMA_Abort_IT+0x1d4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <HAL_DMA_Abort_IT+0x1d8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x17c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <HAL_DMA_Abort_IT+0x1dc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d108      	bne.n	8003dba <HAL_DMA_Abort_IT+0x18e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e178      	b.n	80040ac <HAL_DMA_Abort_IT+0x480>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e16f      	b.n	80040ac <HAL_DMA_Abort_IT+0x480>
 8003dcc:	40020010 	.word	0x40020010
 8003dd0:	40020028 	.word	0x40020028
 8003dd4:	40020040 	.word	0x40020040
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	40020070 	.word	0x40020070
 8003de0:	40020088 	.word	0x40020088
 8003de4:	400200a0 	.word	0x400200a0
 8003de8:	400200b8 	.word	0x400200b8
 8003dec:	40020410 	.word	0x40020410
 8003df0:	40020428 	.word	0x40020428
 8003df4:	40020440 	.word	0x40020440
 8003df8:	40020458 	.word	0x40020458
 8003dfc:	40020470 	.word	0x40020470
 8003e00:	40020488 	.word	0x40020488
 8003e04:	400204a0 	.word	0x400204a0
 8003e08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 020e 	bic.w	r2, r2, #14
 8003e1a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a6c      	ldr	r2, [pc, #432]	; (8003fd4 <HAL_DMA_Abort_IT+0x3a8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d04a      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6b      	ldr	r2, [pc, #428]	; (8003fd8 <HAL_DMA_Abort_IT+0x3ac>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d045      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a69      	ldr	r2, [pc, #420]	; (8003fdc <HAL_DMA_Abort_IT+0x3b0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d040      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a68      	ldr	r2, [pc, #416]	; (8003fe0 <HAL_DMA_Abort_IT+0x3b4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d03b      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a66      	ldr	r2, [pc, #408]	; (8003fe4 <HAL_DMA_Abort_IT+0x3b8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d036      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a65      	ldr	r2, [pc, #404]	; (8003fe8 <HAL_DMA_Abort_IT+0x3bc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d031      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a63      	ldr	r2, [pc, #396]	; (8003fec <HAL_DMA_Abort_IT+0x3c0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d02c      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a62      	ldr	r2, [pc, #392]	; (8003ff0 <HAL_DMA_Abort_IT+0x3c4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d027      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a60      	ldr	r2, [pc, #384]	; (8003ff4 <HAL_DMA_Abort_IT+0x3c8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d022      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a5f      	ldr	r2, [pc, #380]	; (8003ff8 <HAL_DMA_Abort_IT+0x3cc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d01d      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5d      	ldr	r2, [pc, #372]	; (8003ffc <HAL_DMA_Abort_IT+0x3d0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d018      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5c      	ldr	r2, [pc, #368]	; (8004000 <HAL_DMA_Abort_IT+0x3d4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5a      	ldr	r2, [pc, #360]	; (8004004 <HAL_DMA_Abort_IT+0x3d8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a59      	ldr	r2, [pc, #356]	; (8004008 <HAL_DMA_Abort_IT+0x3dc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d009      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a57      	ldr	r2, [pc, #348]	; (800400c <HAL_DMA_Abort_IT+0x3e0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x290>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a56      	ldr	r2, [pc, #344]	; (8004010 <HAL_DMA_Abort_IT+0x3e4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d108      	bne.n	8003ece <HAL_DMA_Abort_IT+0x2a2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e007      	b.n	8003ede <HAL_DMA_Abort_IT+0x2b2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a3c      	ldr	r2, [pc, #240]	; (8003fd4 <HAL_DMA_Abort_IT+0x3a8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d072      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <HAL_DMA_Abort_IT+0x3ac>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d06d      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a39      	ldr	r2, [pc, #228]	; (8003fdc <HAL_DMA_Abort_IT+0x3b0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d068      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a37      	ldr	r2, [pc, #220]	; (8003fe0 <HAL_DMA_Abort_IT+0x3b4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d063      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a36      	ldr	r2, [pc, #216]	; (8003fe4 <HAL_DMA_Abort_IT+0x3b8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d05e      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a34      	ldr	r2, [pc, #208]	; (8003fe8 <HAL_DMA_Abort_IT+0x3bc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d059      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a33      	ldr	r2, [pc, #204]	; (8003fec <HAL_DMA_Abort_IT+0x3c0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d054      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a31      	ldr	r2, [pc, #196]	; (8003ff0 <HAL_DMA_Abort_IT+0x3c4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d04f      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a30      	ldr	r2, [pc, #192]	; (8003ff4 <HAL_DMA_Abort_IT+0x3c8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d04a      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2e      	ldr	r2, [pc, #184]	; (8003ff8 <HAL_DMA_Abort_IT+0x3cc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d045      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2d      	ldr	r2, [pc, #180]	; (8003ffc <HAL_DMA_Abort_IT+0x3d0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d040      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2b      	ldr	r2, [pc, #172]	; (8004000 <HAL_DMA_Abort_IT+0x3d4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d03b      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2a      	ldr	r2, [pc, #168]	; (8004004 <HAL_DMA_Abort_IT+0x3d8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d036      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a28      	ldr	r2, [pc, #160]	; (8004008 <HAL_DMA_Abort_IT+0x3dc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d031      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a27      	ldr	r2, [pc, #156]	; (800400c <HAL_DMA_Abort_IT+0x3e0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d02c      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <HAL_DMA_Abort_IT+0x3e4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d027      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a24      	ldr	r2, [pc, #144]	; (8004014 <HAL_DMA_Abort_IT+0x3e8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d022      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a22      	ldr	r2, [pc, #136]	; (8004018 <HAL_DMA_Abort_IT+0x3ec>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01d      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a21      	ldr	r2, [pc, #132]	; (800401c <HAL_DMA_Abort_IT+0x3f0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d018      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <HAL_DMA_Abort_IT+0x3f4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <HAL_DMA_Abort_IT+0x3f8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00e      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_DMA_Abort_IT+0x3fc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d009      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1b      	ldr	r2, [pc, #108]	; (800402c <HAL_DMA_Abort_IT+0x400>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <HAL_DMA_Abort_IT+0x3a2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <HAL_DMA_Abort_IT+0x404>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d132      	bne.n	8004034 <HAL_DMA_Abort_IT+0x408>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e031      	b.n	8004036 <HAL_DMA_Abort_IT+0x40a>
 8003fd2:	bf00      	nop
 8003fd4:	40020010 	.word	0x40020010
 8003fd8:	40020028 	.word	0x40020028
 8003fdc:	40020040 	.word	0x40020040
 8003fe0:	40020058 	.word	0x40020058
 8003fe4:	40020070 	.word	0x40020070
 8003fe8:	40020088 	.word	0x40020088
 8003fec:	400200a0 	.word	0x400200a0
 8003ff0:	400200b8 	.word	0x400200b8
 8003ff4:	40020410 	.word	0x40020410
 8003ff8:	40020428 	.word	0x40020428
 8003ffc:	40020440 	.word	0x40020440
 8004000:	40020458 	.word	0x40020458
 8004004:	40020470 	.word	0x40020470
 8004008:	40020488 	.word	0x40020488
 800400c:	400204a0 	.word	0x400204a0
 8004010:	400204b8 	.word	0x400204b8
 8004014:	58025408 	.word	0x58025408
 8004018:	5802541c 	.word	0x5802541c
 800401c:	58025430 	.word	0x58025430
 8004020:	58025444 	.word	0x58025444
 8004024:	58025458 	.word	0x58025458
 8004028:	5802546c 	.word	0x5802546c
 800402c:	58025480 	.word	0x58025480
 8004030:	58025494 	.word	0x58025494
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d028      	beq.n	800408c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004048:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004068:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800408a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop

080040b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b098      	sub	sp, #96	; 0x60
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80040c0:	4a84      	ldr	r2, [pc, #528]	; (80042d4 <HAL_FDCAN_Init+0x21c>)
 80040c2:	f107 030c 	add.w	r3, r7, #12
 80040c6:	4611      	mov	r1, r2
 80040c8:	224c      	movs	r2, #76	; 0x4c
 80040ca:	4618      	mov	r0, r3
 80040cc:	f005 fea2 	bl	8009e14 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e1c6      	b.n	8004468 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7e      	ldr	r2, [pc, #504]	; (80042d8 <HAL_FDCAN_Init+0x220>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d106      	bne.n	80040f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fe fdfa 	bl	8002d00 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0210 	bic.w	r2, r2, #16
 800411a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800411c:	f7ff f94c 	bl	80033b8 <HAL_GetTick>
 8004120:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004122:	e014      	b.n	800414e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004124:	f7ff f948 	bl	80033b8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b0a      	cmp	r3, #10
 8004130:	d90d      	bls.n	800414e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2203      	movs	r2, #3
 8004146:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e18c      	b.n	8004468 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d0e3      	beq.n	8004124 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800416c:	f7ff f924 	bl	80033b8 <HAL_GetTick>
 8004170:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004172:	e014      	b.n	800419e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004174:	f7ff f920 	bl	80033b8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b0a      	cmp	r3, #10
 8004180:	d90d      	bls.n	800419e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e164      	b.n	8004468 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0e3      	beq.n	8004174 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0202 	orr.w	r2, r2, #2
 80041ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7c1b      	ldrb	r3, [r3, #16]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d108      	bne.n	80041d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d2:	619a      	str	r2, [r3, #24]
 80041d4:	e007      	b.n	80041e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	7c5b      	ldrb	r3, [r3, #17]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d108      	bne.n	8004200 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041fc:	619a      	str	r2, [r3, #24]
 80041fe:	e007      	b.n	8004210 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800420e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	7c9b      	ldrb	r3, [r3, #18]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d108      	bne.n	800422a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004226:	619a      	str	r2, [r3, #24]
 8004228:	e007      	b.n	800423a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004238:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800425e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0210 	bic.w	r2, r2, #16
 800426e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d108      	bne.n	800428a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0204 	orr.w	r2, r2, #4
 8004286:	619a      	str	r2, [r3, #24]
 8004288:	e030      	b.n	80042ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d02c      	beq.n	80042ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d020      	beq.n	80042dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699a      	ldr	r2, [r3, #24]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0210 	orr.w	r2, r2, #16
 80042b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d114      	bne.n	80042ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	619a      	str	r2, [r3, #24]
 80042d2:	e00b      	b.n	80042ec <HAL_FDCAN_Init+0x234>
 80042d4:	08009eac 	.word	0x08009eac
 80042d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004304:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	3b01      	subs	r3, #1
 800430e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004314:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004316:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004320:	d115      	bne.n	800434e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	3b01      	subs	r3, #1
 800432e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004330:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	3b01      	subs	r3, #1
 8004338:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800433a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	3b01      	subs	r3, #1
 8004344:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800434a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800434c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004374:	4413      	add	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d011      	beq.n	800439e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004382:	f023 0107 	bic.w	r1, r3, #7
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	3360      	adds	r3, #96	; 0x60
 800438e:	443b      	add	r3, r7
 8004390:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d011      	beq.n	80043ca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043ae:	f023 0107 	bic.w	r1, r3, #7
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	3360      	adds	r3, #96	; 0x60
 80043ba:	443b      	add	r3, r7
 80043bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d012      	beq.n	80043f8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043da:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	3360      	adds	r3, #96	; 0x60
 80043e6:	443b      	add	r3, r7
 80043e8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80043ec:	011a      	lsls	r2, r3, #4
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d012      	beq.n	8004426 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004408:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	3360      	adds	r3, #96	; 0x60
 8004414:	443b      	add	r3, r7
 8004416:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800441a:	021a      	lsls	r2, r3, #8
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a11      	ldr	r2, [pc, #68]	; (8004470 <HAL_FDCAN_Init+0x3b8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d107      	bne.n	8004440 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f022 0203 	bic.w	r2, r2, #3
 800443e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fb1f 	bl	8004a9c <FDCAN_CalcultateRamBlockAddresses>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004464:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004468:	4618      	mov	r0, r3
 800446a:	3760      	adds	r7, #96	; 0x60
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	4000a000 	.word	0x4000a000

08004474 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b096      	sub	sp, #88	; 0x58
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800447c:	4b9a      	ldr	r3, [pc, #616]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	079b      	lsls	r3, r3, #30
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004484:	4b98      	ldr	r3, [pc, #608]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	079b      	lsls	r3, r3, #30
 800448a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800448c:	4013      	ands	r3, r2
 800448e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800449a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044a4:	4013      	ands	r3, r2
 80044a6:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044bc:	4013      	ands	r3, r2
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d4:	4013      	ands	r3, r2
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044de:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ec:	4013      	ands	r3, r2
 80044ee:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80044fa:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004504:	4013      	ands	r3, r2
 8004506:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004538:	651a      	str	r2, [r3, #80]	; 0x50
 800453a:	4b6b      	ldr	r3, [pc, #428]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 800453c:	2200      	movs	r2, #0
 800453e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fa5f 	bl	8004a04 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004548:	0a9b      	lsrs	r3, r3, #10
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01d      	beq.n	800458e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	0a9b      	lsrs	r3, r3, #10
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d017      	beq.n	800458e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004572:	4013      	ands	r3, r2
 8004574:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800457e:	651a      	str	r2, [r3, #80]	; 0x50
 8004580:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 8004582:	2200      	movs	r2, #0
 8004584:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fa12 	bl	80049b2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800458e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800459a:	4b54      	ldr	r3, [pc, #336]	; (80046ec <HAL_FDCAN_IRQHandler+0x278>)
 800459c:	400b      	ands	r3, r1
 800459e:	6513      	str	r3, [r2, #80]	; 0x50
 80045a0:	4a51      	ldr	r2, [pc, #324]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 80045a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a4:	0f9b      	lsrs	r3, r3, #30
 80045a6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80045a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9c0 	bl	8004930 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80045b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045bc:	4b4b      	ldr	r3, [pc, #300]	; (80046ec <HAL_FDCAN_IRQHandler+0x278>)
 80045be:	400b      	ands	r3, r1
 80045c0:	6513      	str	r3, [r2, #80]	; 0x50
 80045c2:	4a49      	ldr	r2, [pc, #292]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 80045c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c6:	0f9b      	lsrs	r3, r3, #30
 80045c8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80045ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f9ba 	bl	8004946 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80045d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045de:	4b43      	ldr	r3, [pc, #268]	; (80046ec <HAL_FDCAN_IRQHandler+0x278>)
 80045e0:	400b      	ands	r3, r1
 80045e2:	6513      	str	r3, [r2, #80]	; 0x50
 80045e4:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 80045e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e8:	0f9b      	lsrs	r3, r3, #30
 80045ea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80045ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f9b4 	bl	800495c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80045f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004600:	4b3a      	ldr	r3, [pc, #232]	; (80046ec <HAL_FDCAN_IRQHandler+0x278>)
 8004602:	400b      	ands	r3, r1
 8004604:	6513      	str	r3, [r2, #80]	; 0x50
 8004606:	4a38      	ldr	r2, [pc, #224]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 8004608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460a:	0f9b      	lsrs	r3, r3, #30
 800460c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800460e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f9ae 	bl	8004972 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004618:	0adb      	lsrs	r3, r3, #11
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d010      	beq.n	8004644 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	0adb      	lsrs	r3, r3, #11
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004636:	651a      	str	r2, [r3, #80]	; 0x50
 8004638:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f9a2 	bl	8004988 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004646:	0a5b      	lsrs	r3, r3, #9
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01d      	beq.n	800468c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	0a5b      	lsrs	r3, r3, #9
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800466e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004670:	4013      	ands	r3, r2
 8004672:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467c:	651a      	str	r2, [r3, #80]	; 0x50
 800467e:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f988 	bl	800499c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800468c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468e:	0cdb      	lsrs	r3, r3, #19
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d010      	beq.n	80046ba <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	0cdb      	lsrs	r3, r3, #19
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046ac:	651a      	str	r2, [r3, #80]	; 0x50
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f987 	bl	80049c8 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80046ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d010      	beq.n	80046f4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046da:	651a      	str	r2, [r3, #80]	; 0x50
 80046dc:	4b02      	ldr	r3, [pc, #8]	; (80046e8 <HAL_FDCAN_IRQHandler+0x274>)
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	e004      	b.n	80046f0 <HAL_FDCAN_IRQHandler+0x27c>
 80046e6:	bf00      	nop
 80046e8:	4000a800 	.word	0x4000a800
 80046ec:	3fcfffff 	.word	0x3fcfffff
 80046f0:	f000 f974 	bl	80049dc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80046f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f6:	0c9b      	lsrs	r3, r3, #18
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	0c9b      	lsrs	r3, r3, #18
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004714:	651a      	str	r2, [r3, #80]	; 0x50
 8004716:	4b83      	ldr	r3, [pc, #524]	; (8004924 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004718:	2200      	movs	r2, #0
 800471a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f967 	bl	80049f0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	0c5b      	lsrs	r3, r3, #17
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d015      	beq.n	800475a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	0c5b      	lsrs	r3, r3, #17
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00f      	beq.n	800475a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004742:	651a      	str	r2, [r3, #80]	; 0x50
 8004744:	4b77      	ldr	r3, [pc, #476]	; (8004924 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004750:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004766:	4b70      	ldr	r3, [pc, #448]	; (8004928 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004768:	400b      	ands	r3, r1
 800476a:	6513      	str	r3, [r2, #80]	; 0x50
 800476c:	4a6d      	ldr	r2, [pc, #436]	; (8004924 <HAL_FDCAN_IRQHandler+0x4b0>)
 800476e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004770:	0f9b      	lsrs	r3, r3, #30
 8004772:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004774:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f958 	bl	8004a2c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800477c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477e:	2b00      	cmp	r3, #0
 8004780:	d011      	beq.n	80047a6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004788:	4b67      	ldr	r3, [pc, #412]	; (8004928 <HAL_FDCAN_IRQHandler+0x4b4>)
 800478a:	400b      	ands	r3, r1
 800478c:	6513      	str	r3, [r2, #80]	; 0x50
 800478e:	4a65      	ldr	r2, [pc, #404]	; (8004924 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004792:	0f9b      	lsrs	r3, r3, #30
 8004794:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800479c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_FDCAN_IRQHandler+0x4b8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	f040 80ac 	bne.w	800490a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80a4 	beq.w	800490a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d6:	4013      	ands	r3, r2
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ee:	4013      	ands	r3, r2
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	4013      	ands	r3, r2
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004814:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	4013      	ands	r3, r2
 8004820:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800482c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	4013      	ands	r3, r2
 8004838:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004856:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8f1 	bl	8004a42 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800486e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f8f1 	bl	8004a58 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	099b      	lsrs	r3, r3, #6
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01a      	beq.n	80048b8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d014      	beq.n	80048b8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	b29b      	uxth	r3, r3
 8004898:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2240      	movs	r2, #64	; 0x40
 80048ac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	6939      	ldr	r1, [r7, #16]
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8db 	bl	8004a6e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80048c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f8dc 	bl	8004a86 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f87f 	bl	8004a18 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800491a:	bf00      	nop
 800491c:	3758      	adds	r7, #88	; 0x58
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	4000a800 	.word	0x4000a800
 8004928:	3fcfffff 	.word	0x3fcfffff
 800492c:	4000a000 	.word	0x4000a000

08004930 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ab2:	4ba7      	ldr	r3, [pc, #668]	; (8004d50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	0091      	lsls	r1, r2, #2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004acc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	041a      	lsls	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004af2:	4b97      	ldr	r3, [pc, #604]	; (8004d50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	0091      	lsls	r1, r2, #2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	041a      	lsls	r2, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	4413      	add	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b34:	4b86      	ldr	r3, [pc, #536]	; (8004d50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	0091      	lsls	r1, r2, #2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	430b      	orrs	r3, r1
 8004b42:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b4e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	041a      	lsls	r2, r3, #16
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4413      	add	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b7c:	4b74      	ldr	r3, [pc, #464]	; (8004d50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	0091      	lsls	r1, r2, #2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b96:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	041a      	lsls	r2, r3, #16
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	4413      	add	r3, r2
 8004bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004bc4:	4b62      	ldr	r3, [pc, #392]	; (8004d50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	0091      	lsls	r1, r2, #2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4413      	add	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004bf0:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	0091      	lsls	r1, r2, #2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c0a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	041a      	lsls	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	4413      	add	r3, r2
 8004c28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	0091      	lsls	r1, r2, #2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c4c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	041a      	lsls	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c68:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c70:	061a      	lsls	r2, r3, #24
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c80:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004c82:	4413      	add	r3, r2
 8004c84:	009a      	lsls	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	441a      	add	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	441a      	add	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d16:	fb01 f303 	mul.w	r3, r1, r3
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d915      	bls.n	8004d78 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004d4c:	e006      	b.n	8004d5c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004d4e:	bf00      	nop
 8004d50:	ffff0003 	.word	0xffff0003
 8004d54:	10002b00 	.word	0x10002b00
 8004d58:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e010      	b.n	8004d9a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e005      	b.n	8004d8c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3f3      	bcc.n	8004d80 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop

08004da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	; 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004db6:	4b89      	ldr	r3, [pc, #548]	; (8004fdc <HAL_GPIO_Init+0x234>)
 8004db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dba:	e194      	b.n	80050e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	4013      	ands	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8186 	beq.w	80050e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d005      	beq.n	8004dec <HAL_GPIO_Init+0x44>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d130      	bne.n	8004e4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	2203      	movs	r2, #3
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e22:	2201      	movs	r2, #1
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	f003 0201 	and.w	r2, r3, #1
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d017      	beq.n	8004e8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	2203      	movs	r2, #3
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d123      	bne.n	8004ede <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	08da      	lsrs	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3208      	adds	r2, #8
 8004e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	220f      	movs	r2, #15
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	08da      	lsrs	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3208      	adds	r2, #8
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	2203      	movs	r2, #3
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 0203 	and.w	r2, r3, #3
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80e0 	beq.w	80050e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f20:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <HAL_GPIO_Init+0x238>)
 8004f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f26:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <HAL_GPIO_Init+0x238>)
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f30:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_GPIO_Init+0x238>)
 8004f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f3e:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <HAL_GPIO_Init+0x23c>)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	089b      	lsrs	r3, r3, #2
 8004f44:	3302      	adds	r3, #2
 8004f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	220f      	movs	r2, #15
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <HAL_GPIO_Init+0x240>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d052      	beq.n	8005010 <HAL_GPIO_Init+0x268>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_GPIO_Init+0x244>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d031      	beq.n	8004fd6 <HAL_GPIO_Init+0x22e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <HAL_GPIO_Init+0x248>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d02b      	beq.n	8004fd2 <HAL_GPIO_Init+0x22a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <HAL_GPIO_Init+0x24c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d025      	beq.n	8004fce <HAL_GPIO_Init+0x226>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <HAL_GPIO_Init+0x250>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <HAL_GPIO_Init+0x222>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_GPIO_Init+0x254>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d019      	beq.n	8004fc6 <HAL_GPIO_Init+0x21e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1a      	ldr	r2, [pc, #104]	; (8005000 <HAL_GPIO_Init+0x258>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_GPIO_Init+0x21a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a19      	ldr	r2, [pc, #100]	; (8005004 <HAL_GPIO_Init+0x25c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00d      	beq.n	8004fbe <HAL_GPIO_Init+0x216>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_GPIO_Init+0x260>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <HAL_GPIO_Init+0x212>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a17      	ldr	r2, [pc, #92]	; (800500c <HAL_GPIO_Init+0x264>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_GPIO_Init+0x20e>
 8004fb2:	2309      	movs	r3, #9
 8004fb4:	e02d      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	e02b      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fba:	2308      	movs	r3, #8
 8004fbc:	e029      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fbe:	2307      	movs	r3, #7
 8004fc0:	e027      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	e025      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fc6:	2305      	movs	r3, #5
 8004fc8:	e023      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fca:	2304      	movs	r3, #4
 8004fcc:	e021      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e01f      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e01d      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e01b      	b.n	8005012 <HAL_GPIO_Init+0x26a>
 8004fda:	bf00      	nop
 8004fdc:	58000080 	.word	0x58000080
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	58000400 	.word	0x58000400
 8004fe8:	58020000 	.word	0x58020000
 8004fec:	58020400 	.word	0x58020400
 8004ff0:	58020800 	.word	0x58020800
 8004ff4:	58020c00 	.word	0x58020c00
 8004ff8:	58021000 	.word	0x58021000
 8004ffc:	58021400 	.word	0x58021400
 8005000:	58021800 	.word	0x58021800
 8005004:	58021c00 	.word	0x58021c00
 8005008:	58022000 	.word	0x58022000
 800500c:	58022400 	.word	0x58022400
 8005010:	2300      	movs	r3, #0
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	f002 0203 	and.w	r2, r2, #3
 8005018:	0092      	lsls	r2, r2, #2
 800501a:	4093      	lsls	r3, r2
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005022:	4938      	ldr	r1, [pc, #224]	; (8005104 <HAL_GPIO_Init+0x35c>)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	089b      	lsrs	r3, r3, #2
 8005028:	3302      	adds	r3, #2
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	3301      	adds	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f47f ae63 	bne.w	8004dbc <HAL_GPIO_Init+0x14>
  }
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	3724      	adds	r7, #36	; 0x24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	58000400 	.word	0x58000400

08005108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
 8005114:	4613      	mov	r3, r2
 8005116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005118:	787b      	ldrb	r3, [r7, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005124:	e003      	b.n	800512e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	041a      	lsls	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	619a      	str	r2, [r3, #24]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800514c:	887a      	ldrh	r2, [r7, #2]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4013      	ands	r3, r2
 8005152:	041a      	lsls	r2, r3, #16
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	43d9      	mvns	r1, r3
 8005158:	887b      	ldrh	r3, [r7, #2]
 800515a:	400b      	ands	r3, r1
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	619a      	str	r2, [r3, #24]
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	4603      	mov	r3, r0
 8005176:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f804 	bl	80051a2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	4603      	mov	r3, r0
 80051aa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	b08f      	sub	sp, #60	; 0x3c
 80051bc:	af0a      	add	r7, sp, #40	; 0x28
 80051be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e054      	b.n	8005274 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fd fe6f 	bl	8002ec8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2203      	movs	r2, #3
 80051ee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f004 fc21 	bl	8009a50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	687e      	ldr	r6, [r7, #4]
 8005216:	466d      	mov	r5, sp
 8005218:	f106 0410 	add.w	r4, r6, #16
 800521c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800521e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005224:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005228:	e885 0003 	stmia.w	r5, {r0, r1}
 800522c:	1d33      	adds	r3, r6, #4
 800522e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005230:	6838      	ldr	r0, [r7, #0]
 8005232:	f004 fb9f 	bl	8009974 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2101      	movs	r1, #1
 800523c:	4618      	mov	r0, r3
 800523e:	f004 fc18 	bl	8009a72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	687e      	ldr	r6, [r7, #4]
 800524a:	466d      	mov	r5, sp
 800524c:	f106 0410 	add.w	r4, r6, #16
 8005250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005258:	e894 0003 	ldmia.w	r4, {r0, r1}
 800525c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005260:	1d33      	adds	r3, r6, #4
 8005262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f004 fcf7 	bl	8009c58 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800527c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005284:	4b19      	ldr	r3, [pc, #100]	; (80052ec <HAL_PWREx_ConfigSupply+0x70>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d00a      	beq.n	80052a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005290:	4b16      	ldr	r3, [pc, #88]	; (80052ec <HAL_PWREx_ConfigSupply+0x70>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d001      	beq.n	80052a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e01f      	b.n	80052e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e01d      	b.n	80052e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_PWREx_ConfigSupply+0x70>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f023 0207 	bic.w	r2, r3, #7
 80052ae:	490f      	ldr	r1, [pc, #60]	; (80052ec <HAL_PWREx_ConfigSupply+0x70>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052b6:	f7fe f87f 	bl	80033b8 <HAL_GetTick>
 80052ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052bc:	e009      	b.n	80052d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052be:	f7fe f87b 	bl	80033b8 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052cc:	d901      	bls.n	80052d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e007      	b.n	80052e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_PWREx_ConfigSupply+0x70>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052de:	d1ee      	bne.n	80052be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	58024800 	.word	0x58024800

080052f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a04      	ldr	r2, [pc, #16]	; (800530c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80052fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fe:	60d3      	str	r3, [r2, #12]
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	58024800 	.word	0x58024800

08005310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08c      	sub	sp, #48	; 0x30
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f000 bc1d 	b.w	8005b5e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8087 	beq.w	8005440 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005332:	4b99      	ldr	r3, [pc, #612]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800533c:	4b96      	ldr	r3, [pc, #600]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	2b10      	cmp	r3, #16
 8005346:	d007      	beq.n	8005358 <HAL_RCC_OscConfig+0x48>
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	2b18      	cmp	r3, #24
 800534c:	d110      	bne.n	8005370 <HAL_RCC_OscConfig+0x60>
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d10b      	bne.n	8005370 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	4b8f      	ldr	r3, [pc, #572]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d06c      	beq.n	800543e <HAL_RCC_OscConfig+0x12e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d168      	bne.n	800543e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e3f6      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005378:	d106      	bne.n	8005388 <HAL_RCC_OscConfig+0x78>
 800537a:	4b87      	ldr	r3, [pc, #540]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a86      	ldr	r2, [pc, #536]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e02e      	b.n	80053e6 <HAL_RCC_OscConfig+0xd6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10c      	bne.n	80053aa <HAL_RCC_OscConfig+0x9a>
 8005390:	4b81      	ldr	r3, [pc, #516]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a80      	ldr	r2, [pc, #512]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	4b7e      	ldr	r3, [pc, #504]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a7d      	ldr	r2, [pc, #500]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	e01d      	b.n	80053e6 <HAL_RCC_OscConfig+0xd6>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053b2:	d10c      	bne.n	80053ce <HAL_RCC_OscConfig+0xbe>
 80053b4:	4b78      	ldr	r3, [pc, #480]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a77      	ldr	r2, [pc, #476]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b75      	ldr	r3, [pc, #468]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a74      	ldr	r2, [pc, #464]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	e00b      	b.n	80053e6 <HAL_RCC_OscConfig+0xd6>
 80053ce:	4b72      	ldr	r3, [pc, #456]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a71      	ldr	r2, [pc, #452]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b6f      	ldr	r3, [pc, #444]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6e      	ldr	r2, [pc, #440]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80053e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d013      	beq.n	8005416 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ee:	f7fd ffe3 	bl	80033b8 <HAL_GetTick>
 80053f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f6:	f7fd ffdf 	bl	80033b8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b64      	cmp	r3, #100	; 0x64
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e3aa      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005408:	4b63      	ldr	r3, [pc, #396]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0xe6>
 8005414:	e014      	b.n	8005440 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fd ffcf 	bl	80033b8 <HAL_GetTick>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800541e:	f7fd ffcb 	bl	80033b8 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b64      	cmp	r3, #100	; 0x64
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e396      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005430:	4b59      	ldr	r3, [pc, #356]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <HAL_RCC_OscConfig+0x10e>
 800543c:	e000      	b.n	8005440 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80cb 	beq.w	80055e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544e:	4b52      	ldr	r3, [pc, #328]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005456:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005458:	4b4f      	ldr	r3, [pc, #316]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <HAL_RCC_OscConfig+0x164>
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	2b18      	cmp	r3, #24
 8005468:	d156      	bne.n	8005518 <HAL_RCC_OscConfig+0x208>
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d151      	bne.n	8005518 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005474:	4b48      	ldr	r3, [pc, #288]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_OscConfig+0x17c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e368      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800548c:	4b42      	ldr	r3, [pc, #264]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f023 0219 	bic.w	r2, r3, #25
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	493f      	ldr	r1, [pc, #252]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800549e:	f7fd ff8b 	bl	80033b8 <HAL_GetTick>
 80054a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a6:	f7fd ff87 	bl	80033b8 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e352      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b8:	4b37      	ldr	r3, [pc, #220]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c4:	f7fd ffa8 	bl	8003418 <HAL_GetREVID>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d817      	bhi.n	8005502 <HAL_RCC_OscConfig+0x1f2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d108      	bne.n	80054ec <HAL_RCC_OscConfig+0x1dc>
 80054da:	4b2f      	ldr	r3, [pc, #188]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054e2:	4a2d      	ldr	r2, [pc, #180]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80054e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ea:	e07b      	b.n	80055e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ec:	4b2a      	ldr	r3, [pc, #168]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	4927      	ldr	r1, [pc, #156]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005500:	e070      	b.n	80055e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005502:	4b25      	ldr	r3, [pc, #148]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	061b      	lsls	r3, r3, #24
 8005510:	4921      	ldr	r1, [pc, #132]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005512:	4313      	orrs	r3, r2
 8005514:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005516:	e065      	b.n	80055e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d048      	beq.n	80055b2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005520:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f023 0219 	bic.w	r2, r3, #25
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	491a      	ldr	r1, [pc, #104]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fd ff41 	bl	80033b8 <HAL_GetTick>
 8005536:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800553a:	f7fd ff3d 	bl	80033b8 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e308      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	f7fd ff5e 	bl	8003418 <HAL_GetREVID>
 800555c:	4603      	mov	r3, r0
 800555e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005562:	4293      	cmp	r3, r2
 8005564:	d81a      	bhi.n	800559c <HAL_RCC_OscConfig+0x28c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d108      	bne.n	8005580 <HAL_RCC_OscConfig+0x270>
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557c:	6053      	str	r3, [r2, #4]
 800557e:	e031      	b.n	80055e4 <HAL_RCC_OscConfig+0x2d4>
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	031b      	lsls	r3, r3, #12
 800558e:	4902      	ldr	r1, [pc, #8]	; (8005598 <HAL_RCC_OscConfig+0x288>)
 8005590:	4313      	orrs	r3, r2
 8005592:	604b      	str	r3, [r1, #4]
 8005594:	e026      	b.n	80055e4 <HAL_RCC_OscConfig+0x2d4>
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
 800559c:	4b9a      	ldr	r3, [pc, #616]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	4997      	ldr	r1, [pc, #604]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
 80055b0:	e018      	b.n	80055e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b2:	4b95      	ldr	r3, [pc, #596]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a94      	ldr	r2, [pc, #592]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055be:	f7fd fefb 	bl	80033b8 <HAL_GetTick>
 80055c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c6:	f7fd fef7 	bl	80033b8 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e2c2      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055d8:	4b8b      	ldr	r3, [pc, #556]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f0      	bne.n	80055c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80a9 	beq.w	8005744 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f2:	4b85      	ldr	r3, [pc, #532]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055fc:	4b82      	ldr	r3, [pc, #520]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d007      	beq.n	8005618 <HAL_RCC_OscConfig+0x308>
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b18      	cmp	r3, #24
 800560c:	d13a      	bne.n	8005684 <HAL_RCC_OscConfig+0x374>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d135      	bne.n	8005684 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005618:	4b7b      	ldr	r3, [pc, #492]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_OscConfig+0x320>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d001      	beq.n	8005630 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e296      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005630:	f7fd fef2 	bl	8003418 <HAL_GetREVID>
 8005634:	4603      	mov	r3, r0
 8005636:	f241 0203 	movw	r2, #4099	; 0x1003
 800563a:	4293      	cmp	r3, r2
 800563c:	d817      	bhi.n	800566e <HAL_RCC_OscConfig+0x35e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	2b20      	cmp	r3, #32
 8005644:	d108      	bne.n	8005658 <HAL_RCC_OscConfig+0x348>
 8005646:	4b70      	ldr	r3, [pc, #448]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800564e:	4a6e      	ldr	r2, [pc, #440]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005654:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005656:	e075      	b.n	8005744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005658:	4b6b      	ldr	r3, [pc, #428]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	069b      	lsls	r3, r3, #26
 8005666:	4968      	ldr	r1, [pc, #416]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005668:	4313      	orrs	r3, r2
 800566a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800566c:	e06a      	b.n	8005744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800566e:	4b66      	ldr	r3, [pc, #408]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	061b      	lsls	r3, r3, #24
 800567c:	4962      	ldr	r1, [pc, #392]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800567e:	4313      	orrs	r3, r2
 8005680:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005682:	e05f      	b.n	8005744 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d042      	beq.n	8005712 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800568c:	4b5e      	ldr	r3, [pc, #376]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a5d      	ldr	r2, [pc, #372]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fd fe8e 	bl	80033b8 <HAL_GetTick>
 800569c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056a0:	f7fd fe8a 	bl	80033b8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e255      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b2:	4b55      	ldr	r3, [pc, #340]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056be:	f7fd feab 	bl	8003418 <HAL_GetREVID>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d817      	bhi.n	80056fc <HAL_RCC_OscConfig+0x3ec>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d108      	bne.n	80056e6 <HAL_RCC_OscConfig+0x3d6>
 80056d4:	4b4c      	ldr	r3, [pc, #304]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056dc:	4a4a      	ldr	r2, [pc, #296]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80056de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056e2:	6053      	str	r3, [r2, #4]
 80056e4:	e02e      	b.n	8005744 <HAL_RCC_OscConfig+0x434>
 80056e6:	4b48      	ldr	r3, [pc, #288]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	069b      	lsls	r3, r3, #26
 80056f4:	4944      	ldr	r1, [pc, #272]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	604b      	str	r3, [r1, #4]
 80056fa:	e023      	b.n	8005744 <HAL_RCC_OscConfig+0x434>
 80056fc:	4b42      	ldr	r3, [pc, #264]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	061b      	lsls	r3, r3, #24
 800570a:	493f      	ldr	r1, [pc, #252]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800570c:	4313      	orrs	r3, r2
 800570e:	60cb      	str	r3, [r1, #12]
 8005710:	e018      	b.n	8005744 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005712:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a3c      	ldr	r2, [pc, #240]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571e:	f7fd fe4b 	bl	80033b8 <HAL_GetTick>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005726:	f7fd fe47 	bl	80033b8 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e212      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005738:	4b33      	ldr	r3, [pc, #204]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d036      	beq.n	80057be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d019      	beq.n	800578c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800575a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575c:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fd fe28 	bl	80033b8 <HAL_GetTick>
 8005768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800576c:	f7fd fe24 	bl	80033b8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1ef      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x45c>
 800578a:	e018      	b.n	80057be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800578c:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 800578e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fd fe0e 	bl	80033b8 <HAL_GetTick>
 800579c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a0:	f7fd fe0a 	bl	80033b8 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e1d5      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80057b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d039      	beq.n	800583e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01c      	beq.n	800580c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057d2:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80057d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057de:	f7fd fdeb 	bl	80033b8 <HAL_GetTick>
 80057e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057e6:	f7fd fde7 	bl	80033b8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e1b2      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057f8:	4b03      	ldr	r3, [pc, #12]	; (8005808 <HAL_RCC_OscConfig+0x4f8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x4d6>
 8005804:	e01b      	b.n	800583e <HAL_RCC_OscConfig+0x52e>
 8005806:	bf00      	nop
 8005808:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800580c:	4b9b      	ldr	r3, [pc, #620]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a9a      	ldr	r2, [pc, #616]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005816:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005818:	f7fd fdce 	bl	80033b8 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005820:	f7fd fdca 	bl	80033b8 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e195      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005832:	4b92      	ldr	r3, [pc, #584]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8081 	beq.w	800594e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800584c:	4b8c      	ldr	r3, [pc, #560]	; (8005a80 <HAL_RCC_OscConfig+0x770>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a8b      	ldr	r2, [pc, #556]	; (8005a80 <HAL_RCC_OscConfig+0x770>)
 8005852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005858:	f7fd fdae 	bl	80033b8 <HAL_GetTick>
 800585c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005860:	f7fd fdaa 	bl	80033b8 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	; 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e175      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005872:	4b83      	ldr	r3, [pc, #524]	; (8005a80 <HAL_RCC_OscConfig+0x770>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d106      	bne.n	8005894 <HAL_RCC_OscConfig+0x584>
 8005886:	4b7d      	ldr	r3, [pc, #500]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	4a7c      	ldr	r2, [pc, #496]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	6713      	str	r3, [r2, #112]	; 0x70
 8005892:	e02d      	b.n	80058f0 <HAL_RCC_OscConfig+0x5e0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10c      	bne.n	80058b6 <HAL_RCC_OscConfig+0x5a6>
 800589c:	4b77      	ldr	r3, [pc, #476]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	4a76      	ldr	r2, [pc, #472]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	6713      	str	r3, [r2, #112]	; 0x70
 80058a8:	4b74      	ldr	r3, [pc, #464]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	4a73      	ldr	r2, [pc, #460]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058ae:	f023 0304 	bic.w	r3, r3, #4
 80058b2:	6713      	str	r3, [r2, #112]	; 0x70
 80058b4:	e01c      	b.n	80058f0 <HAL_RCC_OscConfig+0x5e0>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d10c      	bne.n	80058d8 <HAL_RCC_OscConfig+0x5c8>
 80058be:	4b6f      	ldr	r3, [pc, #444]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c2:	4a6e      	ldr	r2, [pc, #440]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058c4:	f043 0304 	orr.w	r3, r3, #4
 80058c8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ca:	4b6c      	ldr	r3, [pc, #432]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	4a6b      	ldr	r2, [pc, #428]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	6713      	str	r3, [r2, #112]	; 0x70
 80058d6:	e00b      	b.n	80058f0 <HAL_RCC_OscConfig+0x5e0>
 80058d8:	4b68      	ldr	r3, [pc, #416]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058dc:	4a67      	ldr	r2, [pc, #412]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	6713      	str	r3, [r2, #112]	; 0x70
 80058e4:	4b65      	ldr	r3, [pc, #404]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	4a64      	ldr	r2, [pc, #400]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80058ea:	f023 0304 	bic.w	r3, r3, #4
 80058ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d015      	beq.n	8005924 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f8:	f7fd fd5e 	bl	80033b8 <HAL_GetTick>
 80058fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fe:	e00a      	b.n	8005916 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005900:	f7fd fd5a 	bl	80033b8 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	f241 3288 	movw	r2, #5000	; 0x1388
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e123      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005916:	4b59      	ldr	r3, [pc, #356]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0ee      	beq.n	8005900 <HAL_RCC_OscConfig+0x5f0>
 8005922:	e014      	b.n	800594e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7fd fd48 	bl	80033b8 <HAL_GetTick>
 8005928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800592a:	e00a      	b.n	8005942 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592c:	f7fd fd44 	bl	80033b8 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e10d      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005942:	4b4e      	ldr	r3, [pc, #312]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ee      	bne.n	800592c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8102 	beq.w	8005b5c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005958:	4b48      	ldr	r3, [pc, #288]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005960:	2b18      	cmp	r3, #24
 8005962:	f000 80bd 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b02      	cmp	r3, #2
 800596c:	f040 809e 	bne.w	8005aac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005970:	4b42      	ldr	r3, [pc, #264]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a41      	ldr	r2, [pc, #260]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd fd1c 	bl	80033b8 <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005984:	f7fd fd18 	bl	80033b8 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0e3      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005996:	4b39      	ldr	r3, [pc, #228]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059a2:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80059a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a6:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <HAL_RCC_OscConfig+0x774>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	430a      	orrs	r2, r1
 80059b6:	4931      	ldr	r1, [pc, #196]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	628b      	str	r3, [r1, #40]	; 0x28
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	3b01      	subs	r3, #1
 80059c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	3b01      	subs	r3, #1
 80059cc:	025b      	lsls	r3, r3, #9
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	3b01      	subs	r3, #1
 80059d8:	041b      	lsls	r3, r3, #16
 80059da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e4:	3b01      	subs	r3, #1
 80059e6:	061b      	lsls	r3, r3, #24
 80059e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059ec:	4923      	ldr	r1, [pc, #140]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80059f2:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 80059f8:	f023 0301 	bic.w	r3, r3, #1
 80059fc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059fe:	4b1f      	ldr	r3, [pc, #124]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a02:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <HAL_RCC_OscConfig+0x778>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a0a:	00d2      	lsls	r2, r2, #3
 8005a0c:	491b      	ldr	r1, [pc, #108]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a12:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	f023 020c 	bic.w	r2, r3, #12
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	4917      	ldr	r1, [pc, #92]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a24:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	f023 0202 	bic.w	r2, r3, #2
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a30:	4912      	ldr	r1, [pc, #72]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a36:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a42:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a04      	ldr	r2, [pc, #16]	; (8005a7c <HAL_RCC_OscConfig+0x76c>)
 8005a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fd fca1 	bl	80033b8 <HAL_GetTick>
 8005a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a78:	e011      	b.n	8005a9e <HAL_RCC_OscConfig+0x78e>
 8005a7a:	bf00      	nop
 8005a7c:	58024400 	.word	0x58024400
 8005a80:	58024800 	.word	0x58024800
 8005a84:	fffffc0c 	.word	0xfffffc0c
 8005a88:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8c:	f7fd fc94 	bl	80033b8 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e05f      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a9e:	4b32      	ldr	r3, [pc, #200]	; (8005b68 <HAL_RCC_OscConfig+0x858>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x77c>
 8005aaa:	e057      	b.n	8005b5c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aac:	4b2e      	ldr	r3, [pc, #184]	; (8005b68 <HAL_RCC_OscConfig+0x858>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2d      	ldr	r2, [pc, #180]	; (8005b68 <HAL_RCC_OscConfig+0x858>)
 8005ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab8:	f7fd fc7e 	bl	80033b8 <HAL_GetTick>
 8005abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fd fc7a 	bl	80033b8 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e045      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ad2:	4b25      	ldr	r3, [pc, #148]	; (8005b68 <HAL_RCC_OscConfig+0x858>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x7b0>
 8005ade:	e03d      	b.n	8005b5c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ae0:	4b21      	ldr	r3, [pc, #132]	; (8005b68 <HAL_RCC_OscConfig+0x858>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ae6:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <HAL_RCC_OscConfig+0x858>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d031      	beq.n	8005b58 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f003 0203 	and.w	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d12a      	bne.n	8005b58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d122      	bne.n	8005b58 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d11a      	bne.n	8005b58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	0a5b      	lsrs	r3, r3, #9
 8005b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d111      	bne.n	8005b58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d108      	bne.n	8005b58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	0e1b      	lsrs	r3, r3, #24
 8005b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3730      	adds	r7, #48	; 0x30
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	58024400 	.word	0x58024400

08005b6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e19c      	b.n	8005eba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b80:	4b8a      	ldr	r3, [pc, #552]	; (8005dac <HAL_RCC_ClockConfig+0x240>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d910      	bls.n	8005bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8e:	4b87      	ldr	r3, [pc, #540]	; (8005dac <HAL_RCC_ClockConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 020f 	bic.w	r2, r3, #15
 8005b96:	4985      	ldr	r1, [pc, #532]	; (8005dac <HAL_RCC_ClockConfig+0x240>)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b83      	ldr	r3, [pc, #524]	; (8005dac <HAL_RCC_ClockConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e184      	b.n	8005eba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d010      	beq.n	8005bde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	4b7b      	ldr	r3, [pc, #492]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d908      	bls.n	8005bde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bcc:	4b78      	ldr	r3, [pc, #480]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	4975      	ldr	r1, [pc, #468]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d010      	beq.n	8005c0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	4b70      	ldr	r3, [pc, #448]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d908      	bls.n	8005c0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bfa:	4b6d      	ldr	r3, [pc, #436]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	496a      	ldr	r1, [pc, #424]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d010      	beq.n	8005c3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	4b64      	ldr	r3, [pc, #400]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d908      	bls.n	8005c3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c28:	4b61      	ldr	r3, [pc, #388]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	495e      	ldr	r1, [pc, #376]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69da      	ldr	r2, [r3, #28]
 8005c4a:	4b59      	ldr	r3, [pc, #356]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d908      	bls.n	8005c68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c56:	4b56      	ldr	r3, [pc, #344]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	4953      	ldr	r1, [pc, #332]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d010      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d908      	bls.n	8005c96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c84:	4b4a      	ldr	r3, [pc, #296]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f023 020f 	bic.w	r2, r3, #15
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	4947      	ldr	r1, [pc, #284]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d055      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ca2:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4940      	ldr	r1, [pc, #256]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cbc:	4b3c      	ldr	r3, [pc, #240]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d121      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0f6      	b.n	8005eba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cd4:	4b36      	ldr	r3, [pc, #216]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d115      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0ea      	b.n	8005eba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d107      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cec:	4b30      	ldr	r3, [pc, #192]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0de      	b.n	8005eba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cfc:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0d6      	b.n	8005eba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d0c:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f023 0207 	bic.w	r2, r3, #7
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4925      	ldr	r1, [pc, #148]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fd fb4b 	bl	80033b8 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d26:	f7fd fb47 	bl	80033b8 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e0be      	b.n	8005eba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3c:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d1eb      	bne.n	8005d26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d208      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f023 020f 	bic.w	r2, r3, #15
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	490e      	ldr	r1, [pc, #56]	; (8005db0 <HAL_RCC_ClockConfig+0x244>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_ClockConfig+0x240>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d214      	bcs.n	8005db4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <HAL_RCC_ClockConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 020f 	bic.w	r2, r3, #15
 8005d92:	4906      	ldr	r1, [pc, #24]	; (8005dac <HAL_RCC_ClockConfig+0x240>)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9a:	4b04      	ldr	r3, [pc, #16]	; (8005dac <HAL_RCC_ClockConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d005      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e086      	b.n	8005eba <HAL_RCC_ClockConfig+0x34e>
 8005dac:	52002000 	.word	0x52002000
 8005db0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	4b3f      	ldr	r3, [pc, #252]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d208      	bcs.n	8005de2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dd0:	4b3c      	ldr	r3, [pc, #240]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	4939      	ldr	r1, [pc, #228]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d010      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	4b34      	ldr	r3, [pc, #208]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d208      	bcs.n	8005e10 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dfe:	4b31      	ldr	r3, [pc, #196]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	492e      	ldr	r1, [pc, #184]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d010      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d208      	bcs.n	8005e3e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e2c:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	4922      	ldr	r1, [pc, #136]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d010      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d208      	bcs.n	8005e6c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	4917      	ldr	r1, [pc, #92]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e6c:	f000 f834 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 8005e70:	4602      	mov	r2, r0
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	4912      	ldr	r1, [pc, #72]	; (8005ec8 <HAL_RCC_ClockConfig+0x35c>)
 8005e7e:	5ccb      	ldrb	r3, [r1, r3]
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
 8005e88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <HAL_RCC_ClockConfig+0x358>)
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	4a0d      	ldr	r2, [pc, #52]	; (8005ec8 <HAL_RCC_ClockConfig+0x35c>)
 8005e94:	5cd3      	ldrb	r3, [r2, r3]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <HAL_RCC_ClockConfig+0x360>)
 8005ea2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ea4:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <HAL_RCC_ClockConfig+0x364>)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_RCC_ClockConfig+0x368>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fd f874 	bl	8002f9c <HAL_InitTick>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	58024400 	.word	0x58024400
 8005ec8:	08009f24 	.word	0x08009f24
 8005ecc:	2400000c 	.word	0x2400000c
 8005ed0:	24000008 	.word	0x24000008
 8005ed4:	24000010 	.word	0x24000010

08005ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ede:	4bb3      	ldr	r3, [pc, #716]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee6:	2b18      	cmp	r3, #24
 8005ee8:	f200 8155 	bhi.w	8006196 <HAL_RCC_GetSysClockFreq+0x2be>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	08006197 	.word	0x08006197
 8005efc:	08006197 	.word	0x08006197
 8005f00:	08006197 	.word	0x08006197
 8005f04:	08006197 	.word	0x08006197
 8005f08:	08006197 	.word	0x08006197
 8005f0c:	08006197 	.word	0x08006197
 8005f10:	08006197 	.word	0x08006197
 8005f14:	08005f7f 	.word	0x08005f7f
 8005f18:	08006197 	.word	0x08006197
 8005f1c:	08006197 	.word	0x08006197
 8005f20:	08006197 	.word	0x08006197
 8005f24:	08006197 	.word	0x08006197
 8005f28:	08006197 	.word	0x08006197
 8005f2c:	08006197 	.word	0x08006197
 8005f30:	08006197 	.word	0x08006197
 8005f34:	08005f85 	.word	0x08005f85
 8005f38:	08006197 	.word	0x08006197
 8005f3c:	08006197 	.word	0x08006197
 8005f40:	08006197 	.word	0x08006197
 8005f44:	08006197 	.word	0x08006197
 8005f48:	08006197 	.word	0x08006197
 8005f4c:	08006197 	.word	0x08006197
 8005f50:	08006197 	.word	0x08006197
 8005f54:	08005f8b 	.word	0x08005f8b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f58:	4b94      	ldr	r3, [pc, #592]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d009      	beq.n	8005f78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f64:	4b91      	ldr	r3, [pc, #580]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	08db      	lsrs	r3, r3, #3
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	4a90      	ldr	r2, [pc, #576]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
 8005f74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f76:	e111      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f78:	4b8d      	ldr	r3, [pc, #564]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f7a:	61bb      	str	r3, [r7, #24]
    break;
 8005f7c:	e10e      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f7e:	4b8d      	ldr	r3, [pc, #564]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f80:	61bb      	str	r3, [r7, #24]
    break;
 8005f82:	e10b      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f84:	4b8c      	ldr	r3, [pc, #560]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f86:	61bb      	str	r3, [r7, #24]
    break;
 8005f88:	e108      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f8a:	4b88      	ldr	r3, [pc, #544]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f94:	4b85      	ldr	r3, [pc, #532]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fa0:	4b82      	ldr	r3, [pc, #520]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005faa:	4b80      	ldr	r3, [pc, #512]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	08db      	lsrs	r3, r3, #3
 8005fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80e1 	beq.w	8006190 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	f000 8083 	beq.w	80060dc <HAL_RCC_GetSysClockFreq+0x204>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	f200 80a1 	bhi.w	8006120 <HAL_RCC_GetSysClockFreq+0x248>
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_RCC_GetSysClockFreq+0x114>
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d056      	beq.n	8006098 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005fea:	e099      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fec:	4b6f      	ldr	r3, [pc, #444]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02d      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ff8:	4b6c      	ldr	r3, [pc, #432]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	08db      	lsrs	r3, r3, #3
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	4a6b      	ldr	r2, [pc, #428]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b62      	ldr	r3, [pc, #392]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	ed97 6a02 	vldr	s12, [r7, #8]
 8006036:	eddf 5a61 	vldr	s11, [pc, #388]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006052:	e087      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80061c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006066:	4b51      	ldr	r3, [pc, #324]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006076:	ed97 6a02 	vldr	s12, [r7, #8]
 800607a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800607e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006096:	e065      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80061c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	4b40      	ldr	r3, [pc, #256]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80060be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80060c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060da:	e043      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ee:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006102:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800611e:	e021      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80061c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a02 	vldr	s12, [r7, #8]
 8006146:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006162:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006164:	4b11      	ldr	r3, [pc, #68]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	0a5b      	lsrs	r3, r3, #9
 800616a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800616e:	3301      	adds	r3, #1
 8006170:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800617c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006188:	ee17 3a90 	vmov	r3, s15
 800618c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800618e:	e005      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
    break;
 8006194:	e002      	b.n	800619c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006198:	61bb      	str	r3, [r7, #24]
    break;
 800619a:	bf00      	nop
  }

  return sysclockfreq;
 800619c:	69bb      	ldr	r3, [r7, #24]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3724      	adds	r7, #36	; 0x24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	58024400 	.word	0x58024400
 80061b0:	03d09000 	.word	0x03d09000
 80061b4:	003d0900 	.word	0x003d0900
 80061b8:	007a1200 	.word	0x007a1200
 80061bc:	46000000 	.word	0x46000000
 80061c0:	4c742400 	.word	0x4c742400
 80061c4:	4a742400 	.word	0x4a742400
 80061c8:	4af42400 	.word	0x4af42400

080061cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061d2:	f7ff fe81 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 80061d6:	4602      	mov	r2, r0
 80061d8:	4b10      	ldr	r3, [pc, #64]	; (800621c <HAL_RCC_GetHCLKFreq+0x50>)
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	0a1b      	lsrs	r3, r3, #8
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	490f      	ldr	r1, [pc, #60]	; (8006220 <HAL_RCC_GetHCLKFreq+0x54>)
 80061e4:	5ccb      	ldrb	r3, [r1, r3]
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	fa22 f303 	lsr.w	r3, r2, r3
 80061ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_RCC_GetHCLKFreq+0x50>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <HAL_RCC_GetHCLKFreq+0x54>)
 80061fa:	5cd3      	ldrb	r3, [r2, r3]
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <HAL_RCC_GetHCLKFreq+0x58>)
 8006208:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800620a:	4a07      	ldr	r2, [pc, #28]	; (8006228 <HAL_RCC_GetHCLKFreq+0x5c>)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <HAL_RCC_GetHCLKFreq+0x58>)
 8006212:	681b      	ldr	r3, [r3, #0]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	58024400 	.word	0x58024400
 8006220:	08009f24 	.word	0x08009f24
 8006224:	2400000c 	.word	0x2400000c
 8006228:	24000008 	.word	0x24000008

0800622c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006230:	f7ff ffcc 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8006234:	4602      	mov	r2, r0
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	091b      	lsrs	r3, r3, #4
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	4904      	ldr	r1, [pc, #16]	; (8006254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006242:	5ccb      	ldrb	r3, [r1, r3]
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800624c:	4618      	mov	r0, r3
 800624e:	bd80      	pop	{r7, pc}
 8006250:	58024400 	.word	0x58024400
 8006254:	08009f24 	.word	0x08009f24

08006258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800625c:	f7ff ffb6 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8006260:	4602      	mov	r2, r0
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	4904      	ldr	r1, [pc, #16]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800626e:	5ccb      	ldrb	r3, [r1, r3]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	58024400 	.word	0x58024400
 8006280:	08009f24 	.word	0x08009f24

08006284 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	223f      	movs	r2, #63	; 0x3f
 8006292:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0207 	and.w	r2, r3, #7
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80062a0:	4b17      	ldr	r3, [pc, #92]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80062ac:	4b14      	ldr	r3, [pc, #80]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f003 020f 	and.w	r2, r3, #15
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80062c4:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80062dc:	4b08      	ldr	r3, [pc, #32]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_RCC_GetClockConfig+0x80>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 020f 	and.w	r2, r3, #15
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	58024400 	.word	0x58024400
 8006304:	52002000 	.word	0x52002000

08006308 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006314:	2300      	movs	r3, #0
 8006316:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d03f      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800632c:	d02a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800632e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006332:	d824      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006338:	d018      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800633a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800633e:	d81e      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006348:	d007      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800634a:	e018      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634c:	4ba3      	ldr	r3, [pc, #652]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4aa2      	ldr	r2, [pc, #648]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006358:	e015      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	2102      	movs	r1, #2
 8006360:	4618      	mov	r0, r3
 8006362:	f001 f9d5 	bl	8007710 <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800636a:	e00c      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3324      	adds	r3, #36	; 0x24
 8006370:	2102      	movs	r1, #2
 8006372:	4618      	mov	r0, r3
 8006374:	f001 fa7e 	bl	8007874 <RCCEx_PLL3_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800637c:	e003      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
      break;
 8006382:	e000      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800638c:	4b93      	ldr	r3, [pc, #588]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800638e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006398:	4990      	ldr	r1, [pc, #576]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	650b      	str	r3, [r1, #80]	; 0x50
 800639e:	e001      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d03d      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d826      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080063d5 	.word	0x080063d5
 80063c4:	080063e3 	.word	0x080063e3
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	0800640d 	.word	0x0800640d
 80063d0:	0800640d 	.word	0x0800640d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d4:	4b81      	ldr	r3, [pc, #516]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4a80      	ldr	r2, [pc, #512]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063e0:	e015      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	2100      	movs	r1, #0
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f991 	bl	8007710 <RCCEx_PLL2_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063f2:	e00c      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fa3a 	bl	8007874 <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006404:	e003      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
      break;
 800640a:	e000      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800640c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006414:	4b71      	ldr	r3, [pc, #452]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006418:	f023 0207 	bic.w	r2, r3, #7
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006420:	496e      	ldr	r1, [pc, #440]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006422:	4313      	orrs	r3, r2
 8006424:	650b      	str	r3, [r1, #80]	; 0x50
 8006426:	e001      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006434:	2b00      	cmp	r3, #0
 8006436:	d042      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006440:	d02b      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006446:	d825      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006448:	2bc0      	cmp	r3, #192	; 0xc0
 800644a:	d028      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800644c:	2bc0      	cmp	r3, #192	; 0xc0
 800644e:	d821      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d016      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	d81d      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d007      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006460:	e018      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006462:	4b5e      	ldr	r3, [pc, #376]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4a5d      	ldr	r2, [pc, #372]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800646e:	e017      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	2100      	movs	r1, #0
 8006476:	4618      	mov	r0, r3
 8006478:	f001 f94a 	bl	8007710 <RCCEx_PLL2_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006480:	e00e      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3324      	adds	r3, #36	; 0x24
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f001 f9f3 	bl	8007874 <RCCEx_PLL3_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006492:	e005      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800649e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80064a6:	4b4d      	ldr	r3, [pc, #308]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	494a      	ldr	r1, [pc, #296]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	650b      	str	r3, [r1, #80]	; 0x50
 80064b8:	e001      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d049      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064d4:	d030      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80064d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064da:	d82a      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064e0:	d02c      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80064e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064e6:	d824      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ec:	d018      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80064ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f2:	d81e      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80064f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064fc:	d007      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80064fe:	e018      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006500:	4b36      	ldr	r3, [pc, #216]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	4a35      	ldr	r2, [pc, #212]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800650c:	e017      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f001 f8fb 	bl	8007710 <RCCEx_PLL2_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800651e:	e00e      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3324      	adds	r3, #36	; 0x24
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f001 f9a4 	bl	8007874 <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006530:	e005      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	75fb      	strb	r3, [r7, #23]
      break;
 8006536:	e002      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800653c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006548:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006552:	4922      	ldr	r1, [pc, #136]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006554:	4313      	orrs	r3, r2
 8006556:	658b      	str	r3, [r1, #88]	; 0x58
 8006558:	e001      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006566:	2b00      	cmp	r3, #0
 8006568:	d04b      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006574:	d030      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800657a:	d82a      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800657c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006580:	d02e      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006586:	d824      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800658c:	d018      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800658e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006592:	d81e      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800659c:	d007      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800659e:	e018      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a0:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a0d      	ldr	r2, [pc, #52]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065ac:	e019      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3304      	adds	r3, #4
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 f8ab 	bl	8007710 <RCCEx_PLL2_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80065be:	e010      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3324      	adds	r3, #36	; 0x24
 80065c4:	2100      	movs	r1, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 f954 	bl	8007874 <RCCEx_PLL3_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065d0:	e007      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
      break;
 80065d6:	e004      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80065d8:	bf00      	nop
 80065da:	e002      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80065dc:	58024400 	.word	0x58024400
      break;
 80065e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065e8:	4b99      	ldr	r3, [pc, #612]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065f6:	4996      	ldr	r1, [pc, #600]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	658b      	str	r3, [r1, #88]	; 0x58
 80065fc:	e001      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d032      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	2b30      	cmp	r3, #48	; 0x30
 8006614:	d01c      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006616:	2b30      	cmp	r3, #48	; 0x30
 8006618:	d817      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800661a:	2b20      	cmp	r3, #32
 800661c:	d00c      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800661e:	2b20      	cmp	r3, #32
 8006620:	d813      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006626:	2b10      	cmp	r3, #16
 8006628:	d10f      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662a:	4b89      	ldr	r3, [pc, #548]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	4a88      	ldr	r2, [pc, #544]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006636:	e00e      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f866 	bl	8007710 <RCCEx_PLL2_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006648:	e005      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
      break;
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800665c:	4b7c      	ldr	r3, [pc, #496]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800665e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006668:	4979      	ldr	r1, [pc, #484]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800666a:	4313      	orrs	r3, r2
 800666c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800666e:	e001      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d047      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006688:	d030      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800668a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800668e:	d82a      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006694:	d02c      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006696:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800669a:	d824      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800669c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a0:	d018      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80066a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a6:	d81e      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80066ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b0:	d007      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80066b2:	e018      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b4:	4b66      	ldr	r3, [pc, #408]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4a65      	ldr	r2, [pc, #404]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066c0:	e017      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3304      	adds	r3, #4
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 f821 	bl	8007710 <RCCEx_PLL2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066d2:	e00e      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3324      	adds	r3, #36	; 0x24
 80066d8:	2100      	movs	r1, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f8ca 	bl	8007874 <RCCEx_PLL3_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066e4:	e005      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ea:	e002      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80066ec:	bf00      	nop
 80066ee:	e000      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80066f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066f8:	4b55      	ldr	r3, [pc, #340]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006704:	4952      	ldr	r1, [pc, #328]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006706:	4313      	orrs	r3, r2
 8006708:	650b      	str	r3, [r1, #80]	; 0x50
 800670a:	e001      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d049      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006724:	d02e      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800672a:	d828      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800672c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006730:	d02a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006732:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006736:	d822      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006738:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800673c:	d026      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800673e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006742:	d81c      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006748:	d010      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800674a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800674e:	d816      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01d      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006758:	d111      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3304      	adds	r3, #4
 800675e:	2101      	movs	r1, #1
 8006760:	4618      	mov	r0, r3
 8006762:	f000 ffd5 	bl	8007710 <RCCEx_PLL2_Config>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800676a:	e012      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3324      	adds	r3, #36	; 0x24
 8006770:	2101      	movs	r1, #1
 8006772:	4618      	mov	r0, r3
 8006774:	f001 f87e 	bl	8007874 <RCCEx_PLL3_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800677c:	e009      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
      break;
 8006782:	e006      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006784:	bf00      	nop
 8006786:	e004      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006788:	bf00      	nop
 800678a:	e002      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800678c:	bf00      	nop
 800678e:	e000      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006798:	4b2d      	ldr	r3, [pc, #180]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800679a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a4:	492a      	ldr	r1, [pc, #168]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	650b      	str	r3, [r1, #80]	; 0x50
 80067aa:	e001      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d04d      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c6:	d02e      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80067c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067cc:	d828      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d2:	d02a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d8:	d822      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067de:	d026      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80067e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067e4:	d81c      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ea:	d010      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80067ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f0:	d816      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d01d      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80067f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067fa:	d111      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	2101      	movs	r1, #1
 8006802:	4618      	mov	r0, r3
 8006804:	f000 ff84 	bl	8007710 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800680c:	e012      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3324      	adds	r3, #36	; 0x24
 8006812:	2101      	movs	r1, #1
 8006814:	4618      	mov	r0, r3
 8006816:	f001 f82d 	bl	8007874 <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800681e:	e009      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
      break;
 8006824:	e006      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006826:	bf00      	nop
 8006828:	e004      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800683c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006848:	4901      	ldr	r1, [pc, #4]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800684a:	4313      	orrs	r3, r2
 800684c:	658b      	str	r3, [r1, #88]	; 0x58
 800684e:	e003      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d02f      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686c:	d00e      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800686e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006872:	d814      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d015      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800687c:	d10f      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800687e:	4baf      	ldr	r3, [pc, #700]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	4aae      	ldr	r2, [pc, #696]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800688a:	e00c      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f000 ff3c 	bl	8007710 <RCCEx_PLL2_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800689c:	e003      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
      break;
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80068a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068ac:	4ba3      	ldr	r3, [pc, #652]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b8:	49a0      	ldr	r1, [pc, #640]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	650b      	str	r3, [r1, #80]	; 0x50
 80068be:	e001      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d032      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d81b      	bhi.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	08006917 	.word	0x08006917
 80068e4:	080068f1 	.word	0x080068f1
 80068e8:	080068ff 	.word	0x080068ff
 80068ec:	08006917 	.word	0x08006917
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f0:	4b92      	ldr	r3, [pc, #584]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a91      	ldr	r2, [pc, #580]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068fc:	e00c      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3304      	adds	r3, #4
 8006902:	2102      	movs	r1, #2
 8006904:	4618      	mov	r0, r3
 8006906:	f000 ff03 	bl	8007710 <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800690e:	e003      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	75fb      	strb	r3, [r7, #23]
      break;
 8006914:	e000      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800691e:	4b87      	ldr	r3, [pc, #540]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006922:	f023 0203 	bic.w	r2, r3, #3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	4984      	ldr	r1, [pc, #528]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800692c:	4313      	orrs	r3, r2
 800692e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006930:	e001      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8086 	beq.w	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006944:	4b7e      	ldr	r3, [pc, #504]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a7d      	ldr	r2, [pc, #500]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800694a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006950:	f7fc fd32 	bl	80033b8 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006956:	e009      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006958:	f7fc fd2e 	bl	80033b8 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b64      	cmp	r3, #100	; 0x64
 8006964:	d902      	bls.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	75fb      	strb	r3, [r7, #23]
        break;
 800696a:	e005      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800696c:	4b74      	ldr	r3, [pc, #464]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0ef      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d166      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800697e:	4b6f      	ldr	r3, [pc, #444]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006980:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006988:	4053      	eors	r3, r2
 800698a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698e:	2b00      	cmp	r3, #0
 8006990:	d013      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006992:	4b6a      	ldr	r3, [pc, #424]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800699c:	4b67      	ldr	r3, [pc, #412]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a66      	ldr	r2, [pc, #408]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069a8:	4b64      	ldr	r3, [pc, #400]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4a63      	ldr	r2, [pc, #396]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069b4:	4a61      	ldr	r2, [pc, #388]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c4:	d115      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c6:	f7fc fcf7 	bl	80033b8 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069cc:	e00b      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ce:	f7fc fcf3 	bl	80033b8 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069dc:	4293      	cmp	r3, r2
 80069de:	d902      	bls.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	75fb      	strb	r3, [r7, #23]
            break;
 80069e4:	e005      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e6:	4b55      	ldr	r3, [pc, #340]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0ed      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d126      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a06:	d10d      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006a08:	4b4c      	ldr	r3, [pc, #304]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a16:	0919      	lsrs	r1, r3, #4
 8006a18:	4b4a      	ldr	r3, [pc, #296]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006a1a:	400b      	ands	r3, r1
 8006a1c:	4947      	ldr	r1, [pc, #284]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	610b      	str	r3, [r1, #16]
 8006a22:	e005      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006a24:	4b45      	ldr	r3, [pc, #276]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	4a44      	ldr	r2, [pc, #272]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a2e:	6113      	str	r3, [r2, #16]
 8006a30:	4b42      	ldr	r3, [pc, #264]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3e:	493f      	ldr	r1, [pc, #252]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	670b      	str	r3, [r1, #112]	; 0x70
 8006a44:	e004      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	75bb      	strb	r3, [r7, #22]
 8006a4a:	e001      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8085 	beq.w	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a62:	2b28      	cmp	r3, #40	; 0x28
 8006a64:	d866      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006b49 	.word	0x08006b49
 8006a70:	08006b35 	.word	0x08006b35
 8006a74:	08006b35 	.word	0x08006b35
 8006a78:	08006b35 	.word	0x08006b35
 8006a7c:	08006b35 	.word	0x08006b35
 8006a80:	08006b35 	.word	0x08006b35
 8006a84:	08006b35 	.word	0x08006b35
 8006a88:	08006b35 	.word	0x08006b35
 8006a8c:	08006b11 	.word	0x08006b11
 8006a90:	08006b35 	.word	0x08006b35
 8006a94:	08006b35 	.word	0x08006b35
 8006a98:	08006b35 	.word	0x08006b35
 8006a9c:	08006b35 	.word	0x08006b35
 8006aa0:	08006b35 	.word	0x08006b35
 8006aa4:	08006b35 	.word	0x08006b35
 8006aa8:	08006b35 	.word	0x08006b35
 8006aac:	08006b23 	.word	0x08006b23
 8006ab0:	08006b35 	.word	0x08006b35
 8006ab4:	08006b35 	.word	0x08006b35
 8006ab8:	08006b35 	.word	0x08006b35
 8006abc:	08006b35 	.word	0x08006b35
 8006ac0:	08006b35 	.word	0x08006b35
 8006ac4:	08006b35 	.word	0x08006b35
 8006ac8:	08006b35 	.word	0x08006b35
 8006acc:	08006b49 	.word	0x08006b49
 8006ad0:	08006b35 	.word	0x08006b35
 8006ad4:	08006b35 	.word	0x08006b35
 8006ad8:	08006b35 	.word	0x08006b35
 8006adc:	08006b35 	.word	0x08006b35
 8006ae0:	08006b35 	.word	0x08006b35
 8006ae4:	08006b35 	.word	0x08006b35
 8006ae8:	08006b35 	.word	0x08006b35
 8006aec:	08006b49 	.word	0x08006b49
 8006af0:	08006b35 	.word	0x08006b35
 8006af4:	08006b35 	.word	0x08006b35
 8006af8:	08006b35 	.word	0x08006b35
 8006afc:	08006b35 	.word	0x08006b35
 8006b00:	08006b35 	.word	0x08006b35
 8006b04:	08006b35 	.word	0x08006b35
 8006b08:	08006b35 	.word	0x08006b35
 8006b0c:	08006b49 	.word	0x08006b49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	2101      	movs	r1, #1
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fdfa 	bl	8007710 <RCCEx_PLL2_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b20:	e013      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3324      	adds	r3, #36	; 0x24
 8006b26:	2101      	movs	r1, #1
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fea3 	bl	8007874 <RCCEx_PLL3_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b32:	e00a      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	75fb      	strb	r3, [r7, #23]
      break;
 8006b38:	e007      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006b3a:	bf00      	nop
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	58024800 	.word	0x58024800
 8006b44:	00ffffcf 	.word	0x00ffffcf
      break;
 8006b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b50:	4b96      	ldr	r3, [pc, #600]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b5c:	4993      	ldr	r1, [pc, #588]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	654b      	str	r3, [r1, #84]	; 0x54
 8006b62:	e001      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d038      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	d821      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006bc7 	.word	0x08006bc7
 8006b88:	08006b9d 	.word	0x08006b9d
 8006b8c:	08006baf 	.word	0x08006baf
 8006b90:	08006bc7 	.word	0x08006bc7
 8006b94:	08006bc7 	.word	0x08006bc7
 8006b98:	08006bc7 	.word	0x08006bc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fdb4 	bl	8007710 <RCCEx_PLL2_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006bac:	e00c      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3324      	adds	r3, #36	; 0x24
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fe5d 	bl	8007874 <RCCEx_PLL3_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006bbe:	e003      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc4:	e000      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bce:	4b77      	ldr	r3, [pc, #476]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	f023 0207 	bic.w	r2, r3, #7
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bda:	4974      	ldr	r1, [pc, #464]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	654b      	str	r3, [r1, #84]	; 0x54
 8006be0:	e001      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d03a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	d821      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c47 	.word	0x08006c47
 8006c08:	08006c1d 	.word	0x08006c1d
 8006c0c:	08006c2f 	.word	0x08006c2f
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c47 	.word	0x08006c47
 8006c18:	08006c47 	.word	0x08006c47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fd74 	bl	8007710 <RCCEx_PLL2_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c2c:	e00c      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3324      	adds	r3, #36	; 0x24
 8006c32:	2101      	movs	r1, #1
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fe1d 	bl	8007874 <RCCEx_PLL3_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c3e:	e003      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
      break;
 8006c44:	e000      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c4e:	4b57      	ldr	r3, [pc, #348]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c52:	f023 0207 	bic.w	r2, r3, #7
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5c:	4953      	ldr	r1, [pc, #332]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	658b      	str	r3, [r1, #88]	; 0x58
 8006c62:	e001      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d04b      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c7e:	d02e      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c84:	d828      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d02a      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c90:	d822      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c96:	d026      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c9c:	d81c      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca2:	d010      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca8:	d816      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01d      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cb2:	d111      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fd28 	bl	8007710 <RCCEx_PLL2_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006cc4:	e012      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3324      	adds	r3, #36	; 0x24
 8006cca:	2102      	movs	r1, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fdd1 	bl	8007874 <RCCEx_PLL3_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006cd6:	e009      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
      break;
 8006cdc:	e006      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006cde:	bf00      	nop
 8006ce0:	e004      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d00:	492a      	ldr	r1, [pc, #168]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	654b      	str	r3, [r1, #84]	; 0x54
 8006d06:	e001      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d04d      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d22:	d02e      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006d24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d28:	d828      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2e:	d02a      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d34:	d822      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d3a:	d026      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d40:	d81c      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d46:	d010      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4c:	d816      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01d      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d56:	d111      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fcd6 	bl	8007710 <RCCEx_PLL2_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d68:	e012      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3324      	adds	r3, #36	; 0x24
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fd7f 	bl	8007874 <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d7a:	e009      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d80:	e006      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d82:	bf00      	nop
 8006d84:	e004      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d86:	bf00      	nop
 8006d88:	e002      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d8a:	bf00      	nop
 8006d8c:	e000      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10c      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d96:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006da4:	4901      	ldr	r1, [pc, #4]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	658b      	str	r3, [r1, #88]	; 0x58
 8006daa:	e003      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d04b      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006dca:	d02e      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006dcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006dd0:	d828      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d02a      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	d822      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006dde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006de2:	d026      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006de4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006de8:	d81c      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dee:	d010      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df4:	d816      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01d      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dfe:	d111      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fc82 	bl	8007710 <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e10:	e012      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3324      	adds	r3, #36	; 0x24
 8006e16:	2102      	movs	r1, #2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fd2b 	bl	8007874 <RCCEx_PLL3_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e22:	e009      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
      break;
 8006e28:	e006      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006e2a:	bf00      	nop
 8006e2c:	e004      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e3e:	4b9d      	ldr	r3, [pc, #628]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e4c:	4999      	ldr	r1, [pc, #612]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	658b      	str	r3, [r1, #88]	; 0x58
 8006e52:	e001      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6e:	d10a      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3324      	adds	r3, #36	; 0x24
 8006e74:	2102      	movs	r1, #2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fcfc 	bl	8007874 <RCCEx_PLL3_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e86:	4b8b      	ldr	r3, [pc, #556]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e94:	4987      	ldr	r1, [pc, #540]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb0:	d10a      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3324      	adds	r3, #36	; 0x24
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fcdb 	bl	8007874 <RCCEx_PLL3_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ec8:	4b7a      	ldr	r3, [pc, #488]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ed6:	4977      	ldr	r1, [pc, #476]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d034      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef2:	d01d      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef8:	d817      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f02:	d009      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006f04:	e011      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fbff 	bl	8007710 <RCCEx_PLL2_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f16:	e00c      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3324      	adds	r3, #36	; 0x24
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fca8 	bl	8007874 <RCCEx_PLL3_Config>
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f28:	e003      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2e:	e000      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f38:	4b5e      	ldr	r3, [pc, #376]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f46:	495b      	ldr	r1, [pc, #364]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f4c:	e001      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d033      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f68:	d01c      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006f6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f6e:	d816      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f74:	d003      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f7a:	d007      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006f7c:	e00f      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7e:	4b4d      	ldr	r3, [pc, #308]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	4a4c      	ldr	r2, [pc, #304]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f8a:	e00c      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3324      	adds	r3, #36	; 0x24
 8006f90:	2101      	movs	r1, #1
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fc6e 	bl	8007874 <RCCEx_PLL3_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f9c:	e003      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fac:	4b41      	ldr	r3, [pc, #260]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fba:	493e      	ldr	r1, [pc, #248]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	654b      	str	r3, [r1, #84]	; 0x54
 8006fc0:	e001      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d029      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fde:	d007      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006fe0:	e00f      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe2:	4b34      	ldr	r3, [pc, #208]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	4a33      	ldr	r2, [pc, #204]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fee:	e00b      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	2102      	movs	r1, #2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb8a 	bl	8007710 <RCCEx_PLL2_Config>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007000:	e002      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
      break;
 8007006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701a:	4926      	ldr	r1, [pc, #152]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800701c:	4313      	orrs	r3, r2
 800701e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007020:	e001      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3324      	adds	r3, #36	; 0x24
 8007036:	2102      	movs	r1, #2
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fc1b 	bl	8007874 <RCCEx_PLL3_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d033      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705c:	d017      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800705e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007062:	d811      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007068:	d013      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800706a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800706e:	d80b      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d010      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007078:	d106      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800707a:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007086:	e007      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
      break;
 800708c:	e004      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800708e:	bf00      	nop
 8007090:	e002      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007092:	bf00      	nop
 8007094:	e000      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10c      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070aa:	4902      	ldr	r1, [pc, #8]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	654b      	str	r3, [r1, #84]	; 0x54
 80070b0:	e004      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80070b2:	bf00      	nop
 80070b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070c8:	4b31      	ldr	r3, [pc, #196]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d4:	492e      	ldr	r1, [pc, #184]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80070e6:	4b2a      	ldr	r3, [pc, #168]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070f4:	4926      	ldr	r1, [pc, #152]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007106:	4b22      	ldr	r3, [pc, #136]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007112:	491f      	ldr	r1, [pc, #124]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007114:	4313      	orrs	r3, r2
 8007116:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00d      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007124:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	4a19      	ldr	r2, [pc, #100]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800712a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800712e:	6113      	str	r3, [r2, #16]
 8007130:	4b17      	ldr	r3, [pc, #92]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800713a:	4915      	ldr	r1, [pc, #84]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800713c:	4313      	orrs	r3, r2
 800713e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da08      	bge.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007148:	4b11      	ldr	r3, [pc, #68]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800714a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007154:	490e      	ldr	r1, [pc, #56]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007156:	4313      	orrs	r3, r2
 8007158:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	4906      	ldr	r1, [pc, #24]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007176:	4313      	orrs	r3, r2
 8007178:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800717a:	7dbb      	ldrb	r3, [r7, #22]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	58024400 	.word	0x58024400

08007194 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007198:	f7ff f818 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 800719c:	4602      	mov	r2, r0
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	091b      	lsrs	r3, r3, #4
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	4904      	ldr	r1, [pc, #16]	; (80071bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	58024400 	.word	0x58024400
 80071bc:	08009f24 	.word	0x08009f24

080071c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b089      	sub	sp, #36	; 0x24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071c8:	4ba1      	ldr	r3, [pc, #644]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80071d2:	4b9f      	ldr	r3, [pc, #636]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	0b1b      	lsrs	r3, r3, #12
 80071d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071de:	4b9c      	ldr	r3, [pc, #624]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	091b      	lsrs	r3, r3, #4
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071ea:	4b99      	ldr	r3, [pc, #612]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 8111 	beq.w	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b02      	cmp	r3, #2
 8007212:	f000 8083 	beq.w	800731c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b02      	cmp	r3, #2
 800721a:	f200 80a1 	bhi.w	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d056      	beq.n	80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800722a:	e099      	b.n	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800722c:	4b88      	ldr	r3, [pc, #544]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02d      	beq.n	8007294 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007238:	4b85      	ldr	r3, [pc, #532]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	4a84      	ldr	r2, [pc, #528]	; (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
 8007248:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007262:	4b7b      	ldr	r3, [pc, #492]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a03 	vldr	s12, [r7, #12]
 8007276:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007292:	e087      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b6a      	ldr	r3, [pc, #424]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d6:	e065      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b59      	ldr	r3, [pc, #356]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800731a:	e043      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b48      	ldr	r3, [pc, #288]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007342:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800735e:	e021      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b37      	ldr	r3, [pc, #220]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80073a4:	4b2a      	ldr	r3, [pc, #168]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	0a5b      	lsrs	r3, r3, #9
 80073aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073be:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ca:	ee17 2a90 	vmov	r2, s15
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80073d2:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	0c1b      	lsrs	r3, r3, #16
 80073d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073dc:	ee07 3a90 	vmov	s15, r3
 80073e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80073f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073f8:	ee17 2a90 	vmov	r2, s15
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007404:	0e1b      	lsrs	r3, r3, #24
 8007406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800741a:	edd7 6a07 	vldr	s13, [r7, #28]
 800741e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007426:	ee17 2a90 	vmov	r2, s15
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800742e:	e008      	b.n	8007442 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	609a      	str	r2, [r3, #8]
}
 8007442:	bf00      	nop
 8007444:	3724      	adds	r7, #36	; 0x24
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	58024400 	.word	0x58024400
 8007454:	03d09000 	.word	0x03d09000
 8007458:	46000000 	.word	0x46000000
 800745c:	4c742400 	.word	0x4c742400
 8007460:	4a742400 	.word	0x4a742400
 8007464:	4af42400 	.word	0x4af42400

08007468 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007468:	b480      	push	{r7}
 800746a:	b089      	sub	sp, #36	; 0x24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007470:	4ba1      	ldr	r3, [pc, #644]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800747a:	4b9f      	ldr	r3, [pc, #636]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	0d1b      	lsrs	r3, r3, #20
 8007480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007484:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007486:	4b9c      	ldr	r3, [pc, #624]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007492:	4b99      	ldr	r3, [pc, #612]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	08db      	lsrs	r3, r3, #3
 8007498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8111 	beq.w	80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	f000 8083 	beq.w	80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	f200 80a1 	bhi.w	8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d056      	beq.n	8007580 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074d2:	e099      	b.n	8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d4:	4b88      	ldr	r3, [pc, #544]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d02d      	beq.n	800753c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074e0:	4b85      	ldr	r3, [pc, #532]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	08db      	lsrs	r3, r3, #3
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	4a84      	ldr	r2, [pc, #528]	; (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	ee07 3a90 	vmov	s15, r3
 80074f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750a:	4b7b      	ldr	r3, [pc, #492]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751a:	ed97 6a03 	vldr	s12, [r7, #12]
 800751e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007536:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800753a:	e087      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800754a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754e:	4b6a      	ldr	r3, [pc, #424]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007562:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800757e:	e065      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007592:	4b59      	ldr	r3, [pc, #356]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075c2:	e043      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800770c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d6:	4b48      	ldr	r3, [pc, #288]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007606:	e021      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761a:	4b37      	ldr	r3, [pc, #220]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762a:	ed97 6a03 	vldr	s12, [r7, #12]
 800762e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800763e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800764a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800764c:	4b2a      	ldr	r3, [pc, #168]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	0a5b      	lsrs	r3, r3, #9
 8007652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007666:	edd7 6a07 	vldr	s13, [r7, #28]
 800766a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007672:	ee17 2a90 	vmov	r2, s15
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800767a:	4b1f      	ldr	r3, [pc, #124]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007690:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007694:	edd7 6a07 	vldr	s13, [r7, #28]
 8007698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800769c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a0:	ee17 2a90 	vmov	r2, s15
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80076a8:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	0e1b      	lsrs	r3, r3, #24
 80076ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ce:	ee17 2a90 	vmov	r2, s15
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076d6:	e008      	b.n	80076ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	609a      	str	r2, [r3, #8]
}
 80076ea:	bf00      	nop
 80076ec:	3724      	adds	r7, #36	; 0x24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	58024400 	.word	0x58024400
 80076fc:	03d09000 	.word	0x03d09000
 8007700:	46000000 	.word	0x46000000
 8007704:	4c742400 	.word	0x4c742400
 8007708:	4a742400 	.word	0x4a742400
 800770c:	4af42400 	.word	0x4af42400

08007710 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800771e:	4b53      	ldr	r3, [pc, #332]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d101      	bne.n	800772e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e099      	b.n	8007862 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800772e:	4b4f      	ldr	r3, [pc, #316]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a4e      	ldr	r2, [pc, #312]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007734:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773a:	f7fb fe3d 	bl	80033b8 <HAL_GetTick>
 800773e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007740:	e008      	b.n	8007754 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007742:	f7fb fe39 	bl	80033b8 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e086      	b.n	8007862 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007754:	4b45      	ldr	r3, [pc, #276]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f0      	bne.n	8007742 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007760:	4b42      	ldr	r3, [pc, #264]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	031b      	lsls	r3, r3, #12
 800776e:	493f      	ldr	r1, [pc, #252]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007770:	4313      	orrs	r3, r2
 8007772:	628b      	str	r3, [r1, #40]	; 0x28
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	3b01      	subs	r3, #1
 800777a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	3b01      	subs	r3, #1
 8007784:	025b      	lsls	r3, r3, #9
 8007786:	b29b      	uxth	r3, r3
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	3b01      	subs	r3, #1
 8007790:	041b      	lsls	r3, r3, #16
 8007792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	3b01      	subs	r3, #1
 800779e:	061b      	lsls	r3, r3, #24
 80077a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077a4:	4931      	ldr	r1, [pc, #196]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077aa:	4b30      	ldr	r3, [pc, #192]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	492d      	ldr	r1, [pc, #180]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077bc:	4b2b      	ldr	r3, [pc, #172]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	f023 0220 	bic.w	r2, r3, #32
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	4928      	ldr	r1, [pc, #160]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077ce:	4b27      	ldr	r3, [pc, #156]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	4a26      	ldr	r2, [pc, #152]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077d4:	f023 0310 	bic.w	r3, r3, #16
 80077d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077da:	4b24      	ldr	r3, [pc, #144]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077de:	4b24      	ldr	r3, [pc, #144]	; (8007870 <RCCEx_PLL2_Config+0x160>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	69d2      	ldr	r2, [r2, #28]
 80077e6:	00d2      	lsls	r2, r2, #3
 80077e8:	4920      	ldr	r1, [pc, #128]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077ee:	4b1f      	ldr	r3, [pc, #124]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	4a1e      	ldr	r2, [pc, #120]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077f4:	f043 0310 	orr.w	r3, r3, #16
 80077f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007800:	4b1a      	ldr	r3, [pc, #104]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	4a19      	ldr	r2, [pc, #100]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800780a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800780c:	e00f      	b.n	800782e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007814:	4b15      	ldr	r3, [pc, #84]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4a14      	ldr	r2, [pc, #80]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 800781a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800781e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007820:	e005      	b.n	800782e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	4a11      	ldr	r2, [pc, #68]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800782c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a0e      	ldr	r2, [pc, #56]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800783a:	f7fb fdbd 	bl	80033b8 <HAL_GetTick>
 800783e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007840:	e008      	b.n	8007854 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007842:	f7fb fdb9 	bl	80033b8 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e006      	b.n	8007862 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0f0      	beq.n	8007842 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	58024400 	.word	0x58024400
 8007870:	ffff0007 	.word	0xffff0007

08007874 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007882:	4b53      	ldr	r3, [pc, #332]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	2b03      	cmp	r3, #3
 800788c:	d101      	bne.n	8007892 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e099      	b.n	80079c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007892:	4b4f      	ldr	r3, [pc, #316]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a4e      	ldr	r2, [pc, #312]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800789c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800789e:	f7fb fd8b 	bl	80033b8 <HAL_GetTick>
 80078a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078a4:	e008      	b.n	80078b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078a6:	f7fb fd87 	bl	80033b8 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e086      	b.n	80079c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078b8:	4b45      	ldr	r3, [pc, #276]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1f0      	bne.n	80078a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078c4:	4b42      	ldr	r3, [pc, #264]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	051b      	lsls	r3, r3, #20
 80078d2:	493f      	ldr	r1, [pc, #252]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	628b      	str	r3, [r1, #40]	; 0x28
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	3b01      	subs	r3, #1
 80078de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	025b      	lsls	r3, r3, #9
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	3b01      	subs	r3, #1
 8007902:	061b      	lsls	r3, r3, #24
 8007904:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007908:	4931      	ldr	r1, [pc, #196]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800790a:	4313      	orrs	r3, r2
 800790c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800790e:	4b30      	ldr	r3, [pc, #192]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	492d      	ldr	r1, [pc, #180]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800791c:	4313      	orrs	r3, r2
 800791e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007920:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	4928      	ldr	r1, [pc, #160]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800792e:	4313      	orrs	r3, r2
 8007930:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007932:	4b27      	ldr	r3, [pc, #156]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	4a26      	ldr	r2, [pc, #152]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800793c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800793e:	4b24      	ldr	r3, [pc, #144]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007942:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <RCCEx_PLL3_Config+0x160>)
 8007944:	4013      	ands	r3, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	69d2      	ldr	r2, [r2, #28]
 800794a:	00d2      	lsls	r2, r2, #3
 800794c:	4920      	ldr	r1, [pc, #128]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800794e:	4313      	orrs	r3, r2
 8007950:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007952:	4b1f      	ldr	r3, [pc, #124]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a1e      	ldr	r2, [pc, #120]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007964:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	4a19      	ldr	r2, [pc, #100]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800796a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800796e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007970:	e00f      	b.n	8007992 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d106      	bne.n	8007986 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007978:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	4a14      	ldr	r2, [pc, #80]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800797e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007984:	e005      	b.n	8007992 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007986:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	4a11      	ldr	r2, [pc, #68]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800798c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007990:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007992:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a0e      	ldr	r2, [pc, #56]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800799e:	f7fb fd0b 	bl	80033b8 <HAL_GetTick>
 80079a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079a4:	e008      	b.n	80079b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80079a6:	f7fb fd07 	bl	80033b8 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e006      	b.n	80079c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0f0      	beq.n	80079a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	58024400 	.word	0x58024400
 80079d4:	ffff0007 	.word	0xffff0007

080079d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e049      	b.n	8007a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f841 	bl	8007a86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3304      	adds	r3, #4
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f000 fa00 	bl	8007e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d001      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e054      	b.n	8007b5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0201 	orr.w	r2, r2, #1
 8007aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a26      	ldr	r2, [pc, #152]	; (8007b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d022      	beq.n	8007b1c <HAL_TIM_Base_Start_IT+0x80>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ade:	d01d      	beq.n	8007b1c <HAL_TIM_Base_Start_IT+0x80>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a22      	ldr	r2, [pc, #136]	; (8007b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d018      	beq.n	8007b1c <HAL_TIM_Base_Start_IT+0x80>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a21      	ldr	r2, [pc, #132]	; (8007b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d013      	beq.n	8007b1c <HAL_TIM_Base_Start_IT+0x80>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a1f      	ldr	r2, [pc, #124]	; (8007b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00e      	beq.n	8007b1c <HAL_TIM_Base_Start_IT+0x80>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a1e      	ldr	r2, [pc, #120]	; (8007b7c <HAL_TIM_Base_Start_IT+0xe0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d009      	beq.n	8007b1c <HAL_TIM_Base_Start_IT+0x80>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1c      	ldr	r2, [pc, #112]	; (8007b80 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <HAL_TIM_Base_Start_IT+0x80>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1b      	ldr	r2, [pc, #108]	; (8007b84 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d115      	bne.n	8007b48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	4b19      	ldr	r3, [pc, #100]	; (8007b88 <HAL_TIM_Base_Start_IT+0xec>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b06      	cmp	r3, #6
 8007b2c:	d015      	beq.n	8007b5a <HAL_TIM_Base_Start_IT+0xbe>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b34:	d011      	beq.n	8007b5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0201 	orr.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b46:	e008      	b.n	8007b5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0201 	orr.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	e000      	b.n	8007b5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	40010000 	.word	0x40010000
 8007b70:	40000400 	.word	0x40000400
 8007b74:	40000800 	.word	0x40000800
 8007b78:	40000c00 	.word	0x40000c00
 8007b7c:	40010400 	.word	0x40010400
 8007b80:	40001800 	.word	0x40001800
 8007b84:	40014000 	.word	0x40014000
 8007b88:	00010007 	.word	0x00010007

08007b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d122      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d11b      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f06f 0202 	mvn.w	r2, #2
 8007bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f905 	bl	8007dde <HAL_TIM_IC_CaptureCallback>
 8007bd4:	e005      	b.n	8007be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f8f7 	bl	8007dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f908 	bl	8007df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d122      	bne.n	8007c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d11b      	bne.n	8007c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0204 	mvn.w	r2, #4
 8007c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2202      	movs	r2, #2
 8007c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8db 	bl	8007dde <HAL_TIM_IC_CaptureCallback>
 8007c28:	e005      	b.n	8007c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f8cd 	bl	8007dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f8de 	bl	8007df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d122      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d11b      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0208 	mvn.w	r2, #8
 8007c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2204      	movs	r2, #4
 8007c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f8b1 	bl	8007dde <HAL_TIM_IC_CaptureCallback>
 8007c7c:	e005      	b.n	8007c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f8a3 	bl	8007dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f8b4 	bl	8007df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b10      	cmp	r3, #16
 8007c9c:	d122      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d11b      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f06f 0210 	mvn.w	r2, #16
 8007cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2208      	movs	r2, #8
 8007cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f887 	bl	8007dde <HAL_TIM_IC_CaptureCallback>
 8007cd0:	e005      	b.n	8007cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f879 	bl	8007dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f88a 	bl	8007df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d10e      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d107      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0201 	mvn.w	r2, #1
 8007d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7fa ffb6 	bl	8002c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	2b80      	cmp	r3, #128	; 0x80
 8007d1c:	d10e      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d28:	2b80      	cmp	r3, #128	; 0x80
 8007d2a:	d107      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f914 	bl	8007f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4a:	d10e      	bne.n	8007d6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d56:	2b80      	cmp	r3, #128	; 0x80
 8007d58:	d107      	bne.n	8007d6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f907 	bl	8007f78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d10e      	bne.n	8007d96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d107      	bne.n	8007d96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f838 	bl	8007e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	f003 0320 	and.w	r3, r3, #32
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d10e      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f003 0320 	and.w	r3, r3, #32
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d107      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f06f 0220 	mvn.w	r2, #32
 8007dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f8c7 	bl	8007f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
	...

08007e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a40      	ldr	r2, [pc, #256]	; (8007f30 <TIM_Base_SetConfig+0x114>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d013      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3a:	d00f      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a3d      	ldr	r2, [pc, #244]	; (8007f34 <TIM_Base_SetConfig+0x118>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00b      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a3c      	ldr	r2, [pc, #240]	; (8007f38 <TIM_Base_SetConfig+0x11c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d007      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a3b      	ldr	r2, [pc, #236]	; (8007f3c <TIM_Base_SetConfig+0x120>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a3a      	ldr	r2, [pc, #232]	; (8007f40 <TIM_Base_SetConfig+0x124>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d108      	bne.n	8007e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a2f      	ldr	r2, [pc, #188]	; (8007f30 <TIM_Base_SetConfig+0x114>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01f      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7c:	d01b      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a2c      	ldr	r2, [pc, #176]	; (8007f34 <TIM_Base_SetConfig+0x118>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d017      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2b      	ldr	r2, [pc, #172]	; (8007f38 <TIM_Base_SetConfig+0x11c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d013      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2a      	ldr	r2, [pc, #168]	; (8007f3c <TIM_Base_SetConfig+0x120>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00f      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a29      	ldr	r2, [pc, #164]	; (8007f40 <TIM_Base_SetConfig+0x124>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00b      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a28      	ldr	r2, [pc, #160]	; (8007f44 <TIM_Base_SetConfig+0x128>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a27      	ldr	r2, [pc, #156]	; (8007f48 <TIM_Base_SetConfig+0x12c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a26      	ldr	r2, [pc, #152]	; (8007f4c <TIM_Base_SetConfig+0x130>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d108      	bne.n	8007ec8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a10      	ldr	r2, [pc, #64]	; (8007f30 <TIM_Base_SetConfig+0x114>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00f      	beq.n	8007f14 <TIM_Base_SetConfig+0xf8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a12      	ldr	r2, [pc, #72]	; (8007f40 <TIM_Base_SetConfig+0x124>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00b      	beq.n	8007f14 <TIM_Base_SetConfig+0xf8>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a11      	ldr	r2, [pc, #68]	; (8007f44 <TIM_Base_SetConfig+0x128>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d007      	beq.n	8007f14 <TIM_Base_SetConfig+0xf8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <TIM_Base_SetConfig+0x12c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d003      	beq.n	8007f14 <TIM_Base_SetConfig+0xf8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a0f      	ldr	r2, [pc, #60]	; (8007f4c <TIM_Base_SetConfig+0x130>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d103      	bne.n	8007f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	615a      	str	r2, [r3, #20]
}
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40010000 	.word	0x40010000
 8007f34:	40000400 	.word	0x40000400
 8007f38:	40000800 	.word	0x40000800
 8007f3c:	40000c00 	.word	0x40000c00
 8007f40:	40010400 	.word	0x40010400
 8007f44:	40014000 	.word	0x40014000
 8007f48:	40014400 	.word	0x40014400
 8007f4c:	40014800 	.word	0x40014800

08007f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e042      	b.n	8008024 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d106      	bne.n	8007fb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7fa ff1b 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2224      	movs	r2, #36	; 0x24
 8007fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fbea 	bl	80087a8 <UART_SetConfig>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e022      	b.n	8008024 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 f946 	bl	8009278 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800800a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0201 	orr.w	r2, r2, #1
 800801a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 f9cd 	bl	80093bc <UART_CheckIdleState>
 8008022:	4603      	mov	r3, r0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b0ba      	sub	sp, #232	; 0xe8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008056:	f640 030f 	movw	r3, #2063	; 0x80f
 800805a:	4013      	ands	r3, r2
 800805c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11b      	bne.n	80080a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d015      	beq.n	80080a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d105      	bne.n	800808c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d009      	beq.n	80080a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 835a 	beq.w	800874a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
      }
      return;
 800809e:	e354      	b.n	800874a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 811f 	beq.w	80082e8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80080ae:	4b8b      	ldr	r3, [pc, #556]	; (80082dc <HAL_UART_IRQHandler+0x2b0>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80080ba:	4b89      	ldr	r3, [pc, #548]	; (80082e0 <HAL_UART_IRQHandler+0x2b4>)
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8112 	beq.w	80082e8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d011      	beq.n	80080f4 <HAL_UART_IRQHandler+0xc8>
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2201      	movs	r2, #1
 80080e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ea:	f043 0201 	orr.w	r2, r3, #1
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d011      	beq.n	8008124 <HAL_UART_IRQHandler+0xf8>
 8008100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2202      	movs	r2, #2
 8008112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800811a:	f043 0204 	orr.w	r2, r3, #4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d011      	beq.n	8008154 <HAL_UART_IRQHandler+0x128>
 8008130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2204      	movs	r2, #4
 8008142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800814a:	f043 0202 	orr.w	r2, r3, #2
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d017      	beq.n	8008190 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	d105      	bne.n	8008178 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800816c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008170:	4b5a      	ldr	r3, [pc, #360]	; (80082dc <HAL_UART_IRQHandler+0x2b0>)
 8008172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2208      	movs	r2, #8
 800817e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008186:	f043 0208 	orr.w	r2, r3, #8
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008198:	2b00      	cmp	r3, #0
 800819a:	d012      	beq.n	80081c2 <HAL_UART_IRQHandler+0x196>
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00c      	beq.n	80081c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b8:	f043 0220 	orr.w	r2, r3, #32
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 82c0 	beq.w	800874e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d013      	beq.n	8008202 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008216:	2b40      	cmp	r3, #64	; 0x40
 8008218:	d005      	beq.n	8008226 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800821a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800821e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008222:	2b00      	cmp	r3, #0
 8008224:	d04f      	beq.n	80082c6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 f9dc 	bl	80095e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b40      	cmp	r3, #64	; 0x40
 8008238:	d141      	bne.n	80082be <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3308      	adds	r3, #8
 8008262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800826a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800827e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1d9      	bne.n	800823a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d013      	beq.n	80082b6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008292:	4a14      	ldr	r2, [pc, #80]	; (80082e4 <HAL_UART_IRQHandler+0x2b8>)
 8008294:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800829a:	4618      	mov	r0, r3
 800829c:	f7fb fcc6 	bl	8003c2c <HAL_DMA_Abort_IT>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d017      	beq.n	80082d6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b4:	e00f      	b.n	80082d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa60 	bl	800877c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082bc:	e00b      	b.n	80082d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa5c 	bl	800877c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c4:	e007      	b.n	80082d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa58 	bl	800877c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80082d4:	e23b      	b.n	800874e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d6:	bf00      	nop
    return;
 80082d8:	e239      	b.n	800874e <HAL_UART_IRQHandler+0x722>
 80082da:	bf00      	nop
 80082dc:	10000001 	.word	0x10000001
 80082e0:	04000120 	.word	0x04000120
 80082e4:	080096b1 	.word	0x080096b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	f040 81ce 	bne.w	800868e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f6:	f003 0310 	and.w	r3, r3, #16
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 81c7 	beq.w	800868e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008304:	f003 0310 	and.w	r3, r3, #16
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 81c0 	beq.w	800868e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2210      	movs	r2, #16
 8008314:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008320:	2b40      	cmp	r3, #64	; 0x40
 8008322:	f040 813b 	bne.w	800859c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a8b      	ldr	r2, [pc, #556]	; (800855c <HAL_UART_IRQHandler+0x530>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d059      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a89      	ldr	r2, [pc, #548]	; (8008560 <HAL_UART_IRQHandler+0x534>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d053      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a87      	ldr	r2, [pc, #540]	; (8008564 <HAL_UART_IRQHandler+0x538>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d04d      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a85      	ldr	r2, [pc, #532]	; (8008568 <HAL_UART_IRQHandler+0x53c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d047      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a83      	ldr	r2, [pc, #524]	; (800856c <HAL_UART_IRQHandler+0x540>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d041      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a81      	ldr	r2, [pc, #516]	; (8008570 <HAL_UART_IRQHandler+0x544>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d03b      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a7f      	ldr	r2, [pc, #508]	; (8008574 <HAL_UART_IRQHandler+0x548>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d035      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a7d      	ldr	r2, [pc, #500]	; (8008578 <HAL_UART_IRQHandler+0x54c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d02f      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a7b      	ldr	r2, [pc, #492]	; (800857c <HAL_UART_IRQHandler+0x550>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d029      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a79      	ldr	r2, [pc, #484]	; (8008580 <HAL_UART_IRQHandler+0x554>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d023      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a77      	ldr	r2, [pc, #476]	; (8008584 <HAL_UART_IRQHandler+0x558>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d01d      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a75      	ldr	r2, [pc, #468]	; (8008588 <HAL_UART_IRQHandler+0x55c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d017      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a73      	ldr	r2, [pc, #460]	; (800858c <HAL_UART_IRQHandler+0x560>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d011      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a71      	ldr	r2, [pc, #452]	; (8008590 <HAL_UART_IRQHandler+0x564>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00b      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a6f      	ldr	r2, [pc, #444]	; (8008594 <HAL_UART_IRQHandler+0x568>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d005      	beq.n	80083e6 <HAL_UART_IRQHandler+0x3ba>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a6d      	ldr	r2, [pc, #436]	; (8008598 <HAL_UART_IRQHandler+0x56c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d105      	bne.n	80083f2 <HAL_UART_IRQHandler+0x3c6>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	e004      	b.n	80083fc <HAL_UART_IRQHandler+0x3d0>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 81a4 	beq.w	8008752 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008414:	429a      	cmp	r2, r3
 8008416:	f080 819c 	bcs.w	8008752 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008420:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842e:	f000 8086 	beq.w	800853e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008446:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800844a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800844e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800845c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008460:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008468:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1da      	bne.n	8008432 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800848c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800848e:	f023 0301 	bic.w	r3, r3, #1
 8008492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084ac:	e841 2300 	strex	r3, r2, [r1]
 80084b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e1      	bne.n	800847c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3308      	adds	r3, #8
 80084d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e3      	bne.n	80084b8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2220      	movs	r2, #32
 80084f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800850c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850e:	f023 0310 	bic.w	r3, r3, #16
 8008512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008520:	65bb      	str	r3, [r7, #88]	; 0x58
 8008522:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800852e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e4      	bne.n	80084fe <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008538:	4618      	mov	r0, r3
 800853a:	f7fb f859 	bl	80035f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800854a:	b29b      	uxth	r3, r3
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	b29b      	uxth	r3, r3
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f91c 	bl	8008790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008558:	e0fb      	b.n	8008752 <HAL_UART_IRQHandler+0x726>
 800855a:	bf00      	nop
 800855c:	40020010 	.word	0x40020010
 8008560:	40020028 	.word	0x40020028
 8008564:	40020040 	.word	0x40020040
 8008568:	40020058 	.word	0x40020058
 800856c:	40020070 	.word	0x40020070
 8008570:	40020088 	.word	0x40020088
 8008574:	400200a0 	.word	0x400200a0
 8008578:	400200b8 	.word	0x400200b8
 800857c:	40020410 	.word	0x40020410
 8008580:	40020428 	.word	0x40020428
 8008584:	40020440 	.word	0x40020440
 8008588:	40020458 	.word	0x40020458
 800858c:	40020470 	.word	0x40020470
 8008590:	40020488 	.word	0x40020488
 8008594:	400204a0 	.word	0x400204a0
 8008598:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 80cc 	beq.w	8008756 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80085be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80c7 	beq.w	8008756 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ea:	647b      	str	r3, [r7, #68]	; 0x44
 80085ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e4      	bne.n	80085c8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	623b      	str	r3, [r7, #32]
   return(result);
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	4b54      	ldr	r3, [pc, #336]	; (8008764 <HAL_UART_IRQHandler+0x738>)
 8008612:	4013      	ands	r3, r2
 8008614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008622:	633a      	str	r2, [r7, #48]	; 0x30
 8008624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e3      	bne.n	80085fe <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	60fb      	str	r3, [r7, #12]
   return(result);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0310 	bic.w	r3, r3, #16
 800865e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800866c:	61fb      	str	r3, [r7, #28]
 800866e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	69b9      	ldr	r1, [r7, #24]
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	617b      	str	r3, [r7, #20]
   return(result);
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e4      	bne.n	800864a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f882 	bl	8008790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800868c:	e063      	b.n	8008756 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00e      	beq.n	80086b8 <HAL_UART_IRQHandler+0x68c>
 800869a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800869e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 f83e 	bl	8009732 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086b6:	e051      	b.n	800875c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d014      	beq.n	80086ee <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d105      	bne.n	80086dc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d008      	beq.n	80086ee <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d03a      	beq.n	800875a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	4798      	blx	r3
    }
    return;
 80086ec:	e035      	b.n	800875a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <HAL_UART_IRQHandler+0x6e2>
 80086fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 ffe8 	bl	80096dc <UART_EndTransmit_IT>
    return;
 800870c:	e026      	b.n	800875c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <HAL_UART_IRQHandler+0x702>
 800871a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800871e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f001 f817 	bl	800975a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800872c:	e016      	b.n	800875c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800872e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d010      	beq.n	800875c <HAL_UART_IRQHandler+0x730>
 800873a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873e:	2b00      	cmp	r3, #0
 8008740:	da0c      	bge.n	800875c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 ffff 	bl	8009746 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008748:	e008      	b.n	800875c <HAL_UART_IRQHandler+0x730>
      return;
 800874a:	bf00      	nop
 800874c:	e006      	b.n	800875c <HAL_UART_IRQHandler+0x730>
    return;
 800874e:	bf00      	nop
 8008750:	e004      	b.n	800875c <HAL_UART_IRQHandler+0x730>
      return;
 8008752:	bf00      	nop
 8008754:	e002      	b.n	800875c <HAL_UART_IRQHandler+0x730>
      return;
 8008756:	bf00      	nop
 8008758:	e000      	b.n	800875c <HAL_UART_IRQHandler+0x730>
    return;
 800875a:	bf00      	nop
  }
}
 800875c:	37e8      	adds	r7, #232	; 0xe8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	effffffe 	.word	0xeffffffe

08008768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087ac:	b092      	sub	sp, #72	; 0x48
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4bbe      	ldr	r3, [pc, #760]	; (8008ad0 <UART_SetConfig+0x328>)
 80087d8:	4013      	ands	r3, r2
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087e0:	430b      	orrs	r3, r1
 80087e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4ab3      	ldr	r2, [pc, #716]	; (8008ad4 <UART_SetConfig+0x32c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008810:	4313      	orrs	r3, r2
 8008812:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689a      	ldr	r2, [r3, #8]
 800881a:	4baf      	ldr	r3, [pc, #700]	; (8008ad8 <UART_SetConfig+0x330>)
 800881c:	4013      	ands	r3, r2
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008824:	430b      	orrs	r3, r1
 8008826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	f023 010f 	bic.w	r1, r3, #15
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4aa6      	ldr	r2, [pc, #664]	; (8008adc <UART_SetConfig+0x334>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d177      	bne.n	8008938 <UART_SetConfig+0x190>
 8008848:	4ba5      	ldr	r3, [pc, #660]	; (8008ae0 <UART_SetConfig+0x338>)
 800884a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008850:	2b28      	cmp	r3, #40	; 0x28
 8008852:	d86d      	bhi.n	8008930 <UART_SetConfig+0x188>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <UART_SetConfig+0xb4>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008901 	.word	0x08008901
 8008860:	08008931 	.word	0x08008931
 8008864:	08008931 	.word	0x08008931
 8008868:	08008931 	.word	0x08008931
 800886c:	08008931 	.word	0x08008931
 8008870:	08008931 	.word	0x08008931
 8008874:	08008931 	.word	0x08008931
 8008878:	08008931 	.word	0x08008931
 800887c:	08008909 	.word	0x08008909
 8008880:	08008931 	.word	0x08008931
 8008884:	08008931 	.word	0x08008931
 8008888:	08008931 	.word	0x08008931
 800888c:	08008931 	.word	0x08008931
 8008890:	08008931 	.word	0x08008931
 8008894:	08008931 	.word	0x08008931
 8008898:	08008931 	.word	0x08008931
 800889c:	08008911 	.word	0x08008911
 80088a0:	08008931 	.word	0x08008931
 80088a4:	08008931 	.word	0x08008931
 80088a8:	08008931 	.word	0x08008931
 80088ac:	08008931 	.word	0x08008931
 80088b0:	08008931 	.word	0x08008931
 80088b4:	08008931 	.word	0x08008931
 80088b8:	08008931 	.word	0x08008931
 80088bc:	08008919 	.word	0x08008919
 80088c0:	08008931 	.word	0x08008931
 80088c4:	08008931 	.word	0x08008931
 80088c8:	08008931 	.word	0x08008931
 80088cc:	08008931 	.word	0x08008931
 80088d0:	08008931 	.word	0x08008931
 80088d4:	08008931 	.word	0x08008931
 80088d8:	08008931 	.word	0x08008931
 80088dc:	08008921 	.word	0x08008921
 80088e0:	08008931 	.word	0x08008931
 80088e4:	08008931 	.word	0x08008931
 80088e8:	08008931 	.word	0x08008931
 80088ec:	08008931 	.word	0x08008931
 80088f0:	08008931 	.word	0x08008931
 80088f4:	08008931 	.word	0x08008931
 80088f8:	08008931 	.word	0x08008931
 80088fc:	08008929 	.word	0x08008929
 8008900:	2301      	movs	r3, #1
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e222      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008908:	2304      	movs	r3, #4
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e21e      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008910:	2308      	movs	r3, #8
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e21a      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008918:	2310      	movs	r3, #16
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e216      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008920:	2320      	movs	r3, #32
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e212      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008928:	2340      	movs	r3, #64	; 0x40
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892e:	e20e      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008930:	2380      	movs	r3, #128	; 0x80
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008936:	e20a      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a69      	ldr	r2, [pc, #420]	; (8008ae4 <UART_SetConfig+0x33c>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d130      	bne.n	80089a4 <UART_SetConfig+0x1fc>
 8008942:	4b67      	ldr	r3, [pc, #412]	; (8008ae0 <UART_SetConfig+0x338>)
 8008944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b05      	cmp	r3, #5
 800894c:	d826      	bhi.n	800899c <UART_SetConfig+0x1f4>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x1ac>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	0800896d 	.word	0x0800896d
 8008958:	08008975 	.word	0x08008975
 800895c:	0800897d 	.word	0x0800897d
 8008960:	08008985 	.word	0x08008985
 8008964:	0800898d 	.word	0x0800898d
 8008968:	08008995 	.word	0x08008995
 800896c:	2300      	movs	r3, #0
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e1ec      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e1e8      	b.n	8008d4e <UART_SetConfig+0x5a6>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e1e4      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898a:	e1e0      	b.n	8008d4e <UART_SetConfig+0x5a6>
 800898c:	2320      	movs	r3, #32
 800898e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008992:	e1dc      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899a:	e1d8      	b.n	8008d4e <UART_SetConfig+0x5a6>
 800899c:	2380      	movs	r3, #128	; 0x80
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a2:	e1d4      	b.n	8008d4e <UART_SetConfig+0x5a6>
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a4f      	ldr	r2, [pc, #316]	; (8008ae8 <UART_SetConfig+0x340>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d130      	bne.n	8008a10 <UART_SetConfig+0x268>
 80089ae:	4b4c      	ldr	r3, [pc, #304]	; (8008ae0 <UART_SetConfig+0x338>)
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	d826      	bhi.n	8008a08 <UART_SetConfig+0x260>
 80089ba:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <UART_SetConfig+0x218>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089d9 	.word	0x080089d9
 80089c4:	080089e1 	.word	0x080089e1
 80089c8:	080089e9 	.word	0x080089e9
 80089cc:	080089f1 	.word	0x080089f1
 80089d0:	080089f9 	.word	0x080089f9
 80089d4:	08008a01 	.word	0x08008a01
 80089d8:	2300      	movs	r3, #0
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e1b6      	b.n	8008d4e <UART_SetConfig+0x5a6>
 80089e0:	2304      	movs	r3, #4
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e6:	e1b2      	b.n	8008d4e <UART_SetConfig+0x5a6>
 80089e8:	2308      	movs	r3, #8
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ee:	e1ae      	b.n	8008d4e <UART_SetConfig+0x5a6>
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f6:	e1aa      	b.n	8008d4e <UART_SetConfig+0x5a6>
 80089f8:	2320      	movs	r3, #32
 80089fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fe:	e1a6      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a00:	2340      	movs	r3, #64	; 0x40
 8008a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a06:	e1a2      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a08:	2380      	movs	r3, #128	; 0x80
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0e:	e19e      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a35      	ldr	r2, [pc, #212]	; (8008aec <UART_SetConfig+0x344>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d130      	bne.n	8008a7c <UART_SetConfig+0x2d4>
 8008a1a:	4b31      	ldr	r3, [pc, #196]	; (8008ae0 <UART_SetConfig+0x338>)
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	d826      	bhi.n	8008a74 <UART_SetConfig+0x2cc>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0x284>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a45 	.word	0x08008a45
 8008a30:	08008a4d 	.word	0x08008a4d
 8008a34:	08008a55 	.word	0x08008a55
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a65 	.word	0x08008a65
 8008a40:	08008a6d 	.word	0x08008a6d
 8008a44:	2300      	movs	r3, #0
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e180      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a52:	e17c      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a54:	2308      	movs	r3, #8
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e178      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e174      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a64:	2320      	movs	r3, #32
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6a:	e170      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a6c:	2340      	movs	r3, #64	; 0x40
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a72:	e16c      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7a:	e168      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1b      	ldr	r2, [pc, #108]	; (8008af0 <UART_SetConfig+0x348>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d142      	bne.n	8008b0c <UART_SetConfig+0x364>
 8008a86:	4b16      	ldr	r3, [pc, #88]	; (8008ae0 <UART_SetConfig+0x338>)
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d838      	bhi.n	8008b04 <UART_SetConfig+0x35c>
 8008a92:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <UART_SetConfig+0x2f0>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008ac1 	.word	0x08008ac1
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008af5 	.word	0x08008af5
 8008aac:	08008afd 	.word	0x08008afd
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e14a      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e146      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e142      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e13e      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008ad0:	cfff69f3 	.word	0xcfff69f3
 8008ad4:	58000c00 	.word	0x58000c00
 8008ad8:	11fff4ff 	.word	0x11fff4ff
 8008adc:	40011000 	.word	0x40011000
 8008ae0:	58024400 	.word	0x58024400
 8008ae4:	40004400 	.word	0x40004400
 8008ae8:	40004800 	.word	0x40004800
 8008aec:	40004c00 	.word	0x40004c00
 8008af0:	40005000 	.word	0x40005000
 8008af4:	2320      	movs	r3, #32
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e128      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008afc:	2340      	movs	r3, #64	; 0x40
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e124      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008b04:	2380      	movs	r3, #128	; 0x80
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e120      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4acb      	ldr	r2, [pc, #812]	; (8008e40 <UART_SetConfig+0x698>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d176      	bne.n	8008c04 <UART_SetConfig+0x45c>
 8008b16:	4bcb      	ldr	r3, [pc, #812]	; (8008e44 <UART_SetConfig+0x69c>)
 8008b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b1e:	2b28      	cmp	r3, #40	; 0x28
 8008b20:	d86c      	bhi.n	8008bfc <UART_SetConfig+0x454>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <UART_SetConfig+0x380>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008bcd 	.word	0x08008bcd
 8008b2c:	08008bfd 	.word	0x08008bfd
 8008b30:	08008bfd 	.word	0x08008bfd
 8008b34:	08008bfd 	.word	0x08008bfd
 8008b38:	08008bfd 	.word	0x08008bfd
 8008b3c:	08008bfd 	.word	0x08008bfd
 8008b40:	08008bfd 	.word	0x08008bfd
 8008b44:	08008bfd 	.word	0x08008bfd
 8008b48:	08008bd5 	.word	0x08008bd5
 8008b4c:	08008bfd 	.word	0x08008bfd
 8008b50:	08008bfd 	.word	0x08008bfd
 8008b54:	08008bfd 	.word	0x08008bfd
 8008b58:	08008bfd 	.word	0x08008bfd
 8008b5c:	08008bfd 	.word	0x08008bfd
 8008b60:	08008bfd 	.word	0x08008bfd
 8008b64:	08008bfd 	.word	0x08008bfd
 8008b68:	08008bdd 	.word	0x08008bdd
 8008b6c:	08008bfd 	.word	0x08008bfd
 8008b70:	08008bfd 	.word	0x08008bfd
 8008b74:	08008bfd 	.word	0x08008bfd
 8008b78:	08008bfd 	.word	0x08008bfd
 8008b7c:	08008bfd 	.word	0x08008bfd
 8008b80:	08008bfd 	.word	0x08008bfd
 8008b84:	08008bfd 	.word	0x08008bfd
 8008b88:	08008be5 	.word	0x08008be5
 8008b8c:	08008bfd 	.word	0x08008bfd
 8008b90:	08008bfd 	.word	0x08008bfd
 8008b94:	08008bfd 	.word	0x08008bfd
 8008b98:	08008bfd 	.word	0x08008bfd
 8008b9c:	08008bfd 	.word	0x08008bfd
 8008ba0:	08008bfd 	.word	0x08008bfd
 8008ba4:	08008bfd 	.word	0x08008bfd
 8008ba8:	08008bed 	.word	0x08008bed
 8008bac:	08008bfd 	.word	0x08008bfd
 8008bb0:	08008bfd 	.word	0x08008bfd
 8008bb4:	08008bfd 	.word	0x08008bfd
 8008bb8:	08008bfd 	.word	0x08008bfd
 8008bbc:	08008bfd 	.word	0x08008bfd
 8008bc0:	08008bfd 	.word	0x08008bfd
 8008bc4:	08008bfd 	.word	0x08008bfd
 8008bc8:	08008bf5 	.word	0x08008bf5
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e0bc      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e0b8      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008bdc:	2308      	movs	r3, #8
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e0b4      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008be4:	2310      	movs	r3, #16
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e0b0      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008bec:	2320      	movs	r3, #32
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e0ac      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008bf4:	2340      	movs	r3, #64	; 0x40
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e0a8      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e0a4      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a8f      	ldr	r2, [pc, #572]	; (8008e48 <UART_SetConfig+0x6a0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d130      	bne.n	8008c70 <UART_SetConfig+0x4c8>
 8008c0e:	4b8d      	ldr	r3, [pc, #564]	; (8008e44 <UART_SetConfig+0x69c>)
 8008c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d826      	bhi.n	8008c68 <UART_SetConfig+0x4c0>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x478>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c39 	.word	0x08008c39
 8008c24:	08008c41 	.word	0x08008c41
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c61 	.word	0x08008c61
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e086      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008c40:	2304      	movs	r3, #4
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e082      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e07e      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c56:	e07a      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5e:	e076      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c66:	e072      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008c68:	2380      	movs	r3, #128	; 0x80
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6e:	e06e      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a75      	ldr	r2, [pc, #468]	; (8008e4c <UART_SetConfig+0x6a4>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d130      	bne.n	8008cdc <UART_SetConfig+0x534>
 8008c7a:	4b72      	ldr	r3, [pc, #456]	; (8008e44 <UART_SetConfig+0x69c>)
 8008c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	d826      	bhi.n	8008cd4 <UART_SetConfig+0x52c>
 8008c86:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <UART_SetConfig+0x4e4>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008ca5 	.word	0x08008ca5
 8008c90:	08008cad 	.word	0x08008cad
 8008c94:	08008cb5 	.word	0x08008cb5
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e050      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e04c      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cba:	e048      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc2:	e044      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cca:	e040      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e03c      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e038      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a5b      	ldr	r2, [pc, #364]	; (8008e50 <UART_SetConfig+0x6a8>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d130      	bne.n	8008d48 <UART_SetConfig+0x5a0>
 8008ce6:	4b57      	ldr	r3, [pc, #348]	; (8008e44 <UART_SetConfig+0x69c>)
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d826      	bhi.n	8008d40 <UART_SetConfig+0x598>
 8008cf2:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <UART_SetConfig+0x550>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d11 	.word	0x08008d11
 8008cfc:	08008d19 	.word	0x08008d19
 8008d00:	08008d21 	.word	0x08008d21
 8008d04:	08008d29 	.word	0x08008d29
 8008d08:	08008d31 	.word	0x08008d31
 8008d0c:	08008d39 	.word	0x08008d39
 8008d10:	2302      	movs	r3, #2
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d16:	e01a      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008d18:	2304      	movs	r3, #4
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d1e:	e016      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008d20:	2308      	movs	r3, #8
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d26:	e012      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008d28:	2310      	movs	r3, #16
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d2e:	e00e      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008d30:	2320      	movs	r3, #32
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d36:	e00a      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008d38:	2340      	movs	r3, #64	; 0x40
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3e:	e006      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008d40:	2380      	movs	r3, #128	; 0x80
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d46:	e002      	b.n	8008d4e <UART_SetConfig+0x5a6>
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a3f      	ldr	r2, [pc, #252]	; (8008e50 <UART_SetConfig+0x6a8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	f040 80f8 	bne.w	8008f4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	dc46      	bgt.n	8008df0 <UART_SetConfig+0x648>
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	f2c0 8082 	blt.w	8008e6c <UART_SetConfig+0x6c4>
 8008d68:	3b02      	subs	r3, #2
 8008d6a:	2b1e      	cmp	r3, #30
 8008d6c:	d87e      	bhi.n	8008e6c <UART_SetConfig+0x6c4>
 8008d6e:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <UART_SetConfig+0x5cc>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008df7 	.word	0x08008df7
 8008d78:	08008e6d 	.word	0x08008e6d
 8008d7c:	08008dff 	.word	0x08008dff
 8008d80:	08008e6d 	.word	0x08008e6d
 8008d84:	08008e6d 	.word	0x08008e6d
 8008d88:	08008e6d 	.word	0x08008e6d
 8008d8c:	08008e0f 	.word	0x08008e0f
 8008d90:	08008e6d 	.word	0x08008e6d
 8008d94:	08008e6d 	.word	0x08008e6d
 8008d98:	08008e6d 	.word	0x08008e6d
 8008d9c:	08008e6d 	.word	0x08008e6d
 8008da0:	08008e6d 	.word	0x08008e6d
 8008da4:	08008e6d 	.word	0x08008e6d
 8008da8:	08008e6d 	.word	0x08008e6d
 8008dac:	08008e1f 	.word	0x08008e1f
 8008db0:	08008e6d 	.word	0x08008e6d
 8008db4:	08008e6d 	.word	0x08008e6d
 8008db8:	08008e6d 	.word	0x08008e6d
 8008dbc:	08008e6d 	.word	0x08008e6d
 8008dc0:	08008e6d 	.word	0x08008e6d
 8008dc4:	08008e6d 	.word	0x08008e6d
 8008dc8:	08008e6d 	.word	0x08008e6d
 8008dcc:	08008e6d 	.word	0x08008e6d
 8008dd0:	08008e6d 	.word	0x08008e6d
 8008dd4:	08008e6d 	.word	0x08008e6d
 8008dd8:	08008e6d 	.word	0x08008e6d
 8008ddc:	08008e6d 	.word	0x08008e6d
 8008de0:	08008e6d 	.word	0x08008e6d
 8008de4:	08008e6d 	.word	0x08008e6d
 8008de8:	08008e6d 	.word	0x08008e6d
 8008dec:	08008e5f 	.word	0x08008e5f
 8008df0:	2b40      	cmp	r3, #64	; 0x40
 8008df2:	d037      	beq.n	8008e64 <UART_SetConfig+0x6bc>
 8008df4:	e03a      	b.n	8008e6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008df6:	f7fe f9cd 	bl	8007194 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dfc:	e03c      	b.n	8008e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe f9dc 	bl	80071c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e0c:	e034      	b.n	8008e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0e:	f107 0318 	add.w	r3, r7, #24
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fb28 	bl	8007468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e1c:	e02c      	b.n	8008e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e1e:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <UART_SetConfig+0x69c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d016      	beq.n	8008e58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e2a:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <UART_SetConfig+0x69c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	08db      	lsrs	r3, r3, #3
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	4a07      	ldr	r2, [pc, #28]	; (8008e54 <UART_SetConfig+0x6ac>)
 8008e36:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e3c:	e01c      	b.n	8008e78 <UART_SetConfig+0x6d0>
 8008e3e:	bf00      	nop
 8008e40:	40011400 	.word	0x40011400
 8008e44:	58024400 	.word	0x58024400
 8008e48:	40007800 	.word	0x40007800
 8008e4c:	40007c00 	.word	0x40007c00
 8008e50:	58000c00 	.word	0x58000c00
 8008e54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e58:	4b9d      	ldr	r3, [pc, #628]	; (80090d0 <UART_SetConfig+0x928>)
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e5c:	e00c      	b.n	8008e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e5e:	4b9d      	ldr	r3, [pc, #628]	; (80090d4 <UART_SetConfig+0x92c>)
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e62:	e009      	b.n	8008e78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e6a:	e005      	b.n	8008e78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 81de 	beq.w	800923c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	4a94      	ldr	r2, [pc, #592]	; (80090d8 <UART_SetConfig+0x930>)
 8008e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e92:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	4413      	add	r3, r2
 8008e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d305      	bcc.n	8008eb0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d903      	bls.n	8008eb8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008eb6:	e1c1      	b.n	800923c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eba:	2200      	movs	r2, #0
 8008ebc:	60bb      	str	r3, [r7, #8]
 8008ebe:	60fa      	str	r2, [r7, #12]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	4a84      	ldr	r2, [pc, #528]	; (80090d8 <UART_SetConfig+0x930>)
 8008ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2200      	movs	r2, #0
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	607a      	str	r2, [r7, #4]
 8008ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008eda:	f7f7 fa4b 	bl	8000374 <__aeabi_uldivmod>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	020b      	lsls	r3, r1, #8
 8008ef0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ef4:	0202      	lsls	r2, r0, #8
 8008ef6:	6979      	ldr	r1, [r7, #20]
 8008ef8:	6849      	ldr	r1, [r1, #4]
 8008efa:	0849      	lsrs	r1, r1, #1
 8008efc:	2000      	movs	r0, #0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4605      	mov	r5, r0
 8008f02:	eb12 0804 	adds.w	r8, r2, r4
 8008f06:	eb43 0905 	adc.w	r9, r3, r5
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	469a      	mov	sl, r3
 8008f12:	4693      	mov	fp, r2
 8008f14:	4652      	mov	r2, sl
 8008f16:	465b      	mov	r3, fp
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	f7f7 fa2a 	bl	8000374 <__aeabi_uldivmod>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4613      	mov	r3, r2
 8008f26:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f2e:	d308      	bcc.n	8008f42 <UART_SetConfig+0x79a>
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f36:	d204      	bcs.n	8008f42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f3e:	60da      	str	r2, [r3, #12]
 8008f40:	e17c      	b.n	800923c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f48:	e178      	b.n	800923c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f52:	f040 80c5 	bne.w	80090e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	dc48      	bgt.n	8008ff0 <UART_SetConfig+0x848>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	db7b      	blt.n	800905a <UART_SetConfig+0x8b2>
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	d879      	bhi.n	800905a <UART_SetConfig+0x8b2>
 8008f66:	a201      	add	r2, pc, #4	; (adr r2, 8008f6c <UART_SetConfig+0x7c4>)
 8008f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6c:	08008ff7 	.word	0x08008ff7
 8008f70:	08008fff 	.word	0x08008fff
 8008f74:	0800905b 	.word	0x0800905b
 8008f78:	0800905b 	.word	0x0800905b
 8008f7c:	08009007 	.word	0x08009007
 8008f80:	0800905b 	.word	0x0800905b
 8008f84:	0800905b 	.word	0x0800905b
 8008f88:	0800905b 	.word	0x0800905b
 8008f8c:	08009017 	.word	0x08009017
 8008f90:	0800905b 	.word	0x0800905b
 8008f94:	0800905b 	.word	0x0800905b
 8008f98:	0800905b 	.word	0x0800905b
 8008f9c:	0800905b 	.word	0x0800905b
 8008fa0:	0800905b 	.word	0x0800905b
 8008fa4:	0800905b 	.word	0x0800905b
 8008fa8:	0800905b 	.word	0x0800905b
 8008fac:	08009027 	.word	0x08009027
 8008fb0:	0800905b 	.word	0x0800905b
 8008fb4:	0800905b 	.word	0x0800905b
 8008fb8:	0800905b 	.word	0x0800905b
 8008fbc:	0800905b 	.word	0x0800905b
 8008fc0:	0800905b 	.word	0x0800905b
 8008fc4:	0800905b 	.word	0x0800905b
 8008fc8:	0800905b 	.word	0x0800905b
 8008fcc:	0800905b 	.word	0x0800905b
 8008fd0:	0800905b 	.word	0x0800905b
 8008fd4:	0800905b 	.word	0x0800905b
 8008fd8:	0800905b 	.word	0x0800905b
 8008fdc:	0800905b 	.word	0x0800905b
 8008fe0:	0800905b 	.word	0x0800905b
 8008fe4:	0800905b 	.word	0x0800905b
 8008fe8:	0800905b 	.word	0x0800905b
 8008fec:	0800904d 	.word	0x0800904d
 8008ff0:	2b40      	cmp	r3, #64	; 0x40
 8008ff2:	d02e      	beq.n	8009052 <UART_SetConfig+0x8aa>
 8008ff4:	e031      	b.n	800905a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff6:	f7fd f919 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 8008ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ffc:	e033      	b.n	8009066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ffe:	f7fd f92b 	bl	8006258 <HAL_RCC_GetPCLK2Freq>
 8009002:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009004:	e02f      	b.n	8009066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe f8d8 	bl	80071c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009014:	e027      	b.n	8009066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009016:	f107 0318 	add.w	r3, r7, #24
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fa24 	bl	8007468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009024:	e01f      	b.n	8009066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009026:	4b2d      	ldr	r3, [pc, #180]	; (80090dc <UART_SetConfig+0x934>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d009      	beq.n	8009046 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009032:	4b2a      	ldr	r3, [pc, #168]	; (80090dc <UART_SetConfig+0x934>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	08db      	lsrs	r3, r3, #3
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	4a24      	ldr	r2, [pc, #144]	; (80090d0 <UART_SetConfig+0x928>)
 800903e:	fa22 f303 	lsr.w	r3, r2, r3
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009044:	e00f      	b.n	8009066 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009046:	4b22      	ldr	r3, [pc, #136]	; (80090d0 <UART_SetConfig+0x928>)
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800904a:	e00c      	b.n	8009066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800904c:	4b21      	ldr	r3, [pc, #132]	; (80090d4 <UART_SetConfig+0x92c>)
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009050:	e009      	b.n	8009066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009058:	e005      	b.n	8009066 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 80e7 	beq.w	800923c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	4a19      	ldr	r2, [pc, #100]	; (80090d8 <UART_SetConfig+0x930>)
 8009074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009078:	461a      	mov	r2, r3
 800907a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009080:	005a      	lsls	r2, r3, #1
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	441a      	add	r2, r3
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009092:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	2b0f      	cmp	r3, #15
 8009098:	d916      	bls.n	80090c8 <UART_SetConfig+0x920>
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a0:	d212      	bcs.n	80090c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f023 030f 	bic.w	r3, r3, #15
 80090aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	085b      	lsrs	r3, r3, #1
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090ba:	4313      	orrs	r3, r2
 80090bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	e0b9      	b.n	800923c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80090ce:	e0b5      	b.n	800923c <UART_SetConfig+0xa94>
 80090d0:	03d09000 	.word	0x03d09000
 80090d4:	003d0900 	.word	0x003d0900
 80090d8:	08009f34 	.word	0x08009f34
 80090dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80090e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090e4:	2b20      	cmp	r3, #32
 80090e6:	dc49      	bgt.n	800917c <UART_SetConfig+0x9d4>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	db7c      	blt.n	80091e6 <UART_SetConfig+0xa3e>
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d87a      	bhi.n	80091e6 <UART_SetConfig+0xa3e>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <UART_SetConfig+0x950>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	08009183 	.word	0x08009183
 80090fc:	0800918b 	.word	0x0800918b
 8009100:	080091e7 	.word	0x080091e7
 8009104:	080091e7 	.word	0x080091e7
 8009108:	08009193 	.word	0x08009193
 800910c:	080091e7 	.word	0x080091e7
 8009110:	080091e7 	.word	0x080091e7
 8009114:	080091e7 	.word	0x080091e7
 8009118:	080091a3 	.word	0x080091a3
 800911c:	080091e7 	.word	0x080091e7
 8009120:	080091e7 	.word	0x080091e7
 8009124:	080091e7 	.word	0x080091e7
 8009128:	080091e7 	.word	0x080091e7
 800912c:	080091e7 	.word	0x080091e7
 8009130:	080091e7 	.word	0x080091e7
 8009134:	080091e7 	.word	0x080091e7
 8009138:	080091b3 	.word	0x080091b3
 800913c:	080091e7 	.word	0x080091e7
 8009140:	080091e7 	.word	0x080091e7
 8009144:	080091e7 	.word	0x080091e7
 8009148:	080091e7 	.word	0x080091e7
 800914c:	080091e7 	.word	0x080091e7
 8009150:	080091e7 	.word	0x080091e7
 8009154:	080091e7 	.word	0x080091e7
 8009158:	080091e7 	.word	0x080091e7
 800915c:	080091e7 	.word	0x080091e7
 8009160:	080091e7 	.word	0x080091e7
 8009164:	080091e7 	.word	0x080091e7
 8009168:	080091e7 	.word	0x080091e7
 800916c:	080091e7 	.word	0x080091e7
 8009170:	080091e7 	.word	0x080091e7
 8009174:	080091e7 	.word	0x080091e7
 8009178:	080091d9 	.word	0x080091d9
 800917c:	2b40      	cmp	r3, #64	; 0x40
 800917e:	d02e      	beq.n	80091de <UART_SetConfig+0xa36>
 8009180:	e031      	b.n	80091e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009182:	f7fd f853 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 8009186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009188:	e033      	b.n	80091f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800918a:	f7fd f865 	bl	8006258 <HAL_RCC_GetPCLK2Freq>
 800918e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009190:	e02f      	b.n	80091f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe f812 	bl	80071c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a0:	e027      	b.n	80091f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a2:	f107 0318 	add.w	r3, r7, #24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe f95e 	bl	8007468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b0:	e01f      	b.n	80091f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091b2:	4b2d      	ldr	r3, [pc, #180]	; (8009268 <UART_SetConfig+0xac0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d009      	beq.n	80091d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091be:	4b2a      	ldr	r3, [pc, #168]	; (8009268 <UART_SetConfig+0xac0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	08db      	lsrs	r3, r3, #3
 80091c4:	f003 0303 	and.w	r3, r3, #3
 80091c8:	4a28      	ldr	r2, [pc, #160]	; (800926c <UART_SetConfig+0xac4>)
 80091ca:	fa22 f303 	lsr.w	r3, r2, r3
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091d0:	e00f      	b.n	80091f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80091d2:	4b26      	ldr	r3, [pc, #152]	; (800926c <UART_SetConfig+0xac4>)
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091d6:	e00c      	b.n	80091f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091d8:	4b25      	ldr	r3, [pc, #148]	; (8009270 <UART_SetConfig+0xac8>)
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091dc:	e009      	b.n	80091f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e4:	e005      	b.n	80091f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80091f0:	bf00      	nop
    }

    if (pclk != 0U)
 80091f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d021      	beq.n	800923c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	4a1d      	ldr	r2, [pc, #116]	; (8009274 <UART_SetConfig+0xacc>)
 80091fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009202:	461a      	mov	r2, r3
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	fbb3 f2f2 	udiv	r2, r3, r2
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	085b      	lsrs	r3, r3, #1
 8009210:	441a      	add	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	fbb2 f3f3 	udiv	r3, r2, r3
 800921a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	2b0f      	cmp	r3, #15
 8009220:	d909      	bls.n	8009236 <UART_SetConfig+0xa8e>
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009228:	d205      	bcs.n	8009236 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	b29a      	uxth	r2, r3
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	60da      	str	r2, [r3, #12]
 8009234:	e002      	b.n	800923c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2201      	movs	r2, #1
 8009240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2201      	movs	r2, #1
 8009248:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	2200      	movs	r2, #0
 8009250:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2200      	movs	r2, #0
 8009256:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009258:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800925c:	4618      	mov	r0, r3
 800925e:	3748      	adds	r7, #72	; 0x48
 8009260:	46bd      	mov	sp, r7
 8009262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009266:	bf00      	nop
 8009268:	58024400 	.word	0x58024400
 800926c:	03d09000 	.word	0x03d09000
 8009270:	003d0900 	.word	0x003d0900
 8009274:	08009f34 	.word	0x08009f34

08009278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00a      	beq.n	80092a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00a      	beq.n	80092e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ea:	f003 0308 	and.w	r3, r3, #8
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930c:	f003 0310 	and.w	r3, r3, #16
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932e:	f003 0320 	and.w	r3, r3, #32
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009354:	2b00      	cmp	r3, #0
 8009356:	d01a      	beq.n	800938e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009376:	d10a      	bne.n	800938e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	605a      	str	r2, [r3, #4]
  }
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093cc:	f7f9 fff4 	bl	80033b8 <HAL_GetTick>
 80093d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d10e      	bne.n	80093fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f82f 	bl	8009452 <UART_WaitOnFlagUntilTimeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e025      	b.n	800944a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b04      	cmp	r3, #4
 800940a:	d10e      	bne.n	800942a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800940c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f819 	bl	8009452 <UART_WaitOnFlagUntilTimeout>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e00f      	b.n	800944a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b09c      	sub	sp, #112	; 0x70
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	603b      	str	r3, [r7, #0]
 800945e:	4613      	mov	r3, r2
 8009460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009462:	e0a9      	b.n	80095b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	f000 80a5 	beq.w	80095b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946e:	f7f9 ffa3 	bl	80033b8 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800947a:	429a      	cmp	r2, r3
 800947c:	d302      	bcc.n	8009484 <UART_WaitOnFlagUntilTimeout+0x32>
 800947e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009480:	2b00      	cmp	r3, #0
 8009482:	d140      	bne.n	8009506 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009498:	667b      	str	r3, [r7, #100]	; 0x64
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e6      	bne.n	8009484 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	f023 0301 	bic.w	r3, r3, #1
 80094cc:	663b      	str	r3, [r7, #96]	; 0x60
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80094d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e5      	bne.n	80094b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e069      	b.n	80095da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d051      	beq.n	80095b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800951e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009522:	d149      	bne.n	80095b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800952c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009542:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800954c:	637b      	str	r3, [r7, #52]	; 0x34
 800954e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3308      	adds	r3, #8
 8009566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	613b      	str	r3, [r7, #16]
   return(result);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f023 0301 	bic.w	r3, r3, #1
 8009576:	66bb      	str	r3, [r7, #104]	; 0x68
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3308      	adds	r3, #8
 800957e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009580:	623a      	str	r2, [r7, #32]
 8009582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	69f9      	ldr	r1, [r7, #28]
 8009586:	6a3a      	ldr	r2, [r7, #32]
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	61bb      	str	r3, [r7, #24]
   return(result);
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e5      	bne.n	8009560 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2220      	movs	r2, #32
 8009598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e010      	b.n	80095da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69da      	ldr	r2, [r3, #28]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4013      	ands	r3, r2
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	bf0c      	ite	eq
 80095c8:	2301      	moveq	r3, #1
 80095ca:	2300      	movne	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	461a      	mov	r2, r3
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	f43f af46 	beq.w	8009464 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3770      	adds	r7, #112	; 0x70
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b095      	sub	sp, #84	; 0x54
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009600:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800960a:	643b      	str	r3, [r7, #64]	; 0x40
 800960c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e6      	bne.n	80095ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	61fb      	str	r3, [r7, #28]
   return(result);
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	4b1e      	ldr	r3, [pc, #120]	; (80096ac <UART_EndRxTransfer+0xc8>)
 8009632:	4013      	ands	r3, r2
 8009634:	64bb      	str	r3, [r7, #72]	; 0x48
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800963e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e5      	bne.n	800961e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009656:	2b01      	cmp	r3, #1
 8009658:	d118      	bne.n	800968c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	e853 3f00 	ldrex	r3, [r3]
 8009666:	60bb      	str	r3, [r7, #8]
   return(result);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f023 0310 	bic.w	r3, r3, #16
 800966e:	647b      	str	r3, [r7, #68]	; 0x44
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009678:	61bb      	str	r3, [r7, #24]
 800967a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6979      	ldr	r1, [r7, #20]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	613b      	str	r3, [r7, #16]
   return(result);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e6      	bne.n	800965a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	671a      	str	r2, [r3, #112]	; 0x70
}
 80096a0:	bf00      	nop
 80096a2:	3754      	adds	r7, #84	; 0x54
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	effffffe 	.word	0xeffffffe

080096b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff f854 	bl	800877c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096d4:	bf00      	nop
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f8:	61fb      	str	r3, [r7, #28]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	61bb      	str	r3, [r7, #24]
 8009704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6979      	ldr	r1, [r7, #20]
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	613b      	str	r3, [r7, #16]
   return(result);
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e6      	bne.n	80096e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2220      	movs	r2, #32
 800971a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff f81f 	bl	8008768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800972a:	bf00      	nop
 800972c:	3720      	adds	r7, #32
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800976e:	b480      	push	{r7}
 8009770:	b085      	sub	sp, #20
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_UARTEx_DisableFifoMode+0x16>
 8009780:	2302      	movs	r3, #2
 8009782:	e027      	b.n	80097d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2224      	movs	r2, #36	; 0x24
 8009790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 0201 	bic.w	r2, r2, #1
 80097aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2220      	movs	r2, #32
 80097c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d101      	bne.n	80097f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097f4:	2302      	movs	r3, #2
 80097f6:	e02d      	b.n	8009854 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2224      	movs	r2, #36	; 0x24
 8009804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f022 0201 	bic.w	r2, r2, #1
 800981e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f84f 	bl	80098d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2220      	movs	r2, #32
 8009846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800986c:	2b01      	cmp	r3, #1
 800986e:	d101      	bne.n	8009874 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009870:	2302      	movs	r3, #2
 8009872:	e02d      	b.n	80098d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2224      	movs	r2, #36	; 0x24
 8009880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 0201 	bic.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f811 	bl	80098d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d108      	bne.n	80098fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098f8:	e031      	b.n	800995e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098fa:	2310      	movs	r3, #16
 80098fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098fe:	2310      	movs	r3, #16
 8009900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	0e5b      	lsrs	r3, r3, #25
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	0f5b      	lsrs	r3, r3, #29
 800991a:	b2db      	uxtb	r3, r3
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	7b3a      	ldrb	r2, [r7, #12]
 8009926:	4911      	ldr	r1, [pc, #68]	; (800996c <UARTEx_SetNbDataToProcess+0x94>)
 8009928:	5c8a      	ldrb	r2, [r1, r2]
 800992a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800992e:	7b3a      	ldrb	r2, [r7, #12]
 8009930:	490f      	ldr	r1, [pc, #60]	; (8009970 <UARTEx_SetNbDataToProcess+0x98>)
 8009932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009934:	fb93 f3f2 	sdiv	r3, r3, r2
 8009938:	b29a      	uxth	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	7b7a      	ldrb	r2, [r7, #13]
 8009944:	4909      	ldr	r1, [pc, #36]	; (800996c <UARTEx_SetNbDataToProcess+0x94>)
 8009946:	5c8a      	ldrb	r2, [r1, r2]
 8009948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800994c:	7b7a      	ldrb	r2, [r7, #13]
 800994e:	4908      	ldr	r1, [pc, #32]	; (8009970 <UARTEx_SetNbDataToProcess+0x98>)
 8009950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009952:	fb93 f3f2 	sdiv	r3, r3, r2
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800995e:	bf00      	nop
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	08009f4c 	.word	0x08009f4c
 8009970:	08009f54 	.word	0x08009f54

08009974 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009974:	b084      	sub	sp, #16
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	f107 001c 	add.w	r0, r7, #28
 8009982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	2b01      	cmp	r3, #1
 800998a:	d120      	bne.n	80099ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009990:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68da      	ldr	r2, [r3, #12]
 800999c:	4b2a      	ldr	r3, [pc, #168]	; (8009a48 <USB_CoreInit+0xd4>)
 800999e:	4013      	ands	r3, r2
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80099b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d105      	bne.n	80099c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f914 	bl	8009bf0 <USB_CoreReset>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73fb      	strb	r3, [r7, #15]
 80099cc:	e01a      	b.n	8009a04 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f908 	bl	8009bf0 <USB_CoreReset>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d106      	bne.n	80099f8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
 80099f6:	e005      	b.n	8009a04 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d116      	bne.n	8009a38 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a18:	4b0c      	ldr	r3, [pc, #48]	; (8009a4c <USB_CoreInit+0xd8>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f043 0206 	orr.w	r2, r3, #6
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f043 0220 	orr.w	r2, r3, #32
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a44:	b004      	add	sp, #16
 8009a46:	4770      	bx	lr
 8009a48:	ffbdffbf 	.word	0xffbdffbf
 8009a4c:	03ee0000 	.word	0x03ee0000

08009a50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f023 0201 	bic.w	r2, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d115      	bne.n	8009ac0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	f7f9 fc95 	bl	80033d0 <HAL_Delay>
      ms++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f891 	bl	8009bd4 <USB_GetMode>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d01e      	beq.n	8009af6 <USB_SetCurrentMode+0x84>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b31      	cmp	r3, #49	; 0x31
 8009abc:	d9f0      	bls.n	8009aa0 <USB_SetCurrentMode+0x2e>
 8009abe:	e01a      	b.n	8009af6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d115      	bne.n	8009af2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	f7f9 fc7c 	bl	80033d0 <HAL_Delay>
      ms++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3301      	adds	r3, #1
 8009adc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f878 	bl	8009bd4 <USB_GetMode>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d005      	beq.n	8009af6 <USB_SetCurrentMode+0x84>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b31      	cmp	r3, #49	; 0x31
 8009aee:	d9f0      	bls.n	8009ad2 <USB_SetCurrentMode+0x60>
 8009af0:	e001      	b.n	8009af6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e005      	b.n	8009b02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b32      	cmp	r3, #50	; 0x32
 8009afa:	d101      	bne.n	8009b00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e000      	b.n	8009b02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4a13      	ldr	r2, [pc, #76]	; (8009b70 <USB_FlushTxFifo+0x64>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d901      	bls.n	8009b2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e01b      	b.n	8009b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	daf2      	bge.n	8009b1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	019b      	lsls	r3, r3, #6
 8009b3c:	f043 0220 	orr.w	r2, r3, #32
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	4a08      	ldr	r2, [pc, #32]	; (8009b70 <USB_FlushTxFifo+0x64>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d901      	bls.n	8009b56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e006      	b.n	8009b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	f003 0320 	and.w	r3, r3, #32
 8009b5e:	2b20      	cmp	r3, #32
 8009b60:	d0f0      	beq.n	8009b44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	00030d40 	.word	0x00030d40

08009b74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4a11      	ldr	r2, [pc, #68]	; (8009bd0 <USB_FlushRxFifo+0x5c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d901      	bls.n	8009b92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e018      	b.n	8009bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	daf2      	bge.n	8009b80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2210      	movs	r2, #16
 8009ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <USB_FlushRxFifo+0x5c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d901      	bls.n	8009bb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e006      	b.n	8009bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	f003 0310 	and.w	r3, r3, #16
 8009bbe:	2b10      	cmp	r3, #16
 8009bc0:	d0f0      	beq.n	8009ba4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	00030d40 	.word	0x00030d40

08009bd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	f003 0301 	and.w	r3, r3, #1
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4a13      	ldr	r2, [pc, #76]	; (8009c54 <USB_CoreReset+0x64>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d901      	bls.n	8009c0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e01b      	b.n	8009c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	daf2      	bge.n	8009bfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	f043 0201 	orr.w	r2, r3, #1
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a09      	ldr	r2, [pc, #36]	; (8009c54 <USB_CoreReset+0x64>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d901      	bls.n	8009c38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e006      	b.n	8009c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d0f0      	beq.n	8009c26 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	00030d40 	.word	0x00030d40

08009c58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c58:	b084      	sub	sp, #16
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b086      	sub	sp, #24
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c78:	461a      	mov	r2, r3
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d018      	beq.n	8009cd4 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d10a      	bne.n	8009cbe <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cb6:	f043 0304 	orr.w	r3, r3, #4
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	e014      	b.n	8009ce8 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ccc:	f023 0304 	bic.w	r3, r3, #4
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	e009      	b.n	8009ce8 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ce2:	f023 0304 	bic.w	r3, r3, #4
 8009ce6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ce8:	2110      	movs	r1, #16
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff ff0e 	bl	8009b0c <USB_FlushTxFifo>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff ff3a 	bl	8009b74 <USB_FlushRxFifo>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	613b      	str	r3, [r7, #16]
 8009d0e:	e015      	b.n	8009d3c <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d30:	461a      	mov	r2, r3
 8009d32:	2300      	movs	r3, #0
 8009d34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	613b      	str	r3, [r7, #16]
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d3e5      	bcc.n	8009d10 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d50:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00b      	beq.n	8009d76 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d64:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a13      	ldr	r2, [pc, #76]	; (8009db8 <USB_HostInit+0x160>)
 8009d6a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a13      	ldr	r2, [pc, #76]	; (8009dbc <USB_HostInit+0x164>)
 8009d70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009d74:	e009      	b.n	8009d8a <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2280      	movs	r2, #128	; 0x80
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a10      	ldr	r2, [pc, #64]	; (8009dc0 <USB_HostInit+0x168>)
 8009d80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a0f      	ldr	r2, [pc, #60]	; (8009dc4 <USB_HostInit+0x16c>)
 8009d86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d105      	bne.n	8009d9c <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	f043 0210 	orr.w	r2, r3, #16
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	699a      	ldr	r2, [r3, #24]
 8009da0:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <USB_HostInit+0x170>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009db4:	b004      	add	sp, #16
 8009db6:	4770      	bx	lr
 8009db8:	01000200 	.word	0x01000200
 8009dbc:	00e00300 	.word	0x00e00300
 8009dc0:	00600080 	.word	0x00600080
 8009dc4:	004000e0 	.word	0x004000e0
 8009dc8:	a3200008 	.word	0xa3200008

08009dcc <__libc_init_array>:
 8009dcc:	b570      	push	{r4, r5, r6, lr}
 8009dce:	4d0d      	ldr	r5, [pc, #52]	; (8009e04 <__libc_init_array+0x38>)
 8009dd0:	4c0d      	ldr	r4, [pc, #52]	; (8009e08 <__libc_init_array+0x3c>)
 8009dd2:	1b64      	subs	r4, r4, r5
 8009dd4:	10a4      	asrs	r4, r4, #2
 8009dd6:	2600      	movs	r6, #0
 8009dd8:	42a6      	cmp	r6, r4
 8009dda:	d109      	bne.n	8009df0 <__libc_init_array+0x24>
 8009ddc:	4d0b      	ldr	r5, [pc, #44]	; (8009e0c <__libc_init_array+0x40>)
 8009dde:	4c0c      	ldr	r4, [pc, #48]	; (8009e10 <__libc_init_array+0x44>)
 8009de0:	f000 f82e 	bl	8009e40 <_init>
 8009de4:	1b64      	subs	r4, r4, r5
 8009de6:	10a4      	asrs	r4, r4, #2
 8009de8:	2600      	movs	r6, #0
 8009dea:	42a6      	cmp	r6, r4
 8009dec:	d105      	bne.n	8009dfa <__libc_init_array+0x2e>
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df4:	4798      	blx	r3
 8009df6:	3601      	adds	r6, #1
 8009df8:	e7ee      	b.n	8009dd8 <__libc_init_array+0xc>
 8009dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dfe:	4798      	blx	r3
 8009e00:	3601      	adds	r6, #1
 8009e02:	e7f2      	b.n	8009dea <__libc_init_array+0x1e>
 8009e04:	08009f64 	.word	0x08009f64
 8009e08:	08009f64 	.word	0x08009f64
 8009e0c:	08009f64 	.word	0x08009f64
 8009e10:	08009f68 	.word	0x08009f68

08009e14 <memcpy>:
 8009e14:	440a      	add	r2, r1
 8009e16:	4291      	cmp	r1, r2
 8009e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e1c:	d100      	bne.n	8009e20 <memcpy+0xc>
 8009e1e:	4770      	bx	lr
 8009e20:	b510      	push	{r4, lr}
 8009e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e2a:	4291      	cmp	r1, r2
 8009e2c:	d1f9      	bne.n	8009e22 <memcpy+0xe>
 8009e2e:	bd10      	pop	{r4, pc}

08009e30 <memset>:
 8009e30:	4402      	add	r2, r0
 8009e32:	4603      	mov	r3, r0
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d100      	bne.n	8009e3a <memset+0xa>
 8009e38:	4770      	bx	lr
 8009e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e3e:	e7f9      	b.n	8009e34 <memset+0x4>

08009e40 <_init>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	bf00      	nop
 8009e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e46:	bc08      	pop	{r3}
 8009e48:	469e      	mov	lr, r3
 8009e4a:	4770      	bx	lr

08009e4c <_fini>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr
