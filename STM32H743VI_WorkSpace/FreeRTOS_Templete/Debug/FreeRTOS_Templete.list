
FreeRTOS_Templete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007828  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b84  08007b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b2c  24000010  08007ba4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b3c  08007ba4  00020b3c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022dff  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000397d  00000000  00000000  00042e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c88  00000000  00000000  000467c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b10  00000000  00000000  00048448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389f7  00000000  00000000  00049f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f84c  00000000  00000000  0008294f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179fb2  00000000  00000000  000a219b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021c14d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c2c  00000000  00000000  0021c1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000010 	.word	0x24000010
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007ab0 	.word	0x08007ab0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000014 	.word	0x24000014
 80002dc:	08007ab0 	.word	0x08007ab0

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	240000ec 	.word	0x240000ec

08000374 <strlen>:
 8000374:	4603      	mov	r3, r0
 8000376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800037a:	2a00      	cmp	r2, #0
 800037c:	d1fb      	bne.n	8000376 <strlen+0x2>
 800037e:	1a18      	subs	r0, r3, r0
 8000380:	3801      	subs	r0, #1
 8000382:	4770      	bx	lr

08000384 <__aeabi_uldivmod>:
 8000384:	b953      	cbnz	r3, 800039c <__aeabi_uldivmod+0x18>
 8000386:	b94a      	cbnz	r2, 800039c <__aeabi_uldivmod+0x18>
 8000388:	2900      	cmp	r1, #0
 800038a:	bf08      	it	eq
 800038c:	2800      	cmpeq	r0, #0
 800038e:	bf1c      	itt	ne
 8000390:	f04f 31ff 	movne.w	r1, #4294967295
 8000394:	f04f 30ff 	movne.w	r0, #4294967295
 8000398:	f000 b974 	b.w	8000684 <__aeabi_idiv0>
 800039c:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a4:	f000 f806 	bl	80003b4 <__udivmoddi4>
 80003a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr

080003b4 <__udivmoddi4>:
 80003b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b8:	9d08      	ldr	r5, [sp, #32]
 80003ba:	4604      	mov	r4, r0
 80003bc:	468e      	mov	lr, r1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d14d      	bne.n	800045e <__udivmoddi4+0xaa>
 80003c2:	428a      	cmp	r2, r1
 80003c4:	4694      	mov	ip, r2
 80003c6:	d969      	bls.n	800049c <__udivmoddi4+0xe8>
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b152      	cbz	r2, 80003e4 <__udivmoddi4+0x30>
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	f1c2 0120 	rsb	r1, r2, #32
 80003d6:	fa20 f101 	lsr.w	r1, r0, r1
 80003da:	fa0c fc02 	lsl.w	ip, ip, r2
 80003de:	ea41 0e03 	orr.w	lr, r1, r3
 80003e2:	4094      	lsls	r4, r2
 80003e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e8:	0c21      	lsrs	r1, r4, #16
 80003ea:	fbbe f6f8 	udiv	r6, lr, r8
 80003ee:	fa1f f78c 	uxth.w	r7, ip
 80003f2:	fb08 e316 	mls	r3, r8, r6, lr
 80003f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003fa:	fb06 f107 	mul.w	r1, r6, r7
 80003fe:	4299      	cmp	r1, r3
 8000400:	d90a      	bls.n	8000418 <__udivmoddi4+0x64>
 8000402:	eb1c 0303 	adds.w	r3, ip, r3
 8000406:	f106 30ff 	add.w	r0, r6, #4294967295
 800040a:	f080 811f 	bcs.w	800064c <__udivmoddi4+0x298>
 800040e:	4299      	cmp	r1, r3
 8000410:	f240 811c 	bls.w	800064c <__udivmoddi4+0x298>
 8000414:	3e02      	subs	r6, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a5b      	subs	r3, r3, r1
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000428:	fb00 f707 	mul.w	r7, r0, r7
 800042c:	42a7      	cmp	r7, r4
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x92>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	f080 810a 	bcs.w	8000650 <__udivmoddi4+0x29c>
 800043c:	42a7      	cmp	r7, r4
 800043e:	f240 8107 	bls.w	8000650 <__udivmoddi4+0x29c>
 8000442:	4464      	add	r4, ip
 8000444:	3802      	subs	r0, #2
 8000446:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044a:	1be4      	subs	r4, r4, r7
 800044c:	2600      	movs	r6, #0
 800044e:	b11d      	cbz	r5, 8000458 <__udivmoddi4+0xa4>
 8000450:	40d4      	lsrs	r4, r2
 8000452:	2300      	movs	r3, #0
 8000454:	e9c5 4300 	strd	r4, r3, [r5]
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	428b      	cmp	r3, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0xc2>
 8000462:	2d00      	cmp	r5, #0
 8000464:	f000 80ef 	beq.w	8000646 <__udivmoddi4+0x292>
 8000468:	2600      	movs	r6, #0
 800046a:	e9c5 0100 	strd	r0, r1, [r5]
 800046e:	4630      	mov	r0, r6
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	fab3 f683 	clz	r6, r3
 800047a:	2e00      	cmp	r6, #0
 800047c:	d14a      	bne.n	8000514 <__udivmoddi4+0x160>
 800047e:	428b      	cmp	r3, r1
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xd4>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 80f9 	bhi.w	800067a <__udivmoddi4+0x2c6>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb61 0303 	sbc.w	r3, r1, r3
 800048e:	2001      	movs	r0, #1
 8000490:	469e      	mov	lr, r3
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e0      	beq.n	8000458 <__udivmoddi4+0xa4>
 8000496:	e9c5 4e00 	strd	r4, lr, [r5]
 800049a:	e7dd      	b.n	8000458 <__udivmoddi4+0xa4>
 800049c:	b902      	cbnz	r2, 80004a0 <__udivmoddi4+0xec>
 800049e:	deff      	udf	#255	; 0xff
 80004a0:	fab2 f282 	clz	r2, r2
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	f040 8092 	bne.w	80005ce <__udivmoddi4+0x21a>
 80004aa:	eba1 010c 	sub.w	r1, r1, ip
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f fe8c 	uxth.w	lr, ip
 80004b6:	2601      	movs	r6, #1
 80004b8:	0c20      	lsrs	r0, r4, #16
 80004ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80004be:	fb07 1113 	mls	r1, r7, r3, r1
 80004c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c6:	fb0e f003 	mul.w	r0, lr, r3
 80004ca:	4288      	cmp	r0, r1
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x12c>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d6:	d202      	bcs.n	80004de <__udivmoddi4+0x12a>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f200 80cb 	bhi.w	8000674 <__udivmoddi4+0x2c0>
 80004de:	4643      	mov	r3, r8
 80004e0:	1a09      	subs	r1, r1, r0
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e8:	fb07 1110 	mls	r1, r7, r0, r1
 80004ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004f0:	fb0e fe00 	mul.w	lr, lr, r0
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x156>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d202      	bcs.n	8000508 <__udivmoddi4+0x154>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f200 80bb 	bhi.w	800067e <__udivmoddi4+0x2ca>
 8000508:	4608      	mov	r0, r1
 800050a:	eba4 040e 	sub.w	r4, r4, lr
 800050e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x9a>
 8000514:	f1c6 0720 	rsb	r7, r6, #32
 8000518:	40b3      	lsls	r3, r6
 800051a:	fa22 fc07 	lsr.w	ip, r2, r7
 800051e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000522:	fa20 f407 	lsr.w	r4, r0, r7
 8000526:	fa01 f306 	lsl.w	r3, r1, r6
 800052a:	431c      	orrs	r4, r3
 800052c:	40f9      	lsrs	r1, r7
 800052e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000532:	fa00 f306 	lsl.w	r3, r0, r6
 8000536:	fbb1 f8f9 	udiv	r8, r1, r9
 800053a:	0c20      	lsrs	r0, r4, #16
 800053c:	fa1f fe8c 	uxth.w	lr, ip
 8000540:	fb09 1118 	mls	r1, r9, r8, r1
 8000544:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000548:	fb08 f00e 	mul.w	r0, r8, lr
 800054c:	4288      	cmp	r0, r1
 800054e:	fa02 f206 	lsl.w	r2, r2, r6
 8000552:	d90b      	bls.n	800056c <__udivmoddi4+0x1b8>
 8000554:	eb1c 0101 	adds.w	r1, ip, r1
 8000558:	f108 3aff 	add.w	sl, r8, #4294967295
 800055c:	f080 8088 	bcs.w	8000670 <__udivmoddi4+0x2bc>
 8000560:	4288      	cmp	r0, r1
 8000562:	f240 8085 	bls.w	8000670 <__udivmoddi4+0x2bc>
 8000566:	f1a8 0802 	sub.w	r8, r8, #2
 800056a:	4461      	add	r1, ip
 800056c:	1a09      	subs	r1, r1, r0
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb1 f0f9 	udiv	r0, r1, r9
 8000574:	fb09 1110 	mls	r1, r9, r0, r1
 8000578:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800057c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000580:	458e      	cmp	lr, r1
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x1e2>
 8000584:	eb1c 0101 	adds.w	r1, ip, r1
 8000588:	f100 34ff 	add.w	r4, r0, #4294967295
 800058c:	d26c      	bcs.n	8000668 <__udivmoddi4+0x2b4>
 800058e:	458e      	cmp	lr, r1
 8000590:	d96a      	bls.n	8000668 <__udivmoddi4+0x2b4>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800059a:	fba0 9402 	umull	r9, r4, r0, r2
 800059e:	eba1 010e 	sub.w	r1, r1, lr
 80005a2:	42a1      	cmp	r1, r4
 80005a4:	46c8      	mov	r8, r9
 80005a6:	46a6      	mov	lr, r4
 80005a8:	d356      	bcc.n	8000658 <__udivmoddi4+0x2a4>
 80005aa:	d053      	beq.n	8000654 <__udivmoddi4+0x2a0>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x212>
 80005ae:	ebb3 0208 	subs.w	r2, r3, r8
 80005b2:	eb61 010e 	sbc.w	r1, r1, lr
 80005b6:	fa01 f707 	lsl.w	r7, r1, r7
 80005ba:	fa22 f306 	lsr.w	r3, r2, r6
 80005be:	40f1      	lsrs	r1, r6
 80005c0:	431f      	orrs	r7, r3
 80005c2:	e9c5 7100 	strd	r7, r1, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	40d8      	lsrs	r0, r3
 80005d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
 80005dc:	4091      	lsls	r1, r2
 80005de:	4301      	orrs	r1, r0
 80005e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e4:	fa1f fe8c 	uxth.w	lr, ip
 80005e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80005ec:	fb07 3610 	mls	r6, r7, r0, r3
 80005f0:	0c0b      	lsrs	r3, r1, #16
 80005f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f6:	fb00 f60e 	mul.w	r6, r0, lr
 80005fa:	429e      	cmp	r6, r3
 80005fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000600:	d908      	bls.n	8000614 <__udivmoddi4+0x260>
 8000602:	eb1c 0303 	adds.w	r3, ip, r3
 8000606:	f100 38ff 	add.w	r8, r0, #4294967295
 800060a:	d22f      	bcs.n	800066c <__udivmoddi4+0x2b8>
 800060c:	429e      	cmp	r6, r3
 800060e:	d92d      	bls.n	800066c <__udivmoddi4+0x2b8>
 8000610:	3802      	subs	r0, #2
 8000612:	4463      	add	r3, ip
 8000614:	1b9b      	subs	r3, r3, r6
 8000616:	b289      	uxth	r1, r1
 8000618:	fbb3 f6f7 	udiv	r6, r3, r7
 800061c:	fb07 3316 	mls	r3, r7, r6, r3
 8000620:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000624:	fb06 f30e 	mul.w	r3, r6, lr
 8000628:	428b      	cmp	r3, r1
 800062a:	d908      	bls.n	800063e <__udivmoddi4+0x28a>
 800062c:	eb1c 0101 	adds.w	r1, ip, r1
 8000630:	f106 38ff 	add.w	r8, r6, #4294967295
 8000634:	d216      	bcs.n	8000664 <__udivmoddi4+0x2b0>
 8000636:	428b      	cmp	r3, r1
 8000638:	d914      	bls.n	8000664 <__udivmoddi4+0x2b0>
 800063a:	3e02      	subs	r6, #2
 800063c:	4461      	add	r1, ip
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000644:	e738      	b.n	80004b8 <__udivmoddi4+0x104>
 8000646:	462e      	mov	r6, r5
 8000648:	4628      	mov	r0, r5
 800064a:	e705      	b.n	8000458 <__udivmoddi4+0xa4>
 800064c:	4606      	mov	r6, r0
 800064e:	e6e3      	b.n	8000418 <__udivmoddi4+0x64>
 8000650:	4618      	mov	r0, r3
 8000652:	e6f8      	b.n	8000446 <__udivmoddi4+0x92>
 8000654:	454b      	cmp	r3, r9
 8000656:	d2a9      	bcs.n	80005ac <__udivmoddi4+0x1f8>
 8000658:	ebb9 0802 	subs.w	r8, r9, r2
 800065c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000660:	3801      	subs	r0, #1
 8000662:	e7a3      	b.n	80005ac <__udivmoddi4+0x1f8>
 8000664:	4646      	mov	r6, r8
 8000666:	e7ea      	b.n	800063e <__udivmoddi4+0x28a>
 8000668:	4620      	mov	r0, r4
 800066a:	e794      	b.n	8000596 <__udivmoddi4+0x1e2>
 800066c:	4640      	mov	r0, r8
 800066e:	e7d1      	b.n	8000614 <__udivmoddi4+0x260>
 8000670:	46d0      	mov	r8, sl
 8000672:	e77b      	b.n	800056c <__udivmoddi4+0x1b8>
 8000674:	3b02      	subs	r3, #2
 8000676:	4461      	add	r1, ip
 8000678:	e732      	b.n	80004e0 <__udivmoddi4+0x12c>
 800067a:	4630      	mov	r0, r6
 800067c:	e709      	b.n	8000492 <__udivmoddi4+0xde>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	e742      	b.n	800050a <__udivmoddi4+0x156>

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	601a      	str	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	6892      	ldr	r2, [r2, #8]
 80006e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	6852      	ldr	r2, [r2, #4]
 80006f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d103      	bne.n	8000704 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1e5a      	subs	r2, r3, #1
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800072e:	4b42      	ldr	r3, [pc, #264]	; (8000838 <xTaskIncrementTick+0x114>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d175      	bne.n	8000822 <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <xTaskIncrementTick+0x118>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800073e:	4a3f      	ldr	r2, [pc, #252]	; (800083c <xTaskIncrementTick+0x118>)
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d122      	bne.n	8000790 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <xTaskIncrementTick+0x11c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00c      	beq.n	800076e <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000758:	b672      	cpsid	i
 800075a:	f383 8811 	msr	BASEPRI, r3
 800075e:	f3bf 8f6f 	isb	sy
 8000762:	f3bf 8f4f 	dsb	sy
 8000766:	b662      	cpsie	i
 8000768:	603b      	str	r3, [r7, #0]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800076a:	bf00      	nop
 800076c:	e7fe      	b.n	800076c <xTaskIncrementTick+0x48>
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <xTaskIncrementTick+0x11c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4b33      	ldr	r3, [pc, #204]	; (8000844 <xTaskIncrementTick+0x120>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a31      	ldr	r2, [pc, #196]	; (8000840 <xTaskIncrementTick+0x11c>)
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4a31      	ldr	r2, [pc, #196]	; (8000844 <xTaskIncrementTick+0x120>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	4b31      	ldr	r3, [pc, #196]	; (8000848 <xTaskIncrementTick+0x124>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <xTaskIncrementTick+0x124>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	f000 f8d2 	bl	8000934 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <xTaskIncrementTick+0x128>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	429a      	cmp	r2, r3
 8000798:	d348      	bcc.n	800082c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <xTaskIncrementTick+0x11c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d104      	bne.n	80007ae <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <xTaskIncrementTick+0x128>)
 80007a6:	f04f 32ff 	mov.w	r2, #4294967295
 80007aa:	601a      	str	r2, [r3, #0]
                    break;
 80007ac:	e03e      	b.n	800082c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <xTaskIncrementTick+0x11c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d203      	bcs.n	80007ce <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80007c6:	4a21      	ldr	r2, [pc, #132]	; (800084c <xTaskIncrementTick+0x128>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80007cc:	e02e      	b.n	800082c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	3304      	adds	r3, #4
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff7c 	bl	80006d0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d004      	beq.n	80007ea <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	3318      	adds	r3, #24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff73 	bl	80006d0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 ffef 	bl	80017d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	2201      	movs	r2, #1
 80007f8:	409a      	lsls	r2, r3
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <xTaskIncrementTick+0x12c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4313      	orrs	r3, r2
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <xTaskIncrementTick+0x12c>)
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <xTaskIncrementTick+0x130>)
 8000812:	441a      	add	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3304      	adds	r3, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4610      	mov	r0, r2
 800081c:	f7ff ff34 	bl	8000688 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000820:	e7bb      	b.n	800079a <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <xTaskIncrementTick+0x134>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <xTaskIncrementTick+0x134>)
 800082a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800082c:	697b      	ldr	r3, [r7, #20]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	240000e0 	.word	0x240000e0
 800083c:	240000c4 	.word	0x240000c4
 8000840:	240000bc 	.word	0x240000bc
 8000844:	240000c0 	.word	0x240000c0
 8000848:	240000d4 	.word	0x240000d4
 800084c:	240000d8 	.word	0x240000d8
 8000850:	240000c8 	.word	0x240000c8
 8000854:	24000030 	.word	0x24000030
 8000858:	240000cc 	.word	0x240000cc

0800085c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <vTaskSwitchContext+0xc0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <vTaskSwitchContext+0xc4>)
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000870:	e04f      	b.n	8000912 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <vTaskSwitchContext+0xc4>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <vTaskSwitchContext+0xc8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	fab3 f383 	clz	r3, r3
 8000884:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	f1c3 031f 	rsb	r3, r3, #31
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	4926      	ldr	r1, [pc, #152]	; (8000928 <vTaskSwitchContext+0xcc>)
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10c      	bne.n	80008bc <vTaskSwitchContext+0x60>
        __asm volatile
 80008a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a6:	b672      	cpsid	i
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	b662      	cpsie	i
 80008b6:	607b      	str	r3, [r7, #4]
    }
 80008b8:	bf00      	nop
 80008ba:	e7fe      	b.n	80008ba <vTaskSwitchContext+0x5e>
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <vTaskSwitchContext+0xcc>)
 80008c8:	4413      	add	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	3308      	adds	r3, #8
 80008de:	429a      	cmp	r2, r3
 80008e0:	d104      	bne.n	80008ec <vTaskSwitchContext+0x90>
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <vTaskSwitchContext+0xd0>)
 80008f4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <vTaskSwitchContext+0xd0>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <vTaskSwitchContext+0xd4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d102      	bne.n	8000908 <vTaskSwitchContext+0xac>
 8000902:	f000 ff07 	bl	8001714 <SEGGER_SYSVIEW_OnIdle>
}
 8000906:	e004      	b.n	8000912 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <vTaskSwitchContext+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 ff1d 	bl	800174c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	240000e0 	.word	0x240000e0
 8000920:	240000d0 	.word	0x240000d0
 8000924:	240000c8 	.word	0x240000c8
 8000928:	24000030 	.word	0x24000030
 800092c:	2400002c 	.word	0x2400002c
 8000930:	240000dc 	.word	0x240000dc

08000934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <prvResetNextTaskUnblockTime+0x30>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d104      	bne.n	800094c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <prvResetNextTaskUnblockTime+0x34>)
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800094a:	e005      	b.n	8000958 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <prvResetNextTaskUnblockTime+0x30>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <prvResetNextTaskUnblockTime+0x34>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	240000bc 	.word	0x240000bc
 8000968:	240000d8 	.word	0x240000d8
 800096c:	00000000 	.word	0x00000000

08000970 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <pxCurrentTCBConst2>)
 8000972:	6819      	ldr	r1, [r3, #0]
 8000974:	6808      	ldr	r0, [r1, #0]
 8000976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800097a:	f380 8809 	msr	PSP, r0
 800097e:	f3bf 8f6f 	isb	sy
 8000982:	f04f 0000 	mov.w	r0, #0
 8000986:	f380 8811 	msr	BASEPRI, r0
 800098a:	4770      	bx	lr
 800098c:	f3af 8000 	nop.w

08000990 <pxCurrentTCBConst2>:
 8000990:	2400002c 	.word	0x2400002c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
	...

080009a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80009a0:	f3ef 8009 	mrs	r0, PSP
 80009a4:	f3bf 8f6f 	isb	sy
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <pxCurrentTCBConst>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	f01e 0f10 	tst.w	lr, #16
 80009b0:	bf08      	it	eq
 80009b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80009b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ba:	6010      	str	r0, [r2, #0]
 80009bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80009c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80009c4:	b672      	cpsid	i
 80009c6:	f380 8811 	msr	BASEPRI, r0
 80009ca:	f3bf 8f4f 	dsb	sy
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	b662      	cpsie	i
 80009d4:	f7ff ff42 	bl	800085c <vTaskSwitchContext>
 80009d8:	f04f 0000 	mov.w	r0, #0
 80009dc:	f380 8811 	msr	BASEPRI, r0
 80009e0:	bc09      	pop	{r0, r3}
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	6808      	ldr	r0, [r1, #0]
 80009e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ea:	f01e 0f10 	tst.w	lr, #16
 80009ee:	bf08      	it	eq
 80009f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80009f4:	f380 8809 	msr	PSP, r0
 80009f8:	f3bf 8f6f 	isb	sy
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <pxCurrentTCBConst>:
 8000a00:	2400002c 	.word	0x2400002c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop

08000a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
        __asm volatile
 8000a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a12:	b672      	cpsid	i
 8000a14:	f383 8811 	msr	BASEPRI, r3
 8000a18:	f3bf 8f6f 	isb	sy
 8000a1c:	f3bf 8f4f 	dsb	sy
 8000a20:	b662      	cpsie	i
 8000a22:	607b      	str	r3, [r7, #4]
    }
 8000a24:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000a26:	f7ff fe7d 	bl	8000724 <xTaskIncrementTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SysTick_Handler+0x44>)
 8000a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000a42:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <USART2_IRQHandler+0x80>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d011      	beq.n	8000a8a <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <USART2_IRQHandler+0x84>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f003 030b 	and.w	r3, r3, #11
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d108      	bne.n	8000a8a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <USART2_IRQHandler+0x88>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <USART2_IRQHandler+0x88>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	4610      	mov	r0, r2
 8000a88:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d01a      	beq.n	8000aca <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <USART2_IRQHandler+0x8c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d015      	beq.n	8000ac8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <USART2_IRQHandler+0x8c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	1dfa      	adds	r2, r7, #7
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4798      	blx	r3
 8000aa6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d106      	bne.n	8000abc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <USART2_IRQHandler+0x90>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <USART2_IRQHandler+0x90>)
 8000ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e006      	b.n	8000aca <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <USART2_IRQHandler+0x80>)
 8000abe:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8000ac0:	79fa      	ldrb	r2, [r7, #7]
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <USART2_IRQHandler+0x94>)
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	e000      	b.n	8000aca <USART2_IRQHandler+0x7a>
      return;
 8000ac8:	bf00      	nop
    }
  }
}
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	4000441c 	.word	0x4000441c
 8000ad4:	40004424 	.word	0x40004424
 8000ad8:	240000e4 	.word	0x240000e4
 8000adc:	240000e8 	.word	0x240000e8
 8000ae0:	40004400 	.word	0x40004400
 8000ae4:	40004428 	.word	0x40004428

08000ae8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8000af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40004400 	.word	0x40004400

08000b08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <_DoInit+0xa0>)
 8000b10:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000b12:	22a8      	movs	r2, #168	; 0xa8
 8000b14:	2100      	movs	r1, #0
 8000b16:	6838      	ldr	r0, [r7, #0]
 8000b18:	f006 ffc2 	bl	8007aa0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	2203      	movs	r2, #3
 8000b26:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	4a20      	ldr	r2, [pc, #128]	; (8000bac <_DoInit+0xa4>)
 8000b2c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <_DoInit+0xa8>)
 8000b32:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	4a16      	ldr	r2, [pc, #88]	; (8000bac <_DoInit+0xa4>)
 8000b52:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <_DoInit+0xac>)
 8000b58:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2200      	movs	r2, #0
 8000b64:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000b72:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	e00c      	b.n	8000b96 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f1c3 030f 	rsb	r3, r3, #15
 8000b82:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <_DoInit+0xb0>)
 8000b84:	5cd1      	ldrb	r1, [r2, r3]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3301      	adds	r3, #1
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d9ef      	bls.n	8000b7c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000b9c:	f3bf 8f5f 	dmb	sy
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	240000ec 	.word	0x240000ec
 8000bac:	08007ac8 	.word	0x08007ac8
 8000bb0:	24000194 	.word	0x24000194
 8000bb4:	24000594 	.word	0x24000594
 8000bb8:	08007b2c 	.word	0x08007b2c

08000bbc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	; 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <SEGGER_RTT_ReadNoLock+0x108>)
 8000bca:	623b      	str	r3, [r7, #32]
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <SEGGER_RTT_ReadNoLock+0x1e>
 8000bd6:	f7ff ff97 	bl	8000b08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	3360      	adds	r3, #96	; 0x60
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <SEGGER_RTT_ReadNoLock+0x108>)
 8000be8:	4413      	add	r3, r2
 8000bea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d92b      	bls.n	8000c60 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4293      	cmp	r3, r2
 8000c18:	bf28      	it	cs
 8000c1a:	4613      	movcs	r3, r2
 8000c1c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c24:	4413      	add	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	6939      	ldr	r1, [r7, #16]
 8000c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c2e:	f006 ff29 	bl	8007a84 <memcpy>
    NumBytesRead += NumBytesRem;
 8000c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4413      	add	r3, r2
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	4413      	add	r3, r2
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4413      	add	r3, r2
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d101      	bne.n	8000c60 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	bf28      	it	cs
 8000c70:	4613      	movcs	r3, r2
 8000c72:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d019      	beq.n	8000cae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c80:	4413      	add	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	6939      	ldr	r1, [r7, #16]
 8000c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c8a:	f006 fefb 	bl	8007a84 <memcpy>
    NumBytesRead += NumBytesRem;
 8000c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	4413      	add	r3, r2
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	4413      	add	r3, r2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cb8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3730      	adds	r7, #48	; 0x30
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	240000ec 	.word	0x240000ec

08000cc8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00f      	beq.n	8000cfe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8000cde:	e002      	b.n	8000ce6 <_EncodeStr+0x1e>
      Len++;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f6      	bne.n	8000ce0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d901      	bls.n	8000cfe <_EncodeStr+0x36>
      Len = Limit;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	2bfe      	cmp	r3, #254	; 0xfe
 8000d02:	d806      	bhi.n	8000d12 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60fa      	str	r2, [r7, #12]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e011      	b.n	8000d36 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	60fa      	str	r2, [r7, #12]
 8000d18:	22ff      	movs	r2, #255	; 0xff
 8000d1a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60fa      	str	r2, [r7, #12]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	0a19      	lsrs	r1, r3, #8
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	60fa      	str	r2, [r7, #12]
 8000d32:	b2ca      	uxtb	r2, r1
 8000d34:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8000d3a:	e00a      	b.n	8000d52 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	1c53      	adds	r3, r2, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	1c59      	adds	r1, r3, #1
 8000d46:	60f9      	str	r1, [r7, #12]
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]
    n++;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d3f0      	bcc.n	8000d3c <_EncodeStr+0x74>
  }
  return pPayload;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3307      	adds	r3, #7
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000d86:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <_HandleIncomingPacket+0xdc>)
 8000d88:	7e1b      	ldrb	r3, [r3, #24]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	1cfb      	adds	r3, r7, #3
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff ff13 	bl	8000bbc <SEGGER_RTT_ReadNoLock>
 8000d96:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d052      	beq.n	8000e44 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	2b80      	cmp	r3, #128	; 0x80
 8000da2:	d031      	beq.n	8000e08 <_HandleIncomingPacket+0x88>
 8000da4:	2b80      	cmp	r3, #128	; 0x80
 8000da6:	dc40      	bgt.n	8000e2a <_HandleIncomingPacket+0xaa>
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	dc15      	bgt.n	8000dd8 <_HandleIncomingPacket+0x58>
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	dd3c      	ble.n	8000e2a <_HandleIncomingPacket+0xaa>
 8000db0:	3b01      	subs	r3, #1
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d839      	bhi.n	8000e2a <_HandleIncomingPacket+0xaa>
 8000db6:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <_HandleIncomingPacket+0x3c>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000ddf 	.word	0x08000ddf
 8000dc0:	08000de5 	.word	0x08000de5
 8000dc4:	08000deb 	.word	0x08000deb
 8000dc8:	08000df1 	.word	0x08000df1
 8000dcc:	08000df7 	.word	0x08000df7
 8000dd0:	08000dfd 	.word	0x08000dfd
 8000dd4:	08000e03 	.word	0x08000e03
 8000dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dda:	d035      	beq.n	8000e48 <_HandleIncomingPacket+0xc8>
 8000ddc:	e025      	b.n	8000e2a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000dde:	f000 fad7 	bl	8001390 <SEGGER_SYSVIEW_Start>
      break;
 8000de2:	e036      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000de4:	f000 fb90 	bl	8001508 <SEGGER_SYSVIEW_Stop>
      break;
 8000de8:	e033      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000dea:	f000 fc61 	bl	80016b0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000dee:	e030      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000df0:	f000 fc4a 	bl	8001688 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000df4:	e02d      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000df6:	f000 fbad 	bl	8001554 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000dfa:	e02a      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000dfc:	f000 fdc8 	bl	8001990 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000e00:	e027      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000e02:	f000 fda7 	bl	8001954 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000e06:	e024      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <_HandleIncomingPacket+0xdc>)
 8000e0a:	7e1b      	ldrb	r3, [r3, #24]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	1cfb      	adds	r3, r7, #3
 8000e10:	2201      	movs	r2, #1
 8000e12:	4619      	mov	r1, r3
 8000e14:	f7ff fed2 	bl	8000bbc <SEGGER_RTT_ReadNoLock>
 8000e18:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d015      	beq.n	8000e4c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fd16 	bl	8001854 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000e28:	e010      	b.n	8000e4c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da0e      	bge.n	8000e50 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <_HandleIncomingPacket+0xdc>)
 8000e34:	7e1b      	ldrb	r3, [r3, #24]
 8000e36:	4618      	mov	r0, r3
 8000e38:	1cfb      	adds	r3, r7, #3
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff febd 	bl	8000bbc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000e42:	e005      	b.n	8000e50 <_HandleIncomingPacket+0xd0>
    }
  }
 8000e44:	bf00      	nop
 8000e46:	e004      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
      break;
 8000e48:	bf00      	nop
 8000e4a:	e002      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
      break;
 8000e4c:	bf00      	nop
 8000e4e:	e000      	b.n	8000e52 <_HandleIncomingPacket+0xd2>
      break;
 8000e50:	bf00      	nop
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	240005a4 	.word	0x240005a4

08000e60 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000e66:	2301      	movs	r3, #1
 8000e68:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e74:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <_TrySendOverflowPacket+0xe0>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e7a:	e00b      	b.n	8000e94 <_TrySendOverflowPacket+0x34>
 8000e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	1c59      	adds	r1, r3, #1
 8000e84:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e90:	09db      	lsrs	r3, r3, #7
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	2b7f      	cmp	r3, #127	; 0x7f
 8000e98:	d8f0      	bhi.n	8000e7c <_TrySendOverflowPacket+0x1c>
 8000e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <_TrySendOverflowPacket+0xe4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <_TrySendOverflowPacket+0xe0>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	623b      	str	r3, [r7, #32]
 8000ec2:	e00b      	b.n	8000edc <_TrySendOverflowPacket+0x7c>
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	1c59      	adds	r1, r3, #1
 8000ecc:	6279      	str	r1, [r7, #36]	; 0x24
 8000ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	09db      	lsrs	r3, r3, #7
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee0:	d8f0      	bhi.n	8000ec4 <_TrySendOverflowPacket+0x64>
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	627a      	str	r2, [r7, #36]	; 0x24
 8000ee8:	6a3a      	ldr	r2, [r7, #32]
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_TrySendOverflowPacket+0xe0>)
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff f9ec 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8000f0c:	f7ff fdec 	bl	8000ae8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d009      	beq.n	8000f2a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <_TrySendOverflowPacket+0xe0>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_TrySendOverflowPacket+0xe0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <_TrySendOverflowPacket+0xe0>)
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e004      	b.n	8000f34 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <_TrySendOverflowPacket+0xe0>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <_TrySendOverflowPacket+0xe0>)
 8000f32:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000f34:	693b      	ldr	r3, [r7, #16]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	240005a4 	.word	0x240005a4
 8000f44:	e0001004 	.word	0xe0001004

08000f48 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000f54:	4b96      	ldr	r3, [pc, #600]	; (80011b0 <_SendPacket+0x268>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d010      	beq.n	8000f7e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000f5c:	4b94      	ldr	r3, [pc, #592]	; (80011b0 <_SendPacket+0x268>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 8130 	beq.w	80011c6 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000f66:	4b92      	ldr	r3, [pc, #584]	; (80011b0 <_SendPacket+0x268>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d109      	bne.n	8000f82 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000f6e:	f7ff ff77 	bl	8000e60 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000f72:	4b8f      	ldr	r3, [pc, #572]	; (80011b0 <_SendPacket+0x268>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	f040 8127 	bne.w	80011ca <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8000f7c:	e001      	b.n	8000f82 <_SendPacket+0x3a>
    goto Send;
 8000f7e:	bf00      	nop
 8000f80:	e000      	b.n	8000f84 <_SendPacket+0x3c>
Send:
 8000f82:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b1f      	cmp	r3, #31
 8000f88:	d809      	bhi.n	8000f9e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000f8a:	4b89      	ldr	r3, [pc, #548]	; (80011b0 <_SendPacket+0x268>)
 8000f8c:	69da      	ldr	r2, [r3, #28]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f040 8118 	bne.w	80011ce <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b17      	cmp	r3, #23
 8000fa2:	d807      	bhi.n	8000fb4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e0c4      	b.n	800113e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc0:	d912      	bls.n	8000fe8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	09da      	lsrs	r2, r3, #7
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	3a01      	subs	r2, #1
 8000fda:	60fa      	str	r2, [r7, #12]
 8000fdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e006      	b.n	8000ff6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b7e      	cmp	r3, #126	; 0x7e
 8000ffa:	d807      	bhi.n	800100c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e098      	b.n	800113e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001012:	d212      	bcs.n	800103a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	09da      	lsrs	r2, r3, #7
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3b01      	subs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	3a01      	subs	r2, #1
 800102c:	60fa      	str	r2, [r7, #12]
 800102e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001032:	b2da      	uxtb	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e081      	b.n	800113e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001040:	d21d      	bcs.n	800107e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0b9a      	lsrs	r2, r3, #14
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3b01      	subs	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	09db      	lsrs	r3, r3, #7
 8001056:	b2db      	uxtb	r3, r3
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	3a01      	subs	r2, #1
 800105c:	60fa      	str	r2, [r7, #12]
 800105e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001062:	b2da      	uxtb	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	3a01      	subs	r2, #1
 8001070:	60fa      	str	r2, [r7, #12]
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	b2da      	uxtb	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e05f      	b.n	800113e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001084:	d228      	bcs.n	80010d8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	0d5a      	lsrs	r2, r3, #21
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3b01      	subs	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0b9b      	lsrs	r3, r3, #14
 800109a:	b2db      	uxtb	r3, r3
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	3a01      	subs	r2, #1
 80010a0:	60fa      	str	r2, [r7, #12]
 80010a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	09db      	lsrs	r3, r3, #7
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	3a01      	subs	r2, #1
 80010b6:	60fa      	str	r2, [r7, #12]
 80010b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	3a01      	subs	r2, #1
 80010ca:	60fa      	str	r2, [r7, #12]
 80010cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e032      	b.n	800113e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	0f1a      	lsrs	r2, r3, #28
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3b01      	subs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	0d5b      	lsrs	r3, r3, #21
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	3a01      	subs	r2, #1
 80010f2:	60fa      	str	r2, [r7, #12]
 80010f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	0b9b      	lsrs	r3, r3, #14
 8001102:	b2db      	uxtb	r3, r3
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	3a01      	subs	r2, #1
 8001108:	60fa      	str	r2, [r7, #12]
 800110a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110e:	b2da      	uxtb	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	09db      	lsrs	r3, r3, #7
 8001118:	b2db      	uxtb	r3, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	3a01      	subs	r2, #1
 800111e:	60fa      	str	r2, [r7, #12]
 8001120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	3a01      	subs	r2, #1
 8001132:	60fa      	str	r2, [r7, #12]
 8001134:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001138:	b2da      	uxtb	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <_SendPacket+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <_SendPacket+0x268>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	e00b      	b.n	8001170 <_SendPacket+0x228>
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	6279      	str	r1, [r7, #36]	; 0x24
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <_SendPacket+0x210>
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	627a      	str	r2, [r7, #36]	; 0x24
 800117c:	6a3a      	ldr	r2, [r7, #32]
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <_SendPacket+0x268>)
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	4618      	mov	r0, r3
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	461a      	mov	r2, r3
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	f7ff f8a3 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800119a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800119c:	f7ff fca4 	bl	8000ae8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80011a6:	4a02      	ldr	r2, [pc, #8]	; (80011b0 <_SendPacket+0x268>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	60d3      	str	r3, [r2, #12]
 80011ac:	e010      	b.n	80011d0 <_SendPacket+0x288>
 80011ae:	bf00      	nop
 80011b0:	240005a4 	.word	0x240005a4
 80011b4:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <_SendPacket+0x2d8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <_SendPacket+0x2d8>)
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e004      	b.n	80011d0 <_SendPacket+0x288>
    goto SendDone;
 80011c6:	bf00      	nop
 80011c8:	e002      	b.n	80011d0 <_SendPacket+0x288>
      goto SendDone;
 80011ca:	bf00      	nop
 80011cc:	e000      	b.n	80011d0 <_SendPacket+0x288>
      goto SendDone;
 80011ce:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <_SendPacket+0x2d8>)
 80011d2:	7e1b      	ldrb	r3, [r3, #24]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <_SendPacket+0x2dc>)
 80011d8:	460b      	mov	r3, r1
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	440b      	add	r3, r1
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	336c      	adds	r3, #108	; 0x6c
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <_SendPacket+0x2d8>)
 80011e8:	7e1b      	ldrb	r3, [r3, #24]
 80011ea:	4618      	mov	r0, r3
 80011ec:	490d      	ldr	r1, [pc, #52]	; (8001224 <_SendPacket+0x2dc>)
 80011ee:	4603      	mov	r3, r0
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4403      	add	r3, r0
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	3370      	adds	r3, #112	; 0x70
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d00b      	beq.n	8001218 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <_SendPacket+0x2d8>)
 8001202:	789b      	ldrb	r3, [r3, #2]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d107      	bne.n	8001218 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <_SendPacket+0x2d8>)
 800120a:	2201      	movs	r2, #1
 800120c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800120e:	f7ff fdb7 	bl	8000d80 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001212:	4b03      	ldr	r3, [pc, #12]	; (8001220 <_SendPacket+0x2d8>)
 8001214:	2200      	movs	r2, #0
 8001216:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	240005a4 	.word	0x240005a4
 8001224:	240000ec 	.word	0x240000ec

08001228 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001230:	f3ef 8311 	mrs	r3, BASEPRI
 8001234:	f04f 0120 	mov.w	r1, #32
 8001238:	f381 8811 	msr	BASEPRI, r1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001240:	f7ff fd92 	bl	8000d68 <_PreparePacket>
 8001244:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	68b8      	ldr	r0, [r7, #8]
 800124c:	f7ff fe7c 	bl	8000f48 <_SendPacket>
  RECORD_END();
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f383 8811 	msr	BASEPRI, r3
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	240005d4 	.word	0x240005d4

08001264 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800126e:	f3ef 8311 	mrs	r3, BASEPRI
 8001272:	f04f 0120 	mov.w	r1, #32
 8001276:	f381 8811 	msr	BASEPRI, r1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800127e:	f7ff fd73 	bl	8000d68 <_PreparePacket>
 8001282:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	e00b      	b.n	80012aa <SEGGER_SYSVIEW_RecordU32+0x46>
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	1c59      	adds	r1, r3, #1
 800129a:	61f9      	str	r1, [r7, #28]
 800129c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	09db      	lsrs	r3, r3, #7
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b7f      	cmp	r3, #127	; 0x7f
 80012ae:	d8f0      	bhi.n	8001292 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	61fa      	str	r2, [r7, #28]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	68f9      	ldr	r1, [r7, #12]
 80012c4:	6938      	ldr	r0, [r7, #16]
 80012c6:	f7ff fe3f 	bl	8000f48 <_SendPacket>
  RECORD_END();
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f383 8811 	msr	BASEPRI, r3
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	240005d4 	.word	0x240005d4

080012dc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80012e8:	f3ef 8311 	mrs	r3, BASEPRI
 80012ec:	f04f 0120 	mov.w	r1, #32
 80012f0:	f381 8811 	msr	BASEPRI, r1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	4825      	ldr	r0, [pc, #148]	; (800138c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80012f8:	f7ff fd36 	bl	8000d68 <_PreparePacket>
 80012fc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
 800130a:	e00b      	b.n	8001324 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130e:	b2da      	uxtb	r2, r3
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	1c59      	adds	r1, r3, #1
 8001314:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	09db      	lsrs	r3, r3, #7
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	2b7f      	cmp	r3, #127	; 0x7f
 8001328:	d8f0      	bhi.n	800130c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	623b      	str	r3, [r7, #32]
 8001342:	e00b      	b.n	800135c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	1c59      	adds	r1, r3, #1
 800134c:	6279      	str	r1, [r7, #36]	; 0x24
 800134e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	09db      	lsrs	r3, r3, #7
 800135a:	623b      	str	r3, [r7, #32]
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	d8f0      	bhi.n	8001344 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	627a      	str	r2, [r7, #36]	; 0x24
 8001368:	6a3a      	ldr	r2, [r7, #32]
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	6979      	ldr	r1, [r7, #20]
 8001376:	69b8      	ldr	r0, [r7, #24]
 8001378:	f7ff fde6 	bl	8000f48 <_SendPacket>
  RECORD_END();
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f383 8811 	msr	BASEPRI, r3
}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	; 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	240005d4 	.word	0x240005d4

08001390 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <SEGGER_SYSVIEW_Start+0x16c>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800139c:	f3ef 8311 	mrs	r3, BASEPRI
 80013a0:	f04f 0120 	mov.w	r1, #32
 80013a4:	f381 8811 	msr	BASEPRI, r1
 80013a8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80013aa:	4b54      	ldr	r3, [pc, #336]	; (80014fc <SEGGER_SYSVIEW_Start+0x16c>)
 80013ac:	785b      	ldrb	r3, [r3, #1]
 80013ae:	220a      	movs	r2, #10
 80013b0:	4953      	ldr	r1, [pc, #332]	; (8001500 <SEGGER_SYSVIEW_Start+0x170>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ff94 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80013be:	f7ff fb93 	bl	8000ae8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f7ff ff30 	bl	8001228 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013c8:	f3ef 8311 	mrs	r3, BASEPRI
 80013cc:	f04f 0120 	mov.w	r1, #32
 80013d0:	f381 8811 	msr	BASEPRI, r1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	484b      	ldr	r0, [pc, #300]	; (8001504 <SEGGER_SYSVIEW_Start+0x174>)
 80013d8:	f7ff fcc6 	bl	8000d68 <_PreparePacket>
 80013dc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <SEGGER_SYSVIEW_Start+0x16c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ec:	e00b      	b.n	8001406 <SEGGER_SYSVIEW_Start+0x76>
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	1c59      	adds	r1, r3, #1
 80013f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	09db      	lsrs	r3, r3, #7
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	2b7f      	cmp	r3, #127	; 0x7f
 800140a:	d8f0      	bhi.n	80013ee <SEGGER_SYSVIEW_Start+0x5e>
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <SEGGER_SYSVIEW_Start+0x16c>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	623b      	str	r3, [r7, #32]
 8001426:	e00b      	b.n	8001440 <SEGGER_SYSVIEW_Start+0xb0>
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	6279      	str	r1, [r7, #36]	; 0x24
 8001432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	09db      	lsrs	r3, r3, #7
 800143e:	623b      	str	r3, [r7, #32]
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	2b7f      	cmp	r3, #127	; 0x7f
 8001444:	d8f0      	bhi.n	8001428 <SEGGER_SYSVIEW_Start+0x98>
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	627a      	str	r2, [r7, #36]	; 0x24
 800144c:	6a3a      	ldr	r2, [r7, #32]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <SEGGER_SYSVIEW_Start+0x16c>)
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	e00b      	b.n	800147a <SEGGER_SYSVIEW_Start+0xea>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	1c59      	adds	r1, r3, #1
 800146a:	61f9      	str	r1, [r7, #28]
 800146c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	09db      	lsrs	r3, r3, #7
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b7f      	cmp	r3, #127	; 0x7f
 800147e:	d8f0      	bhi.n	8001462 <SEGGER_SYSVIEW_Start+0xd2>
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	61fa      	str	r2, [r7, #28]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e00b      	b.n	80014b2 <SEGGER_SYSVIEW_Start+0x122>
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	1c59      	adds	r1, r3, #1
 80014a2:	6179      	str	r1, [r7, #20]
 80014a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	09db      	lsrs	r3, r3, #7
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b7f      	cmp	r3, #127	; 0x7f
 80014b6:	d8f0      	bhi.n	800149a <SEGGER_SYSVIEW_Start+0x10a>
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	617a      	str	r2, [r7, #20]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014c8:	2218      	movs	r2, #24
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fd3b 	bl	8000f48 <_SendPacket>
      RECORD_END();
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <SEGGER_SYSVIEW_Start+0x16c>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SEGGER_SYSVIEW_Start+0x16c>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80014e6:	f000 f8e3 	bl	80016b0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80014ea:	f000 f8cd 	bl	8001688 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80014ee:	f000 fa4f 	bl	8001990 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80014f2:	bf00      	nop
 80014f4:	3730      	adds	r7, #48	; 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	240005a4 	.word	0x240005a4
 8001500:	08007b40 	.word	0x08007b40
 8001504:	240005d4 	.word	0x240005d4

08001508 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800150e:	f3ef 8311 	mrs	r3, BASEPRI
 8001512:	f04f 0120 	mov.w	r1, #32
 8001516:	f381 8811 	msr	BASEPRI, r1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <SEGGER_SYSVIEW_Stop+0x44>)
 800151e:	f7ff fc23 	bl	8000d68 <_PreparePacket>
 8001522:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <SEGGER_SYSVIEW_Stop+0x48>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800152c:	220b      	movs	r2, #11
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f7ff fd09 	bl	8000f48 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SEGGER_SYSVIEW_Stop+0x48>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f383 8811 	msr	BASEPRI, r3
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	240005d4 	.word	0x240005d4
 8001550:	240005a4 	.word	0x240005a4

08001554 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800155a:	f3ef 8311 	mrs	r3, BASEPRI
 800155e:	f04f 0120 	mov.w	r1, #32
 8001562:	f381 8811 	msr	BASEPRI, r1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4845      	ldr	r0, [pc, #276]	; (8001680 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800156a:	f7ff fbfd 	bl	8000d68 <_PreparePacket>
 800156e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001578:	4b42      	ldr	r3, [pc, #264]	; (8001684 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
 800157e:	e00b      	b.n	8001598 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	b2da      	uxtb	r2, r3
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	1c59      	adds	r1, r3, #1
 8001588:	62f9      	str	r1, [r7, #44]	; 0x2c
 800158a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	09db      	lsrs	r3, r3, #7
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	2b7f      	cmp	r3, #127	; 0x7f
 800159c:	d8f0      	bhi.n	8001580 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	623b      	str	r3, [r7, #32]
 80015b8:	e00b      	b.n	80015d2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	6279      	str	r1, [r7, #36]	; 0x24
 80015c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	09db      	lsrs	r3, r3, #7
 80015d0:	623b      	str	r3, [r7, #32]
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	2b7f      	cmp	r3, #127	; 0x7f
 80015d6:	d8f0      	bhi.n	80015ba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	627a      	str	r2, [r7, #36]	; 0x24
 80015de:	6a3a      	ldr	r2, [r7, #32]
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e00b      	b.n	800160c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	1c59      	adds	r1, r3, #1
 80015fc:	61f9      	str	r1, [r7, #28]
 80015fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	09db      	lsrs	r3, r3, #7
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b7f      	cmp	r3, #127	; 0x7f
 8001610:	d8f0      	bhi.n	80015f4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	61fa      	str	r2, [r7, #28]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	e00b      	b.n	8001644 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1c59      	adds	r1, r3, #1
 8001634:	6179      	str	r1, [r7, #20]
 8001636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	09db      	lsrs	r3, r3, #7
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b7f      	cmp	r3, #127	; 0x7f
 8001648:	d8f0      	bhi.n	800162c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	617a      	str	r2, [r7, #20]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800165a:	2218      	movs	r2, #24
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f7ff fc72 	bl	8000f48 <_SendPacket>
  RECORD_END();
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	4798      	blx	r3
  }
}
 8001678:	bf00      	nop
 800167a:	3730      	adds	r7, #48	; 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	240005d4 	.word	0x240005d4
 8001684:	240005a4 	.word	0x240005a4

08001688 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4798      	blx	r3
  }
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	240005a4 	.word	0x240005a4

080016b0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01a      	beq.n	80016f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4798      	blx	r3
 80016d0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80016d4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80016d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	000a      	movs	r2, r1
 80016e4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80016e6:	4613      	mov	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	4621      	mov	r1, r4
 80016ec:	200d      	movs	r0, #13
 80016ee:	f7ff fdf5 	bl	80012dc <SEGGER_SYSVIEW_RecordU32x2>
 80016f2:	e006      	b.n	8001702 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	200c      	movs	r0, #12
 80016fc:	f7ff fdb2 	bl	8001264 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	bf00      	nop
 800170c:	240005a4 	.word	0x240005a4
 8001710:	e0001004 	.word	0xe0001004

08001714 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800171a:	f3ef 8311 	mrs	r3, BASEPRI
 800171e:	f04f 0120 	mov.w	r1, #32
 8001722:	f381 8811 	msr	BASEPRI, r1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800172a:	f7ff fb1d 	bl	8000d68 <_PreparePacket>
 800172e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8001730:	2211      	movs	r2, #17
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f7ff fc07 	bl	8000f48 <_SendPacket>
  RECORD_END();
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f383 8811 	msr	BASEPRI, r3
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	240005d4 	.word	0x240005d4

0800174c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001754:	f3ef 8311 	mrs	r3, BASEPRI
 8001758:	f04f 0120 	mov.w	r1, #32
 800175c:	f381 8811 	msr	BASEPRI, r1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	4819      	ldr	r0, [pc, #100]	; (80017c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8001764:	f7ff fb00 	bl	8000d68 <_PreparePacket>
 8001768:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	e00b      	b.n	800179a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	1c59      	adds	r1, r3, #1
 800178a:	61f9      	str	r1, [r7, #28]
 800178c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	09db      	lsrs	r3, r3, #7
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b7f      	cmp	r3, #127	; 0x7f
 800179e:	d8f0      	bhi.n	8001782 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	61fa      	str	r2, [r7, #28]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80017b0:	2204      	movs	r2, #4
 80017b2:	68f9      	ldr	r1, [r7, #12]
 80017b4:	6938      	ldr	r0, [r7, #16]
 80017b6:	f7ff fbc7 	bl	8000f48 <_SendPacket>
  RECORD_END();
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f383 8811 	msr	BASEPRI, r3
}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	240005d4 	.word	0x240005d4
 80017cc:	240005a4 	.word	0x240005a4

080017d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80017d8:	f3ef 8311 	mrs	r3, BASEPRI
 80017dc:	f04f 0120 	mov.w	r1, #32
 80017e0:	f381 8811 	msr	BASEPRI, r1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	4819      	ldr	r0, [pc, #100]	; (800184c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80017e8:	f7ff fabe 	bl	8000d68 <_PreparePacket>
 80017ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	e00b      	b.n	800181e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	1c59      	adds	r1, r3, #1
 800180e:	61f9      	str	r1, [r7, #28]
 8001810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	09db      	lsrs	r3, r3, #7
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b7f      	cmp	r3, #127	; 0x7f
 8001822:	d8f0      	bhi.n	8001806 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	61fa      	str	r2, [r7, #28]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8001834:	2206      	movs	r2, #6
 8001836:	68f9      	ldr	r1, [r7, #12]
 8001838:	6938      	ldr	r0, [r7, #16]
 800183a:	f7ff fb85 	bl	8000f48 <_SendPacket>
  RECORD_END();
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f383 8811 	msr	BASEPRI, r3
}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	240005d4 	.word	0x240005d4
 8001850:	240005a4 	.word	0x240005a4

08001854 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d06d      	beq.n	8001942 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001870:	e008      	b.n	8001884 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	3301      	adds	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001888:	429a      	cmp	r2, r3
 800188a:	d3f2      	bcc.n	8001872 <SEGGER_SYSVIEW_SendModule+0x1e>
 800188c:	e000      	b.n	8001890 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800188e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	2b00      	cmp	r3, #0
 8001894:	d055      	beq.n	8001942 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001896:	f3ef 8311 	mrs	r3, BASEPRI
 800189a:	f04f 0120 	mov.w	r1, #32
 800189e:	f381 8811 	msr	BASEPRI, r1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	482a      	ldr	r0, [pc, #168]	; (8001950 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80018a6:	f7ff fa5f 	bl	8000d68 <_PreparePacket>
 80018aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	e00b      	b.n	80018d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1c59      	adds	r1, r3, #1
 80018c2:	6279      	str	r1, [r7, #36]	; 0x24
 80018c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	09db      	lsrs	r3, r3, #7
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	2b7f      	cmp	r3, #127	; 0x7f
 80018d6:	d8f0      	bhi.n	80018ba <SEGGER_SYSVIEW_SendModule+0x66>
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	627a      	str	r2, [r7, #36]	; 0x24
 80018de:	6a3a      	ldr	r2, [r7, #32]
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	e00b      	b.n	800190c <SEGGER_SYSVIEW_SendModule+0xb8>
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	1c59      	adds	r1, r3, #1
 80018fc:	61f9      	str	r1, [r7, #28]
 80018fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	09db      	lsrs	r3, r3, #7
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	d8f0      	bhi.n	80018f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	61fa      	str	r2, [r7, #28]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	4619      	mov	r1, r3
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff f9cc 	bl	8000cc8 <_EncodeStr>
 8001930:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8001932:	2216      	movs	r2, #22
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	6938      	ldr	r0, [r7, #16]
 8001938:	f7ff fb06 	bl	8000f48 <_SendPacket>
      RECORD_END();
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8001942:	bf00      	nop
 8001944:	3730      	adds	r7, #48	; 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240005cc 	.word	0x240005cc
 8001950:	240005d4 	.word	0x240005d4

08001954 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00f      	beq.n	8001982 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f2      	bne.n	8001968 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	240005cc 	.word	0x240005cc

08001990 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001996:	f3ef 8311 	mrs	r3, BASEPRI
 800199a:	f04f 0120 	mov.w	r1, #32
 800199e:	f381 8811 	msr	BASEPRI, r1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4817      	ldr	r0, [pc, #92]	; (8001a04 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80019a6:	f7ff f9df 	bl	8000d68 <_PreparePacket>
 80019aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	e00b      	b.n	80019d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1c59      	adds	r1, r3, #1
 80019c4:	6179      	str	r1, [r7, #20]
 80019c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	09db      	lsrs	r3, r3, #7
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b7f      	cmp	r3, #127	; 0x7f
 80019d8:	d8f0      	bhi.n	80019bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	617a      	str	r2, [r7, #20]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019ea:	221b      	movs	r2, #27
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	68b8      	ldr	r0, [r7, #8]
 80019f0:	f7ff faaa 	bl	8000f48 <_SendPacket>
  RECORD_END();
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f383 8811 	msr	BASEPRI, r3
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	240005d4 	.word	0x240005d4
 8001a08:	240005d0 	.word	0x240005d0

08001a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a10:	f000 fcb4 	bl	800237c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a14:	f000 f820 	bl	8001a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a18:	f000 f96c 	bl	8001cf4 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8001a1c:	f000 f898 	bl	8001b50 <MX_FDCAN2_Init>
  MX_USART2_UART_Init();
 8001a20:	f000 f8fa 	bl	8001c18 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8001a24:	f000 f944 	bl	8001cb0 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
  USART_Send("Start");
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <main+0x44>)
 8001a2a:	f000 f9d3 	bl	8001dd4 <USART_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4808      	ldr	r0, [pc, #32]	; (8001a54 <main+0x48>)
 8001a32:	f001 fe50 	bl	80036d6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a3a:	f000 fcfb 	bl	8002434 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <main+0x48>)
 8001a42:	f001 fe48 	bl	80036d6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001a46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a4a:	f000 fcf3 	bl	8002434 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8001a4e:	e7ee      	b.n	8001a2e <main+0x22>
 8001a50:	08007ad8 	.word	0x08007ad8
 8001a54:	58020800 	.word	0x58020800

08001a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b09c      	sub	sp, #112	; 0x70
 8001a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a62:	224c      	movs	r2, #76	; 0x4c
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f006 f81a 	bl	8007aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2220      	movs	r2, #32
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f006 f814 	bl	8007aa0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f001 fea9 	bl	80037d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <SystemClock_Config+0xf0>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <SystemClock_Config+0xf0>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <SystemClock_Config+0xf0>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <SystemClock_Config+0xf4>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aa0:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <SystemClock_Config+0xf4>)
 8001aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <SystemClock_Config+0xf4>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ab4:	bf00      	nop
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <SystemClock_Config+0xf4>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac2:	d1f8      	bne.n	8001ab6 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001ada:	2312      	movs	r3, #18
 8001adc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001aea:	230c      	movs	r3, #12
 8001aec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001aee:	2302      	movs	r3, #2
 8001af0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001af2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001af6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 feb1 	bl	8003864 <HAL_RCC_OscConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b08:	f000 f990 	bl	8001e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0c:	233f      	movs	r3, #63	; 0x3f
 8001b0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b10:	2302      	movs	r3, #2
 8001b12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 faa5 	bl	8004080 <HAL_RCC_ClockConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001b3c:	f000 f976 	bl	8001e2c <Error_Handler>
  }
}
 8001b40:	bf00      	nop
 8001b42:	3770      	adds	r7, #112	; 0x70
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	58000400 	.word	0x58000400
 8001b4c:	58024800 	.word	0x58024800

08001b50 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b56:	4a2f      	ldr	r2, [pc, #188]	; (8001c14 <MX_FDCAN2_Init+0xc4>)
 8001b58:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001b72:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b86:	2202      	movs	r2, #2
 8001b88:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bda:	2204      	movs	r2, #4
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_FDCAN2_Init+0xc0>)
 8001bfe:	f000 fd29 	bl	8002654 <HAL_FDCAN_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001c08:	f000 f910 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	240006b8 	.word	0x240006b8
 8001c14:	4000a400 	.word	0x4000a400

08001c18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c1e:	4a23      	ldr	r2, [pc, #140]	; (8001cac <MX_USART2_UART_Init+0x94>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c60:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c62:	f004 fc15 	bl	8006490 <HAL_UART_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c6c:	f000 f8de 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c70:	2100      	movs	r1, #0
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c74:	f005 fc02 	bl	800747c <HAL_UARTEx_SetTxFifoThreshold>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c7e:	f000 f8d5 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c86:	f005 fc37 	bl	80074f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c90:	f000 f8cc 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <MX_USART2_UART_Init+0x90>)
 8001c96:	f005 fbb8 	bl	800740a <HAL_UARTEx_DisableFifoMode>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ca0:	f000 f8c4 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	24000758 	.word	0x24000758
 8001cac:	40004400 	.word	0x40004400

08001cb0 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8001cb6:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8001cce:	2202      	movs	r2, #2
 8001cd0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8001cda:	f001 fd16 	bl	800370a <HAL_HCD_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8001ce4:	f000 f8a2 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	240007e8 	.word	0x240007e8
 8001cf0:	40080000 	.word	0x40080000

08001cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d10:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2e:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <MX_GPIO_Init+0xd8>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001d82:	2201      	movs	r2, #1
 8001d84:	2107      	movs	r1, #7
 8001d86:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <MX_GPIO_Init+0xdc>)
 8001d88:	f001 fc8c 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <MX_GPIO_Init+0xdc>)
 8001da2:	f001 facf 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001da6:	2307      	movs	r3, #7
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <MX_GPIO_Init+0xdc>)
 8001dbe:	f001 fac1 	bl	8003344 <HAL_GPIO_Init>

}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	58020800 	.word	0x58020800

08001dd4 <USART_Send>:

 }


void USART_Send(char* user_data)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY) != HAL_OK)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7fe fac9 	bl	8000374 <strlen>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <USART_Send+0x30>)
 8001dee:	f004 fb9f 	bl	8006530 <HAL_UART_Transmit>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <USART_Send+0x28>
	{
		// Error occurred
		Error_Handler();
 8001df8:	f000 f818 	bl	8001e2c <Error_Handler>
	}
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	24000758 	.word	0x24000758

08001e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e1a:	f000 faeb 	bl	80023f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40001000 	.word	0x40001000

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_MspInit+0x30>)
 8001e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e44:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x30>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x30>)
 8001e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	58024400 	.word	0x58024400

08001e6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0b8      	sub	sp, #224	; 0xe0
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	22bc      	movs	r2, #188	; 0xbc
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f005 fe07 	bl	8007aa0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <HAL_FDCAN_MspInit+0xd0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d14b      	bne.n	8001f34 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ea2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fcb5 	bl	800481c <HAL_RCCEx_PeriphCLKConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001eb8:	f7ff ffb8 	bl	8001e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_FDCAN_MspInit+0xd4>)
 8001ebe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_FDCAN_MspInit+0xd4>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_FDCAN_MspInit+0xd4>)
 8001ece:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_FDCAN_MspInit+0xd4>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_FDCAN_MspInit+0xd4>)
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_FDCAN_MspInit+0xd4>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ef8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001efc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f12:	2309      	movs	r3, #9
 8001f14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4809      	ldr	r0, [pc, #36]	; (8001f44 <HAL_FDCAN_MspInit+0xd8>)
 8001f20:	f001 fa10 	bl	8003344 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	2016      	movs	r0, #22
 8001f2a:	f000 fb6b 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001f2e:	2016      	movs	r0, #22
 8001f30:	f000 fb82 	bl	8002638 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	37e0      	adds	r7, #224	; 0xe0
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	4000a400 	.word	0x4000a400
 8001f40:	58024400 	.word	0x58024400
 8001f44:	58020400 	.word	0x58020400

08001f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0b8      	sub	sp, #224	; 0xe0
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	22bc      	movs	r2, #188	; 0xbc
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f005 fd99 	bl	8007aa0 <memset>
  if(huart->Instance==USART2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a24      	ldr	r2, [pc, #144]	; (8002004 <HAL_UART_MspInit+0xbc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d141      	bne.n	8001ffc <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 fc48 	bl	800481c <HAL_RCCEx_PeriphCLKConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f92:	f7ff ff4b 	bl	8001e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_UART_MspInit+0xc0>)
 8001f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_UART_MspInit+0xc0>)
 8001f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_UART_MspInit+0xc0>)
 8001fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_UART_MspInit+0xc0>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_UART_MspInit+0xc0>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_UART_MspInit+0xc0>)
 8001fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fea:	2307      	movs	r3, #7
 8001fec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <HAL_UART_MspInit+0xc4>)
 8001ff8:	f001 f9a4 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	37e0      	adds	r7, #224	; 0xe0
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40004400 	.word	0x40004400
 8002008:	58024400 	.word	0x58024400
 800200c:	58020000 	.word	0x58020000

08002010 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b0b8      	sub	sp, #224	; 0xe0
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	22bc      	movs	r2, #188	; 0xbc
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f005 fd35 	bl	8007aa0 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <HAL_HCD_MspInit+0xc8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d146      	bne.n	80020ce <HAL_HCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002040:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002044:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002046:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800204a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fbe2 	bl	800481c <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800205e:	f7ff fee5 	bl	8001e2c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002062:	f001 fbef 	bl	8003844 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_HCD_MspInit+0xcc>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_HCD_MspInit+0xcc>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_HCD_MspInit+0xcc>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002084:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800209e:	230a      	movs	r3, #10
 80020a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020a8:	4619      	mov	r1, r3
 80020aa:	480d      	ldr	r0, [pc, #52]	; (80020e0 <HAL_HCD_MspInit+0xd0>)
 80020ac:	f001 f94a 	bl	8003344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_HCD_MspInit+0xcc>)
 80020b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_HCD_MspInit+0xcc>)
 80020b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_HCD_MspInit+0xcc>)
 80020c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	37e0      	adds	r7, #224	; 0xe0
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40080000 	.word	0x40080000
 80020dc:	58024400 	.word	0x58024400
 80020e0:	58020000 	.word	0x58020000

080020e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b090      	sub	sp, #64	; 0x40
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	d827      	bhi.n	8002142 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80020f2:	2200      	movs	r2, #0
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	2036      	movs	r0, #54	; 0x36
 80020f8:	f000 fa84 	bl	8002604 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020fc:	2036      	movs	r0, #54	; 0x36
 80020fe:	f000 fa9b 	bl	8002638 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <HAL_InitTick+0xc4>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_InitTick+0xc8>)
 800210a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800210e:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_InitTick+0xc8>)
 8002110:	f043 0310 	orr.w	r3, r3, #16
 8002114:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_InitTick+0xc8>)
 800211a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002126:	f107 0210 	add.w	r2, r7, #16
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f002 fb31 	bl	8004798 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	2b00      	cmp	r3, #0
 800213e:	d106      	bne.n	800214e <HAL_InitTick+0x6a>
 8002140:	e001      	b.n	8002146 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e02b      	b.n	800219e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002146:	f002 fafb 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 800214a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800214c:	e004      	b.n	8002158 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800214e:	f002 faf7 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8002152:	4603      	mov	r3, r0
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_InitTick+0xcc>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	3b01      	subs	r3, #1
 8002164:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_InitTick+0xd0>)
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_InitTick+0xd4>)
 800216a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_InitTick+0xd0>)
 800216e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002172:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002174:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <HAL_InitTick+0xd0>)
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_InitTick+0xd0>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_InitTick+0xd0>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002186:	480b      	ldr	r0, [pc, #44]	; (80021b4 <HAL_InitTick+0xd0>)
 8002188:	f003 feb0 	bl	8005eec <HAL_TIM_Base_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002192:	4808      	ldr	r0, [pc, #32]	; (80021b4 <HAL_InitTick+0xd0>)
 8002194:	f003 ff0c 	bl	8005fb0 <HAL_TIM_Base_Start_IT>
 8002198:	4603      	mov	r3, r0
 800219a:	e000      	b.n	800219e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3740      	adds	r7, #64	; 0x40
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	24000008 	.word	0x24000008
 80021ac:	58024400 	.word	0x58024400
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	24000aec 	.word	0x24000aec
 80021b8:	40001000 	.word	0x40001000

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <NMI_Handler+0x4>

080021c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <MemManage_Handler+0x4>

080021ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler+0x4>

080021da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <FDCAN2_IT1_IRQHandler+0x10>)
 80021ee:	f000 fc0f 	bl	8002a10 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	240006b8 	.word	0x240006b8

080021fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <TIM6_DAC_IRQHandler+0x10>)
 8002202:	f003 ff45 	bl	8006090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	24000aec 	.word	0x24000aec

08002210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <SystemInit+0xec>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	4a38      	ldr	r2, [pc, #224]	; (80022fc <SystemInit+0xec>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <SystemInit+0xf0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	2b06      	cmp	r3, #6
 800222e:	d807      	bhi.n	8002240 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002230:	4b33      	ldr	r3, [pc, #204]	; (8002300 <SystemInit+0xf0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 030f 	bic.w	r3, r3, #15
 8002238:	4a31      	ldr	r2, [pc, #196]	; (8002300 <SystemInit+0xf0>)
 800223a:	f043 0307 	orr.w	r3, r3, #7
 800223e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <SystemInit+0xf4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <SystemInit+0xf4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <SystemInit+0xf4>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002252:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <SystemInit+0xf4>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	492b      	ldr	r1, [pc, #172]	; (8002304 <SystemInit+0xf4>)
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <SystemInit+0xf8>)
 800225a:	4013      	ands	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800225e:	4b28      	ldr	r3, [pc, #160]	; (8002300 <SystemInit+0xf0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800226a:	4b25      	ldr	r3, [pc, #148]	; (8002300 <SystemInit+0xf0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 030f 	bic.w	r3, r3, #15
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <SystemInit+0xf0>)
 8002274:	f043 0307 	orr.w	r3, r3, #7
 8002278:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <SystemInit+0xf4>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002280:	4b20      	ldr	r3, [pc, #128]	; (8002304 <SystemInit+0xf4>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002286:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <SystemInit+0xf4>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <SystemInit+0xf4>)
 800228e:	4a1f      	ldr	r2, [pc, #124]	; (800230c <SystemInit+0xfc>)
 8002290:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <SystemInit+0xf4>)
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <SystemInit+0x100>)
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <SystemInit+0xf4>)
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <SystemInit+0x104>)
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <SystemInit+0xf4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <SystemInit+0xf4>)
 80022a6:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <SystemInit+0x104>)
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <SystemInit+0xf4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <SystemInit+0xf4>)
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <SystemInit+0x104>)
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <SystemInit+0xf4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <SystemInit+0xf4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <SystemInit+0xf4>)
 80022c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <SystemInit+0xf4>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <SystemInit+0x108>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <SystemInit+0x10c>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022da:	d202      	bcs.n	80022e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <SystemInit+0x110>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <SystemInit+0x114>)
 80022e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SystemInit+0xec>)
 80022ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022f0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	52002000 	.word	0x52002000
 8002304:	58024400 	.word	0x58024400
 8002308:	eaf6ed7f 	.word	0xeaf6ed7f
 800230c:	02020200 	.word	0x02020200
 8002310:	01ff0000 	.word	0x01ff0000
 8002314:	01010280 	.word	0x01010280
 8002318:	5c001000 	.word	0x5c001000
 800231c:	ffff0000 	.word	0xffff0000
 8002320:	51008108 	.word	0x51008108
 8002324:	52004000 	.word	0x52004000

08002328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002360 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800232c:	f7ff ff70 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002330:	480c      	ldr	r0, [pc, #48]	; (8002364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002332:	490d      	ldr	r1, [pc, #52]	; (8002368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002338:	e002      	b.n	8002340 <LoopCopyDataInit>

0800233a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800233c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233e:	3304      	adds	r3, #4

08002340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002344:	d3f9      	bcc.n	800233a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002348:	4c0a      	ldr	r4, [pc, #40]	; (8002374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800234c:	e001      	b.n	8002352 <LoopFillZerobss>

0800234e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002350:	3204      	adds	r2, #4

08002352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002354:	d3fb      	bcc.n	800234e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002356:	f005 fb71 	bl	8007a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235a:	f7ff fb57 	bl	8001a0c <main>
  bx  lr
 800235e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002360:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002364:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002368:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800236c:	08007b94 	.word	0x08007b94
  ldr r2, =_sbss
 8002370:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002374:	24000b3c 	.word	0x24000b3c

08002378 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC3_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002382:	2003      	movs	r0, #3
 8002384:	f000 f933 	bl	80025ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002388:	f002 f830 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_Init+0x68>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	4913      	ldr	r1, [pc, #76]	; (80023e8 <HAL_Init+0x6c>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_Init+0x68>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_Init+0x6c>)
 80023b0:	5cd3      	ldrb	r3, [r2, r3]
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <HAL_Init+0x70>)
 80023be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023c0:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_Init+0x74>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023c6:	200f      	movs	r0, #15
 80023c8:	f7ff fe8c 	bl	80020e4 <HAL_InitTick>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e002      	b.n	80023dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023d6:	f7ff fd2f 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	58024400 	.word	0x58024400
 80023e8:	08007b4c 	.word	0x08007b4c
 80023ec:	24000004 	.word	0x24000004
 80023f0:	24000000 	.word	0x24000000

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x20>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_IncTick+0x24>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	2400000c 	.word	0x2400000c
 8002418:	24000b38 	.word	0x24000b38

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_GetTick+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	24000b38 	.word	0x24000b38

08002434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff ffee 	bl	800241c <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d005      	beq.n	800245a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_Delay+0x44>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245a:	bf00      	nop
 800245c:	f7ff ffde 	bl	800241c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d8f7      	bhi.n	800245c <HAL_Delay+0x28>
  {
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2400000c 	.word	0x2400000c

0800247c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_GetREVID+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0c1b      	lsrs	r3, r3, #16
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	5c001000 	.word	0x5c001000

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <__NVIC_SetPriorityGrouping+0x40>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x40>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00
 80024d8:	05fa0000 	.word	0x05fa0000

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff4c 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002612:	f7ff ff63 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002616:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	6978      	ldr	r0, [r7, #20]
 800261e:	f7ff ffb3 	bl	8002588 <NVIC_EncodePriority>
 8002622:	4602      	mov	r2, r0
 8002624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff82 	bl	8002534 <__NVIC_SetPriority>
}
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff56 	bl	80024f8 <__NVIC_EnableIRQ>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b098      	sub	sp, #96	; 0x60
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800265c:	4a84      	ldr	r2, [pc, #528]	; (8002870 <HAL_FDCAN_Init+0x21c>)
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4611      	mov	r1, r2
 8002664:	224c      	movs	r2, #76	; 0x4c
 8002666:	4618      	mov	r0, r3
 8002668:	f005 fa0c 	bl	8007a84 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e1c6      	b.n	8002a04 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a7e      	ldr	r2, [pc, #504]	; (8002874 <HAL_FDCAN_Init+0x220>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d106      	bne.n	800268e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002688:	461a      	mov	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fbe2 	bl	8001e6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0210 	bic.w	r2, r2, #16
 80026b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b8:	f7ff feb0 	bl	800241c <HAL_GetTick>
 80026bc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80026be:	e014      	b.n	80026ea <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80026c0:	f7ff feac 	bl	800241c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b0a      	cmp	r3, #10
 80026cc:	d90d      	bls.n	80026ea <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2203      	movs	r2, #3
 80026e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e18c      	b.n	8002a04 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d0e3      	beq.n	80026c0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002708:	f7ff fe88 	bl	800241c <HAL_GetTick>
 800270c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800270e:	e014      	b.n	800273a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002710:	f7ff fe84 	bl	800241c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b0a      	cmp	r3, #10
 800271c:	d90d      	bls.n	800273a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e164      	b.n	8002a04 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0e3      	beq.n	8002710 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7c1b      	ldrb	r3, [r3, #16]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d108      	bne.n	8002772 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276e:	619a      	str	r2, [r3, #24]
 8002770:	e007      	b.n	8002782 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002780:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7c5b      	ldrb	r3, [r3, #17]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002798:	619a      	str	r2, [r3, #24]
 800279a:	e007      	b.n	80027ac <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7c9b      	ldrb	r3, [r3, #18]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d108      	bne.n	80027c6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c2:	619a      	str	r2, [r3, #24]
 80027c4:	e007      	b.n	80027d6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027d4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80027fa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0210 	bic.w	r2, r2, #16
 800280a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d108      	bne.n	8002826 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0204 	orr.w	r2, r2, #4
 8002822:	619a      	str	r2, [r3, #24]
 8002824:	e030      	b.n	8002888 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02c      	beq.n	8002888 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d020      	beq.n	8002878 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002844:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0210 	orr.w	r2, r2, #16
 8002854:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d114      	bne.n	8002888 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0220 	orr.w	r2, r2, #32
 800286c:	619a      	str	r2, [r3, #24]
 800286e:	e00b      	b.n	8002888 <HAL_FDCAN_Init+0x234>
 8002870:	08007ae0 	.word	0x08007ae0
 8002874:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0220 	orr.w	r2, r2, #32
 8002886:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	3b01      	subs	r3, #1
 800288e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	3b01      	subs	r3, #1
 8002896:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002898:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80028a0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80028b0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80028b2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028bc:	d115      	bne.n	80028ea <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	3b01      	subs	r3, #1
 80028ca:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80028cc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	3b01      	subs	r3, #1
 80028d4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80028d6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80028e6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80028e8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	4413      	add	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d011      	beq.n	800293a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800291e:	f023 0107 	bic.w	r1, r3, #7
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	3360      	adds	r3, #96	; 0x60
 800292a:	443b      	add	r3, r7
 800292c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d011      	beq.n	8002966 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800294a:	f023 0107 	bic.w	r1, r3, #7
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	3360      	adds	r3, #96	; 0x60
 8002956:	443b      	add	r3, r7
 8002958:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002976:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	3360      	adds	r3, #96	; 0x60
 8002982:	443b      	add	r3, r7
 8002984:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80029a4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	3360      	adds	r3, #96	; 0x60
 80029b0:	443b      	add	r3, r7
 80029b2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a11      	ldr	r2, [pc, #68]	; (8002a0c <HAL_FDCAN_Init+0x3b8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d107      	bne.n	80029dc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f022 0203 	bic.w	r2, r2, #3
 80029da:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fb1f 	bl	8003038 <FDCAN_CalcultateRamBlockAddresses>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002a00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3760      	adds	r7, #96	; 0x60
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	4000a000 	.word	0x4000a000

08002a10 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b092      	sub	sp, #72	; 0x48
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002a18:	4b90      	ldr	r3, [pc, #576]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	079b      	lsls	r3, r3, #30
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002a20:	4b8e      	ldr	r3, [pc, #568]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	079b      	lsls	r3, r3, #30
 8002a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a28:	4013      	ands	r3, r2
 8002a2a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002a36:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a40:	4013      	ands	r3, r2
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a58:	4013      	ands	r3, r2
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a70:	4013      	ands	r3, r2
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a88:	4013      	ands	r3, r2
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d011      	beq.n	8002ad6 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8002aca:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fa65 	bl	8002fa0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01e      	beq.n	8002b22 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b06:	4013      	ands	r3, r2
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b12:	651a      	str	r2, [r3, #80]	; 0x50
 8002b14:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fa16 	bl	8002f4e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_FDCAN_IRQHandler+0x250>)
 8002b30:	400b      	ands	r3, r1
 8002b32:	6513      	str	r3, [r2, #80]	; 0x50
 8002b34:	4a49      	ldr	r2, [pc, #292]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b38:	0f9b      	lsrs	r3, r3, #30
 8002b3a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002b3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f9c4 	bl	8002ecc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b50:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_FDCAN_IRQHandler+0x250>)
 8002b52:	400b      	ands	r3, r1
 8002b54:	6513      	str	r3, [r2, #80]	; 0x50
 8002b56:	4a41      	ldr	r2, [pc, #260]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5a:	0f9b      	lsrs	r3, r3, #30
 8002b5c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002b5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f9be 	bl	8002ee2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b72:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_FDCAN_IRQHandler+0x250>)
 8002b74:	400b      	ands	r3, r1
 8002b76:	6513      	str	r3, [r2, #80]	; 0x50
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b7c:	0f9b      	lsrs	r3, r3, #30
 8002b7e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9b8 	bl	8002ef8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_FDCAN_IRQHandler+0x250>)
 8002b96:	400b      	ands	r3, r1
 8002b98:	6513      	str	r3, [r2, #80]	; 0x50
 8002b9a:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	0f9b      	lsrs	r3, r3, #30
 8002ba0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f9b2 	bl	8002f0e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d011      	beq.n	8002bdc <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bce:	651a      	str	r2, [r3, #80]	; 0x50
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9a4 	bl	8002f24 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01e      	beq.n	8002c28 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d017      	beq.n	8002c28 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c18:	651a      	str	r2, [r3, #80]	; 0x50
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f988 	bl	8002f38 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00f      	beq.n	8002c64 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50
 8002c4e:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_FDCAN_IRQHandler+0x24c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f985 	bl	8002f64 <HAL_FDCAN_RxBufferNewMessageCallback>
 8002c5a:	e003      	b.n	8002c64 <HAL_FDCAN_IRQHandler+0x254>
 8002c5c:	4000a800 	.word	0x4000a800
 8002c60:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
 8002c8a:	4b8d      	ldr	r3, [pc, #564]	; (8002ec0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f971 	bl	8002f78 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d011      	beq.n	8002cc8 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002cba:	651a      	str	r2, [r3, #80]	; 0x50
 8002cbc:	4b80      	ldr	r3, [pc, #512]	; (8002ec0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f962 	bl	8002f8c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cec:	651a      	str	r2, [r3, #80]	; 0x50
 8002cee:	4b74      	ldr	r3, [pc, #464]	; (8002ec0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d10:	4b6c      	ldr	r3, [pc, #432]	; (8002ec4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002d12:	400b      	ands	r3, r1
 8002d14:	6513      	str	r3, [r2, #80]	; 0x50
 8002d16:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	0f9b      	lsrs	r3, r3, #30
 8002d1c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f951 	bl	8002fc8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d011      	beq.n	8002d50 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d32:	4b64      	ldr	r3, [pc, #400]	; (8002ec4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002d34:	400b      	ands	r3, r1
 8002d36:	6513      	str	r3, [r2, #80]	; 0x50
 8002d38:	4a61      	ldr	r2, [pc, #388]	; (8002ec0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	0f9b      	lsrs	r3, r3, #30
 8002d3e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5c      	ldr	r2, [pc, #368]	; (8002ec8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	f040 80a6 	bne.w	8002ea8 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 809e 	beq.w	8002ea8 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	4013      	ands	r3, r2
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d8e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	6a3a      	ldr	r2, [r7, #32]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002da6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002dbe:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002dd6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8f2 	bl	8002fde <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8f2 	bl	8002ff4 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01b      	beq.n	8002e56 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d014      	beq.n	8002e56 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	0c1b      	lsrs	r3, r3, #16
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e42:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2240      	movs	r2, #64	; 0x40
 8002e4a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	6939      	ldr	r1, [r7, #16]
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8da 	bl	800300a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002e64:	69f9      	ldr	r1, [r7, #28]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8db 	bl	8003022 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f87e 	bl	8002fb4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3748      	adds	r7, #72	; 0x48
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	4000a800 	.word	0x4000a800
 8002ec4:	3fcfffff 	.word	0x3fcfffff
 8002ec8:	4000a000 	.word	0x4000a000

08002ecc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800304e:	4ba7      	ldr	r3, [pc, #668]	; (80032ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003050:	4013      	ands	r3, r2
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	0091      	lsls	r1, r2, #2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	430b      	orrs	r3, r1
 800305c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003068:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	4413      	add	r3, r2
 8003084:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800308e:	4b97      	ldr	r3, [pc, #604]	; (80032ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003090:	4013      	ands	r3, r2
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	0091      	lsls	r1, r2, #2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	430b      	orrs	r3, r1
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4413      	add	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030d0:	4b86      	ldr	r3, [pc, #536]	; (80032ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	0091      	lsls	r1, r2, #2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	041a      	lsls	r2, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4413      	add	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003118:	4b74      	ldr	r3, [pc, #464]	; (80032ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800311a:	4013      	ands	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	0091      	lsls	r1, r2, #2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003132:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313a:	041a      	lsls	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4413      	add	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003160:	4b62      	ldr	r3, [pc, #392]	; (80032ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003162:	4013      	ands	r3, r2
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	0091      	lsls	r1, r2, #2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	430b      	orrs	r3, r1
 800316e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	4413      	add	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800318c:	4b57      	ldr	r3, [pc, #348]	; (80032ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800318e:	4013      	ands	r3, r2
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	0091      	lsls	r1, r2, #2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	430b      	orrs	r3, r1
 800319a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031a6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	041a      	lsls	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4413      	add	r3, r2
 80031c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	0091      	lsls	r1, r2, #2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	430b      	orrs	r3, r1
 80031dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031e8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003204:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	061a      	lsls	r2, r3, #24
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321c:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800321e:	4413      	add	r3, r2
 8003220:	009a      	lsls	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d915      	bls.n	8003314 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80032e8:	e006      	b.n	80032f8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80032ea:	bf00      	nop
 80032ec:	ffff0003 	.word	0xffff0003
 80032f0:	10002b00 	.word	0x10002b00
 80032f4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e010      	b.n	8003336 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e005      	b.n	8003328 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3304      	adds	r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d3f3      	bcc.n	800331c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <HAL_GPIO_Init+0x234>)
 8003354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003356:	e194      	b.n	8003682 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8186 	beq.w	800367c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d00b      	beq.n	8003390 <HAL_GPIO_Init+0x4c>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d007      	beq.n	8003390 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003384:	2b11      	cmp	r3, #17
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b12      	cmp	r3, #18
 800338e:	d130      	bne.n	80033f2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033c6:	2201      	movs	r2, #1
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0201 	and.w	r2, r3, #1
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0xee>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b12      	cmp	r3, #18
 8003430:	d123      	bne.n	800347a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	08da      	lsrs	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	220f      	movs	r2, #15
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	08da      	lsrs	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3208      	adds	r2, #8
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	2203      	movs	r2, #3
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0203 	and.w	r2, r3, #3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80e0 	beq.w	800367c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034bc:	4b2f      	ldr	r3, [pc, #188]	; (800357c <HAL_GPIO_Init+0x238>)
 80034be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034c2:	4a2e      	ldr	r2, [pc, #184]	; (800357c <HAL_GPIO_Init+0x238>)
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_GPIO_Init+0x238>)
 80034ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034da:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_GPIO_Init+0x23c>)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <HAL_GPIO_Init+0x240>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d052      	beq.n	80035ac <HAL_GPIO_Init+0x268>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <HAL_GPIO_Init+0x244>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d031      	beq.n	8003572 <HAL_GPIO_Init+0x22e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1e      	ldr	r2, [pc, #120]	; (800358c <HAL_GPIO_Init+0x248>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d02b      	beq.n	800356e <HAL_GPIO_Init+0x22a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <HAL_GPIO_Init+0x24c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d025      	beq.n	800356a <HAL_GPIO_Init+0x226>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_GPIO_Init+0x250>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01f      	beq.n	8003566 <HAL_GPIO_Init+0x222>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_GPIO_Init+0x254>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d019      	beq.n	8003562 <HAL_GPIO_Init+0x21e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1a      	ldr	r2, [pc, #104]	; (800359c <HAL_GPIO_Init+0x258>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_GPIO_Init+0x21a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <HAL_GPIO_Init+0x25c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00d      	beq.n	800355a <HAL_GPIO_Init+0x216>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_GPIO_Init+0x260>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <HAL_GPIO_Init+0x212>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <HAL_GPIO_Init+0x264>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_GPIO_Init+0x20e>
 800354e:	2309      	movs	r3, #9
 8003550:	e02d      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 8003552:	230a      	movs	r3, #10
 8003554:	e02b      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 8003556:	2308      	movs	r3, #8
 8003558:	e029      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 800355a:	2307      	movs	r3, #7
 800355c:	e027      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 800355e:	2306      	movs	r3, #6
 8003560:	e025      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 8003562:	2305      	movs	r3, #5
 8003564:	e023      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 8003566:	2304      	movs	r3, #4
 8003568:	e021      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 800356a:	2303      	movs	r3, #3
 800356c:	e01f      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 800356e:	2302      	movs	r3, #2
 8003570:	e01d      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 8003572:	2301      	movs	r3, #1
 8003574:	e01b      	b.n	80035ae <HAL_GPIO_Init+0x26a>
 8003576:	bf00      	nop
 8003578:	58000080 	.word	0x58000080
 800357c:	58024400 	.word	0x58024400
 8003580:	58000400 	.word	0x58000400
 8003584:	58020000 	.word	0x58020000
 8003588:	58020400 	.word	0x58020400
 800358c:	58020800 	.word	0x58020800
 8003590:	58020c00 	.word	0x58020c00
 8003594:	58021000 	.word	0x58021000
 8003598:	58021400 	.word	0x58021400
 800359c:	58021800 	.word	0x58021800
 80035a0:	58021c00 	.word	0x58021c00
 80035a4:	58022000 	.word	0x58022000
 80035a8:	58022400 	.word	0x58022400
 80035ac:	2300      	movs	r3, #0
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	f002 0203 	and.w	r2, r2, #3
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	4093      	lsls	r3, r2
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035be:	4938      	ldr	r1, [pc, #224]	; (80036a0 <HAL_GPIO_Init+0x35c>)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	f47f ae63 	bne.w	8003358 <HAL_GPIO_Init+0x14>
  }
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	3724      	adds	r7, #36	; 0x24
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	58000400 	.word	0x58000400

080036a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	4613      	mov	r3, r2
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80036c0:	e003      	b.n	80036ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036e8:	887a      	ldrh	r2, [r7, #2]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	041a      	lsls	r2, r3, #16
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43d9      	mvns	r1, r3
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	400b      	ands	r3, r1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	619a      	str	r2, [r3, #24]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800370a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370c:	b08f      	sub	sp, #60	; 0x3c
 800370e:	af0a      	add	r7, sp, #40	; 0x28
 8003710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e054      	b.n	80037c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe fc6a 	bl	8002010 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2203      	movs	r2, #3
 8003740:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f003 ffc6 	bl	80076ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	687e      	ldr	r6, [r7, #4]
 8003768:	466d      	mov	r5, sp
 800376a:	f106 0410 	add.w	r4, r6, #16
 800376e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800377a:	e885 0003 	stmia.w	r5, {r0, r1}
 800377e:	1d33      	adds	r3, r6, #4
 8003780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003782:	6838      	ldr	r0, [r7, #0]
 8003784:	f003 ff44 	bl	8007610 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2101      	movs	r1, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f003 ffbd 	bl	800770e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	687e      	ldr	r6, [r7, #4]
 800379c:	466d      	mov	r5, sp
 800379e:	f106 0410 	add.w	r4, r6, #16
 80037a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80037b2:	1d33      	adds	r3, r6, #4
 80037b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f004 f850 	bl	800785c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_PWREx_ConfigSupply+0x70>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d00a      	beq.n	80037fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037e4:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_PWREx_ConfigSupply+0x70>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d001      	beq.n	80037f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e01f      	b.n	8003836 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e01d      	b.n	8003836 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_PWREx_ConfigSupply+0x70>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f023 0207 	bic.w	r2, r3, #7
 8003802:	490f      	ldr	r1, [pc, #60]	; (8003840 <HAL_PWREx_ConfigSupply+0x70>)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4313      	orrs	r3, r2
 8003808:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800380a:	f7fe fe07 	bl	800241c <HAL_GetTick>
 800380e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003810:	e009      	b.n	8003826 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003812:	f7fe fe03 	bl	800241c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003820:	d901      	bls.n	8003826 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e007      	b.n	8003836 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_PWREx_ConfigSupply+0x70>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003832:	d1ee      	bne.n	8003812 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	58024800 	.word	0x58024800

08003844 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003852:	60d3      	str	r3, [r2, #12]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	58024800 	.word	0x58024800

08003864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	; 0x30
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e3fd      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8087 	beq.w	8003992 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003884:	4b99      	ldr	r3, [pc, #612]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800388e:	4b97      	ldr	r3, [pc, #604]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003896:	2b10      	cmp	r3, #16
 8003898:	d007      	beq.n	80038aa <HAL_RCC_OscConfig+0x46>
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	2b18      	cmp	r3, #24
 800389e:	d110      	bne.n	80038c2 <HAL_RCC_OscConfig+0x5e>
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d10b      	bne.n	80038c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038aa:	4b90      	ldr	r3, [pc, #576]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d06c      	beq.n	8003990 <HAL_RCC_OscConfig+0x12c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d168      	bne.n	8003990 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e3d7      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x76>
 80038cc:	4b87      	ldr	r3, [pc, #540]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a86      	ldr	r2, [pc, #536]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80038d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e02e      	b.n	8003938 <HAL_RCC_OscConfig+0xd4>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x98>
 80038e2:	4b82      	ldr	r3, [pc, #520]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a81      	ldr	r2, [pc, #516]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80038e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b7f      	ldr	r3, [pc, #508]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7e      	ldr	r2, [pc, #504]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80038f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e01d      	b.n	8003938 <HAL_RCC_OscConfig+0xd4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0xbc>
 8003906:	4b79      	ldr	r3, [pc, #484]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a78      	ldr	r2, [pc, #480]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a75      	ldr	r2, [pc, #468]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0xd4>
 8003920:	4b72      	ldr	r3, [pc, #456]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a71      	ldr	r2, [pc, #452]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b6f      	ldr	r3, [pc, #444]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a6e      	ldr	r2, [pc, #440]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe fd6c 	bl	800241c <HAL_GetTick>
 8003944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003948:	f7fe fd68 	bl	800241c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e38b      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800395a:	4b64      	ldr	r3, [pc, #400]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0xe4>
 8003966:	e014      	b.n	8003992 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe fd58 	bl	800241c <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe fd54 	bl	800241c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e377      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003982:	4b5a      	ldr	r3, [pc, #360]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x10c>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80ae 	beq.w	8003afc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a0:	4b52      	ldr	r3, [pc, #328]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039aa:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_RCC_OscConfig+0x162>
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2b18      	cmp	r3, #24
 80039ba:	d13a      	bne.n	8003a32 <HAL_RCC_OscConfig+0x1ce>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d135      	bne.n	8003a32 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c6:	4b49      	ldr	r3, [pc, #292]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x17a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e349      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	f7fe fd4d 	bl	800247c <HAL_GetREVID>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d817      	bhi.n	8003a1c <HAL_RCC_OscConfig+0x1b8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d108      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1a2>
 80039f4:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039fc:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a04:	e07a      	b.n	8003afc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	031b      	lsls	r3, r3, #12
 8003a14:	4935      	ldr	r1, [pc, #212]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a1a:	e06f      	b.n	8003afc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b33      	ldr	r3, [pc, #204]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	4930      	ldr	r1, [pc, #192]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	e064      	b.n	8003afc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d045      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a3a:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0219 	bic.w	r2, r3, #25
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4929      	ldr	r1, [pc, #164]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fce6 	bl	800241c <HAL_GetTick>
 8003a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fe fce2 	bl	800241c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e305      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a72:	f7fe fd03 	bl	800247c <HAL_GetREVID>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d817      	bhi.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d108      	bne.n	8003a9a <HAL_RCC_OscConfig+0x236>
 8003a88:	4b18      	ldr	r3, [pc, #96]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a90:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a96:	6053      	str	r3, [r2, #4]
 8003a98:	e030      	b.n	8003afc <HAL_RCC_OscConfig+0x298>
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	031b      	lsls	r3, r3, #12
 8003aa8:	4910      	ldr	r1, [pc, #64]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	604b      	str	r3, [r1, #4]
 8003aae:	e025      	b.n	8003afc <HAL_RCC_OscConfig+0x298>
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	490b      	ldr	r1, [pc, #44]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	e01a      	b.n	8003afc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a08      	ldr	r2, [pc, #32]	; (8003aec <HAL_RCC_OscConfig+0x288>)
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fca3 	bl	800241c <HAL_GetTick>
 8003ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fe fc9f 	bl	800241c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d903      	bls.n	8003af0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e2c2      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
 8003aec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003af0:	4b94      	ldr	r3, [pc, #592]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ee      	bne.n	8003ada <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a9 	beq.w	8003c5c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0a:	4b8e      	ldr	r3, [pc, #568]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b14:	4b8b      	ldr	r3, [pc, #556]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d007      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2cc>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b18      	cmp	r3, #24
 8003b24:	d13a      	bne.n	8003b9c <HAL_RCC_OscConfig+0x338>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d135      	bne.n	8003b9c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b30:	4b84      	ldr	r3, [pc, #528]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_OscConfig+0x2e4>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e294      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b48:	f7fe fc98 	bl	800247c <HAL_GetREVID>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d817      	bhi.n	8003b86 <HAL_RCC_OscConfig+0x322>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d108      	bne.n	8003b70 <HAL_RCC_OscConfig+0x30c>
 8003b5e:	4b79      	ldr	r3, [pc, #484]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b66:	4a77      	ldr	r2, [pc, #476]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b6e:	e075      	b.n	8003c5c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b70:	4b74      	ldr	r3, [pc, #464]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	069b      	lsls	r3, r3, #26
 8003b7e:	4971      	ldr	r1, [pc, #452]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b84:	e06a      	b.n	8003c5c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b86:	4b6f      	ldr	r3, [pc, #444]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	496b      	ldr	r1, [pc, #428]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b9a:	e05f      	b.n	8003c5c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d042      	beq.n	8003c2a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ba4:	4b67      	ldr	r3, [pc, #412]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a66      	ldr	r2, [pc, #408]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fc34 	bl	800241c <HAL_GetTick>
 8003bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fc30 	bl	800241c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e253      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bca:	4b5e      	ldr	r3, [pc, #376]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bd6:	f7fe fc51 	bl	800247c <HAL_GetREVID>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d817      	bhi.n	8003c14 <HAL_RCC_OscConfig+0x3b0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d108      	bne.n	8003bfe <HAL_RCC_OscConfig+0x39a>
 8003bec:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bf4:	4a53      	ldr	r2, [pc, #332]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bfa:	6053      	str	r3, [r2, #4]
 8003bfc:	e02e      	b.n	8003c5c <HAL_RCC_OscConfig+0x3f8>
 8003bfe:	4b51      	ldr	r3, [pc, #324]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	069b      	lsls	r3, r3, #26
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
 8003c12:	e023      	b.n	8003c5c <HAL_RCC_OscConfig+0x3f8>
 8003c14:	4b4b      	ldr	r3, [pc, #300]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	4948      	ldr	r1, [pc, #288]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60cb      	str	r3, [r1, #12]
 8003c28:	e018      	b.n	8003c5c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c2a:	4b46      	ldr	r3, [pc, #280]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a45      	ldr	r2, [pc, #276]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fe fbf1 	bl	800241c <HAL_GetTick>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fbed 	bl	800241c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e210      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c50:	4b3c      	ldr	r3, [pc, #240]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d036      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d019      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c70:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	4a33      	ldr	r2, [pc, #204]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fe fbce 	bl	800241c <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fe fbca 	bl	800241c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1ed      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x420>
 8003ca2:	e018      	b.n	8003cd6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca4:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fe fbb4 	bl	800241c <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fe fbb0 	bl	800241c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1d3      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cca:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d038      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d019      	beq.n	8003d1e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cf6:	f7fe fb91 	bl	800241c <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cfe:	f7fe fb8d 	bl	800241c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1b0      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x49a>
 8003d1c:	e01a      	b.n	8003d54 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_RCC_OscConfig+0x4e0>)
 8003d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe fb77 	bl	800241c <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d32:	f7fe fb73 	bl	800241c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d903      	bls.n	8003d48 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e196      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
 8003d44:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d48:	4b99      	ldr	r3, [pc, #612]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ee      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8081 	beq.w	8003e64 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d62:	4b94      	ldr	r3, [pc, #592]	; (8003fb4 <HAL_RCC_OscConfig+0x750>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a93      	ldr	r2, [pc, #588]	; (8003fb4 <HAL_RCC_OscConfig+0x750>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d6e:	f7fe fb55 	bl	800241c <HAL_GetTick>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fe fb51 	bl	800241c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b64      	cmp	r3, #100	; 0x64
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e174      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d88:	4b8a      	ldr	r3, [pc, #552]	; (8003fb4 <HAL_RCC_OscConfig+0x750>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d106      	bne.n	8003daa <HAL_RCC_OscConfig+0x546>
 8003d9c:	4b84      	ldr	r3, [pc, #528]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a83      	ldr	r2, [pc, #524]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	e02d      	b.n	8003e06 <HAL_RCC_OscConfig+0x5a2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x568>
 8003db2:	4b7f      	ldr	r3, [pc, #508]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a7e      	ldr	r2, [pc, #504]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbe:	4b7c      	ldr	r3, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a7b      	ldr	r2, [pc, #492]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dca:	e01c      	b.n	8003e06 <HAL_RCC_OscConfig+0x5a2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCC_OscConfig+0x58a>
 8003dd4:	4b76      	ldr	r3, [pc, #472]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a75      	ldr	r2, [pc, #468]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	4b73      	ldr	r3, [pc, #460]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a72      	ldr	r2, [pc, #456]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	e00b      	b.n	8003e06 <HAL_RCC_OscConfig+0x5a2>
 8003dee:	4b70      	ldr	r3, [pc, #448]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a6f      	ldr	r2, [pc, #444]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a6c      	ldr	r2, [pc, #432]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d015      	beq.n	8003e3a <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fb05 	bl	800241c <HAL_GetTick>
 8003e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fe fb01 	bl	800241c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e122      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e2c:	4b60      	ldr	r3, [pc, #384]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ee      	beq.n	8003e16 <HAL_RCC_OscConfig+0x5b2>
 8003e38:	e014      	b.n	8003e64 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fe faef 	bl	800241c <HAL_GetTick>
 8003e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fe faeb 	bl	800241c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e10c      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e58:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ee      	bne.n	8003e42 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8101 	beq.w	8004070 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e6e:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e76:	2b18      	cmp	r3, #24
 8003e78:	f000 80bc 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	f040 809d 	bne.w	8003fc0 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a49      	ldr	r2, [pc, #292]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fe fac3 	bl	800241c <HAL_GetTick>
 8003e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fe fabf 	bl	800241c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0e2      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eac:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ebc:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <HAL_RCC_OscConfig+0x754>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ec8:	0112      	lsls	r2, r2, #4
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	4938      	ldr	r1, [pc, #224]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	628b      	str	r3, [r1, #40]	; 0x28
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	025b      	lsls	r3, r3, #9
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	3b01      	subs	r3, #1
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	3b01      	subs	r3, #1
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f02:	492b      	ldr	r1, [pc, #172]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f08:	4b29      	ldr	r3, [pc, #164]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	4a28      	ldr	r2, [pc, #160]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f14:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f18:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_RCC_OscConfig+0x758>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f20:	00d2      	lsls	r2, r2, #3
 8003f22:	4923      	ldr	r1, [pc, #140]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	f023 020c 	bic.w	r2, r3, #12
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	491e      	ldr	r1, [pc, #120]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f023 0202 	bic.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	491a      	ldr	r1, [pc, #104]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f70:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0b      	ldr	r2, [pc, #44]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe fa48 	bl	800241c <HAL_GetTick>
 8003f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe fa44 	bl	800241c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e067      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fa2:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <HAL_RCC_OscConfig+0x74c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x72c>
 8003fae:	e05f      	b.n	8004070 <HAL_RCC_OscConfig+0x80c>
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	58024800 	.word	0x58024800
 8003fb8:	fffffc0c 	.word	0xfffffc0c
 8003fbc:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <HAL_RCC_OscConfig+0x818>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	; (800407c <HAL_RCC_OscConfig+0x818>)
 8003fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fa26 	bl	800241c <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fe fa22 	bl	800241c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e045      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe6:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_OscConfig+0x818>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x770>
 8003ff2:	e03d      	b.n	8004070 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_RCC_OscConfig+0x818>)
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_OscConfig+0x818>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	2b01      	cmp	r3, #1
 8004006:	d031      	beq.n	800406c <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f003 0203 	and.w	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d12a      	bne.n	800406c <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d122      	bne.n	800406c <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d11a      	bne.n	800406c <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	0a5b      	lsrs	r3, r3, #9
 800403a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d108      	bne.n	800406c <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0e1b      	lsrs	r3, r3, #24
 800405e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3730      	adds	r7, #48	; 0x30
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	58024400 	.word	0x58024400

08004080 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e19c      	b.n	80043ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b8a      	ldr	r3, [pc, #552]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d910      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b87      	ldr	r3, [pc, #540]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 020f 	bic.w	r2, r3, #15
 80040aa:	4985      	ldr	r1, [pc, #532]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b83      	ldr	r3, [pc, #524]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e184      	b.n	80043ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d010      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	4b7b      	ldr	r3, [pc, #492]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040dc:	429a      	cmp	r2, r3
 80040de:	d908      	bls.n	80040f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040e0:	4b78      	ldr	r3, [pc, #480]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	4975      	ldr	r1, [pc, #468]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d010      	beq.n	8004120 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	4b70      	ldr	r3, [pc, #448]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800410a:	429a      	cmp	r2, r3
 800410c:	d908      	bls.n	8004120 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800410e:	4b6d      	ldr	r3, [pc, #436]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	496a      	ldr	r1, [pc, #424]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 800411c:	4313      	orrs	r3, r2
 800411e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	4b64      	ldr	r3, [pc, #400]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004138:	429a      	cmp	r2, r3
 800413a:	d908      	bls.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800413c:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	495e      	ldr	r1, [pc, #376]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 800414a:	4313      	orrs	r3, r2
 800414c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004166:	429a      	cmp	r2, r3
 8004168:	d908      	bls.n	800417c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800416a:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4953      	ldr	r1, [pc, #332]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004178:	4313      	orrs	r3, r2
 800417a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	4b4d      	ldr	r3, [pc, #308]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	429a      	cmp	r2, r3
 8004196:	d908      	bls.n	80041aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f023 020f 	bic.w	r2, r3, #15
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4947      	ldr	r1, [pc, #284]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d055      	beq.n	8004262 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041b6:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4940      	ldr	r1, [pc, #256]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041d0:	4b3c      	ldr	r3, [pc, #240]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d121      	bne.n	8004220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0f6      	b.n	80043ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e8:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d115      	bne.n	8004220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0ea      	b.n	80043ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004200:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0de      	b.n	80043ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004210:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0d6      	b.n	80043ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f023 0207 	bic.w	r2, r3, #7
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4925      	ldr	r1, [pc, #148]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 800422e:	4313      	orrs	r3, r2
 8004230:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fe f8f3 	bl	800241c <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004238:	e00a      	b.n	8004250 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423a:	f7fe f8ef 	bl	800241c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f241 3288 	movw	r2, #5000	; 0x1388
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e0be      	b.n	80043ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	429a      	cmp	r2, r3
 8004260:	d1eb      	bne.n	800423a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d010      	beq.n	8004290 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	429a      	cmp	r2, r3
 800427c:	d208      	bcs.n	8004290 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f023 020f 	bic.w	r2, r3, #15
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	490e      	ldr	r1, [pc, #56]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 800428c:	4313      	orrs	r3, r2
 800428e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d214      	bcs.n	80042c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 020f 	bic.w	r2, r3, #15
 80042a6:	4906      	ldr	r1, [pc, #24]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e086      	b.n	80043ce <HAL_RCC_ClockConfig+0x34e>
 80042c0:	52002000 	.word	0x52002000
 80042c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d010      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d208      	bcs.n	80042f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042e4:	4b3c      	ldr	r3, [pc, #240]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	4939      	ldr	r1, [pc, #228]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800430e:	429a      	cmp	r2, r3
 8004310:	d208      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004312:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	492e      	ldr	r1, [pc, #184]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 8004320:	4313      	orrs	r3, r2
 8004322:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699a      	ldr	r2, [r3, #24]
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800433c:	429a      	cmp	r2, r3
 800433e:	d208      	bcs.n	8004352 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	4922      	ldr	r1, [pc, #136]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 800434e:	4313      	orrs	r3, r2
 8004350:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d010      	beq.n	8004380 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436a:	429a      	cmp	r2, r3
 800436c:	d208      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800436e:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	4917      	ldr	r1, [pc, #92]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 800437c:	4313      	orrs	r3, r2
 800437e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004380:	f000 f834 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 8004384:	4602      	mov	r2, r0
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	4912      	ldr	r1, [pc, #72]	; (80043dc <HAL_RCC_ClockConfig+0x35c>)
 8004392:	5ccb      	ldrb	r3, [r1, r3]
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
 800439c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <HAL_RCC_ClockConfig+0x358>)
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <HAL_RCC_ClockConfig+0x35c>)
 80043a8:	5cd3      	ldrb	r3, [r2, r3]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
 80043b4:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <HAL_RCC_ClockConfig+0x360>)
 80043b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043b8:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <HAL_RCC_ClockConfig+0x364>)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <HAL_RCC_ClockConfig+0x368>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fd fe8e 	bl	80020e4 <HAL_InitTick>
 80043c8:	4603      	mov	r3, r0
 80043ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	58024400 	.word	0x58024400
 80043dc:	08007b4c 	.word	0x08007b4c
 80043e0:	24000004 	.word	0x24000004
 80043e4:	24000000 	.word	0x24000000
 80043e8:	24000008 	.word	0x24000008

080043ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b089      	sub	sp, #36	; 0x24
 80043f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f2:	4bb3      	ldr	r3, [pc, #716]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043fa:	2b18      	cmp	r3, #24
 80043fc:	f200 8155 	bhi.w	80046aa <HAL_RCC_GetSysClockFreq+0x2be>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800446d 	.word	0x0800446d
 800440c:	080046ab 	.word	0x080046ab
 8004410:	080046ab 	.word	0x080046ab
 8004414:	080046ab 	.word	0x080046ab
 8004418:	080046ab 	.word	0x080046ab
 800441c:	080046ab 	.word	0x080046ab
 8004420:	080046ab 	.word	0x080046ab
 8004424:	080046ab 	.word	0x080046ab
 8004428:	08004493 	.word	0x08004493
 800442c:	080046ab 	.word	0x080046ab
 8004430:	080046ab 	.word	0x080046ab
 8004434:	080046ab 	.word	0x080046ab
 8004438:	080046ab 	.word	0x080046ab
 800443c:	080046ab 	.word	0x080046ab
 8004440:	080046ab 	.word	0x080046ab
 8004444:	080046ab 	.word	0x080046ab
 8004448:	08004499 	.word	0x08004499
 800444c:	080046ab 	.word	0x080046ab
 8004450:	080046ab 	.word	0x080046ab
 8004454:	080046ab 	.word	0x080046ab
 8004458:	080046ab 	.word	0x080046ab
 800445c:	080046ab 	.word	0x080046ab
 8004460:	080046ab 	.word	0x080046ab
 8004464:	080046ab 	.word	0x080046ab
 8004468:	0800449f 	.word	0x0800449f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800446c:	4b94      	ldr	r3, [pc, #592]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004478:	4b91      	ldr	r3, [pc, #580]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	08db      	lsrs	r3, r3, #3
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	4a90      	ldr	r2, [pc, #576]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800448a:	e111      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800448c:	4b8d      	ldr	r3, [pc, #564]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800448e:	61bb      	str	r3, [r7, #24]
    break;
 8004490:	e10e      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004492:	4b8d      	ldr	r3, [pc, #564]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004494:	61bb      	str	r3, [r7, #24]
    break;
 8004496:	e10b      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004498:	4b8c      	ldr	r3, [pc, #560]	; (80046cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800449a:	61bb      	str	r3, [r7, #24]
    break;
 800449c:	e108      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800449e:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80044a8:	4b85      	ldr	r3, [pc, #532]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044b4:	4b82      	ldr	r3, [pc, #520]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80044be:	4b80      	ldr	r3, [pc, #512]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	08db      	lsrs	r3, r3, #3
 80044c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80e1 	beq.w	80046a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f000 8083 	beq.w	80045f0 <HAL_RCC_GetSysClockFreq+0x204>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	f200 80a1 	bhi.w	8004634 <HAL_RCC_GetSysClockFreq+0x248>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0x114>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d056      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80044fe:	e099      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004500:	4b6f      	ldr	r3, [pc, #444]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d02d      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800450c:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	4a6b      	ldr	r2, [pc, #428]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
 800451c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004536:	4b62      	ldr	r3, [pc, #392]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004546:	ed97 6a02 	vldr	s12, [r7, #8]
 800454a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800454e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004566:	e087      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457a:	4b51      	ldr	r3, [pc, #324]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458a:	ed97 6a02 	vldr	s12, [r7, #8]
 800458e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045aa:	e065      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045be:	4b40      	ldr	r3, [pc, #256]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ee:	e043      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80045fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004602:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004612:	ed97 6a02 	vldr	s12, [r7, #8]
 8004616:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800461a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004632:	e021      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a02 	vldr	s12, [r7, #8]
 800465a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004676:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	0a5b      	lsrs	r3, r3, #9
 800467e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004682:	3301      	adds	r3, #1
 8004684:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	ee07 3a90 	vmov	s15, r3
 800468c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004690:	edd7 6a07 	vldr	s13, [r7, #28]
 8004694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469c:	ee17 3a90 	vmov	r3, s15
 80046a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80046a2:	e005      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
    break;
 80046a8:	e002      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046ac:	61bb      	str	r3, [r7, #24]
    break;
 80046ae:	bf00      	nop
  }

  return sysclockfreq;
 80046b0:	69bb      	ldr	r3, [r7, #24]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	003d0900 	.word	0x003d0900
 80046cc:	007a1200 	.word	0x007a1200
 80046d0:	46000000 	.word	0x46000000
 80046d4:	4c742400 	.word	0x4c742400
 80046d8:	4a742400 	.word	0x4a742400
 80046dc:	4af42400 	.word	0x4af42400

080046e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046e6:	f7ff fe81 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCC_GetHCLKFreq+0x50>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	0a1b      	lsrs	r3, r3, #8
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	490f      	ldr	r1, [pc, #60]	; (8004734 <HAL_RCC_GetHCLKFreq+0x54>)
 80046f8:	5ccb      	ldrb	r3, [r1, r3]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <HAL_RCC_GetHCLKFreq+0x50>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	4a09      	ldr	r2, [pc, #36]	; (8004734 <HAL_RCC_GetHCLKFreq+0x54>)
 800470e:	5cd3      	ldrb	r3, [r2, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	fa22 f303 	lsr.w	r3, r2, r3
 800471a:	4a07      	ldr	r2, [pc, #28]	; (8004738 <HAL_RCC_GetHCLKFreq+0x58>)
 800471c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800471e:	4a07      	ldr	r2, [pc, #28]	; (800473c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCC_GetHCLKFreq+0x58>)
 8004726:	681b      	ldr	r3, [r3, #0]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	58024400 	.word	0x58024400
 8004734:	08007b4c 	.word	0x08007b4c
 8004738:	24000004 	.word	0x24000004
 800473c:	24000000 	.word	0x24000000

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004744:	f7ff ffcc 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4904      	ldr	r1, [pc, #16]	; (8004768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	58024400 	.word	0x58024400
 8004768:	08007b4c 	.word	0x08007b4c

0800476c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004770:	f7ff ffb6 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004774:	4602      	mov	r2, r0
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	4904      	ldr	r1, [pc, #16]	; (8004794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004782:	5ccb      	ldrb	r3, [r1, r3]
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd80      	pop	{r7, pc}
 8004790:	58024400 	.word	0x58024400
 8004794:	08007b4c 	.word	0x08007b4c

08004798 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	223f      	movs	r2, #63	; 0x3f
 80047a6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <HAL_RCC_GetClockConfig+0x7c>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0207 	and.w	r2, r3, #7
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <HAL_RCC_GetClockConfig+0x7c>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80047c0:	4b14      	ldr	r3, [pc, #80]	; (8004814 <HAL_RCC_GetClockConfig+0x7c>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f003 020f 	and.w	r2, r3, #15
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_RCC_GetClockConfig+0x7c>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <HAL_RCC_GetClockConfig+0x7c>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_GetClockConfig+0x7c>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_RCC_GetClockConfig+0x7c>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCC_GetClockConfig+0x80>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	601a      	str	r2, [r3, #0]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	58024400 	.word	0x58024400
 8004818:	52002000 	.word	0x52002000

0800481c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004824:	2300      	movs	r3, #0
 8004826:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004828:	2300      	movs	r3, #0
 800482a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d03f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800483c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004840:	d02a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004846:	d824      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800484c:	d018      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800484e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004852:	d81e      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485c:	d007      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800485e:	e018      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004860:	4ba3      	ldr	r3, [pc, #652]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	4aa2      	ldr	r2, [pc, #648]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800486c:	e015      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	2102      	movs	r1, #2
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f9d5 	bl	8005c24 <RCCEx_PLL2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800487e:	e00c      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3324      	adds	r3, #36	; 0x24
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fa7e 	bl	8005d88 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004890:	e003      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	75fb      	strb	r3, [r7, #23]
      break;
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048a0:	4b93      	ldr	r3, [pc, #588]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ac:	4990      	ldr	r1, [pc, #576]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	650b      	str	r3, [r1, #80]	; 0x50
 80048b2:	e001      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d03d      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d826      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048e9 	.word	0x080048e9
 80048d8:	080048f7 	.word	0x080048f7
 80048dc:	08004909 	.word	0x08004909
 80048e0:	08004921 	.word	0x08004921
 80048e4:	08004921 	.word	0x08004921
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e8:	4b81      	ldr	r3, [pc, #516]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4a80      	ldr	r2, [pc, #512]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048f4:	e015      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3304      	adds	r3, #4
 80048fa:	2100      	movs	r1, #0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 f991 	bl	8005c24 <RCCEx_PLL2_Config>
 8004902:	4603      	mov	r3, r0
 8004904:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004906:	e00c      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3324      	adds	r3, #36	; 0x24
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fa3a 	bl	8005d88 <RCCEx_PLL3_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004918:	e003      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	75fb      	strb	r3, [r7, #23]
      break;
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004928:	4b71      	ldr	r3, [pc, #452]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800492a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492c:	f023 0207 	bic.w	r2, r3, #7
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	496e      	ldr	r1, [pc, #440]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004936:	4313      	orrs	r3, r2
 8004938:	650b      	str	r3, [r1, #80]	; 0x50
 800493a:	e001      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004948:	2b00      	cmp	r3, #0
 800494a:	d042      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004954:	d02b      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495a:	d825      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800495c:	2bc0      	cmp	r3, #192	; 0xc0
 800495e:	d028      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004960:	2bc0      	cmp	r3, #192	; 0xc0
 8004962:	d821      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d016      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d81d      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d007      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004974:	e018      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004976:	4b5e      	ldr	r3, [pc, #376]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	4a5d      	ldr	r2, [pc, #372]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800497c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004980:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004982:	e017      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f001 f94a 	bl	8005c24 <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004994:	e00e      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3324      	adds	r3, #36	; 0x24
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f001 f9f3 	bl	8005d88 <RCCEx_PLL3_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049a6:	e005      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	75fb      	strb	r3, [r7, #23]
      break;
 80049ac:	e002      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80049b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049ba:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	494a      	ldr	r1, [pc, #296]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	650b      	str	r3, [r1, #80]	; 0x50
 80049cc:	e001      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d049      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e8:	d030      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80049ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ee:	d82a      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049f4:	d02c      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80049f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049fa:	d824      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a00:	d018      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a06:	d81e      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a10:	d007      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a12:	e018      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a14:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a20:	e017      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3304      	adds	r3, #4
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 f8fb 	bl	8005c24 <RCCEx_PLL2_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a32:	e00e      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 f9a4 	bl	8005d88 <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a44:	e005      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4a:	e002      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a4c:	bf00      	nop
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a66:	4922      	ldr	r1, [pc, #136]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	658b      	str	r3, [r1, #88]	; 0x58
 8004a6c:	e001      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d04b      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a88:	d030      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a8e:	d82a      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a94:	d02e      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004a96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a9a:	d824      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aa0:	d018      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004aa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aa6:	d81e      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab0:	d007      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ab2:	e018      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	4a0d      	ldr	r2, [pc, #52]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ac0:	e019      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 f8ab 	bl	8005c24 <RCCEx_PLL2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ad2:	e010      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3324      	adds	r3, #36	; 0x24
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 f954 	bl	8005d88 <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ae4:	e007      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aea:	e004      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004aec:	bf00      	nop
 8004aee:	e002      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004af0:	58024400 	.word	0x58024400
      break;
 8004af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004afc:	4b99      	ldr	r3, [pc, #612]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b00:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b0a:	4996      	ldr	r1, [pc, #600]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	658b      	str	r3, [r1, #88]	; 0x58
 8004b10:	e001      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d032      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	2b30      	cmp	r3, #48	; 0x30
 8004b28:	d01c      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004b2a:	2b30      	cmp	r3, #48	; 0x30
 8004b2c:	d817      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d00c      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d813      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d10f      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3e:	4b89      	ldr	r3, [pc, #548]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a88      	ldr	r2, [pc, #544]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b4a:	e00e      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2102      	movs	r1, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f866 	bl	8005c24 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b5c:	e005      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004b64:	bf00      	nop
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b70:	4b7c      	ldr	r3, [pc, #496]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	4979      	ldr	r1, [pc, #484]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b82:	e001      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d047      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9c:	d030      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba2:	d82a      	bhi.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004ba4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ba8:	d02c      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bae:	d824      	bhi.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb4:	d018      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bba:	d81e      	bhi.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d007      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004bc6:	e018      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc8:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	4a65      	ldr	r2, [pc, #404]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bd4:	e017      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 f821 	bl	8005c24 <RCCEx_PLL2_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004be6:	e00e      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3324      	adds	r3, #36	; 0x24
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f001 f8ca 	bl	8005d88 <RCCEx_PLL3_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bf8:	e005      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfe:	e002      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c0c:	4b55      	ldr	r3, [pc, #340]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c18:	4952      	ldr	r1, [pc, #328]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c1e:	e001      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d049      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c38:	d02e      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c3e:	d828      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c44:	d02a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004c46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c4a:	d822      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c50:	d026      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004c52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c56:	d81c      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c5c:	d010      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004c5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c62:	d816      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01d      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d111      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2101      	movs	r1, #1
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 ffd5 	bl	8005c24 <RCCEx_PLL2_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c7e:	e012      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3324      	adds	r3, #36	; 0x24
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 f87e 	bl	8005d88 <RCCEx_PLL3_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c90:	e009      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	75fb      	strb	r3, [r7, #23]
      break;
 8004c96:	e006      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c98:	bf00      	nop
 8004c9a:	e004      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004c9c:	bf00      	nop
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cac:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb8:	492a      	ldr	r1, [pc, #168]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	650b      	str	r3, [r1, #80]	; 0x50
 8004cbe:	e001      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d04d      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cda:	d02e      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce0:	d828      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d02a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d822      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cf2:	d026      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004cf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cf8:	d81c      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cfe:	d010      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d04:	d816      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01d      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d0e:	d111      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	2101      	movs	r1, #1
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 ff84 	bl	8005c24 <RCCEx_PLL2_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d20:	e012      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3324      	adds	r3, #36	; 0x24
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 f82d 	bl	8005d88 <RCCEx_PLL3_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d32:	e009      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
      break;
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e004      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10c      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d5c:	4901      	ldr	r1, [pc, #4]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	658b      	str	r3, [r1, #88]	; 0x58
 8004d62:	e003      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d02f      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d80:	d00e      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d86:	d814      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d90:	d10f      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d92:	4baf      	ldr	r3, [pc, #700]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	4aae      	ldr	r2, [pc, #696]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d9e:	e00c      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	2101      	movs	r1, #1
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 ff3c 	bl	8005c24 <RCCEx_PLL2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004db0:	e003      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
      break;
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d109      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dc0:	4ba3      	ldr	r3, [pc, #652]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	49a0      	ldr	r1, [pc, #640]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	650b      	str	r3, [r1, #80]	; 0x50
 8004dd2:	e001      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d032      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d81b      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e2b 	.word	0x08004e2b
 8004df8:	08004e05 	.word	0x08004e05
 8004dfc:	08004e13 	.word	0x08004e13
 8004e00:	08004e2b 	.word	0x08004e2b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e04:	4b92      	ldr	r3, [pc, #584]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	4a91      	ldr	r2, [pc, #580]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e10:	e00c      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2102      	movs	r1, #2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 ff03 	bl	8005c24 <RCCEx_PLL2_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e22:	e003      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
      break;
 8004e28:	e000      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e32:	4b87      	ldr	r3, [pc, #540]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	4984      	ldr	r1, [pc, #528]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e44:	e001      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 8086 	beq.w	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e58:	4b7e      	ldr	r3, [pc, #504]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a7d      	ldr	r2, [pc, #500]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e64:	f7fd fada 	bl	800241c <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6a:	e009      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fd fad6 	bl	800241c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d902      	bls.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	75fb      	strb	r3, [r7, #23]
        break;
 8004e7e:	e005      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e80:	4b74      	ldr	r3, [pc, #464]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ef      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d166      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e92:	4b6f      	ldr	r3, [pc, #444]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e9c:	4053      	eors	r3, r2
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d013      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb0:	4b67      	ldr	r3, [pc, #412]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	4a66      	ldr	r2, [pc, #408]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ebc:	4b64      	ldr	r3, [pc, #400]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	4a63      	ldr	r2, [pc, #396]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ec8:	4a61      	ldr	r2, [pc, #388]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed8:	d115      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fd fa9f 	bl	800241c <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ee0:	e00b      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fd fa9b 	bl	800241c <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d902      	bls.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	75fb      	strb	r3, [r7, #23]
            break;
 8004ef8:	e005      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004efa:	4b55      	ldr	r3, [pc, #340]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ed      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d126      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1a:	d10d      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004f1c:	4b4c      	ldr	r3, [pc, #304]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f2a:	0919      	lsrs	r1, r3, #4
 8004f2c:	4b4a      	ldr	r3, [pc, #296]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004f2e:	400b      	ands	r3, r1
 8004f30:	4947      	ldr	r1, [pc, #284]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	610b      	str	r3, [r1, #16]
 8004f36:	e005      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f38:	4b45      	ldr	r3, [pc, #276]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	4a44      	ldr	r2, [pc, #272]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f42:	6113      	str	r3, [r2, #16]
 8004f44:	4b42      	ldr	r3, [pc, #264]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	493f      	ldr	r1, [pc, #252]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	670b      	str	r3, [r1, #112]	; 0x70
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
 8004f5c:	75bb      	strb	r3, [r7, #22]
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8085 	beq.w	800507c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f76:	2b28      	cmp	r3, #40	; 0x28
 8004f78:	d866      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	0800505d 	.word	0x0800505d
 8004f84:	08005049 	.word	0x08005049
 8004f88:	08005049 	.word	0x08005049
 8004f8c:	08005049 	.word	0x08005049
 8004f90:	08005049 	.word	0x08005049
 8004f94:	08005049 	.word	0x08005049
 8004f98:	08005049 	.word	0x08005049
 8004f9c:	08005049 	.word	0x08005049
 8004fa0:	08005025 	.word	0x08005025
 8004fa4:	08005049 	.word	0x08005049
 8004fa8:	08005049 	.word	0x08005049
 8004fac:	08005049 	.word	0x08005049
 8004fb0:	08005049 	.word	0x08005049
 8004fb4:	08005049 	.word	0x08005049
 8004fb8:	08005049 	.word	0x08005049
 8004fbc:	08005049 	.word	0x08005049
 8004fc0:	08005037 	.word	0x08005037
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	08005049 	.word	0x08005049
 8004fcc:	08005049 	.word	0x08005049
 8004fd0:	08005049 	.word	0x08005049
 8004fd4:	08005049 	.word	0x08005049
 8004fd8:	08005049 	.word	0x08005049
 8004fdc:	08005049 	.word	0x08005049
 8004fe0:	0800505d 	.word	0x0800505d
 8004fe4:	08005049 	.word	0x08005049
 8004fe8:	08005049 	.word	0x08005049
 8004fec:	08005049 	.word	0x08005049
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08005049 	.word	0x08005049
 8004ffc:	08005049 	.word	0x08005049
 8005000:	0800505d 	.word	0x0800505d
 8005004:	08005049 	.word	0x08005049
 8005008:	08005049 	.word	0x08005049
 800500c:	08005049 	.word	0x08005049
 8005010:	08005049 	.word	0x08005049
 8005014:	08005049 	.word	0x08005049
 8005018:	08005049 	.word	0x08005049
 800501c:	08005049 	.word	0x08005049
 8005020:	0800505d 	.word	0x0800505d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	2101      	movs	r1, #1
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fdfa 	bl	8005c24 <RCCEx_PLL2_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005034:	e013      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3324      	adds	r3, #36	; 0x24
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fea3 	bl	8005d88 <RCCEx_PLL3_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005046:	e00a      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	e007      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800504e:	bf00      	nop
 8005050:	58024400 	.word	0x58024400
 8005054:	58024800 	.word	0x58024800
 8005058:	00ffffcf 	.word	0x00ffffcf
      break;
 800505c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005064:	4b96      	ldr	r3, [pc, #600]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005070:	4993      	ldr	r1, [pc, #588]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	654b      	str	r3, [r1, #84]	; 0x54
 8005076:	e001      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d038      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508c:	2b05      	cmp	r3, #5
 800508e:	d821      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050db 	.word	0x080050db
 800509c:	080050b1 	.word	0x080050b1
 80050a0:	080050c3 	.word	0x080050c3
 80050a4:	080050db 	.word	0x080050db
 80050a8:	080050db 	.word	0x080050db
 80050ac:	080050db 	.word	0x080050db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	2101      	movs	r1, #1
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fdb4 	bl	8005c24 <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050c0:	e00c      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3324      	adds	r3, #36	; 0x24
 80050c6:	2101      	movs	r1, #1
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fe5d 	bl	8005d88 <RCCEx_PLL3_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
      break;
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80050da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050e2:	4b77      	ldr	r3, [pc, #476]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f023 0207 	bic.w	r2, r3, #7
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ee:	4974      	ldr	r1, [pc, #464]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	654b      	str	r3, [r1, #84]	; 0x54
 80050f4:	e001      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d03a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	2b05      	cmp	r3, #5
 800510e:	d821      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	0800515b 	.word	0x0800515b
 800511c:	08005131 	.word	0x08005131
 8005120:	08005143 	.word	0x08005143
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800515b 	.word	0x0800515b
 800512c:	0800515b 	.word	0x0800515b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	2101      	movs	r1, #1
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fd74 	bl	8005c24 <RCCEx_PLL2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005140:	e00c      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3324      	adds	r3, #36	; 0x24
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fe1d 	bl	8005d88 <RCCEx_PLL3_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005152:	e003      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
      break;
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800515a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005162:	4b57      	ldr	r3, [pc, #348]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	f023 0207 	bic.w	r2, r3, #7
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	4953      	ldr	r1, [pc, #332]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005172:	4313      	orrs	r3, r2
 8005174:	658b      	str	r3, [r1, #88]	; 0x58
 8005176:	e001      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d04b      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005192:	d02e      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005198:	d828      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d02a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80051a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a4:	d822      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80051a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051aa:	d026      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80051ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051b0:	d81c      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80051b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b6:	d010      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80051b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051bc:	d816      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01d      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80051c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051c6:	d111      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fd28 	bl	8005c24 <RCCEx_PLL2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051d8:	e012      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3324      	adds	r3, #36	; 0x24
 80051de:	2102      	movs	r1, #2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fdd1 	bl	8005d88 <RCCEx_PLL3_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051ea:	e009      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
      break;
 80051f0:	e006      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051f2:	bf00      	nop
 80051f4:	e004      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051f6:	bf00      	nop
 80051f8:	e002      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80051fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005214:	492a      	ldr	r1, [pc, #168]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	654b      	str	r3, [r1, #84]	; 0x54
 800521a:	e001      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d04d      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005232:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005236:	d02e      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005238:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800523c:	d828      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d02a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005248:	d822      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800524a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800524e:	d026      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005254:	d81c      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525a:	d010      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800525c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005260:	d816      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01d      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d111      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fcd6 	bl	8005c24 <RCCEx_PLL2_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800527c:	e012      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3324      	adds	r3, #36	; 0x24
 8005282:	2102      	movs	r1, #2
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fd7f 	bl	8005d88 <RCCEx_PLL3_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800528e:	e009      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
      break;
 8005294:	e006      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005296:	bf00      	nop
 8005298:	e004      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80052a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052b8:	4901      	ldr	r1, [pc, #4]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	658b      	str	r3, [r1, #88]	; 0x58
 80052be:	e003      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80052c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d04b      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052de:	d02e      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80052e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052e4:	d828      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ea:	d02a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80052ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f0:	d822      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052f6:	d026      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80052f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052fc:	d81c      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80052fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005302:	d010      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005308:	d816      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01d      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800530e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005312:	d111      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fc82 	bl	8005c24 <RCCEx_PLL2_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005324:	e012      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3324      	adds	r3, #36	; 0x24
 800532a:	2102      	movs	r1, #2
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fd2b 	bl	8005d88 <RCCEx_PLL3_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005336:	e009      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	75fb      	strb	r3, [r7, #23]
      break;
 800533c:	e006      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800533e:	bf00      	nop
 8005340:	e004      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005342:	bf00      	nop
 8005344:	e002      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800534a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005352:	4b9d      	ldr	r3, [pc, #628]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005360:	4999      	ldr	r1, [pc, #612]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005362:	4313      	orrs	r3, r2
 8005364:	658b      	str	r3, [r1, #88]	; 0x58
 8005366:	e001      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d10a      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3324      	adds	r3, #36	; 0x24
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fcfc 	bl	8005d88 <RCCEx_PLL3_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800539a:	4b8b      	ldr	r3, [pc, #556]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a8:	4987      	ldr	r1, [pc, #540]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c4:	d10a      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3324      	adds	r3, #36	; 0x24
 80053ca:	2102      	movs	r1, #2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fcdb 	bl	8005d88 <RCCEx_PLL3_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053dc:	4b7a      	ldr	r3, [pc, #488]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ea:	4977      	ldr	r1, [pc, #476]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d034      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005406:	d01d      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540c:	d817      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005416:	d009      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005418:	e011      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fbff 	bl	8005c24 <RCCEx_PLL2_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800542a:	e00c      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3324      	adds	r3, #36	; 0x24
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fca8 	bl	8005d88 <RCCEx_PLL3_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
      break;
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800544c:	4b5e      	ldr	r3, [pc, #376]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800545a:	495b      	ldr	r1, [pc, #364]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800545c:	4313      	orrs	r3, r2
 800545e:	658b      	str	r3, [r1, #88]	; 0x58
 8005460:	e001      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d033      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800547c:	d01c      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800547e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005482:	d816      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005488:	d003      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800548a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800548e:	d007      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005490:	e00f      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005492:	4b4d      	ldr	r3, [pc, #308]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	4a4c      	ldr	r2, [pc, #304]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800549e:	e00c      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	2101      	movs	r1, #1
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fc6e 	bl	8005d88 <RCCEx_PLL3_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80054b0:	e003      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	75fb      	strb	r3, [r7, #23]
      break;
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80054b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054c0:	4b41      	ldr	r3, [pc, #260]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ce:	493e      	ldr	r1, [pc, #248]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	654b      	str	r3, [r1, #84]	; 0x54
 80054d4:	e001      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d029      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80054ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f2:	d007      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80054f4:	e00f      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f6:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	4a33      	ldr	r2, [pc, #204]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005500:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005502:	e00b      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	2102      	movs	r1, #2
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb8a 	bl	8005c24 <RCCEx_PLL2_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005514:	e002      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
      break;
 800551a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800551c:	7dfb      	ldrb	r3, [r7, #23]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005526:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	4926      	ldr	r1, [pc, #152]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005530:	4313      	orrs	r3, r2
 8005532:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005534:	e001      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3324      	adds	r3, #36	; 0x24
 800554a:	2102      	movs	r1, #2
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fc1b 	bl	8005d88 <RCCEx_PLL3_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d033      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800556c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005570:	d017      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005576:	d811      	bhi.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557c:	d013      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800557e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005582:	d80b      	bhi.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d010      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558c:	d106      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800558e:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800559a:	e007      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	75fb      	strb	r3, [r7, #23]
      break;
 80055a0:	e004      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80055aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10c      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055be:	4902      	ldr	r1, [pc, #8]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	654b      	str	r3, [r1, #84]	; 0x54
 80055c4:	e004      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
 80055ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055dc:	4b31      	ldr	r3, [pc, #196]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e8:	492e      	ldr	r1, [pc, #184]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80055fa:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005608:	4926      	ldr	r1, [pc, #152]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800560a:	4313      	orrs	r3, r2
 800560c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800561a:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800561c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005626:	491f      	ldr	r1, [pc, #124]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005628:	4313      	orrs	r3, r2
 800562a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005638:	4b1a      	ldr	r3, [pc, #104]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800563e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005642:	6113      	str	r3, [r2, #16]
 8005644:	4b17      	ldr	r3, [pc, #92]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800564e:	4915      	ldr	r1, [pc, #84]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005650:	4313      	orrs	r3, r2
 8005652:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	da08      	bge.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800565c:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800565e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005660:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	490e      	ldr	r1, [pc, #56]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800566a:	4313      	orrs	r3, r2
 800566c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800567a:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005688:	4906      	ldr	r1, [pc, #24]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800568a:	4313      	orrs	r3, r2
 800568c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800568e:	7dbb      	ldrb	r3, [r7, #22]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	58024400 	.word	0x58024400

080056a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056ac:	f7ff f818 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	091b      	lsrs	r3, r3, #4
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4904      	ldr	r1, [pc, #16]	; (80056d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	58024400 	.word	0x58024400
 80056d0:	08007b4c 	.word	0x08007b4c

080056d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b089      	sub	sp, #36	; 0x24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056dc:	4ba1      	ldr	r3, [pc, #644]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80056e6:	4b9f      	ldr	r3, [pc, #636]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	0b1b      	lsrs	r3, r3, #12
 80056ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056f2:	4b9c      	ldr	r3, [pc, #624]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	091b      	lsrs	r3, r3, #4
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80056fe:	4b99      	ldr	r3, [pc, #612]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	08db      	lsrs	r3, r3, #3
 8005704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005716:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8111 	beq.w	8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b02      	cmp	r3, #2
 8005726:	f000 8083 	beq.w	8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b02      	cmp	r3, #2
 800572e:	f200 80a1 	bhi.w	8005874 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d056      	beq.n	80057ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800573e:	e099      	b.n	8005874 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005740:	4b88      	ldr	r3, [pc, #544]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02d      	beq.n	80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800574c:	4b85      	ldr	r3, [pc, #532]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	4a84      	ldr	r2, [pc, #528]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005776:	4b7b      	ldr	r3, [pc, #492]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005786:	ed97 6a03 	vldr	s12, [r7, #12]
 800578a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800596c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800578e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057a6:	e087      	b.n	80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ba:	4b6a      	ldr	r3, [pc, #424]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800596c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ea:	e065      	b.n	80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fe:	4b59      	ldr	r3, [pc, #356]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005812:	eddf 5a56 	vldr	s11, [pc, #344]	; 800596c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800582e:	e043      	b.n	80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800583e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005842:	4b48      	ldr	r3, [pc, #288]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005852:	ed97 6a03 	vldr	s12, [r7, #12]
 8005856:	eddf 5a45 	vldr	s11, [pc, #276]	; 800596c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800585a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005872:	e021      	b.n	80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005886:	4b37      	ldr	r3, [pc, #220]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005896:	ed97 6a03 	vldr	s12, [r7, #12]
 800589a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800596c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800589e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058b8:	4b2a      	ldr	r3, [pc, #168]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	0a5b      	lsrs	r3, r3, #9
 80058be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058de:	ee17 2a90 	vmov	r2, s15
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80058e6:	4b1f      	ldr	r3, [pc, #124]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005900:	edd7 6a07 	vldr	s13, [r7, #28]
 8005904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800590c:	ee17 2a90 	vmov	r2, s15
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	0e1b      	lsrs	r3, r3, #24
 800591a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800592a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800592e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593a:	ee17 2a90 	vmov	r2, s15
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005942:	e008      	b.n	8005956 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	609a      	str	r2, [r3, #8]
}
 8005956:	bf00      	nop
 8005958:	3724      	adds	r7, #36	; 0x24
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	58024400 	.word	0x58024400
 8005968:	03d09000 	.word	0x03d09000
 800596c:	46000000 	.word	0x46000000
 8005970:	4c742400 	.word	0x4c742400
 8005974:	4a742400 	.word	0x4a742400
 8005978:	4af42400 	.word	0x4af42400

0800597c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800597c:	b480      	push	{r7}
 800597e:	b089      	sub	sp, #36	; 0x24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005984:	4ba1      	ldr	r3, [pc, #644]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800598e:	4b9f      	ldr	r3, [pc, #636]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	0d1b      	lsrs	r3, r3, #20
 8005994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005998:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800599a:	4b9c      	ldr	r3, [pc, #624]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059a6:	4b99      	ldr	r3, [pc, #612]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	08db      	lsrs	r3, r3, #3
 80059ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8111 	beq.w	8005bec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	f000 8083 	beq.w	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	f200 80a1 	bhi.w	8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d056      	beq.n	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059e6:	e099      	b.n	8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e8:	4b88      	ldr	r3, [pc, #544]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d02d      	beq.n	8005a50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059f4:	4b85      	ldr	r3, [pc, #532]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	08db      	lsrs	r3, r3, #3
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	4a84      	ldr	r2, [pc, #528]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
 8005a04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	ee07 3a90 	vmov	s15, r3
 8005a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1e:	4b7b      	ldr	r3, [pc, #492]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a4e:	e087      	b.n	8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a62:	4b6a      	ldr	r3, [pc, #424]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a92:	e065      	b.n	8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa6:	4b59      	ldr	r3, [pc, #356]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ad6:	e043      	b.n	8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aea:	4b48      	ldr	r3, [pc, #288]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005afe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b1a:	e021      	b.n	8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2e:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b60:	4b2a      	ldr	r3, [pc, #168]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	0a5b      	lsrs	r3, r3, #9
 8005b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b86:	ee17 2a90 	vmov	r2, s15
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005b8e:	4b1f      	ldr	r3, [pc, #124]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ba4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb4:	ee17 2a90 	vmov	r2, s15
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005bbc:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	0e1b      	lsrs	r3, r3, #24
 8005bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be2:	ee17 2a90 	vmov	r2, s15
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bea:	e008      	b.n	8005bfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]
}
 8005bfe:	bf00      	nop
 8005c00:	3724      	adds	r7, #36	; 0x24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	58024400 	.word	0x58024400
 8005c10:	03d09000 	.word	0x03d09000
 8005c14:	46000000 	.word	0x46000000
 8005c18:	4c742400 	.word	0x4c742400
 8005c1c:	4a742400 	.word	0x4a742400
 8005c20:	4af42400 	.word	0x4af42400

08005c24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c32:	4b53      	ldr	r3, [pc, #332]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d101      	bne.n	8005c42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e099      	b.n	8005d76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c42:	4b4f      	ldr	r3, [pc, #316]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a4e      	ldr	r2, [pc, #312]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c4e:	f7fc fbe5 	bl	800241c <HAL_GetTick>
 8005c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c54:	e008      	b.n	8005c68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c56:	f7fc fbe1 	bl	800241c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e086      	b.n	8005d76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c68:	4b45      	ldr	r3, [pc, #276]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1f0      	bne.n	8005c56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c74:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	031b      	lsls	r3, r3, #12
 8005c82:	493f      	ldr	r1, [pc, #252]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	628b      	str	r3, [r1, #40]	; 0x28
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	025b      	lsls	r3, r3, #9
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	061b      	lsls	r3, r3, #24
 8005cb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cb8:	4931      	ldr	r1, [pc, #196]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cbe:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	492d      	ldr	r1, [pc, #180]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005cd0:	4b2b      	ldr	r3, [pc, #172]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	f023 0220 	bic.w	r2, r3, #32
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	4928      	ldr	r1, [pc, #160]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ce2:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005ce8:	f023 0310 	bic.w	r3, r3, #16
 8005cec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf2:	4b24      	ldr	r3, [pc, #144]	; (8005d84 <RCCEx_PLL2_Config+0x160>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	69d2      	ldr	r2, [r2, #28]
 8005cfa:	00d2      	lsls	r2, r2, #3
 8005cfc:	4920      	ldr	r1, [pc, #128]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d02:	4b1f      	ldr	r3, [pc, #124]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d08:	f043 0310 	orr.w	r3, r3, #16
 8005d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d14:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a19      	ldr	r2, [pc, #100]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d20:	e00f      	b.n	8005d42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d106      	bne.n	8005d36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4a14      	ldr	r2, [pc, #80]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d34:	e005      	b.n	8005d42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	4a11      	ldr	r2, [pc, #68]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a0e      	ldr	r2, [pc, #56]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4e:	f7fc fb65 	bl	800241c <HAL_GetTick>
 8005d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d54:	e008      	b.n	8005d68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d56:	f7fc fb61 	bl	800241c <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e006      	b.n	8005d76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
 8005d84:	ffff0007 	.word	0xffff0007

08005d88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d96:	4b53      	ldr	r3, [pc, #332]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d101      	bne.n	8005da6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e099      	b.n	8005eda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005da6:	4b4f      	ldr	r3, [pc, #316]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4e      	ldr	r2, [pc, #312]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db2:	f7fc fb33 	bl	800241c <HAL_GetTick>
 8005db6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005db8:	e008      	b.n	8005dcc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dba:	f7fc fb2f 	bl	800241c <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e086      	b.n	8005eda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dcc:	4b45      	ldr	r3, [pc, #276]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f0      	bne.n	8005dba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005dd8:	4b42      	ldr	r3, [pc, #264]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	051b      	lsls	r3, r3, #20
 8005de6:	493f      	ldr	r1, [pc, #252]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	628b      	str	r3, [r1, #40]	; 0x28
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	025b      	lsls	r3, r3, #9
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	061b      	lsls	r3, r3, #24
 8005e18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e1c:	4931      	ldr	r1, [pc, #196]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e22:	4b30      	ldr	r3, [pc, #192]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	492d      	ldr	r1, [pc, #180]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e34:	4b2b      	ldr	r3, [pc, #172]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	4928      	ldr	r1, [pc, #160]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e52:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <RCCEx_PLL3_Config+0x160>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	69d2      	ldr	r2, [r2, #28]
 8005e5e:	00d2      	lsls	r2, r2, #3
 8005e60:	4920      	ldr	r1, [pc, #128]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e66:	4b1f      	ldr	r3, [pc, #124]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e78:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e84:	e00f      	b.n	8005ea6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d106      	bne.n	8005e9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e8c:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	4a14      	ldr	r2, [pc, #80]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e98:	e005      	b.n	8005ea6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	4a11      	ldr	r2, [pc, #68]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb2:	f7fc fab3 	bl	800241c <HAL_GetTick>
 8005eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005eb8:	e008      	b.n	8005ecc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005eba:	f7fc faaf 	bl	800241c <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e006      	b.n	8005eda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	ffff0007 	.word	0xffff0007

08005eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e049      	b.n	8005f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f841 	bl	8005f9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3304      	adds	r3, #4
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f000 f9f8 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d001      	beq.n	8005fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e04f      	b.n	8006068 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a23      	ldr	r2, [pc, #140]	; (8006074 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01d      	beq.n	8006026 <HAL_TIM_Base_Start_IT+0x76>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff2:	d018      	beq.n	8006026 <HAL_TIM_Base_Start_IT+0x76>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <HAL_TIM_Base_Start_IT+0x76>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_TIM_Base_Start_IT+0xcc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <HAL_TIM_Base_Start_IT+0x76>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_TIM_Base_Start_IT+0xd0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_TIM_Base_Start_IT+0x76>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_TIM_Base_Start_IT+0xd4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_TIM_Base_Start_IT+0x76>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_TIM_Base_Start_IT+0xd8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d115      	bne.n	8006052 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	4b17      	ldr	r3, [pc, #92]	; (800608c <HAL_TIM_Base_Start_IT+0xdc>)
 800602e:	4013      	ands	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b06      	cmp	r3, #6
 8006036:	d015      	beq.n	8006064 <HAL_TIM_Base_Start_IT+0xb4>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603e:	d011      	beq.n	8006064 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006050:	e008      	b.n	8006064 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	e000      	b.n	8006066 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	40010000 	.word	0x40010000
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40010400 	.word	0x40010400
 8006088:	40001800 	.word	0x40001800
 800608c:	00010007 	.word	0x00010007

08006090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0202 	mvn.w	r2, #2
 80060bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f905 	bl	80062e2 <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8f7 	bl	80062ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f908 	bl	80062f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d122      	bne.n	8006140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b04      	cmp	r3, #4
 8006106:	d11b      	bne.n	8006140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0204 	mvn.w	r2, #4
 8006110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8db 	bl	80062e2 <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f8cd 	bl	80062ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f8de 	bl	80062f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b08      	cmp	r3, #8
 800614c:	d122      	bne.n	8006194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b08      	cmp	r3, #8
 800615a:	d11b      	bne.n	8006194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0208 	mvn.w	r2, #8
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2204      	movs	r2, #4
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f8b1 	bl	80062e2 <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8a3 	bl	80062ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8b4 	bl	80062f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0210 	mvn.w	r2, #16
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2208      	movs	r2, #8
 80061be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f887 	bl	80062e2 <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f879 	bl	80062ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f88a 	bl	80062f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d10e      	bne.n	8006214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b01      	cmp	r3, #1
 8006202:	d107      	bne.n	8006214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0201 	mvn.w	r2, #1
 800620c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb fdfa 	bl	8001e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d10e      	bne.n	8006240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622c:	2b80      	cmp	r3, #128	; 0x80
 800622e:	d107      	bne.n	8006240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f914 	bl	8006468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624e:	d10e      	bne.n	800626e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	d107      	bne.n	800626e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f907 	bl	800647c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d10e      	bne.n	800629a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006286:	2b40      	cmp	r3, #64	; 0x40
 8006288:	d107      	bne.n	800629a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f838 	bl	800630a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d10e      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f06f 0220 	mvn.w	r2, #32
 80062be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f8c7 	bl	8006454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a40      	ldr	r2, [pc, #256]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633e:	d00f      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3d      	ldr	r2, [pc, #244]	; (8006438 <TIM_Base_SetConfig+0x118>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00b      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3c      	ldr	r2, [pc, #240]	; (800643c <TIM_Base_SetConfig+0x11c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d007      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3b      	ldr	r2, [pc, #236]	; (8006440 <TIM_Base_SetConfig+0x120>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3a      	ldr	r2, [pc, #232]	; (8006444 <TIM_Base_SetConfig+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d108      	bne.n	8006372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2f      	ldr	r2, [pc, #188]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d01f      	beq.n	80063ba <TIM_Base_SetConfig+0x9a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d01b      	beq.n	80063ba <TIM_Base_SetConfig+0x9a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <TIM_Base_SetConfig+0x118>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d017      	beq.n	80063ba <TIM_Base_SetConfig+0x9a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2b      	ldr	r2, [pc, #172]	; (800643c <TIM_Base_SetConfig+0x11c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <TIM_Base_SetConfig+0x9a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2a      	ldr	r2, [pc, #168]	; (8006440 <TIM_Base_SetConfig+0x120>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00f      	beq.n	80063ba <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a29      	ldr	r2, [pc, #164]	; (8006444 <TIM_Base_SetConfig+0x124>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00b      	beq.n	80063ba <TIM_Base_SetConfig+0x9a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a28      	ldr	r2, [pc, #160]	; (8006448 <TIM_Base_SetConfig+0x128>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <TIM_Base_SetConfig+0x9a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <TIM_Base_SetConfig+0x12c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_Base_SetConfig+0x9a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a26      	ldr	r2, [pc, #152]	; (8006450 <TIM_Base_SetConfig+0x130>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d108      	bne.n	80063cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a10      	ldr	r2, [pc, #64]	; (8006434 <TIM_Base_SetConfig+0x114>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00f      	beq.n	8006418 <TIM_Base_SetConfig+0xf8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a12      	ldr	r2, [pc, #72]	; (8006444 <TIM_Base_SetConfig+0x124>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00b      	beq.n	8006418 <TIM_Base_SetConfig+0xf8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a11      	ldr	r2, [pc, #68]	; (8006448 <TIM_Base_SetConfig+0x128>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d007      	beq.n	8006418 <TIM_Base_SetConfig+0xf8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a10      	ldr	r2, [pc, #64]	; (800644c <TIM_Base_SetConfig+0x12c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_Base_SetConfig+0xf8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a0f      	ldr	r2, [pc, #60]	; (8006450 <TIM_Base_SetConfig+0x130>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d103      	bne.n	8006420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	615a      	str	r2, [r3, #20]
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40010000 	.word	0x40010000
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	40010400 	.word	0x40010400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800

08006454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e042      	b.n	8006528 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7fb fd47 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2224      	movs	r2, #36	; 0x24
 80064be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8c2 	bl	800665c <UART_SetConfig>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e022      	b.n	8006528 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fe20 	bl	8007130 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800650e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fea7 	bl	8007274 <UART_CheckIdleState>
 8006526:	4603      	mov	r3, r0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006546:	2b20      	cmp	r3, #32
 8006548:	f040 8083 	bne.w	8006652 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_UART_Transmit+0x28>
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e07b      	b.n	8006654 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_UART_Transmit+0x3a>
 8006566:	2302      	movs	r3, #2
 8006568:	e074      	b.n	8006654 <HAL_UART_Transmit+0x124>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2221      	movs	r2, #33	; 0x21
 800657e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006582:	f7fb ff4b 	bl	800241c <HAL_GetTick>
 8006586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	88fa      	ldrh	r2, [r7, #6]
 8006594:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a0:	d108      	bne.n	80065b4 <HAL_UART_Transmit+0x84>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e003      	b.n	80065bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80065c4:	e02c      	b.n	8006620 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2200      	movs	r2, #0
 80065ce:	2180      	movs	r1, #128	; 0x80
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fe9a 	bl	800730a <UART_WaitOnFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e039      	b.n	8006654 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10b      	bne.n	80065fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	3302      	adds	r3, #2
 80065fa:	61bb      	str	r3, [r7, #24]
 80065fc:	e007      	b.n	800660e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	3301      	adds	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1cc      	bne.n	80065c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2200      	movs	r2, #0
 8006634:	2140      	movs	r1, #64	; 0x40
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fe67 	bl	800730a <UART_WaitOnFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e006      	b.n	8006654 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2220      	movs	r2, #32
 800664a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e000      	b.n	8006654 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006652:	2302      	movs	r3, #2
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3720      	adds	r7, #32
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800665c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006660:	b092      	sub	sp, #72	; 0x48
 8006662:	af00      	add	r7, sp, #0
 8006664:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	431a      	orrs	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	431a      	orrs	r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	4313      	orrs	r3, r2
 8006682:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4bbe      	ldr	r3, [pc, #760]	; (8006984 <UART_SetConfig+0x328>)
 800668c:	4013      	ands	r3, r2
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006694:	430b      	orrs	r3, r1
 8006696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4ab3      	ldr	r2, [pc, #716]	; (8006988 <UART_SetConfig+0x32c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066c4:	4313      	orrs	r3, r2
 80066c6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	4baf      	ldr	r3, [pc, #700]	; (800698c <UART_SetConfig+0x330>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066d8:	430b      	orrs	r3, r1
 80066da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	f023 010f 	bic.w	r1, r3, #15
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4aa6      	ldr	r2, [pc, #664]	; (8006990 <UART_SetConfig+0x334>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d177      	bne.n	80067ec <UART_SetConfig+0x190>
 80066fc:	4ba5      	ldr	r3, [pc, #660]	; (8006994 <UART_SetConfig+0x338>)
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006704:	2b28      	cmp	r3, #40	; 0x28
 8006706:	d86d      	bhi.n	80067e4 <UART_SetConfig+0x188>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <UART_SetConfig+0xb4>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	080067b5 	.word	0x080067b5
 8006714:	080067e5 	.word	0x080067e5
 8006718:	080067e5 	.word	0x080067e5
 800671c:	080067e5 	.word	0x080067e5
 8006720:	080067e5 	.word	0x080067e5
 8006724:	080067e5 	.word	0x080067e5
 8006728:	080067e5 	.word	0x080067e5
 800672c:	080067e5 	.word	0x080067e5
 8006730:	080067bd 	.word	0x080067bd
 8006734:	080067e5 	.word	0x080067e5
 8006738:	080067e5 	.word	0x080067e5
 800673c:	080067e5 	.word	0x080067e5
 8006740:	080067e5 	.word	0x080067e5
 8006744:	080067e5 	.word	0x080067e5
 8006748:	080067e5 	.word	0x080067e5
 800674c:	080067e5 	.word	0x080067e5
 8006750:	080067c5 	.word	0x080067c5
 8006754:	080067e5 	.word	0x080067e5
 8006758:	080067e5 	.word	0x080067e5
 800675c:	080067e5 	.word	0x080067e5
 8006760:	080067e5 	.word	0x080067e5
 8006764:	080067e5 	.word	0x080067e5
 8006768:	080067e5 	.word	0x080067e5
 800676c:	080067e5 	.word	0x080067e5
 8006770:	080067cd 	.word	0x080067cd
 8006774:	080067e5 	.word	0x080067e5
 8006778:	080067e5 	.word	0x080067e5
 800677c:	080067e5 	.word	0x080067e5
 8006780:	080067e5 	.word	0x080067e5
 8006784:	080067e5 	.word	0x080067e5
 8006788:	080067e5 	.word	0x080067e5
 800678c:	080067e5 	.word	0x080067e5
 8006790:	080067d5 	.word	0x080067d5
 8006794:	080067e5 	.word	0x080067e5
 8006798:	080067e5 	.word	0x080067e5
 800679c:	080067e5 	.word	0x080067e5
 80067a0:	080067e5 	.word	0x080067e5
 80067a4:	080067e5 	.word	0x080067e5
 80067a8:	080067e5 	.word	0x080067e5
 80067ac:	080067e5 	.word	0x080067e5
 80067b0:	080067dd 	.word	0x080067dd
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ba:	e222      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80067bc:	2304      	movs	r3, #4
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c2:	e21e      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80067c4:	2308      	movs	r3, #8
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ca:	e21a      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80067cc:	2310      	movs	r3, #16
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d2:	e216      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80067d4:	2320      	movs	r3, #32
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067da:	e212      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80067dc:	2340      	movs	r3, #64	; 0x40
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e20e      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80067e4:	2380      	movs	r3, #128	; 0x80
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ea:	e20a      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a69      	ldr	r2, [pc, #420]	; (8006998 <UART_SetConfig+0x33c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d130      	bne.n	8006858 <UART_SetConfig+0x1fc>
 80067f6:	4b67      	ldr	r3, [pc, #412]	; (8006994 <UART_SetConfig+0x338>)
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	2b05      	cmp	r3, #5
 8006800:	d826      	bhi.n	8006850 <UART_SetConfig+0x1f4>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <UART_SetConfig+0x1ac>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	08006821 	.word	0x08006821
 800680c:	08006829 	.word	0x08006829
 8006810:	08006831 	.word	0x08006831
 8006814:	08006839 	.word	0x08006839
 8006818:	08006841 	.word	0x08006841
 800681c:	08006849 	.word	0x08006849
 8006820:	2300      	movs	r3, #0
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e1ec      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006828:	2304      	movs	r3, #4
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e1e8      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006830:	2308      	movs	r3, #8
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e1e4      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006838:	2310      	movs	r3, #16
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e1e0      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006840:	2320      	movs	r3, #32
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e1dc      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e1d8      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006856:	e1d4      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a4f      	ldr	r2, [pc, #316]	; (800699c <UART_SetConfig+0x340>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d130      	bne.n	80068c4 <UART_SetConfig+0x268>
 8006862:	4b4c      	ldr	r3, [pc, #304]	; (8006994 <UART_SetConfig+0x338>)
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	2b05      	cmp	r3, #5
 800686c:	d826      	bhi.n	80068bc <UART_SetConfig+0x260>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <UART_SetConfig+0x218>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	0800688d 	.word	0x0800688d
 8006878:	08006895 	.word	0x08006895
 800687c:	0800689d 	.word	0x0800689d
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068b5 	.word	0x080068b5
 800688c:	2300      	movs	r3, #0
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e1b6      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006894:	2304      	movs	r3, #4
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e1b2      	b.n	8006c02 <UART_SetConfig+0x5a6>
 800689c:	2308      	movs	r3, #8
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e1ae      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80068a4:	2310      	movs	r3, #16
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e1aa      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80068ac:	2320      	movs	r3, #32
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b2:	e1a6      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80068b4:	2340      	movs	r3, #64	; 0x40
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ba:	e1a2      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80068bc:	2380      	movs	r3, #128	; 0x80
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c2:	e19e      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a35      	ldr	r2, [pc, #212]	; (80069a0 <UART_SetConfig+0x344>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d130      	bne.n	8006930 <UART_SetConfig+0x2d4>
 80068ce:	4b31      	ldr	r3, [pc, #196]	; (8006994 <UART_SetConfig+0x338>)
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	d826      	bhi.n	8006928 <UART_SetConfig+0x2cc>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <UART_SetConfig+0x284>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	080068f9 	.word	0x080068f9
 80068e4:	08006901 	.word	0x08006901
 80068e8:	08006909 	.word	0x08006909
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006921 	.word	0x08006921
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fe:	e180      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006900:	2304      	movs	r3, #4
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006906:	e17c      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006908:	2308      	movs	r3, #8
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690e:	e178      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006910:	2310      	movs	r3, #16
 8006912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006916:	e174      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006918:	2320      	movs	r3, #32
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691e:	e170      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006920:	2340      	movs	r3, #64	; 0x40
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006926:	e16c      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e168      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <UART_SetConfig+0x348>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d142      	bne.n	80069c0 <UART_SetConfig+0x364>
 800693a:	4b16      	ldr	r3, [pc, #88]	; (8006994 <UART_SetConfig+0x338>)
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	2b05      	cmp	r3, #5
 8006944:	d838      	bhi.n	80069b8 <UART_SetConfig+0x35c>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0x2f0>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006965 	.word	0x08006965
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006975 	.word	0x08006975
 8006958:	0800697d 	.word	0x0800697d
 800695c:	080069a9 	.word	0x080069a9
 8006960:	080069b1 	.word	0x080069b1
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696a:	e14a      	b.n	8006c02 <UART_SetConfig+0x5a6>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006972:	e146      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697a:	e142      	b.n	8006c02 <UART_SetConfig+0x5a6>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006982:	e13e      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006984:	cfff69f3 	.word	0xcfff69f3
 8006988:	58000c00 	.word	0x58000c00
 800698c:	11fff4ff 	.word	0x11fff4ff
 8006990:	40011000 	.word	0x40011000
 8006994:	58024400 	.word	0x58024400
 8006998:	40004400 	.word	0x40004400
 800699c:	40004800 	.word	0x40004800
 80069a0:	40004c00 	.word	0x40004c00
 80069a4:	40005000 	.word	0x40005000
 80069a8:	2320      	movs	r3, #32
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ae:	e128      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80069b0:	2340      	movs	r3, #64	; 0x40
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b6:	e124      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80069b8:	2380      	movs	r3, #128	; 0x80
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069be:	e120      	b.n	8006c02 <UART_SetConfig+0x5a6>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4acb      	ldr	r2, [pc, #812]	; (8006cf4 <UART_SetConfig+0x698>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d176      	bne.n	8006ab8 <UART_SetConfig+0x45c>
 80069ca:	4bcb      	ldr	r3, [pc, #812]	; (8006cf8 <UART_SetConfig+0x69c>)
 80069cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d2:	2b28      	cmp	r3, #40	; 0x28
 80069d4:	d86c      	bhi.n	8006ab0 <UART_SetConfig+0x454>
 80069d6:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <UART_SetConfig+0x380>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	08006a81 	.word	0x08006a81
 80069e0:	08006ab1 	.word	0x08006ab1
 80069e4:	08006ab1 	.word	0x08006ab1
 80069e8:	08006ab1 	.word	0x08006ab1
 80069ec:	08006ab1 	.word	0x08006ab1
 80069f0:	08006ab1 	.word	0x08006ab1
 80069f4:	08006ab1 	.word	0x08006ab1
 80069f8:	08006ab1 	.word	0x08006ab1
 80069fc:	08006a89 	.word	0x08006a89
 8006a00:	08006ab1 	.word	0x08006ab1
 8006a04:	08006ab1 	.word	0x08006ab1
 8006a08:	08006ab1 	.word	0x08006ab1
 8006a0c:	08006ab1 	.word	0x08006ab1
 8006a10:	08006ab1 	.word	0x08006ab1
 8006a14:	08006ab1 	.word	0x08006ab1
 8006a18:	08006ab1 	.word	0x08006ab1
 8006a1c:	08006a91 	.word	0x08006a91
 8006a20:	08006ab1 	.word	0x08006ab1
 8006a24:	08006ab1 	.word	0x08006ab1
 8006a28:	08006ab1 	.word	0x08006ab1
 8006a2c:	08006ab1 	.word	0x08006ab1
 8006a30:	08006ab1 	.word	0x08006ab1
 8006a34:	08006ab1 	.word	0x08006ab1
 8006a38:	08006ab1 	.word	0x08006ab1
 8006a3c:	08006a99 	.word	0x08006a99
 8006a40:	08006ab1 	.word	0x08006ab1
 8006a44:	08006ab1 	.word	0x08006ab1
 8006a48:	08006ab1 	.word	0x08006ab1
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006ab1 	.word	0x08006ab1
 8006a54:	08006ab1 	.word	0x08006ab1
 8006a58:	08006ab1 	.word	0x08006ab1
 8006a5c:	08006aa1 	.word	0x08006aa1
 8006a60:	08006ab1 	.word	0x08006ab1
 8006a64:	08006ab1 	.word	0x08006ab1
 8006a68:	08006ab1 	.word	0x08006ab1
 8006a6c:	08006ab1 	.word	0x08006ab1
 8006a70:	08006ab1 	.word	0x08006ab1
 8006a74:	08006ab1 	.word	0x08006ab1
 8006a78:	08006ab1 	.word	0x08006ab1
 8006a7c:	08006aa9 	.word	0x08006aa9
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a86:	e0bc      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8e:	e0b8      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006a90:	2308      	movs	r3, #8
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e0b4      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006a98:	2310      	movs	r3, #16
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e0b0      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006aa0:	2320      	movs	r3, #32
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e0ac      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e0a8      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006ab0:	2380      	movs	r3, #128	; 0x80
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e0a4      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a8f      	ldr	r2, [pc, #572]	; (8006cfc <UART_SetConfig+0x6a0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d130      	bne.n	8006b24 <UART_SetConfig+0x4c8>
 8006ac2:	4b8d      	ldr	r3, [pc, #564]	; (8006cf8 <UART_SetConfig+0x69c>)
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	d826      	bhi.n	8006b1c <UART_SetConfig+0x4c0>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <UART_SetConfig+0x478>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006aed 	.word	0x08006aed
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006afd 	.word	0x08006afd
 8006ae0:	08006b05 	.word	0x08006b05
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b15 	.word	0x08006b15
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e086      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e082      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e07e      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e07a      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e076      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b14:	2340      	movs	r3, #64	; 0x40
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e072      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e06e      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a75      	ldr	r2, [pc, #468]	; (8006d00 <UART_SetConfig+0x6a4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d130      	bne.n	8006b90 <UART_SetConfig+0x534>
 8006b2e:	4b72      	ldr	r3, [pc, #456]	; (8006cf8 <UART_SetConfig+0x69c>)
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d826      	bhi.n	8006b88 <UART_SetConfig+0x52c>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x4e4>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b59 	.word	0x08006b59
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	08006b69 	.word	0x08006b69
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e050      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b60:	2304      	movs	r3, #4
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e04c      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b68:	2308      	movs	r3, #8
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e048      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b70:	2310      	movs	r3, #16
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e044      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e040      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e03c      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e038      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a5b      	ldr	r2, [pc, #364]	; (8006d04 <UART_SetConfig+0x6a8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d130      	bne.n	8006bfc <UART_SetConfig+0x5a0>
 8006b9a:	4b57      	ldr	r3, [pc, #348]	; (8006cf8 <UART_SetConfig+0x69c>)
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	d826      	bhi.n	8006bf4 <UART_SetConfig+0x598>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x550>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bc5 	.word	0x08006bc5
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	08006bd5 	.word	0x08006bd5
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bca:	e01a      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd2:	e016      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bda:	e012      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e00e      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006be4:	2320      	movs	r3, #32
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e00a      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e006      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e002      	b.n	8006c02 <UART_SetConfig+0x5a6>
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a3f      	ldr	r2, [pc, #252]	; (8006d04 <UART_SetConfig+0x6a8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	f040 80f8 	bne.w	8006dfe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	dc46      	bgt.n	8006ca4 <UART_SetConfig+0x648>
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	f2c0 8082 	blt.w	8006d20 <UART_SetConfig+0x6c4>
 8006c1c:	3b02      	subs	r3, #2
 8006c1e:	2b1e      	cmp	r3, #30
 8006c20:	d87e      	bhi.n	8006d20 <UART_SetConfig+0x6c4>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0x5cc>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006cab 	.word	0x08006cab
 8006c2c:	08006d21 	.word	0x08006d21
 8006c30:	08006cb3 	.word	0x08006cb3
 8006c34:	08006d21 	.word	0x08006d21
 8006c38:	08006d21 	.word	0x08006d21
 8006c3c:	08006d21 	.word	0x08006d21
 8006c40:	08006cc3 	.word	0x08006cc3
 8006c44:	08006d21 	.word	0x08006d21
 8006c48:	08006d21 	.word	0x08006d21
 8006c4c:	08006d21 	.word	0x08006d21
 8006c50:	08006d21 	.word	0x08006d21
 8006c54:	08006d21 	.word	0x08006d21
 8006c58:	08006d21 	.word	0x08006d21
 8006c5c:	08006d21 	.word	0x08006d21
 8006c60:	08006cd3 	.word	0x08006cd3
 8006c64:	08006d21 	.word	0x08006d21
 8006c68:	08006d21 	.word	0x08006d21
 8006c6c:	08006d21 	.word	0x08006d21
 8006c70:	08006d21 	.word	0x08006d21
 8006c74:	08006d21 	.word	0x08006d21
 8006c78:	08006d21 	.word	0x08006d21
 8006c7c:	08006d21 	.word	0x08006d21
 8006c80:	08006d21 	.word	0x08006d21
 8006c84:	08006d21 	.word	0x08006d21
 8006c88:	08006d21 	.word	0x08006d21
 8006c8c:	08006d21 	.word	0x08006d21
 8006c90:	08006d21 	.word	0x08006d21
 8006c94:	08006d21 	.word	0x08006d21
 8006c98:	08006d21 	.word	0x08006d21
 8006c9c:	08006d21 	.word	0x08006d21
 8006ca0:	08006d13 	.word	0x08006d13
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d037      	beq.n	8006d18 <UART_SetConfig+0x6bc>
 8006ca8:	e03a      	b.n	8006d20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006caa:	f7fe fcfd 	bl	80056a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cb0:	e03c      	b.n	8006d2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fd0c 	bl	80056d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cc0:	e034      	b.n	8006d2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cc2:	f107 0318 	add.w	r3, r7, #24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fe58 	bl	800597c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd0:	e02c      	b.n	8006d2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <UART_SetConfig+0x69c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d016      	beq.n	8006d0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <UART_SetConfig+0x69c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	4a07      	ldr	r2, [pc, #28]	; (8006d08 <UART_SetConfig+0x6ac>)
 8006cea:	fa22 f303 	lsr.w	r3, r2, r3
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cf0:	e01c      	b.n	8006d2c <UART_SetConfig+0x6d0>
 8006cf2:	bf00      	nop
 8006cf4:	40011400 	.word	0x40011400
 8006cf8:	58024400 	.word	0x58024400
 8006cfc:	40007800 	.word	0x40007800
 8006d00:	40007c00 	.word	0x40007c00
 8006d04:	58000c00 	.word	0x58000c00
 8006d08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006d0c:	4b9e      	ldr	r3, [pc, #632]	; (8006f88 <UART_SetConfig+0x92c>)
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d10:	e00c      	b.n	8006d2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d12:	4b9e      	ldr	r3, [pc, #632]	; (8006f8c <UART_SetConfig+0x930>)
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d16:	e009      	b.n	8006d2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d1e:	e005      	b.n	8006d2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 81e0 	beq.w	80070f4 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	4a95      	ldr	r2, [pc, #596]	; (8006f90 <UART_SetConfig+0x934>)
 8006d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	4413      	add	r3, r2
 8006d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d305      	bcc.n	8006d64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d903      	bls.n	8006d6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d6a:	e1c3      	b.n	80070f4 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6e:	2200      	movs	r2, #0
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	60fa      	str	r2, [r7, #12]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	4a85      	ldr	r2, [pc, #532]	; (8006f90 <UART_SetConfig+0x934>)
 8006d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2200      	movs	r2, #0
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d8e:	f7f9 faf9 	bl	8000384 <__aeabi_uldivmod>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4610      	mov	r0, r2
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	020b      	lsls	r3, r1, #8
 8006da4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006da8:	0202      	lsls	r2, r0, #8
 8006daa:	6979      	ldr	r1, [r7, #20]
 8006dac:	6849      	ldr	r1, [r1, #4]
 8006dae:	0849      	lsrs	r1, r1, #1
 8006db0:	2000      	movs	r0, #0
 8006db2:	460c      	mov	r4, r1
 8006db4:	4605      	mov	r5, r0
 8006db6:	eb12 0804 	adds.w	r8, r2, r4
 8006dba:	eb43 0905 	adc.w	r9, r3, r5
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	469a      	mov	sl, r3
 8006dc6:	4693      	mov	fp, r2
 8006dc8:	4652      	mov	r2, sl
 8006dca:	465b      	mov	r3, fp
 8006dcc:	4640      	mov	r0, r8
 8006dce:	4649      	mov	r1, r9
 8006dd0:	f7f9 fad8 	bl	8000384 <__aeabi_uldivmod>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4613      	mov	r3, r2
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de2:	d308      	bcc.n	8006df6 <UART_SetConfig+0x79a>
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dea:	d204      	bcs.n	8006df6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df2:	60da      	str	r2, [r3, #12]
 8006df4:	e17e      	b.n	80070f4 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006dfc:	e17a      	b.n	80070f4 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e06:	f040 80c7 	bne.w	8006f98 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 8006e0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	dc48      	bgt.n	8006ea4 <UART_SetConfig+0x848>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	db7b      	blt.n	8006f0e <UART_SetConfig+0x8b2>
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d879      	bhi.n	8006f0e <UART_SetConfig+0x8b2>
 8006e1a:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x7c4>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	08006eab 	.word	0x08006eab
 8006e24:	08006eb3 	.word	0x08006eb3
 8006e28:	08006f0f 	.word	0x08006f0f
 8006e2c:	08006f0f 	.word	0x08006f0f
 8006e30:	08006ebb 	.word	0x08006ebb
 8006e34:	08006f0f 	.word	0x08006f0f
 8006e38:	08006f0f 	.word	0x08006f0f
 8006e3c:	08006f0f 	.word	0x08006f0f
 8006e40:	08006ecb 	.word	0x08006ecb
 8006e44:	08006f0f 	.word	0x08006f0f
 8006e48:	08006f0f 	.word	0x08006f0f
 8006e4c:	08006f0f 	.word	0x08006f0f
 8006e50:	08006f0f 	.word	0x08006f0f
 8006e54:	08006f0f 	.word	0x08006f0f
 8006e58:	08006f0f 	.word	0x08006f0f
 8006e5c:	08006f0f 	.word	0x08006f0f
 8006e60:	08006edb 	.word	0x08006edb
 8006e64:	08006f0f 	.word	0x08006f0f
 8006e68:	08006f0f 	.word	0x08006f0f
 8006e6c:	08006f0f 	.word	0x08006f0f
 8006e70:	08006f0f 	.word	0x08006f0f
 8006e74:	08006f0f 	.word	0x08006f0f
 8006e78:	08006f0f 	.word	0x08006f0f
 8006e7c:	08006f0f 	.word	0x08006f0f
 8006e80:	08006f0f 	.word	0x08006f0f
 8006e84:	08006f0f 	.word	0x08006f0f
 8006e88:	08006f0f 	.word	0x08006f0f
 8006e8c:	08006f0f 	.word	0x08006f0f
 8006e90:	08006f0f 	.word	0x08006f0f
 8006e94:	08006f0f 	.word	0x08006f0f
 8006e98:	08006f0f 	.word	0x08006f0f
 8006e9c:	08006f0f 	.word	0x08006f0f
 8006ea0:	08006f01 	.word	0x08006f01
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d02e      	beq.n	8006f06 <UART_SetConfig+0x8aa>
 8006ea8:	e031      	b.n	8006f0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eaa:	f7fd fc49 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8006eae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006eb0:	e033      	b.n	8006f1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eb2:	f7fd fc5b 	bl	800476c <HAL_RCC_GetPCLK2Freq>
 8006eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006eb8:	e02f      	b.n	8006f1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fc08 	bl	80056d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ec8:	e027      	b.n	8006f1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eca:	f107 0318 	add.w	r3, r7, #24
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe fd54 	bl	800597c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed8:	e01f      	b.n	8006f1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eda:	4b2e      	ldr	r3, [pc, #184]	; (8006f94 <UART_SetConfig+0x938>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ee6:	4b2b      	ldr	r3, [pc, #172]	; (8006f94 <UART_SetConfig+0x938>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	08db      	lsrs	r3, r3, #3
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	4a25      	ldr	r2, [pc, #148]	; (8006f88 <UART_SetConfig+0x92c>)
 8006ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ef8:	e00f      	b.n	8006f1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006efa:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <UART_SetConfig+0x92c>)
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006efe:	e00c      	b.n	8006f1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f00:	4b22      	ldr	r3, [pc, #136]	; (8006f8c <UART_SetConfig+0x930>)
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f04:	e009      	b.n	8006f1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f0c:	e005      	b.n	8006f1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80e9 	beq.w	80070f4 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <UART_SetConfig+0x934>)
 8006f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f34:	005a      	lsls	r2, r3, #1
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	441a      	add	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	2b0f      	cmp	r3, #15
 8006f4e:	d916      	bls.n	8006f7e <UART_SetConfig+0x922>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f56:	d212      	bcs.n	8006f7e <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f023 030f 	bic.w	r3, r3, #15
 8006f60:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f70:	4313      	orrs	r3, r2
 8006f72:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006f7a:	60da      	str	r2, [r3, #12]
 8006f7c:	e0ba      	b.n	80070f4 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f84:	e0b6      	b.n	80070f4 <UART_SetConfig+0xa98>
 8006f86:	bf00      	nop
 8006f88:	03d09000 	.word	0x03d09000
 8006f8c:	003d0900 	.word	0x003d0900
 8006f90:	08007b5c 	.word	0x08007b5c
 8006f94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	dc49      	bgt.n	8007034 <UART_SetConfig+0x9d8>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	db7c      	blt.n	800709e <UART_SetConfig+0xa42>
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d87a      	bhi.n	800709e <UART_SetConfig+0xa42>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0x954>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	0800703b 	.word	0x0800703b
 8006fb4:	08007043 	.word	0x08007043
 8006fb8:	0800709f 	.word	0x0800709f
 8006fbc:	0800709f 	.word	0x0800709f
 8006fc0:	0800704b 	.word	0x0800704b
 8006fc4:	0800709f 	.word	0x0800709f
 8006fc8:	0800709f 	.word	0x0800709f
 8006fcc:	0800709f 	.word	0x0800709f
 8006fd0:	0800705b 	.word	0x0800705b
 8006fd4:	0800709f 	.word	0x0800709f
 8006fd8:	0800709f 	.word	0x0800709f
 8006fdc:	0800709f 	.word	0x0800709f
 8006fe0:	0800709f 	.word	0x0800709f
 8006fe4:	0800709f 	.word	0x0800709f
 8006fe8:	0800709f 	.word	0x0800709f
 8006fec:	0800709f 	.word	0x0800709f
 8006ff0:	0800706b 	.word	0x0800706b
 8006ff4:	0800709f 	.word	0x0800709f
 8006ff8:	0800709f 	.word	0x0800709f
 8006ffc:	0800709f 	.word	0x0800709f
 8007000:	0800709f 	.word	0x0800709f
 8007004:	0800709f 	.word	0x0800709f
 8007008:	0800709f 	.word	0x0800709f
 800700c:	0800709f 	.word	0x0800709f
 8007010:	0800709f 	.word	0x0800709f
 8007014:	0800709f 	.word	0x0800709f
 8007018:	0800709f 	.word	0x0800709f
 800701c:	0800709f 	.word	0x0800709f
 8007020:	0800709f 	.word	0x0800709f
 8007024:	0800709f 	.word	0x0800709f
 8007028:	0800709f 	.word	0x0800709f
 800702c:	0800709f 	.word	0x0800709f
 8007030:	08007091 	.word	0x08007091
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d02e      	beq.n	8007096 <UART_SetConfig+0xa3a>
 8007038:	e031      	b.n	800709e <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800703a:	f7fd fb81 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 800703e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007040:	e033      	b.n	80070aa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007042:	f7fd fb93 	bl	800476c <HAL_RCC_GetPCLK2Freq>
 8007046:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007048:	e02f      	b.n	80070aa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fb40 	bl	80056d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007058:	e027      	b.n	80070aa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800705a:	f107 0318 	add.w	r3, r7, #24
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fc8c 	bl	800597c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007068:	e01f      	b.n	80070aa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800706a:	4b2d      	ldr	r3, [pc, #180]	; (8007120 <UART_SetConfig+0xac4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007076:	4b2a      	ldr	r3, [pc, #168]	; (8007120 <UART_SetConfig+0xac4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	08db      	lsrs	r3, r3, #3
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	4a28      	ldr	r2, [pc, #160]	; (8007124 <UART_SetConfig+0xac8>)
 8007082:	fa22 f303 	lsr.w	r3, r2, r3
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007088:	e00f      	b.n	80070aa <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800708a:	4b26      	ldr	r3, [pc, #152]	; (8007124 <UART_SetConfig+0xac8>)
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708e:	e00c      	b.n	80070aa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007090:	4b25      	ldr	r3, [pc, #148]	; (8007128 <UART_SetConfig+0xacc>)
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007094:	e009      	b.n	80070aa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800709c:	e005      	b.n	80070aa <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80070a8:	bf00      	nop
    }

    if (pclk != 0U)
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d021      	beq.n	80070f4 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	4a1d      	ldr	r2, [pc, #116]	; (800712c <UART_SetConfig+0xad0>)
 80070b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070be:	fbb3 f2f2 	udiv	r2, r3, r2
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	441a      	add	r2, r3
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	2b0f      	cmp	r3, #15
 80070da:	d908      	bls.n	80070ee <UART_SetConfig+0xa92>
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e2:	d204      	bcs.n	80070ee <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ea:	60da      	str	r2, [r3, #12]
 80070ec:	e002      	b.n	80070f4 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2201      	movs	r2, #1
 8007100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2200      	movs	r2, #0
 8007108:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2200      	movs	r2, #0
 800710e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007110:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007114:	4618      	mov	r0, r3
 8007116:	3748      	adds	r7, #72	; 0x48
 8007118:	46bd      	mov	sp, r7
 800711a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
 8007124:	03d09000 	.word	0x03d09000
 8007128:	003d0900 	.word	0x003d0900
 800712c:	08007b5c 	.word	0x08007b5c

08007130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01a      	beq.n	8007246 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800722e:	d10a      	bne.n	8007246 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	605a      	str	r2, [r3, #4]
  }
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af02      	add	r7, sp, #8
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007284:	f7fb f8ca 	bl	800241c <HAL_GetTick>
 8007288:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b08      	cmp	r3, #8
 8007296:	d10e      	bne.n	80072b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f82f 	bl	800730a <UART_WaitOnFlagUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e025      	b.n	8007302 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	d10e      	bne.n	80072e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f819 	bl	800730a <UART_WaitOnFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e00f      	b.n	8007302 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	603b      	str	r3, [r7, #0]
 8007316:	4613      	mov	r3, r2
 8007318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731a:	e062      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007322:	d05e      	beq.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007324:	f7fb f87a 	bl	800241c <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	429a      	cmp	r2, r3
 8007332:	d302      	bcc.n	800733a <UART_WaitOnFlagUntilTimeout+0x30>
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d11d      	bne.n	8007376 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007348:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e045      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d02e      	beq.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800738e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007392:	d126      	bne.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800739c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e00f      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4013      	ands	r3, r2
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	bf0c      	ite	eq
 80073f2:	2301      	moveq	r3, #1
 80073f4:	2300      	movne	r3, #0
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d08d      	beq.n	800731c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_UARTEx_DisableFifoMode+0x16>
 800741c:	2302      	movs	r3, #2
 800741e:	e027      	b.n	8007470 <HAL_UARTEx_DisableFifoMode+0x66>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2224      	movs	r2, #36	; 0x24
 800742c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800744e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007490:	2302      	movs	r3, #2
 8007492:	e02d      	b.n	80074f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2224      	movs	r2, #36	; 0x24
 80074a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f84f 	bl	8007574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e02d      	b.n	800756c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2224      	movs	r2, #36	; 0x24
 800751c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0201 	bic.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f811 	bl	8007574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007580:	2b00      	cmp	r3, #0
 8007582:	d108      	bne.n	8007596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007594:	e031      	b.n	80075fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007596:	2310      	movs	r3, #16
 8007598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800759a:	2310      	movs	r3, #16
 800759c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	0e5b      	lsrs	r3, r3, #25
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	0f5b      	lsrs	r3, r3, #29
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	7b3a      	ldrb	r2, [r7, #12]
 80075c2:	4911      	ldr	r1, [pc, #68]	; (8007608 <UARTEx_SetNbDataToProcess+0x94>)
 80075c4:	5c8a      	ldrb	r2, [r1, r2]
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ca:	7b3a      	ldrb	r2, [r7, #12]
 80075cc:	490f      	ldr	r1, [pc, #60]	; (800760c <UARTEx_SetNbDataToProcess+0x98>)
 80075ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	7b7a      	ldrb	r2, [r7, #13]
 80075e0:	4909      	ldr	r1, [pc, #36]	; (8007608 <UARTEx_SetNbDataToProcess+0x94>)
 80075e2:	5c8a      	ldrb	r2, [r1, r2]
 80075e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075e8:	7b7a      	ldrb	r2, [r7, #13]
 80075ea:	4908      	ldr	r1, [pc, #32]	; (800760c <UARTEx_SetNbDataToProcess+0x98>)
 80075ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	08007b74 	.word	0x08007b74
 800760c:	08007b7c 	.word	0x08007b7c

08007610 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007610:	b084      	sub	sp, #16
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	f107 001c 	add.w	r0, r7, #28
 800761e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	2b01      	cmp	r3, #1
 8007626:	d120      	bne.n	800766a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <USB_CoreInit+0xd4>)
 800763a:	4013      	ands	r3, r2
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800764c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f8c8 	bl	80077f4 <USB_CoreReset>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	e01a      	b.n	80076a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f8bc 	bl	80077f4 <USB_CoreReset>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
 8007692:	e005      	b.n	80076a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d116      	bne.n	80076d4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076b4:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <USB_CoreInit+0xd8>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f043 0206 	orr.w	r2, r3, #6
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076e0:	b004      	add	sp, #16
 80076e2:	4770      	bx	lr
 80076e4:	ffbdffbf 	.word	0xffbdffbf
 80076e8:	03ee0000 	.word	0x03ee0000

080076ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f023 0201 	bic.w	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d106      	bne.n	800773a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]
 8007738:	e00b      	b.n	8007752 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d106      	bne.n	800774e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60da      	str	r2, [r3, #12]
 800774c:	e001      	b.n	8007752 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e003      	b.n	800775a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007752:	2032      	movs	r0, #50	; 0x32
 8007754:	f7fa fe6e 	bl	8002434 <HAL_Delay>

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	019b      	lsls	r3, r3, #6
 8007776:	f043 0220 	orr.w	r2, r3, #32
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3301      	adds	r3, #1
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a09      	ldr	r2, [pc, #36]	; (80077ac <USB_FlushTxFifo+0x48>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d901      	bls.n	8007790 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e006      	b.n	800779e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f003 0320 	and.w	r3, r3, #32
 8007798:	2b20      	cmp	r3, #32
 800779a:	d0f0      	beq.n	800777e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	00030d40 	.word	0x00030d40

080077b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2210      	movs	r2, #16
 80077c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3301      	adds	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <USB_FlushRxFifo+0x40>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d901      	bls.n	80077d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e006      	b.n	80077e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d0f0      	beq.n	80077c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	00030d40 	.word	0x00030d40

080077f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4a13      	ldr	r2, [pc, #76]	; (8007858 <USB_CoreReset+0x64>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d901      	bls.n	8007812 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e01b      	b.n	800784a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	daf2      	bge.n	8007800 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f043 0201 	orr.w	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3301      	adds	r3, #1
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a09      	ldr	r2, [pc, #36]	; (8007858 <USB_CoreReset+0x64>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d901      	bls.n	800783c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e006      	b.n	800784a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b01      	cmp	r3, #1
 8007846:	d0f0      	beq.n	800782a <USB_CoreReset+0x36>

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	00030d40 	.word	0x00030d40

0800785c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800785c:	b084      	sub	sp, #16
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	f107 001c 	add.w	r0, r7, #28
 800786a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007878:	461a      	mov	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d018      	beq.n	80078d4 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d10a      	bne.n	80078be <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078b6:	f043 0304 	orr.w	r3, r3, #4
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	e014      	b.n	80078e8 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078cc:	f023 0304 	bic.w	r3, r3, #4
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	e009      	b.n	80078e8 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078e2:	f023 0304 	bic.w	r3, r3, #4
 80078e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80078e8:	2110      	movs	r1, #16
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff ff3a 	bl	8007764 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ff5d 	bl	80077b0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	e015      	b.n	8007928 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4413      	add	r3, r2
 8007904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007908:	461a      	mov	r2, r3
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791c:	461a      	mov	r2, r3
 800791e:	2300      	movs	r3, #0
 8007920:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3301      	adds	r3, #1
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	429a      	cmp	r2, r3
 800792e:	d3e5      	bcc.n	80078fc <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007930:	2101      	movs	r1, #1
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f848 	bl	80079c8 <USB_DriveVbus>

  HAL_Delay(200U);
 8007938:	20c8      	movs	r0, #200	; 0xc8
 800793a:	f7fa fd7b 	bl	8002434 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f04f 32ff 	mov.w	r2, #4294967295
 800794a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00b      	beq.n	8007970 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800795e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a14      	ldr	r2, [pc, #80]	; (80079b4 <USB_HostInit+0x158>)
 8007964:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <USB_HostInit+0x15c>)
 800796a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800796e:	e009      	b.n	8007984 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2280      	movs	r2, #128	; 0x80
 8007974:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a10      	ldr	r2, [pc, #64]	; (80079bc <USB_HostInit+0x160>)
 800797a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a10      	ldr	r2, [pc, #64]	; (80079c0 <USB_HostInit+0x164>)
 8007980:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	f043 0210 	orr.w	r2, r3, #16
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699a      	ldr	r2, [r3, #24]
 800799a:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <USB_HostInit+0x168>)
 800799c:	4313      	orrs	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ae:	b004      	add	sp, #16
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	01000200 	.word	0x01000200
 80079b8:	00e00300 	.word	0x00e00300
 80079bc:	00600080 	.word	0x00600080
 80079c0:	004000e0 	.word	0x004000e0
 80079c4:	a3200008 	.word	0xa3200008

080079c8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80079ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d109      	bne.n	8007a0c <USB_DriveVbus+0x44>
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d106      	bne.n	8007a0c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a0a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a16:	d109      	bne.n	8007a2c <USB_DriveVbus+0x64>
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a2a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <__libc_init_array>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4d0d      	ldr	r5, [pc, #52]	; (8007a74 <__libc_init_array+0x38>)
 8007a40:	4c0d      	ldr	r4, [pc, #52]	; (8007a78 <__libc_init_array+0x3c>)
 8007a42:	1b64      	subs	r4, r4, r5
 8007a44:	10a4      	asrs	r4, r4, #2
 8007a46:	2600      	movs	r6, #0
 8007a48:	42a6      	cmp	r6, r4
 8007a4a:	d109      	bne.n	8007a60 <__libc_init_array+0x24>
 8007a4c:	4d0b      	ldr	r5, [pc, #44]	; (8007a7c <__libc_init_array+0x40>)
 8007a4e:	4c0c      	ldr	r4, [pc, #48]	; (8007a80 <__libc_init_array+0x44>)
 8007a50:	f000 f82e 	bl	8007ab0 <_init>
 8007a54:	1b64      	subs	r4, r4, r5
 8007a56:	10a4      	asrs	r4, r4, #2
 8007a58:	2600      	movs	r6, #0
 8007a5a:	42a6      	cmp	r6, r4
 8007a5c:	d105      	bne.n	8007a6a <__libc_init_array+0x2e>
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a64:	4798      	blx	r3
 8007a66:	3601      	adds	r6, #1
 8007a68:	e7ee      	b.n	8007a48 <__libc_init_array+0xc>
 8007a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6e:	4798      	blx	r3
 8007a70:	3601      	adds	r6, #1
 8007a72:	e7f2      	b.n	8007a5a <__libc_init_array+0x1e>
 8007a74:	08007b8c 	.word	0x08007b8c
 8007a78:	08007b8c 	.word	0x08007b8c
 8007a7c:	08007b8c 	.word	0x08007b8c
 8007a80:	08007b90 	.word	0x08007b90

08007a84 <memcpy>:
 8007a84:	440a      	add	r2, r1
 8007a86:	4291      	cmp	r1, r2
 8007a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a8c:	d100      	bne.n	8007a90 <memcpy+0xc>
 8007a8e:	4770      	bx	lr
 8007a90:	b510      	push	{r4, lr}
 8007a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a9a:	4291      	cmp	r1, r2
 8007a9c:	d1f9      	bne.n	8007a92 <memcpy+0xe>
 8007a9e:	bd10      	pop	{r4, pc}

08007aa0 <memset>:
 8007aa0:	4402      	add	r2, r0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d100      	bne.n	8007aaa <memset+0xa>
 8007aa8:	4770      	bx	lr
 8007aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8007aae:	e7f9      	b.n	8007aa4 <memset+0x4>

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
