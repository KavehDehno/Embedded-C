
FreeRTOS_Templete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008f88  08008f88  00018f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009048  08009048  00019048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800904c  0800904c  0001904c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  08009050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00078740  24000018  08009068  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24078758  08009068  00028758  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023879  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c6e  00000000  00000000  000438bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a58  00000000  00000000  00047530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018c0  00000000  00000000  00048f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038279  00000000  00000000  0004a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000227fc  00000000  00000000  00082ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173b17  00000000  00000000  000a52bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00218dd4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007090  00000000  00000000  00218e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000018 	.word	0x24000018
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f70 	.word	0x08008f70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400001c 	.word	0x2400001c
 80002dc:	08008f70 	.word	0x08008f70

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	240001a0 	.word	0x240001a0

08000374 <__aeabi_uldivmod>:
 8000374:	b953      	cbnz	r3, 800038c <__aeabi_uldivmod+0x18>
 8000376:	b94a      	cbnz	r2, 800038c <__aeabi_uldivmod+0x18>
 8000378:	2900      	cmp	r1, #0
 800037a:	bf08      	it	eq
 800037c:	2800      	cmpeq	r0, #0
 800037e:	bf1c      	itt	ne
 8000380:	f04f 31ff 	movne.w	r1, #4294967295
 8000384:	f04f 30ff 	movne.w	r0, #4294967295
 8000388:	f000 b974 	b.w	8000674 <__aeabi_idiv0>
 800038c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000390:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000394:	f000 f806 	bl	80003a4 <__udivmoddi4>
 8000398:	f8dd e004 	ldr.w	lr, [sp, #4]
 800039c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a0:	b004      	add	sp, #16
 80003a2:	4770      	bx	lr

080003a4 <__udivmoddi4>:
 80003a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a8:	9d08      	ldr	r5, [sp, #32]
 80003aa:	4604      	mov	r4, r0
 80003ac:	468e      	mov	lr, r1
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d14d      	bne.n	800044e <__udivmoddi4+0xaa>
 80003b2:	428a      	cmp	r2, r1
 80003b4:	4694      	mov	ip, r2
 80003b6:	d969      	bls.n	800048c <__udivmoddi4+0xe8>
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	b152      	cbz	r2, 80003d4 <__udivmoddi4+0x30>
 80003be:	fa01 f302 	lsl.w	r3, r1, r2
 80003c2:	f1c2 0120 	rsb	r1, r2, #32
 80003c6:	fa20 f101 	lsr.w	r1, r0, r1
 80003ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ce:	ea41 0e03 	orr.w	lr, r1, r3
 80003d2:	4094      	lsls	r4, r2
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	0c21      	lsrs	r1, r4, #16
 80003da:	fbbe f6f8 	udiv	r6, lr, r8
 80003de:	fa1f f78c 	uxth.w	r7, ip
 80003e2:	fb08 e316 	mls	r3, r8, r6, lr
 80003e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ea:	fb06 f107 	mul.w	r1, r6, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d90a      	bls.n	8000408 <__udivmoddi4+0x64>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80003fa:	f080 811f 	bcs.w	800063c <__udivmoddi4+0x298>
 80003fe:	4299      	cmp	r1, r3
 8000400:	f240 811c 	bls.w	800063c <__udivmoddi4+0x298>
 8000404:	3e02      	subs	r6, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb00 f707 	mul.w	r7, r0, r7
 800041c:	42a7      	cmp	r7, r4
 800041e:	d90a      	bls.n	8000436 <__udivmoddi4+0x92>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295
 8000428:	f080 810a 	bcs.w	8000640 <__udivmoddi4+0x29c>
 800042c:	42a7      	cmp	r7, r4
 800042e:	f240 8107 	bls.w	8000640 <__udivmoddi4+0x29c>
 8000432:	4464      	add	r4, ip
 8000434:	3802      	subs	r0, #2
 8000436:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043a:	1be4      	subs	r4, r4, r7
 800043c:	2600      	movs	r6, #0
 800043e:	b11d      	cbz	r5, 8000448 <__udivmoddi4+0xa4>
 8000440:	40d4      	lsrs	r4, r2
 8000442:	2300      	movs	r3, #0
 8000444:	e9c5 4300 	strd	r4, r3, [r5]
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	428b      	cmp	r3, r1
 8000450:	d909      	bls.n	8000466 <__udivmoddi4+0xc2>
 8000452:	2d00      	cmp	r5, #0
 8000454:	f000 80ef 	beq.w	8000636 <__udivmoddi4+0x292>
 8000458:	2600      	movs	r6, #0
 800045a:	e9c5 0100 	strd	r0, r1, [r5]
 800045e:	4630      	mov	r0, r6
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	fab3 f683 	clz	r6, r3
 800046a:	2e00      	cmp	r6, #0
 800046c:	d14a      	bne.n	8000504 <__udivmoddi4+0x160>
 800046e:	428b      	cmp	r3, r1
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xd4>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 80f9 	bhi.w	800066a <__udivmoddi4+0x2c6>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb61 0303 	sbc.w	r3, r1, r3
 800047e:	2001      	movs	r0, #1
 8000480:	469e      	mov	lr, r3
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e0      	beq.n	8000448 <__udivmoddi4+0xa4>
 8000486:	e9c5 4e00 	strd	r4, lr, [r5]
 800048a:	e7dd      	b.n	8000448 <__udivmoddi4+0xa4>
 800048c:	b902      	cbnz	r2, 8000490 <__udivmoddi4+0xec>
 800048e:	deff      	udf	#255	; 0xff
 8000490:	fab2 f282 	clz	r2, r2
 8000494:	2a00      	cmp	r2, #0
 8000496:	f040 8092 	bne.w	80005be <__udivmoddi4+0x21a>
 800049a:	eba1 010c 	sub.w	r1, r1, ip
 800049e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a2:	fa1f fe8c 	uxth.w	lr, ip
 80004a6:	2601      	movs	r6, #1
 80004a8:	0c20      	lsrs	r0, r4, #16
 80004aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ae:	fb07 1113 	mls	r1, r7, r3, r1
 80004b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b6:	fb0e f003 	mul.w	r0, lr, r3
 80004ba:	4288      	cmp	r0, r1
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x12c>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c6:	d202      	bcs.n	80004ce <__udivmoddi4+0x12a>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f200 80cb 	bhi.w	8000664 <__udivmoddi4+0x2c0>
 80004ce:	4643      	mov	r3, r8
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d8:	fb07 1110 	mls	r1, r7, r0, r1
 80004dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004e0:	fb0e fe00 	mul.w	lr, lr, r0
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x156>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d202      	bcs.n	80004f8 <__udivmoddi4+0x154>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	f200 80bb 	bhi.w	800066e <__udivmoddi4+0x2ca>
 80004f8:	4608      	mov	r0, r1
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x9a>
 8000504:	f1c6 0720 	rsb	r7, r6, #32
 8000508:	40b3      	lsls	r3, r6
 800050a:	fa22 fc07 	lsr.w	ip, r2, r7
 800050e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000512:	fa20 f407 	lsr.w	r4, r0, r7
 8000516:	fa01 f306 	lsl.w	r3, r1, r6
 800051a:	431c      	orrs	r4, r3
 800051c:	40f9      	lsrs	r1, r7
 800051e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000522:	fa00 f306 	lsl.w	r3, r0, r6
 8000526:	fbb1 f8f9 	udiv	r8, r1, r9
 800052a:	0c20      	lsrs	r0, r4, #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fb09 1118 	mls	r1, r9, r8, r1
 8000534:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000538:	fb08 f00e 	mul.w	r0, r8, lr
 800053c:	4288      	cmp	r0, r1
 800053e:	fa02 f206 	lsl.w	r2, r2, r6
 8000542:	d90b      	bls.n	800055c <__udivmoddi4+0x1b8>
 8000544:	eb1c 0101 	adds.w	r1, ip, r1
 8000548:	f108 3aff 	add.w	sl, r8, #4294967295
 800054c:	f080 8088 	bcs.w	8000660 <__udivmoddi4+0x2bc>
 8000550:	4288      	cmp	r0, r1
 8000552:	f240 8085 	bls.w	8000660 <__udivmoddi4+0x2bc>
 8000556:	f1a8 0802 	sub.w	r8, r8, #2
 800055a:	4461      	add	r1, ip
 800055c:	1a09      	subs	r1, r1, r0
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb1 f0f9 	udiv	r0, r1, r9
 8000564:	fb09 1110 	mls	r1, r9, r0, r1
 8000568:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	458e      	cmp	lr, r1
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x1e2>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f100 34ff 	add.w	r4, r0, #4294967295
 800057c:	d26c      	bcs.n	8000658 <__udivmoddi4+0x2b4>
 800057e:	458e      	cmp	lr, r1
 8000580:	d96a      	bls.n	8000658 <__udivmoddi4+0x2b4>
 8000582:	3802      	subs	r0, #2
 8000584:	4461      	add	r1, ip
 8000586:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800058a:	fba0 9402 	umull	r9, r4, r0, r2
 800058e:	eba1 010e 	sub.w	r1, r1, lr
 8000592:	42a1      	cmp	r1, r4
 8000594:	46c8      	mov	r8, r9
 8000596:	46a6      	mov	lr, r4
 8000598:	d356      	bcc.n	8000648 <__udivmoddi4+0x2a4>
 800059a:	d053      	beq.n	8000644 <__udivmoddi4+0x2a0>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x212>
 800059e:	ebb3 0208 	subs.w	r2, r3, r8
 80005a2:	eb61 010e 	sbc.w	r1, r1, lr
 80005a6:	fa01 f707 	lsl.w	r7, r1, r7
 80005aa:	fa22 f306 	lsr.w	r3, r2, r6
 80005ae:	40f1      	lsrs	r1, r6
 80005b0:	431f      	orrs	r7, r3
 80005b2:	e9c5 7100 	strd	r7, r1, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	40d8      	lsrs	r0, r3
 80005c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c8:	fa21 f303 	lsr.w	r3, r1, r3
 80005cc:	4091      	lsls	r1, r2
 80005ce:	4301      	orrs	r1, r0
 80005d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d4:	fa1f fe8c 	uxth.w	lr, ip
 80005d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80005dc:	fb07 3610 	mls	r6, r7, r0, r3
 80005e0:	0c0b      	lsrs	r3, r1, #16
 80005e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005e6:	fb00 f60e 	mul.w	r6, r0, lr
 80005ea:	429e      	cmp	r6, r3
 80005ec:	fa04 f402 	lsl.w	r4, r4, r2
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x260>
 80005f2:	eb1c 0303 	adds.w	r3, ip, r3
 80005f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fa:	d22f      	bcs.n	800065c <__udivmoddi4+0x2b8>
 80005fc:	429e      	cmp	r6, r3
 80005fe:	d92d      	bls.n	800065c <__udivmoddi4+0x2b8>
 8000600:	3802      	subs	r0, #2
 8000602:	4463      	add	r3, ip
 8000604:	1b9b      	subs	r3, r3, r6
 8000606:	b289      	uxth	r1, r1
 8000608:	fbb3 f6f7 	udiv	r6, r3, r7
 800060c:	fb07 3316 	mls	r3, r7, r6, r3
 8000610:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000614:	fb06 f30e 	mul.w	r3, r6, lr
 8000618:	428b      	cmp	r3, r1
 800061a:	d908      	bls.n	800062e <__udivmoddi4+0x28a>
 800061c:	eb1c 0101 	adds.w	r1, ip, r1
 8000620:	f106 38ff 	add.w	r8, r6, #4294967295
 8000624:	d216      	bcs.n	8000654 <__udivmoddi4+0x2b0>
 8000626:	428b      	cmp	r3, r1
 8000628:	d914      	bls.n	8000654 <__udivmoddi4+0x2b0>
 800062a:	3e02      	subs	r6, #2
 800062c:	4461      	add	r1, ip
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000634:	e738      	b.n	80004a8 <__udivmoddi4+0x104>
 8000636:	462e      	mov	r6, r5
 8000638:	4628      	mov	r0, r5
 800063a:	e705      	b.n	8000448 <__udivmoddi4+0xa4>
 800063c:	4606      	mov	r6, r0
 800063e:	e6e3      	b.n	8000408 <__udivmoddi4+0x64>
 8000640:	4618      	mov	r0, r3
 8000642:	e6f8      	b.n	8000436 <__udivmoddi4+0x92>
 8000644:	454b      	cmp	r3, r9
 8000646:	d2a9      	bcs.n	800059c <__udivmoddi4+0x1f8>
 8000648:	ebb9 0802 	subs.w	r8, r9, r2
 800064c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000650:	3801      	subs	r0, #1
 8000652:	e7a3      	b.n	800059c <__udivmoddi4+0x1f8>
 8000654:	4646      	mov	r6, r8
 8000656:	e7ea      	b.n	800062e <__udivmoddi4+0x28a>
 8000658:	4620      	mov	r0, r4
 800065a:	e794      	b.n	8000586 <__udivmoddi4+0x1e2>
 800065c:	4640      	mov	r0, r8
 800065e:	e7d1      	b.n	8000604 <__udivmoddi4+0x260>
 8000660:	46d0      	mov	r8, sl
 8000662:	e77b      	b.n	800055c <__udivmoddi4+0x1b8>
 8000664:	3b02      	subs	r3, #2
 8000666:	4461      	add	r1, ip
 8000668:	e732      	b.n	80004d0 <__udivmoddi4+0x12c>
 800066a:	4630      	mov	r0, r6
 800066c:	e709      	b.n	8000482 <__udivmoddi4+0xde>
 800066e:	4464      	add	r4, ip
 8000670:	3802      	subs	r0, #2
 8000672:	e742      	b.n	80004fa <__udivmoddi4+0x156>

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	6892      	ldr	r2, [r2, #8]
 80006d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	6852      	ldr	r2, [r2, #4]
 80006e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800071a:	f000 f9a9 	bl	8000a70 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <xTaskGetTickCountFromISR+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000728:	683b      	ldr	r3, [r7, #0]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	240000cc 	.word	0x240000cc

08000738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000742:	4b42      	ldr	r3, [pc, #264]	; (800084c <xTaskIncrementTick+0x114>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d175      	bne.n	8000836 <xTaskIncrementTick+0xfe>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800074a:	4b41      	ldr	r3, [pc, #260]	; (8000850 <xTaskIncrementTick+0x118>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <xTaskIncrementTick+0x118>)
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d122      	bne.n	80007a4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800075e:	4b3d      	ldr	r3, [pc, #244]	; (8000854 <xTaskIncrementTick+0x11c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00c      	beq.n	8000782 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076c:	b672      	cpsid	i
 800076e:	f383 8811 	msr	BASEPRI, r3
 8000772:	f3bf 8f6f 	isb	sy
 8000776:	f3bf 8f4f 	dsb	sy
 800077a:	b662      	cpsie	i
 800077c:	603b      	str	r3, [r7, #0]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800077e:	bf00      	nop
 8000780:	e7fe      	b.n	8000780 <xTaskIncrementTick+0x48>
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <xTaskIncrementTick+0x11c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4b33      	ldr	r3, [pc, #204]	; (8000858 <xTaskIncrementTick+0x120>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a31      	ldr	r2, [pc, #196]	; (8000854 <xTaskIncrementTick+0x11c>)
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <xTaskIncrementTick+0x120>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <xTaskIncrementTick+0x124>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a2f      	ldr	r2, [pc, #188]	; (800085c <xTaskIncrementTick+0x124>)
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	f000 f8d2 	bl	8000948 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <xTaskIncrementTick+0x128>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d348      	bcc.n	8000840 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <xTaskIncrementTick+0x11c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d104      	bne.n	80007c2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <xTaskIncrementTick+0x128>)
 80007ba:	f04f 32ff 	mov.w	r2, #4294967295
 80007be:	601a      	str	r2, [r3, #0]
                    break;
 80007c0:	e03e      	b.n	8000840 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <xTaskIncrementTick+0x11c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d203      	bcs.n	80007e2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <xTaskIncrementTick+0x128>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80007e0:	e02e      	b.n	8000840 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3304      	adds	r3, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff6a 	bl	80006c0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d004      	beq.n	80007fe <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3318      	adds	r3, #24
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff61 	bl	80006c0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4618      	mov	r0, r3
 8000802:	f001 feab 	bl	800255c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	2201      	movs	r2, #1
 800080c:	409a      	lsls	r2, r3
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <xTaskIncrementTick+0x12c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4313      	orrs	r3, r2
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <xTaskIncrementTick+0x12c>)
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4a10      	ldr	r2, [pc, #64]	; (8000868 <xTaskIncrementTick+0x130>)
 8000826:	441a      	add	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3304      	adds	r3, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4610      	mov	r0, r2
 8000830:	f7ff ff22 	bl	8000678 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000834:	e7bb      	b.n	80007ae <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <xTaskIncrementTick+0x134>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <xTaskIncrementTick+0x134>)
 800083e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000840:	697b      	ldr	r3, [r7, #20]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	240000e8 	.word	0x240000e8
 8000850:	240000cc 	.word	0x240000cc
 8000854:	240000c4 	.word	0x240000c4
 8000858:	240000c8 	.word	0x240000c8
 800085c:	240000dc 	.word	0x240000dc
 8000860:	240000e0 	.word	0x240000e0
 8000864:	240000d0 	.word	0x240000d0
 8000868:	24000038 	.word	0x24000038
 800086c:	240000d4 	.word	0x240000d4

08000870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <vTaskSwitchContext+0xc0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <vTaskSwitchContext+0xc4>)
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000884:	e04f      	b.n	8000926 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <vTaskSwitchContext+0xc4>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <vTaskSwitchContext+0xc8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	fab3 f383 	clz	r3, r3
 8000898:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	f1c3 031f 	rsb	r3, r3, #31
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	4926      	ldr	r1, [pc, #152]	; (800093c <vTaskSwitchContext+0xcc>)
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	440b      	add	r3, r1
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10c      	bne.n	80008d0 <vTaskSwitchContext+0x60>
        __asm volatile
 80008b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ba:	b672      	cpsid	i
 80008bc:	f383 8811 	msr	BASEPRI, r3
 80008c0:	f3bf 8f6f 	isb	sy
 80008c4:	f3bf 8f4f 	dsb	sy
 80008c8:	b662      	cpsie	i
 80008ca:	607b      	str	r3, [r7, #4]
    }
 80008cc:	bf00      	nop
 80008ce:	e7fe      	b.n	80008ce <vTaskSwitchContext+0x5e>
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	4613      	mov	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <vTaskSwitchContext+0xcc>)
 80008dc:	4413      	add	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	3308      	adds	r3, #8
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d104      	bne.n	8000900 <vTaskSwitchContext+0x90>
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <vTaskSwitchContext+0xd0>)
 8000908:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <vTaskSwitchContext+0xd0>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <vTaskSwitchContext+0xd4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	429a      	cmp	r2, r3
 8000914:	d102      	bne.n	800091c <vTaskSwitchContext+0xac>
 8000916:	f001 fdc3 	bl	80024a0 <SEGGER_SYSVIEW_OnIdle>
}
 800091a:	e004      	b.n	8000926 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <vTaskSwitchContext+0xd0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fdd9 	bl	80024d8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	240000e8 	.word	0x240000e8
 8000934:	240000d8 	.word	0x240000d8
 8000938:	240000d0 	.word	0x240000d0
 800093c:	24000038 	.word	0x24000038
 8000940:	24000034 	.word	0x24000034
 8000944:	240000e4 	.word	0x240000e4

08000948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <prvResetNextTaskUnblockTime+0x30>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d104      	bne.n	8000960 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <prvResetNextTaskUnblockTime+0x34>)
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800095e:	e005      	b.n	800096c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <prvResetNextTaskUnblockTime+0x30>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <prvResetNextTaskUnblockTime+0x34>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	240000c4 	.word	0x240000c4
 800097c:	240000e0 	.word	0x240000e0

08000980 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <pxCurrentTCBConst2>)
 8000982:	6819      	ldr	r1, [r3, #0]
 8000984:	6808      	ldr	r0, [r1, #0]
 8000986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800098a:	f380 8809 	msr	PSP, r0
 800098e:	f3bf 8f6f 	isb	sy
 8000992:	f04f 0000 	mov.w	r0, #0
 8000996:	f380 8811 	msr	BASEPRI, r0
 800099a:	4770      	bx	lr
 800099c:	f3af 8000 	nop.w

080009a0 <pxCurrentTCBConst2>:
 80009a0:	24000034 	.word	0x24000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop
	...

080009b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80009b0:	f3ef 8009 	mrs	r0, PSP
 80009b4:	f3bf 8f6f 	isb	sy
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <pxCurrentTCBConst>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f01e 0f10 	tst.w	lr, #16
 80009c0:	bf08      	it	eq
 80009c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80009c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ca:	6010      	str	r0, [r2, #0]
 80009cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80009d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80009d4:	b672      	cpsid	i
 80009d6:	f380 8811 	msr	BASEPRI, r0
 80009da:	f3bf 8f4f 	dsb	sy
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	b662      	cpsie	i
 80009e4:	f7ff ff44 	bl	8000870 <vTaskSwitchContext>
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	f380 8811 	msr	BASEPRI, r0
 80009f0:	bc09      	pop	{r0, r3}
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	6808      	ldr	r0, [r1, #0]
 80009f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fa:	f01e 0f10 	tst.w	lr, #16
 80009fe:	bf08      	it	eq
 8000a00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000a04:	f380 8809 	msr	PSP, r0
 8000a08:	f3bf 8f6f 	isb	sy
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <pxCurrentTCBConst>:
 8000a10:	24000034 	.word	0x24000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop

08000a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
        __asm volatile
 8000a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a22:	b672      	cpsid	i
 8000a24:	f383 8811 	msr	BASEPRI, r3
 8000a28:	f3bf 8f6f 	isb	sy
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	b662      	cpsie	i
 8000a32:	607b      	str	r3, [r7, #4]
    }
 8000a34:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8000a36:	f001 fcb9 	bl	80023ac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000a3a:	f7ff fe7d 	bl	8000738 <xTaskIncrementTick>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8000a44:	f001 fd10 	bl	8002468 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <SysTick_Handler+0x54>)
 8000a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e001      	b.n	8000a56 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8000a52:	f001 fced 	bl	8002430 <SEGGER_SYSVIEW_RecordExitISR>
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000a60:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000ed04 	.word	0xe000ed04

08000a70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000a76:	f3ef 8305 	mrs	r3, IPSR
 8000a7a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d916      	bls.n	8000ab0 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <vPortValidateInterruptPriority+0x78>)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <vPortValidateInterruptPriority+0x7c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	7afa      	ldrb	r2, [r7, #11]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d20c      	bcs.n	8000ab0 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8000a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a9a:	b672      	cpsid	i
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f3bf 8f6f 	isb	sy
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	b662      	cpsie	i
 8000aaa:	607b      	str	r3, [r7, #4]
    }
 8000aac:	bf00      	nop
 8000aae:	e7fe      	b.n	8000aae <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <vPortValidateInterruptPriority+0x80>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <vPortValidateInterruptPriority+0x84>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d90c      	bls.n	8000ada <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8000ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac4:	b672      	cpsid	i
 8000ac6:	f383 8811 	msr	BASEPRI, r3
 8000aca:	f3bf 8f6f 	isb	sy
 8000ace:	f3bf 8f4f 	dsb	sy
 8000ad2:	b662      	cpsie	i
 8000ad4:	603b      	str	r3, [r7, #0]
    }
 8000ad6:	bf00      	nop
 8000ad8:	e7fe      	b.n	8000ad8 <vPortValidateInterruptPriority+0x68>
    }
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e3f0 	.word	0xe000e3f0
 8000aec:	240000ec 	.word	0x240000ec
 8000af0:	e000ed0c 	.word	0xe000ed0c
 8000af4:	240000f0 	.word	0x240000f0

08000af8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <_cbSendSystemDesc+0x14>)
 8000afe:	f001 fbff 	bl	8002300 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <_cbSendSystemDesc+0x18>)
 8000b04:	f001 fbfc 	bl	8002300 <SEGGER_SYSVIEW_SendSysDesc>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08008f88 	.word	0x08008f88
 8000b10:	08008fb8 	.word	0x08008fb8

08000b14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SEGGER_SYSVIEW_Conf+0x20>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SEGGER_SYSVIEW_Conf+0x20>)
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SEGGER_SYSVIEW_Conf+0x24>)
 8000b22:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <SEGGER_SYSVIEW_Conf+0x28>)
 8000b24:	f001 f86e 	bl	8001c04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8000b28:	f04f 5010 	mov.w	r0, #603979776	; 0x24000000
 8000b2c:	f001 f8b0 	bl	8001c90 <SEGGER_SYSVIEW_SetRAMBase>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	24000008 	.word	0x24000008
 8000b38:	08000af9 	.word	0x08000af9
 8000b3c:	08008fdc 	.word	0x08008fdc

08000b40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	e033      	b.n	8000bb4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8000b4c:	491e      	ldr	r1, [pc, #120]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	491a      	ldr	r1, [pc, #104]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	440b      	add	r3, r1
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	4c16      	ldr	r4, [pc, #88]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4423      	add	r3, r4
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	681c      	ldr	r4, [r3, #0]
 8000b80:	4d11      	ldr	r5, [pc, #68]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	442b      	add	r3, r5
 8000b8e:	330c      	adds	r3, #12
 8000b90:	681d      	ldr	r5, [r3, #0]
 8000b92:	4e0d      	ldr	r6, [pc, #52]	; (8000bc8 <_cbSendTaskList+0x88>)
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4433      	add	r3, r6
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	462b      	mov	r3, r5
 8000ba8:	4622      	mov	r2, r4
 8000baa:	f000 f854 	bl	8000c56 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <_cbSendTaskList+0x8c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d3c6      	bcc.n	8000b4c <_cbSendTaskList+0xc>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc8:	240000f4 	.word	0x240000f4
 8000bcc:	24000194 	.word	0x24000194

08000bd0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8000bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8000bd8:	f7ff fd9c 	bl	8000714 <xTaskGetTickCountFromISR>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2200      	movs	r2, #0
 8000be0:	469a      	mov	sl, r3
 8000be2:	4693      	mov	fp, r2
 8000be4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8000be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	f04f 0a00 	mov.w	sl, #0
 8000bf4:	f04f 0b00 	mov.w	fp, #0
 8000bf8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000bfc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000c00:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000c04:	4652      	mov	r2, sl
 8000c06:	465b      	mov	r3, fp
 8000c08:	1a14      	subs	r4, r2, r0
 8000c0a:	eb63 0501 	sbc.w	r5, r3, r1
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	00ab      	lsls	r3, r5, #2
 8000c18:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000c1c:	00a2      	lsls	r2, r4, #2
 8000c1e:	4614      	mov	r4, r2
 8000c20:	461d      	mov	r5, r3
 8000c22:	eb14 0800 	adds.w	r8, r4, r0
 8000c26:	eb45 0901 	adc.w	r9, r5, r1
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c3e:	4690      	mov	r8, r2
 8000c40:	4699      	mov	r9, r3
 8000c42:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8000c46:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000c56 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b08a      	sub	sp, #40	; 0x28
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2214      	movs	r2, #20
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 f977 	bl	8008f60 <memset>
  TaskInfo.TaskID     = TaskID;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8000c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fa40 	bl	8002110 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8000d2e:	f001 fd33 	bl	8002798 <SEGGER_SYSVIEW_IsStarted>
 8000d32:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8000d3a:	f001 f86d 	bl	8001e18 <SEGGER_SYSVIEW_Start>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <_cbOnUARTRx+0x3c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d806      	bhi.n	8000d68 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <_cbOnUARTRx+0x3c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_cbOnUARTRx+0x3c>)
 8000d64:	701a      	strb	r2, [r3, #0]
    goto Done;
 8000d66:	e009      	b.n	8000d7c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8000d68:	f7ff ffde 	bl	8000d28 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <_cbOnUARTRx+0x3c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	2201      	movs	r2, #1
 8000d76:	4619      	mov	r1, r3
 8000d78:	f000 fb9e 	bl	80014b8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8000d7c:	bf00      	nop
}
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	24000000 	.word	0x24000000

08000d88 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000d92:	785b      	ldrb	r3, [r3, #1]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d80f      	bhi.n	8000db8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000d9a:	785b      	ldrb	r3, [r3, #1]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <_cbOnUARTTx+0x60>)
 8000da0:	5c9a      	ldrb	r2, [r3, r2]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000db0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8000db6:	e00f      	b.n	8000dd8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <_cbOnUARTTx+0x5c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fa1d 	bl	8001200 <SEGGER_RTT_ReadUpBufferNoLock>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da02      	bge.n	8000dd6 <_cbOnUARTTx+0x4e>
    r = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e000      	b.n	8000dd8 <_cbOnUARTTx+0x50>
  }
Done:
 8000dd6:	bf00      	nop
  return r;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000000 	.word	0x24000000
 8000de8:	08008fe4 	.word	0x08008fe4

08000dec <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <SEGGER_UART_init+0x1c>)
 8000df6:	4905      	ldr	r1, [pc, #20]	; (8000e0c <SEGGER_UART_init+0x20>)
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f865 	bl	8000ec8 <HIF_UART_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08000d49 	.word	0x08000d49
 8000e0c:	08000d89 	.word	0x08000d89

08000e10 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <USART2_IRQHandler+0x80>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d011      	beq.n	8000e4a <USART2_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <USART2_IRQHandler+0x84>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f003 030b 	and.w	r3, r3, #11
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d108      	bne.n	8000e4a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <USART2_IRQHandler+0x88>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d004      	beq.n	8000e4a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <USART2_IRQHandler+0x88>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	4610      	mov	r0, r2
 8000e48:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d01a      	beq.n	8000e8a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <USART2_IRQHandler+0x8c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d015      	beq.n	8000e88 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <USART2_IRQHandler+0x8c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1dfa      	adds	r2, r7, #7
 8000e62:	4610      	mov	r0, r2
 8000e64:	4798      	blx	r3
 8000e66:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <USART2_IRQHandler+0x90>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <USART2_IRQHandler+0x90>)
 8000e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e006      	b.n	8000e8a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <USART2_IRQHandler+0x80>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <USART2_IRQHandler+0x94>)
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e000      	b.n	8000e8a <USART2_IRQHandler+0x7a>
      return;
 8000e88:	bf00      	nop
    }
  }
}
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	4000441c 	.word	0x4000441c
 8000e94:	40004424 	.word	0x40004424
 8000e98:	24000198 	.word	0x24000198
 8000e9c:	2400019c 	.word	0x2400019c
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	40004428 	.word	0x40004428

08000ea8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HIF_UART_Init+0xc8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <HIF_UART_Init+0xc8>)
 8000eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ede:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  0);        // Enable IO port A clock
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <HIF_UART_Init+0xcc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <HIF_UART_Init+0xcc>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <HIF_UART_Init+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ef8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8000f02:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <HIF_UART_Init+0xd0>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HIF_UART_Init+0xd4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f14:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA2: alternate function
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HIF_UART_Init+0xd4>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HIF_UART_Init+0xd8>)
 8000f26:	f248 022d 	movw	r2, #32813	; 0x802d
 8000f2a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HIF_UART_Init+0xdc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
			| (0 << 13)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HIF_UART_Init+0xe0>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <HIF_UART_Init+0xe4>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	085b      	lsrs	r3, r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f56:	d302      	bcc.n	8000f5e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8000f58:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f5c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <HIF_UART_Init+0xe8>)
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HIF_UART_Init+0xec>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8000f74:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HIF_UART_Init+0xf0>)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8000f7a:	2106      	movs	r1, #6
 8000f7c:	2026      	movs	r0, #38	; 0x26
 8000f7e:	f7ff fea9 	bl	8000cd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8000f82:	2026      	movs	r0, #38	; 0x26
 8000f84:	f7ff fe88 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	580244e8 	.word	0x580244e8
 8000f94:	580244e0 	.word	0x580244e0
 8000f98:	58020020 	.word	0x58020020
 8000f9c:	58020000 	.word	0x58020000
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40004404 	.word	0x40004404
 8000fa8:	40004408 	.word	0x40004408
 8000fac:	0e4e1c00 	.word	0x0e4e1c00
 8000fb0:	4000440c 	.word	0x4000440c
 8000fb4:	24000198 	.word	0x24000198
 8000fb8:	2400019c 	.word	0x2400019c

08000fbc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <_DoInit+0xa0>)
 8000fc4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000fc6:	22a8      	movs	r2, #168	; 0xa8
 8000fc8:	2100      	movs	r1, #0
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f007 ffc8 	bl	8008f60 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4a20      	ldr	r2, [pc, #128]	; (8001060 <_DoInit+0xa4>)
 8000fe0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <_DoInit+0xa8>)
 8000fe6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <_DoInit+0xa4>)
 8001006:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <_DoInit+0xac>)
 800100c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2210      	movs	r2, #16
 8001012:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001026:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e00c      	b.n	800104a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f1c3 030f 	rsb	r3, r3, #15
 8001036:	4a0d      	ldr	r2, [pc, #52]	; (800106c <_DoInit+0xb0>)
 8001038:	5cd1      	ldrb	r1, [r2, r3]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	460a      	mov	r2, r1
 8001042:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3301      	adds	r3, #1
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d9ef      	bls.n	8001030 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001050:	f3bf 8f5f 	dmb	sy
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	240001a0 	.word	0x240001a0
 8001060:	08008fc8 	.word	0x08008fc8
 8001064:	24000248 	.word	0x24000248
 8001068:	24000648 	.word	0x24000648
 800106c:	08008fe8 	.word	0x08008fe8

08001070 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	d905      	bls.n	80010a0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	3b01      	subs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	e007      	b.n	80010b0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69b9      	ldr	r1, [r7, #24]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	1acb      	subs	r3, r1, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	3b01      	subs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ba:	4293      	cmp	r3, r2
 80010bc:	bf28      	it	cs
 80010be:	4613      	movcs	r3, r2
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80010c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4293      	cmp	r3, r2
 80010c8:	bf28      	it	cs
 80010ca:	4613      	movcs	r3, r2
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80010d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	6978      	ldr	r0, [r7, #20]
 80010de:	f007 ff31 	bl	8008f44 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80010e2:	6a3a      	ldr	r2, [r7, #32]
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	4413      	add	r3, r2
 80010e8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	4413      	add	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	4413      	add	r3, r2
 8001100:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	429a      	cmp	r2, r3
 800110a:	d101      	bne.n	8001110 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001110:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1b2      	bne.n	8001086 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001120:	6a3b      	ldr	r3, [r7, #32]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800112a:	b580      	push	{r7, lr}
 800112c:	b088      	sub	sp, #32
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d911      	bls.n	8001172 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	4413      	add	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	6938      	ldr	r0, [r7, #16]
 800115e:	f007 fef1 	bl	8008f44 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001162:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	441a      	add	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001170:	e01f      	b.n	80011b2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	4413      	add	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	6938      	ldr	r0, [r7, #16]
 8001186:	f007 fedd 	bl	8008f44 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4413      	add	r3, r2
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6938      	ldr	r0, [r7, #16]
 80011a4:	f007 fece 	bl	8008f44 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80011a8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80011ba:	b480      	push	{r7}
 80011bc:	b087      	sub	sp, #28
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d808      	bhi.n	80011e8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad2      	subs	r2, r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4413      	add	r3, r2
 80011e2:	3b01      	subs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e004      	b.n	80011f2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80011f2:	697b      	ldr	r3, [r7, #20]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800120c:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800121a:	f7ff fecf 	bl	8000fbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4a37      	ldr	r2, [pc, #220]	; (8001308 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800122c:	4413      	add	r3, r2
 800122e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	429a      	cmp	r2, r3
 800124a:	d92b      	bls.n	80012a4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4293      	cmp	r3, r2
 800125c:	bf28      	it	cs
 800125e:	4613      	movcs	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	4413      	add	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	6939      	ldr	r1, [r7, #16]
 8001270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001272:	f007 fe67 	bl	8008f44 <memcpy>
    NumBytesRead += NumBytesRem;
 8001276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	4413      	add	r3, r2
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800127e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	4413      	add	r3, r2
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800128e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4413      	add	r3, r2
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129c:	429a      	cmp	r2, r3
 800129e:	d101      	bne.n	80012a4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf28      	it	cs
 80012b4:	4613      	movcs	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	4413      	add	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	6939      	ldr	r1, [r7, #16]
 80012cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012ce:	f007 fe39 	bl	8008f44 <memcpy>
    NumBytesRead += NumBytesRem;
 80012d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	4413      	add	r3, r2
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80012da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4413      	add	r3, r2
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80012ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4413      	add	r3, r2
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001300:	4618      	mov	r0, r3
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	240001a0 	.word	0x240001a0

0800130c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <SEGGER_RTT_ReadNoLock+0x108>)
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <SEGGER_RTT_ReadNoLock+0x1e>
 8001326:	f7ff fe49 	bl	8000fbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	3360      	adds	r3, #96	; 0x60
 8001336:	4a37      	ldr	r2, [pc, #220]	; (8001414 <SEGGER_RTT_ReadNoLock+0x108>)
 8001338:	4413      	add	r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	429a      	cmp	r2, r3
 8001356:	d92b      	bls.n	80013b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4293      	cmp	r3, r2
 8001368:	bf28      	it	cs
 800136a:	4613      	movcs	r3, r2
 800136c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	4413      	add	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	6939      	ldr	r1, [r7, #16]
 800137c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800137e:	f007 fde1 	bl	8008f44 <memcpy>
    NumBytesRead += NumBytesRem;
 8001382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	4413      	add	r3, r2
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800138a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	4413      	add	r3, r2
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800139a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	4413      	add	r3, r2
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d101      	bne.n	80013b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf28      	it	cs
 80013c0:	4613      	movcs	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d019      	beq.n	80013fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	4413      	add	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	6939      	ldr	r1, [r7, #16]
 80013d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013da:	f007 fdb3 	bl	8008f44 <memcpy>
    NumBytesRead += NumBytesRem;
 80013de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	4413      	add	r3, r2
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80013f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	4413      	add	r3, r2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001408:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800140c:	4618      	mov	r0, r3
 800140e:	3730      	adds	r7, #48	; 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	240001a0 	.word	0x240001a0

08001418 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	3360      	adds	r3, #96	; 0x60
 8001434:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d029      	beq.n	8001496 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8001442:	2b02      	cmp	r3, #2
 8001444:	d82e      	bhi.n	80014a4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800144a:	2b01      	cmp	r3, #1
 800144c:	d013      	beq.n	8001476 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800144e:	e029      	b.n	80014a4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001450:	6978      	ldr	r0, [r7, #20]
 8001452:	f7ff feb2 	bl	80011ba <_GetAvailWriteSpace>
 8001456:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d202      	bcs.n	8001466 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001464:	e021      	b.n	80014aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	69b9      	ldr	r1, [r7, #24]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff fe5b 	bl	800112a <_WriteNoCheck>
    break;
 8001474:	e019      	b.n	80014aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff fe9f 	bl	80011ba <_GetAvailWriteSpace>
 800147c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4293      	cmp	r3, r2
 8001484:	bf28      	it	cs
 8001486:	4613      	movcs	r3, r2
 8001488:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	69b9      	ldr	r1, [r7, #24]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff fe4b 	bl	800112a <_WriteNoCheck>
    break;
 8001494:	e009      	b.n	80014aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	69b9      	ldr	r1, [r7, #24]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff fde8 	bl	8001070 <_WriteBlocking>
 80014a0:	61f8      	str	r0, [r7, #28]
    break;
 80014a2:	e002      	b.n	80014aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    break;
 80014a8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80014aa:	69fb      	ldr	r3, [r7, #28]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	240001a0 	.word	0x240001a0

080014b8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80014d2:	f7ff fd73 	bl	8000fbc <_DoInit>
  SEGGER_RTT_LOCK();
 80014d6:	f3ef 8311 	mrs	r3, BASEPRI
 80014da:	f04f 0120 	mov.w	r1, #32
 80014de:	f381 8811 	msr	BASEPRI, r1
 80014e2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff ff95 	bl	8001418 <SEGGER_RTT_WriteDownBufferNoLock>
 80014ee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80014f6:	697b      	ldr	r3, [r7, #20]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	240001a0 	.word	0x240001a0

08001504 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <SEGGER_RTT_AllocUpBuffer+0x20>
 8001520:	f7ff fd4c 	bl	8000fbc <_DoInit>
  SEGGER_RTT_LOCK();
 8001524:	f3ef 8311 	mrs	r3, BASEPRI
 8001528:	f04f 0120 	mov.w	r1, #32
 800152c:	f381 8811 	msr	BASEPRI, r1
 8001530:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8001534:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800153a:	6939      	ldr	r1, [r7, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3304      	adds	r3, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbeb      	blt.n	800153a <SEGGER_RTT_AllocUpBuffer+0x36>
 8001562:	e000      	b.n	8001566 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8001564:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	da3f      	bge.n	80015f0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	3304      	adds	r3, #4
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800159a:	6939      	ldr	r1, [r7, #16]
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	3320      	adds	r3, #32
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80015ae:	6939      	ldr	r1, [r7, #16]
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	3328      	adds	r3, #40	; 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80015c2:	6939      	ldr	r1, [r7, #16]
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	3324      	adds	r3, #36	; 0x24
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80015d6:	6939      	ldr	r1, [r7, #16]
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	332c      	adds	r3, #44	; 0x2c
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80015ea:	f3bf 8f5f 	dmb	sy
 80015ee:	e002      	b.n	80015f6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80015fc:	69fb      	ldr	r3, [r7, #28]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	240001a0 	.word	0x240001a0

0800160c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8001628:	f7ff fcc8 	bl	8000fbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800162e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d82c      	bhi.n	8001690 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8001636:	f3ef 8311 	mrs	r3, BASEPRI
 800163a:	f04f 0120 	mov.w	r1, #32
 800163e:	f381 8811 	msr	BASEPRI, r1
 8001642:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	3360      	adds	r3, #96	; 0x60
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00e      	beq.n	800167a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001680:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e002      	b.n	8001696 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001698:	4618      	mov	r0, r3
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	240001a0 	.word	0x240001a0

080016a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00f      	beq.n	80016da <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80016ba:	e002      	b.n	80016c2 <_EncodeStr+0x1e>
      Len++;
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3301      	adds	r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f6      	bne.n	80016bc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d901      	bls.n	80016da <_EncodeStr+0x36>
      Len = Limit;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2bfe      	cmp	r3, #254	; 0xfe
 80016de:	d806      	bhi.n	80016ee <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60fa      	str	r2, [r7, #12]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e011      	b.n	8001712 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	60fa      	str	r2, [r7, #12]
 80016f4:	22ff      	movs	r2, #255	; 0xff
 80016f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60fa      	str	r2, [r7, #12]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	0a19      	lsrs	r1, r3, #8
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60fa      	str	r2, [r7, #12]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001716:	e00a      	b.n	800172e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	1c53      	adds	r3, r2, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1c59      	adds	r1, r3, #1
 8001722:	60f9      	str	r1, [r7, #12]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
    n++;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3f0      	bcc.n	8001718 <_EncodeStr+0x74>
  }
  return pPayload;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3307      	adds	r3, #7
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001762:	4b35      	ldr	r3, [pc, #212]	; (8001838 <_HandleIncomingPacket+0xdc>)
 8001764:	7e1b      	ldrb	r3, [r3, #24]
 8001766:	4618      	mov	r0, r3
 8001768:	1cfb      	adds	r3, r7, #3
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fdcd 	bl	800130c <SEGGER_RTT_ReadNoLock>
 8001772:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d052      	beq.n	8001820 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b80      	cmp	r3, #128	; 0x80
 800177e:	d031      	beq.n	80017e4 <_HandleIncomingPacket+0x88>
 8001780:	2b80      	cmp	r3, #128	; 0x80
 8001782:	dc40      	bgt.n	8001806 <_HandleIncomingPacket+0xaa>
 8001784:	2b07      	cmp	r3, #7
 8001786:	dc15      	bgt.n	80017b4 <_HandleIncomingPacket+0x58>
 8001788:	2b00      	cmp	r3, #0
 800178a:	dd3c      	ble.n	8001806 <_HandleIncomingPacket+0xaa>
 800178c:	3b01      	subs	r3, #1
 800178e:	2b06      	cmp	r3, #6
 8001790:	d839      	bhi.n	8001806 <_HandleIncomingPacket+0xaa>
 8001792:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <_HandleIncomingPacket+0x3c>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017bb 	.word	0x080017bb
 800179c:	080017c1 	.word	0x080017c1
 80017a0:	080017c7 	.word	0x080017c7
 80017a4:	080017cd 	.word	0x080017cd
 80017a8:	080017d3 	.word	0x080017d3
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	080017df 	.word	0x080017df
 80017b4:	2b7f      	cmp	r3, #127	; 0x7f
 80017b6:	d035      	beq.n	8001824 <_HandleIncomingPacket+0xc8>
 80017b8:	e025      	b.n	8001806 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80017ba:	f000 fb2d 	bl	8001e18 <SEGGER_SYSVIEW_Start>
      break;
 80017be:	e036      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80017c0:	f000 fbe6 	bl	8001f90 <SEGGER_SYSVIEW_Stop>
      break;
 80017c4:	e033      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80017c6:	f000 fdbf 	bl	8002348 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80017ca:	e030      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80017cc:	f000 fd84 	bl	80022d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80017d0:	e02d      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80017d2:	f000 fc03 	bl	8001fdc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80017d6:	e02a      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80017d8:	f000 ffa0 	bl	800271c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80017dc:	e027      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80017de:	f000 ff7f 	bl	80026e0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80017e2:	e024      	b.n	800182e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <_HandleIncomingPacket+0xdc>)
 80017e6:	7e1b      	ldrb	r3, [r3, #24]
 80017e8:	4618      	mov	r0, r3
 80017ea:	1cfb      	adds	r3, r7, #3
 80017ec:	2201      	movs	r2, #1
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff fd8c 	bl	800130c <SEGGER_RTT_ReadNoLock>
 80017f4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d015      	beq.n	8001828 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 feee 	bl	80025e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001804:	e010      	b.n	8001828 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	b25b      	sxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	da0e      	bge.n	800182c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <_HandleIncomingPacket+0xdc>)
 8001810:	7e1b      	ldrb	r3, [r3, #24]
 8001812:	4618      	mov	r0, r3
 8001814:	1cfb      	adds	r3, r7, #3
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff fd77 	bl	800130c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800181e:	e005      	b.n	800182c <_HandleIncomingPacket+0xd0>
    }
  }
 8001820:	bf00      	nop
 8001822:	e004      	b.n	800182e <_HandleIncomingPacket+0xd2>
      break;
 8001824:	bf00      	nop
 8001826:	e002      	b.n	800182e <_HandleIncomingPacket+0xd2>
      break;
 8001828:	bf00      	nop
 800182a:	e000      	b.n	800182e <_HandleIncomingPacket+0xd2>
      break;
 800182c:	bf00      	nop
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	24078260 	.word	0x24078260

0800183c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001842:	2301      	movs	r3, #1
 8001844:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <_TrySendOverflowPacket+0xe0>)
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
 8001856:	e00b      	b.n	8001870 <_TrySendOverflowPacket+0x34>
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	b2da      	uxtb	r2, r3
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	09db      	lsrs	r3, r3, #7
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001872:	2b7f      	cmp	r3, #127	; 0x7f
 8001874:	d8f0      	bhi.n	8001858 <_TrySendOverflowPacket+0x1c>
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800187c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001884:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <_TrySendOverflowPacket+0xe4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <_TrySendOverflowPacket+0xe0>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	623b      	str	r3, [r7, #32]
 800189e:	e00b      	b.n	80018b8 <_TrySendOverflowPacket+0x7c>
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	1c59      	adds	r1, r3, #1
 80018a8:	6279      	str	r1, [r7, #36]	; 0x24
 80018aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	09db      	lsrs	r3, r3, #7
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	2b7f      	cmp	r3, #127	; 0x7f
 80018bc:	d8f0      	bhi.n	80018a0 <_TrySendOverflowPacket+0x64>
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	627a      	str	r2, [r7, #36]	; 0x24
 80018c4:	6a3a      	ldr	r2, [r7, #32]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <_TrySendOverflowPacket+0xe0>)
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	4618      	mov	r0, r3
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	f7fe fcfe 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80018e4:	4603      	mov	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80018e8:	f7ff fade 	bl	8000ea8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <_TrySendOverflowPacket+0xe0>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_TrySendOverflowPacket+0xe0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <_TrySendOverflowPacket+0xe0>)
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e004      	b.n	8001910 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <_TrySendOverflowPacket+0xe0>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	4a03      	ldr	r2, [pc, #12]	; (800191c <_TrySendOverflowPacket+0xe0>)
 800190e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001910:	693b      	ldr	r3, [r7, #16]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3730      	adds	r7, #48	; 0x30
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24078260 	.word	0x24078260
 8001920:	e0001004 	.word	0xe0001004

08001924 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001930:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <_SendPacket+0x268>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d010      	beq.n	800195a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001938:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <_SendPacket+0x268>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8130 	beq.w	8001ba2 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001942:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <_SendPacket+0x268>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d109      	bne.n	800195e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800194a:	f7ff ff77 	bl	800183c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800194e:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <_SendPacket+0x268>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	f040 8127 	bne.w	8001ba6 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8001958:	e001      	b.n	800195e <_SendPacket+0x3a>
    goto Send;
 800195a:	bf00      	nop
 800195c:	e000      	b.n	8001960 <_SendPacket+0x3c>
Send:
 800195e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b1f      	cmp	r3, #31
 8001964:	d809      	bhi.n	800197a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001966:	4b89      	ldr	r3, [pc, #548]	; (8001b8c <_SendPacket+0x268>)
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 8118 	bne.w	8001baa <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b17      	cmp	r3, #23
 800197e:	d807      	bhi.n	8001990 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3b01      	subs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e0c4      	b.n	8001b1a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b7f      	cmp	r3, #127	; 0x7f
 800199c:	d912      	bls.n	80019c4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	09da      	lsrs	r2, r3, #7
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	3a01      	subs	r2, #1
 80019b6:	60fa      	str	r2, [r7, #12]
 80019b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	e006      	b.n	80019d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b7e      	cmp	r3, #126	; 0x7e
 80019d6:	d807      	bhi.n	80019e8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3b01      	subs	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e098      	b.n	8001b1a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ee:	d212      	bcs.n	8001a16 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	09da      	lsrs	r2, r3, #7
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	3a01      	subs	r2, #1
 8001a08:	60fa      	str	r2, [r7, #12]
 8001a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e081      	b.n	8001b1a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a1c:	d21d      	bcs.n	8001a5a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0b9a      	lsrs	r2, r3, #14
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	09db      	lsrs	r3, r3, #7
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	3a01      	subs	r2, #1
 8001a38:	60fa      	str	r2, [r7, #12]
 8001a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	3a01      	subs	r2, #1
 8001a4c:	60fa      	str	r2, [r7, #12]
 8001a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e05f      	b.n	8001b1a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a60:	d228      	bcs.n	8001ab4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0d5a      	lsrs	r2, r3, #21
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0b9b      	lsrs	r3, r3, #14
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	60fa      	str	r2, [r7, #12]
 8001a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	09db      	lsrs	r3, r3, #7
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	3a01      	subs	r2, #1
 8001a92:	60fa      	str	r2, [r7, #12]
 8001a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	60fa      	str	r2, [r7, #12]
 8001aa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e032      	b.n	8001b1a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	0f1a      	lsrs	r2, r3, #28
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0d5b      	lsrs	r3, r3, #21
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	3a01      	subs	r2, #1
 8001ace:	60fa      	str	r2, [r7, #12]
 8001ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0b9b      	lsrs	r3, r3, #14
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	3a01      	subs	r2, #1
 8001ae4:	60fa      	str	r2, [r7, #12]
 8001ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	09db      	lsrs	r3, r3, #7
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	3a01      	subs	r2, #1
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	3a01      	subs	r2, #1
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <_SendPacket+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <_SendPacket+0x268>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	e00b      	b.n	8001b4c <_SendPacket+0x228>
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	1c59      	adds	r1, r3, #1
 8001b3c:	6279      	str	r1, [r7, #36]	; 0x24
 8001b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	09db      	lsrs	r3, r3, #7
 8001b4a:	623b      	str	r3, [r7, #32]
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b50:	d8f0      	bhi.n	8001b34 <_SendPacket+0x210>
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	627a      	str	r2, [r7, #36]	; 0x24
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <_SendPacket+0x268>)
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	4618      	mov	r0, r3
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	f7fe fbb5 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001b76:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8001b78:	f7ff f996 	bl	8000ea8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001b82:	4a02      	ldr	r2, [pc, #8]	; (8001b8c <_SendPacket+0x268>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	60d3      	str	r3, [r2, #12]
 8001b88:	e010      	b.n	8001bac <_SendPacket+0x288>
 8001b8a:	bf00      	nop
 8001b8c:	24078260 	.word	0x24078260
 8001b90:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <_SendPacket+0x2d8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <_SendPacket+0x2d8>)
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e004      	b.n	8001bac <_SendPacket+0x288>
    goto SendDone;
 8001ba2:	bf00      	nop
 8001ba4:	e002      	b.n	8001bac <_SendPacket+0x288>
      goto SendDone;
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <_SendPacket+0x288>
      goto SendDone;
 8001baa:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <_SendPacket+0x2d8>)
 8001bae:	7e1b      	ldrb	r3, [r3, #24]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <_SendPacket+0x2dc>)
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	440b      	add	r3, r1
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	336c      	adds	r3, #108	; 0x6c
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <_SendPacket+0x2d8>)
 8001bc4:	7e1b      	ldrb	r3, [r3, #24]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	490d      	ldr	r1, [pc, #52]	; (8001c00 <_SendPacket+0x2dc>)
 8001bca:	4603      	mov	r3, r0
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4403      	add	r3, r0
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3370      	adds	r3, #112	; 0x70
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d00b      	beq.n	8001bf4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <_SendPacket+0x2d8>)
 8001bde:	789b      	ldrb	r3, [r3, #2]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <_SendPacket+0x2d8>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001bea:	f7ff fdb7 	bl	800175c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001bee:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <_SendPacket+0x2d8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	24078260 	.word	0x24078260
 8001c00:	240001a0 	.word	0x240001a0

08001c04 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001c12:	2300      	movs	r3, #0
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <SEGGER_SYSVIEW_Init+0x74>)
 8001c16:	4919      	ldr	r1, [pc, #100]	; (8001c7c <SEGGER_SYSVIEW_Init+0x78>)
 8001c18:	4819      	ldr	r0, [pc, #100]	; (8001c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8001c1a:	f7ff fc73 	bl	8001504 <SEGGER_RTT_AllocUpBuffer>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c24:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c28:	785a      	ldrb	r2, [r3, #1]
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c2c:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c30:	7e1b      	ldrb	r3, [r3, #24]
 8001c32:	4618      	mov	r0, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2308      	movs	r3, #8
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <SEGGER_SYSVIEW_Init+0x84>)
 8001c3c:	4910      	ldr	r1, [pc, #64]	; (8001c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8001c3e:	f7ff fce5 	bl	800160c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <SEGGER_SYSVIEW_Init+0x88>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c4e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001c56:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001c5c:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SEGGER_SYSVIEW_Init+0x80>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	00077c00 	.word	0x00077c00
 8001c7c:	24000658 	.word	0x24000658
 8001c80:	08008fd4 	.word	0x08008fd4
 8001c84:	24078260 	.word	0x24078260
 8001c88:	24078258 	.word	0x24078258
 8001c8c:	e0001004 	.word	0xe0001004

08001c90 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6113      	str	r3, [r2, #16]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	24078260 	.word	0x24078260

08001cb0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8001cbc:	f04f 0120 	mov.w	r1, #32
 8001cc0:	f381 8811 	msr	BASEPRI, r1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001cc8:	f7ff fd3c 	bl	8001744 <_PreparePacket>
 8001ccc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	f7ff fe26 	bl	8001924 <_SendPacket>
  RECORD_END();
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f383 8811 	msr	BASEPRI, r3
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24078290 	.word	0x24078290

08001cec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8001cfa:	f04f 0120 	mov.w	r1, #32
 8001cfe:	f381 8811 	msr	BASEPRI, r1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	4816      	ldr	r0, [pc, #88]	; (8001d60 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001d06:	f7ff fd1d 	bl	8001744 <_PreparePacket>
 8001d0a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e00b      	b.n	8001d32 <SEGGER_SYSVIEW_RecordU32+0x46>
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	61f9      	str	r1, [r7, #28]
 8001d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	09db      	lsrs	r3, r3, #7
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b7f      	cmp	r3, #127	; 0x7f
 8001d36:	d8f0      	bhi.n	8001d1a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	61fa      	str	r2, [r7, #28]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	6938      	ldr	r0, [r7, #16]
 8001d4e:	f7ff fde9 	bl	8001924 <_SendPacket>
  RECORD_END();
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f383 8811 	msr	BASEPRI, r3
}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	24078290 	.word	0x24078290

08001d64 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001d70:	f3ef 8311 	mrs	r3, BASEPRI
 8001d74:	f04f 0120 	mov.w	r1, #32
 8001d78:	f381 8811 	msr	BASEPRI, r1
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	4825      	ldr	r0, [pc, #148]	; (8001e14 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001d80:	f7ff fce0 	bl	8001744 <_PreparePacket>
 8001d84:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d92:	e00b      	b.n	8001dac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	09db      	lsrs	r3, r3, #7
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	2b7f      	cmp	r3, #127	; 0x7f
 8001db0:	d8f0      	bhi.n	8001d94 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	e00b      	b.n	8001de4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	1c59      	adds	r1, r3, #1
 8001dd4:	6279      	str	r1, [r7, #36]	; 0x24
 8001dd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	09db      	lsrs	r3, r3, #7
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2b7f      	cmp	r3, #127	; 0x7f
 8001de8:	d8f0      	bhi.n	8001dcc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	627a      	str	r2, [r7, #36]	; 0x24
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	6979      	ldr	r1, [r7, #20]
 8001dfe:	69b8      	ldr	r0, [r7, #24]
 8001e00:	f7ff fd90 	bl	8001924 <_SendPacket>
  RECORD_END();
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f383 8811 	msr	BASEPRI, r3
}
 8001e0a:	bf00      	nop
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24078290 	.word	0x24078290

08001e18 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	; 0x30
 8001e1c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001e24:	f3ef 8311 	mrs	r3, BASEPRI
 8001e28:	f04f 0120 	mov.w	r1, #32
 8001e2c:	f381 8811 	msr	BASEPRI, r1
 8001e30:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001e32:	4b54      	ldr	r3, [pc, #336]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	220a      	movs	r2, #10
 8001e38:	4953      	ldr	r1, [pc, #332]	; (8001f88 <SEGGER_SYSVIEW_Start+0x170>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fa50 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8001e46:	f7ff f82f 	bl	8000ea8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	f7ff ff30 	bl	8001cb0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001e50:	f3ef 8311 	mrs	r3, BASEPRI
 8001e54:	f04f 0120 	mov.w	r1, #32
 8001e58:	f381 8811 	msr	BASEPRI, r1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	484b      	ldr	r0, [pc, #300]	; (8001f8c <SEGGER_SYSVIEW_Start+0x174>)
 8001e60:	f7ff fc70 	bl	8001744 <_PreparePacket>
 8001e64:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6e:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e74:	e00b      	b.n	8001e8e <SEGGER_SYSVIEW_Start+0x76>
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	1c59      	adds	r1, r3, #1
 8001e7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	09db      	lsrs	r3, r3, #7
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e90:	2b7f      	cmp	r3, #127	; 0x7f
 8001e92:	d8f0      	bhi.n	8001e76 <SEGGER_SYSVIEW_Start+0x5e>
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	e00b      	b.n	8001ec8 <SEGGER_SYSVIEW_Start+0xb0>
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	1c59      	adds	r1, r3, #1
 8001eb8:	6279      	str	r1, [r7, #36]	; 0x24
 8001eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	09db      	lsrs	r3, r3, #7
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	2b7f      	cmp	r3, #127	; 0x7f
 8001ecc:	d8f0      	bhi.n	8001eb0 <SEGGER_SYSVIEW_Start+0x98>
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	e00b      	b.n	8001f02 <SEGGER_SYSVIEW_Start+0xea>
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	1c59      	adds	r1, r3, #1
 8001ef2:	61f9      	str	r1, [r7, #28]
 8001ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	09db      	lsrs	r3, r3, #7
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b7f      	cmp	r3, #127	; 0x7f
 8001f06:	d8f0      	bhi.n	8001eea <SEGGER_SYSVIEW_Start+0xd2>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	61fa      	str	r2, [r7, #28]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	e00b      	b.n	8001f3a <SEGGER_SYSVIEW_Start+0x122>
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	1c59      	adds	r1, r3, #1
 8001f2a:	6179      	str	r1, [r7, #20]
 8001f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	09db      	lsrs	r3, r3, #7
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f3e:	d8f0      	bhi.n	8001f22 <SEGGER_SYSVIEW_Start+0x10a>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	617a      	str	r2, [r7, #20]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001f50:	2218      	movs	r2, #24
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fce5 	bl	8001924 <_SendPacket>
      RECORD_END();
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SEGGER_SYSVIEW_Start+0x16c>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001f6e:	f000 f9eb 	bl	8002348 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001f72:	f000 f9b1 	bl	80022d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001f76:	f000 fbd1 	bl	800271c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8001f7a:	bf00      	nop
 8001f7c:	3730      	adds	r7, #48	; 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	24078260 	.word	0x24078260
 8001f88:	08008ffc 	.word	0x08008ffc
 8001f8c:	24078290 	.word	0x24078290

08001f90 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001f96:	f3ef 8311 	mrs	r3, BASEPRI
 8001f9a:	f04f 0120 	mov.w	r1, #32
 8001f9e:	f381 8811 	msr	BASEPRI, r1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <SEGGER_SYSVIEW_Stop+0x44>)
 8001fa6:	f7ff fbcd 	bl	8001744 <_PreparePacket>
 8001faa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <SEGGER_SYSVIEW_Stop+0x48>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001fb4:	220b      	movs	r2, #11
 8001fb6:	6839      	ldr	r1, [r7, #0]
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f7ff fcb3 	bl	8001924 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <SEGGER_SYSVIEW_Stop+0x48>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f383 8811 	msr	BASEPRI, r3
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	24078290 	.word	0x24078290
 8001fd8:	24078260 	.word	0x24078260

08001fdc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8001fe6:	f04f 0120 	mov.w	r1, #32
 8001fea:	f381 8811 	msr	BASEPRI, r1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4845      	ldr	r0, [pc, #276]	; (8002108 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001ff2:	f7ff fba7 	bl	8001744 <_PreparePacket>
 8001ff6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002000:	4b42      	ldr	r3, [pc, #264]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
 8002006:	e00b      	b.n	8002020 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	b2da      	uxtb	r2, r3
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	09db      	lsrs	r3, r3, #7
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	2b7f      	cmp	r3, #127	; 0x7f
 8002024:	d8f0      	bhi.n	8002008 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800202c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	e00b      	b.n	800205a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1c59      	adds	r1, r3, #1
 800204a:	6279      	str	r1, [r7, #36]	; 0x24
 800204c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	09db      	lsrs	r3, r3, #7
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	2b7f      	cmp	r3, #127	; 0x7f
 800205e:	d8f0      	bhi.n	8002042 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	627a      	str	r2, [r7, #36]	; 0x24
 8002066:	6a3a      	ldr	r2, [r7, #32]
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	e00b      	b.n	8002094 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	1c59      	adds	r1, r3, #1
 8002084:	61f9      	str	r1, [r7, #28]
 8002086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	09db      	lsrs	r3, r3, #7
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b7f      	cmp	r3, #127	; 0x7f
 8002098:	d8f0      	bhi.n	800207c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	61fa      	str	r2, [r7, #28]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e00b      	b.n	80020cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1c59      	adds	r1, r3, #1
 80020bc:	6179      	str	r1, [r7, #20]
 80020be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	09db      	lsrs	r3, r3, #7
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b7f      	cmp	r3, #127	; 0x7f
 80020d0:	d8f0      	bhi.n	80020b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	617a      	str	r2, [r7, #20]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80020e2:	2218      	movs	r2, #24
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	68b8      	ldr	r0, [r7, #8]
 80020e8:	f7ff fc1c 	bl	8001924 <_SendPacket>
  RECORD_END();
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	4798      	blx	r3
  }
}
 8002100:	bf00      	nop
 8002102:	3730      	adds	r7, #48	; 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	24078290 	.word	0x24078290
 800210c:	24078260 	.word	0x24078260

08002110 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b092      	sub	sp, #72	; 0x48
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002118:	f3ef 8311 	mrs	r3, BASEPRI
 800211c:	f04f 0120 	mov.w	r1, #32
 8002120:	f381 8811 	msr	BASEPRI, r1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	486a      	ldr	r0, [pc, #424]	; (80022d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002128:	f7ff fb0c 	bl	8001744 <_PreparePacket>
 800212c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	647b      	str	r3, [r7, #68]	; 0x44
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	643b      	str	r3, [r7, #64]	; 0x40
 8002142:	e00b      	b.n	800215c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002146:	b2da      	uxtb	r2, r3
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	1c59      	adds	r1, r3, #1
 800214c:	6479      	str	r1, [r7, #68]	; 0x44
 800214e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002158:	09db      	lsrs	r3, r3, #7
 800215a:	643b      	str	r3, [r7, #64]	; 0x40
 800215c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215e:	2b7f      	cmp	r3, #127	; 0x7f
 8002160:	d8f0      	bhi.n	8002144 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8002162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	647a      	str	r2, [r7, #68]	; 0x44
 8002168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002170:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38
 800217c:	e00b      	b.n	8002196 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	b2da      	uxtb	r2, r3
 8002182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002184:	1c59      	adds	r1, r3, #1
 8002186:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	09db      	lsrs	r3, r3, #7
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	2b7f      	cmp	r3, #127	; 0x7f
 800219a:	d8f0      	bhi.n	800217e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800219c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	4619      	mov	r1, r3
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff fa75 	bl	80016a4 <_EncodeStr>
 80021ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80021bc:	2209      	movs	r2, #9
 80021be:	68f9      	ldr	r1, [r7, #12]
 80021c0:	6938      	ldr	r0, [r7, #16]
 80021c2:	f7ff fbaf 	bl	8001924 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	e00b      	b.n	80021f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	6379      	str	r1, [r7, #52]	; 0x34
 80021e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	09db      	lsrs	r3, r3, #7
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	2b7f      	cmp	r3, #127	; 0x7f
 80021f8:	d8f0      	bhi.n	80021dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80021fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	637a      	str	r2, [r7, #52]	; 0x34
 8002200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
 8002214:	e00b      	b.n	800222e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	b2da      	uxtb	r2, r3
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	1c59      	adds	r1, r3, #1
 800221e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	09db      	lsrs	r3, r3, #7
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	2b7f      	cmp	r3, #127	; 0x7f
 8002232:	d8f0      	bhi.n	8002216 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800223a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	e00b      	b.n	8002268 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	6279      	str	r1, [r7, #36]	; 0x24
 800225a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	09db      	lsrs	r3, r3, #7
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	2b7f      	cmp	r3, #127	; 0x7f
 800226c:	d8f0      	bhi.n	8002250 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	627a      	str	r2, [r7, #36]	; 0x24
 8002274:	6a3a      	ldr	r2, [r7, #32]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e00b      	b.n	80022a0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	61f9      	str	r1, [r7, #28]
 8002292:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	09db      	lsrs	r3, r3, #7
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b7f      	cmp	r3, #127	; 0x7f
 80022a4:	d8f0      	bhi.n	8002288 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	61fa      	str	r2, [r7, #28]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80022b6:	2215      	movs	r2, #21
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	6938      	ldr	r0, [r7, #16]
 80022bc:	f7ff fb32 	bl	8001924 <_SendPacket>
  RECORD_END();
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f383 8811 	msr	BASEPRI, r3
}
 80022c6:	bf00      	nop
 80022c8:	3748      	adds	r7, #72	; 0x48
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	24078290 	.word	0x24078290
 80022d4:	24078260 	.word	0x24078260

080022d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80022ee:	4b03      	ldr	r3, [pc, #12]	; (80022fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4798      	blx	r3
  }
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	24078260 	.word	0x24078260

08002300 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002308:	f3ef 8311 	mrs	r3, BASEPRI
 800230c:	f04f 0120 	mov.w	r1, #32
 8002310:	f381 8811 	msr	BASEPRI, r1
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	480b      	ldr	r0, [pc, #44]	; (8002344 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002318:	f7ff fa14 	bl	8001744 <_PreparePacket>
 800231c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	6938      	ldr	r0, [r7, #16]
 8002324:	f7ff f9be 	bl	80016a4 <_EncodeStr>
 8002328:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800232a:	220e      	movs	r2, #14
 800232c:	68f9      	ldr	r1, [r7, #12]
 800232e:	6938      	ldr	r0, [r7, #16]
 8002330:	f7ff faf8 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f383 8811 	msr	BASEPRI, r3
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	24078290 	.word	0x24078290

08002348 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d015      	beq.n	800238c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4798      	blx	r3
 8002368:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800236c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800236e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	000a      	movs	r2, r1
 800237c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800237e:	4613      	mov	r3, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4621      	mov	r1, r4
 8002384:	200d      	movs	r0, #13
 8002386:	f7ff fced 	bl	8001d64 <SEGGER_SYSVIEW_RecordU32x2>
 800238a:	e006      	b.n	800239a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	200c      	movs	r0, #12
 8002394:	f7ff fcaa 	bl	8001cec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}
 80023a2:	bf00      	nop
 80023a4:	24078260 	.word	0x24078260
 80023a8:	e0001004 	.word	0xe0001004

080023ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80023b2:	f3ef 8311 	mrs	r3, BASEPRI
 80023b6:	f04f 0120 	mov.w	r1, #32
 80023ba:	f381 8811 	msr	BASEPRI, r1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	4819      	ldr	r0, [pc, #100]	; (8002428 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80023c2:	f7ff f9bf 	bl	8001744 <_PreparePacket>
 80023c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	e00b      	b.n	80023f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	1c59      	adds	r1, r3, #1
 80023e8:	6179      	str	r1, [r7, #20]
 80023ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	09db      	lsrs	r3, r3, #7
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b7f      	cmp	r3, #127	; 0x7f
 80023fc:	d8f0      	bhi.n	80023e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	617a      	str	r2, [r7, #20]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800240e:	2202      	movs	r2, #2
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	68b8      	ldr	r0, [r7, #8]
 8002414:	f7ff fa86 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f383 8811 	msr	BASEPRI, r3
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	24078290 	.word	0x24078290
 800242c:	e000ed04 	.word	0xe000ed04

08002430 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002436:	f3ef 8311 	mrs	r3, BASEPRI
 800243a:	f04f 0120 	mov.w	r1, #32
 800243e:	f381 8811 	msr	BASEPRI, r1
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	4807      	ldr	r0, [pc, #28]	; (8002464 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002446:	f7ff f97d 	bl	8001744 <_PreparePacket>
 800244a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800244c:	2203      	movs	r2, #3
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f7ff fa67 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f383 8811 	msr	BASEPRI, r3
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	24078290 	.word	0x24078290

08002468 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800246e:	f3ef 8311 	mrs	r3, BASEPRI
 8002472:	f04f 0120 	mov.w	r1, #32
 8002476:	f381 8811 	msr	BASEPRI, r1
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800247e:	f7ff f961 	bl	8001744 <_PreparePacket>
 8002482:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002484:	2212      	movs	r2, #18
 8002486:	6839      	ldr	r1, [r7, #0]
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f7ff fa4b 	bl	8001924 <_SendPacket>
  RECORD_END();
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f383 8811 	msr	BASEPRI, r3
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	24078290 	.word	0x24078290

080024a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80024a6:	f3ef 8311 	mrs	r3, BASEPRI
 80024aa:	f04f 0120 	mov.w	r1, #32
 80024ae:	f381 8811 	msr	BASEPRI, r1
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	4807      	ldr	r0, [pc, #28]	; (80024d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80024b6:	f7ff f945 	bl	8001744 <_PreparePacket>
 80024ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80024bc:	2211      	movs	r2, #17
 80024be:	6839      	ldr	r1, [r7, #0]
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7ff fa2f 	bl	8001924 <_SendPacket>
  RECORD_END();
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f383 8811 	msr	BASEPRI, r3
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	24078290 	.word	0x24078290

080024d8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80024e0:	f3ef 8311 	mrs	r3, BASEPRI
 80024e4:	f04f 0120 	mov.w	r1, #32
 80024e8:	f381 8811 	msr	BASEPRI, r1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	4819      	ldr	r0, [pc, #100]	; (8002554 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80024f0:	f7ff f928 	bl	8001744 <_PreparePacket>
 80024f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	e00b      	b.n	8002526 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	1c59      	adds	r1, r3, #1
 8002516:	61f9      	str	r1, [r7, #28]
 8002518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	09db      	lsrs	r3, r3, #7
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b7f      	cmp	r3, #127	; 0x7f
 800252a:	d8f0      	bhi.n	800250e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	61fa      	str	r2, [r7, #28]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800253c:	2204      	movs	r2, #4
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	6938      	ldr	r0, [r7, #16]
 8002542:	f7ff f9ef 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f383 8811 	msr	BASEPRI, r3
}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	24078290 	.word	0x24078290
 8002558:	24078260 	.word	0x24078260

0800255c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002564:	f3ef 8311 	mrs	r3, BASEPRI
 8002568:	f04f 0120 	mov.w	r1, #32
 800256c:	f381 8811 	msr	BASEPRI, r1
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	4819      	ldr	r0, [pc, #100]	; (80025d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8002574:	f7ff f8e6 	bl	8001744 <_PreparePacket>
 8002578:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	e00b      	b.n	80025aa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	61f9      	str	r1, [r7, #28]
 800259c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	09db      	lsrs	r3, r3, #7
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b7f      	cmp	r3, #127	; 0x7f
 80025ae:	d8f0      	bhi.n	8002592 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	61fa      	str	r2, [r7, #28]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80025c0:	2206      	movs	r2, #6
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	6938      	ldr	r0, [r7, #16]
 80025c6:	f7ff f9ad 	bl	8001924 <_SendPacket>
  RECORD_END();
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f383 8811 	msr	BASEPRI, r3
}
 80025d0:	bf00      	nop
 80025d2:	3720      	adds	r7, #32
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	24078290 	.word	0x24078290
 80025dc:	24078260 	.word	0x24078260

080025e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	; 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06d      	beq.n	80026ce <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80025f2:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fc:	e008      	b.n	8002610 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	3301      	adds	r3, #1
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002614:	429a      	cmp	r2, r3
 8002616:	d3f2      	bcc.n	80025fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8002618:	e000      	b.n	800261c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800261a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d055      	beq.n	80026ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002622:	f3ef 8311 	mrs	r3, BASEPRI
 8002626:	f04f 0120 	mov.w	r1, #32
 800262a:	f381 8811 	msr	BASEPRI, r1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	482a      	ldr	r0, [pc, #168]	; (80026dc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002632:	f7ff f887 	bl	8001744 <_PreparePacket>
 8002636:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	e00b      	b.n	800265e <SEGGER_SYSVIEW_SendModule+0x7e>
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	6279      	str	r1, [r7, #36]	; 0x24
 8002650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	09db      	lsrs	r3, r3, #7
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2b7f      	cmp	r3, #127	; 0x7f
 8002662:	d8f0      	bhi.n	8002646 <SEGGER_SYSVIEW_SendModule+0x66>
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	627a      	str	r2, [r7, #36]	; 0x24
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e00b      	b.n	8002698 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	1c59      	adds	r1, r3, #1
 8002688:	61f9      	str	r1, [r7, #28]
 800268a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	09db      	lsrs	r3, r3, #7
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b7f      	cmp	r3, #127	; 0x7f
 800269c:	d8f0      	bhi.n	8002680 <SEGGER_SYSVIEW_SendModule+0xa0>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	61fa      	str	r2, [r7, #28]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	4619      	mov	r1, r3
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7fe fff4 	bl	80016a4 <_EncodeStr>
 80026bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80026be:	2216      	movs	r2, #22
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	6938      	ldr	r0, [r7, #16]
 80026c4:	f7ff f92e 	bl	8001924 <_SendPacket>
      RECORD_END();
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80026ce:	bf00      	nop
 80026d0:	3730      	adds	r7, #48	; 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	24078288 	.word	0x24078288
 80026dc:	24078290 	.word	0x24078290

080026e0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00f      	beq.n	800270e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	24078288 	.word	0x24078288

0800271c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002722:	f3ef 8311 	mrs	r3, BASEPRI
 8002726:	f04f 0120 	mov.w	r1, #32
 800272a:	f381 8811 	msr	BASEPRI, r1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	4817      	ldr	r0, [pc, #92]	; (8002790 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002732:	f7ff f807 	bl	8001744 <_PreparePacket>
 8002736:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e00b      	b.n	8002760 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	6179      	str	r1, [r7, #20]
 8002752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	09db      	lsrs	r3, r3, #7
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b7f      	cmp	r3, #127	; 0x7f
 8002764:	d8f0      	bhi.n	8002748 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	617a      	str	r2, [r7, #20]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002776:	221b      	movs	r2, #27
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68b8      	ldr	r0, [r7, #8]
 800277c:	f7ff f8d2 	bl	8001924 <_SendPacket>
  RECORD_END();
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f383 8811 	msr	BASEPRI, r3
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	24078290 	.word	0x24078290
 8002794:	2407828c 	.word	0x2407828c

08002798 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 800279e:	7e1b      	ldrb	r3, [r3, #24]
 80027a0:	4619      	mov	r1, r3
 80027a2:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80027a4:	460b      	mov	r3, r1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	440b      	add	r3, r1
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	336c      	adds	r3, #108	; 0x6c
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027b4:	7e1b      	ldrb	r3, [r3, #24]
 80027b6:	4618      	mov	r0, r3
 80027b8:	490d      	ldr	r1, [pc, #52]	; (80027f0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80027ba:	4603      	mov	r3, r0
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4403      	add	r3, r0
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	3370      	adds	r3, #112	; 0x70
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d00b      	beq.n	80027e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027ce:	789b      	ldrb	r3, [r3, #2]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d107      	bne.n	80027e4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80027da:	f7fe ffbf 	bl	800175c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80027de:	4b03      	ldr	r3, [pc, #12]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80027e4:	4b01      	ldr	r3, [pc, #4]	; (80027ec <SEGGER_SYSVIEW_IsStarted+0x54>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	24078260 	.word	0x24078260
 80027f0:	240001a0 	.word	0x240001a0

080027f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027fa:	f000 fc9d 	bl	8003138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027fe:	f000 f843 	bl	8002888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002802:	f000 f95d 	bl	8002ac0 <MX_GPIO_Init>
  MX_USB_OTG_FS_HCD_Init();
 8002806:	f000 f939 	bl	8002a7c <MX_USB_OTG_FS_HCD_Init>
  MX_USART3_UART_Init();
 800280a:	f000 f8eb 	bl	80029e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start LED
    int Start_Counter = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8002812:	e010      	b.n	8002836 <main+0x42>
    {
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8002814:	2104      	movs	r1, #4
 8002816:	4819      	ldr	r0, [pc, #100]	; (800287c <main+0x88>)
 8002818:	f001 fd27 	bl	800426a <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 800281c:	20c8      	movs	r0, #200	; 0xc8
 800281e:	f000 fce7 	bl	80031f0 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
 8002822:	2104      	movs	r1, #4
 8002824:	4815      	ldr	r0, [pc, #84]	; (800287c <main+0x88>)
 8002826:	f001 fd20 	bl	800426a <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 800282a:	20c8      	movs	r0, #200	; 0xc8
 800282c:	f000 fce0 	bl	80031f0 <HAL_Delay>
  	  Start_Counter++;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3301      	adds	r3, #1
 8002834:	607b      	str	r3, [r7, #4]
    while(Start_Counter < 5)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b04      	cmp	r3, #4
 800283a:	ddeb      	ble.n	8002814 <main+0x20>

    //user_data = "Start of program\r\n";
    	//HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY);

    	// Enable CCYCCNT Counter for SEGGER SYSTEM VIEW
    	DWT->CTRL |= (1 << 0);
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <main+0x8c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <main+0x8c>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6013      	str	r3, [r2, #0]

    	// Used for SEGGER UART
    	SEGGER_UART_init(500000);
 8002848:	480e      	ldr	r0, [pc, #56]	; (8002884 <main+0x90>)
 800284a:	f7fe facf 	bl	8000dec <SEGGER_UART_init>

    	//Starting SEGGER SYSVIEW
    	  SEGGER_SYSVIEW_Conf();
 800284e:	f7fe f961 	bl	8000b14 <SEGGER_SYSVIEW_Conf>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002852:	2102      	movs	r1, #2
 8002854:	4809      	ldr	r0, [pc, #36]	; (800287c <main+0x88>)
 8002856:	f001 fd08 	bl	800426a <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 800285a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800285e:	f000 fcc7 	bl	80031f0 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002862:	2102      	movs	r1, #2
 8002864:	4805      	ldr	r0, [pc, #20]	; (800287c <main+0x88>)
 8002866:	f001 fd00 	bl	800426a <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 800286a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800286e:	f000 fcbf 	bl	80031f0 <HAL_Delay>
  	  Start_Counter++;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3301      	adds	r3, #1
 8002876:	607b      	str	r3, [r7, #4]
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002878:	e7eb      	b.n	8002852 <main+0x5e>
 800287a:	bf00      	nop
 800287c:	58020800 	.word	0x58020800
 8002880:	e0001000 	.word	0xe0001000
 8002884:	0007a120 	.word	0x0007a120

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b09e      	sub	sp, #120	; 0x78
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002892:	224c      	movs	r2, #76	; 0x4c
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f006 fb62 	bl	8008f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2220      	movs	r2, #32
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f006 fb5b 	bl	8008f60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028aa:	2002      	movs	r0, #2
 80028ac:	f001 fd7e 	bl	80043ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <SystemClock_Config+0x150>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <SystemClock_Config+0x150>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028c0:	4b45      	ldr	r3, [pc, #276]	; (80029d8 <SystemClock_Config+0x150>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b44      	ldr	r3, [pc, #272]	; (80029dc <SystemClock_Config+0x154>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	4a43      	ldr	r2, [pc, #268]	; (80029dc <SystemClock_Config+0x154>)
 80028d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d4:	6193      	str	r3, [r2, #24]
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <SystemClock_Config+0x154>)
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028e2:	bf00      	nop
 80028e4:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <SystemClock_Config+0x154>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f0:	d1f8      	bne.n	80028e4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <SystemClock_Config+0x158>)
 80028f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028f8:	4a39      	ldr	r2, [pc, #228]	; (80029e0 <SystemClock_Config+0x158>)
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <SystemClock_Config+0x158>)
 8002904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002910:	2300      	movs	r3, #0
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <SystemClock_Config+0x154>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a30      	ldr	r2, [pc, #192]	; (80029dc <SystemClock_Config+0x154>)
 800291a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <SystemClock_Config+0x154>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <SystemClock_Config+0x150>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <SystemClock_Config+0x150>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002936:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <SystemClock_Config+0x150>)
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002942:	bf00      	nop
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <SystemClock_Config+0x154>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002950:	d1f8      	bne.n	8002944 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002952:	2301      	movs	r3, #1
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800295c:	2302      	movs	r3, #2
 800295e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002960:	2302      	movs	r3, #2
 8002962:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002964:	2301      	movs	r3, #1
 8002966:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002968:	2378      	movs	r3, #120	; 0x78
 800296a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800296c:	2302      	movs	r3, #2
 800296e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8002970:	230f      	movs	r3, #15
 8002972:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002974:	2302      	movs	r3, #2
 8002976:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002978:	230c      	movs	r3, #12
 800297a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800297c:	2300      	movs	r3, #0
 800297e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002988:	4618      	mov	r0, r3
 800298a:	f001 fd59 	bl	8004440 <HAL_RCC_OscConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8002994:	f000 f91e 	bl	8002bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002998:	233f      	movs	r3, #63	; 0x3f
 800299a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299c:	2303      	movs	r3, #3
 800299e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80029a4:	2308      	movs	r3, #8
 80029a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80029a8:	2340      	movs	r3, #64	; 0x40
 80029aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80029ac:	2340      	movs	r3, #64	; 0x40
 80029ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80029b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80029b6:	2340      	movs	r3, #64	; 0x40
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	2104      	movs	r1, #4
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 f96b 	bl	8004c9c <HAL_RCC_ClockConfig>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80029cc:	f000 f902 	bl	8002bd4 <Error_Handler>
  }
}
 80029d0:	bf00      	nop
 80029d2:	3778      	adds	r7, #120	; 0x78
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	58000400 	.word	0x58000400
 80029dc:	58024800 	.word	0x58024800
 80029e0:	58024400 	.word	0x58024400

080029e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 80029ea:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <MX_USART3_UART_Init+0x94>)
 80029ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029ee:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 80029f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a2c:	4811      	ldr	r0, [pc, #68]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a2e:	f004 fb45 	bl	80070bc <HAL_UART_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002a38:	f000 f8cc 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a40:	f005 ff66 	bl	8008910 <HAL_UARTEx_SetTxFifoThreshold>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002a4a:	f000 f8c3 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4808      	ldr	r0, [pc, #32]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a52:	f005 ff9b 	bl	800898c <HAL_UARTEx_SetRxFifoThreshold>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002a5c:	f000 f8ba 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002a60:	4804      	ldr	r0, [pc, #16]	; (8002a74 <MX_USART3_UART_Init+0x90>)
 8002a62:	f005 ff1c 	bl	800889e <HAL_UARTEx_DisableFifoMode>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002a6c:	f000 f8b2 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	24078374 	.word	0x24078374
 8002a78:	40004800 	.word	0x40004800

08002a7c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002a82:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8002a84:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002a88:	2210      	movs	r2, #16
 8002a8a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002aa4:	4804      	ldr	r0, [pc, #16]	; (8002ab8 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8002aa6:	f001 fc1f 	bl	80042e8 <HAL_HCD_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8002ab0:	f000 f890 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	24078404 	.word	0x24078404
 8002abc:	40080000 	.word	0x40080000

08002ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002adc:	4a32      	ldr	r2, [pc, #200]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae6:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afa:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b12:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002b1a:	f043 0302 	orr.w	r3, r3, #2
 8002b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b36:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <MX_GPIO_Init+0xe8>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_LED_Pin|Green_LED_Pin|Blue_LED_Pin, GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2107      	movs	r1, #7
 8002b52:	4816      	ldr	r0, [pc, #88]	; (8002bac <MX_GPIO_Init+0xec>)
 8002b54:	f001 fb70 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480f      	ldr	r0, [pc, #60]	; (8002bac <MX_GPIO_Init+0xec>)
 8002b70:	f001 f9b2 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_LED_Pin Green_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Red_LED_Pin|Green_LED_Pin|Blue_LED_Pin;
 8002b74:	2307      	movs	r3, #7
 8002b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4808      	ldr	r0, [pc, #32]	; (8002bac <MX_GPIO_Init+0xec>)
 8002b8c:	f001 f9a4 	bl	8003ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2105      	movs	r1, #5
 8002b94:	2028      	movs	r0, #40	; 0x28
 8002b96:	f000 fc13 	bl	80033c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b9a:	2028      	movs	r0, #40	; 0x28
 8002b9c:	f000 fc2a 	bl	80033f4 <HAL_NVIC_EnableIRQ>

}
 8002ba0:	bf00      	nop
 8002ba2:	3728      	adds	r7, #40	; 0x28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	58020800 	.word	0x58020800

08002bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bc2:	f000 faf5 	bl	80031b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40001000 	.word	0x40001000

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4807      	ldr	r0, [pc, #28]	; (8002bfc <Error_Handler+0x28>)
 8002be0:	f001 fb43 	bl	800426a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002be4:	2064      	movs	r0, #100	; 0x64
 8002be6:	f000 fb03 	bl	80031f0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8002bea:	2101      	movs	r1, #1
 8002bec:	4803      	ldr	r0, [pc, #12]	; (8002bfc <Error_Handler+0x28>)
 8002bee:	f001 fb3c 	bl	800426a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002bf2:	2064      	movs	r0, #100	; 0x64
 8002bf4:	f000 fafc 	bl	80031f0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
 8002bf8:	e7f0      	b.n	8002bdc <Error_Handler+0x8>
 8002bfa:	bf00      	nop
 8002bfc:	58020800 	.word	0x58020800

08002c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_MspInit+0x30>)
 8002c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c0c:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_MspInit+0x30>)
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_MspInit+0x30>)
 8002c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	58024400 	.word	0x58024400

08002c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0b8      	sub	sp, #224	; 0xe0
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	22bc      	movs	r2, #188	; 0xbc
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f006 f983 	bl	8008f60 <memset>
  if(huart->Instance==USART3)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <HAL_UART_MspInit+0xd0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d14a      	bne.n	8002cfa <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c64:	2302      	movs	r3, #2
 8002c66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c6e:	f107 0310 	add.w	r3, r7, #16
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fbe0 	bl	8005438 <HAL_RCCEx_PeriphCLKConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c7e:	f7ff ffa9 	bl	8002bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_UART_MspInit+0xd4>)
 8002c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c88:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_UART_MspInit+0xd4>)
 8002c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_UART_MspInit+0xd4>)
 8002c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_UART_MspInit+0xd4>)
 8002ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_UART_MspInit+0xd4>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_UART_MspInit+0xd4>)
 8002cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cd8:	2307      	movs	r3, #7
 8002cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4809      	ldr	r0, [pc, #36]	; (8002d0c <HAL_UART_MspInit+0xd8>)
 8002ce6:	f001 f8f7 	bl	8003ed8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	2027      	movs	r0, #39	; 0x27
 8002cf0:	f000 fb66 	bl	80033c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cf4:	2027      	movs	r0, #39	; 0x27
 8002cf6:	f000 fb7d 	bl	80033f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cfa:	bf00      	nop
 8002cfc:	37e0      	adds	r7, #224	; 0xe0
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40004800 	.word	0x40004800
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	58020400 	.word	0x58020400

08002d10 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b0b8      	sub	sp, #224	; 0xe0
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d28:	f107 0310 	add.w	r3, r7, #16
 8002d2c:	22bc      	movs	r2, #188	; 0xbc
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f006 f915 	bl	8008f60 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_HCD_MspInit+0xc8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d146      	bne.n	8002dce <HAL_HCD_MspInit+0xbe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 fb70 	bl	8005438 <HAL_RCCEx_PeriphCLKConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 8002d5e:	f7ff ff39 	bl	8002bd4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002d62:	f001 fb5d 	bl	8004420 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_HCD_MspInit+0xcc>)
 8002d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_HCD_MspInit+0xcc>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_HCD_MspInit+0xcc>)
 8002d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002d9e:	230a      	movs	r3, #10
 8002da0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002da8:	4619      	mov	r1, r3
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <HAL_HCD_MspInit+0xd0>)
 8002dac:	f001 f894 	bl	8003ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002db0:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_HCD_MspInit+0xcc>)
 8002db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_HCD_MspInit+0xcc>)
 8002db8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_HCD_MspInit+0xcc>)
 8002dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002dce:	bf00      	nop
 8002dd0:	37e0      	adds	r7, #224	; 0xe0
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40080000 	.word	0x40080000
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	58020000 	.word	0x58020000

08002de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b090      	sub	sp, #64	; 0x40
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	d827      	bhi.n	8002e42 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002df2:	2200      	movs	r2, #0
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	2036      	movs	r0, #54	; 0x36
 8002df8:	f000 fae2 	bl	80033c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dfc:	2036      	movs	r0, #54	; 0x36
 8002dfe:	f000 faf9 	bl	80033f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002e02:	4a29      	ldr	r2, [pc, #164]	; (8002ea8 <HAL_InitTick+0xc4>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <HAL_InitTick+0xc8>)
 8002e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0e:	4a27      	ldr	r2, [pc, #156]	; (8002eac <HAL_InitTick+0xc8>)
 8002e10:	f043 0310 	orr.w	r3, r3, #16
 8002e14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <HAL_InitTick+0xc8>)
 8002e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e26:	f107 0210 	add.w	r2, r7, #16
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f002 fabf 	bl	80053b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <HAL_InitTick+0x6a>
 8002e40:	e001      	b.n	8002e46 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e02b      	b.n	8002e9e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e46:	f002 fa89 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 8002e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002e4c:	e004      	b.n	8002e58 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e4e:	f002 fa85 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 8002e52:	4603      	mov	r3, r0
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5a:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <HAL_InitTick+0xcc>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	0c9b      	lsrs	r3, r3, #18
 8002e62:	3b01      	subs	r3, #1
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_InitTick+0xd0>)
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <HAL_InitTick+0xd4>)
 8002e6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_InitTick+0xd0>)
 8002e6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e74:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_InitTick+0xd0>)
 8002e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_InitTick+0xd0>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_InitTick+0xd0>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e86:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <HAL_InitTick+0xd0>)
 8002e88:	f003 fe3e 	bl	8006b08 <HAL_TIM_Base_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e92:	4808      	ldr	r0, [pc, #32]	; (8002eb4 <HAL_InitTick+0xd0>)
 8002e94:	f003 fe9a 	bl	8006bcc <HAL_TIM_Base_Start_IT>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	e000      	b.n	8002e9e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3740      	adds	r7, #64	; 0x40
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	24000010 	.word	0x24000010
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	24078708 	.word	0x24078708
 8002eb8:	40001000 	.word	0x40001000

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <NMI_Handler+0x24>)
 8002ec4:	f001 f9d1 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002ec8:	2064      	movs	r0, #100	; 0x64
 8002eca:	f000 f991 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002ece:	2102      	movs	r1, #2
 8002ed0:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <NMI_Handler+0x24>)
 8002ed2:	f001 f9ca 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002ed6:	2064      	movs	r0, #100	; 0x64
 8002ed8:	f000 f98a 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002edc:	e7f0      	b.n	8002ec0 <NMI_Handler+0x4>
 8002ede:	bf00      	nop
 8002ee0:	58020800 	.word	0x58020800

08002ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002ee8:	2102      	movs	r1, #2
 8002eea:	4807      	ldr	r0, [pc, #28]	; (8002f08 <HardFault_Handler+0x24>)
 8002eec:	f001 f9bd 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002ef0:	2064      	movs	r0, #100	; 0x64
 8002ef2:	f000 f97d 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4803      	ldr	r0, [pc, #12]	; (8002f08 <HardFault_Handler+0x24>)
 8002efa:	f001 f9b6 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002efe:	2064      	movs	r0, #100	; 0x64
 8002f00:	f000 f976 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f04:	e7f0      	b.n	8002ee8 <HardFault_Handler+0x4>
 8002f06:	bf00      	nop
 8002f08:	58020800 	.word	0x58020800

08002f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f10:	2102      	movs	r1, #2
 8002f12:	4807      	ldr	r0, [pc, #28]	; (8002f30 <MemManage_Handler+0x24>)
 8002f14:	f001 f9a9 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f18:	2064      	movs	r0, #100	; 0x64
 8002f1a:	f000 f969 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4803      	ldr	r0, [pc, #12]	; (8002f30 <MemManage_Handler+0x24>)
 8002f22:	f001 f9a2 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f26:	2064      	movs	r0, #100	; 0x64
 8002f28:	f000 f962 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f2c:	e7f0      	b.n	8002f10 <MemManage_Handler+0x4>
 8002f2e:	bf00      	nop
 8002f30:	58020800 	.word	0x58020800

08002f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4807      	ldr	r0, [pc, #28]	; (8002f58 <BusFault_Handler+0x24>)
 8002f3c:	f001 f995 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f40:	2064      	movs	r0, #100	; 0x64
 8002f42:	f000 f955 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f46:	2102      	movs	r1, #2
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <BusFault_Handler+0x24>)
 8002f4a:	f001 f98e 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f4e:	2064      	movs	r0, #100	; 0x64
 8002f50:	f000 f94e 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f54:	e7f0      	b.n	8002f38 <BusFault_Handler+0x4>
 8002f56:	bf00      	nop
 8002f58:	58020800 	.word	0x58020800

08002f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f60:	2102      	movs	r1, #2
 8002f62:	4807      	ldr	r0, [pc, #28]	; (8002f80 <UsageFault_Handler+0x24>)
 8002f64:	f001 f981 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f68:	2064      	movs	r0, #100	; 0x64
 8002f6a:	f000 f941 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4803      	ldr	r0, [pc, #12]	; (8002f80 <UsageFault_Handler+0x24>)
 8002f72:	f001 f97a 	bl	800426a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f76:	2064      	movs	r0, #100	; 0x64
 8002f78:	f000 f93a 	bl	80031f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
 8002f7c:	e7f0      	b.n	8002f60 <UsageFault_Handler+0x4>
 8002f7e:	bf00      	nop
 8002f80:	58020800 	.word	0x58020800

08002f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <USART3_IRQHandler+0x10>)
 8002f9a:	f004 f8df 	bl	800715c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	24078374 	.word	0x24078374

08002fa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8002fac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fb0:	f001 f975 	bl	800429e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <TIM6_DAC_IRQHandler+0x10>)
 8002fbe:	f003 fe7d 	bl	8006cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	24078708 	.word	0x24078708

08002fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fd0:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <SystemInit+0xec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	4a38      	ldr	r2, [pc, #224]	; (80030b8 <SystemInit+0xec>)
 8002fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <SystemInit+0xf0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d807      	bhi.n	8002ffc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fec:	4b33      	ldr	r3, [pc, #204]	; (80030bc <SystemInit+0xf0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 030f 	bic.w	r3, r3, #15
 8002ff4:	4a31      	ldr	r2, [pc, #196]	; (80030bc <SystemInit+0xf0>)
 8002ff6:	f043 0307 	orr.w	r3, r3, #7
 8002ffa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <SystemInit+0xf4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <SystemInit+0xf4>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003008:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <SystemInit+0xf4>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <SystemInit+0xf4>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	492b      	ldr	r1, [pc, #172]	; (80030c0 <SystemInit+0xf4>)
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <SystemInit+0xf8>)
 8003016:	4013      	ands	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <SystemInit+0xf0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003026:	4b25      	ldr	r3, [pc, #148]	; (80030bc <SystemInit+0xf0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 030f 	bic.w	r3, r3, #15
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <SystemInit+0xf0>)
 8003030:	f043 0307 	orr.w	r3, r3, #7
 8003034:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <SystemInit+0xf4>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <SystemInit+0xf4>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <SystemInit+0xf4>)
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <SystemInit+0xf4>)
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <SystemInit+0xfc>)
 800304c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <SystemInit+0xf4>)
 8003050:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <SystemInit+0x100>)
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <SystemInit+0xf4>)
 8003056:	4a1e      	ldr	r2, [pc, #120]	; (80030d0 <SystemInit+0x104>)
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <SystemInit+0xf4>)
 800305c:	2200      	movs	r2, #0
 800305e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003060:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <SystemInit+0xf4>)
 8003062:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <SystemInit+0x104>)
 8003064:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <SystemInit+0xf4>)
 8003068:	2200      	movs	r2, #0
 800306a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <SystemInit+0xf4>)
 800306e:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <SystemInit+0x104>)
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <SystemInit+0xf4>)
 8003074:	2200      	movs	r2, #0
 8003076:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <SystemInit+0xf4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <SystemInit+0xf4>)
 800307e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003082:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <SystemInit+0xf4>)
 8003086:	2200      	movs	r2, #0
 8003088:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <SystemInit+0x108>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <SystemInit+0x10c>)
 8003090:	4013      	ands	r3, r2
 8003092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003096:	d202      	bcs.n	800309e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <SystemInit+0x110>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <SystemInit+0x114>)
 80030a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80030a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <SystemInit+0xec>)
 80030a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00
 80030bc:	52002000 	.word	0x52002000
 80030c0:	58024400 	.word	0x58024400
 80030c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80030c8:	02020200 	.word	0x02020200
 80030cc:	01ff0000 	.word	0x01ff0000
 80030d0:	01010280 	.word	0x01010280
 80030d4:	5c001000 	.word	0x5c001000
 80030d8:	ffff0000 	.word	0xffff0000
 80030dc:	51008108 	.word	0x51008108
 80030e0:	52004000 	.word	0x52004000

080030e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80030e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800311c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030e8:	f7ff ff70 	bl	8002fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030ec:	480c      	ldr	r0, [pc, #48]	; (8003120 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030ee:	490d      	ldr	r1, [pc, #52]	; (8003124 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f4:	e002      	b.n	80030fc <LoopCopyDataInit>

080030f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030fa:	3304      	adds	r3, #4

080030fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003100:	d3f9      	bcc.n	80030f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003102:	4a0a      	ldr	r2, [pc, #40]	; (800312c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003104:	4c0a      	ldr	r4, [pc, #40]	; (8003130 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003108:	e001      	b.n	800310e <LoopFillZerobss>

0800310a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800310a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800310c:	3204      	adds	r2, #4

0800310e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800310e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003110:	d3fb      	bcc.n	800310a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003112:	f005 fef3 	bl	8008efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003116:	f7ff fb6d 	bl	80027f4 <main>
  bx  lr
 800311a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800311c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003120:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003124:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8003128:	08009050 	.word	0x08009050
  ldr r2, =_sbss
 800312c:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8003130:	24078758 	.word	0x24078758

08003134 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003134:	e7fe      	b.n	8003134 <ADC3_IRQHandler>
	...

08003138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800313e:	2003      	movs	r0, #3
 8003140:	f000 f933 	bl	80033aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003144:	f001 ff60 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_Init+0x68>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	4913      	ldr	r1, [pc, #76]	; (80031a4 <HAL_Init+0x6c>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_Init+0x68>)
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_Init+0x6c>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <HAL_Init+0x70>)
 800317a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <HAL_Init+0x74>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003182:	200f      	movs	r0, #15
 8003184:	f7ff fe2e 	bl	8002de4 <HAL_InitTick>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e002      	b.n	8003198 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003192:	f7ff fd35 	bl	8002c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	58024400 	.word	0x58024400
 80031a4:	08009008 	.word	0x08009008
 80031a8:	2400000c 	.word	0x2400000c
 80031ac:	24000008 	.word	0x24000008

080031b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_IncTick+0x20>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_IncTick+0x24>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <HAL_IncTick+0x24>)
 80031c2:	6013      	str	r3, [r2, #0]
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	24000014 	.word	0x24000014
 80031d4:	24078754 	.word	0x24078754

080031d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return uwTick;
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_GetTick+0x14>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	24078754 	.word	0x24078754

080031f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f8:	f7ff ffee 	bl	80031d8 <HAL_GetTick>
 80031fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d005      	beq.n	8003216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_Delay+0x44>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003216:	bf00      	nop
 8003218:	f7ff ffde 	bl	80031d8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	429a      	cmp	r2, r3
 8003226:	d8f7      	bhi.n	8003218 <HAL_Delay+0x28>
  {
  }
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	24000014 	.word	0x24000014

08003238 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <HAL_GetREVID+0x14>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0c1b      	lsrs	r3, r3, #16
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	5c001000 	.word	0x5c001000

08003250 <__NVIC_SetPriorityGrouping>:
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <__NVIC_SetPriorityGrouping+0x40>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 800327a:	4313      	orrs	r3, r2
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	; (8003290 <__NVIC_SetPriorityGrouping+0x40>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00
 8003294:	05fa0000 	.word	0x05fa0000

08003298 <__NVIC_GetPriorityGrouping>:
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4907      	ldr	r1, [pc, #28]	; (80032ec <__NVIC_EnableIRQ+0x38>)
 80032ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	; (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ff4c 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ce:	f7ff ff63 	bl	8003298 <__NVIC_GetPriorityGrouping>
 80033d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	6978      	ldr	r0, [r7, #20]
 80033da:	f7ff ffb3 	bl	8003344 <NVIC_EncodePriority>
 80033de:	4602      	mov	r2, r0
 80033e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff82 	bl	80032f0 <__NVIC_SetPriority>
}
 80033ec:	bf00      	nop
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff56 	bl	80032b4 <__NVIC_EnableIRQ>
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff fede 	bl	80031d8 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e2dc      	b.n	80039e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d008      	beq.n	8003446 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e2cd      	b.n	80039e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a76      	ldr	r2, [pc, #472]	; (8003624 <HAL_DMA_Abort+0x214>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d04a      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a74      	ldr	r2, [pc, #464]	; (8003628 <HAL_DMA_Abort+0x218>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d045      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a73      	ldr	r2, [pc, #460]	; (800362c <HAL_DMA_Abort+0x21c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d040      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a71      	ldr	r2, [pc, #452]	; (8003630 <HAL_DMA_Abort+0x220>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d03b      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a70      	ldr	r2, [pc, #448]	; (8003634 <HAL_DMA_Abort+0x224>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d036      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a6e      	ldr	r2, [pc, #440]	; (8003638 <HAL_DMA_Abort+0x228>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d031      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6d      	ldr	r2, [pc, #436]	; (800363c <HAL_DMA_Abort+0x22c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d02c      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6b      	ldr	r2, [pc, #428]	; (8003640 <HAL_DMA_Abort+0x230>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d027      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6a      	ldr	r2, [pc, #424]	; (8003644 <HAL_DMA_Abort+0x234>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d022      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a68      	ldr	r2, [pc, #416]	; (8003648 <HAL_DMA_Abort+0x238>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01d      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a67      	ldr	r2, [pc, #412]	; (800364c <HAL_DMA_Abort+0x23c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d018      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a65      	ldr	r2, [pc, #404]	; (8003650 <HAL_DMA_Abort+0x240>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a64      	ldr	r2, [pc, #400]	; (8003654 <HAL_DMA_Abort+0x244>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00e      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a62      	ldr	r2, [pc, #392]	; (8003658 <HAL_DMA_Abort+0x248>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d009      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a61      	ldr	r2, [pc, #388]	; (800365c <HAL_DMA_Abort+0x24c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_DMA_Abort+0xd6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a5f      	ldr	r2, [pc, #380]	; (8003660 <HAL_DMA_Abort+0x250>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_DMA_Abort+0xda>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_DMA_Abort+0xdc>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 021e 	bic.w	r2, r2, #30
 80034fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800350e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e00a      	b.n	800352e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 020e 	bic.w	r2, r2, #14
 8003526:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3c      	ldr	r2, [pc, #240]	; (8003624 <HAL_DMA_Abort+0x214>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d072      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3a      	ldr	r2, [pc, #232]	; (8003628 <HAL_DMA_Abort+0x218>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d06d      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a39      	ldr	r2, [pc, #228]	; (800362c <HAL_DMA_Abort+0x21c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d068      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a37      	ldr	r2, [pc, #220]	; (8003630 <HAL_DMA_Abort+0x220>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d063      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a36      	ldr	r2, [pc, #216]	; (8003634 <HAL_DMA_Abort+0x224>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d05e      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a34      	ldr	r2, [pc, #208]	; (8003638 <HAL_DMA_Abort+0x228>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d059      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a33      	ldr	r2, [pc, #204]	; (800363c <HAL_DMA_Abort+0x22c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d054      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a31      	ldr	r2, [pc, #196]	; (8003640 <HAL_DMA_Abort+0x230>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d04f      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a30      	ldr	r2, [pc, #192]	; (8003644 <HAL_DMA_Abort+0x234>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04a      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2e      	ldr	r2, [pc, #184]	; (8003648 <HAL_DMA_Abort+0x238>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d045      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2d      	ldr	r2, [pc, #180]	; (800364c <HAL_DMA_Abort+0x23c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d040      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <HAL_DMA_Abort+0x240>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03b      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <HAL_DMA_Abort+0x244>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d036      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a28      	ldr	r2, [pc, #160]	; (8003658 <HAL_DMA_Abort+0x248>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d031      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a27      	ldr	r2, [pc, #156]	; (800365c <HAL_DMA_Abort+0x24c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d02c      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a25      	ldr	r2, [pc, #148]	; (8003660 <HAL_DMA_Abort+0x250>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d027      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a24      	ldr	r2, [pc, #144]	; (8003664 <HAL_DMA_Abort+0x254>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a22      	ldr	r2, [pc, #136]	; (8003668 <HAL_DMA_Abort+0x258>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01d      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a21      	ldr	r2, [pc, #132]	; (800366c <HAL_DMA_Abort+0x25c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_DMA_Abort+0x260>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <HAL_DMA_Abort+0x264>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <HAL_DMA_Abort+0x268>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_DMA_Abort+0x26c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_DMA_Abort+0x20e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_DMA_Abort+0x270>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d132      	bne.n	8003684 <HAL_DMA_Abort+0x274>
 800361e:	2301      	movs	r3, #1
 8003620:	e031      	b.n	8003686 <HAL_DMA_Abort+0x276>
 8003622:	bf00      	nop
 8003624:	40020010 	.word	0x40020010
 8003628:	40020028 	.word	0x40020028
 800362c:	40020040 	.word	0x40020040
 8003630:	40020058 	.word	0x40020058
 8003634:	40020070 	.word	0x40020070
 8003638:	40020088 	.word	0x40020088
 800363c:	400200a0 	.word	0x400200a0
 8003640:	400200b8 	.word	0x400200b8
 8003644:	40020410 	.word	0x40020410
 8003648:	40020428 	.word	0x40020428
 800364c:	40020440 	.word	0x40020440
 8003650:	40020458 	.word	0x40020458
 8003654:	40020470 	.word	0x40020470
 8003658:	40020488 	.word	0x40020488
 800365c:	400204a0 	.word	0x400204a0
 8003660:	400204b8 	.word	0x400204b8
 8003664:	58025408 	.word	0x58025408
 8003668:	5802541c 	.word	0x5802541c
 800366c:	58025430 	.word	0x58025430
 8003670:	58025444 	.word	0x58025444
 8003674:	58025458 	.word	0x58025458
 8003678:	5802546c 	.word	0x5802546c
 800367c:	58025480 	.word	0x58025480
 8003680:	58025494 	.word	0x58025494
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003698:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6d      	ldr	r2, [pc, #436]	; (8003854 <HAL_DMA_Abort+0x444>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d04a      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6b      	ldr	r2, [pc, #428]	; (8003858 <HAL_DMA_Abort+0x448>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d045      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6a      	ldr	r2, [pc, #424]	; (800385c <HAL_DMA_Abort+0x44c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d040      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a68      	ldr	r2, [pc, #416]	; (8003860 <HAL_DMA_Abort+0x450>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d03b      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a67      	ldr	r2, [pc, #412]	; (8003864 <HAL_DMA_Abort+0x454>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d036      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a65      	ldr	r2, [pc, #404]	; (8003868 <HAL_DMA_Abort+0x458>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d031      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a64      	ldr	r2, [pc, #400]	; (800386c <HAL_DMA_Abort+0x45c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d02c      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a62      	ldr	r2, [pc, #392]	; (8003870 <HAL_DMA_Abort+0x460>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d027      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a61      	ldr	r2, [pc, #388]	; (8003874 <HAL_DMA_Abort+0x464>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d022      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5f      	ldr	r2, [pc, #380]	; (8003878 <HAL_DMA_Abort+0x468>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01d      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a5e      	ldr	r2, [pc, #376]	; (800387c <HAL_DMA_Abort+0x46c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d018      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a5c      	ldr	r2, [pc, #368]	; (8003880 <HAL_DMA_Abort+0x470>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <HAL_DMA_Abort+0x474>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00e      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a59      	ldr	r2, [pc, #356]	; (8003888 <HAL_DMA_Abort+0x478>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_DMA_Abort+0x47c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_DMA_Abort+0x32a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a56      	ldr	r2, [pc, #344]	; (8003890 <HAL_DMA_Abort+0x480>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <HAL_DMA_Abort+0x33c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e007      	b.n	800375c <HAL_DMA_Abort+0x34c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800375c:	e013      	b.n	8003786 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800375e:	f7ff fd3b 	bl	80031d8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b05      	cmp	r3, #5
 800376a:	d90c      	bls.n	8003786 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2203      	movs	r2, #3
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e12d      	b.n	80039e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2f      	ldr	r2, [pc, #188]	; (8003854 <HAL_DMA_Abort+0x444>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04a      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2d      	ldr	r2, [pc, #180]	; (8003858 <HAL_DMA_Abort+0x448>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d045      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2c      	ldr	r2, [pc, #176]	; (800385c <HAL_DMA_Abort+0x44c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d040      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <HAL_DMA_Abort+0x450>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d03b      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_DMA_Abort+0x454>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d036      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <HAL_DMA_Abort+0x458>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d031      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a26      	ldr	r2, [pc, #152]	; (800386c <HAL_DMA_Abort+0x45c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d02c      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a24      	ldr	r2, [pc, #144]	; (8003870 <HAL_DMA_Abort+0x460>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d027      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a23      	ldr	r2, [pc, #140]	; (8003874 <HAL_DMA_Abort+0x464>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a21      	ldr	r2, [pc, #132]	; (8003878 <HAL_DMA_Abort+0x468>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01d      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a20      	ldr	r2, [pc, #128]	; (800387c <HAL_DMA_Abort+0x46c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_DMA_Abort+0x470>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <HAL_DMA_Abort+0x474>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <HAL_DMA_Abort+0x478>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_DMA_Abort+0x47c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_DMA_Abort+0x422>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a18      	ldr	r2, [pc, #96]	; (8003890 <HAL_DMA_Abort+0x480>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d101      	bne.n	8003836 <HAL_DMA_Abort+0x426>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_DMA_Abort+0x428>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02b      	beq.n	8003894 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	223f      	movs	r2, #63	; 0x3f
 800384c:	409a      	lsls	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	e02a      	b.n	80038aa <HAL_DMA_Abort+0x49a>
 8003854:	40020010 	.word	0x40020010
 8003858:	40020028 	.word	0x40020028
 800385c:	40020040 	.word	0x40020040
 8003860:	40020058 	.word	0x40020058
 8003864:	40020070 	.word	0x40020070
 8003868:	40020088 	.word	0x40020088
 800386c:	400200a0 	.word	0x400200a0
 8003870:	400200b8 	.word	0x400200b8
 8003874:	40020410 	.word	0x40020410
 8003878:	40020428 	.word	0x40020428
 800387c:	40020440 	.word	0x40020440
 8003880:	40020458 	.word	0x40020458
 8003884:	40020470 	.word	0x40020470
 8003888:	40020488 	.word	0x40020488
 800388c:	400204a0 	.word	0x400204a0
 8003890:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	2201      	movs	r2, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a4f      	ldr	r2, [pc, #316]	; (80039ec <HAL_DMA_Abort+0x5dc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d072      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	; (80039f0 <HAL_DMA_Abort+0x5e0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d06d      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4c      	ldr	r2, [pc, #304]	; (80039f4 <HAL_DMA_Abort+0x5e4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d068      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <HAL_DMA_Abort+0x5e8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d063      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a49      	ldr	r2, [pc, #292]	; (80039fc <HAL_DMA_Abort+0x5ec>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d05e      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a47      	ldr	r2, [pc, #284]	; (8003a00 <HAL_DMA_Abort+0x5f0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d059      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a46      	ldr	r2, [pc, #280]	; (8003a04 <HAL_DMA_Abort+0x5f4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d054      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a44      	ldr	r2, [pc, #272]	; (8003a08 <HAL_DMA_Abort+0x5f8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d04f      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a43      	ldr	r2, [pc, #268]	; (8003a0c <HAL_DMA_Abort+0x5fc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d04a      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a41      	ldr	r2, [pc, #260]	; (8003a10 <HAL_DMA_Abort+0x600>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d045      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a40      	ldr	r2, [pc, #256]	; (8003a14 <HAL_DMA_Abort+0x604>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d040      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3e      	ldr	r2, [pc, #248]	; (8003a18 <HAL_DMA_Abort+0x608>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d03b      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a3d      	ldr	r2, [pc, #244]	; (8003a1c <HAL_DMA_Abort+0x60c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d036      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3b      	ldr	r2, [pc, #236]	; (8003a20 <HAL_DMA_Abort+0x610>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d031      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3a      	ldr	r2, [pc, #232]	; (8003a24 <HAL_DMA_Abort+0x614>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02c      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <HAL_DMA_Abort+0x618>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d027      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a37      	ldr	r2, [pc, #220]	; (8003a2c <HAL_DMA_Abort+0x61c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a35      	ldr	r2, [pc, #212]	; (8003a30 <HAL_DMA_Abort+0x620>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <HAL_DMA_Abort+0x624>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a32      	ldr	r2, [pc, #200]	; (8003a38 <HAL_DMA_Abort+0x628>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <HAL_DMA_Abort+0x62c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2f      	ldr	r2, [pc, #188]	; (8003a40 <HAL_DMA_Abort+0x630>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_DMA_Abort+0x634>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_DMA_Abort+0x58a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2c      	ldr	r2, [pc, #176]	; (8003a48 <HAL_DMA_Abort+0x638>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_DMA_Abort+0x58e>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_DMA_Abort+0x590>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40020010 	.word	0x40020010
 80039f0:	40020028 	.word	0x40020028
 80039f4:	40020040 	.word	0x40020040
 80039f8:	40020058 	.word	0x40020058
 80039fc:	40020070 	.word	0x40020070
 8003a00:	40020088 	.word	0x40020088
 8003a04:	400200a0 	.word	0x400200a0
 8003a08:	400200b8 	.word	0x400200b8
 8003a0c:	40020410 	.word	0x40020410
 8003a10:	40020428 	.word	0x40020428
 8003a14:	40020440 	.word	0x40020440
 8003a18:	40020458 	.word	0x40020458
 8003a1c:	40020470 	.word	0x40020470
 8003a20:	40020488 	.word	0x40020488
 8003a24:	400204a0 	.word	0x400204a0
 8003a28:	400204b8 	.word	0x400204b8
 8003a2c:	58025408 	.word	0x58025408
 8003a30:	5802541c 	.word	0x5802541c
 8003a34:	58025430 	.word	0x58025430
 8003a38:	58025444 	.word	0x58025444
 8003a3c:	58025458 	.word	0x58025458
 8003a40:	5802546c 	.word	0x5802546c
 8003a44:	58025480 	.word	0x58025480
 8003a48:	58025494 	.word	0x58025494

08003a4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e237      	b.n	8003ece <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d004      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2280      	movs	r2, #128	; 0x80
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e22c      	b.n	8003ece <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5c      	ldr	r2, [pc, #368]	; (8003bec <HAL_DMA_Abort_IT+0x1a0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04a      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5b      	ldr	r2, [pc, #364]	; (8003bf0 <HAL_DMA_Abort_IT+0x1a4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d045      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <HAL_DMA_Abort_IT+0x1a8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d040      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_DMA_Abort_IT+0x1ac>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d03b      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a56      	ldr	r2, [pc, #344]	; (8003bfc <HAL_DMA_Abort_IT+0x1b0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d036      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a55      	ldr	r2, [pc, #340]	; (8003c00 <HAL_DMA_Abort_IT+0x1b4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d031      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a53      	ldr	r2, [pc, #332]	; (8003c04 <HAL_DMA_Abort_IT+0x1b8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02c      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_DMA_Abort_IT+0x1bc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d027      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <HAL_DMA_Abort_IT+0x1c0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d022      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4f      	ldr	r2, [pc, #316]	; (8003c10 <HAL_DMA_Abort_IT+0x1c4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d01d      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4d      	ldr	r2, [pc, #308]	; (8003c14 <HAL_DMA_Abort_IT+0x1c8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d018      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4c      	ldr	r2, [pc, #304]	; (8003c18 <HAL_DMA_Abort_IT+0x1cc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4a      	ldr	r2, [pc, #296]	; (8003c1c <HAL_DMA_Abort_IT+0x1d0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a49      	ldr	r2, [pc, #292]	; (8003c20 <HAL_DMA_Abort_IT+0x1d4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d009      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a47      	ldr	r2, [pc, #284]	; (8003c24 <HAL_DMA_Abort_IT+0x1d8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_DMA_Abort_IT+0xc8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a46      	ldr	r2, [pc, #280]	; (8003c28 <HAL_DMA_Abort_IT+0x1dc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <HAL_DMA_Abort_IT+0xcc>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_DMA_Abort_IT+0xce>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8086 	beq.w	8003c2c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <HAL_DMA_Abort_IT+0x1a0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04a      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2e      	ldr	r2, [pc, #184]	; (8003bf0 <HAL_DMA_Abort_IT+0x1a4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d045      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <HAL_DMA_Abort_IT+0x1a8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d040      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_DMA_Abort_IT+0x1ac>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d03b      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <HAL_DMA_Abort_IT+0x1b0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d036      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <HAL_DMA_Abort_IT+0x1b4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d031      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <HAL_DMA_Abort_IT+0x1b8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d02c      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <HAL_DMA_Abort_IT+0x1bc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d027      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <HAL_DMA_Abort_IT+0x1c0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <HAL_DMA_Abort_IT+0x1c4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_DMA_Abort_IT+0x1c8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_DMA_Abort_IT+0x1cc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_DMA_Abort_IT+0x1d0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <HAL_DMA_Abort_IT+0x1d4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_DMA_Abort_IT+0x1d8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x17c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_DMA_Abort_IT+0x1dc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <HAL_DMA_Abort_IT+0x18e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e178      	b.n	8003ecc <HAL_DMA_Abort_IT+0x480>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e16f      	b.n	8003ecc <HAL_DMA_Abort_IT+0x480>
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 020e 	bic.w	r2, r2, #14
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6c      	ldr	r2, [pc, #432]	; (8003df4 <HAL_DMA_Abort_IT+0x3a8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d04a      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_DMA_Abort_IT+0x3ac>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d045      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a69      	ldr	r2, [pc, #420]	; (8003dfc <HAL_DMA_Abort_IT+0x3b0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d040      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a68      	ldr	r2, [pc, #416]	; (8003e00 <HAL_DMA_Abort_IT+0x3b4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d03b      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a66      	ldr	r2, [pc, #408]	; (8003e04 <HAL_DMA_Abort_IT+0x3b8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d036      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a65      	ldr	r2, [pc, #404]	; (8003e08 <HAL_DMA_Abort_IT+0x3bc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d031      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a63      	ldr	r2, [pc, #396]	; (8003e0c <HAL_DMA_Abort_IT+0x3c0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02c      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a62      	ldr	r2, [pc, #392]	; (8003e10 <HAL_DMA_Abort_IT+0x3c4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d027      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a60      	ldr	r2, [pc, #384]	; (8003e14 <HAL_DMA_Abort_IT+0x3c8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d022      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5f      	ldr	r2, [pc, #380]	; (8003e18 <HAL_DMA_Abort_IT+0x3cc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01d      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5d      	ldr	r2, [pc, #372]	; (8003e1c <HAL_DMA_Abort_IT+0x3d0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d018      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5c      	ldr	r2, [pc, #368]	; (8003e20 <HAL_DMA_Abort_IT+0x3d4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5a      	ldr	r2, [pc, #360]	; (8003e24 <HAL_DMA_Abort_IT+0x3d8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a59      	ldr	r2, [pc, #356]	; (8003e28 <HAL_DMA_Abort_IT+0x3dc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a57      	ldr	r2, [pc, #348]	; (8003e2c <HAL_DMA_Abort_IT+0x3e0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x290>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_DMA_Abort_IT+0x3e4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d108      	bne.n	8003cee <HAL_DMA_Abort_IT+0x2a2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e007      	b.n	8003cfe <HAL_DMA_Abort_IT+0x2b2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3c      	ldr	r2, [pc, #240]	; (8003df4 <HAL_DMA_Abort_IT+0x3a8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d072      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <HAL_DMA_Abort_IT+0x3ac>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d06d      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a39      	ldr	r2, [pc, #228]	; (8003dfc <HAL_DMA_Abort_IT+0x3b0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d068      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a37      	ldr	r2, [pc, #220]	; (8003e00 <HAL_DMA_Abort_IT+0x3b4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d063      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a36      	ldr	r2, [pc, #216]	; (8003e04 <HAL_DMA_Abort_IT+0x3b8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d05e      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a34      	ldr	r2, [pc, #208]	; (8003e08 <HAL_DMA_Abort_IT+0x3bc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d059      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a33      	ldr	r2, [pc, #204]	; (8003e0c <HAL_DMA_Abort_IT+0x3c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d054      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a31      	ldr	r2, [pc, #196]	; (8003e10 <HAL_DMA_Abort_IT+0x3c4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d04f      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a30      	ldr	r2, [pc, #192]	; (8003e14 <HAL_DMA_Abort_IT+0x3c8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d04a      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <HAL_DMA_Abort_IT+0x3cc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d045      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <HAL_DMA_Abort_IT+0x3d0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d040      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_DMA_Abort_IT+0x3d4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d03b      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <HAL_DMA_Abort_IT+0x3d8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d036      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_DMA_Abort_IT+0x3dc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d031      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <HAL_DMA_Abort_IT+0x3e0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02c      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_DMA_Abort_IT+0x3e4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d027      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <HAL_DMA_Abort_IT+0x3e8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMA_Abort_IT+0x3ec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_DMA_Abort_IT+0x3f0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_DMA_Abort_IT+0x3f4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_DMA_Abort_IT+0x3f8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_DMA_Abort_IT+0x3fc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_DMA_Abort_IT+0x400>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_DMA_Abort_IT+0x3a2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_DMA_Abort_IT+0x404>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d132      	bne.n	8003e54 <HAL_DMA_Abort_IT+0x408>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e031      	b.n	8003e56 <HAL_DMA_Abort_IT+0x40a>
 8003df2:	bf00      	nop
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	58025408 	.word	0x58025408
 8003e38:	5802541c 	.word	0x5802541c
 8003e3c:	58025430 	.word	0x58025430
 8003e40:	58025444 	.word	0x58025444
 8003e44:	58025458 	.word	0x58025458
 8003e48:	5802546c 	.word	0x5802546c
 8003e4c:	58025480 	.word	0x58025480
 8003e50:	58025494 	.word	0x58025494
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d028      	beq.n	8003eac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e68:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e88:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00c      	beq.n	8003eac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003eaa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop

08003ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ee6:	4b89      	ldr	r3, [pc, #548]	; (800410c <HAL_GPIO_Init+0x234>)
 8003ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eea:	e194      	b.n	8004216 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8186 	beq.w	8004210 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d005      	beq.n	8003f1c <HAL_GPIO_Init+0x44>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d130      	bne.n	8003f7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f52:	2201      	movs	r2, #1
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 0201 	and.w	r2, r3, #1
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d017      	beq.n	8003fba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2203      	movs	r2, #3
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d123      	bne.n	800400e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	08da      	lsrs	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3208      	adds	r2, #8
 8003fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	220f      	movs	r2, #15
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	08da      	lsrs	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3208      	adds	r2, #8
 8004008:	69b9      	ldr	r1, [r7, #24]
 800400a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0203 	and.w	r2, r3, #3
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80e0 	beq.w	8004210 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_GPIO_Init+0x238>)
 8004052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004056:	4a2e      	ldr	r2, [pc, #184]	; (8004110 <HAL_GPIO_Init+0x238>)
 8004058:	f043 0302 	orr.w	r3, r3, #2
 800405c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004060:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_GPIO_Init+0x238>)
 8004062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800406e:	4a29      	ldr	r2, [pc, #164]	; (8004114 <HAL_GPIO_Init+0x23c>)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	3302      	adds	r3, #2
 8004076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	220f      	movs	r2, #15
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a20      	ldr	r2, [pc, #128]	; (8004118 <HAL_GPIO_Init+0x240>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d052      	beq.n	8004140 <HAL_GPIO_Init+0x268>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1f      	ldr	r2, [pc, #124]	; (800411c <HAL_GPIO_Init+0x244>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d031      	beq.n	8004106 <HAL_GPIO_Init+0x22e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_GPIO_Init+0x248>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02b      	beq.n	8004102 <HAL_GPIO_Init+0x22a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_GPIO_Init+0x24c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d025      	beq.n	80040fe <HAL_GPIO_Init+0x226>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <HAL_GPIO_Init+0x250>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01f      	beq.n	80040fa <HAL_GPIO_Init+0x222>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_GPIO_Init+0x254>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d019      	beq.n	80040f6 <HAL_GPIO_Init+0x21e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <HAL_GPIO_Init+0x258>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_GPIO_Init+0x21a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_GPIO_Init+0x25c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00d      	beq.n	80040ee <HAL_GPIO_Init+0x216>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_GPIO_Init+0x260>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <HAL_GPIO_Init+0x212>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_GPIO_Init+0x264>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_GPIO_Init+0x20e>
 80040e2:	2309      	movs	r3, #9
 80040e4:	e02d      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 80040e6:	230a      	movs	r3, #10
 80040e8:	e02b      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 80040ea:	2308      	movs	r3, #8
 80040ec:	e029      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 80040ee:	2307      	movs	r3, #7
 80040f0:	e027      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 80040f2:	2306      	movs	r3, #6
 80040f4:	e025      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 80040f6:	2305      	movs	r3, #5
 80040f8:	e023      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 80040fa:	2304      	movs	r3, #4
 80040fc:	e021      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 80040fe:	2303      	movs	r3, #3
 8004100:	e01f      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 8004102:	2302      	movs	r3, #2
 8004104:	e01d      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 8004106:	2301      	movs	r3, #1
 8004108:	e01b      	b.n	8004142 <HAL_GPIO_Init+0x26a>
 800410a:	bf00      	nop
 800410c:	58000080 	.word	0x58000080
 8004110:	58024400 	.word	0x58024400
 8004114:	58000400 	.word	0x58000400
 8004118:	58020000 	.word	0x58020000
 800411c:	58020400 	.word	0x58020400
 8004120:	58020800 	.word	0x58020800
 8004124:	58020c00 	.word	0x58020c00
 8004128:	58021000 	.word	0x58021000
 800412c:	58021400 	.word	0x58021400
 8004130:	58021800 	.word	0x58021800
 8004134:	58021c00 	.word	0x58021c00
 8004138:	58022000 	.word	0x58022000
 800413c:	58022400 	.word	0x58022400
 8004140:	2300      	movs	r3, #0
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	f002 0203 	and.w	r2, r2, #3
 8004148:	0092      	lsls	r2, r2, #2
 800414a:	4093      	lsls	r3, r2
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004152:	4938      	ldr	r1, [pc, #224]	; (8004234 <HAL_GPIO_Init+0x35c>)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	3302      	adds	r3, #2
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80041b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3301      	adds	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	f47f ae63 	bne.w	8003eec <HAL_GPIO_Init+0x14>
  }
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	3724      	adds	r7, #36	; 0x24
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	58000400 	.word	0x58000400

08004238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
 8004244:	4613      	mov	r3, r2
 8004246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004248:	787b      	ldrb	r3, [r7, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004254:	e003      	b.n	800425e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	041a      	lsls	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	619a      	str	r2, [r3, #24]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800427c:	887a      	ldrh	r2, [r7, #2]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	041a      	lsls	r2, r3, #16
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	43d9      	mvns	r1, r3
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	400b      	ands	r3, r1
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	4603      	mov	r3, r0
 80042a6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f804 	bl	80042d2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ea:	b08f      	sub	sp, #60	; 0x3c
 80042ec:	af0a      	add	r7, sp, #40	; 0x28
 80042ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e054      	b.n	80043a4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fe fcfb 	bl	8002d10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2203      	movs	r2, #3
 800431e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f004 fc21 	bl	8008b80 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	687e      	ldr	r6, [r7, #4]
 8004346:	466d      	mov	r5, sp
 8004348:	f106 0410 	add.w	r4, r6, #16
 800434c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004354:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004358:	e885 0003 	stmia.w	r5, {r0, r1}
 800435c:	1d33      	adds	r3, r6, #4
 800435e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004360:	6838      	ldr	r0, [r7, #0]
 8004362:	f004 fb9f 	bl	8008aa4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f004 fc18 	bl	8008ba2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	687e      	ldr	r6, [r7, #4]
 800437a:	466d      	mov	r5, sp
 800437c:	f106 0410 	add.w	r4, r6, #16
 8004380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800438c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004390:	1d33      	adds	r3, r6, #4
 8004392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004394:	6838      	ldr	r0, [r7, #0]
 8004396:	f004 fcf7 	bl	8008d88 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_PWREx_ConfigSupply+0x70>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d00a      	beq.n	80043d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_PWREx_ConfigSupply+0x70>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d001      	beq.n	80043d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e01f      	b.n	8004412 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e01d      	b.n	8004412 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <HAL_PWREx_ConfigSupply+0x70>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f023 0207 	bic.w	r2, r3, #7
 80043de:	490f      	ldr	r1, [pc, #60]	; (800441c <HAL_PWREx_ConfigSupply+0x70>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043e6:	f7fe fef7 	bl	80031d8 <HAL_GetTick>
 80043ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043ec:	e009      	b.n	8004402 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043ee:	f7fe fef3 	bl	80031d8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043fc:	d901      	bls.n	8004402 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e007      	b.n	8004412 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_PWREx_ConfigSupply+0x70>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800440a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440e:	d1ee      	bne.n	80043ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	58024800 	.word	0x58024800

08004420 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a04      	ldr	r2, [pc, #16]	; (800443c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442e:	60d3      	str	r3, [r2, #12]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	58024800 	.word	0x58024800

08004440 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	; 0x30
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f000 bc1d 	b.w	8004c8e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8087 	beq.w	8004570 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004462:	4b99      	ldr	r3, [pc, #612]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800446c:	4b96      	ldr	r3, [pc, #600]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	2b10      	cmp	r3, #16
 8004476:	d007      	beq.n	8004488 <HAL_RCC_OscConfig+0x48>
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b18      	cmp	r3, #24
 800447c:	d110      	bne.n	80044a0 <HAL_RCC_OscConfig+0x60>
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d10b      	bne.n	80044a0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	4b8f      	ldr	r3, [pc, #572]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d06c      	beq.n	800456e <HAL_RCC_OscConfig+0x12e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d168      	bne.n	800456e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e3f6      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCC_OscConfig+0x78>
 80044aa:	4b87      	ldr	r3, [pc, #540]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a86      	ldr	r2, [pc, #536]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e02e      	b.n	8004516 <HAL_RCC_OscConfig+0xd6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10c      	bne.n	80044da <HAL_RCC_OscConfig+0x9a>
 80044c0:	4b81      	ldr	r3, [pc, #516]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a80      	ldr	r2, [pc, #512]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b7e      	ldr	r3, [pc, #504]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a7d      	ldr	r2, [pc, #500]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e01d      	b.n	8004516 <HAL_RCC_OscConfig+0xd6>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e2:	d10c      	bne.n	80044fe <HAL_RCC_OscConfig+0xbe>
 80044e4:	4b78      	ldr	r3, [pc, #480]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a77      	ldr	r2, [pc, #476]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b75      	ldr	r3, [pc, #468]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a74      	ldr	r2, [pc, #464]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	e00b      	b.n	8004516 <HAL_RCC_OscConfig+0xd6>
 80044fe:	4b72      	ldr	r3, [pc, #456]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a71      	ldr	r2, [pc, #452]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b6f      	ldr	r3, [pc, #444]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6e      	ldr	r2, [pc, #440]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d013      	beq.n	8004546 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fe fe5b 	bl	80031d8 <HAL_GetTick>
 8004522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004526:	f7fe fe57 	bl	80031d8 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b64      	cmp	r3, #100	; 0x64
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e3aa      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004538:	4b63      	ldr	r3, [pc, #396]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0xe6>
 8004544:	e014      	b.n	8004570 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004546:	f7fe fe47 	bl	80031d8 <HAL_GetTick>
 800454a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800454e:	f7fe fe43 	bl	80031d8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b64      	cmp	r3, #100	; 0x64
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e396      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCC_OscConfig+0x10e>
 800456c:	e000      	b.n	8004570 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80cb 	beq.w	8004714 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457e:	4b52      	ldr	r3, [pc, #328]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004586:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004588:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <HAL_RCC_OscConfig+0x164>
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	2b18      	cmp	r3, #24
 8004598:	d156      	bne.n	8004648 <HAL_RCC_OscConfig+0x208>
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d151      	bne.n	8004648 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a4:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x17c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e368      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045bc:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f023 0219 	bic.w	r2, r3, #25
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	493f      	ldr	r1, [pc, #252]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ce:	f7fe fe03 	bl	80031d8 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d6:	f7fe fdff 	bl	80031d8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e352      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045e8:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	f7fe fe20 	bl	8003238 <HAL_GetREVID>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80045fe:	4293      	cmp	r3, r2
 8004600:	d817      	bhi.n	8004632 <HAL_RCC_OscConfig+0x1f2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d108      	bne.n	800461c <HAL_RCC_OscConfig+0x1dc>
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004612:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004618:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800461a:	e07b      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461c:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	4927      	ldr	r1, [pc, #156]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004630:	e070      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	061b      	lsls	r3, r3, #24
 8004640:	4921      	ldr	r1, [pc, #132]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004642:	4313      	orrs	r3, r2
 8004644:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004646:	e065      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d048      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004650:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 0219 	bic.w	r2, r3, #25
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	491a      	ldr	r1, [pc, #104]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fe fdb9 	bl	80031d8 <HAL_GetTick>
 8004666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466a:	f7fe fdb5 	bl	80031d8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e308      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	f7fe fdd6 	bl	8003238 <HAL_GetREVID>
 800468c:	4603      	mov	r3, r0
 800468e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004692:	4293      	cmp	r3, r2
 8004694:	d81a      	bhi.n	80046cc <HAL_RCC_OscConfig+0x28c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d108      	bne.n	80046b0 <HAL_RCC_OscConfig+0x270>
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ac:	6053      	str	r3, [r2, #4]
 80046ae:	e031      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	031b      	lsls	r3, r3, #12
 80046be:	4902      	ldr	r1, [pc, #8]	; (80046c8 <HAL_RCC_OscConfig+0x288>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
 80046c4:	e026      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
 80046c6:	bf00      	nop
 80046c8:	58024400 	.word	0x58024400
 80046cc:	4b9a      	ldr	r3, [pc, #616]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	4997      	ldr	r1, [pc, #604]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
 80046e0:	e018      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b95      	ldr	r3, [pc, #596]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a94      	ldr	r2, [pc, #592]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ee:	f7fe fd73 	bl	80031d8 <HAL_GetTick>
 80046f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fe fd6f 	bl	80031d8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e2c2      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004708:	4b8b      	ldr	r3, [pc, #556]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80a9 	beq.w	8004874 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004722:	4b85      	ldr	r3, [pc, #532]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800472a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800472c:	4b82      	ldr	r3, [pc, #520]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d007      	beq.n	8004748 <HAL_RCC_OscConfig+0x308>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b18      	cmp	r3, #24
 800473c:	d13a      	bne.n	80047b4 <HAL_RCC_OscConfig+0x374>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d135      	bne.n	80047b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004748:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_OscConfig+0x320>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b80      	cmp	r3, #128	; 0x80
 800475a:	d001      	beq.n	8004760 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e296      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004760:	f7fe fd6a 	bl	8003238 <HAL_GetREVID>
 8004764:	4603      	mov	r3, r0
 8004766:	f241 0203 	movw	r2, #4099	; 0x1003
 800476a:	4293      	cmp	r3, r2
 800476c:	d817      	bhi.n	800479e <HAL_RCC_OscConfig+0x35e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	2b20      	cmp	r3, #32
 8004774:	d108      	bne.n	8004788 <HAL_RCC_OscConfig+0x348>
 8004776:	4b70      	ldr	r3, [pc, #448]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800477e:	4a6e      	ldr	r2, [pc, #440]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004784:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004786:	e075      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004788:	4b6b      	ldr	r3, [pc, #428]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	069b      	lsls	r3, r3, #26
 8004796:	4968      	ldr	r1, [pc, #416]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800479c:	e06a      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800479e:	4b66      	ldr	r3, [pc, #408]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	4962      	ldr	r1, [pc, #392]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047b2:	e05f      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d042      	beq.n	8004842 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047bc:	4b5e      	ldr	r3, [pc, #376]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a5d      	ldr	r2, [pc, #372]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fe fd06 	bl	80031d8 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80047d0:	f7fe fd02 	bl	80031d8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e255      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047e2:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047ee:	f7fe fd23 	bl	8003238 <HAL_GetREVID>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d817      	bhi.n	800482c <HAL_RCC_OscConfig+0x3ec>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	2b20      	cmp	r3, #32
 8004802:	d108      	bne.n	8004816 <HAL_RCC_OscConfig+0x3d6>
 8004804:	4b4c      	ldr	r3, [pc, #304]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800480c:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800480e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004812:	6053      	str	r3, [r2, #4]
 8004814:	e02e      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
 8004816:	4b48      	ldr	r3, [pc, #288]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	069b      	lsls	r3, r3, #26
 8004824:	4944      	ldr	r1, [pc, #272]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
 800482a:	e023      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
 800482c:	4b42      	ldr	r3, [pc, #264]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	493f      	ldr	r1, [pc, #252]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	60cb      	str	r3, [r1, #12]
 8004840:	e018      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a3c      	ldr	r2, [pc, #240]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fe fcc3 	bl	80031d8 <HAL_GetTick>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004856:	f7fe fcbf 	bl	80031d8 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e212      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004868:	4b33      	ldr	r3, [pc, #204]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d036      	beq.n	80048ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d019      	beq.n	80048bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004888:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800488a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fe fca0 	bl	80031d8 <HAL_GetTick>
 8004898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489c:	f7fe fc9c 	bl	80031d8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e1ef      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048ae:	4b22      	ldr	r3, [pc, #136]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80048b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x45c>
 80048ba:	e018      	b.n	80048ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048bc:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80048be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fe fc86 	bl	80031d8 <HAL_GetTick>
 80048cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fe fc82 	bl	80031d8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e1d5      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d039      	beq.n	800496e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01c      	beq.n	800493c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004902:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800490c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800490e:	f7fe fc63 	bl	80031d8 <HAL_GetTick>
 8004912:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004916:	f7fe fc5f 	bl	80031d8 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e1b2      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_RCC_OscConfig+0x4d6>
 8004934:	e01b      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
 8004936:	bf00      	nop
 8004938:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493c:	4b9b      	ldr	r3, [pc, #620]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a9a      	ldr	r2, [pc, #616]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004946:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004948:	f7fe fc46 	bl	80031d8 <HAL_GetTick>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004950:	f7fe fc42 	bl	80031d8 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e195      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004962:	4b92      	ldr	r3, [pc, #584]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8081 	beq.w	8004a7e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800497c:	4b8c      	ldr	r3, [pc, #560]	; (8004bb0 <HAL_RCC_OscConfig+0x770>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a8b      	ldr	r2, [pc, #556]	; (8004bb0 <HAL_RCC_OscConfig+0x770>)
 8004982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004988:	f7fe fc26 	bl	80031d8 <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004990:	f7fe fc22 	bl	80031d8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e175      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049a2:	4b83      	ldr	r3, [pc, #524]	; (8004bb0 <HAL_RCC_OscConfig+0x770>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_OscConfig+0x584>
 80049b6:	4b7d      	ldr	r3, [pc, #500]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a7c      	ldr	r2, [pc, #496]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
 80049c2:	e02d      	b.n	8004a20 <HAL_RCC_OscConfig+0x5e0>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x5a6>
 80049cc:	4b77      	ldr	r3, [pc, #476]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a76      	ldr	r2, [pc, #472]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	4b74      	ldr	r3, [pc, #464]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a73      	ldr	r2, [pc, #460]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
 80049e4:	e01c      	b.n	8004a20 <HAL_RCC_OscConfig+0x5e0>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x5c8>
 80049ee:	4b6f      	ldr	r3, [pc, #444]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a6e      	ldr	r2, [pc, #440]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
 80049fa:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a6b      	ldr	r2, [pc, #428]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0x5e0>
 8004a08:	4b68      	ldr	r3, [pc, #416]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	4a67      	ldr	r2, [pc, #412]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
 8004a14:	4b65      	ldr	r3, [pc, #404]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a64      	ldr	r2, [pc, #400]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a1a:	f023 0304 	bic.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fe fbd6 	bl	80031d8 <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fe fbd2 	bl	80031d8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e123      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a46:	4b59      	ldr	r3, [pc, #356]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0ee      	beq.n	8004a30 <HAL_RCC_OscConfig+0x5f0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fe fbc0 	bl	80031d8 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fe fbbc 	bl	80031d8 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e10d      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a72:	4b4e      	ldr	r3, [pc, #312]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ee      	bne.n	8004a5c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8102 	beq.w	8004c8c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a88:	4b48      	ldr	r3, [pc, #288]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a90:	2b18      	cmp	r3, #24
 8004a92:	f000 80bd 	beq.w	8004c10 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	f040 809e 	bne.w	8004bdc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa0:	4b42      	ldr	r3, [pc, #264]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a41      	ldr	r2, [pc, #260]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fe fb94 	bl	80031d8 <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fe fb90 	bl	80031d8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e0e3      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ac6:	4b39      	ldr	r3, [pc, #228]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ad2:	4b36      	ldr	r3, [pc, #216]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad6:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <HAL_RCC_OscConfig+0x774>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	4931      	ldr	r1, [pc, #196]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	628b      	str	r3, [r1, #40]	; 0x28
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	3b01      	subs	r3, #1
 8004af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	3b01      	subs	r3, #1
 8004afc:	025b      	lsls	r3, r3, #9
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	3b01      	subs	r3, #1
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	3b01      	subs	r3, #1
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b1c:	4923      	ldr	r1, [pc, #140]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	4a21      	ldr	r2, [pc, #132]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b32:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_RCC_OscConfig+0x778>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b3a:	00d2      	lsls	r2, r2, #3
 8004b3c:	491b      	ldr	r1, [pc, #108]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b42:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	f023 020c 	bic.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4917      	ldr	r1, [pc, #92]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b54:	4b15      	ldr	r3, [pc, #84]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	f023 0202 	bic.w	r2, r3, #2
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	4912      	ldr	r1, [pc, #72]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	4a10      	ldr	r2, [pc, #64]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4a07      	ldr	r2, [pc, #28]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fe fb19 	bl	80031d8 <HAL_GetTick>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba8:	e011      	b.n	8004bce <HAL_RCC_OscConfig+0x78e>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	58024800 	.word	0x58024800
 8004bb4:	fffffc0c 	.word	0xfffffc0c
 8004bb8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fe fb0c 	bl	80031d8 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e05f      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bce:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <HAL_RCC_OscConfig+0x858>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x77c>
 8004bda:	e057      	b.n	8004c8c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b2e      	ldr	r3, [pc, #184]	; (8004c98 <HAL_RCC_OscConfig+0x858>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2d      	ldr	r2, [pc, #180]	; (8004c98 <HAL_RCC_OscConfig+0x858>)
 8004be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fe faf6 	bl	80031d8 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fe faf2 	bl	80031d8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e045      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c02:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_RCC_OscConfig+0x858>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x7b0>
 8004c0e:	e03d      	b.n	8004c8c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCC_OscConfig+0x858>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_RCC_OscConfig+0x858>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d031      	beq.n	8004c88 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 0203 	and.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d12a      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d122      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d11a      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	0a5b      	lsrs	r3, r3, #9
 8004c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d111      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d108      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	0e1b      	lsrs	r3, r3, #24
 8004c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3730      	adds	r7, #48	; 0x30
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400

08004c9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e19c      	b.n	8004fea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b8a      	ldr	r3, [pc, #552]	; (8004edc <HAL_RCC_ClockConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d910      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b87      	ldr	r3, [pc, #540]	; (8004edc <HAL_RCC_ClockConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 020f 	bic.w	r2, r3, #15
 8004cc6:	4985      	ldr	r1, [pc, #532]	; (8004edc <HAL_RCC_ClockConfig+0x240>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b83      	ldr	r3, [pc, #524]	; (8004edc <HAL_RCC_ClockConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e184      	b.n	8004fea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d010      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	4b7b      	ldr	r3, [pc, #492]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d908      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cfc:	4b78      	ldr	r3, [pc, #480]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4975      	ldr	r1, [pc, #468]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d010      	beq.n	8004d3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	4b70      	ldr	r3, [pc, #448]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d908      	bls.n	8004d3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d2a:	4b6d      	ldr	r3, [pc, #436]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	496a      	ldr	r1, [pc, #424]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d010      	beq.n	8004d6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	4b64      	ldr	r3, [pc, #400]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d908      	bls.n	8004d6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d58:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	495e      	ldr	r1, [pc, #376]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d010      	beq.n	8004d98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	4b59      	ldr	r3, [pc, #356]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d908      	bls.n	8004d98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d86:	4b56      	ldr	r3, [pc, #344]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	4953      	ldr	r1, [pc, #332]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	4b4d      	ldr	r3, [pc, #308]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d908      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db4:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f023 020f 	bic.w	r2, r3, #15
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4947      	ldr	r1, [pc, #284]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d055      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dd2:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4940      	ldr	r1, [pc, #256]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dec:	4b3c      	ldr	r3, [pc, #240]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d121      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0f6      	b.n	8004fea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d107      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e04:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d115      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0ea      	b.n	8004fea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e1c:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d109      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0de      	b.n	8004fea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0d6      	b.n	8004fea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e3c:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f023 0207 	bic.w	r2, r3, #7
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4925      	ldr	r1, [pc, #148]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fe f9c3 	bl	80031d8 <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e56:	f7fe f9bf 	bl	80031d8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0be      	b.n	8004fea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d1eb      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d208      	bcs.n	8004eac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f023 020f 	bic.w	r2, r3, #15
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	490e      	ldr	r1, [pc, #56]	; (8004ee0 <HAL_RCC_ClockConfig+0x244>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_RCC_ClockConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d214      	bcs.n	8004ee4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b08      	ldr	r3, [pc, #32]	; (8004edc <HAL_RCC_ClockConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 020f 	bic.w	r2, r3, #15
 8004ec2:	4906      	ldr	r1, [pc, #24]	; (8004edc <HAL_RCC_ClockConfig+0x240>)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_RCC_ClockConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e086      	b.n	8004fea <HAL_RCC_ClockConfig+0x34e>
 8004edc:	52002000 	.word	0x52002000
 8004ee0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	4b3f      	ldr	r3, [pc, #252]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d208      	bcs.n	8004f12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f00:	4b3c      	ldr	r3, [pc, #240]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	4939      	ldr	r1, [pc, #228]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d010      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	4b34      	ldr	r3, [pc, #208]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d208      	bcs.n	8004f40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f2e:	4b31      	ldr	r3, [pc, #196]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	492e      	ldr	r1, [pc, #184]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d010      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	4b28      	ldr	r3, [pc, #160]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d208      	bcs.n	8004f6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	4922      	ldr	r1, [pc, #136]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d010      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d208      	bcs.n	8004f9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	4917      	ldr	r1, [pc, #92]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f9c:	f000 f834 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	4912      	ldr	r1, [pc, #72]	; (8004ff8 <HAL_RCC_ClockConfig+0x35c>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fba:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <HAL_RCC_ClockConfig+0x358>)
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <HAL_RCC_ClockConfig+0x35c>)
 8004fc4:	5cd3      	ldrb	r3, [r2, r3]
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <HAL_RCC_ClockConfig+0x360>)
 8004fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fd4:	4a0a      	ldr	r2, [pc, #40]	; (8005000 <HAL_RCC_ClockConfig+0x364>)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_RCC_ClockConfig+0x368>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fd ff00 	bl	8002de4 <HAL_InitTick>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	08009008 	.word	0x08009008
 8004ffc:	2400000c 	.word	0x2400000c
 8005000:	24000008 	.word	0x24000008
 8005004:	24000010 	.word	0x24000010

08005008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800500e:	4bb3      	ldr	r3, [pc, #716]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005016:	2b18      	cmp	r3, #24
 8005018:	f200 8155 	bhi.w	80052c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_RCC_GetSysClockFreq+0x1c>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005089 	.word	0x08005089
 8005028:	080052c7 	.word	0x080052c7
 800502c:	080052c7 	.word	0x080052c7
 8005030:	080052c7 	.word	0x080052c7
 8005034:	080052c7 	.word	0x080052c7
 8005038:	080052c7 	.word	0x080052c7
 800503c:	080052c7 	.word	0x080052c7
 8005040:	080052c7 	.word	0x080052c7
 8005044:	080050af 	.word	0x080050af
 8005048:	080052c7 	.word	0x080052c7
 800504c:	080052c7 	.word	0x080052c7
 8005050:	080052c7 	.word	0x080052c7
 8005054:	080052c7 	.word	0x080052c7
 8005058:	080052c7 	.word	0x080052c7
 800505c:	080052c7 	.word	0x080052c7
 8005060:	080052c7 	.word	0x080052c7
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080052c7 	.word	0x080052c7
 800506c:	080052c7 	.word	0x080052c7
 8005070:	080052c7 	.word	0x080052c7
 8005074:	080052c7 	.word	0x080052c7
 8005078:	080052c7 	.word	0x080052c7
 800507c:	080052c7 	.word	0x080052c7
 8005080:	080052c7 	.word	0x080052c7
 8005084:	080050bb 	.word	0x080050bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005088:	4b94      	ldr	r3, [pc, #592]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005094:	4b91      	ldr	r3, [pc, #580]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	08db      	lsrs	r3, r3, #3
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	4a90      	ldr	r2, [pc, #576]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
 80050a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80050a6:	e111      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050a8:	4b8d      	ldr	r3, [pc, #564]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050aa:	61bb      	str	r3, [r7, #24]
    break;
 80050ac:	e10e      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80050ae:	4b8d      	ldr	r3, [pc, #564]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050b0:	61bb      	str	r3, [r7, #24]
    break;
 80050b2:	e10b      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80050b4:	4b8c      	ldr	r3, [pc, #560]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050b6:	61bb      	str	r3, [r7, #24]
    break;
 80050b8:	e108      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050ba:	4b88      	ldr	r3, [pc, #544]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80050c4:	4b85      	ldr	r3, [pc, #532]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050d0:	4b82      	ldr	r3, [pc, #520]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80050da:	4b80      	ldr	r3, [pc, #512]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050de:	08db      	lsrs	r3, r3, #3
 80050e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80e1 	beq.w	80052c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b02      	cmp	r3, #2
 8005102:	f000 8083 	beq.w	800520c <HAL_RCC_GetSysClockFreq+0x204>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b02      	cmp	r3, #2
 800510a:	f200 80a1 	bhi.w	8005250 <HAL_RCC_GetSysClockFreq+0x248>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0x114>
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d056      	beq.n	80051c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800511a:	e099      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800511c:	4b6f      	ldr	r3, [pc, #444]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02d      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005128:	4b6c      	ldr	r3, [pc, #432]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	4a6b      	ldr	r2, [pc, #428]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
 8005138:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b62      	ldr	r3, [pc, #392]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a02 	vldr	s12, [r7, #8]
 8005166:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005182:	e087      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005196:	4b51      	ldr	r3, [pc, #324]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c6:	e065      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	4b40      	ldr	r3, [pc, #256]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520a:	e043      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b2f      	ldr	r3, [pc, #188]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005232:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524e:	e021      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b1e      	ldr	r3, [pc, #120]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a02 	vldr	s12, [r7, #8]
 8005276:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005292:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	0a5b      	lsrs	r3, r3, #9
 800529a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529e:	3301      	adds	r3, #1
 80052a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	ee07 3a90 	vmov	s15, r3
 80052a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b8:	ee17 3a90 	vmov	r3, s15
 80052bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80052be:	e005      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61bb      	str	r3, [r7, #24]
    break;
 80052c4:	e002      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052c8:	61bb      	str	r3, [r7, #24]
    break;
 80052ca:	bf00      	nop
  }

  return sysclockfreq;
 80052cc:	69bb      	ldr	r3, [r7, #24]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3724      	adds	r7, #36	; 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	58024400 	.word	0x58024400
 80052e0:	03d09000 	.word	0x03d09000
 80052e4:	003d0900 	.word	0x003d0900
 80052e8:	007a1200 	.word	0x007a1200
 80052ec:	46000000 	.word	0x46000000
 80052f0:	4c742400 	.word	0x4c742400
 80052f4:	4a742400 	.word	0x4a742400
 80052f8:	4af42400 	.word	0x4af42400

080052fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005302:	f7ff fe81 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <HAL_RCC_GetHCLKFreq+0x50>)
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490f      	ldr	r1, [pc, #60]	; (8005350 <HAL_RCC_GetHCLKFreq+0x54>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <HAL_RCC_GetHCLKFreq+0x50>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <HAL_RCC_GetHCLKFreq+0x54>)
 800532a:	5cd3      	ldrb	r3, [r2, r3]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	4a07      	ldr	r2, [pc, #28]	; (8005354 <HAL_RCC_GetHCLKFreq+0x58>)
 8005338:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800533a:	4a07      	ldr	r2, [pc, #28]	; (8005358 <HAL_RCC_GetHCLKFreq+0x5c>)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <HAL_RCC_GetHCLKFreq+0x58>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	58024400 	.word	0x58024400
 8005350:	08009008 	.word	0x08009008
 8005354:	2400000c 	.word	0x2400000c
 8005358:	24000008 	.word	0x24000008

0800535c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005360:	f7ff ffcc 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	4904      	ldr	r1, [pc, #16]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005372:	5ccb      	ldrb	r3, [r1, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	58024400 	.word	0x58024400
 8005384:	08009008 	.word	0x08009008

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800538c:	f7ff ffb6 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4904      	ldr	r1, [pc, #16]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	58024400 	.word	0x58024400
 80053b0:	08009008 	.word	0x08009008

080053b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	223f      	movs	r2, #63	; 0x3f
 80053c2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_RCC_GetClockConfig+0x7c>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f003 0207 	and.w	r2, r3, #7
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80053d0:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_RCC_GetClockConfig+0x7c>)
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80053dc:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_RCC_GetClockConfig+0x7c>)
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f003 020f 	and.w	r2, r3, #15
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_RCC_GetClockConfig+0x7c>)
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80053f4:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <HAL_RCC_GetClockConfig+0x7c>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCC_GetClockConfig+0x7c>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800540c:	4b08      	ldr	r3, [pc, #32]	; (8005430 <HAL_RCC_GetClockConfig+0x7c>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_RCC_GetClockConfig+0x80>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 020f 	and.w	r2, r3, #15
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	601a      	str	r2, [r3, #0]
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	58024400 	.word	0x58024400
 8005434:	52002000 	.word	0x52002000

08005438 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005440:	2300      	movs	r3, #0
 8005442:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005444:	2300      	movs	r3, #0
 8005446:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d03f      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005458:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800545c:	d02a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800545e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005462:	d824      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005468:	d018      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800546a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800546e:	d81e      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005478:	d007      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800547a:	e018      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547c:	4ba3      	ldr	r3, [pc, #652]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4aa2      	ldr	r2, [pc, #648]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005488:	e015      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	2102      	movs	r1, #2
 8005490:	4618      	mov	r0, r3
 8005492:	f001 f9d5 	bl	8006840 <RCCEx_PLL2_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800549a:	e00c      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3324      	adds	r3, #36	; 0x24
 80054a0:	2102      	movs	r1, #2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 fa7e 	bl	80069a4 <RCCEx_PLL3_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80054ac:	e003      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
      break;
 80054b2:	e000      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80054b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054bc:	4b93      	ldr	r3, [pc, #588]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c8:	4990      	ldr	r1, [pc, #576]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	650b      	str	r3, [r1, #80]	; 0x50
 80054ce:	e001      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d03d      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d826      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005505 	.word	0x08005505
 80054f4:	08005513 	.word	0x08005513
 80054f8:	08005525 	.word	0x08005525
 80054fc:	0800553d 	.word	0x0800553d
 8005500:	0800553d 	.word	0x0800553d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005504:	4b81      	ldr	r3, [pc, #516]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	4a80      	ldr	r2, [pc, #512]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800550a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005510:	e015      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f001 f991 	bl	8006840 <RCCEx_PLL2_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005522:	e00c      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3324      	adds	r3, #36	; 0x24
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fa3a 	bl	80069a4 <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005534:	e003      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
      break;
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800553c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005544:	4b71      	ldr	r3, [pc, #452]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005548:	f023 0207 	bic.w	r2, r3, #7
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	496e      	ldr	r1, [pc, #440]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005552:	4313      	orrs	r3, r2
 8005554:	650b      	str	r3, [r1, #80]	; 0x50
 8005556:	e001      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005564:	2b00      	cmp	r3, #0
 8005566:	d042      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005570:	d02b      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005576:	d825      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005578:	2bc0      	cmp	r3, #192	; 0xc0
 800557a:	d028      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800557c:	2bc0      	cmp	r3, #192	; 0xc0
 800557e:	d821      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005580:	2b80      	cmp	r3, #128	; 0x80
 8005582:	d016      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d81d      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d007      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005590:	e018      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005592:	4b5e      	ldr	r3, [pc, #376]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	4a5d      	ldr	r2, [pc, #372]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800559c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800559e:	e017      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f94a 	bl	8006840 <RCCEx_PLL2_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80055b0:	e00e      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3324      	adds	r3, #36	; 0x24
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 f9f3 	bl	80069a4 <RCCEx_PLL3_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80055c2:	e005      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
      break;
 80055c8:	e002      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80055ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055d6:	4b4d      	ldr	r3, [pc, #308]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e2:	494a      	ldr	r1, [pc, #296]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	650b      	str	r3, [r1, #80]	; 0x50
 80055e8:	e001      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d049      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005604:	d030      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005606:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800560a:	d82a      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800560c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005610:	d02c      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005612:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005616:	d824      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800561c:	d018      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800561e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005622:	d81e      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800562c:	d007      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800562e:	e018      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005630:	4b36      	ldr	r3, [pc, #216]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	4a35      	ldr	r2, [pc, #212]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800563c:	e017      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f001 f8fb 	bl	8006840 <RCCEx_PLL2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800564e:	e00e      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3324      	adds	r3, #36	; 0x24
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f9a4 	bl	80069a4 <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005660:	e005      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
      break;
 8005666:	e002      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800566c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005674:	4b25      	ldr	r3, [pc, #148]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005682:	4922      	ldr	r1, [pc, #136]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005684:	4313      	orrs	r3, r2
 8005686:	658b      	str	r3, [r1, #88]	; 0x58
 8005688:	e001      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568a:	7dfb      	ldrb	r3, [r7, #23]
 800568c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005696:	2b00      	cmp	r3, #0
 8005698:	d04b      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056a4:	d030      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80056a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056aa:	d82a      	bhi.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056b0:	d02e      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80056b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056b6:	d824      	bhi.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056bc:	d018      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80056be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c2:	d81e      	bhi.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80056c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056cc:	d007      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80056ce:	e018      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d0:	4b0e      	ldr	r3, [pc, #56]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4a0d      	ldr	r2, [pc, #52]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056dc:	e019      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f8ab 	bl	8006840 <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80056ee:	e010      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3324      	adds	r3, #36	; 0x24
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 f954 	bl	80069a4 <RCCEx_PLL3_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005700:	e007      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
      break;
 8005706:	e004      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005708:	bf00      	nop
 800570a:	e002      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800570c:	58024400 	.word	0x58024400
      break;
 8005710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005718:	4b99      	ldr	r3, [pc, #612]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005726:	4996      	ldr	r1, [pc, #600]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005728:	4313      	orrs	r3, r2
 800572a:	658b      	str	r3, [r1, #88]	; 0x58
 800572c:	e001      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d032      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005742:	2b30      	cmp	r3, #48	; 0x30
 8005744:	d01c      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005746:	2b30      	cmp	r3, #48	; 0x30
 8005748:	d817      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800574a:	2b20      	cmp	r3, #32
 800574c:	d00c      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800574e:	2b20      	cmp	r3, #32
 8005750:	d813      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005756:	2b10      	cmp	r3, #16
 8005758:	d10f      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575a:	4b89      	ldr	r3, [pc, #548]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4a88      	ldr	r2, [pc, #544]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005766:	e00e      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	2102      	movs	r1, #2
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f866 	bl	8006840 <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005778:	e005      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
      break;
 800577e:	e002      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005780:	bf00      	nop
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d109      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800578c:	4b7c      	ldr	r3, [pc, #496]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005790:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005798:	4979      	ldr	r1, [pc, #484]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800579a:	4313      	orrs	r3, r2
 800579c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800579e:	e001      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d047      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057b8:	d030      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057be:	d82a      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057c4:	d02c      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80057c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057ca:	d824      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d0:	d018      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80057d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d6:	d81e      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e0:	d007      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80057e2:	e018      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e4:	4b66      	ldr	r3, [pc, #408]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4a65      	ldr	r2, [pc, #404]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80057f0:	e017      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 f821 	bl	8006840 <RCCEx_PLL2_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005802:	e00e      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3324      	adds	r3, #36	; 0x24
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f001 f8ca 	bl	80069a4 <RCCEx_PLL3_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005814:	e005      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
      break;
 800581a:	e002      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005828:	4b55      	ldr	r3, [pc, #340]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005834:	4952      	ldr	r1, [pc, #328]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005836:	4313      	orrs	r3, r2
 8005838:	650b      	str	r3, [r1, #80]	; 0x50
 800583a:	e001      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d049      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005854:	d02e      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800585a:	d828      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800585c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005860:	d02a      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005862:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005866:	d822      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005868:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800586c:	d026      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800586e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005872:	d81c      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005878:	d010      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800587a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800587e:	d816      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01d      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005888:	d111      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3304      	adds	r3, #4
 800588e:	2101      	movs	r1, #1
 8005890:	4618      	mov	r0, r3
 8005892:	f000 ffd5 	bl	8006840 <RCCEx_PLL2_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800589a:	e012      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3324      	adds	r3, #36	; 0x24
 80058a0:	2101      	movs	r1, #1
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 f87e 	bl	80069a4 <RCCEx_PLL3_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80058ac:	e009      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
      break;
 80058b2:	e006      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058b4:	bf00      	nop
 80058b6:	e004      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058b8:	bf00      	nop
 80058ba:	e002      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058bc:	bf00      	nop
 80058be:	e000      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80058c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d109      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058c8:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d4:	492a      	ldr	r1, [pc, #168]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	650b      	str	r3, [r1, #80]	; 0x50
 80058da:	e001      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d04d      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058f6:	d02e      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80058f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058fc:	d828      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80058fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005902:	d02a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d822      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800590a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800590e:	d026      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005910:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005914:	d81c      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591a:	d010      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800591c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005920:	d816      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01d      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800592a:	d111      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	2101      	movs	r1, #1
 8005932:	4618      	mov	r0, r3
 8005934:	f000 ff84 	bl	8006840 <RCCEx_PLL2_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800593c:	e012      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3324      	adds	r3, #36	; 0x24
 8005942:	2101      	movs	r1, #1
 8005944:	4618      	mov	r0, r3
 8005946:	f001 f82d 	bl	80069a4 <RCCEx_PLL3_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800594e:	e009      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	75fb      	strb	r3, [r7, #23]
      break;
 8005954:	e006      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005956:	bf00      	nop
 8005958:	e004      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800595a:	bf00      	nop
 800595c:	e002      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10c      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800596c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005978:	4901      	ldr	r1, [pc, #4]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800597a:	4313      	orrs	r3, r2
 800597c:	658b      	str	r3, [r1, #88]	; 0x58
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02f      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800599c:	d00e      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800599e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a2:	d814      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x596>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80059a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ac:	d10f      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ae:	4baf      	ldr	r3, [pc, #700]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	4aae      	ldr	r2, [pc, #696]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80059ba:	e00c      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 ff3c 	bl	8006840 <RCCEx_PLL2_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	75fb      	strb	r3, [r7, #23]
      break;
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80059d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059dc:	4ba3      	ldr	r3, [pc, #652]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e8:	49a0      	ldr	r1, [pc, #640]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	650b      	str	r3, [r1, #80]	; 0x50
 80059ee:	e001      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
 80059f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d032      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d81b      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a47 	.word	0x08005a47
 8005a14:	08005a21 	.word	0x08005a21
 8005a18:	08005a2f 	.word	0x08005a2f
 8005a1c:	08005a47 	.word	0x08005a47
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a20:	4b92      	ldr	r3, [pc, #584]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	4a91      	ldr	r2, [pc, #580]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a2c:	e00c      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	2102      	movs	r1, #2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 ff03 	bl	8006840 <RCCEx_PLL2_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a3e:	e003      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	75fb      	strb	r3, [r7, #23]
      break;
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a4e:	4b87      	ldr	r3, [pc, #540]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	f023 0203 	bic.w	r2, r3, #3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5a:	4984      	ldr	r1, [pc, #528]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a60:	e001      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8086 	beq.w	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a74:	4b7e      	ldr	r3, [pc, #504]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a7d      	ldr	r2, [pc, #500]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a80:	f7fd fbaa 	bl	80031d8 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a86:	e009      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a88:	f7fd fba6 	bl	80031d8 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b64      	cmp	r3, #100	; 0x64
 8005a94:	d902      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	75fb      	strb	r3, [r7, #23]
        break;
 8005a9a:	e005      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a9c:	4b74      	ldr	r3, [pc, #464]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ef      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d166      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005aae:	4b6f      	ldr	r3, [pc, #444]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ab0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ab8:	4053      	eors	r3, r2
 8005aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ac2:	4b6a      	ldr	r3, [pc, #424]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005acc:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad0:	4a66      	ldr	r2, [pc, #408]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad8:	4b64      	ldr	r3, [pc, #400]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	4a63      	ldr	r2, [pc, #396]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ae4:	4a61      	ldr	r2, [pc, #388]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af4:	d115      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af6:	f7fd fb6f 	bl	80031d8 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005afc:	e00b      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fd fb6b 	bl	80031d8 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d902      	bls.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	75fb      	strb	r3, [r7, #23]
            break;
 8005b14:	e005      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b16:	4b55      	ldr	r3, [pc, #340]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0ed      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d126      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b36:	d10d      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005b38:	4b4c      	ldr	r3, [pc, #304]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b46:	0919      	lsrs	r1, r3, #4
 8005b48:	4b4a      	ldr	r3, [pc, #296]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005b4a:	400b      	ands	r3, r1
 8005b4c:	4947      	ldr	r1, [pc, #284]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	610b      	str	r3, [r1, #16]
 8005b52:	e005      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005b54:	4b45      	ldr	r3, [pc, #276]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	4a44      	ldr	r2, [pc, #272]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b5e:	6113      	str	r3, [r2, #16]
 8005b60:	4b42      	ldr	r3, [pc, #264]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6e:	493f      	ldr	r1, [pc, #252]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	670b      	str	r3, [r1, #112]	; 0x70
 8005b74:	e004      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	75bb      	strb	r3, [r7, #22]
 8005b7a:	e001      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8085 	beq.w	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b92:	2b28      	cmp	r3, #40	; 0x28
 8005b94:	d866      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005c79 	.word	0x08005c79
 8005ba0:	08005c65 	.word	0x08005c65
 8005ba4:	08005c65 	.word	0x08005c65
 8005ba8:	08005c65 	.word	0x08005c65
 8005bac:	08005c65 	.word	0x08005c65
 8005bb0:	08005c65 	.word	0x08005c65
 8005bb4:	08005c65 	.word	0x08005c65
 8005bb8:	08005c65 	.word	0x08005c65
 8005bbc:	08005c41 	.word	0x08005c41
 8005bc0:	08005c65 	.word	0x08005c65
 8005bc4:	08005c65 	.word	0x08005c65
 8005bc8:	08005c65 	.word	0x08005c65
 8005bcc:	08005c65 	.word	0x08005c65
 8005bd0:	08005c65 	.word	0x08005c65
 8005bd4:	08005c65 	.word	0x08005c65
 8005bd8:	08005c65 	.word	0x08005c65
 8005bdc:	08005c53 	.word	0x08005c53
 8005be0:	08005c65 	.word	0x08005c65
 8005be4:	08005c65 	.word	0x08005c65
 8005be8:	08005c65 	.word	0x08005c65
 8005bec:	08005c65 	.word	0x08005c65
 8005bf0:	08005c65 	.word	0x08005c65
 8005bf4:	08005c65 	.word	0x08005c65
 8005bf8:	08005c65 	.word	0x08005c65
 8005bfc:	08005c79 	.word	0x08005c79
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005c65 	.word	0x08005c65
 8005c08:	08005c65 	.word	0x08005c65
 8005c0c:	08005c65 	.word	0x08005c65
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c79 	.word	0x08005c79
 8005c20:	08005c65 	.word	0x08005c65
 8005c24:	08005c65 	.word	0x08005c65
 8005c28:	08005c65 	.word	0x08005c65
 8005c2c:	08005c65 	.word	0x08005c65
 8005c30:	08005c65 	.word	0x08005c65
 8005c34:	08005c65 	.word	0x08005c65
 8005c38:	08005c65 	.word	0x08005c65
 8005c3c:	08005c79 	.word	0x08005c79
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	2101      	movs	r1, #1
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fdfa 	bl	8006840 <RCCEx_PLL2_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005c50:	e013      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3324      	adds	r3, #36	; 0x24
 8005c56:	2101      	movs	r1, #1
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fea3 	bl	80069a4 <RCCEx_PLL3_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005c62:	e00a      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
      break;
 8005c68:	e007      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c6a:	bf00      	nop
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	58024800 	.word	0x58024800
 8005c74:	00ffffcf 	.word	0x00ffffcf
      break;
 8005c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c80:	4b96      	ldr	r3, [pc, #600]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c8c:	4993      	ldr	r1, [pc, #588]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	654b      	str	r3, [r1, #84]	; 0x54
 8005c92:	e001      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d038      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca8:	2b05      	cmp	r3, #5
 8005caa:	d821      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005cf7 	.word	0x08005cf7
 8005cb8:	08005ccd 	.word	0x08005ccd
 8005cbc:	08005cdf 	.word	0x08005cdf
 8005cc0:	08005cf7 	.word	0x08005cf7
 8005cc4:	08005cf7 	.word	0x08005cf7
 8005cc8:	08005cf7 	.word	0x08005cf7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fdb4 	bl	8006840 <RCCEx_PLL2_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005cdc:	e00c      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3324      	adds	r3, #36	; 0x24
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fe5d 	bl	80069a4 <RCCEx_PLL3_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005cee:	e003      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005cfe:	4b77      	ldr	r3, [pc, #476]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	f023 0207 	bic.w	r2, r3, #7
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0a:	4974      	ldr	r1, [pc, #464]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	654b      	str	r3, [r1, #84]	; 0x54
 8005d10:	e001      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d03a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d821      	bhi.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d77 	.word	0x08005d77
 8005d38:	08005d4d 	.word	0x08005d4d
 8005d3c:	08005d5f 	.word	0x08005d5f
 8005d40:	08005d77 	.word	0x08005d77
 8005d44:	08005d77 	.word	0x08005d77
 8005d48:	08005d77 	.word	0x08005d77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	2101      	movs	r1, #1
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fd74 	bl	8006840 <RCCEx_PLL2_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005d5c:	e00c      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3324      	adds	r3, #36	; 0x24
 8005d62:	2101      	movs	r1, #1
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fe1d 	bl	80069a4 <RCCEx_PLL3_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005d6e:	e003      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
      break;
 8005d74:	e000      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d7e:	4b57      	ldr	r3, [pc, #348]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	f023 0207 	bic.w	r2, r3, #7
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8c:	4953      	ldr	r1, [pc, #332]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	658b      	str	r3, [r1, #88]	; 0x58
 8005d92:	e001      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
 8005d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d04b      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dae:	d02e      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db4:	d828      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d02a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc0:	d822      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dc6:	d026      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005dc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dcc:	d81c      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd2:	d010      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd8:	d816      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01d      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de2:	d111      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fd28 	bl	8006840 <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005df4:	e012      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3324      	adds	r3, #36	; 0x24
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fdd1 	bl	80069a4 <RCCEx_PLL3_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e06:	e009      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e0c:	e006      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e0e:	bf00      	nop
 8005e10:	e004      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e22:	4b2e      	ldr	r3, [pc, #184]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e30:	492a      	ldr	r1, [pc, #168]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	654b      	str	r3, [r1, #84]	; 0x54
 8005e36:	e001      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d04d      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e52:	d02e      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005e54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e58:	d828      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5e:	d02a      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e64:	d822      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e6a:	d026      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e70:	d81c      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e76:	d010      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e7c:	d816      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01d      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e86:	d111      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fcd6 	bl	8006840 <RCCEx_PLL2_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005e98:	e012      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3324      	adds	r3, #36	; 0x24
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fd7f 	bl	80069a4 <RCCEx_PLL3_Config>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005eaa:	e009      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	e006      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e004      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e002      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ec6:	4b05      	ldr	r3, [pc, #20]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed4:	4901      	ldr	r1, [pc, #4]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	658b      	str	r3, [r1, #88]	; 0x58
 8005eda:	e003      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d04b      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ef6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005efa:	d02e      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005efc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f00:	d828      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f06:	d02a      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0c:	d822      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f12:	d026      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005f14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f18:	d81c      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1e:	d010      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f24:	d816      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01d      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2e:	d111      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fc82 	bl	8006840 <RCCEx_PLL2_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f40:	e012      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3324      	adds	r3, #36	; 0x24
 8005f46:	2102      	movs	r1, #2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fd2b 	bl	80069a4 <RCCEx_PLL3_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f52:	e009      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
      break;
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e004      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f6e:	4b9d      	ldr	r3, [pc, #628]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f7c:	4999      	ldr	r1, [pc, #612]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	658b      	str	r3, [r1, #88]	; 0x58
 8005f82:	e001      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01a      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9e:	d10a      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3324      	adds	r3, #36	; 0x24
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fcfc 	bl	80069a4 <RCCEx_PLL3_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fb6:	4b8b      	ldr	r3, [pc, #556]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc4:	4987      	ldr	r1, [pc, #540]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe0:	d10a      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3324      	adds	r3, #36	; 0x24
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fcdb 	bl	80069a4 <RCCEx_PLL3_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ff8:	4b7a      	ldr	r3, [pc, #488]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006006:	4977      	ldr	r1, [pc, #476]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006008:	4313      	orrs	r3, r2
 800600a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d034      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800601e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006022:	d01d      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006028:	d817      	bhi.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800602e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006032:	d009      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006034:	e011      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3304      	adds	r3, #4
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fbff 	bl	8006840 <RCCEx_PLL2_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006046:	e00c      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3324      	adds	r3, #36	; 0x24
 800604c:	2102      	movs	r1, #2
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fca8 	bl	80069a4 <RCCEx_PLL3_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006058:	e003      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
      break;
 800605e:	e000      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006068:	4b5e      	ldr	r3, [pc, #376]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006076:	495b      	ldr	r1, [pc, #364]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006078:	4313      	orrs	r3, r2
 800607a:	658b      	str	r3, [r1, #88]	; 0x58
 800607c:	e001      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d033      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006094:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006098:	d01c      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800609a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800609e:	d816      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80060a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a4:	d003      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80060a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060aa:	d007      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80060ac:	e00f      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ae:	4b4d      	ldr	r3, [pc, #308]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	4a4c      	ldr	r2, [pc, #304]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80060ba:	e00c      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3324      	adds	r3, #36	; 0x24
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fc6e 	bl	80069a4 <RCCEx_PLL3_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80060cc:	e003      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75fb      	strb	r3, [r7, #23]
      break;
 80060d2:	e000      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80060d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060dc:	4b41      	ldr	r3, [pc, #260]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ea:	493e      	ldr	r1, [pc, #248]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	654b      	str	r3, [r1, #84]	; 0x54
 80060f0:	e001      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d029      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800610a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610e:	d007      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006110:	e00f      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006112:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	4a33      	ldr	r2, [pc, #204]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800611c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800611e:	e00b      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3304      	adds	r3, #4
 8006124:	2102      	movs	r1, #2
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fb8a 	bl	8006840 <RCCEx_PLL2_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006130:	e002      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
      break;
 8006136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d109      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800613e:	4b29      	ldr	r3, [pc, #164]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006142:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614a:	4926      	ldr	r1, [pc, #152]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800614c:	4313      	orrs	r3, r2
 800614e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006150:	e001      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3324      	adds	r3, #36	; 0x24
 8006166:	2102      	movs	r1, #2
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fc1b 	bl	80069a4 <RCCEx_PLL3_Config>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d033      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618c:	d017      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800618e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006192:	d811      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006198:	d013      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800619a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619e:	d80b      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d010      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80061a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a8:	d106      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061aa:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	4a0d      	ldr	r2, [pc, #52]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80061b6:	e007      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	75fb      	strb	r3, [r7, #23]
      break;
 80061bc:	e004      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80061c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10c      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061da:	4902      	ldr	r1, [pc, #8]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	654b      	str	r3, [r1, #84]	; 0x54
 80061e0:	e004      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061f8:	4b31      	ldr	r3, [pc, #196]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	492e      	ldr	r1, [pc, #184]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006206:	4313      	orrs	r3, r2
 8006208:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006216:	4b2a      	ldr	r3, [pc, #168]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006224:	4926      	ldr	r1, [pc, #152]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006226:	4313      	orrs	r3, r2
 8006228:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006236:	4b22      	ldr	r3, [pc, #136]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006242:	491f      	ldr	r1, [pc, #124]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006244:	4313      	orrs	r3, r2
 8006246:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00d      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006254:	4b1a      	ldr	r3, [pc, #104]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4a19      	ldr	r2, [pc, #100]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800625a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800625e:	6113      	str	r3, [r2, #16]
 8006260:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800626a:	4915      	ldr	r1, [pc, #84]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800626c:	4313      	orrs	r3, r2
 800626e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	da08      	bge.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800627a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006284:	490e      	ldr	r1, [pc, #56]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006286:	4313      	orrs	r3, r2
 8006288:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a4:	4906      	ldr	r1, [pc, #24]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80062aa:	7dbb      	ldrb	r3, [r7, #22]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	58024400 	.word	0x58024400

080062c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80062c8:	f7ff f818 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 80062cc:	4602      	mov	r2, r0
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	4904      	ldr	r1, [pc, #16]	; (80062ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80062da:	5ccb      	ldrb	r3, [r1, r3]
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	58024400 	.word	0x58024400
 80062ec:	08009008 	.word	0x08009008

080062f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b089      	sub	sp, #36	; 0x24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062f8:	4ba1      	ldr	r3, [pc, #644]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006302:	4b9f      	ldr	r3, [pc, #636]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	0b1b      	lsrs	r3, r3, #12
 8006308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800630c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800630e:	4b9c      	ldr	r3, [pc, #624]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	091b      	lsrs	r3, r3, #4
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800631a:	4b99      	ldr	r3, [pc, #612]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	08db      	lsrs	r3, r3, #3
 8006320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8111 	beq.w	8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b02      	cmp	r3, #2
 8006342:	f000 8083 	beq.w	800644c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	2b02      	cmp	r3, #2
 800634a:	f200 80a1 	bhi.w	8006490 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d056      	beq.n	8006408 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800635a:	e099      	b.n	8006490 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800635c:	4b88      	ldr	r3, [pc, #544]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d02d      	beq.n	80063c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006368:	4b85      	ldr	r3, [pc, #532]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	08db      	lsrs	r3, r3, #3
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	4a84      	ldr	r2, [pc, #528]	; (8006584 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80063c2:	e087      	b.n	80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800658c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80063d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d6:	4b6a      	ldr	r3, [pc, #424]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006406:	e065      	b.n	80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006412:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641a:	4b59      	ldr	r3, [pc, #356]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642a:	ed97 6a03 	vldr	s12, [r7, #12]
 800642e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800644a:	e043      	b.n	80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800645a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645e:	4b48      	ldr	r3, [pc, #288]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006472:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800648e:	e021      	b.n	80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800649e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a2:	4b37      	ldr	r3, [pc, #220]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80064d4:	4b2a      	ldr	r3, [pc, #168]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	0a5b      	lsrs	r3, r3, #9
 80064da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fa:	ee17 2a90 	vmov	r2, s15
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006502:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800651c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006528:	ee17 2a90 	vmov	r2, s15
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	0e1b      	lsrs	r3, r3, #24
 8006536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800654a:	edd7 6a07 	vldr	s13, [r7, #28]
 800654e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006556:	ee17 2a90 	vmov	r2, s15
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800655e:	e008      	b.n	8006572 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	609a      	str	r2, [r3, #8]
}
 8006572:	bf00      	nop
 8006574:	3724      	adds	r7, #36	; 0x24
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	03d09000 	.word	0x03d09000
 8006588:	46000000 	.word	0x46000000
 800658c:	4c742400 	.word	0x4c742400
 8006590:	4a742400 	.word	0x4a742400
 8006594:	4af42400 	.word	0x4af42400

08006598 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	; 0x24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065a0:	4ba1      	ldr	r3, [pc, #644]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80065aa:	4b9f      	ldr	r3, [pc, #636]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	0d1b      	lsrs	r3, r3, #20
 80065b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80065b6:	4b9c      	ldr	r3, [pc, #624]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80065c2:	4b99      	ldr	r3, [pc, #612]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 8111 	beq.w	8006808 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	f000 8083 	beq.w	80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	f200 80a1 	bhi.w	8006738 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d056      	beq.n	80066b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006602:	e099      	b.n	8006738 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006604:	4b88      	ldr	r3, [pc, #544]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02d      	beq.n	800666c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006610:	4b85      	ldr	r3, [pc, #532]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	08db      	lsrs	r3, r3, #3
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	4a84      	ldr	r2, [pc, #528]	; (800682c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
 8006620:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	ee07 3a90 	vmov	s15, r3
 8006628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663a:	4b7b      	ldr	r3, [pc, #492]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664a:	ed97 6a03 	vldr	s12, [r7, #12]
 800664e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800665e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006666:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800666a:	e087      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006676:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006834 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800667a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667e:	4b6a      	ldr	r3, [pc, #424]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006692:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800669a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066ae:	e065      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c2:	4b59      	ldr	r3, [pc, #356]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066f2:	e043      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800683c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006706:	4b48      	ldr	r3, [pc, #288]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006716:	ed97 6a03 	vldr	s12, [r7, #12]
 800671a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800671e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800672a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006736:	e021      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006742:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674a:	4b37      	ldr	r3, [pc, #220]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675a:	ed97 6a03 	vldr	s12, [r7, #12]
 800675e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800677a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800677c:	4b2a      	ldr	r3, [pc, #168]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	0a5b      	lsrs	r3, r3, #9
 8006782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006796:	edd7 6a07 	vldr	s13, [r7, #28]
 800679a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a2:	ee17 2a90 	vmov	r2, s15
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80067aa:	4b1f      	ldr	r3, [pc, #124]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	0c1b      	lsrs	r3, r3, #16
 80067b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b4:	ee07 3a90 	vmov	s15, r3
 80067b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067d0:	ee17 2a90 	vmov	r2, s15
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80067d8:	4b13      	ldr	r3, [pc, #76]	; (8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fe:	ee17 2a90 	vmov	r2, s15
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006806:	e008      	b.n	800681a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	609a      	str	r2, [r3, #8]
}
 800681a:	bf00      	nop
 800681c:	3724      	adds	r7, #36	; 0x24
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	58024400 	.word	0x58024400
 800682c:	03d09000 	.word	0x03d09000
 8006830:	46000000 	.word	0x46000000
 8006834:	4c742400 	.word	0x4c742400
 8006838:	4a742400 	.word	0x4a742400
 800683c:	4af42400 	.word	0x4af42400

08006840 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800684e:	4b53      	ldr	r3, [pc, #332]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d101      	bne.n	800685e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e099      	b.n	8006992 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800685e:	4b4f      	ldr	r3, [pc, #316]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a4e      	ldr	r2, [pc, #312]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800686a:	f7fc fcb5 	bl	80031d8 <HAL_GetTick>
 800686e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006870:	e008      	b.n	8006884 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006872:	f7fc fcb1 	bl	80031d8 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e086      	b.n	8006992 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006884:	4b45      	ldr	r3, [pc, #276]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1f0      	bne.n	8006872 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006890:	4b42      	ldr	r3, [pc, #264]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	493f      	ldr	r1, [pc, #252]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	628b      	str	r3, [r1, #40]	; 0x28
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	025b      	lsls	r3, r3, #9
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	3b01      	subs	r3, #1
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	061b      	lsls	r3, r3, #24
 80068d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068d4:	4931      	ldr	r1, [pc, #196]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068da:	4b30      	ldr	r3, [pc, #192]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	492d      	ldr	r1, [pc, #180]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068ec:	4b2b      	ldr	r3, [pc, #172]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	f023 0220 	bic.w	r2, r3, #32
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	4928      	ldr	r1, [pc, #160]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068fe:	4b27      	ldr	r3, [pc, #156]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006902:	4a26      	ldr	r2, [pc, #152]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006904:	f023 0310 	bic.w	r3, r3, #16
 8006908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 800690c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <RCCEx_PLL2_Config+0x160>)
 8006910:	4013      	ands	r3, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	69d2      	ldr	r2, [r2, #28]
 8006916:	00d2      	lsls	r2, r2, #3
 8006918:	4920      	ldr	r1, [pc, #128]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 800691a:	4313      	orrs	r3, r2
 800691c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800691e:	4b1f      	ldr	r3, [pc, #124]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	4a1e      	ldr	r2, [pc, #120]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006924:	f043 0310 	orr.w	r3, r3, #16
 8006928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006930:	4b1a      	ldr	r3, [pc, #104]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	4a19      	ldr	r2, [pc, #100]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800693a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800693c:	e00f      	b.n	800695e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d106      	bne.n	8006952 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006944:	4b15      	ldr	r3, [pc, #84]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4a14      	ldr	r2, [pc, #80]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 800694a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800694e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006950:	e005      	b.n	800695e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006952:	4b12      	ldr	r3, [pc, #72]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	4a11      	ldr	r2, [pc, #68]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800695c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a0e      	ldr	r2, [pc, #56]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006964:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800696a:	f7fc fc35 	bl	80031d8 <HAL_GetTick>
 800696e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006970:	e008      	b.n	8006984 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006972:	f7fc fc31 	bl	80031d8 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e006      	b.n	8006992 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006984:	4b05      	ldr	r3, [pc, #20]	; (800699c <RCCEx_PLL2_Config+0x15c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0f0      	beq.n	8006972 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	58024400 	.word	0x58024400
 80069a0:	ffff0007 	.word	0xffff0007

080069a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069b2:	4b53      	ldr	r3, [pc, #332]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d101      	bne.n	80069c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e099      	b.n	8006af6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069c2:	4b4f      	ldr	r3, [pc, #316]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a4e      	ldr	r2, [pc, #312]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ce:	f7fc fc03 	bl	80031d8 <HAL_GetTick>
 80069d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069d4:	e008      	b.n	80069e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069d6:	f7fc fbff 	bl	80031d8 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e086      	b.n	8006af6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069e8:	4b45      	ldr	r3, [pc, #276]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f0      	bne.n	80069d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069f4:	4b42      	ldr	r3, [pc, #264]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	051b      	lsls	r3, r3, #20
 8006a02:	493f      	ldr	r1, [pc, #252]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	628b      	str	r3, [r1, #40]	; 0x28
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	025b      	lsls	r3, r3, #9
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	061b      	lsls	r3, r3, #24
 8006a34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a38:	4931      	ldr	r1, [pc, #196]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a3e:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	492d      	ldr	r1, [pc, #180]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a50:	4b2b      	ldr	r3, [pc, #172]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	4928      	ldr	r1, [pc, #160]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a62:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	4a26      	ldr	r2, [pc, #152]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a72:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <RCCEx_PLL3_Config+0x160>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	69d2      	ldr	r2, [r2, #28]
 8006a7a:	00d2      	lsls	r2, r2, #3
 8006a7c:	4920      	ldr	r1, [pc, #128]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a82:	4b1f      	ldr	r3, [pc, #124]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d106      	bne.n	8006aa2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a94:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4a19      	ldr	r2, [pc, #100]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006a9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006aa0:	e00f      	b.n	8006ac2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d106      	bne.n	8006ab6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006aa8:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4a14      	ldr	r2, [pc, #80]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006aae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ab4:	e005      	b.n	8006ac2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ab6:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	4a11      	ldr	r2, [pc, #68]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ac2:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a0e      	ldr	r2, [pc, #56]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ace:	f7fc fb83 	bl	80031d8 <HAL_GetTick>
 8006ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ad4:	e008      	b.n	8006ae8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ad6:	f7fc fb7f 	bl	80031d8 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e006      	b.n	8006af6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <RCCEx_PLL3_Config+0x15c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f0      	beq.n	8006ad6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	58024400 	.word	0x58024400
 8006b04:	ffff0007 	.word	0xffff0007

08006b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e049      	b.n	8006bae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f841 	bl	8006bb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f000 fa00 	bl	8006f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d001      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e054      	b.n	8006c8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a26      	ldr	r2, [pc, #152]	; (8006c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d022      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d01d      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d018      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d013      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1f      	ldr	r2, [pc, #124]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1e      	ldr	r2, [pc, #120]	; (8006cac <HAL_TIM_Base_Start_IT+0xe0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1c      	ldr	r2, [pc, #112]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d115      	bne.n	8006c78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	4b19      	ldr	r3, [pc, #100]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xec>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d015      	beq.n	8006c8a <HAL_TIM_Base_Start_IT+0xbe>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d011      	beq.n	8006c8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c76:	e008      	b.n	8006c8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e000      	b.n	8006c8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40010000 	.word	0x40010000
 8006ca0:	40000400 	.word	0x40000400
 8006ca4:	40000800 	.word	0x40000800
 8006ca8:	40000c00 	.word	0x40000c00
 8006cac:	40010400 	.word	0x40010400
 8006cb0:	40001800 	.word	0x40001800
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	00010007 	.word	0x00010007

08006cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d122      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d11b      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0202 	mvn.w	r2, #2
 8006ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f905 	bl	8006f0e <HAL_TIM_IC_CaptureCallback>
 8006d04:	e005      	b.n	8006d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f8f7 	bl	8006efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f908 	bl	8006f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d122      	bne.n	8006d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d11b      	bne.n	8006d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0204 	mvn.w	r2, #4
 8006d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8db 	bl	8006f0e <HAL_TIM_IC_CaptureCallback>
 8006d58:	e005      	b.n	8006d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8cd 	bl	8006efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8de 	bl	8006f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d122      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d11b      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0208 	mvn.w	r2, #8
 8006d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2204      	movs	r2, #4
 8006d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f8b1 	bl	8006f0e <HAL_TIM_IC_CaptureCallback>
 8006dac:	e005      	b.n	8006dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f8a3 	bl	8006efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f8b4 	bl	8006f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b10      	cmp	r3, #16
 8006dcc:	d122      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d11b      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0210 	mvn.w	r2, #16
 8006de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2208      	movs	r2, #8
 8006dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f887 	bl	8006f0e <HAL_TIM_IC_CaptureCallback>
 8006e00:	e005      	b.n	8006e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f879 	bl	8006efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f88a 	bl	8006f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10e      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d107      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f06f 0201 	mvn.w	r2, #1
 8006e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fb feb8 	bl	8002bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4a:	2b80      	cmp	r3, #128	; 0x80
 8006e4c:	d10e      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	2b80      	cmp	r3, #128	; 0x80
 8006e5a:	d107      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f914 	bl	8007094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7a:	d10e      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e86:	2b80      	cmp	r3, #128	; 0x80
 8006e88:	d107      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f907 	bl	80070a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d10e      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d107      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f838 	bl	8006f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d107      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f06f 0220 	mvn.w	r2, #32
 8006eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8c7 	bl	8007080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a40      	ldr	r2, [pc, #256]	; (8007060 <TIM_Base_SetConfig+0x114>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6a:	d00f      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a3d      	ldr	r2, [pc, #244]	; (8007064 <TIM_Base_SetConfig+0x118>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00b      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a3c      	ldr	r2, [pc, #240]	; (8007068 <TIM_Base_SetConfig+0x11c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d007      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a3b      	ldr	r2, [pc, #236]	; (800706c <TIM_Base_SetConfig+0x120>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3a      	ldr	r2, [pc, #232]	; (8007070 <TIM_Base_SetConfig+0x124>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d108      	bne.n	8006f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <TIM_Base_SetConfig+0x114>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01f      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fac:	d01b      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <TIM_Base_SetConfig+0x118>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d017      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2b      	ldr	r2, [pc, #172]	; (8007068 <TIM_Base_SetConfig+0x11c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	; (800706c <TIM_Base_SetConfig+0x120>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00f      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a29      	ldr	r2, [pc, #164]	; (8007070 <TIM_Base_SetConfig+0x124>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00b      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a28      	ldr	r2, [pc, #160]	; (8007074 <TIM_Base_SetConfig+0x128>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a27      	ldr	r2, [pc, #156]	; (8007078 <TIM_Base_SetConfig+0x12c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d003      	beq.n	8006fe6 <TIM_Base_SetConfig+0x9a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a26      	ldr	r2, [pc, #152]	; (800707c <TIM_Base_SetConfig+0x130>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d108      	bne.n	8006ff8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a10      	ldr	r2, [pc, #64]	; (8007060 <TIM_Base_SetConfig+0x114>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00f      	beq.n	8007044 <TIM_Base_SetConfig+0xf8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a12      	ldr	r2, [pc, #72]	; (8007070 <TIM_Base_SetConfig+0x124>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00b      	beq.n	8007044 <TIM_Base_SetConfig+0xf8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a11      	ldr	r2, [pc, #68]	; (8007074 <TIM_Base_SetConfig+0x128>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d007      	beq.n	8007044 <TIM_Base_SetConfig+0xf8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a10      	ldr	r2, [pc, #64]	; (8007078 <TIM_Base_SetConfig+0x12c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d003      	beq.n	8007044 <TIM_Base_SetConfig+0xf8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a0f      	ldr	r2, [pc, #60]	; (800707c <TIM_Base_SetConfig+0x130>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d103      	bne.n	800704c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	615a      	str	r2, [r3, #20]
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40010000 	.word	0x40010000
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40010400 	.word	0x40010400
 8007074:	40014000 	.word	0x40014000
 8007078:	40014400 	.word	0x40014400
 800707c:	40014800 	.word	0x40014800

08007080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e042      	b.n	8007154 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7fb fda7 	bl	8002c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2224      	movs	r2, #36	; 0x24
 80070ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fbea 	bl	80078d8 <UART_SetConfig>
 8007104:	4603      	mov	r3, r0
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e022      	b.n	8007154 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 f946 	bl	80083a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800712a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800713a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 f9cd 	bl	80084ec <UART_CheckIdleState>
 8007152:	4603      	mov	r3, r0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b0ba      	sub	sp, #232	; 0xe8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007182:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007186:	f640 030f 	movw	r3, #2063	; 0x80f
 800718a:	4013      	ands	r3, r2
 800718c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d11b      	bne.n	80071d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d015      	beq.n	80071d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 835a 	beq.w	800787a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
      }
      return;
 80071ce:	e354      	b.n	800787a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 811f 	beq.w	8007418 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80071de:	4b8b      	ldr	r3, [pc, #556]	; (800740c <HAL_UART_IRQHandler+0x2b0>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071ea:	4b89      	ldr	r3, [pc, #548]	; (8007410 <HAL_UART_IRQHandler+0x2b4>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8112 	beq.w	8007418 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d011      	beq.n	8007224 <HAL_UART_IRQHandler+0xc8>
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2201      	movs	r2, #1
 8007212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800721a:	f043 0201 	orr.w	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d011      	beq.n	8007254 <HAL_UART_IRQHandler+0xf8>
 8007230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2202      	movs	r2, #2
 8007242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800724a:	f043 0204 	orr.w	r2, r3, #4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d011      	beq.n	8007284 <HAL_UART_IRQHandler+0x128>
 8007260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2204      	movs	r2, #4
 8007272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800727a:	f043 0202 	orr.w	r2, r3, #2
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800729c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80072a0:	4b5a      	ldr	r3, [pc, #360]	; (800740c <HAL_UART_IRQHandler+0x2b0>)
 80072a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2208      	movs	r2, #8
 80072ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b6:	f043 0208 	orr.w	r2, r3, #8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d012      	beq.n	80072f2 <HAL_UART_IRQHandler+0x196>
 80072cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e8:	f043 0220 	orr.w	r2, r3, #32
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 82c0 	beq.w	800787e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d013      	beq.n	8007332 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800730a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800731a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007338:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d005      	beq.n	8007356 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800734a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800734e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007352:	2b00      	cmp	r3, #0
 8007354:	d04f      	beq.n	80073f6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 f9dc 	bl	8008714 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d141      	bne.n	80073ee <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007396:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800739a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1d9      	bne.n	800736a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d013      	beq.n	80073e6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073c2:	4a14      	ldr	r2, [pc, #80]	; (8007414 <HAL_UART_IRQHandler+0x2b8>)
 80073c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fc fb3e 	bl	8003a4c <HAL_DMA_Abort_IT>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d017      	beq.n	8007406 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	e00f      	b.n	8007406 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa60 	bl	80078ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ec:	e00b      	b.n	8007406 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa5c 	bl	80078ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f4:	e007      	b.n	8007406 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa58 	bl	80078ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007404:	e23b      	b.n	800787e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007406:	bf00      	nop
    return;
 8007408:	e239      	b.n	800787e <HAL_UART_IRQHandler+0x722>
 800740a:	bf00      	nop
 800740c:	10000001 	.word	0x10000001
 8007410:	04000120 	.word	0x04000120
 8007414:	080087e1 	.word	0x080087e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800741c:	2b01      	cmp	r3, #1
 800741e:	f040 81ce 	bne.w	80077be <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 81c7 	beq.w	80077be <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 81c0 	beq.w	80077be <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2210      	movs	r2, #16
 8007444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007450:	2b40      	cmp	r3, #64	; 0x40
 8007452:	f040 813b 	bne.w	80076cc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a8b      	ldr	r2, [pc, #556]	; (800768c <HAL_UART_IRQHandler+0x530>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d059      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a89      	ldr	r2, [pc, #548]	; (8007690 <HAL_UART_IRQHandler+0x534>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d053      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a87      	ldr	r2, [pc, #540]	; (8007694 <HAL_UART_IRQHandler+0x538>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d04d      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a85      	ldr	r2, [pc, #532]	; (8007698 <HAL_UART_IRQHandler+0x53c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d047      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a83      	ldr	r2, [pc, #524]	; (800769c <HAL_UART_IRQHandler+0x540>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d041      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a81      	ldr	r2, [pc, #516]	; (80076a0 <HAL_UART_IRQHandler+0x544>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d03b      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a7f      	ldr	r2, [pc, #508]	; (80076a4 <HAL_UART_IRQHandler+0x548>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d035      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a7d      	ldr	r2, [pc, #500]	; (80076a8 <HAL_UART_IRQHandler+0x54c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d02f      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a7b      	ldr	r2, [pc, #492]	; (80076ac <HAL_UART_IRQHandler+0x550>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d029      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a79      	ldr	r2, [pc, #484]	; (80076b0 <HAL_UART_IRQHandler+0x554>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d023      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a77      	ldr	r2, [pc, #476]	; (80076b4 <HAL_UART_IRQHandler+0x558>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01d      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a75      	ldr	r2, [pc, #468]	; (80076b8 <HAL_UART_IRQHandler+0x55c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d017      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a73      	ldr	r2, [pc, #460]	; (80076bc <HAL_UART_IRQHandler+0x560>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d011      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a71      	ldr	r2, [pc, #452]	; (80076c0 <HAL_UART_IRQHandler+0x564>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00b      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a6f      	ldr	r2, [pc, #444]	; (80076c4 <HAL_UART_IRQHandler+0x568>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d005      	beq.n	8007516 <HAL_UART_IRQHandler+0x3ba>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a6d      	ldr	r2, [pc, #436]	; (80076c8 <HAL_UART_IRQHandler+0x56c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d105      	bne.n	8007522 <HAL_UART_IRQHandler+0x3c6>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	b29b      	uxth	r3, r3
 8007520:	e004      	b.n	800752c <HAL_UART_IRQHandler+0x3d0>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 81a4 	beq.w	8007882 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007540:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007544:	429a      	cmp	r2, r3
 8007546:	f080 819c 	bcs.w	8007882 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007550:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755e:	f000 8086 	beq.w	800766e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800757a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800757e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800758c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007590:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007598:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1da      	bne.n	8007562 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3308      	adds	r3, #8
 80075b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e1      	bne.n	80075ac <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3308      	adds	r3, #8
 80075ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3308      	adds	r3, #8
 8007608:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800760c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800760e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007612:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800761a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e3      	bne.n	80075e8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800763c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800763e:	f023 0310 	bic.w	r3, r3, #16
 8007642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007650:	65bb      	str	r3, [r7, #88]	; 0x58
 8007652:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800765e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e4      	bne.n	800762e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007668:	4618      	mov	r0, r3
 800766a:	f7fb fed1 	bl	8003410 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800767a:	b29b      	uxth	r3, r3
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	b29b      	uxth	r3, r3
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f91c 	bl	80078c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007688:	e0fb      	b.n	8007882 <HAL_UART_IRQHandler+0x726>
 800768a:	bf00      	nop
 800768c:	40020010 	.word	0x40020010
 8007690:	40020028 	.word	0x40020028
 8007694:	40020040 	.word	0x40020040
 8007698:	40020058 	.word	0x40020058
 800769c:	40020070 	.word	0x40020070
 80076a0:	40020088 	.word	0x40020088
 80076a4:	400200a0 	.word	0x400200a0
 80076a8:	400200b8 	.word	0x400200b8
 80076ac:	40020410 	.word	0x40020410
 80076b0:	40020428 	.word	0x40020428
 80076b4:	40020440 	.word	0x40020440
 80076b8:	40020458 	.word	0x40020458
 80076bc:	40020470 	.word	0x40020470
 80076c0:	40020488 	.word	0x40020488
 80076c4:	400204a0 	.word	0x400204a0
 80076c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80cc 	beq.w	8007886 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80076ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80c7 	beq.w	8007886 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800770c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800771a:	647b      	str	r3, [r7, #68]	; 0x44
 800771c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e4      	bne.n	80076f8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	623b      	str	r3, [r7, #32]
   return(result);
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	4b54      	ldr	r3, [pc, #336]	; (8007894 <HAL_UART_IRQHandler+0x738>)
 8007742:	4013      	ands	r3, r2
 8007744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3308      	adds	r3, #8
 800774e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007752:	633a      	str	r2, [r7, #48]	; 0x30
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e3      	bne.n	800772e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	60fb      	str	r3, [r7, #12]
   return(result);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0310 	bic.w	r3, r3, #16
 800778e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800779c:	61fb      	str	r3, [r7, #28]
 800779e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	69b9      	ldr	r1, [r7, #24]
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	617b      	str	r3, [r7, #20]
   return(result);
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e4      	bne.n	800777a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f882 	bl	80078c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077bc:	e063      	b.n	8007886 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00e      	beq.n	80077e8 <HAL_UART_IRQHandler+0x68c>
 80077ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80077de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 f83e 	bl	8008862 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077e6:	e051      	b.n	800788c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80077e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d014      	beq.n	800781e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d105      	bne.n	800780c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007810:	2b00      	cmp	r3, #0
 8007812:	d03a      	beq.n	800788a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
    }
    return;
 800781c:	e035      	b.n	800788a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <HAL_UART_IRQHandler+0x6e2>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 ffe8 	bl	800880c <UART_EndTransmit_IT>
    return;
 800783c:	e026      	b.n	800788c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <HAL_UART_IRQHandler+0x702>
 800784a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800784e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f817 	bl	800888a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800785c:	e016      	b.n	800788c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800785e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d010      	beq.n	800788c <HAL_UART_IRQHandler+0x730>
 800786a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786e:	2b00      	cmp	r3, #0
 8007870:	da0c      	bge.n	800788c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 ffff 	bl	8008876 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007878:	e008      	b.n	800788c <HAL_UART_IRQHandler+0x730>
      return;
 800787a:	bf00      	nop
 800787c:	e006      	b.n	800788c <HAL_UART_IRQHandler+0x730>
    return;
 800787e:	bf00      	nop
 8007880:	e004      	b.n	800788c <HAL_UART_IRQHandler+0x730>
      return;
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <HAL_UART_IRQHandler+0x730>
      return;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <HAL_UART_IRQHandler+0x730>
    return;
 800788a:	bf00      	nop
  }
}
 800788c:	37e8      	adds	r7, #232	; 0xe8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	effffffe 	.word	0xeffffffe

08007898 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078dc:	b092      	sub	sp, #72	; 0x48
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	431a      	orrs	r2, r3
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4bbe      	ldr	r3, [pc, #760]	; (8007c00 <UART_SetConfig+0x328>)
 8007908:	4013      	ands	r3, r2
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007910:	430b      	orrs	r3, r1
 8007912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4ab3      	ldr	r2, [pc, #716]	; (8007c04 <UART_SetConfig+0x32c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007940:	4313      	orrs	r3, r2
 8007942:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	4baf      	ldr	r3, [pc, #700]	; (8007c08 <UART_SetConfig+0x330>)
 800794c:	4013      	ands	r3, r2
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007954:	430b      	orrs	r3, r1
 8007956:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	f023 010f 	bic.w	r1, r3, #15
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4aa6      	ldr	r2, [pc, #664]	; (8007c0c <UART_SetConfig+0x334>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d177      	bne.n	8007a68 <UART_SetConfig+0x190>
 8007978:	4ba5      	ldr	r3, [pc, #660]	; (8007c10 <UART_SetConfig+0x338>)
 800797a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007980:	2b28      	cmp	r3, #40	; 0x28
 8007982:	d86d      	bhi.n	8007a60 <UART_SetConfig+0x188>
 8007984:	a201      	add	r2, pc, #4	; (adr r2, 800798c <UART_SetConfig+0xb4>)
 8007986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798a:	bf00      	nop
 800798c:	08007a31 	.word	0x08007a31
 8007990:	08007a61 	.word	0x08007a61
 8007994:	08007a61 	.word	0x08007a61
 8007998:	08007a61 	.word	0x08007a61
 800799c:	08007a61 	.word	0x08007a61
 80079a0:	08007a61 	.word	0x08007a61
 80079a4:	08007a61 	.word	0x08007a61
 80079a8:	08007a61 	.word	0x08007a61
 80079ac:	08007a39 	.word	0x08007a39
 80079b0:	08007a61 	.word	0x08007a61
 80079b4:	08007a61 	.word	0x08007a61
 80079b8:	08007a61 	.word	0x08007a61
 80079bc:	08007a61 	.word	0x08007a61
 80079c0:	08007a61 	.word	0x08007a61
 80079c4:	08007a61 	.word	0x08007a61
 80079c8:	08007a61 	.word	0x08007a61
 80079cc:	08007a41 	.word	0x08007a41
 80079d0:	08007a61 	.word	0x08007a61
 80079d4:	08007a61 	.word	0x08007a61
 80079d8:	08007a61 	.word	0x08007a61
 80079dc:	08007a61 	.word	0x08007a61
 80079e0:	08007a61 	.word	0x08007a61
 80079e4:	08007a61 	.word	0x08007a61
 80079e8:	08007a61 	.word	0x08007a61
 80079ec:	08007a49 	.word	0x08007a49
 80079f0:	08007a61 	.word	0x08007a61
 80079f4:	08007a61 	.word	0x08007a61
 80079f8:	08007a61 	.word	0x08007a61
 80079fc:	08007a61 	.word	0x08007a61
 8007a00:	08007a61 	.word	0x08007a61
 8007a04:	08007a61 	.word	0x08007a61
 8007a08:	08007a61 	.word	0x08007a61
 8007a0c:	08007a51 	.word	0x08007a51
 8007a10:	08007a61 	.word	0x08007a61
 8007a14:	08007a61 	.word	0x08007a61
 8007a18:	08007a61 	.word	0x08007a61
 8007a1c:	08007a61 	.word	0x08007a61
 8007a20:	08007a61 	.word	0x08007a61
 8007a24:	08007a61 	.word	0x08007a61
 8007a28:	08007a61 	.word	0x08007a61
 8007a2c:	08007a59 	.word	0x08007a59
 8007a30:	2301      	movs	r3, #1
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a36:	e222      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007a38:	2304      	movs	r3, #4
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e21e      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007a40:	2308      	movs	r3, #8
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e21a      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007a48:	2310      	movs	r3, #16
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e216      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007a50:	2320      	movs	r3, #32
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e212      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007a58:	2340      	movs	r3, #64	; 0x40
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e20e      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007a60:	2380      	movs	r3, #128	; 0x80
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a66:	e20a      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a69      	ldr	r2, [pc, #420]	; (8007c14 <UART_SetConfig+0x33c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d130      	bne.n	8007ad4 <UART_SetConfig+0x1fc>
 8007a72:	4b67      	ldr	r3, [pc, #412]	; (8007c10 <UART_SetConfig+0x338>)
 8007a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b05      	cmp	r3, #5
 8007a7c:	d826      	bhi.n	8007acc <UART_SetConfig+0x1f4>
 8007a7e:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0x1ac>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007a9d 	.word	0x08007a9d
 8007a88:	08007aa5 	.word	0x08007aa5
 8007a8c:	08007aad 	.word	0x08007aad
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007abd 	.word	0x08007abd
 8007a98:	08007ac5 	.word	0x08007ac5
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e1ec      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007aa4:	2304      	movs	r3, #4
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e1e8      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007aac:	2308      	movs	r3, #8
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab2:	e1e4      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e1e0      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007abc:	2320      	movs	r3, #32
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac2:	e1dc      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007ac4:	2340      	movs	r3, #64	; 0x40
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aca:	e1d8      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007acc:	2380      	movs	r3, #128	; 0x80
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ad2:	e1d4      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a4f      	ldr	r2, [pc, #316]	; (8007c18 <UART_SetConfig+0x340>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d130      	bne.n	8007b40 <UART_SetConfig+0x268>
 8007ade:	4b4c      	ldr	r3, [pc, #304]	; (8007c10 <UART_SetConfig+0x338>)
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	d826      	bhi.n	8007b38 <UART_SetConfig+0x260>
 8007aea:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <UART_SetConfig+0x218>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b09 	.word	0x08007b09
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	08007b19 	.word	0x08007b19
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b29 	.word	0x08007b29
 8007b04:	08007b31 	.word	0x08007b31
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e1b6      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b10:	2304      	movs	r3, #4
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e1b2      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b18:	2308      	movs	r3, #8
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e1ae      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b20:	2310      	movs	r3, #16
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e1aa      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b28:	2320      	movs	r3, #32
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e1a6      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b30:	2340      	movs	r3, #64	; 0x40
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b36:	e1a2      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b38:	2380      	movs	r3, #128	; 0x80
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3e:	e19e      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a35      	ldr	r2, [pc, #212]	; (8007c1c <UART_SetConfig+0x344>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d130      	bne.n	8007bac <UART_SetConfig+0x2d4>
 8007b4a:	4b31      	ldr	r3, [pc, #196]	; (8007c10 <UART_SetConfig+0x338>)
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	2b05      	cmp	r3, #5
 8007b54:	d826      	bhi.n	8007ba4 <UART_SetConfig+0x2cc>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0x284>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b75 	.word	0x08007b75
 8007b60:	08007b7d 	.word	0x08007b7d
 8007b64:	08007b85 	.word	0x08007b85
 8007b68:	08007b8d 	.word	0x08007b8d
 8007b6c:	08007b95 	.word	0x08007b95
 8007b70:	08007b9d 	.word	0x08007b9d
 8007b74:	2300      	movs	r3, #0
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7a:	e180      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b7c:	2304      	movs	r3, #4
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b82:	e17c      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b84:	2308      	movs	r3, #8
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8a:	e178      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b8c:	2310      	movs	r3, #16
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b92:	e174      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b94:	2320      	movs	r3, #32
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9a:	e170      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007b9c:	2340      	movs	r3, #64	; 0x40
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba2:	e16c      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007ba4:	2380      	movs	r3, #128	; 0x80
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007baa:	e168      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <UART_SetConfig+0x348>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d142      	bne.n	8007c3c <UART_SetConfig+0x364>
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <UART_SetConfig+0x338>)
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	d838      	bhi.n	8007c34 <UART_SetConfig+0x35c>
 8007bc2:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <UART_SetConfig+0x2f0>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007be1 	.word	0x08007be1
 8007bcc:	08007be9 	.word	0x08007be9
 8007bd0:	08007bf1 	.word	0x08007bf1
 8007bd4:	08007bf9 	.word	0x08007bf9
 8007bd8:	08007c25 	.word	0x08007c25
 8007bdc:	08007c2d 	.word	0x08007c2d
 8007be0:	2300      	movs	r3, #0
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be6:	e14a      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007be8:	2304      	movs	r3, #4
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bee:	e146      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007bf0:	2308      	movs	r3, #8
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf6:	e142      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfe:	e13e      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007c00:	cfff69f3 	.word	0xcfff69f3
 8007c04:	58000c00 	.word	0x58000c00
 8007c08:	11fff4ff 	.word	0x11fff4ff
 8007c0c:	40011000 	.word	0x40011000
 8007c10:	58024400 	.word	0x58024400
 8007c14:	40004400 	.word	0x40004400
 8007c18:	40004800 	.word	0x40004800
 8007c1c:	40004c00 	.word	0x40004c00
 8007c20:	40005000 	.word	0x40005000
 8007c24:	2320      	movs	r3, #32
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e128      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007c2c:	2340      	movs	r3, #64	; 0x40
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e124      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007c34:	2380      	movs	r3, #128	; 0x80
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3a:	e120      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4acb      	ldr	r2, [pc, #812]	; (8007f70 <UART_SetConfig+0x698>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d176      	bne.n	8007d34 <UART_SetConfig+0x45c>
 8007c46:	4bcb      	ldr	r3, [pc, #812]	; (8007f74 <UART_SetConfig+0x69c>)
 8007c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c4e:	2b28      	cmp	r3, #40	; 0x28
 8007c50:	d86c      	bhi.n	8007d2c <UART_SetConfig+0x454>
 8007c52:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <UART_SetConfig+0x380>)
 8007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c58:	08007cfd 	.word	0x08007cfd
 8007c5c:	08007d2d 	.word	0x08007d2d
 8007c60:	08007d2d 	.word	0x08007d2d
 8007c64:	08007d2d 	.word	0x08007d2d
 8007c68:	08007d2d 	.word	0x08007d2d
 8007c6c:	08007d2d 	.word	0x08007d2d
 8007c70:	08007d2d 	.word	0x08007d2d
 8007c74:	08007d2d 	.word	0x08007d2d
 8007c78:	08007d05 	.word	0x08007d05
 8007c7c:	08007d2d 	.word	0x08007d2d
 8007c80:	08007d2d 	.word	0x08007d2d
 8007c84:	08007d2d 	.word	0x08007d2d
 8007c88:	08007d2d 	.word	0x08007d2d
 8007c8c:	08007d2d 	.word	0x08007d2d
 8007c90:	08007d2d 	.word	0x08007d2d
 8007c94:	08007d2d 	.word	0x08007d2d
 8007c98:	08007d0d 	.word	0x08007d0d
 8007c9c:	08007d2d 	.word	0x08007d2d
 8007ca0:	08007d2d 	.word	0x08007d2d
 8007ca4:	08007d2d 	.word	0x08007d2d
 8007ca8:	08007d2d 	.word	0x08007d2d
 8007cac:	08007d2d 	.word	0x08007d2d
 8007cb0:	08007d2d 	.word	0x08007d2d
 8007cb4:	08007d2d 	.word	0x08007d2d
 8007cb8:	08007d15 	.word	0x08007d15
 8007cbc:	08007d2d 	.word	0x08007d2d
 8007cc0:	08007d2d 	.word	0x08007d2d
 8007cc4:	08007d2d 	.word	0x08007d2d
 8007cc8:	08007d2d 	.word	0x08007d2d
 8007ccc:	08007d2d 	.word	0x08007d2d
 8007cd0:	08007d2d 	.word	0x08007d2d
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d1d 	.word	0x08007d1d
 8007cdc:	08007d2d 	.word	0x08007d2d
 8007ce0:	08007d2d 	.word	0x08007d2d
 8007ce4:	08007d2d 	.word	0x08007d2d
 8007ce8:	08007d2d 	.word	0x08007d2d
 8007cec:	08007d2d 	.word	0x08007d2d
 8007cf0:	08007d2d 	.word	0x08007d2d
 8007cf4:	08007d2d 	.word	0x08007d2d
 8007cf8:	08007d25 	.word	0x08007d25
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e0bc      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d04:	2304      	movs	r3, #4
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e0b8      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e0b4      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d14:	2310      	movs	r3, #16
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e0b0      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e0ac      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d24:	2340      	movs	r3, #64	; 0x40
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2a:	e0a8      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d2c:	2380      	movs	r3, #128	; 0x80
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d32:	e0a4      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a8f      	ldr	r2, [pc, #572]	; (8007f78 <UART_SetConfig+0x6a0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d130      	bne.n	8007da0 <UART_SetConfig+0x4c8>
 8007d3e:	4b8d      	ldr	r3, [pc, #564]	; (8007f74 <UART_SetConfig+0x69c>)
 8007d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b05      	cmp	r3, #5
 8007d48:	d826      	bhi.n	8007d98 <UART_SetConfig+0x4c0>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0x478>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d69 	.word	0x08007d69
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d79 	.word	0x08007d79
 8007d5c:	08007d81 	.word	0x08007d81
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d91 	.word	0x08007d91
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6e:	e086      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d70:	2304      	movs	r3, #4
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e082      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d78:	2308      	movs	r3, #8
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e07e      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d86:	e07a      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d88:	2320      	movs	r3, #32
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8e:	e076      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d90:	2340      	movs	r3, #64	; 0x40
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d96:	e072      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9e:	e06e      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a75      	ldr	r2, [pc, #468]	; (8007f7c <UART_SetConfig+0x6a4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d130      	bne.n	8007e0c <UART_SetConfig+0x534>
 8007daa:	4b72      	ldr	r3, [pc, #456]	; (8007f74 <UART_SetConfig+0x69c>)
 8007dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d826      	bhi.n	8007e04 <UART_SetConfig+0x52c>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <UART_SetConfig+0x4e4>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007dd5 	.word	0x08007dd5
 8007dc0:	08007ddd 	.word	0x08007ddd
 8007dc4:	08007de5 	.word	0x08007de5
 8007dc8:	08007ded 	.word	0x08007ded
 8007dcc:	08007df5 	.word	0x08007df5
 8007dd0:	08007dfd 	.word	0x08007dfd
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dda:	e050      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de2:	e04c      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007de4:	2308      	movs	r3, #8
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dea:	e048      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007dec:	2310      	movs	r3, #16
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df2:	e044      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007df4:	2320      	movs	r3, #32
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfa:	e040      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007dfc:	2340      	movs	r3, #64	; 0x40
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e02:	e03c      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e04:	2380      	movs	r3, #128	; 0x80
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0a:	e038      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a5b      	ldr	r2, [pc, #364]	; (8007f80 <UART_SetConfig+0x6a8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d130      	bne.n	8007e78 <UART_SetConfig+0x5a0>
 8007e16:	4b57      	ldr	r3, [pc, #348]	; (8007f74 <UART_SetConfig+0x69c>)
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	f003 0307 	and.w	r3, r3, #7
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	d826      	bhi.n	8007e70 <UART_SetConfig+0x598>
 8007e22:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <UART_SetConfig+0x550>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e41 	.word	0x08007e41
 8007e2c:	08007e49 	.word	0x08007e49
 8007e30:	08007e51 	.word	0x08007e51
 8007e34:	08007e59 	.word	0x08007e59
 8007e38:	08007e61 	.word	0x08007e61
 8007e3c:	08007e69 	.word	0x08007e69
 8007e40:	2302      	movs	r3, #2
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e46:	e01a      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e48:	2304      	movs	r3, #4
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4e:	e016      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e50:	2308      	movs	r3, #8
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e56:	e012      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e58:	2310      	movs	r3, #16
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5e:	e00e      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e60:	2320      	movs	r3, #32
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e66:	e00a      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e68:	2340      	movs	r3, #64	; 0x40
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6e:	e006      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e70:	2380      	movs	r3, #128	; 0x80
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e76:	e002      	b.n	8007e7e <UART_SetConfig+0x5a6>
 8007e78:	2380      	movs	r3, #128	; 0x80
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a3f      	ldr	r2, [pc, #252]	; (8007f80 <UART_SetConfig+0x6a8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	f040 80f8 	bne.w	800807a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	dc46      	bgt.n	8007f20 <UART_SetConfig+0x648>
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	f2c0 8082 	blt.w	8007f9c <UART_SetConfig+0x6c4>
 8007e98:	3b02      	subs	r3, #2
 8007e9a:	2b1e      	cmp	r3, #30
 8007e9c:	d87e      	bhi.n	8007f9c <UART_SetConfig+0x6c4>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <UART_SetConfig+0x5cc>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007f27 	.word	0x08007f27
 8007ea8:	08007f9d 	.word	0x08007f9d
 8007eac:	08007f2f 	.word	0x08007f2f
 8007eb0:	08007f9d 	.word	0x08007f9d
 8007eb4:	08007f9d 	.word	0x08007f9d
 8007eb8:	08007f9d 	.word	0x08007f9d
 8007ebc:	08007f3f 	.word	0x08007f3f
 8007ec0:	08007f9d 	.word	0x08007f9d
 8007ec4:	08007f9d 	.word	0x08007f9d
 8007ec8:	08007f9d 	.word	0x08007f9d
 8007ecc:	08007f9d 	.word	0x08007f9d
 8007ed0:	08007f9d 	.word	0x08007f9d
 8007ed4:	08007f9d 	.word	0x08007f9d
 8007ed8:	08007f9d 	.word	0x08007f9d
 8007edc:	08007f4f 	.word	0x08007f4f
 8007ee0:	08007f9d 	.word	0x08007f9d
 8007ee4:	08007f9d 	.word	0x08007f9d
 8007ee8:	08007f9d 	.word	0x08007f9d
 8007eec:	08007f9d 	.word	0x08007f9d
 8007ef0:	08007f9d 	.word	0x08007f9d
 8007ef4:	08007f9d 	.word	0x08007f9d
 8007ef8:	08007f9d 	.word	0x08007f9d
 8007efc:	08007f9d 	.word	0x08007f9d
 8007f00:	08007f9d 	.word	0x08007f9d
 8007f04:	08007f9d 	.word	0x08007f9d
 8007f08:	08007f9d 	.word	0x08007f9d
 8007f0c:	08007f9d 	.word	0x08007f9d
 8007f10:	08007f9d 	.word	0x08007f9d
 8007f14:	08007f9d 	.word	0x08007f9d
 8007f18:	08007f9d 	.word	0x08007f9d
 8007f1c:	08007f8f 	.word	0x08007f8f
 8007f20:	2b40      	cmp	r3, #64	; 0x40
 8007f22:	d037      	beq.n	8007f94 <UART_SetConfig+0x6bc>
 8007f24:	e03a      	b.n	8007f9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f26:	f7fe f9cd 	bl	80062c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f2c:	e03c      	b.n	8007fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe f9dc 	bl	80062f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f3c:	e034      	b.n	8007fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f3e:	f107 0318 	add.w	r3, r7, #24
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fb28 	bl	8006598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f4c:	e02c      	b.n	8007fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <UART_SetConfig+0x69c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d016      	beq.n	8007f88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f5a:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <UART_SetConfig+0x69c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	08db      	lsrs	r3, r3, #3
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	4a07      	ldr	r2, [pc, #28]	; (8007f84 <UART_SetConfig+0x6ac>)
 8007f66:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f6c:	e01c      	b.n	8007fa8 <UART_SetConfig+0x6d0>
 8007f6e:	bf00      	nop
 8007f70:	40011400 	.word	0x40011400
 8007f74:	58024400 	.word	0x58024400
 8007f78:	40007800 	.word	0x40007800
 8007f7c:	40007c00 	.word	0x40007c00
 8007f80:	58000c00 	.word	0x58000c00
 8007f84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007f88:	4b9d      	ldr	r3, [pc, #628]	; (8008200 <UART_SetConfig+0x928>)
 8007f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f8c:	e00c      	b.n	8007fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f8e:	4b9d      	ldr	r3, [pc, #628]	; (8008204 <UART_SetConfig+0x92c>)
 8007f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f92:	e009      	b.n	8007fa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f9a:	e005      	b.n	8007fa8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 81de 	beq.w	800836c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	4a94      	ldr	r2, [pc, #592]	; (8008208 <UART_SetConfig+0x930>)
 8007fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	4413      	add	r3, r2
 8007fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d305      	bcc.n	8007fe0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d903      	bls.n	8007fe8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007fe6:	e1c1      	b.n	800836c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fea:	2200      	movs	r2, #0
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	60fa      	str	r2, [r7, #12]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	4a84      	ldr	r2, [pc, #528]	; (8008208 <UART_SetConfig+0x930>)
 8007ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800800a:	f7f8 f9b3 	bl	8000374 <__aeabi_uldivmod>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4610      	mov	r0, r2
 8008014:	4619      	mov	r1, r3
 8008016:	f04f 0200 	mov.w	r2, #0
 800801a:	f04f 0300 	mov.w	r3, #0
 800801e:	020b      	lsls	r3, r1, #8
 8008020:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008024:	0202      	lsls	r2, r0, #8
 8008026:	6979      	ldr	r1, [r7, #20]
 8008028:	6849      	ldr	r1, [r1, #4]
 800802a:	0849      	lsrs	r1, r1, #1
 800802c:	2000      	movs	r0, #0
 800802e:	460c      	mov	r4, r1
 8008030:	4605      	mov	r5, r0
 8008032:	eb12 0804 	adds.w	r8, r2, r4
 8008036:	eb43 0905 	adc.w	r9, r3, r5
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	469a      	mov	sl, r3
 8008042:	4693      	mov	fp, r2
 8008044:	4652      	mov	r2, sl
 8008046:	465b      	mov	r3, fp
 8008048:	4640      	mov	r0, r8
 800804a:	4649      	mov	r1, r9
 800804c:	f7f8 f992 	bl	8000374 <__aeabi_uldivmod>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4613      	mov	r3, r2
 8008056:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800805e:	d308      	bcc.n	8008072 <UART_SetConfig+0x79a>
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008066:	d204      	bcs.n	8008072 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800806e:	60da      	str	r2, [r3, #12]
 8008070:	e17c      	b.n	800836c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008078:	e178      	b.n	800836c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008082:	f040 80c5 	bne.w	8008210 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008086:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800808a:	2b20      	cmp	r3, #32
 800808c:	dc48      	bgt.n	8008120 <UART_SetConfig+0x848>
 800808e:	2b00      	cmp	r3, #0
 8008090:	db7b      	blt.n	800818a <UART_SetConfig+0x8b2>
 8008092:	2b20      	cmp	r3, #32
 8008094:	d879      	bhi.n	800818a <UART_SetConfig+0x8b2>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <UART_SetConfig+0x7c4>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	08008127 	.word	0x08008127
 80080a0:	0800812f 	.word	0x0800812f
 80080a4:	0800818b 	.word	0x0800818b
 80080a8:	0800818b 	.word	0x0800818b
 80080ac:	08008137 	.word	0x08008137
 80080b0:	0800818b 	.word	0x0800818b
 80080b4:	0800818b 	.word	0x0800818b
 80080b8:	0800818b 	.word	0x0800818b
 80080bc:	08008147 	.word	0x08008147
 80080c0:	0800818b 	.word	0x0800818b
 80080c4:	0800818b 	.word	0x0800818b
 80080c8:	0800818b 	.word	0x0800818b
 80080cc:	0800818b 	.word	0x0800818b
 80080d0:	0800818b 	.word	0x0800818b
 80080d4:	0800818b 	.word	0x0800818b
 80080d8:	0800818b 	.word	0x0800818b
 80080dc:	08008157 	.word	0x08008157
 80080e0:	0800818b 	.word	0x0800818b
 80080e4:	0800818b 	.word	0x0800818b
 80080e8:	0800818b 	.word	0x0800818b
 80080ec:	0800818b 	.word	0x0800818b
 80080f0:	0800818b 	.word	0x0800818b
 80080f4:	0800818b 	.word	0x0800818b
 80080f8:	0800818b 	.word	0x0800818b
 80080fc:	0800818b 	.word	0x0800818b
 8008100:	0800818b 	.word	0x0800818b
 8008104:	0800818b 	.word	0x0800818b
 8008108:	0800818b 	.word	0x0800818b
 800810c:	0800818b 	.word	0x0800818b
 8008110:	0800818b 	.word	0x0800818b
 8008114:	0800818b 	.word	0x0800818b
 8008118:	0800818b 	.word	0x0800818b
 800811c:	0800817d 	.word	0x0800817d
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d02e      	beq.n	8008182 <UART_SetConfig+0x8aa>
 8008124:	e031      	b.n	800818a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008126:	f7fd f919 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 800812a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800812c:	e033      	b.n	8008196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800812e:	f7fd f92b 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8008132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008134:	e02f      	b.n	8008196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe f8d8 	bl	80062f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008144:	e027      	b.n	8008196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008146:	f107 0318 	add.w	r3, r7, #24
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe fa24 	bl	8006598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008154:	e01f      	b.n	8008196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008156:	4b2d      	ldr	r3, [pc, #180]	; (800820c <UART_SetConfig+0x934>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008162:	4b2a      	ldr	r3, [pc, #168]	; (800820c <UART_SetConfig+0x934>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	08db      	lsrs	r3, r3, #3
 8008168:	f003 0303 	and.w	r3, r3, #3
 800816c:	4a24      	ldr	r2, [pc, #144]	; (8008200 <UART_SetConfig+0x928>)
 800816e:	fa22 f303 	lsr.w	r3, r2, r3
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008174:	e00f      	b.n	8008196 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008176:	4b22      	ldr	r3, [pc, #136]	; (8008200 <UART_SetConfig+0x928>)
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817a:	e00c      	b.n	8008196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800817c:	4b21      	ldr	r3, [pc, #132]	; (8008204 <UART_SetConfig+0x92c>)
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008180:	e009      	b.n	8008196 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008188:	e005      	b.n	8008196 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80e7 	beq.w	800836c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	4a19      	ldr	r2, [pc, #100]	; (8008208 <UART_SetConfig+0x930>)
 80081a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081a8:	461a      	mov	r2, r3
 80081aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80081b0:	005a      	lsls	r2, r3, #1
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	085b      	lsrs	r3, r3, #1
 80081b8:	441a      	add	r2, r3
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d916      	bls.n	80081f8 <UART_SetConfig+0x920>
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d0:	d212      	bcs.n	80081f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f023 030f 	bic.w	r3, r3, #15
 80081da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081ea:	4313      	orrs	r3, r2
 80081ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80081f4:	60da      	str	r2, [r3, #12]
 80081f6:	e0b9      	b.n	800836c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80081fe:	e0b5      	b.n	800836c <UART_SetConfig+0xa94>
 8008200:	03d09000 	.word	0x03d09000
 8008204:	003d0900 	.word	0x003d0900
 8008208:	08009018 	.word	0x08009018
 800820c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008210:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008214:	2b20      	cmp	r3, #32
 8008216:	dc49      	bgt.n	80082ac <UART_SetConfig+0x9d4>
 8008218:	2b00      	cmp	r3, #0
 800821a:	db7c      	blt.n	8008316 <UART_SetConfig+0xa3e>
 800821c:	2b20      	cmp	r3, #32
 800821e:	d87a      	bhi.n	8008316 <UART_SetConfig+0xa3e>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x950>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	080082b3 	.word	0x080082b3
 800822c:	080082bb 	.word	0x080082bb
 8008230:	08008317 	.word	0x08008317
 8008234:	08008317 	.word	0x08008317
 8008238:	080082c3 	.word	0x080082c3
 800823c:	08008317 	.word	0x08008317
 8008240:	08008317 	.word	0x08008317
 8008244:	08008317 	.word	0x08008317
 8008248:	080082d3 	.word	0x080082d3
 800824c:	08008317 	.word	0x08008317
 8008250:	08008317 	.word	0x08008317
 8008254:	08008317 	.word	0x08008317
 8008258:	08008317 	.word	0x08008317
 800825c:	08008317 	.word	0x08008317
 8008260:	08008317 	.word	0x08008317
 8008264:	08008317 	.word	0x08008317
 8008268:	080082e3 	.word	0x080082e3
 800826c:	08008317 	.word	0x08008317
 8008270:	08008317 	.word	0x08008317
 8008274:	08008317 	.word	0x08008317
 8008278:	08008317 	.word	0x08008317
 800827c:	08008317 	.word	0x08008317
 8008280:	08008317 	.word	0x08008317
 8008284:	08008317 	.word	0x08008317
 8008288:	08008317 	.word	0x08008317
 800828c:	08008317 	.word	0x08008317
 8008290:	08008317 	.word	0x08008317
 8008294:	08008317 	.word	0x08008317
 8008298:	08008317 	.word	0x08008317
 800829c:	08008317 	.word	0x08008317
 80082a0:	08008317 	.word	0x08008317
 80082a4:	08008317 	.word	0x08008317
 80082a8:	08008309 	.word	0x08008309
 80082ac:	2b40      	cmp	r3, #64	; 0x40
 80082ae:	d02e      	beq.n	800830e <UART_SetConfig+0xa36>
 80082b0:	e031      	b.n	8008316 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b2:	f7fd f853 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 80082b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082b8:	e033      	b.n	8008322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082ba:	f7fd f865 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80082be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082c0:	e02f      	b.n	8008322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe f812 	bl	80062f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d0:	e027      	b.n	8008322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082d2:	f107 0318 	add.w	r3, r7, #24
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe f95e 	bl	8006598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e0:	e01f      	b.n	8008322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082e2:	4b2d      	ldr	r3, [pc, #180]	; (8008398 <UART_SetConfig+0xac0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d009      	beq.n	8008302 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082ee:	4b2a      	ldr	r3, [pc, #168]	; (8008398 <UART_SetConfig+0xac0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	08db      	lsrs	r3, r3, #3
 80082f4:	f003 0303 	and.w	r3, r3, #3
 80082f8:	4a28      	ldr	r2, [pc, #160]	; (800839c <UART_SetConfig+0xac4>)
 80082fa:	fa22 f303 	lsr.w	r3, r2, r3
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008300:	e00f      	b.n	8008322 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008302:	4b26      	ldr	r3, [pc, #152]	; (800839c <UART_SetConfig+0xac4>)
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008306:	e00c      	b.n	8008322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008308:	4b25      	ldr	r3, [pc, #148]	; (80083a0 <UART_SetConfig+0xac8>)
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800830c:	e009      	b.n	8008322 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800830e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008314:	e005      	b.n	8008322 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008320:	bf00      	nop
    }

    if (pclk != 0U)
 8008322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d021      	beq.n	800836c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <UART_SetConfig+0xacc>)
 800832e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008332:	461a      	mov	r2, r3
 8008334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008336:	fbb3 f2f2 	udiv	r2, r3, r2
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	441a      	add	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	fbb2 f3f3 	udiv	r3, r2, r3
 800834a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	2b0f      	cmp	r3, #15
 8008350:	d909      	bls.n	8008366 <UART_SetConfig+0xa8e>
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008358:	d205      	bcs.n	8008366 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	b29a      	uxth	r2, r3
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60da      	str	r2, [r3, #12]
 8008364:	e002      	b.n	800836c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2201      	movs	r2, #1
 8008370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2201      	movs	r2, #1
 8008378:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2200      	movs	r2, #0
 8008380:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008388:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800838c:	4618      	mov	r0, r3
 800838e:	3748      	adds	r7, #72	; 0x48
 8008390:	46bd      	mov	sp, r7
 8008392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008396:	bf00      	nop
 8008398:	58024400 	.word	0x58024400
 800839c:	03d09000 	.word	0x03d09000
 80083a0:	003d0900 	.word	0x003d0900
 80083a4:	08009018 	.word	0x08009018

080083a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841a:	f003 0308 	and.w	r3, r3, #8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01a      	beq.n	80084be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a6:	d10a      	bne.n	80084be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084fc:	f7fa fe6c 	bl	80031d8 <HAL_GetTick>
 8008500:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b08      	cmp	r3, #8
 800850e:	d10e      	bne.n	800852e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f82f 	bl	8008582 <UART_WaitOnFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e025      	b.n	800857a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b04      	cmp	r3, #4
 800853a:	d10e      	bne.n	800855a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800853c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f819 	bl	8008582 <UART_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e00f      	b.n	800857a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b09c      	sub	sp, #112	; 0x70
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	603b      	str	r3, [r7, #0]
 800858e:	4613      	mov	r3, r2
 8008590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008592:	e0a9      	b.n	80086e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	f000 80a5 	beq.w	80086e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800859e:	f7fa fe1b 	bl	80031d8 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d302      	bcc.n	80085b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80085ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d140      	bne.n	8008636 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085c8:	667b      	str	r3, [r7, #100]	; 0x64
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e6      	bne.n	80085b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3308      	adds	r3, #8
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	f023 0301 	bic.w	r3, r3, #1
 80085fc:	663b      	str	r3, [r7, #96]	; 0x60
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008606:	64ba      	str	r2, [r7, #72]	; 0x48
 8008608:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800860c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e5      	bne.n	80085e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2220      	movs	r2, #32
 8008626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e069      	b.n	800870a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d051      	beq.n	80086e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800864e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008652:	d149      	bne.n	80086e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800865c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867c:	637b      	str	r3, [r7, #52]	; 0x34
 800867e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	613b      	str	r3, [r7, #16]
   return(result);
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086b0:	623a      	str	r2, [r7, #32]
 80086b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	69f9      	ldr	r1, [r7, #28]
 80086b6:	6a3a      	ldr	r2, [r7, #32]
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e5      	bne.n	8008690 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e010      	b.n	800870a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69da      	ldr	r2, [r3, #28]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4013      	ands	r3, r2
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	bf0c      	ite	eq
 80086f8:	2301      	moveq	r3, #1
 80086fa:	2300      	movne	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	461a      	mov	r2, r3
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	429a      	cmp	r2, r3
 8008704:	f43f af46 	beq.w	8008594 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3770      	adds	r7, #112	; 0x70
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b095      	sub	sp, #84	; 0x54
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873a:	643b      	str	r3, [r7, #64]	; 0x40
 800873c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e6      	bne.n	800871c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	e853 3f00 	ldrex	r3, [r3]
 800875c:	61fb      	str	r3, [r7, #28]
   return(result);
 800875e:	69fa      	ldr	r2, [r7, #28]
 8008760:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <UART_EndRxTransfer+0xc8>)
 8008762:	4013      	ands	r3, r2
 8008764:	64bb      	str	r3, [r7, #72]	; 0x48
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800876e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e5      	bne.n	800874e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d118      	bne.n	80087bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	60bb      	str	r3, [r7, #8]
   return(result);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f023 0310 	bic.w	r3, r3, #16
 800879e:	647b      	str	r3, [r7, #68]	; 0x44
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	6979      	ldr	r1, [r7, #20]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	613b      	str	r3, [r7, #16]
   return(result);
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 80087d0:	bf00      	nop
 80087d2:	3754      	adds	r7, #84	; 0x54
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	effffffe 	.word	0xeffffffe

080087e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7ff f854 	bl	80078ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008804:	bf00      	nop
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	60bb      	str	r3, [r7, #8]
   return(result);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	61bb      	str	r3, [r7, #24]
 8008834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6979      	ldr	r1, [r7, #20]
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	613b      	str	r3, [r7, #16]
   return(result);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e6      	bne.n	8008814 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff f81f 	bl	8007898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885a:	bf00      	nop
 800885c:	3720      	adds	r7, #32
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e027      	b.n	8008904 <HAL_UARTEx_DisableFifoMode+0x66>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2224      	movs	r2, #36	; 0x24
 80088c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2220      	movs	r2, #32
 80088f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008924:	2302      	movs	r3, #2
 8008926:	e02d      	b.n	8008984 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2224      	movs	r2, #36	; 0x24
 8008934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f84f 	bl	8008a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e02d      	b.n	8008a00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2224      	movs	r2, #36	; 0x24
 80089b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0201 	bic.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f811 	bl	8008a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d108      	bne.n	8008a2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a28:	e031      	b.n	8008a8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a2a:	2310      	movs	r3, #16
 8008a2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a2e:	2310      	movs	r3, #16
 8008a30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	0e5b      	lsrs	r3, r3, #25
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	0f5b      	lsrs	r3, r3, #29
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	7b3a      	ldrb	r2, [r7, #12]
 8008a56:	4911      	ldr	r1, [pc, #68]	; (8008a9c <UARTEx_SetNbDataToProcess+0x94>)
 8008a58:	5c8a      	ldrb	r2, [r1, r2]
 8008a5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a5e:	7b3a      	ldrb	r2, [r7, #12]
 8008a60:	490f      	ldr	r1, [pc, #60]	; (8008aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8008a62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	7b7a      	ldrb	r2, [r7, #13]
 8008a74:	4909      	ldr	r1, [pc, #36]	; (8008a9c <UARTEx_SetNbDataToProcess+0x94>)
 8008a76:	5c8a      	ldrb	r2, [r1, r2]
 8008a78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a7c:	7b7a      	ldrb	r2, [r7, #13]
 8008a7e:	4908      	ldr	r1, [pc, #32]	; (8008aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8008a80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a82:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a8e:	bf00      	nop
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	08009030 	.word	0x08009030
 8008aa0:	08009038 	.word	0x08009038

08008aa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	f107 001c 	add.w	r0, r7, #28
 8008ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d120      	bne.n	8008afe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	4b2a      	ldr	r3, [pc, #168]	; (8008b78 <USB_CoreInit+0xd4>)
 8008ace:	4013      	ands	r3, r2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d105      	bne.n	8008af2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f914 	bl	8008d20 <USB_CoreReset>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]
 8008afc:	e01a      	b.n	8008b34 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f908 	bl	8008d20 <USB_CoreReset>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38
 8008b26:	e005      	b.n	8008b34 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d116      	bne.n	8008b68 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b48:	4b0c      	ldr	r3, [pc, #48]	; (8008b7c <USB_CoreInit+0xd8>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f043 0206 	orr.w	r2, r3, #6
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f043 0220 	orr.w	r2, r3, #32
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b74:	b004      	add	sp, #16
 8008b76:	4770      	bx	lr
 8008b78:	ffbdffbf 	.word	0xffbdffbf
 8008b7c:	03ee0000 	.word	0x03ee0000

08008b80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f023 0201 	bic.w	r2, r3, #1
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d115      	bne.n	8008bf0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f7fa fb0d 	bl	80031f0 <HAL_Delay>
      ms++;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f891 	bl	8008d04 <USB_GetMode>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d01e      	beq.n	8008c26 <USB_SetCurrentMode+0x84>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b31      	cmp	r3, #49	; 0x31
 8008bec:	d9f0      	bls.n	8008bd0 <USB_SetCurrentMode+0x2e>
 8008bee:	e01a      	b.n	8008c26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d115      	bne.n	8008c22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c02:	2001      	movs	r0, #1
 8008c04:	f7fa faf4 	bl	80031f0 <HAL_Delay>
      ms++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f878 	bl	8008d04 <USB_GetMode>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <USB_SetCurrentMode+0x84>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b31      	cmp	r3, #49	; 0x31
 8008c1e:	d9f0      	bls.n	8008c02 <USB_SetCurrentMode+0x60>
 8008c20:	e001      	b.n	8008c26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e005      	b.n	8008c32 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b32      	cmp	r3, #50	; 0x32
 8008c2a:	d101      	bne.n	8008c30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4a13      	ldr	r2, [pc, #76]	; (8008ca0 <USB_FlushTxFifo+0x64>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d901      	bls.n	8008c5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e01b      	b.n	8008c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	daf2      	bge.n	8008c4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	019b      	lsls	r3, r3, #6
 8008c6c:	f043 0220 	orr.w	r2, r3, #32
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <USB_FlushTxFifo+0x64>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d901      	bls.n	8008c86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e006      	b.n	8008c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f003 0320 	and.w	r3, r3, #32
 8008c8e:	2b20      	cmp	r3, #32
 8008c90:	d0f0      	beq.n	8008c74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	00030d40 	.word	0x00030d40

08008ca4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4a11      	ldr	r2, [pc, #68]	; (8008d00 <USB_FlushRxFifo+0x5c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d901      	bls.n	8008cc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e018      	b.n	8008cf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	daf2      	bge.n	8008cb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2210      	movs	r2, #16
 8008cd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4a08      	ldr	r2, [pc, #32]	; (8008d00 <USB_FlushRxFifo+0x5c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d901      	bls.n	8008ce6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e006      	b.n	8008cf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f003 0310 	and.w	r3, r3, #16
 8008cee:	2b10      	cmp	r3, #16
 8008cf0:	d0f0      	beq.n	8008cd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	00030d40 	.word	0x00030d40

08008d04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	f003 0301 	and.w	r3, r3, #1
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4a13      	ldr	r2, [pc, #76]	; (8008d84 <USB_CoreReset+0x64>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d901      	bls.n	8008d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e01b      	b.n	8008d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	daf2      	bge.n	8008d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f043 0201 	orr.w	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <USB_CoreReset+0x64>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d901      	bls.n	8008d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e006      	b.n	8008d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d0f0      	beq.n	8008d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	00030d40 	.word	0x00030d40

08008d88 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d88:	b084      	sub	sp, #16
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b086      	sub	sp, #24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008da8:	461a      	mov	r2, r3
 8008daa:	2300      	movs	r3, #0
 8008dac:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d018      	beq.n	8008e04 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d10a      	bne.n	8008dee <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008de6:	f043 0304 	orr.w	r3, r3, #4
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	e014      	b.n	8008e18 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008dfc:	f023 0304 	bic.w	r3, r3, #4
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	e009      	b.n	8008e18 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e12:	f023 0304 	bic.w	r3, r3, #4
 8008e16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e18:	2110      	movs	r1, #16
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff ff0e 	bl	8008c3c <USB_FlushTxFifo>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff ff3a 	bl	8008ca4 <USB_FlushRxFifo>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	e015      	b.n	8008e6c <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e60:	461a      	mov	r2, r3
 8008e62:	2300      	movs	r3, #0
 8008e64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	613b      	str	r3, [r7, #16]
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d3e5      	bcc.n	8008e40 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a13      	ldr	r2, [pc, #76]	; (8008ee8 <USB_HostInit+0x160>)
 8008e9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a13      	ldr	r2, [pc, #76]	; (8008eec <USB_HostInit+0x164>)
 8008ea0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008ea4:	e009      	b.n	8008eba <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2280      	movs	r2, #128	; 0x80
 8008eaa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a10      	ldr	r2, [pc, #64]	; (8008ef0 <USB_HostInit+0x168>)
 8008eb0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a0f      	ldr	r2, [pc, #60]	; (8008ef4 <USB_HostInit+0x16c>)
 8008eb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d105      	bne.n	8008ecc <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	f043 0210 	orr.w	r2, r3, #16
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699a      	ldr	r2, [r3, #24]
 8008ed0:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <USB_HostInit+0x170>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ee4:	b004      	add	sp, #16
 8008ee6:	4770      	bx	lr
 8008ee8:	01000200 	.word	0x01000200
 8008eec:	00e00300 	.word	0x00e00300
 8008ef0:	00600080 	.word	0x00600080
 8008ef4:	004000e0 	.word	0x004000e0
 8008ef8:	a3200008 	.word	0xa3200008

08008efc <__libc_init_array>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	4d0d      	ldr	r5, [pc, #52]	; (8008f34 <__libc_init_array+0x38>)
 8008f00:	4c0d      	ldr	r4, [pc, #52]	; (8008f38 <__libc_init_array+0x3c>)
 8008f02:	1b64      	subs	r4, r4, r5
 8008f04:	10a4      	asrs	r4, r4, #2
 8008f06:	2600      	movs	r6, #0
 8008f08:	42a6      	cmp	r6, r4
 8008f0a:	d109      	bne.n	8008f20 <__libc_init_array+0x24>
 8008f0c:	4d0b      	ldr	r5, [pc, #44]	; (8008f3c <__libc_init_array+0x40>)
 8008f0e:	4c0c      	ldr	r4, [pc, #48]	; (8008f40 <__libc_init_array+0x44>)
 8008f10:	f000 f82e 	bl	8008f70 <_init>
 8008f14:	1b64      	subs	r4, r4, r5
 8008f16:	10a4      	asrs	r4, r4, #2
 8008f18:	2600      	movs	r6, #0
 8008f1a:	42a6      	cmp	r6, r4
 8008f1c:	d105      	bne.n	8008f2a <__libc_init_array+0x2e>
 8008f1e:	bd70      	pop	{r4, r5, r6, pc}
 8008f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f24:	4798      	blx	r3
 8008f26:	3601      	adds	r6, #1
 8008f28:	e7ee      	b.n	8008f08 <__libc_init_array+0xc>
 8008f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f2e:	4798      	blx	r3
 8008f30:	3601      	adds	r6, #1
 8008f32:	e7f2      	b.n	8008f1a <__libc_init_array+0x1e>
 8008f34:	08009048 	.word	0x08009048
 8008f38:	08009048 	.word	0x08009048
 8008f3c:	08009048 	.word	0x08009048
 8008f40:	0800904c 	.word	0x0800904c

08008f44 <memcpy>:
 8008f44:	440a      	add	r2, r1
 8008f46:	4291      	cmp	r1, r2
 8008f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f4c:	d100      	bne.n	8008f50 <memcpy+0xc>
 8008f4e:	4770      	bx	lr
 8008f50:	b510      	push	{r4, lr}
 8008f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f5a:	4291      	cmp	r1, r2
 8008f5c:	d1f9      	bne.n	8008f52 <memcpy+0xe>
 8008f5e:	bd10      	pop	{r4, pc}

08008f60 <memset>:
 8008f60:	4402      	add	r2, r0
 8008f62:	4603      	mov	r3, r0
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d100      	bne.n	8008f6a <memset+0xa>
 8008f68:	4770      	bx	lr
 8008f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f6e:	e7f9      	b.n	8008f64 <memset+0x4>

08008f70 <_init>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	bf00      	nop
 8008f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f76:	bc08      	pop	{r3}
 8008f78:	469e      	mov	lr, r3
 8008f7a:	4770      	bx	lr

08008f7c <_fini>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr
