/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

UART_HandleTypeDef huart3;

HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
TaskHandle_t xTaskHandle1=NULL;
TaskHandle_t xTaskHandle2=NULL;

//binary semaphore handle
xSemaphoreHandle xBinarySemaphore;

// CAN typedef
FDCAN_TxHeaderTypeDef CANTxHeader;
FDCAN_RxHeaderTypeDef CANRxHeader;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_FDCAN2_Init(void);
static void MX_USB_OTG_FS_HCD_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_FDCAN1_Init(void);
/* USER CODE BEGIN PFP */
// Used for SEGGER System View trace
extern void SEGGER_UART_init(U32 baud);
// Used to print messages on UART
void USART_Send(char* user_data);
/* Creating 2 CANs Tasks*/
void FDCAN1_Task( void *pvParameters );
void FDCAN2_Task( void *pvParameters );
void FDCAN1_Tx(void);
void FDCAN2_Tx(void);
void FDCAN1_Rx(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Variable for UART print
char usr_msg[250]={0};
uint8_t FDCAN1_Tx_Message[5] = {'H'};
uint8_t FDCAN2_Tx_Message[5] = {'O'};
uint8_t Received_msg[8];

//#ifdef USE_SEMIHOSTING
//extern void initialise_monitor_handles(void);
//#endif
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_FDCAN2_Init();
  MX_USB_OTG_FS_HCD_Init();
  MX_USART3_UART_Init();
  MX_FDCAN1_Init();
  /* USER CODE BEGIN 2 */
  // Program start LED - Visually indication program has started
  // Blue LED wblinks 5 times with T=100ms
    int Start_Counter = 0;
    while(Start_Counter < 5)
    {
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
		HAL_Delay(100);
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
		HAL_Delay(100);
		Start_Counter++;
    }

	// Enable CCYCCNT Counter for SEGGER SYSTEM VIEW
	DWT->CTRL |= (1 << 0);

	// Used for SEGGER UART
	// SEGGER System View trace must be selected as UART with Baud Rate of 500Kb
	SEGGER_UART_init(500000);

	//Starting SEGGER SYSVIEW
	SEGGER_SYSVIEW_Conf();

	// Printing Start of program on UART
	sprintf(usr_msg,"Real Time CAN Bus synchronized communication\r\n");
	USART_Send(usr_msg);

	// Activating CAN ISR notification
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_TX_COMPLETE,
			FDCAN_IT_TX_COMPLETE) != HAL_OK)
	{
		Error_Handler();
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE | FDCAN_IT_TX_COMPLETE,
			FDCAN_IT_TX_COMPLETE) != HAL_OK)
	{
		Error_Handler();
	}

	// Starting CAN 1 & CAN 2
	HAL_FDCAN_Start(&hfdcan1);
	HAL_FDCAN_Start(&hfdcan2);

	//Creating a binary semaphore
	vSemaphoreCreateBinary(xBinarySemaphore);

	if(xBinarySemaphore != NULL)
	{
		/* Create CAN1 Task. */
		xTaskCreate(	FDCAN1_Task,		/* Pointer to the function that implements the task. */
						"CAN1 Task",	/* Text name for the task.  This is to facilitate debugging only. */
						500,		/* Stack depth in words. */
						NULL,		/* We are not using the task parameter. */
						1,			/* This task will run at priority 1. */
						NULL );		/* We are not using the task handle. */

		/* Create CAN2 Task */
		xTaskCreate( FDCAN2_Task, "CAN2 Task", 500, NULL, 1, NULL );

		//makes sema available for the first time
		xSemaphoreGive(xBinarySemaphore);

		/* Start the scheduler so our tasks start executing. */
		vTaskStartScheduler();
	}
	else
	{
		// UART print binary semaphore failed
		sprintf(usr_msg,"Failed to create binary semaphore\r\n");
		USART_Send(usr_msg);
	}

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // If Green LED flashed with T=500ms then you are inside main while loop
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
  	  HAL_Delay(500);
  	  HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
  	  HAL_Delay(500);
  	  Start_Counter++;
  }

	// Stopping CAN1 & CAN2
	HAL_FDCAN_Stop(&hfdcan1);
	HAL_FDCAN_Stop(&hfdcan2);

	//HAL_FDCAN_DeactivateNotification
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 120;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 15;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{

  /* USER CODE BEGIN FDCAN1_Init 0 */

  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
  hfdcan1.Init.AutoRetransmission = ENABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 16;
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 4;
  hfdcan1.Init.NominalTimeSeg2 = 3;
  hfdcan1.Init.DataPrescaler = 1;
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 1;
  hfdcan1.Init.DataTimeSeg2 = 1;
  hfdcan1.Init.MessageRAMOffset = 0;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.RxFifo0ElmtsNbr = 10;
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.RxFifo1ElmtsNbr = 10;
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.RxBuffersNbr = 32;
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.TxEventsNbr = 10;
  hfdcan1.Init.TxBuffersNbr = 10;
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}

/**
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{

  /* USER CODE BEGIN FDCAN2_Init 0 */

  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
  hfdcan2.Init.AutoRetransmission = ENABLE;
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 16;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 4;
  hfdcan2.Init.NominalTimeSeg2 = 3;
  hfdcan2.Init.DataPrescaler = 1;
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 1;
  hfdcan2.Init.DataTimeSeg2 = 1;
  hfdcan2.Init.MessageRAMOffset = 0;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
  hfdcan2.Init.RxFifo0ElmtsNbr = 10;
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.RxFifo1ElmtsNbr = 10;
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.RxBuffersNbr = 32;
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.TxEventsNbr = 10;
  hfdcan2.Init.TxBuffersNbr = 0;
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{

  /* USER CODE BEGIN USB_OTG_FS_Init 0 */

  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_LED_Pin|Green_LED_Pin|Blue_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : Red_LED_Pin Green_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Red_LED_Pin|Green_LED_Pin|Blue_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
/*
 * This function will print CAN 1 received messages to UART
 */
void FDCAN1_Task( void *pvParameters )
{
	const char *pcTaskName = "CAN1 message to be printed on UART\r\n";

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		//Taking binary semaphore*/
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );

		/* Print out CAN1 message*/
		sprintf( usr_msg,"%s",pcTaskName);
		USART_Send(usr_msg);

		FDCAN1_Tx();

		// Blinking green LED with T=100ms
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
		HAL_Delay(10);
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
		HAL_Delay(10);

		// Task is done and now giving back semaphore
		xSemaphoreGive(xBinarySemaphore);

		/*Now this task will be blocked for 1 ticks */
		vTaskDelay( pdMS_TO_TICKS(1) );
	}
}
/*-----------------------------------------------------------*/
/*
 * This function will print CAN 2 received messages to UART
 */
void FDCAN2_Task( void *pvParameters )
{

	const char *pcTaskName = "Task 2 is running\r\n";

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{

		//before printing , lets own the semaphore or take the semaphore */
		xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );

		/* Print out the name of this task. */
		sprintf( usr_msg,"%s",pcTaskName);
		USART_Send(usr_msg);

		FDCAN2_Tx();

		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
		HAL_Delay(10);
		HAL_GPIO_TogglePin(GPIOC, LED_Blue_PIN);
		HAL_Delay(10);

		//give the semaphore here. give operation increases the bin sema value back to 1
		xSemaphoreGive(xBinarySemaphore);

		/*Now this task will be blocked for 1 tick */
		vTaskDelay( pdMS_TO_TICKS(1));
	}
}


void USART_Send(char* user_data)
{
	if (HAL_UART_Transmit(&huart3,(uint8_t*)user_data,strlen(user_data), HAL_MAX_DELAY) != HAL_OK)
	{
		// Error occurred
		Error_Handler();
	}
}

/*
 * CAN 1 Transmit function
 */
void FDCAN1_Tx(void)
{
	//HAL_FDCAN_AddMessageToTxBuffer

	//HAL_FDCAN_EnableTxBufferRequest

//	HAL_FDCAN_GetRxMessage
//
//	HAL_FDCAN_IsRxBufferMessageAvailable
//
//	HAL_FDCAN_IsTxBufferMessagePending
//
//	//HAL_FDCAN_GetRxFifoFillLevel
//
//	//HAL_FDCAN_GetTxFifoFreeLevel
//
//
//
//	HAL_FDCAN_TxBufferCompleteCallback
//
//	HAL_FDCAN_RxBufferNewMessageCallback
//
//	HAL_FDCAN_GetState
//
//
//	HAL_FDCAN_GetError


	CANTxHeader.IdType = FDCAN_STANDARD_ID;
	CANTxHeader.TxFrameType = FDCAN_DATA_FRAME;
	CANTxHeader.DataLength = FDCAN_DLC_BYTES_8;
	CANTxHeader.Identifier = 0x65;

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CANTxHeader, FDCAN1_Tx_Message) != HAL_OK)
	{
		Error_Handler();
	}

//	if(HAL_FDCAN_AddMessageToTxBuffer(&hfdcan1, &CANTxHeader, FDCAN1_Tx_Message, FDCAN_TX_BUFFER0) != HAL_OK)
//	{
//		Error_Handler();
//	}

	// Using pull method to wait until transmission is complete
	//while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan1, FDCAN_TX_BUFFER0));
	sprintf(usr_msg,"FDCAN 1 message transmitted from FDCAN1_TX\r\n");
	USART_Send(usr_msg);
}


/*
 * CAN 1 Transmit function
 */
void FDCAN2_Tx(void)
{
	CANTxHeader.IdType = FDCAN_STANDARD_ID;
	CANTxHeader.TxFrameType = FDCAN_DATA_FRAME;
	CANTxHeader.DataLength = FDCAN_DLC_BYTES_8;
	CANTxHeader.Identifier = 0x35D;

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CANTxHeader, FDCAN2_Tx_Message) != HAL_OK)
	{
		Error_Handler();
	}
//	if(HAL_FDCAN_AddMessageToTxBuffer(&hfdcan2, &CANTxHeader, FDCAN2_Tx_Message, FDCAN_TX_BUFFER1) != HAL_OK)
//	{
//		Error_Handler();
//	}

	// Using pull method to wait until transmission is complete
	//while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan1, FDCAN_TX_BUFFER0));
	sprintf(usr_msg,"FDCAN 2 message transmitted from FDCAN2_Tx\r\n");
	USART_Send(usr_msg);
}


/*
 * CAN 1 Receve function
 */
void FDCAN1_Rx(void)
{
	while( !HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0));
//	{
//		sprintf(usr_msg,"FDCAN 1 message received\r\n");
//		USART_Send(usr_msg);
//	}
//	else
//	{
//		sprintf(usr_msg,"FDCAN 1 message received\r\n");
//		USART_Send(usr_msg);
//	}
//	if (HAL_FDCAN_GetRxMessage(hfdcan, RxLocation, pRxHeader, pRxData) != HAL_OK)
//	{
//		Error_Handler();
//	}

}


//
///*
// * This function is called whenever CAN transmission is complete
// */
//void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
//{
//	sprintf(usr_msg,"inside HAL_FDCAN_TxBufferCompleteCallback\r\n");
//	USART_Send(usr_msg);
//
//	if(hfdcan->Instance == FDCAN1)
//	{
//		sprintf(usr_msg,"FDCAN 1 HAL_FDCAN_TxBufferCompleteCallback\r\n");
//		USART_Send(usr_msg);
//	}
//	else
//	{
//		sprintf(usr_msg,"FDCAN 2 HAL_FDCAN_TxBufferCompleteCallback\r\n");
//		USART_Send(usr_msg);
//	}
//
////	if (HAL_FDCAN_GetRxMessage(hfdcan, RxLocation, pRxHeader, pRxData) != HAL_OK)
////	{
////		Error_Handler();
////	}
//}


///*
// * This function will be called when a new CAN message is received
// */
//void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
//{
//	sprintf(usr_msg,"HAL_FDCAN_RxBufferNewMessageCallback\r\n");
//	USART_Send(usr_msg);
//}


//void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
//{
//	if(hfdcan->Instance == FDCAN1)
//	{
//		sprintf(usr_msg,"FDCAN 1 HAL_FDCAN_RxFifo0Callback\r\n");
//		USART_Send(usr_msg);
//	}
//	else if (hfdcan->Instance == FDCAN2)
//	{
//		sprintf(usr_msg,"FDCAN 2 HAL_FDCAN_RxFifo0Callback\r\n");
//		USART_Send(usr_msg);
//	}
//	else
//	{
//		sprintf(usr_msg,"None HAL_FDCAN_RxFifo0Callback\r\n");
//		USART_Send(usr_msg);
//	}
//}


//void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
//{
//
//}


/*
uint32_t HAL_FDCAN_IsTxBufferMessagePending(FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex);
uint32_t HAL_FDCAN_IsRxBufferMessageAvailable(FDCAN_HandleTypeDef *hfdcan, uint32_t RxBufferIndex);
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData);
*/

void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
	sprintf(usr_msg,"CAN Error\r\n");
	USART_Send(usr_msg);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
		HAL_Delay(100);
		HAL_GPIO_TogglePin(GPIOC, LED_Green_PIN);
		HAL_Delay(100);
	}
}


void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
	if (hfdcan->Instance == FDCAN1)
	{
		sprintf(usr_msg,"FDCAN 1 Error: \r\n");
		USART_Send(usr_msg);
		MX_FDCAN1_Init();
	}
	else
	{
		sprintf(usr_msg,"FDCAN 2 Error: \r\n");
		USART_Send(usr_msg);
		MX_FDCAN2_Init();
	}

	if( ErrorStatusITs == FDCAN_IT_ERROR_PASSIVE)
	{
		sprintf(usr_msg,"FDCAN_IT_ERROR_PASSIVE\r\n");
		USART_Send(usr_msg);
	}
	if( ErrorStatusITs == FDCAN_IT_ERROR_WARNING)
	{
		sprintf(usr_msg,"FDCAN_IT_ERROR_WARNING\r\n");
		USART_Send(usr_msg);
	}
	if( ErrorStatusITs == FDCAN_IT_BUS_OFF)
	{
		sprintf(usr_msg,"FDCAN_IT_BUS_OFF\r\n");
		USART_Send(usr_msg);
	}

	sprintf(usr_msg,"\r\n");
	USART_Send(usr_msg);
}

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  sprintf(usr_msg,"Error_Handler\r\n");
  USART_Send(usr_msg);
  while (1)
  {
	  //Red LED blinks with a T=100ms
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
		HAL_Delay(100);
		HAL_GPIO_TogglePin(GPIOC, LED_Red_PIN);
		HAL_Delay(100);
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
